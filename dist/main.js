import { createRequire as __WEBPACK_EXTERNAL_createRequire } from "module";
/******/ var __webpack_modules__ = ({

/***/ 9483:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.issue = exports.issueCommand = void 0;
const os = __importStar(__nccwpck_require__(2037));
const utils_1 = __nccwpck_require__(2994);
/**
 * Commands
 *
 * Command Format:
 *   ::name key=value,key=value::message
 *
 * Examples:
 *   ::warning::This is the message
 *   ::set-env name=MY_VAR::some value
 */
function issueCommand(command, properties, message) {
    const cmd = new Command(command, properties, message);
    process.stdout.write(cmd.toString() + os.EOL);
}
exports.issueCommand = issueCommand;
function issue(name, message = '') {
    issueCommand(name, {}, message);
}
exports.issue = issue;
const CMD_STRING = '::';
class Command {
    constructor(command, properties, message) {
        if (!command) {
            command = 'missing.command';
        }
        this.command = command;
        this.properties = properties;
        this.message = message;
    }
    toString() {
        let cmdStr = CMD_STRING + this.command;
        if (this.properties && Object.keys(this.properties).length > 0) {
            cmdStr += ' ';
            let first = true;
            for (const key in this.properties) {
                if (this.properties.hasOwnProperty(key)) {
                    const val = this.properties[key];
                    if (val) {
                        if (first) {
                            first = false;
                        }
                        else {
                            cmdStr += ',';
                        }
                        cmdStr += `${key}=${escapeProperty(val)}`;
                    }
                }
            }
        }
        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;
        return cmdStr;
    }
}
function escapeData(s) {
    return utils_1.toCommandValue(s)
        .replace(/%/g, '%25')
        .replace(/\r/g, '%0D')
        .replace(/\n/g, '%0A');
}
function escapeProperty(s) {
    return utils_1.toCommandValue(s)
        .replace(/%/g, '%25')
        .replace(/\r/g, '%0D')
        .replace(/\n/g, '%0A')
        .replace(/:/g, '%3A')
        .replace(/,/g, '%2C');
}
//# sourceMappingURL=command.js.map

/***/ }),

/***/ 7733:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getIDToken = exports.getState = exports.saveState = exports.group = exports.endGroup = exports.startGroup = exports.info = exports.notice = exports.warning = exports.error = exports.debug = exports.isDebug = exports.setFailed = exports.setCommandEcho = exports.setOutput = exports.getBooleanInput = exports.getMultilineInput = exports.getInput = exports.addPath = exports.setSecret = exports.exportVariable = exports.ExitCode = void 0;
const command_1 = __nccwpck_require__(9483);
const file_command_1 = __nccwpck_require__(8541);
const utils_1 = __nccwpck_require__(2994);
const os = __importStar(__nccwpck_require__(2037));
const path = __importStar(__nccwpck_require__(1017));
const oidc_utils_1 = __nccwpck_require__(2422);
/**
 * The code to exit an action
 */
var ExitCode;
(function (ExitCode) {
    /**
     * A code indicating that the action was successful
     */
    ExitCode[ExitCode["Success"] = 0] = "Success";
    /**
     * A code indicating that the action was a failure
     */
    ExitCode[ExitCode["Failure"] = 1] = "Failure";
})(ExitCode = exports.ExitCode || (exports.ExitCode = {}));
//-----------------------------------------------------------------------
// Variables
//-----------------------------------------------------------------------
/**
 * Sets env variable for this action and future actions in the job
 * @param name the name of the variable to set
 * @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function exportVariable(name, val) {
    const convertedVal = utils_1.toCommandValue(val);
    process.env[name] = convertedVal;
    const filePath = process.env['GITHUB_ENV'] || '';
    if (filePath) {
        return file_command_1.issueFileCommand('ENV', file_command_1.prepareKeyValueMessage(name, val));
    }
    command_1.issueCommand('set-env', { name }, convertedVal);
}
exports.exportVariable = exportVariable;
/**
 * Registers a secret which will get masked from logs
 * @param secret value of the secret
 */
function setSecret(secret) {
    command_1.issueCommand('add-mask', {}, secret);
}
exports.setSecret = setSecret;
/**
 * Prepends inputPath to the PATH (for this action and future actions)
 * @param inputPath
 */
function addPath(inputPath) {
    const filePath = process.env['GITHUB_PATH'] || '';
    if (filePath) {
        file_command_1.issueFileCommand('PATH', inputPath);
    }
    else {
        command_1.issueCommand('add-path', {}, inputPath);
    }
    process.env['PATH'] = `${inputPath}${path.delimiter}${process.env['PATH']}`;
}
exports.addPath = addPath;
/**
 * Gets the value of an input.
 * Unless trimWhitespace is set to false in InputOptions, the value is also trimmed.
 * Returns an empty string if the value is not defined.
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   string
 */
function getInput(name, options) {
    const val = process.env[`INPUT_${name.replace(/ /g, '_').toUpperCase()}`] || '';
    if (options && options.required && !val) {
        throw new Error(`Input required and not supplied: ${name}`);
    }
    if (options && options.trimWhitespace === false) {
        return val;
    }
    return val.trim();
}
exports.getInput = getInput;
/**
 * Gets the values of an multiline input.  Each value is also trimmed.
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   string[]
 *
 */
function getMultilineInput(name, options) {
    const inputs = getInput(name, options)
        .split('\n')
        .filter(x => x !== '');
    if (options && options.trimWhitespace === false) {
        return inputs;
    }
    return inputs.map(input => input.trim());
}
exports.getMultilineInput = getMultilineInput;
/**
 * Gets the input value of the boolean type in the YAML 1.2 "core schema" specification.
 * Support boolean input list: `true | True | TRUE | false | False | FALSE` .
 * The return value is also in boolean type.
 * ref: https://yaml.org/spec/1.2/spec.html#id2804923
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   boolean
 */
function getBooleanInput(name, options) {
    const trueValue = ['true', 'True', 'TRUE'];
    const falseValue = ['false', 'False', 'FALSE'];
    const val = getInput(name, options);
    if (trueValue.includes(val))
        return true;
    if (falseValue.includes(val))
        return false;
    throw new TypeError(`Input does not meet YAML 1.2 "Core Schema" specification: ${name}\n` +
        `Support boolean input list: \`true | True | TRUE | false | False | FALSE\``);
}
exports.getBooleanInput = getBooleanInput;
/**
 * Sets the value of an output.
 *
 * @param     name     name of the output to set
 * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function setOutput(name, value) {
    const filePath = process.env['GITHUB_OUTPUT'] || '';
    if (filePath) {
        return file_command_1.issueFileCommand('OUTPUT', file_command_1.prepareKeyValueMessage(name, value));
    }
    process.stdout.write(os.EOL);
    command_1.issueCommand('set-output', { name }, utils_1.toCommandValue(value));
}
exports.setOutput = setOutput;
/**
 * Enables or disables the echoing of commands into stdout for the rest of the step.
 * Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.
 *
 */
function setCommandEcho(enabled) {
    command_1.issue('echo', enabled ? 'on' : 'off');
}
exports.setCommandEcho = setCommandEcho;
//-----------------------------------------------------------------------
// Results
//-----------------------------------------------------------------------
/**
 * Sets the action status to failed.
 * When the action exits it will be with an exit code of 1
 * @param message add error issue message
 */
function setFailed(message) {
    process.exitCode = ExitCode.Failure;
    error(message);
}
exports.setFailed = setFailed;
//-----------------------------------------------------------------------
// Logging Commands
//-----------------------------------------------------------------------
/**
 * Gets whether Actions Step Debug is on or not
 */
function isDebug() {
    return process.env['RUNNER_DEBUG'] === '1';
}
exports.isDebug = isDebug;
/**
 * Writes debug message to user log
 * @param message debug message
 */
function debug(message) {
    command_1.issueCommand('debug', {}, message);
}
exports.debug = debug;
/**
 * Adds an error issue
 * @param message error issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */
function error(message, properties = {}) {
    command_1.issueCommand('error', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
}
exports.error = error;
/**
 * Adds a warning issue
 * @param message warning issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */
function warning(message, properties = {}) {
    command_1.issueCommand('warning', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
}
exports.warning = warning;
/**
 * Adds a notice issue
 * @param message notice issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */
function notice(message, properties = {}) {
    command_1.issueCommand('notice', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
}
exports.notice = notice;
/**
 * Writes info to log with console.log.
 * @param message info message
 */
function info(message) {
    process.stdout.write(message + os.EOL);
}
exports.info = info;
/**
 * Begin an output group.
 *
 * Output until the next `groupEnd` will be foldable in this group
 *
 * @param name The name of the output group
 */
function startGroup(name) {
    command_1.issue('group', name);
}
exports.startGroup = startGroup;
/**
 * End an output group.
 */
function endGroup() {
    command_1.issue('endgroup');
}
exports.endGroup = endGroup;
/**
 * Wrap an asynchronous function call in a group.
 *
 * Returns the same type as the function itself.
 *
 * @param name The name of the group
 * @param fn The function to wrap in the group
 */
function group(name, fn) {
    return __awaiter(this, void 0, void 0, function* () {
        startGroup(name);
        let result;
        try {
            result = yield fn();
        }
        finally {
            endGroup();
        }
        return result;
    });
}
exports.group = group;
//-----------------------------------------------------------------------
// Wrapper action state
//-----------------------------------------------------------------------
/**
 * Saves state for current action, the state can only be retrieved by this action's post job execution.
 *
 * @param     name     name of the state to store
 * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function saveState(name, value) {
    const filePath = process.env['GITHUB_STATE'] || '';
    if (filePath) {
        return file_command_1.issueFileCommand('STATE', file_command_1.prepareKeyValueMessage(name, value));
    }
    command_1.issueCommand('save-state', { name }, utils_1.toCommandValue(value));
}
exports.saveState = saveState;
/**
 * Gets the value of an state set by this action's main execution.
 *
 * @param     name     name of the state to get
 * @returns   string
 */
function getState(name) {
    return process.env[`STATE_${name}`] || '';
}
exports.getState = getState;
function getIDToken(aud) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield oidc_utils_1.OidcClient.getIDToken(aud);
    });
}
exports.getIDToken = getIDToken;
/**
 * Summary exports
 */
var summary_1 = __nccwpck_require__(513);
Object.defineProperty(exports, "summary", ({ enumerable: true, get: function () { return summary_1.summary; } }));
/**
 * @deprecated use core.summary
 */
var summary_2 = __nccwpck_require__(513);
Object.defineProperty(exports, "markdownSummary", ({ enumerable: true, get: function () { return summary_2.markdownSummary; } }));
/**
 * Path exports
 */
var path_utils_1 = __nccwpck_require__(3084);
Object.defineProperty(exports, "toPosixPath", ({ enumerable: true, get: function () { return path_utils_1.toPosixPath; } }));
Object.defineProperty(exports, "toWin32Path", ({ enumerable: true, get: function () { return path_utils_1.toWin32Path; } }));
Object.defineProperty(exports, "toPlatformPath", ({ enumerable: true, get: function () { return path_utils_1.toPlatformPath; } }));
//# sourceMappingURL=core.js.map

/***/ }),

/***/ 8541:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {


// For internal use, subject to change.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.prepareKeyValueMessage = exports.issueFileCommand = void 0;
// We use any as a valid input type
/* eslint-disable @typescript-eslint/no-explicit-any */
const fs = __importStar(__nccwpck_require__(7147));
const os = __importStar(__nccwpck_require__(2037));
const uuid_1 = __nccwpck_require__(2033);
const utils_1 = __nccwpck_require__(2994);
function issueFileCommand(command, message) {
    const filePath = process.env[`GITHUB_${command}`];
    if (!filePath) {
        throw new Error(`Unable to find environment variable for file command ${command}`);
    }
    if (!fs.existsSync(filePath)) {
        throw new Error(`Missing file at path: ${filePath}`);
    }
    fs.appendFileSync(filePath, `${utils_1.toCommandValue(message)}${os.EOL}`, {
        encoding: 'utf8'
    });
}
exports.issueFileCommand = issueFileCommand;
function prepareKeyValueMessage(key, value) {
    const delimiter = `ghadelimiter_${uuid_1.v4()}`;
    const convertedValue = utils_1.toCommandValue(value);
    // These should realistically never happen, but just in case someone finds a
    // way to exploit uuid generation let's not allow keys or values that contain
    // the delimiter.
    if (key.includes(delimiter)) {
        throw new Error(`Unexpected input: name should not contain the delimiter "${delimiter}"`);
    }
    if (convertedValue.includes(delimiter)) {
        throw new Error(`Unexpected input: value should not contain the delimiter "${delimiter}"`);
    }
    return `${key}<<${delimiter}${os.EOL}${convertedValue}${os.EOL}${delimiter}`;
}
exports.prepareKeyValueMessage = prepareKeyValueMessage;
//# sourceMappingURL=file-command.js.map

/***/ }),

/***/ 2422:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OidcClient = void 0;
const http_client_1 = __nccwpck_require__(3569);
const auth_1 = __nccwpck_require__(6931);
const core_1 = __nccwpck_require__(7733);
class OidcClient {
    static createHttpClient(allowRetry = true, maxRetry = 10) {
        const requestOptions = {
            allowRetries: allowRetry,
            maxRetries: maxRetry
        };
        return new http_client_1.HttpClient('actions/oidc-client', [new auth_1.BearerCredentialHandler(OidcClient.getRequestToken())], requestOptions);
    }
    static getRequestToken() {
        const token = process.env['ACTIONS_ID_TOKEN_REQUEST_TOKEN'];
        if (!token) {
            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable');
        }
        return token;
    }
    static getIDTokenUrl() {
        const runtimeUrl = process.env['ACTIONS_ID_TOKEN_REQUEST_URL'];
        if (!runtimeUrl) {
            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable');
        }
        return runtimeUrl;
    }
    static getCall(id_token_url) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const httpclient = OidcClient.createHttpClient();
            const res = yield httpclient
                .getJson(id_token_url)
                .catch(error => {
                throw new Error(`Failed to get ID Token. \n 
        Error Code : ${error.statusCode}\n 
        Error Message: ${error.result.message}`);
            });
            const id_token = (_a = res.result) === null || _a === void 0 ? void 0 : _a.value;
            if (!id_token) {
                throw new Error('Response json body do not have ID Token field');
            }
            return id_token;
        });
    }
    static getIDToken(audience) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                // New ID Token is requested from action service
                let id_token_url = OidcClient.getIDTokenUrl();
                if (audience) {
                    const encodedAudience = encodeURIComponent(audience);
                    id_token_url = `${id_token_url}&audience=${encodedAudience}`;
                }
                core_1.debug(`ID token url is ${id_token_url}`);
                const id_token = yield OidcClient.getCall(id_token_url);
                core_1.setSecret(id_token);
                return id_token;
            }
            catch (error) {
                throw new Error(`Error message: ${error.message}`);
            }
        });
    }
}
exports.OidcClient = OidcClient;
//# sourceMappingURL=oidc-utils.js.map

/***/ }),

/***/ 3084:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = void 0;
const path = __importStar(__nccwpck_require__(1017));
/**
 * toPosixPath converts the given path to the posix form. On Windows, \\ will be
 * replaced with /.
 *
 * @param pth. Path to transform.
 * @return string Posix path.
 */
function toPosixPath(pth) {
    return pth.replace(/[\\]/g, '/');
}
exports.toPosixPath = toPosixPath;
/**
 * toWin32Path converts the given path to the win32 form. On Linux, / will be
 * replaced with \\.
 *
 * @param pth. Path to transform.
 * @return string Win32 path.
 */
function toWin32Path(pth) {
    return pth.replace(/[/]/g, '\\');
}
exports.toWin32Path = toWin32Path;
/**
 * toPlatformPath converts the given path to a platform-specific path. It does
 * this by replacing instances of / and \ with the platform-specific path
 * separator.
 *
 * @param pth The path to platformize.
 * @return string The platform-specific path.
 */
function toPlatformPath(pth) {
    return pth.replace(/[/\\]/g, path.sep);
}
exports.toPlatformPath = toPlatformPath;
//# sourceMappingURL=path-utils.js.map

/***/ }),

/***/ 513:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.summary = exports.markdownSummary = exports.SUMMARY_DOCS_URL = exports.SUMMARY_ENV_VAR = void 0;
const os_1 = __nccwpck_require__(2037);
const fs_1 = __nccwpck_require__(7147);
const { access, appendFile, writeFile } = fs_1.promises;
exports.SUMMARY_ENV_VAR = 'GITHUB_STEP_SUMMARY';
exports.SUMMARY_DOCS_URL = 'https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary';
class Summary {
    constructor() {
        this._buffer = '';
    }
    /**
     * Finds the summary file path from the environment, rejects if env var is not found or file does not exist
     * Also checks r/w permissions.
     *
     * @returns step summary file path
     */
    filePath() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._filePath) {
                return this._filePath;
            }
            const pathFromEnv = process.env[exports.SUMMARY_ENV_VAR];
            if (!pathFromEnv) {
                throw new Error(`Unable to find environment variable for $${exports.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`);
            }
            try {
                yield access(pathFromEnv, fs_1.constants.R_OK | fs_1.constants.W_OK);
            }
            catch (_a) {
                throw new Error(`Unable to access summary file: '${pathFromEnv}'. Check if the file has correct read/write permissions.`);
            }
            this._filePath = pathFromEnv;
            return this._filePath;
        });
    }
    /**
     * Wraps content in an HTML tag, adding any HTML attributes
     *
     * @param {string} tag HTML tag to wrap
     * @param {string | null} content content within the tag
     * @param {[attribute: string]: string} attrs key-value list of HTML attributes to add
     *
     * @returns {string} content wrapped in HTML element
     */
    wrap(tag, content, attrs = {}) {
        const htmlAttrs = Object.entries(attrs)
            .map(([key, value]) => ` ${key}="${value}"`)
            .join('');
        if (!content) {
            return `<${tag}${htmlAttrs}>`;
        }
        return `<${tag}${htmlAttrs}>${content}</${tag}>`;
    }
    /**
     * Writes text in the buffer to the summary buffer file and empties buffer. Will append by default.
     *
     * @param {SummaryWriteOptions} [options] (optional) options for write operation
     *
     * @returns {Promise<Summary>} summary instance
     */
    write(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const overwrite = !!(options === null || options === void 0 ? void 0 : options.overwrite);
            const filePath = yield this.filePath();
            const writeFunc = overwrite ? writeFile : appendFile;
            yield writeFunc(filePath, this._buffer, { encoding: 'utf8' });
            return this.emptyBuffer();
        });
    }
    /**
     * Clears the summary buffer and wipes the summary file
     *
     * @returns {Summary} summary instance
     */
    clear() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.emptyBuffer().write({ overwrite: true });
        });
    }
    /**
     * Returns the current summary buffer as a string
     *
     * @returns {string} string of summary buffer
     */
    stringify() {
        return this._buffer;
    }
    /**
     * If the summary buffer is empty
     *
     * @returns {boolen} true if the buffer is empty
     */
    isEmptyBuffer() {
        return this._buffer.length === 0;
    }
    /**
     * Resets the summary buffer without writing to summary file
     *
     * @returns {Summary} summary instance
     */
    emptyBuffer() {
        this._buffer = '';
        return this;
    }
    /**
     * Adds raw text to the summary buffer
     *
     * @param {string} text content to add
     * @param {boolean} [addEOL=false] (optional) append an EOL to the raw text (default: false)
     *
     * @returns {Summary} summary instance
     */
    addRaw(text, addEOL = false) {
        this._buffer += text;
        return addEOL ? this.addEOL() : this;
    }
    /**
     * Adds the operating system-specific end-of-line marker to the buffer
     *
     * @returns {Summary} summary instance
     */
    addEOL() {
        return this.addRaw(os_1.EOL);
    }
    /**
     * Adds an HTML codeblock to the summary buffer
     *
     * @param {string} code content to render within fenced code block
     * @param {string} lang (optional) language to syntax highlight code
     *
     * @returns {Summary} summary instance
     */
    addCodeBlock(code, lang) {
        const attrs = Object.assign({}, (lang && { lang }));
        const element = this.wrap('pre', this.wrap('code', code), attrs);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML list to the summary buffer
     *
     * @param {string[]} items list of items to render
     * @param {boolean} [ordered=false] (optional) if the rendered list should be ordered or not (default: false)
     *
     * @returns {Summary} summary instance
     */
    addList(items, ordered = false) {
        const tag = ordered ? 'ol' : 'ul';
        const listItems = items.map(item => this.wrap('li', item)).join('');
        const element = this.wrap(tag, listItems);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML table to the summary buffer
     *
     * @param {SummaryTableCell[]} rows table rows
     *
     * @returns {Summary} summary instance
     */
    addTable(rows) {
        const tableBody = rows
            .map(row => {
            const cells = row
                .map(cell => {
                if (typeof cell === 'string') {
                    return this.wrap('td', cell);
                }
                const { header, data, colspan, rowspan } = cell;
                const tag = header ? 'th' : 'td';
                const attrs = Object.assign(Object.assign({}, (colspan && { colspan })), (rowspan && { rowspan }));
                return this.wrap(tag, data, attrs);
            })
                .join('');
            return this.wrap('tr', cells);
        })
            .join('');
        const element = this.wrap('table', tableBody);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds a collapsable HTML details element to the summary buffer
     *
     * @param {string} label text for the closed state
     * @param {string} content collapsable content
     *
     * @returns {Summary} summary instance
     */
    addDetails(label, content) {
        const element = this.wrap('details', this.wrap('summary', label) + content);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML image tag to the summary buffer
     *
     * @param {string} src path to the image you to embed
     * @param {string} alt text description of the image
     * @param {SummaryImageOptions} options (optional) addition image attributes
     *
     * @returns {Summary} summary instance
     */
    addImage(src, alt, options) {
        const { width, height } = options || {};
        const attrs = Object.assign(Object.assign({}, (width && { width })), (height && { height }));
        const element = this.wrap('img', null, Object.assign({ src, alt }, attrs));
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML section heading element
     *
     * @param {string} text heading text
     * @param {number | string} [level=1] (optional) the heading level, default: 1
     *
     * @returns {Summary} summary instance
     */
    addHeading(text, level) {
        const tag = `h${level}`;
        const allowedTag = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].includes(tag)
            ? tag
            : 'h1';
        const element = this.wrap(allowedTag, text);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML thematic break (<hr>) to the summary buffer
     *
     * @returns {Summary} summary instance
     */
    addSeparator() {
        const element = this.wrap('hr', null);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML line break (<br>) to the summary buffer
     *
     * @returns {Summary} summary instance
     */
    addBreak() {
        const element = this.wrap('br', null);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML blockquote to the summary buffer
     *
     * @param {string} text quote text
     * @param {string} cite (optional) citation url
     *
     * @returns {Summary} summary instance
     */
    addQuote(text, cite) {
        const attrs = Object.assign({}, (cite && { cite }));
        const element = this.wrap('blockquote', text, attrs);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML anchor tag to the summary buffer
     *
     * @param {string} text link text/content
     * @param {string} href hyperlink
     *
     * @returns {Summary} summary instance
     */
    addLink(text, href) {
        const element = this.wrap('a', text, { href });
        return this.addRaw(element).addEOL();
    }
}
const _summary = new Summary();
/**
 * @deprecated use `core.summary`
 */
exports.markdownSummary = _summary;
exports.summary = _summary;
//# sourceMappingURL=summary.js.map

/***/ }),

/***/ 2994:
/***/ ((__unused_webpack_module, exports) => {


// We use any as a valid input type
/* eslint-disable @typescript-eslint/no-explicit-any */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toCommandProperties = exports.toCommandValue = void 0;
/**
 * Sanitizes an input into a string so it can be passed into issueCommand safely
 * @param input input to sanitize into a string
 */
function toCommandValue(input) {
    if (input === null || input === undefined) {
        return '';
    }
    else if (typeof input === 'string' || input instanceof String) {
        return input;
    }
    return JSON.stringify(input);
}
exports.toCommandValue = toCommandValue;
/**
 *
 * @param annotationProperties
 * @returns The command properties to send with the actual annotation command
 * See IssueCommandProperties: https://github.com/actions/runner/blob/main/src/Runner.Worker/ActionCommandManager.cs#L646
 */
function toCommandProperties(annotationProperties) {
    if (!Object.keys(annotationProperties).length) {
        return {};
    }
    return {
        title: annotationProperties.title,
        file: annotationProperties.file,
        line: annotationProperties.startLine,
        endLine: annotationProperties.endLine,
        col: annotationProperties.startColumn,
        endColumn: annotationProperties.endColumn
    };
}
exports.toCommandProperties = toCommandProperties;
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ 6931:
/***/ (function(__unused_webpack_module, exports) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PersonalAccessTokenCredentialHandler = exports.BearerCredentialHandler = exports.BasicCredentialHandler = void 0;
class BasicCredentialHandler {
    constructor(username, password) {
        this.username = username;
        this.password = password;
    }
    prepareRequest(options) {
        if (!options.headers) {
            throw Error('The request has no headers');
        }
        options.headers['Authorization'] = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString('base64')}`;
    }
    // This handler cannot handle 401
    canHandleAuthentication() {
        return false;
    }
    handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('not implemented');
        });
    }
}
exports.BasicCredentialHandler = BasicCredentialHandler;
class BearerCredentialHandler {
    constructor(token) {
        this.token = token;
    }
    // currently implements pre-authorization
    // TODO: support preAuth = false where it hooks on 401
    prepareRequest(options) {
        if (!options.headers) {
            throw Error('The request has no headers');
        }
        options.headers['Authorization'] = `Bearer ${this.token}`;
    }
    // This handler cannot handle 401
    canHandleAuthentication() {
        return false;
    }
    handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('not implemented');
        });
    }
}
exports.BearerCredentialHandler = BearerCredentialHandler;
class PersonalAccessTokenCredentialHandler {
    constructor(token) {
        this.token = token;
    }
    // currently implements pre-authorization
    // TODO: support preAuth = false where it hooks on 401
    prepareRequest(options) {
        if (!options.headers) {
            throw Error('The request has no headers');
        }
        options.headers['Authorization'] = `Basic ${Buffer.from(`PAT:${this.token}`).toString('base64')}`;
    }
    // This handler cannot handle 401
    canHandleAuthentication() {
        return false;
    }
    handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('not implemented');
        });
    }
}
exports.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;
//# sourceMappingURL=auth.js.map

/***/ }),

/***/ 3569:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {


/* eslint-disable @typescript-eslint/no-explicit-any */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HttpClient = exports.isHttps = exports.HttpClientResponse = exports.HttpClientError = exports.getProxyUrl = exports.MediaTypes = exports.Headers = exports.HttpCodes = void 0;
const http = __importStar(__nccwpck_require__(3685));
const https = __importStar(__nccwpck_require__(5687));
const pm = __importStar(__nccwpck_require__(2242));
const tunnel = __importStar(__nccwpck_require__(4249));
var HttpCodes;
(function (HttpCodes) {
    HttpCodes[HttpCodes["OK"] = 200] = "OK";
    HttpCodes[HttpCodes["MultipleChoices"] = 300] = "MultipleChoices";
    HttpCodes[HttpCodes["MovedPermanently"] = 301] = "MovedPermanently";
    HttpCodes[HttpCodes["ResourceMoved"] = 302] = "ResourceMoved";
    HttpCodes[HttpCodes["SeeOther"] = 303] = "SeeOther";
    HttpCodes[HttpCodes["NotModified"] = 304] = "NotModified";
    HttpCodes[HttpCodes["UseProxy"] = 305] = "UseProxy";
    HttpCodes[HttpCodes["SwitchProxy"] = 306] = "SwitchProxy";
    HttpCodes[HttpCodes["TemporaryRedirect"] = 307] = "TemporaryRedirect";
    HttpCodes[HttpCodes["PermanentRedirect"] = 308] = "PermanentRedirect";
    HttpCodes[HttpCodes["BadRequest"] = 400] = "BadRequest";
    HttpCodes[HttpCodes["Unauthorized"] = 401] = "Unauthorized";
    HttpCodes[HttpCodes["PaymentRequired"] = 402] = "PaymentRequired";
    HttpCodes[HttpCodes["Forbidden"] = 403] = "Forbidden";
    HttpCodes[HttpCodes["NotFound"] = 404] = "NotFound";
    HttpCodes[HttpCodes["MethodNotAllowed"] = 405] = "MethodNotAllowed";
    HttpCodes[HttpCodes["NotAcceptable"] = 406] = "NotAcceptable";
    HttpCodes[HttpCodes["ProxyAuthenticationRequired"] = 407] = "ProxyAuthenticationRequired";
    HttpCodes[HttpCodes["RequestTimeout"] = 408] = "RequestTimeout";
    HttpCodes[HttpCodes["Conflict"] = 409] = "Conflict";
    HttpCodes[HttpCodes["Gone"] = 410] = "Gone";
    HttpCodes[HttpCodes["TooManyRequests"] = 429] = "TooManyRequests";
    HttpCodes[HttpCodes["InternalServerError"] = 500] = "InternalServerError";
    HttpCodes[HttpCodes["NotImplemented"] = 501] = "NotImplemented";
    HttpCodes[HttpCodes["BadGateway"] = 502] = "BadGateway";
    HttpCodes[HttpCodes["ServiceUnavailable"] = 503] = "ServiceUnavailable";
    HttpCodes[HttpCodes["GatewayTimeout"] = 504] = "GatewayTimeout";
})(HttpCodes = exports.HttpCodes || (exports.HttpCodes = {}));
var Headers;
(function (Headers) {
    Headers["Accept"] = "accept";
    Headers["ContentType"] = "content-type";
})(Headers = exports.Headers || (exports.Headers = {}));
var MediaTypes;
(function (MediaTypes) {
    MediaTypes["ApplicationJson"] = "application/json";
})(MediaTypes = exports.MediaTypes || (exports.MediaTypes = {}));
/**
 * Returns the proxy URL, depending upon the supplied url and proxy environment variables.
 * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
 */
function getProxyUrl(serverUrl) {
    const proxyUrl = pm.getProxyUrl(new URL(serverUrl));
    return proxyUrl ? proxyUrl.href : '';
}
exports.getProxyUrl = getProxyUrl;
const HttpRedirectCodes = [
    HttpCodes.MovedPermanently,
    HttpCodes.ResourceMoved,
    HttpCodes.SeeOther,
    HttpCodes.TemporaryRedirect,
    HttpCodes.PermanentRedirect
];
const HttpResponseRetryCodes = [
    HttpCodes.BadGateway,
    HttpCodes.ServiceUnavailable,
    HttpCodes.GatewayTimeout
];
const RetryableHttpVerbs = ['OPTIONS', 'GET', 'DELETE', 'HEAD'];
const ExponentialBackoffCeiling = 10;
const ExponentialBackoffTimeSlice = 5;
class HttpClientError extends Error {
    constructor(message, statusCode) {
        super(message);
        this.name = 'HttpClientError';
        this.statusCode = statusCode;
        Object.setPrototypeOf(this, HttpClientError.prototype);
    }
}
exports.HttpClientError = HttpClientError;
class HttpClientResponse {
    constructor(message) {
        this.message = message;
    }
    readBody() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
                let output = Buffer.alloc(0);
                this.message.on('data', (chunk) => {
                    output = Buffer.concat([output, chunk]);
                });
                this.message.on('end', () => {
                    resolve(output.toString());
                });
            }));
        });
    }
}
exports.HttpClientResponse = HttpClientResponse;
function isHttps(requestUrl) {
    const parsedUrl = new URL(requestUrl);
    return parsedUrl.protocol === 'https:';
}
exports.isHttps = isHttps;
class HttpClient {
    constructor(userAgent, handlers, requestOptions) {
        this._ignoreSslError = false;
        this._allowRedirects = true;
        this._allowRedirectDowngrade = false;
        this._maxRedirects = 50;
        this._allowRetries = false;
        this._maxRetries = 1;
        this._keepAlive = false;
        this._disposed = false;
        this.userAgent = userAgent;
        this.handlers = handlers || [];
        this.requestOptions = requestOptions;
        if (requestOptions) {
            if (requestOptions.ignoreSslError != null) {
                this._ignoreSslError = requestOptions.ignoreSslError;
            }
            this._socketTimeout = requestOptions.socketTimeout;
            if (requestOptions.allowRedirects != null) {
                this._allowRedirects = requestOptions.allowRedirects;
            }
            if (requestOptions.allowRedirectDowngrade != null) {
                this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;
            }
            if (requestOptions.maxRedirects != null) {
                this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);
            }
            if (requestOptions.keepAlive != null) {
                this._keepAlive = requestOptions.keepAlive;
            }
            if (requestOptions.allowRetries != null) {
                this._allowRetries = requestOptions.allowRetries;
            }
            if (requestOptions.maxRetries != null) {
                this._maxRetries = requestOptions.maxRetries;
            }
        }
    }
    options(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('OPTIONS', requestUrl, null, additionalHeaders || {});
        });
    }
    get(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('GET', requestUrl, null, additionalHeaders || {});
        });
    }
    del(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('DELETE', requestUrl, null, additionalHeaders || {});
        });
    }
    post(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('POST', requestUrl, data, additionalHeaders || {});
        });
    }
    patch(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('PATCH', requestUrl, data, additionalHeaders || {});
        });
    }
    put(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('PUT', requestUrl, data, additionalHeaders || {});
        });
    }
    head(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('HEAD', requestUrl, null, additionalHeaders || {});
        });
    }
    sendStream(verb, requestUrl, stream, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request(verb, requestUrl, stream, additionalHeaders);
        });
    }
    /**
     * Gets a typed object from an endpoint
     * Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise
     */
    getJson(requestUrl, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            const res = yield this.get(requestUrl, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    postJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
            const res = yield this.post(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    putJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
            const res = yield this.put(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    patchJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
            const res = yield this.patch(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    /**
     * Makes a raw http request.
     * All other methods such as get, post, patch, and request ultimately call this.
     * Prefer get, del, post and patch
     */
    request(verb, requestUrl, data, headers) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._disposed) {
                throw new Error('Client has already been disposed.');
            }
            const parsedUrl = new URL(requestUrl);
            let info = this._prepareRequest(verb, parsedUrl, headers);
            // Only perform retries on reads since writes may not be idempotent.
            const maxTries = this._allowRetries && RetryableHttpVerbs.includes(verb)
                ? this._maxRetries + 1
                : 1;
            let numTries = 0;
            let response;
            do {
                response = yield this.requestRaw(info, data);
                // Check if it's an authentication challenge
                if (response &&
                    response.message &&
                    response.message.statusCode === HttpCodes.Unauthorized) {
                    let authenticationHandler;
                    for (const handler of this.handlers) {
                        if (handler.canHandleAuthentication(response)) {
                            authenticationHandler = handler;
                            break;
                        }
                    }
                    if (authenticationHandler) {
                        return authenticationHandler.handleAuthentication(this, info, data);
                    }
                    else {
                        // We have received an unauthorized response but have no handlers to handle it.
                        // Let the response return to the caller.
                        return response;
                    }
                }
                let redirectsRemaining = this._maxRedirects;
                while (response.message.statusCode &&
                    HttpRedirectCodes.includes(response.message.statusCode) &&
                    this._allowRedirects &&
                    redirectsRemaining > 0) {
                    const redirectUrl = response.message.headers['location'];
                    if (!redirectUrl) {
                        // if there's no location to redirect to, we won't
                        break;
                    }
                    const parsedRedirectUrl = new URL(redirectUrl);
                    if (parsedUrl.protocol === 'https:' &&
                        parsedUrl.protocol !== parsedRedirectUrl.protocol &&
                        !this._allowRedirectDowngrade) {
                        throw new Error('Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.');
                    }
                    // we need to finish reading the response before reassigning response
                    // which will leak the open socket.
                    yield response.readBody();
                    // strip authorization header if redirected to a different hostname
                    if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {
                        for (const header in headers) {
                            // header names are case insensitive
                            if (header.toLowerCase() === 'authorization') {
                                delete headers[header];
                            }
                        }
                    }
                    // let's make the request with the new redirectUrl
                    info = this._prepareRequest(verb, parsedRedirectUrl, headers);
                    response = yield this.requestRaw(info, data);
                    redirectsRemaining--;
                }
                if (!response.message.statusCode ||
                    !HttpResponseRetryCodes.includes(response.message.statusCode)) {
                    // If not a retry code, return immediately instead of retrying
                    return response;
                }
                numTries += 1;
                if (numTries < maxTries) {
                    yield response.readBody();
                    yield this._performExponentialBackoff(numTries);
                }
            } while (numTries < maxTries);
            return response;
        });
    }
    /**
     * Needs to be called if keepAlive is set to true in request options.
     */
    dispose() {
        if (this._agent) {
            this._agent.destroy();
        }
        this._disposed = true;
    }
    /**
     * Raw request.
     * @param info
     * @param data
     */
    requestRaw(info, data) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                function callbackForResult(err, res) {
                    if (err) {
                        reject(err);
                    }
                    else if (!res) {
                        // If `err` is not passed, then `res` must be passed.
                        reject(new Error('Unknown error'));
                    }
                    else {
                        resolve(res);
                    }
                }
                this.requestRawWithCallback(info, data, callbackForResult);
            });
        });
    }
    /**
     * Raw request with callback.
     * @param info
     * @param data
     * @param onResult
     */
    requestRawWithCallback(info, data, onResult) {
        if (typeof data === 'string') {
            if (!info.options.headers) {
                info.options.headers = {};
            }
            info.options.headers['Content-Length'] = Buffer.byteLength(data, 'utf8');
        }
        let callbackCalled = false;
        function handleResult(err, res) {
            if (!callbackCalled) {
                callbackCalled = true;
                onResult(err, res);
            }
        }
        const req = info.httpModule.request(info.options, (msg) => {
            const res = new HttpClientResponse(msg);
            handleResult(undefined, res);
        });
        let socket;
        req.on('socket', sock => {
            socket = sock;
        });
        // If we ever get disconnected, we want the socket to timeout eventually
        req.setTimeout(this._socketTimeout || 3 * 60000, () => {
            if (socket) {
                socket.end();
            }
            handleResult(new Error(`Request timeout: ${info.options.path}`));
        });
        req.on('error', function (err) {
            // err has statusCode property
            // res should have headers
            handleResult(err);
        });
        if (data && typeof data === 'string') {
            req.write(data, 'utf8');
        }
        if (data && typeof data !== 'string') {
            data.on('close', function () {
                req.end();
            });
            data.pipe(req);
        }
        else {
            req.end();
        }
    }
    /**
     * Gets an http agent. This function is useful when you need an http agent that handles
     * routing through a proxy server - depending upon the url and proxy environment variables.
     * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
     */
    getAgent(serverUrl) {
        const parsedUrl = new URL(serverUrl);
        return this._getAgent(parsedUrl);
    }
    _prepareRequest(method, requestUrl, headers) {
        const info = {};
        info.parsedUrl = requestUrl;
        const usingSsl = info.parsedUrl.protocol === 'https:';
        info.httpModule = usingSsl ? https : http;
        const defaultPort = usingSsl ? 443 : 80;
        info.options = {};
        info.options.host = info.parsedUrl.hostname;
        info.options.port = info.parsedUrl.port
            ? parseInt(info.parsedUrl.port)
            : defaultPort;
        info.options.path =
            (info.parsedUrl.pathname || '') + (info.parsedUrl.search || '');
        info.options.method = method;
        info.options.headers = this._mergeHeaders(headers);
        if (this.userAgent != null) {
            info.options.headers['user-agent'] = this.userAgent;
        }
        info.options.agent = this._getAgent(info.parsedUrl);
        // gives handlers an opportunity to participate
        if (this.handlers) {
            for (const handler of this.handlers) {
                handler.prepareRequest(info.options);
            }
        }
        return info;
    }
    _mergeHeaders(headers) {
        if (this.requestOptions && this.requestOptions.headers) {
            return Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(headers || {}));
        }
        return lowercaseKeys(headers || {});
    }
    _getExistingOrDefaultHeader(additionalHeaders, header, _default) {
        let clientHeader;
        if (this.requestOptions && this.requestOptions.headers) {
            clientHeader = lowercaseKeys(this.requestOptions.headers)[header];
        }
        return additionalHeaders[header] || clientHeader || _default;
    }
    _getAgent(parsedUrl) {
        let agent;
        const proxyUrl = pm.getProxyUrl(parsedUrl);
        const useProxy = proxyUrl && proxyUrl.hostname;
        if (this._keepAlive && useProxy) {
            agent = this._proxyAgent;
        }
        if (this._keepAlive && !useProxy) {
            agent = this._agent;
        }
        // if agent is already assigned use that agent.
        if (agent) {
            return agent;
        }
        const usingSsl = parsedUrl.protocol === 'https:';
        let maxSockets = 100;
        if (this.requestOptions) {
            maxSockets = this.requestOptions.maxSockets || http.globalAgent.maxSockets;
        }
        // This is `useProxy` again, but we need to check `proxyURl` directly for TypeScripts's flow analysis.
        if (proxyUrl && proxyUrl.hostname) {
            const agentOptions = {
                maxSockets,
                keepAlive: this._keepAlive,
                proxy: Object.assign(Object.assign({}, ((proxyUrl.username || proxyUrl.password) && {
                    proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`
                })), { host: proxyUrl.hostname, port: proxyUrl.port })
            };
            let tunnelAgent;
            const overHttps = proxyUrl.protocol === 'https:';
            if (usingSsl) {
                tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;
            }
            else {
                tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;
            }
            agent = tunnelAgent(agentOptions);
            this._proxyAgent = agent;
        }
        // if reusing agent across request and tunneling agent isn't assigned create a new agent
        if (this._keepAlive && !agent) {
            const options = { keepAlive: this._keepAlive, maxSockets };
            agent = usingSsl ? new https.Agent(options) : new http.Agent(options);
            this._agent = agent;
        }
        // if not using private agent and tunnel agent isn't setup then use global agent
        if (!agent) {
            agent = usingSsl ? https.globalAgent : http.globalAgent;
        }
        if (usingSsl && this._ignoreSslError) {
            // we don't want to set NODE_TLS_REJECT_UNAUTHORIZED=0 since that will affect request for entire process
            // http.RequestOptions doesn't expose a way to modify RequestOptions.agent.options
            // we have to cast it to any and change it directly
            agent.options = Object.assign(agent.options || {}, {
                rejectUnauthorized: false
            });
        }
        return agent;
    }
    _performExponentialBackoff(retryNumber) {
        return __awaiter(this, void 0, void 0, function* () {
            retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);
            const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);
            return new Promise(resolve => setTimeout(() => resolve(), ms));
        });
    }
    _processResponse(res, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                const statusCode = res.message.statusCode || 0;
                const response = {
                    statusCode,
                    result: null,
                    headers: {}
                };
                // not found leads to null obj returned
                if (statusCode === HttpCodes.NotFound) {
                    resolve(response);
                }
                // get the result from the body
                function dateTimeDeserializer(key, value) {
                    if (typeof value === 'string') {
                        const a = new Date(value);
                        if (!isNaN(a.valueOf())) {
                            return a;
                        }
                    }
                    return value;
                }
                let obj;
                let contents;
                try {
                    contents = yield res.readBody();
                    if (contents && contents.length > 0) {
                        if (options && options.deserializeDates) {
                            obj = JSON.parse(contents, dateTimeDeserializer);
                        }
                        else {
                            obj = JSON.parse(contents);
                        }
                        response.result = obj;
                    }
                    response.headers = res.message.headers;
                }
                catch (err) {
                    // Invalid resource (contents not json);  leaving result obj null
                }
                // note that 3xx redirects are handled by the http layer.
                if (statusCode > 299) {
                    let msg;
                    // if exception/error in body, attempt to get better error
                    if (obj && obj.message) {
                        msg = obj.message;
                    }
                    else if (contents && contents.length > 0) {
                        // it may be the case that the exception is in the body message as string
                        msg = contents;
                    }
                    else {
                        msg = `Failed request: (${statusCode})`;
                    }
                    const err = new HttpClientError(msg, statusCode);
                    err.result = response.result;
                    reject(err);
                }
                else {
                    resolve(response);
                }
            }));
        });
    }
}
exports.HttpClient = HttpClient;
const lowercaseKeys = (obj) => Object.keys(obj).reduce((c, k) => ((c[k.toLowerCase()] = obj[k]), c), {});
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 2242:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.checkBypass = exports.getProxyUrl = void 0;
function getProxyUrl(reqUrl) {
    const usingSsl = reqUrl.protocol === 'https:';
    if (checkBypass(reqUrl)) {
        return undefined;
    }
    const proxyVar = (() => {
        if (usingSsl) {
            return process.env['https_proxy'] || process.env['HTTPS_PROXY'];
        }
        else {
            return process.env['http_proxy'] || process.env['HTTP_PROXY'];
        }
    })();
    if (proxyVar) {
        return new URL(proxyVar);
    }
    else {
        return undefined;
    }
}
exports.getProxyUrl = getProxyUrl;
function checkBypass(reqUrl) {
    if (!reqUrl.hostname) {
        return false;
    }
    const noProxy = process.env['no_proxy'] || process.env['NO_PROXY'] || '';
    if (!noProxy) {
        return false;
    }
    // Determine the request port
    let reqPort;
    if (reqUrl.port) {
        reqPort = Number(reqUrl.port);
    }
    else if (reqUrl.protocol === 'http:') {
        reqPort = 80;
    }
    else if (reqUrl.protocol === 'https:') {
        reqPort = 443;
    }
    // Format the request hostname and hostname with port
    const upperReqHosts = [reqUrl.hostname.toUpperCase()];
    if (typeof reqPort === 'number') {
        upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);
    }
    // Compare request host against noproxy
    for (const upperNoProxyItem of noProxy
        .split(',')
        .map(x => x.trim().toUpperCase())
        .filter(x => x)) {
        if (upperReqHosts.some(x => x === upperNoProxyItem)) {
            return true;
        }
    }
    return false;
}
exports.checkBypass = checkBypass;
//# sourceMappingURL=proxy.js.map

/***/ }),

/***/ 7004:
/***/ ((module) => {

// Regex from https://stackoverflow.com/questions/32044846/regex-for-iso-8601-durations
module.exports =
  /^P(?!$)(\d+(?:\.\d+)?Y)?(\d+(?:\.\d+)?M)?(\d+(?:\.\d+)?W)?(\d+(?:\.\d+)?D)?(T(?=\d)(\d+(?:\.\d+)?H)?(\d+(?:\.\d+)?M)?(\d+(?:\.\d+)?S)?)?$/;


/***/ }),

/***/ 6000:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const { parse } = __nccwpck_require__(9286);

module.exports = (value) => {
  try {
    parse(value);
    return true;
  } catch (err) {
    return false;
  }
};


/***/ }),

/***/ 5351:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const { toASCII } = __nccwpck_require__(5477);

const hostnameRegex =
  /^(?=.{1,253}\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\.?$/i;

module.exports = (value) => {
  const hostname = toASCII(value);
  return (
    hostname.replace(/\.$/, '').length <= 253 && hostnameRegex.test(hostname)
  );
};


/***/ }),

/***/ 8901:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

module.exports.iri = __nccwpck_require__(3450);
module.exports.duration = __nccwpck_require__(7004);
module.exports["idn-email"] = __nccwpck_require__(6000);
module.exports["idn-hostname"] = __nccwpck_require__(5351);
module.exports["iri-reference"] = __nccwpck_require__(7784);


/***/ }),

/***/ 7784:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const { parse } = __nccwpck_require__(8892);
const { addressParser } = __nccwpck_require__(9286);
const schemes = __nccwpck_require__(6831);

function validate(address) {
  try {
    addressParser(address);
    return true;
  } catch (err) {
    return false;
  }
}

module.exports = (value) => {
  const iri = parse(value);
  // All valid IRIs are valid IRI-references
  if (iri.scheme === 'mailto' && iri.to.every(validate)) {
    return true;
  }

  if (
    iri.reference === 'absolute' &&
    iri.path !== undefined &&
    schemes.allByName[iri.scheme]
  ) {
    return true;
  }

  // Check for valid IRI-reference

  // If there is a scheme, it must be valid
  if (iri.scheme && !schemes.allByName[iri.scheme]) {
    return false;
  }

  // Check there's a path and for a proper type of reference
  return (
    iri.path !== undefined &&
    (iri.reference === 'relative' ||
      iri.reference === 'same-document' ||
      iri.reference === 'uri')
  );
};


/***/ }),

/***/ 3450:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const { parse } = __nccwpck_require__(8892);
const { addressParser } = __nccwpck_require__(9286);
const schemes = __nccwpck_require__(6831);

function validate(address) {
  try {
    addressParser(address);
    return true;
  } catch (err) {
    return false;
  }
}

module.exports = (value) => {
  const iri = parse(value);
  if (iri.scheme === 'mailto' && iri.to.every(validate)) {
    return true;
  }
  if (iri.reference === 'absolute' && schemes.allByName[iri.scheme]) {
    return true;
  }
  return false;
};


/***/ }),

/***/ 7152:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const formats = __nccwpck_require__(8901);

module.exports = (ajv, options = {}) => {
  const allFormats = Object.keys(formats);
  let formatsToInstall = allFormats;

  if (options.formats) {
    if (!Array.isArray(options.formats))
      throw new Error('options.formats must be an array');
    formatsToInstall = options.formats;
  }

  allFormats
    .filter((format) => formatsToInstall.includes(format))
    .forEach((key) => {
      ajv.addFormat(key, formats[key]);
    });

  return ajv;
};


/***/ }),

/***/ 6446:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.formatNames = exports.fastFormats = exports.fullFormats = void 0;
function fmtDef(validate, compare) {
    return { validate, compare };
}
exports.fullFormats = {
    // date: http://tools.ietf.org/html/rfc3339#section-5.6
    date: fmtDef(date, compareDate),
    // date-time: http://tools.ietf.org/html/rfc3339#section-5.6
    time: fmtDef(getTime(true), compareTime),
    "date-time": fmtDef(getDateTime(true), compareDateTime),
    "iso-time": fmtDef(getTime(), compareIsoTime),
    "iso-date-time": fmtDef(getDateTime(), compareIsoDateTime),
    // duration: https://tools.ietf.org/html/rfc3339#appendix-A
    duration: /^P(?!$)((\d+Y)?(\d+M)?(\d+D)?(T(?=\d)(\d+H)?(\d+M)?(\d+S)?)?|(\d+W)?)$/,
    uri,
    "uri-reference": /^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i,
    // uri-template: https://tools.ietf.org/html/rfc6570
    "uri-template": /^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i,
    // For the source: https://gist.github.com/dperini/729294
    // For test cases: https://mathiasbynens.be/demo/url-regex
    url: /^(?:https?|ftp):\/\/(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z0-9\u{00a1}-\u{ffff}]+-)*[a-z0-9\u{00a1}-\u{ffff}]+)(?:\.(?:[a-z0-9\u{00a1}-\u{ffff}]+-)*[a-z0-9\u{00a1}-\u{ffff}]+)*(?:\.(?:[a-z\u{00a1}-\u{ffff}]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/iu,
    email: /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,
    hostname: /^(?=.{1,253}\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\.?$/i,
    // optimized https://www.safaribooksonline.com/library/view/regular-expressions-cookbook/9780596802837/ch07s16.html
    ipv4: /^(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)\.){3}(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)$/,
    ipv6: /^((([0-9a-f]{1,4}:){7}([0-9a-f]{1,4}|:))|(([0-9a-f]{1,4}:){6}(:[0-9a-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9a-f]{1,4}:){5}(((:[0-9a-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9a-f]{1,4}:){4}(((:[0-9a-f]{1,4}){1,3})|((:[0-9a-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){3}(((:[0-9a-f]{1,4}){1,4})|((:[0-9a-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){2}(((:[0-9a-f]{1,4}){1,5})|((:[0-9a-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){1}(((:[0-9a-f]{1,4}){1,6})|((:[0-9a-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9a-f]{1,4}){1,7})|((:[0-9a-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))$/i,
    regex,
    // uuid: http://tools.ietf.org/html/rfc4122
    uuid: /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i,
    // JSON-pointer: https://tools.ietf.org/html/rfc6901
    // uri fragment: https://tools.ietf.org/html/rfc3986#appendix-A
    "json-pointer": /^(?:\/(?:[^~/]|~0|~1)*)*$/,
    "json-pointer-uri-fragment": /^#(?:\/(?:[a-z0-9_\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i,
    // relative JSON-pointer: http://tools.ietf.org/html/draft-luff-relative-json-pointer-00
    "relative-json-pointer": /^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~/]|~0|~1)*)*)$/,
    // the following formats are used by the openapi specification: https://spec.openapis.org/oas/v3.0.0#data-types
    // byte: https://github.com/miguelmota/is-base64
    byte,
    // signed 32 bit integer
    int32: { type: "number", validate: validateInt32 },
    // signed 64 bit integer
    int64: { type: "number", validate: validateInt64 },
    // C-type float
    float: { type: "number", validate: validateNumber },
    // C-type double
    double: { type: "number", validate: validateNumber },
    // hint to the UI to hide input strings
    password: true,
    // unchecked string payload
    binary: true,
};
exports.fastFormats = {
    ...exports.fullFormats,
    date: fmtDef(/^\d\d\d\d-[0-1]\d-[0-3]\d$/, compareDate),
    time: fmtDef(/^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)$/i, compareTime),
    "date-time": fmtDef(/^\d\d\d\d-[0-1]\d-[0-3]\dt(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)$/i, compareDateTime),
    "iso-time": fmtDef(/^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)?$/i, compareIsoTime),
    "iso-date-time": fmtDef(/^\d\d\d\d-[0-1]\d-[0-3]\d[t\s](?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)?$/i, compareIsoDateTime),
    // uri: https://github.com/mafintosh/is-my-json-valid/blob/master/formats.js
    uri: /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/)?[^\s]*$/i,
    "uri-reference": /^(?:(?:[a-z][a-z0-9+\-.]*:)?\/?\/)?(?:[^\\\s#][^\s#]*)?(?:#[^\\\s]*)?$/i,
    // email (sources from jsen validator):
    // http://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address#answer-8829363
    // http://www.w3.org/TR/html5/forms.html#valid-e-mail-address (search for 'wilful violation')
    email: /^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,
};
exports.formatNames = Object.keys(exports.fullFormats);
function isLeapYear(year) {
    // https://tools.ietf.org/html/rfc3339#appendix-C
    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
}
const DATE = /^(\d\d\d\d)-(\d\d)-(\d\d)$/;
const DAYS = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
function date(str) {
    // full-date from http://tools.ietf.org/html/rfc3339#section-5.6
    const matches = DATE.exec(str);
    if (!matches)
        return false;
    const year = +matches[1];
    const month = +matches[2];
    const day = +matches[3];
    return (month >= 1 &&
        month <= 12 &&
        day >= 1 &&
        day <= (month === 2 && isLeapYear(year) ? 29 : DAYS[month]));
}
function compareDate(d1, d2) {
    if (!(d1 && d2))
        return undefined;
    if (d1 > d2)
        return 1;
    if (d1 < d2)
        return -1;
    return 0;
}
const TIME = /^(\d\d):(\d\d):(\d\d(?:\.\d+)?)(z|([+-])(\d\d)(?::?(\d\d))?)?$/i;
function getTime(strictTimeZone) {
    return function time(str) {
        const matches = TIME.exec(str);
        if (!matches)
            return false;
        const hr = +matches[1];
        const min = +matches[2];
        const sec = +matches[3];
        const tz = matches[4];
        const tzSign = matches[5] === "-" ? -1 : 1;
        const tzH = +(matches[6] || 0);
        const tzM = +(matches[7] || 0);
        if (tzH > 23 || tzM > 59 || (strictTimeZone && !tz))
            return false;
        if (hr <= 23 && min <= 59 && sec < 60)
            return true;
        // leap second
        const utcMin = min - tzM * tzSign;
        const utcHr = hr - tzH * tzSign - (utcMin < 0 ? 1 : 0);
        return (utcHr === 23 || utcHr === -1) && (utcMin === 59 || utcMin === -1) && sec < 61;
    };
}
function compareTime(s1, s2) {
    if (!(s1 && s2))
        return undefined;
    const t1 = new Date("2020-01-01T" + s1).valueOf();
    const t2 = new Date("2020-01-01T" + s2).valueOf();
    if (!(t1 && t2))
        return undefined;
    return t1 - t2;
}
function compareIsoTime(t1, t2) {
    if (!(t1 && t2))
        return undefined;
    const a1 = TIME.exec(t1);
    const a2 = TIME.exec(t2);
    if (!(a1 && a2))
        return undefined;
    t1 = a1[1] + a1[2] + a1[3];
    t2 = a2[1] + a2[2] + a2[3];
    if (t1 > t2)
        return 1;
    if (t1 < t2)
        return -1;
    return 0;
}
const DATE_TIME_SEPARATOR = /t|\s/i;
function getDateTime(strictTimeZone) {
    const time = getTime(strictTimeZone);
    return function date_time(str) {
        // http://tools.ietf.org/html/rfc3339#section-5.6
        const dateTime = str.split(DATE_TIME_SEPARATOR);
        return dateTime.length === 2 && date(dateTime[0]) && time(dateTime[1]);
    };
}
function compareDateTime(dt1, dt2) {
    if (!(dt1 && dt2))
        return undefined;
    const d1 = new Date(dt1).valueOf();
    const d2 = new Date(dt2).valueOf();
    if (!(d1 && d2))
        return undefined;
    return d1 - d2;
}
function compareIsoDateTime(dt1, dt2) {
    if (!(dt1 && dt2))
        return undefined;
    const [d1, t1] = dt1.split(DATE_TIME_SEPARATOR);
    const [d2, t2] = dt2.split(DATE_TIME_SEPARATOR);
    const res = compareDate(d1, d2);
    if (res === undefined)
        return undefined;
    return res || compareTime(t1, t2);
}
const NOT_URI_FRAGMENT = /\/|:/;
const URI = /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
function uri(str) {
    // http://jmrware.com/articles/2009/uri_regexp/URI_regex.html + optional protocol + required "."
    return NOT_URI_FRAGMENT.test(str) && URI.test(str);
}
const BYTE = /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/gm;
function byte(str) {
    BYTE.lastIndex = 0;
    return BYTE.test(str);
}
const MIN_INT32 = -(2 ** 31);
const MAX_INT32 = 2 ** 31 - 1;
function validateInt32(value) {
    return Number.isInteger(value) && value <= MAX_INT32 && value >= MIN_INT32;
}
function validateInt64(value) {
    // JSON and javascript max Int is 2**53, so any int that passes isInteger is valid for Int64
    return Number.isInteger(value);
}
function validateNumber() {
    return true;
}
const Z_ANCHOR = /[^\\]\\Z/;
function regex(str) {
    if (Z_ANCHOR.test(str))
        return false;
    try {
        new RegExp(str);
        return true;
    }
    catch (e) {
        return false;
    }
}
//# sourceMappingURL=formats.js.map

/***/ }),

/***/ 6314:
/***/ ((module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const formats_1 = __nccwpck_require__(6446);
const limit_1 = __nccwpck_require__(6566);
const codegen_1 = __nccwpck_require__(7441);
const fullName = new codegen_1.Name("fullFormats");
const fastName = new codegen_1.Name("fastFormats");
const formatsPlugin = (ajv, opts = { keywords: true }) => {
    if (Array.isArray(opts)) {
        addFormats(ajv, opts, formats_1.fullFormats, fullName);
        return ajv;
    }
    const [formats, exportName] = opts.mode === "fast" ? [formats_1.fastFormats, fastName] : [formats_1.fullFormats, fullName];
    const list = opts.formats || formats_1.formatNames;
    addFormats(ajv, list, formats, exportName);
    if (opts.keywords)
        (0, limit_1.default)(ajv);
    return ajv;
};
formatsPlugin.get = (name, mode = "full") => {
    const formats = mode === "fast" ? formats_1.fastFormats : formats_1.fullFormats;
    const f = formats[name];
    if (!f)
        throw new Error(`Unknown format "${name}"`);
    return f;
};
function addFormats(ajv, list, fs, exportName) {
    var _a;
    var _b;
    (_a = (_b = ajv.opts.code).formats) !== null && _a !== void 0 ? _a : (_b.formats = (0, codegen_1._) `require("ajv-formats/dist/formats").${exportName}`);
    for (const f of list)
        ajv.addFormat(f, fs[f]);
}
module.exports = exports = formatsPlugin;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports["default"] = formatsPlugin;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 6566:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.formatLimitDefinition = void 0;
const ajv_1 = __nccwpck_require__(8472);
const codegen_1 = __nccwpck_require__(7441);
const ops = codegen_1.operators;
const KWDs = {
    formatMaximum: { okStr: "<=", ok: ops.LTE, fail: ops.GT },
    formatMinimum: { okStr: ">=", ok: ops.GTE, fail: ops.LT },
    formatExclusiveMaximum: { okStr: "<", ok: ops.LT, fail: ops.GTE },
    formatExclusiveMinimum: { okStr: ">", ok: ops.GT, fail: ops.LTE },
};
const error = {
    message: ({ keyword, schemaCode }) => (0, codegen_1.str) `should be ${KWDs[keyword].okStr} ${schemaCode}`,
    params: ({ keyword, schemaCode }) => (0, codegen_1._) `{comparison: ${KWDs[keyword].okStr}, limit: ${schemaCode}}`,
};
exports.formatLimitDefinition = {
    keyword: Object.keys(KWDs),
    type: "string",
    schemaType: "string",
    $data: true,
    error,
    code(cxt) {
        const { gen, data, schemaCode, keyword, it } = cxt;
        const { opts, self } = it;
        if (!opts.validateFormats)
            return;
        const fCxt = new ajv_1.KeywordCxt(it, self.RULES.all.format.definition, "format");
        if (fCxt.$data)
            validate$DataFormat();
        else
            validateFormat();
        function validate$DataFormat() {
            const fmts = gen.scopeValue("formats", {
                ref: self.formats,
                code: opts.code.formats,
            });
            const fmt = gen.const("fmt", (0, codegen_1._) `${fmts}[${fCxt.schemaCode}]`);
            cxt.fail$data((0, codegen_1.or)((0, codegen_1._) `typeof ${fmt} != "object"`, (0, codegen_1._) `${fmt} instanceof RegExp`, (0, codegen_1._) `typeof ${fmt}.compare != "function"`, compareCode(fmt)));
        }
        function validateFormat() {
            const format = fCxt.schema;
            const fmtDef = self.formats[format];
            if (!fmtDef || fmtDef === true)
                return;
            if (typeof fmtDef != "object" ||
                fmtDef instanceof RegExp ||
                typeof fmtDef.compare != "function") {
                throw new Error(`"${keyword}": format "${format}" does not define "compare" function`);
            }
            const fmt = gen.scopeValue("formats", {
                key: format,
                ref: fmtDef,
                code: opts.code.formats ? (0, codegen_1._) `${opts.code.formats}${(0, codegen_1.getProperty)(format)}` : undefined,
            });
            cxt.fail$data(compareCode(fmt));
        }
        function compareCode(fmt) {
            return (0, codegen_1._) `${fmt}.compare(${data}, ${schemaCode}) ${KWDs[keyword].fail} 0`;
        }
    },
    dependencies: ["format"],
};
const formatLimitPlugin = (ajv) => {
    ajv.addKeyword(exports.formatLimitDefinition);
    return ajv;
};
exports["default"] = formatLimitPlugin;
//# sourceMappingURL=limit.js.map

/***/ }),

/***/ 9407:
/***/ ((module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MissingRefError = exports.ValidationError = exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;
const core_1 = __nccwpck_require__(1932);
const draft2020_1 = __nccwpck_require__(6118);
const discriminator_1 = __nccwpck_require__(5851);
const json_schema_2020_12_1 = __nccwpck_require__(9720);
const META_SCHEMA_ID = "https://json-schema.org/draft/2020-12/schema";
class Ajv2020 extends core_1.default {
    constructor(opts = {}) {
        super({
            ...opts,
            dynamicRef: true,
            next: true,
            unevaluated: true,
        });
    }
    _addVocabularies() {
        super._addVocabularies();
        draft2020_1.default.forEach((v) => this.addVocabulary(v));
        if (this.opts.discriminator)
            this.addKeyword(discriminator_1.default);
    }
    _addDefaultMetaSchema() {
        super._addDefaultMetaSchema();
        const { $data, meta } = this.opts;
        if (!meta)
            return;
        json_schema_2020_12_1.default.call(this, $data);
        this.refs["http://json-schema.org/schema"] = META_SCHEMA_ID;
    }
    defaultMeta() {
        return (this.opts.defaultMeta =
            super.defaultMeta() || (this.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : undefined));
    }
}
module.exports = exports = Ajv2020;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports["default"] = Ajv2020;
var validate_1 = __nccwpck_require__(9691);
Object.defineProperty(exports, "KeywordCxt", ({ enumerable: true, get: function () { return validate_1.KeywordCxt; } }));
var codegen_1 = __nccwpck_require__(7441);
Object.defineProperty(exports, "_", ({ enumerable: true, get: function () { return codegen_1._; } }));
Object.defineProperty(exports, "str", ({ enumerable: true, get: function () { return codegen_1.str; } }));
Object.defineProperty(exports, "stringify", ({ enumerable: true, get: function () { return codegen_1.stringify; } }));
Object.defineProperty(exports, "nil", ({ enumerable: true, get: function () { return codegen_1.nil; } }));
Object.defineProperty(exports, "Name", ({ enumerable: true, get: function () { return codegen_1.Name; } }));
Object.defineProperty(exports, "CodeGen", ({ enumerable: true, get: function () { return codegen_1.CodeGen; } }));
var validation_error_1 = __nccwpck_require__(958);
Object.defineProperty(exports, "ValidationError", ({ enumerable: true, get: function () { return validation_error_1.default; } }));
var ref_error_1 = __nccwpck_require__(7270);
Object.defineProperty(exports, "MissingRefError", ({ enumerable: true, get: function () { return ref_error_1.default; } }));
//# sourceMappingURL=2020.js.map

/***/ }),

/***/ 8472:
/***/ ((module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MissingRefError = exports.ValidationError = exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;
const core_1 = __nccwpck_require__(1932);
const draft7_1 = __nccwpck_require__(2088);
const discriminator_1 = __nccwpck_require__(5851);
const draft7MetaSchema = __nccwpck_require__(4746);
const META_SUPPORT_DATA = ["/properties"];
const META_SCHEMA_ID = "http://json-schema.org/draft-07/schema";
class Ajv extends core_1.default {
    _addVocabularies() {
        super._addVocabularies();
        draft7_1.default.forEach((v) => this.addVocabulary(v));
        if (this.opts.discriminator)
            this.addKeyword(discriminator_1.default);
    }
    _addDefaultMetaSchema() {
        super._addDefaultMetaSchema();
        if (!this.opts.meta)
            return;
        const metaSchema = this.opts.$data
            ? this.$dataMetaSchema(draft7MetaSchema, META_SUPPORT_DATA)
            : draft7MetaSchema;
        this.addMetaSchema(metaSchema, META_SCHEMA_ID, false);
        this.refs["http://json-schema.org/schema"] = META_SCHEMA_ID;
    }
    defaultMeta() {
        return (this.opts.defaultMeta =
            super.defaultMeta() || (this.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : undefined));
    }
}
module.exports = exports = Ajv;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports["default"] = Ajv;
var validate_1 = __nccwpck_require__(9691);
Object.defineProperty(exports, "KeywordCxt", ({ enumerable: true, get: function () { return validate_1.KeywordCxt; } }));
var codegen_1 = __nccwpck_require__(7441);
Object.defineProperty(exports, "_", ({ enumerable: true, get: function () { return codegen_1._; } }));
Object.defineProperty(exports, "str", ({ enumerable: true, get: function () { return codegen_1.str; } }));
Object.defineProperty(exports, "stringify", ({ enumerable: true, get: function () { return codegen_1.stringify; } }));
Object.defineProperty(exports, "nil", ({ enumerable: true, get: function () { return codegen_1.nil; } }));
Object.defineProperty(exports, "Name", ({ enumerable: true, get: function () { return codegen_1.Name; } }));
Object.defineProperty(exports, "CodeGen", ({ enumerable: true, get: function () { return codegen_1.CodeGen; } }));
var validation_error_1 = __nccwpck_require__(958);
Object.defineProperty(exports, "ValidationError", ({ enumerable: true, get: function () { return validation_error_1.default; } }));
var ref_error_1 = __nccwpck_require__(7270);
Object.defineProperty(exports, "MissingRefError", ({ enumerable: true, get: function () { return ref_error_1.default; } }));
//# sourceMappingURL=ajv.js.map

/***/ }),

/***/ 8889:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.regexpCode = exports.getEsmExportName = exports.getProperty = exports.safeStringify = exports.stringify = exports.strConcat = exports.addCodeArg = exports.str = exports._ = exports.nil = exports._Code = exports.Name = exports.IDENTIFIER = exports._CodeOrName = void 0;
class _CodeOrName {
}
exports._CodeOrName = _CodeOrName;
exports.IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;
class Name extends _CodeOrName {
    constructor(s) {
        super();
        if (!exports.IDENTIFIER.test(s))
            throw new Error("CodeGen: name must be a valid identifier");
        this.str = s;
    }
    toString() {
        return this.str;
    }
    emptyStr() {
        return false;
    }
    get names() {
        return { [this.str]: 1 };
    }
}
exports.Name = Name;
class _Code extends _CodeOrName {
    constructor(code) {
        super();
        this._items = typeof code === "string" ? [code] : code;
    }
    toString() {
        return this.str;
    }
    emptyStr() {
        if (this._items.length > 1)
            return false;
        const item = this._items[0];
        return item === "" || item === '""';
    }
    get str() {
        var _a;
        return ((_a = this._str) !== null && _a !== void 0 ? _a : (this._str = this._items.reduce((s, c) => `${s}${c}`, "")));
    }
    get names() {
        var _a;
        return ((_a = this._names) !== null && _a !== void 0 ? _a : (this._names = this._items.reduce((names, c) => {
            if (c instanceof Name)
                names[c.str] = (names[c.str] || 0) + 1;
            return names;
        }, {})));
    }
}
exports._Code = _Code;
exports.nil = new _Code("");
function _(strs, ...args) {
    const code = [strs[0]];
    let i = 0;
    while (i < args.length) {
        addCodeArg(code, args[i]);
        code.push(strs[++i]);
    }
    return new _Code(code);
}
exports._ = _;
const plus = new _Code("+");
function str(strs, ...args) {
    const expr = [safeStringify(strs[0])];
    let i = 0;
    while (i < args.length) {
        expr.push(plus);
        addCodeArg(expr, args[i]);
        expr.push(plus, safeStringify(strs[++i]));
    }
    optimize(expr);
    return new _Code(expr);
}
exports.str = str;
function addCodeArg(code, arg) {
    if (arg instanceof _Code)
        code.push(...arg._items);
    else if (arg instanceof Name)
        code.push(arg);
    else
        code.push(interpolate(arg));
}
exports.addCodeArg = addCodeArg;
function optimize(expr) {
    let i = 1;
    while (i < expr.length - 1) {
        if (expr[i] === plus) {
            const res = mergeExprItems(expr[i - 1], expr[i + 1]);
            if (res !== undefined) {
                expr.splice(i - 1, 3, res);
                continue;
            }
            expr[i++] = "+";
        }
        i++;
    }
}
function mergeExprItems(a, b) {
    if (b === '""')
        return a;
    if (a === '""')
        return b;
    if (typeof a == "string") {
        if (b instanceof Name || a[a.length - 1] !== '"')
            return;
        if (typeof b != "string")
            return `${a.slice(0, -1)}${b}"`;
        if (b[0] === '"')
            return a.slice(0, -1) + b.slice(1);
        return;
    }
    if (typeof b == "string" && b[0] === '"' && !(a instanceof Name))
        return `"${a}${b.slice(1)}`;
    return;
}
function strConcat(c1, c2) {
    return c2.emptyStr() ? c1 : c1.emptyStr() ? c2 : str `${c1}${c2}`;
}
exports.strConcat = strConcat;
// TODO do not allow arrays here
function interpolate(x) {
    return typeof x == "number" || typeof x == "boolean" || x === null
        ? x
        : safeStringify(Array.isArray(x) ? x.join(",") : x);
}
function stringify(x) {
    return new _Code(safeStringify(x));
}
exports.stringify = stringify;
function safeStringify(x) {
    return JSON.stringify(x)
        .replace(/\u2028/g, "\\u2028")
        .replace(/\u2029/g, "\\u2029");
}
exports.safeStringify = safeStringify;
function getProperty(key) {
    return typeof key == "string" && exports.IDENTIFIER.test(key) ? new _Code(`.${key}`) : _ `[${key}]`;
}
exports.getProperty = getProperty;
//Does best effort to format the name properly
function getEsmExportName(key) {
    if (typeof key == "string" && exports.IDENTIFIER.test(key)) {
        return new _Code(`${key}`);
    }
    throw new Error(`CodeGen: invalid export name: ${key}, use explicit $id name mapping`);
}
exports.getEsmExportName = getEsmExportName;
function regexpCode(rx) {
    return new _Code(rx.toString());
}
exports.regexpCode = regexpCode;
//# sourceMappingURL=code.js.map

/***/ }),

/***/ 7441:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.or = exports.and = exports.not = exports.CodeGen = exports.operators = exports.varKinds = exports.ValueScopeName = exports.ValueScope = exports.Scope = exports.Name = exports.regexpCode = exports.stringify = exports.getProperty = exports.nil = exports.strConcat = exports.str = exports._ = void 0;
const code_1 = __nccwpck_require__(8889);
const scope_1 = __nccwpck_require__(4445);
var code_2 = __nccwpck_require__(8889);
Object.defineProperty(exports, "_", ({ enumerable: true, get: function () { return code_2._; } }));
Object.defineProperty(exports, "str", ({ enumerable: true, get: function () { return code_2.str; } }));
Object.defineProperty(exports, "strConcat", ({ enumerable: true, get: function () { return code_2.strConcat; } }));
Object.defineProperty(exports, "nil", ({ enumerable: true, get: function () { return code_2.nil; } }));
Object.defineProperty(exports, "getProperty", ({ enumerable: true, get: function () { return code_2.getProperty; } }));
Object.defineProperty(exports, "stringify", ({ enumerable: true, get: function () { return code_2.stringify; } }));
Object.defineProperty(exports, "regexpCode", ({ enumerable: true, get: function () { return code_2.regexpCode; } }));
Object.defineProperty(exports, "Name", ({ enumerable: true, get: function () { return code_2.Name; } }));
var scope_2 = __nccwpck_require__(4445);
Object.defineProperty(exports, "Scope", ({ enumerable: true, get: function () { return scope_2.Scope; } }));
Object.defineProperty(exports, "ValueScope", ({ enumerable: true, get: function () { return scope_2.ValueScope; } }));
Object.defineProperty(exports, "ValueScopeName", ({ enumerable: true, get: function () { return scope_2.ValueScopeName; } }));
Object.defineProperty(exports, "varKinds", ({ enumerable: true, get: function () { return scope_2.varKinds; } }));
exports.operators = {
    GT: new code_1._Code(">"),
    GTE: new code_1._Code(">="),
    LT: new code_1._Code("<"),
    LTE: new code_1._Code("<="),
    EQ: new code_1._Code("==="),
    NEQ: new code_1._Code("!=="),
    NOT: new code_1._Code("!"),
    OR: new code_1._Code("||"),
    AND: new code_1._Code("&&"),
    ADD: new code_1._Code("+"),
};
class Node {
    optimizeNodes() {
        return this;
    }
    optimizeNames(_names, _constants) {
        return this;
    }
}
class Def extends Node {
    constructor(varKind, name, rhs) {
        super();
        this.varKind = varKind;
        this.name = name;
        this.rhs = rhs;
    }
    render({ es5, _n }) {
        const varKind = es5 ? scope_1.varKinds.var : this.varKind;
        const rhs = this.rhs === undefined ? "" : ` = ${this.rhs}`;
        return `${varKind} ${this.name}${rhs};` + _n;
    }
    optimizeNames(names, constants) {
        if (!names[this.name.str])
            return;
        if (this.rhs)
            this.rhs = optimizeExpr(this.rhs, names, constants);
        return this;
    }
    get names() {
        return this.rhs instanceof code_1._CodeOrName ? this.rhs.names : {};
    }
}
class Assign extends Node {
    constructor(lhs, rhs, sideEffects) {
        super();
        this.lhs = lhs;
        this.rhs = rhs;
        this.sideEffects = sideEffects;
    }
    render({ _n }) {
        return `${this.lhs} = ${this.rhs};` + _n;
    }
    optimizeNames(names, constants) {
        if (this.lhs instanceof code_1.Name && !names[this.lhs.str] && !this.sideEffects)
            return;
        this.rhs = optimizeExpr(this.rhs, names, constants);
        return this;
    }
    get names() {
        const names = this.lhs instanceof code_1.Name ? {} : { ...this.lhs.names };
        return addExprNames(names, this.rhs);
    }
}
class AssignOp extends Assign {
    constructor(lhs, op, rhs, sideEffects) {
        super(lhs, rhs, sideEffects);
        this.op = op;
    }
    render({ _n }) {
        return `${this.lhs} ${this.op}= ${this.rhs};` + _n;
    }
}
class Label extends Node {
    constructor(label) {
        super();
        this.label = label;
        this.names = {};
    }
    render({ _n }) {
        return `${this.label}:` + _n;
    }
}
class Break extends Node {
    constructor(label) {
        super();
        this.label = label;
        this.names = {};
    }
    render({ _n }) {
        const label = this.label ? ` ${this.label}` : "";
        return `break${label};` + _n;
    }
}
class Throw extends Node {
    constructor(error) {
        super();
        this.error = error;
    }
    render({ _n }) {
        return `throw ${this.error};` + _n;
    }
    get names() {
        return this.error.names;
    }
}
class AnyCode extends Node {
    constructor(code) {
        super();
        this.code = code;
    }
    render({ _n }) {
        return `${this.code};` + _n;
    }
    optimizeNodes() {
        return `${this.code}` ? this : undefined;
    }
    optimizeNames(names, constants) {
        this.code = optimizeExpr(this.code, names, constants);
        return this;
    }
    get names() {
        return this.code instanceof code_1._CodeOrName ? this.code.names : {};
    }
}
class ParentNode extends Node {
    constructor(nodes = []) {
        super();
        this.nodes = nodes;
    }
    render(opts) {
        return this.nodes.reduce((code, n) => code + n.render(opts), "");
    }
    optimizeNodes() {
        const { nodes } = this;
        let i = nodes.length;
        while (i--) {
            const n = nodes[i].optimizeNodes();
            if (Array.isArray(n))
                nodes.splice(i, 1, ...n);
            else if (n)
                nodes[i] = n;
            else
                nodes.splice(i, 1);
        }
        return nodes.length > 0 ? this : undefined;
    }
    optimizeNames(names, constants) {
        const { nodes } = this;
        let i = nodes.length;
        while (i--) {
            // iterating backwards improves 1-pass optimization
            const n = nodes[i];
            if (n.optimizeNames(names, constants))
                continue;
            subtractNames(names, n.names);
            nodes.splice(i, 1);
        }
        return nodes.length > 0 ? this : undefined;
    }
    get names() {
        return this.nodes.reduce((names, n) => addNames(names, n.names), {});
    }
}
class BlockNode extends ParentNode {
    render(opts) {
        return "{" + opts._n + super.render(opts) + "}" + opts._n;
    }
}
class Root extends ParentNode {
}
class Else extends BlockNode {
}
Else.kind = "else";
class If extends BlockNode {
    constructor(condition, nodes) {
        super(nodes);
        this.condition = condition;
    }
    render(opts) {
        let code = `if(${this.condition})` + super.render(opts);
        if (this.else)
            code += "else " + this.else.render(opts);
        return code;
    }
    optimizeNodes() {
        super.optimizeNodes();
        const cond = this.condition;
        if (cond === true)
            return this.nodes; // else is ignored here
        let e = this.else;
        if (e) {
            const ns = e.optimizeNodes();
            e = this.else = Array.isArray(ns) ? new Else(ns) : ns;
        }
        if (e) {
            if (cond === false)
                return e instanceof If ? e : e.nodes;
            if (this.nodes.length)
                return this;
            return new If(not(cond), e instanceof If ? [e] : e.nodes);
        }
        if (cond === false || !this.nodes.length)
            return undefined;
        return this;
    }
    optimizeNames(names, constants) {
        var _a;
        this.else = (_a = this.else) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);
        if (!(super.optimizeNames(names, constants) || this.else))
            return;
        this.condition = optimizeExpr(this.condition, names, constants);
        return this;
    }
    get names() {
        const names = super.names;
        addExprNames(names, this.condition);
        if (this.else)
            addNames(names, this.else.names);
        return names;
    }
}
If.kind = "if";
class For extends BlockNode {
}
For.kind = "for";
class ForLoop extends For {
    constructor(iteration) {
        super();
        this.iteration = iteration;
    }
    render(opts) {
        return `for(${this.iteration})` + super.render(opts);
    }
    optimizeNames(names, constants) {
        if (!super.optimizeNames(names, constants))
            return;
        this.iteration = optimizeExpr(this.iteration, names, constants);
        return this;
    }
    get names() {
        return addNames(super.names, this.iteration.names);
    }
}
class ForRange extends For {
    constructor(varKind, name, from, to) {
        super();
        this.varKind = varKind;
        this.name = name;
        this.from = from;
        this.to = to;
    }
    render(opts) {
        const varKind = opts.es5 ? scope_1.varKinds.var : this.varKind;
        const { name, from, to } = this;
        return `for(${varKind} ${name}=${from}; ${name}<${to}; ${name}++)` + super.render(opts);
    }
    get names() {
        const names = addExprNames(super.names, this.from);
        return addExprNames(names, this.to);
    }
}
class ForIter extends For {
    constructor(loop, varKind, name, iterable) {
        super();
        this.loop = loop;
        this.varKind = varKind;
        this.name = name;
        this.iterable = iterable;
    }
    render(opts) {
        return `for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})` + super.render(opts);
    }
    optimizeNames(names, constants) {
        if (!super.optimizeNames(names, constants))
            return;
        this.iterable = optimizeExpr(this.iterable, names, constants);
        return this;
    }
    get names() {
        return addNames(super.names, this.iterable.names);
    }
}
class Func extends BlockNode {
    constructor(name, args, async) {
        super();
        this.name = name;
        this.args = args;
        this.async = async;
    }
    render(opts) {
        const _async = this.async ? "async " : "";
        return `${_async}function ${this.name}(${this.args})` + super.render(opts);
    }
}
Func.kind = "func";
class Return extends ParentNode {
    render(opts) {
        return "return " + super.render(opts);
    }
}
Return.kind = "return";
class Try extends BlockNode {
    render(opts) {
        let code = "try" + super.render(opts);
        if (this.catch)
            code += this.catch.render(opts);
        if (this.finally)
            code += this.finally.render(opts);
        return code;
    }
    optimizeNodes() {
        var _a, _b;
        super.optimizeNodes();
        (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNodes();
        (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNodes();
        return this;
    }
    optimizeNames(names, constants) {
        var _a, _b;
        super.optimizeNames(names, constants);
        (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);
        (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNames(names, constants);
        return this;
    }
    get names() {
        const names = super.names;
        if (this.catch)
            addNames(names, this.catch.names);
        if (this.finally)
            addNames(names, this.finally.names);
        return names;
    }
}
class Catch extends BlockNode {
    constructor(error) {
        super();
        this.error = error;
    }
    render(opts) {
        return `catch(${this.error})` + super.render(opts);
    }
}
Catch.kind = "catch";
class Finally extends BlockNode {
    render(opts) {
        return "finally" + super.render(opts);
    }
}
Finally.kind = "finally";
class CodeGen {
    constructor(extScope, opts = {}) {
        this._values = {};
        this._blockStarts = [];
        this._constants = {};
        this.opts = { ...opts, _n: opts.lines ? "\n" : "" };
        this._extScope = extScope;
        this._scope = new scope_1.Scope({ parent: extScope });
        this._nodes = [new Root()];
    }
    toString() {
        return this._root.render(this.opts);
    }
    // returns unique name in the internal scope
    name(prefix) {
        return this._scope.name(prefix);
    }
    // reserves unique name in the external scope
    scopeName(prefix) {
        return this._extScope.name(prefix);
    }
    // reserves unique name in the external scope and assigns value to it
    scopeValue(prefixOrName, value) {
        const name = this._extScope.value(prefixOrName, value);
        const vs = this._values[name.prefix] || (this._values[name.prefix] = new Set());
        vs.add(name);
        return name;
    }
    getScopeValue(prefix, keyOrRef) {
        return this._extScope.getValue(prefix, keyOrRef);
    }
    // return code that assigns values in the external scope to the names that are used internally
    // (same names that were returned by gen.scopeName or gen.scopeValue)
    scopeRefs(scopeName) {
        return this._extScope.scopeRefs(scopeName, this._values);
    }
    scopeCode() {
        return this._extScope.scopeCode(this._values);
    }
    _def(varKind, nameOrPrefix, rhs, constant) {
        const name = this._scope.toName(nameOrPrefix);
        if (rhs !== undefined && constant)
            this._constants[name.str] = rhs;
        this._leafNode(new Def(varKind, name, rhs));
        return name;
    }
    // `const` declaration (`var` in es5 mode)
    const(nameOrPrefix, rhs, _constant) {
        return this._def(scope_1.varKinds.const, nameOrPrefix, rhs, _constant);
    }
    // `let` declaration with optional assignment (`var` in es5 mode)
    let(nameOrPrefix, rhs, _constant) {
        return this._def(scope_1.varKinds.let, nameOrPrefix, rhs, _constant);
    }
    // `var` declaration with optional assignment
    var(nameOrPrefix, rhs, _constant) {
        return this._def(scope_1.varKinds.var, nameOrPrefix, rhs, _constant);
    }
    // assignment code
    assign(lhs, rhs, sideEffects) {
        return this._leafNode(new Assign(lhs, rhs, sideEffects));
    }
    // `+=` code
    add(lhs, rhs) {
        return this._leafNode(new AssignOp(lhs, exports.operators.ADD, rhs));
    }
    // appends passed SafeExpr to code or executes Block
    code(c) {
        if (typeof c == "function")
            c();
        else if (c !== code_1.nil)
            this._leafNode(new AnyCode(c));
        return this;
    }
    // returns code for object literal for the passed argument list of key-value pairs
    object(...keyValues) {
        const code = ["{"];
        for (const [key, value] of keyValues) {
            if (code.length > 1)
                code.push(",");
            code.push(key);
            if (key !== value || this.opts.es5) {
                code.push(":");
                (0, code_1.addCodeArg)(code, value);
            }
        }
        code.push("}");
        return new code_1._Code(code);
    }
    // `if` clause (or statement if `thenBody` and, optionally, `elseBody` are passed)
    if(condition, thenBody, elseBody) {
        this._blockNode(new If(condition));
        if (thenBody && elseBody) {
            this.code(thenBody).else().code(elseBody).endIf();
        }
        else if (thenBody) {
            this.code(thenBody).endIf();
        }
        else if (elseBody) {
            throw new Error('CodeGen: "else" body without "then" body');
        }
        return this;
    }
    // `else if` clause - invalid without `if` or after `else` clauses
    elseIf(condition) {
        return this._elseNode(new If(condition));
    }
    // `else` clause - only valid after `if` or `else if` clauses
    else() {
        return this._elseNode(new Else());
    }
    // end `if` statement (needed if gen.if was used only with condition)
    endIf() {
        return this._endBlockNode(If, Else);
    }
    _for(node, forBody) {
        this._blockNode(node);
        if (forBody)
            this.code(forBody).endFor();
        return this;
    }
    // a generic `for` clause (or statement if `forBody` is passed)
    for(iteration, forBody) {
        return this._for(new ForLoop(iteration), forBody);
    }
    // `for` statement for a range of values
    forRange(nameOrPrefix, from, to, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.let) {
        const name = this._scope.toName(nameOrPrefix);
        return this._for(new ForRange(varKind, name, from, to), () => forBody(name));
    }
    // `for-of` statement (in es5 mode replace with a normal for loop)
    forOf(nameOrPrefix, iterable, forBody, varKind = scope_1.varKinds.const) {
        const name = this._scope.toName(nameOrPrefix);
        if (this.opts.es5) {
            const arr = iterable instanceof code_1.Name ? iterable : this.var("_arr", iterable);
            return this.forRange("_i", 0, (0, code_1._) `${arr}.length`, (i) => {
                this.var(name, (0, code_1._) `${arr}[${i}]`);
                forBody(name);
            });
        }
        return this._for(new ForIter("of", varKind, name, iterable), () => forBody(name));
    }
    // `for-in` statement.
    // With option `ownProperties` replaced with a `for-of` loop for object keys
    forIn(nameOrPrefix, obj, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.const) {
        if (this.opts.ownProperties) {
            return this.forOf(nameOrPrefix, (0, code_1._) `Object.keys(${obj})`, forBody);
        }
        const name = this._scope.toName(nameOrPrefix);
        return this._for(new ForIter("in", varKind, name, obj), () => forBody(name));
    }
    // end `for` loop
    endFor() {
        return this._endBlockNode(For);
    }
    // `label` statement
    label(label) {
        return this._leafNode(new Label(label));
    }
    // `break` statement
    break(label) {
        return this._leafNode(new Break(label));
    }
    // `return` statement
    return(value) {
        const node = new Return();
        this._blockNode(node);
        this.code(value);
        if (node.nodes.length !== 1)
            throw new Error('CodeGen: "return" should have one node');
        return this._endBlockNode(Return);
    }
    // `try` statement
    try(tryBody, catchCode, finallyCode) {
        if (!catchCode && !finallyCode)
            throw new Error('CodeGen: "try" without "catch" and "finally"');
        const node = new Try();
        this._blockNode(node);
        this.code(tryBody);
        if (catchCode) {
            const error = this.name("e");
            this._currNode = node.catch = new Catch(error);
            catchCode(error);
        }
        if (finallyCode) {
            this._currNode = node.finally = new Finally();
            this.code(finallyCode);
        }
        return this._endBlockNode(Catch, Finally);
    }
    // `throw` statement
    throw(error) {
        return this._leafNode(new Throw(error));
    }
    // start self-balancing block
    block(body, nodeCount) {
        this._blockStarts.push(this._nodes.length);
        if (body)
            this.code(body).endBlock(nodeCount);
        return this;
    }
    // end the current self-balancing block
    endBlock(nodeCount) {
        const len = this._blockStarts.pop();
        if (len === undefined)
            throw new Error("CodeGen: not in self-balancing block");
        const toClose = this._nodes.length - len;
        if (toClose < 0 || (nodeCount !== undefined && toClose !== nodeCount)) {
            throw new Error(`CodeGen: wrong number of nodes: ${toClose} vs ${nodeCount} expected`);
        }
        this._nodes.length = len;
        return this;
    }
    // `function` heading (or definition if funcBody is passed)
    func(name, args = code_1.nil, async, funcBody) {
        this._blockNode(new Func(name, args, async));
        if (funcBody)
            this.code(funcBody).endFunc();
        return this;
    }
    // end function definition
    endFunc() {
        return this._endBlockNode(Func);
    }
    optimize(n = 1) {
        while (n-- > 0) {
            this._root.optimizeNodes();
            this._root.optimizeNames(this._root.names, this._constants);
        }
    }
    _leafNode(node) {
        this._currNode.nodes.push(node);
        return this;
    }
    _blockNode(node) {
        this._currNode.nodes.push(node);
        this._nodes.push(node);
    }
    _endBlockNode(N1, N2) {
        const n = this._currNode;
        if (n instanceof N1 || (N2 && n instanceof N2)) {
            this._nodes.pop();
            return this;
        }
        throw new Error(`CodeGen: not in block "${N2 ? `${N1.kind}/${N2.kind}` : N1.kind}"`);
    }
    _elseNode(node) {
        const n = this._currNode;
        if (!(n instanceof If)) {
            throw new Error('CodeGen: "else" without "if"');
        }
        this._currNode = n.else = node;
        return this;
    }
    get _root() {
        return this._nodes[0];
    }
    get _currNode() {
        const ns = this._nodes;
        return ns[ns.length - 1];
    }
    set _currNode(node) {
        const ns = this._nodes;
        ns[ns.length - 1] = node;
    }
}
exports.CodeGen = CodeGen;
function addNames(names, from) {
    for (const n in from)
        names[n] = (names[n] || 0) + (from[n] || 0);
    return names;
}
function addExprNames(names, from) {
    return from instanceof code_1._CodeOrName ? addNames(names, from.names) : names;
}
function optimizeExpr(expr, names, constants) {
    if (expr instanceof code_1.Name)
        return replaceName(expr);
    if (!canOptimize(expr))
        return expr;
    return new code_1._Code(expr._items.reduce((items, c) => {
        if (c instanceof code_1.Name)
            c = replaceName(c);
        if (c instanceof code_1._Code)
            items.push(...c._items);
        else
            items.push(c);
        return items;
    }, []));
    function replaceName(n) {
        const c = constants[n.str];
        if (c === undefined || names[n.str] !== 1)
            return n;
        delete names[n.str];
        return c;
    }
    function canOptimize(e) {
        return (e instanceof code_1._Code &&
            e._items.some((c) => c instanceof code_1.Name && names[c.str] === 1 && constants[c.str] !== undefined));
    }
}
function subtractNames(names, from) {
    for (const n in from)
        names[n] = (names[n] || 0) - (from[n] || 0);
}
function not(x) {
    return typeof x == "boolean" || typeof x == "number" || x === null ? !x : (0, code_1._) `!${par(x)}`;
}
exports.not = not;
const andCode = mappend(exports.operators.AND);
// boolean AND (&&) expression with the passed arguments
function and(...args) {
    return args.reduce(andCode);
}
exports.and = and;
const orCode = mappend(exports.operators.OR);
// boolean OR (||) expression with the passed arguments
function or(...args) {
    return args.reduce(orCode);
}
exports.or = or;
function mappend(op) {
    return (x, y) => (x === code_1.nil ? y : y === code_1.nil ? x : (0, code_1._) `${par(x)} ${op} ${par(y)}`);
}
function par(x) {
    return x instanceof code_1.Name ? x : (0, code_1._) `(${x})`;
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 4445:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ValueScope = exports.ValueScopeName = exports.Scope = exports.varKinds = exports.UsedValueState = void 0;
const code_1 = __nccwpck_require__(8889);
class ValueError extends Error {
    constructor(name) {
        super(`CodeGen: "code" for ${name} not defined`);
        this.value = name.value;
    }
}
var UsedValueState;
(function (UsedValueState) {
    UsedValueState[UsedValueState["Started"] = 0] = "Started";
    UsedValueState[UsedValueState["Completed"] = 1] = "Completed";
})(UsedValueState = exports.UsedValueState || (exports.UsedValueState = {}));
exports.varKinds = {
    const: new code_1.Name("const"),
    let: new code_1.Name("let"),
    var: new code_1.Name("var"),
};
class Scope {
    constructor({ prefixes, parent } = {}) {
        this._names = {};
        this._prefixes = prefixes;
        this._parent = parent;
    }
    toName(nameOrPrefix) {
        return nameOrPrefix instanceof code_1.Name ? nameOrPrefix : this.name(nameOrPrefix);
    }
    name(prefix) {
        return new code_1.Name(this._newName(prefix));
    }
    _newName(prefix) {
        const ng = this._names[prefix] || this._nameGroup(prefix);
        return `${prefix}${ng.index++}`;
    }
    _nameGroup(prefix) {
        var _a, _b;
        if (((_b = (_a = this._parent) === null || _a === void 0 ? void 0 : _a._prefixes) === null || _b === void 0 ? void 0 : _b.has(prefix)) || (this._prefixes && !this._prefixes.has(prefix))) {
            throw new Error(`CodeGen: prefix "${prefix}" is not allowed in this scope`);
        }
        return (this._names[prefix] = { prefix, index: 0 });
    }
}
exports.Scope = Scope;
class ValueScopeName extends code_1.Name {
    constructor(prefix, nameStr) {
        super(nameStr);
        this.prefix = prefix;
    }
    setValue(value, { property, itemIndex }) {
        this.value = value;
        this.scopePath = (0, code_1._) `.${new code_1.Name(property)}[${itemIndex}]`;
    }
}
exports.ValueScopeName = ValueScopeName;
const line = (0, code_1._) `\n`;
class ValueScope extends Scope {
    constructor(opts) {
        super(opts);
        this._values = {};
        this._scope = opts.scope;
        this.opts = { ...opts, _n: opts.lines ? line : code_1.nil };
    }
    get() {
        return this._scope;
    }
    name(prefix) {
        return new ValueScopeName(prefix, this._newName(prefix));
    }
    value(nameOrPrefix, value) {
        var _a;
        if (value.ref === undefined)
            throw new Error("CodeGen: ref must be passed in value");
        const name = this.toName(nameOrPrefix);
        const { prefix } = name;
        const valueKey = (_a = value.key) !== null && _a !== void 0 ? _a : value.ref;
        let vs = this._values[prefix];
        if (vs) {
            const _name = vs.get(valueKey);
            if (_name)
                return _name;
        }
        else {
            vs = this._values[prefix] = new Map();
        }
        vs.set(valueKey, name);
        const s = this._scope[prefix] || (this._scope[prefix] = []);
        const itemIndex = s.length;
        s[itemIndex] = value.ref;
        name.setValue(value, { property: prefix, itemIndex });
        return name;
    }
    getValue(prefix, keyOrRef) {
        const vs = this._values[prefix];
        if (!vs)
            return;
        return vs.get(keyOrRef);
    }
    scopeRefs(scopeName, values = this._values) {
        return this._reduceValues(values, (name) => {
            if (name.scopePath === undefined)
                throw new Error(`CodeGen: name "${name}" has no value`);
            return (0, code_1._) `${scopeName}${name.scopePath}`;
        });
    }
    scopeCode(values = this._values, usedValues, getCode) {
        return this._reduceValues(values, (name) => {
            if (name.value === undefined)
                throw new Error(`CodeGen: name "${name}" has no value`);
            return name.value.code;
        }, usedValues, getCode);
    }
    _reduceValues(values, valueCode, usedValues = {}, getCode) {
        let code = code_1.nil;
        for (const prefix in values) {
            const vs = values[prefix];
            if (!vs)
                continue;
            const nameSet = (usedValues[prefix] = usedValues[prefix] || new Map());
            vs.forEach((name) => {
                if (nameSet.has(name))
                    return;
                nameSet.set(name, UsedValueState.Started);
                let c = valueCode(name);
                if (c) {
                    const def = this.opts.es5 ? exports.varKinds.var : exports.varKinds.const;
                    code = (0, code_1._) `${code}${def} ${name} = ${c};${this.opts._n}`;
                }
                else if ((c = getCode === null || getCode === void 0 ? void 0 : getCode(name))) {
                    code = (0, code_1._) `${code}${c}${this.opts._n}`;
                }
                else {
                    throw new ValueError(name);
                }
                nameSet.set(name, UsedValueState.Completed);
            });
        }
        return code;
    }
}
exports.ValueScope = ValueScope;
//# sourceMappingURL=scope.js.map

/***/ }),

/***/ 9289:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.extendErrors = exports.resetErrorsCount = exports.reportExtraError = exports.reportError = exports.keyword$DataError = exports.keywordError = void 0;
const codegen_1 = __nccwpck_require__(7441);
const util_1 = __nccwpck_require__(156);
const names_1 = __nccwpck_require__(7281);
exports.keywordError = {
    message: ({ keyword }) => (0, codegen_1.str) `must pass "${keyword}" keyword validation`,
};
exports.keyword$DataError = {
    message: ({ keyword, schemaType }) => schemaType
        ? (0, codegen_1.str) `"${keyword}" keyword must be ${schemaType} ($data)`
        : (0, codegen_1.str) `"${keyword}" keyword is invalid ($data)`,
};
function reportError(cxt, error = exports.keywordError, errorPaths, overrideAllErrors) {
    const { it } = cxt;
    const { gen, compositeRule, allErrors } = it;
    const errObj = errorObjectCode(cxt, error, errorPaths);
    if (overrideAllErrors !== null && overrideAllErrors !== void 0 ? overrideAllErrors : (compositeRule || allErrors)) {
        addError(gen, errObj);
    }
    else {
        returnErrors(it, (0, codegen_1._) `[${errObj}]`);
    }
}
exports.reportError = reportError;
function reportExtraError(cxt, error = exports.keywordError, errorPaths) {
    const { it } = cxt;
    const { gen, compositeRule, allErrors } = it;
    const errObj = errorObjectCode(cxt, error, errorPaths);
    addError(gen, errObj);
    if (!(compositeRule || allErrors)) {
        returnErrors(it, names_1.default.vErrors);
    }
}
exports.reportExtraError = reportExtraError;
function resetErrorsCount(gen, errsCount) {
    gen.assign(names_1.default.errors, errsCount);
    gen.if((0, codegen_1._) `${names_1.default.vErrors} !== null`, () => gen.if(errsCount, () => gen.assign((0, codegen_1._) `${names_1.default.vErrors}.length`, errsCount), () => gen.assign(names_1.default.vErrors, null)));
}
exports.resetErrorsCount = resetErrorsCount;
function extendErrors({ gen, keyword, schemaValue, data, errsCount, it, }) {
    /* istanbul ignore if */
    if (errsCount === undefined)
        throw new Error("ajv implementation error");
    const err = gen.name("err");
    gen.forRange("i", errsCount, names_1.default.errors, (i) => {
        gen.const(err, (0, codegen_1._) `${names_1.default.vErrors}[${i}]`);
        gen.if((0, codegen_1._) `${err}.instancePath === undefined`, () => gen.assign((0, codegen_1._) `${err}.instancePath`, (0, codegen_1.strConcat)(names_1.default.instancePath, it.errorPath)));
        gen.assign((0, codegen_1._) `${err}.schemaPath`, (0, codegen_1.str) `${it.errSchemaPath}/${keyword}`);
        if (it.opts.verbose) {
            gen.assign((0, codegen_1._) `${err}.schema`, schemaValue);
            gen.assign((0, codegen_1._) `${err}.data`, data);
        }
    });
}
exports.extendErrors = extendErrors;
function addError(gen, errObj) {
    const err = gen.const("err", errObj);
    gen.if((0, codegen_1._) `${names_1.default.vErrors} === null`, () => gen.assign(names_1.default.vErrors, (0, codegen_1._) `[${err}]`), (0, codegen_1._) `${names_1.default.vErrors}.push(${err})`);
    gen.code((0, codegen_1._) `${names_1.default.errors}++`);
}
function returnErrors(it, errs) {
    const { gen, validateName, schemaEnv } = it;
    if (schemaEnv.$async) {
        gen.throw((0, codegen_1._) `new ${it.ValidationError}(${errs})`);
    }
    else {
        gen.assign((0, codegen_1._) `${validateName}.errors`, errs);
        gen.return(false);
    }
}
const E = {
    keyword: new codegen_1.Name("keyword"),
    schemaPath: new codegen_1.Name("schemaPath"),
    params: new codegen_1.Name("params"),
    propertyName: new codegen_1.Name("propertyName"),
    message: new codegen_1.Name("message"),
    schema: new codegen_1.Name("schema"),
    parentSchema: new codegen_1.Name("parentSchema"),
};
function errorObjectCode(cxt, error, errorPaths) {
    const { createErrors } = cxt.it;
    if (createErrors === false)
        return (0, codegen_1._) `{}`;
    return errorObject(cxt, error, errorPaths);
}
function errorObject(cxt, error, errorPaths = {}) {
    const { gen, it } = cxt;
    const keyValues = [
        errorInstancePath(it, errorPaths),
        errorSchemaPath(cxt, errorPaths),
    ];
    extraErrorProps(cxt, error, keyValues);
    return gen.object(...keyValues);
}
function errorInstancePath({ errorPath }, { instancePath }) {
    const instPath = instancePath
        ? (0, codegen_1.str) `${errorPath}${(0, util_1.getErrorPath)(instancePath, util_1.Type.Str)}`
        : errorPath;
    return [names_1.default.instancePath, (0, codegen_1.strConcat)(names_1.default.instancePath, instPath)];
}
function errorSchemaPath({ keyword, it: { errSchemaPath } }, { schemaPath, parentSchema }) {
    let schPath = parentSchema ? errSchemaPath : (0, codegen_1.str) `${errSchemaPath}/${keyword}`;
    if (schemaPath) {
        schPath = (0, codegen_1.str) `${schPath}${(0, util_1.getErrorPath)(schemaPath, util_1.Type.Str)}`;
    }
    return [E.schemaPath, schPath];
}
function extraErrorProps(cxt, { params, message }, keyValues) {
    const { keyword, data, schemaValue, it } = cxt;
    const { opts, propertyName, topSchemaRef, schemaPath } = it;
    keyValues.push([E.keyword, keyword], [E.params, typeof params == "function" ? params(cxt) : params || (0, codegen_1._) `{}`]);
    if (opts.messages) {
        keyValues.push([E.message, typeof message == "function" ? message(cxt) : message]);
    }
    if (opts.verbose) {
        keyValues.push([E.schema, schemaValue], [E.parentSchema, (0, codegen_1._) `${topSchemaRef}${schemaPath}`], [names_1.default.data, data]);
    }
    if (propertyName)
        keyValues.push([E.propertyName, propertyName]);
}
//# sourceMappingURL=errors.js.map

/***/ }),

/***/ 3868:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.resolveSchema = exports.getCompilingSchema = exports.resolveRef = exports.compileSchema = exports.SchemaEnv = void 0;
const codegen_1 = __nccwpck_require__(7441);
const validation_error_1 = __nccwpck_require__(958);
const names_1 = __nccwpck_require__(7281);
const resolve_1 = __nccwpck_require__(4578);
const util_1 = __nccwpck_require__(156);
const validate_1 = __nccwpck_require__(9691);
class SchemaEnv {
    constructor(env) {
        var _a;
        this.refs = {};
        this.dynamicAnchors = {};
        let schema;
        if (typeof env.schema == "object")
            schema = env.schema;
        this.schema = env.schema;
        this.schemaId = env.schemaId;
        this.root = env.root || this;
        this.baseId = (_a = env.baseId) !== null && _a !== void 0 ? _a : (0, resolve_1.normalizeId)(schema === null || schema === void 0 ? void 0 : schema[env.schemaId || "$id"]);
        this.schemaPath = env.schemaPath;
        this.localRefs = env.localRefs;
        this.meta = env.meta;
        this.$async = schema === null || schema === void 0 ? void 0 : schema.$async;
        this.refs = {};
    }
}
exports.SchemaEnv = SchemaEnv;
// let codeSize = 0
// let nodeCount = 0
// Compiles schema in SchemaEnv
function compileSchema(sch) {
    // TODO refactor - remove compilations
    const _sch = getCompilingSchema.call(this, sch);
    if (_sch)
        return _sch;
    const rootId = (0, resolve_1.getFullPath)(this.opts.uriResolver, sch.root.baseId); // TODO if getFullPath removed 1 tests fails
    const { es5, lines } = this.opts.code;
    const { ownProperties } = this.opts;
    const gen = new codegen_1.CodeGen(this.scope, { es5, lines, ownProperties });
    let _ValidationError;
    if (sch.$async) {
        _ValidationError = gen.scopeValue("Error", {
            ref: validation_error_1.default,
            code: (0, codegen_1._) `require("ajv/dist/runtime/validation_error").default`,
        });
    }
    const validateName = gen.scopeName("validate");
    sch.validateName = validateName;
    const schemaCxt = {
        gen,
        allErrors: this.opts.allErrors,
        data: names_1.default.data,
        parentData: names_1.default.parentData,
        parentDataProperty: names_1.default.parentDataProperty,
        dataNames: [names_1.default.data],
        dataPathArr: [codegen_1.nil],
        dataLevel: 0,
        dataTypes: [],
        definedProperties: new Set(),
        topSchemaRef: gen.scopeValue("schema", this.opts.code.source === true
            ? { ref: sch.schema, code: (0, codegen_1.stringify)(sch.schema) }
            : { ref: sch.schema }),
        validateName,
        ValidationError: _ValidationError,
        schema: sch.schema,
        schemaEnv: sch,
        rootId,
        baseId: sch.baseId || rootId,
        schemaPath: codegen_1.nil,
        errSchemaPath: sch.schemaPath || (this.opts.jtd ? "" : "#"),
        errorPath: (0, codegen_1._) `""`,
        opts: this.opts,
        self: this,
    };
    let sourceCode;
    try {
        this._compilations.add(sch);
        (0, validate_1.validateFunctionCode)(schemaCxt);
        gen.optimize(this.opts.code.optimize);
        // gen.optimize(1)
        const validateCode = gen.toString();
        sourceCode = `${gen.scopeRefs(names_1.default.scope)}return ${validateCode}`;
        // console.log((codeSize += sourceCode.length), (nodeCount += gen.nodeCount))
        if (this.opts.code.process)
            sourceCode = this.opts.code.process(sourceCode, sch);
        // console.log("\n\n\n *** \n", sourceCode)
        const makeValidate = new Function(`${names_1.default.self}`, `${names_1.default.scope}`, sourceCode);
        const validate = makeValidate(this, this.scope.get());
        this.scope.value(validateName, { ref: validate });
        validate.errors = null;
        validate.schema = sch.schema;
        validate.schemaEnv = sch;
        if (sch.$async)
            validate.$async = true;
        if (this.opts.code.source === true) {
            validate.source = { validateName, validateCode, scopeValues: gen._values };
        }
        if (this.opts.unevaluated) {
            const { props, items } = schemaCxt;
            validate.evaluated = {
                props: props instanceof codegen_1.Name ? undefined : props,
                items: items instanceof codegen_1.Name ? undefined : items,
                dynamicProps: props instanceof codegen_1.Name,
                dynamicItems: items instanceof codegen_1.Name,
            };
            if (validate.source)
                validate.source.evaluated = (0, codegen_1.stringify)(validate.evaluated);
        }
        sch.validate = validate;
        return sch;
    }
    catch (e) {
        delete sch.validate;
        delete sch.validateName;
        if (sourceCode)
            this.logger.error("Error compiling schema, function code:", sourceCode);
        // console.log("\n\n\n *** \n", sourceCode, this.opts)
        throw e;
    }
    finally {
        this._compilations.delete(sch);
    }
}
exports.compileSchema = compileSchema;
function resolveRef(root, baseId, ref) {
    var _a;
    ref = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, ref);
    const schOrFunc = root.refs[ref];
    if (schOrFunc)
        return schOrFunc;
    let _sch = resolve.call(this, root, ref);
    if (_sch === undefined) {
        const schema = (_a = root.localRefs) === null || _a === void 0 ? void 0 : _a[ref]; // TODO maybe localRefs should hold SchemaEnv
        const { schemaId } = this.opts;
        if (schema)
            _sch = new SchemaEnv({ schema, schemaId, root, baseId });
    }
    if (_sch === undefined)
        return;
    return (root.refs[ref] = inlineOrCompile.call(this, _sch));
}
exports.resolveRef = resolveRef;
function inlineOrCompile(sch) {
    if ((0, resolve_1.inlineRef)(sch.schema, this.opts.inlineRefs))
        return sch.schema;
    return sch.validate ? sch : compileSchema.call(this, sch);
}
// Index of schema compilation in the currently compiled list
function getCompilingSchema(schEnv) {
    for (const sch of this._compilations) {
        if (sameSchemaEnv(sch, schEnv))
            return sch;
    }
}
exports.getCompilingSchema = getCompilingSchema;
function sameSchemaEnv(s1, s2) {
    return s1.schema === s2.schema && s1.root === s2.root && s1.baseId === s2.baseId;
}
// resolve and compile the references ($ref)
// TODO returns AnySchemaObject (if the schema can be inlined) or validation function
function resolve(root, // information about the root schema for the current schema
ref // reference to resolve
) {
    let sch;
    while (typeof (sch = this.refs[ref]) == "string")
        ref = sch;
    return sch || this.schemas[ref] || resolveSchema.call(this, root, ref);
}
// Resolve schema, its root and baseId
function resolveSchema(root, // root object with properties schema, refs TODO below SchemaEnv is assigned to it
ref // reference to resolve
) {
    const p = this.opts.uriResolver.parse(ref);
    const refPath = (0, resolve_1._getFullPath)(this.opts.uriResolver, p);
    let baseId = (0, resolve_1.getFullPath)(this.opts.uriResolver, root.baseId, undefined);
    // TODO `Object.keys(root.schema).length > 0` should not be needed - but removing breaks 2 tests
    if (Object.keys(root.schema).length > 0 && refPath === baseId) {
        return getJsonPointer.call(this, p, root);
    }
    const id = (0, resolve_1.normalizeId)(refPath);
    const schOrRef = this.refs[id] || this.schemas[id];
    if (typeof schOrRef == "string") {
        const sch = resolveSchema.call(this, root, schOrRef);
        if (typeof (sch === null || sch === void 0 ? void 0 : sch.schema) !== "object")
            return;
        return getJsonPointer.call(this, p, sch);
    }
    if (typeof (schOrRef === null || schOrRef === void 0 ? void 0 : schOrRef.schema) !== "object")
        return;
    if (!schOrRef.validate)
        compileSchema.call(this, schOrRef);
    if (id === (0, resolve_1.normalizeId)(ref)) {
        const { schema } = schOrRef;
        const { schemaId } = this.opts;
        const schId = schema[schemaId];
        if (schId)
            baseId = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schId);
        return new SchemaEnv({ schema, schemaId, root, baseId });
    }
    return getJsonPointer.call(this, p, schOrRef);
}
exports.resolveSchema = resolveSchema;
const PREVENT_SCOPE_CHANGE = new Set([
    "properties",
    "patternProperties",
    "enum",
    "dependencies",
    "definitions",
]);
function getJsonPointer(parsedRef, { baseId, schema, root }) {
    var _a;
    if (((_a = parsedRef.fragment) === null || _a === void 0 ? void 0 : _a[0]) !== "/")
        return;
    for (const part of parsedRef.fragment.slice(1).split("/")) {
        if (typeof schema === "boolean")
            return;
        const partSchema = schema[(0, util_1.unescapeFragment)(part)];
        if (partSchema === undefined)
            return;
        schema = partSchema;
        // TODO PREVENT_SCOPE_CHANGE could be defined in keyword def?
        const schId = typeof schema === "object" && schema[this.opts.schemaId];
        if (!PREVENT_SCOPE_CHANGE.has(part) && schId) {
            baseId = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schId);
        }
    }
    let env;
    if (typeof schema != "boolean" && schema.$ref && !(0, util_1.schemaHasRulesButRef)(schema, this.RULES)) {
        const $ref = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schema.$ref);
        env = resolveSchema.call(this, root, $ref);
    }
    // even though resolution failed we need to return SchemaEnv to throw exception
    // so that compileAsync loads missing schema.
    const { schemaId } = this.opts;
    env = env || new SchemaEnv({ schema, schemaId, root, baseId });
    if (env.schema !== env.root.schema)
        return env;
    return undefined;
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 7281:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __nccwpck_require__(7441);
const names = {
    // validation function arguments
    data: new codegen_1.Name("data"),
    // args passed from referencing schema
    valCxt: new codegen_1.Name("valCxt"),
    instancePath: new codegen_1.Name("instancePath"),
    parentData: new codegen_1.Name("parentData"),
    parentDataProperty: new codegen_1.Name("parentDataProperty"),
    rootData: new codegen_1.Name("rootData"),
    dynamicAnchors: new codegen_1.Name("dynamicAnchors"),
    // function scoped variables
    vErrors: new codegen_1.Name("vErrors"),
    errors: new codegen_1.Name("errors"),
    this: new codegen_1.Name("this"),
    // "globals"
    self: new codegen_1.Name("self"),
    scope: new codegen_1.Name("scope"),
    // JTD serialize/parse name for JSON string and position
    json: new codegen_1.Name("json"),
    jsonPos: new codegen_1.Name("jsonPos"),
    jsonLen: new codegen_1.Name("jsonLen"),
    jsonPart: new codegen_1.Name("jsonPart"),
};
exports["default"] = names;
//# sourceMappingURL=names.js.map

/***/ }),

/***/ 7270:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const resolve_1 = __nccwpck_require__(4578);
class MissingRefError extends Error {
    constructor(resolver, baseId, ref, msg) {
        super(msg || `can't resolve reference ${ref} from id ${baseId}`);
        this.missingRef = (0, resolve_1.resolveUrl)(resolver, baseId, ref);
        this.missingSchema = (0, resolve_1.normalizeId)((0, resolve_1.getFullPath)(resolver, this.missingRef));
    }
}
exports["default"] = MissingRefError;
//# sourceMappingURL=ref_error.js.map

/***/ }),

/***/ 4578:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getSchemaRefs = exports.resolveUrl = exports.normalizeId = exports._getFullPath = exports.getFullPath = exports.inlineRef = void 0;
const util_1 = __nccwpck_require__(156);
const equal = __nccwpck_require__(1200);
const traverse = __nccwpck_require__(5486);
// TODO refactor to use keyword definitions
const SIMPLE_INLINED = new Set([
    "type",
    "format",
    "pattern",
    "maxLength",
    "minLength",
    "maxProperties",
    "minProperties",
    "maxItems",
    "minItems",
    "maximum",
    "minimum",
    "uniqueItems",
    "multipleOf",
    "required",
    "enum",
    "const",
]);
function inlineRef(schema, limit = true) {
    if (typeof schema == "boolean")
        return true;
    if (limit === true)
        return !hasRef(schema);
    if (!limit)
        return false;
    return countKeys(schema) <= limit;
}
exports.inlineRef = inlineRef;
const REF_KEYWORDS = new Set([
    "$ref",
    "$recursiveRef",
    "$recursiveAnchor",
    "$dynamicRef",
    "$dynamicAnchor",
]);
function hasRef(schema) {
    for (const key in schema) {
        if (REF_KEYWORDS.has(key))
            return true;
        const sch = schema[key];
        if (Array.isArray(sch) && sch.some(hasRef))
            return true;
        if (typeof sch == "object" && hasRef(sch))
            return true;
    }
    return false;
}
function countKeys(schema) {
    let count = 0;
    for (const key in schema) {
        if (key === "$ref")
            return Infinity;
        count++;
        if (SIMPLE_INLINED.has(key))
            continue;
        if (typeof schema[key] == "object") {
            (0, util_1.eachItem)(schema[key], (sch) => (count += countKeys(sch)));
        }
        if (count === Infinity)
            return Infinity;
    }
    return count;
}
function getFullPath(resolver, id = "", normalize) {
    if (normalize !== false)
        id = normalizeId(id);
    const p = resolver.parse(id);
    return _getFullPath(resolver, p);
}
exports.getFullPath = getFullPath;
function _getFullPath(resolver, p) {
    const serialized = resolver.serialize(p);
    return serialized.split("#")[0] + "#";
}
exports._getFullPath = _getFullPath;
const TRAILING_SLASH_HASH = /#\/?$/;
function normalizeId(id) {
    return id ? id.replace(TRAILING_SLASH_HASH, "") : "";
}
exports.normalizeId = normalizeId;
function resolveUrl(resolver, baseId, id) {
    id = normalizeId(id);
    return resolver.resolve(baseId, id);
}
exports.resolveUrl = resolveUrl;
const ANCHOR = /^[a-z_][-a-z0-9._]*$/i;
function getSchemaRefs(schema, baseId) {
    if (typeof schema == "boolean")
        return {};
    const { schemaId, uriResolver } = this.opts;
    const schId = normalizeId(schema[schemaId] || baseId);
    const baseIds = { "": schId };
    const pathPrefix = getFullPath(uriResolver, schId, false);
    const localRefs = {};
    const schemaRefs = new Set();
    traverse(schema, { allKeys: true }, (sch, jsonPtr, _, parentJsonPtr) => {
        if (parentJsonPtr === undefined)
            return;
        const fullPath = pathPrefix + jsonPtr;
        let baseId = baseIds[parentJsonPtr];
        if (typeof sch[schemaId] == "string")
            baseId = addRef.call(this, sch[schemaId]);
        addAnchor.call(this, sch.$anchor);
        addAnchor.call(this, sch.$dynamicAnchor);
        baseIds[jsonPtr] = baseId;
        function addRef(ref) {
            // eslint-disable-next-line @typescript-eslint/unbound-method
            const _resolve = this.opts.uriResolver.resolve;
            ref = normalizeId(baseId ? _resolve(baseId, ref) : ref);
            if (schemaRefs.has(ref))
                throw ambiguos(ref);
            schemaRefs.add(ref);
            let schOrRef = this.refs[ref];
            if (typeof schOrRef == "string")
                schOrRef = this.refs[schOrRef];
            if (typeof schOrRef == "object") {
                checkAmbiguosRef(sch, schOrRef.schema, ref);
            }
            else if (ref !== normalizeId(fullPath)) {
                if (ref[0] === "#") {
                    checkAmbiguosRef(sch, localRefs[ref], ref);
                    localRefs[ref] = sch;
                }
                else {
                    this.refs[ref] = fullPath;
                }
            }
            return ref;
        }
        function addAnchor(anchor) {
            if (typeof anchor == "string") {
                if (!ANCHOR.test(anchor))
                    throw new Error(`invalid anchor "${anchor}"`);
                addRef.call(this, `#${anchor}`);
            }
        }
    });
    return localRefs;
    function checkAmbiguosRef(sch1, sch2, ref) {
        if (sch2 !== undefined && !equal(sch1, sch2))
            throw ambiguos(ref);
    }
    function ambiguos(ref) {
        return new Error(`reference "${ref}" resolves to more than one schema`);
    }
}
exports.getSchemaRefs = getSchemaRefs;
//# sourceMappingURL=resolve.js.map

/***/ }),

/***/ 9019:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getRules = exports.isJSONType = void 0;
const _jsonTypes = ["string", "number", "integer", "boolean", "null", "object", "array"];
const jsonTypes = new Set(_jsonTypes);
function isJSONType(x) {
    return typeof x == "string" && jsonTypes.has(x);
}
exports.isJSONType = isJSONType;
function getRules() {
    const groups = {
        number: { type: "number", rules: [] },
        string: { type: "string", rules: [] },
        array: { type: "array", rules: [] },
        object: { type: "object", rules: [] },
    };
    return {
        types: { ...groups, integer: true, boolean: true, null: true },
        rules: [{ rules: [] }, groups.number, groups.string, groups.array, groups.object],
        post: { rules: [] },
        all: {},
        keywords: {},
    };
}
exports.getRules = getRules;
//# sourceMappingURL=rules.js.map

/***/ }),

/***/ 156:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.checkStrictMode = exports.getErrorPath = exports.Type = exports.useFunc = exports.setEvaluated = exports.evaluatedPropsToName = exports.mergeEvaluated = exports.eachItem = exports.unescapeJsonPointer = exports.escapeJsonPointer = exports.escapeFragment = exports.unescapeFragment = exports.schemaRefOrVal = exports.schemaHasRulesButRef = exports.schemaHasRules = exports.checkUnknownRules = exports.alwaysValidSchema = exports.toHash = void 0;
const codegen_1 = __nccwpck_require__(7441);
const code_1 = __nccwpck_require__(8889);
// TODO refactor to use Set
function toHash(arr) {
    const hash = {};
    for (const item of arr)
        hash[item] = true;
    return hash;
}
exports.toHash = toHash;
function alwaysValidSchema(it, schema) {
    if (typeof schema == "boolean")
        return schema;
    if (Object.keys(schema).length === 0)
        return true;
    checkUnknownRules(it, schema);
    return !schemaHasRules(schema, it.self.RULES.all);
}
exports.alwaysValidSchema = alwaysValidSchema;
function checkUnknownRules(it, schema = it.schema) {
    const { opts, self } = it;
    if (!opts.strictSchema)
        return;
    if (typeof schema === "boolean")
        return;
    const rules = self.RULES.keywords;
    for (const key in schema) {
        if (!rules[key])
            checkStrictMode(it, `unknown keyword: "${key}"`);
    }
}
exports.checkUnknownRules = checkUnknownRules;
function schemaHasRules(schema, rules) {
    if (typeof schema == "boolean")
        return !schema;
    for (const key in schema)
        if (rules[key])
            return true;
    return false;
}
exports.schemaHasRules = schemaHasRules;
function schemaHasRulesButRef(schema, RULES) {
    if (typeof schema == "boolean")
        return !schema;
    for (const key in schema)
        if (key !== "$ref" && RULES.all[key])
            return true;
    return false;
}
exports.schemaHasRulesButRef = schemaHasRulesButRef;
function schemaRefOrVal({ topSchemaRef, schemaPath }, schema, keyword, $data) {
    if (!$data) {
        if (typeof schema == "number" || typeof schema == "boolean")
            return schema;
        if (typeof schema == "string")
            return (0, codegen_1._) `${schema}`;
    }
    return (0, codegen_1._) `${topSchemaRef}${schemaPath}${(0, codegen_1.getProperty)(keyword)}`;
}
exports.schemaRefOrVal = schemaRefOrVal;
function unescapeFragment(str) {
    return unescapeJsonPointer(decodeURIComponent(str));
}
exports.unescapeFragment = unescapeFragment;
function escapeFragment(str) {
    return encodeURIComponent(escapeJsonPointer(str));
}
exports.escapeFragment = escapeFragment;
function escapeJsonPointer(str) {
    if (typeof str == "number")
        return `${str}`;
    return str.replace(/~/g, "~0").replace(/\//g, "~1");
}
exports.escapeJsonPointer = escapeJsonPointer;
function unescapeJsonPointer(str) {
    return str.replace(/~1/g, "/").replace(/~0/g, "~");
}
exports.unescapeJsonPointer = unescapeJsonPointer;
function eachItem(xs, f) {
    if (Array.isArray(xs)) {
        for (const x of xs)
            f(x);
    }
    else {
        f(xs);
    }
}
exports.eachItem = eachItem;
function makeMergeEvaluated({ mergeNames, mergeToName, mergeValues, resultToName, }) {
    return (gen, from, to, toName) => {
        const res = to === undefined
            ? from
            : to instanceof codegen_1.Name
                ? (from instanceof codegen_1.Name ? mergeNames(gen, from, to) : mergeToName(gen, from, to), to)
                : from instanceof codegen_1.Name
                    ? (mergeToName(gen, to, from), from)
                    : mergeValues(from, to);
        return toName === codegen_1.Name && !(res instanceof codegen_1.Name) ? resultToName(gen, res) : res;
    };
}
exports.mergeEvaluated = {
    props: makeMergeEvaluated({
        mergeNames: (gen, from, to) => gen.if((0, codegen_1._) `${to} !== true && ${from} !== undefined`, () => {
            gen.if((0, codegen_1._) `${from} === true`, () => gen.assign(to, true), () => gen.assign(to, (0, codegen_1._) `${to} || {}`).code((0, codegen_1._) `Object.assign(${to}, ${from})`));
        }),
        mergeToName: (gen, from, to) => gen.if((0, codegen_1._) `${to} !== true`, () => {
            if (from === true) {
                gen.assign(to, true);
            }
            else {
                gen.assign(to, (0, codegen_1._) `${to} || {}`);
                setEvaluated(gen, to, from);
            }
        }),
        mergeValues: (from, to) => (from === true ? true : { ...from, ...to }),
        resultToName: evaluatedPropsToName,
    }),
    items: makeMergeEvaluated({
        mergeNames: (gen, from, to) => gen.if((0, codegen_1._) `${to} !== true && ${from} !== undefined`, () => gen.assign(to, (0, codegen_1._) `${from} === true ? true : ${to} > ${from} ? ${to} : ${from}`)),
        mergeToName: (gen, from, to) => gen.if((0, codegen_1._) `${to} !== true`, () => gen.assign(to, from === true ? true : (0, codegen_1._) `${to} > ${from} ? ${to} : ${from}`)),
        mergeValues: (from, to) => (from === true ? true : Math.max(from, to)),
        resultToName: (gen, items) => gen.var("items", items),
    }),
};
function evaluatedPropsToName(gen, ps) {
    if (ps === true)
        return gen.var("props", true);
    const props = gen.var("props", (0, codegen_1._) `{}`);
    if (ps !== undefined)
        setEvaluated(gen, props, ps);
    return props;
}
exports.evaluatedPropsToName = evaluatedPropsToName;
function setEvaluated(gen, props, ps) {
    Object.keys(ps).forEach((p) => gen.assign((0, codegen_1._) `${props}${(0, codegen_1.getProperty)(p)}`, true));
}
exports.setEvaluated = setEvaluated;
const snippets = {};
function useFunc(gen, f) {
    return gen.scopeValue("func", {
        ref: f,
        code: snippets[f.code] || (snippets[f.code] = new code_1._Code(f.code)),
    });
}
exports.useFunc = useFunc;
var Type;
(function (Type) {
    Type[Type["Num"] = 0] = "Num";
    Type[Type["Str"] = 1] = "Str";
})(Type = exports.Type || (exports.Type = {}));
function getErrorPath(dataProp, dataPropType, jsPropertySyntax) {
    // let path
    if (dataProp instanceof codegen_1.Name) {
        const isNumber = dataPropType === Type.Num;
        return jsPropertySyntax
            ? isNumber
                ? (0, codegen_1._) `"[" + ${dataProp} + "]"`
                : (0, codegen_1._) `"['" + ${dataProp} + "']"`
            : isNumber
                ? (0, codegen_1._) `"/" + ${dataProp}`
                : (0, codegen_1._) `"/" + ${dataProp}.replace(/~/g, "~0").replace(/\\//g, "~1")`; // TODO maybe use global escapePointer
    }
    return jsPropertySyntax ? (0, codegen_1.getProperty)(dataProp).toString() : "/" + escapeJsonPointer(dataProp);
}
exports.getErrorPath = getErrorPath;
function checkStrictMode(it, msg, mode = it.opts.strictSchema) {
    if (!mode)
        return;
    msg = `strict mode: ${msg}`;
    if (mode === true)
        throw new Error(msg);
    it.self.logger.warn(msg);
}
exports.checkStrictMode = checkStrictMode;
//# sourceMappingURL=util.js.map

/***/ }),

/***/ 4333:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.shouldUseRule = exports.shouldUseGroup = exports.schemaHasRulesForType = void 0;
function schemaHasRulesForType({ schema, self }, type) {
    const group = self.RULES.types[type];
    return group && group !== true && shouldUseGroup(schema, group);
}
exports.schemaHasRulesForType = schemaHasRulesForType;
function shouldUseGroup(schema, group) {
    return group.rules.some((rule) => shouldUseRule(schema, rule));
}
exports.shouldUseGroup = shouldUseGroup;
function shouldUseRule(schema, rule) {
    var _a;
    return (schema[rule.keyword] !== undefined ||
        ((_a = rule.definition.implements) === null || _a === void 0 ? void 0 : _a.some((kwd) => schema[kwd] !== undefined)));
}
exports.shouldUseRule = shouldUseRule;
//# sourceMappingURL=applicability.js.map

/***/ }),

/***/ 8435:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.boolOrEmptySchema = exports.topBoolOrEmptySchema = void 0;
const errors_1 = __nccwpck_require__(9289);
const codegen_1 = __nccwpck_require__(7441);
const names_1 = __nccwpck_require__(7281);
const boolError = {
    message: "boolean schema is false",
};
function topBoolOrEmptySchema(it) {
    const { gen, schema, validateName } = it;
    if (schema === false) {
        falseSchemaError(it, false);
    }
    else if (typeof schema == "object" && schema.$async === true) {
        gen.return(names_1.default.data);
    }
    else {
        gen.assign((0, codegen_1._) `${validateName}.errors`, null);
        gen.return(true);
    }
}
exports.topBoolOrEmptySchema = topBoolOrEmptySchema;
function boolOrEmptySchema(it, valid) {
    const { gen, schema } = it;
    if (schema === false) {
        gen.var(valid, false); // TODO var
        falseSchemaError(it);
    }
    else {
        gen.var(valid, true); // TODO var
    }
}
exports.boolOrEmptySchema = boolOrEmptySchema;
function falseSchemaError(it, overrideAllErrors) {
    const { gen, data } = it;
    // TODO maybe some other interface should be used for non-keyword validation errors...
    const cxt = {
        gen,
        keyword: "false schema",
        data,
        schema: false,
        schemaCode: false,
        schemaValue: false,
        params: {},
        it,
    };
    (0, errors_1.reportError)(cxt, boolError, undefined, overrideAllErrors);
}
//# sourceMappingURL=boolSchema.js.map

/***/ }),

/***/ 4720:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.reportTypeError = exports.checkDataTypes = exports.checkDataType = exports.coerceAndCheckDataType = exports.getJSONTypes = exports.getSchemaTypes = exports.DataType = void 0;
const rules_1 = __nccwpck_require__(9019);
const applicability_1 = __nccwpck_require__(4333);
const errors_1 = __nccwpck_require__(9289);
const codegen_1 = __nccwpck_require__(7441);
const util_1 = __nccwpck_require__(156);
var DataType;
(function (DataType) {
    DataType[DataType["Correct"] = 0] = "Correct";
    DataType[DataType["Wrong"] = 1] = "Wrong";
})(DataType = exports.DataType || (exports.DataType = {}));
function getSchemaTypes(schema) {
    const types = getJSONTypes(schema.type);
    const hasNull = types.includes("null");
    if (hasNull) {
        if (schema.nullable === false)
            throw new Error("type: null contradicts nullable: false");
    }
    else {
        if (!types.length && schema.nullable !== undefined) {
            throw new Error('"nullable" cannot be used without "type"');
        }
        if (schema.nullable === true)
            types.push("null");
    }
    return types;
}
exports.getSchemaTypes = getSchemaTypes;
function getJSONTypes(ts) {
    const types = Array.isArray(ts) ? ts : ts ? [ts] : [];
    if (types.every(rules_1.isJSONType))
        return types;
    throw new Error("type must be JSONType or JSONType[]: " + types.join(","));
}
exports.getJSONTypes = getJSONTypes;
function coerceAndCheckDataType(it, types) {
    const { gen, data, opts } = it;
    const coerceTo = coerceToTypes(types, opts.coerceTypes);
    const checkTypes = types.length > 0 &&
        !(coerceTo.length === 0 && types.length === 1 && (0, applicability_1.schemaHasRulesForType)(it, types[0]));
    if (checkTypes) {
        const wrongType = checkDataTypes(types, data, opts.strictNumbers, DataType.Wrong);
        gen.if(wrongType, () => {
            if (coerceTo.length)
                coerceData(it, types, coerceTo);
            else
                reportTypeError(it);
        });
    }
    return checkTypes;
}
exports.coerceAndCheckDataType = coerceAndCheckDataType;
const COERCIBLE = new Set(["string", "number", "integer", "boolean", "null"]);
function coerceToTypes(types, coerceTypes) {
    return coerceTypes
        ? types.filter((t) => COERCIBLE.has(t) || (coerceTypes === "array" && t === "array"))
        : [];
}
function coerceData(it, types, coerceTo) {
    const { gen, data, opts } = it;
    const dataType = gen.let("dataType", (0, codegen_1._) `typeof ${data}`);
    const coerced = gen.let("coerced", (0, codegen_1._) `undefined`);
    if (opts.coerceTypes === "array") {
        gen.if((0, codegen_1._) `${dataType} == 'object' && Array.isArray(${data}) && ${data}.length == 1`, () => gen
            .assign(data, (0, codegen_1._) `${data}[0]`)
            .assign(dataType, (0, codegen_1._) `typeof ${data}`)
            .if(checkDataTypes(types, data, opts.strictNumbers), () => gen.assign(coerced, data)));
    }
    gen.if((0, codegen_1._) `${coerced} !== undefined`);
    for (const t of coerceTo) {
        if (COERCIBLE.has(t) || (t === "array" && opts.coerceTypes === "array")) {
            coerceSpecificType(t);
        }
    }
    gen.else();
    reportTypeError(it);
    gen.endIf();
    gen.if((0, codegen_1._) `${coerced} !== undefined`, () => {
        gen.assign(data, coerced);
        assignParentData(it, coerced);
    });
    function coerceSpecificType(t) {
        switch (t) {
            case "string":
                gen
                    .elseIf((0, codegen_1._) `${dataType} == "number" || ${dataType} == "boolean"`)
                    .assign(coerced, (0, codegen_1._) `"" + ${data}`)
                    .elseIf((0, codegen_1._) `${data} === null`)
                    .assign(coerced, (0, codegen_1._) `""`);
                return;
            case "number":
                gen
                    .elseIf((0, codegen_1._) `${dataType} == "boolean" || ${data} === null
              || (${dataType} == "string" && ${data} && ${data} == +${data})`)
                    .assign(coerced, (0, codegen_1._) `+${data}`);
                return;
            case "integer":
                gen
                    .elseIf((0, codegen_1._) `${dataType} === "boolean" || ${data} === null
              || (${dataType} === "string" && ${data} && ${data} == +${data} && !(${data} % 1))`)
                    .assign(coerced, (0, codegen_1._) `+${data}`);
                return;
            case "boolean":
                gen
                    .elseIf((0, codegen_1._) `${data} === "false" || ${data} === 0 || ${data} === null`)
                    .assign(coerced, false)
                    .elseIf((0, codegen_1._) `${data} === "true" || ${data} === 1`)
                    .assign(coerced, true);
                return;
            case "null":
                gen.elseIf((0, codegen_1._) `${data} === "" || ${data} === 0 || ${data} === false`);
                gen.assign(coerced, null);
                return;
            case "array":
                gen
                    .elseIf((0, codegen_1._) `${dataType} === "string" || ${dataType} === "number"
              || ${dataType} === "boolean" || ${data} === null`)
                    .assign(coerced, (0, codegen_1._) `[${data}]`);
        }
    }
}
function assignParentData({ gen, parentData, parentDataProperty }, expr) {
    // TODO use gen.property
    gen.if((0, codegen_1._) `${parentData} !== undefined`, () => gen.assign((0, codegen_1._) `${parentData}[${parentDataProperty}]`, expr));
}
function checkDataType(dataType, data, strictNums, correct = DataType.Correct) {
    const EQ = correct === DataType.Correct ? codegen_1.operators.EQ : codegen_1.operators.NEQ;
    let cond;
    switch (dataType) {
        case "null":
            return (0, codegen_1._) `${data} ${EQ} null`;
        case "array":
            cond = (0, codegen_1._) `Array.isArray(${data})`;
            break;
        case "object":
            cond = (0, codegen_1._) `${data} && typeof ${data} == "object" && !Array.isArray(${data})`;
            break;
        case "integer":
            cond = numCond((0, codegen_1._) `!(${data} % 1) && !isNaN(${data})`);
            break;
        case "number":
            cond = numCond();
            break;
        default:
            return (0, codegen_1._) `typeof ${data} ${EQ} ${dataType}`;
    }
    return correct === DataType.Correct ? cond : (0, codegen_1.not)(cond);
    function numCond(_cond = codegen_1.nil) {
        return (0, codegen_1.and)((0, codegen_1._) `typeof ${data} == "number"`, _cond, strictNums ? (0, codegen_1._) `isFinite(${data})` : codegen_1.nil);
    }
}
exports.checkDataType = checkDataType;
function checkDataTypes(dataTypes, data, strictNums, correct) {
    if (dataTypes.length === 1) {
        return checkDataType(dataTypes[0], data, strictNums, correct);
    }
    let cond;
    const types = (0, util_1.toHash)(dataTypes);
    if (types.array && types.object) {
        const notObj = (0, codegen_1._) `typeof ${data} != "object"`;
        cond = types.null ? notObj : (0, codegen_1._) `!${data} || ${notObj}`;
        delete types.null;
        delete types.array;
        delete types.object;
    }
    else {
        cond = codegen_1.nil;
    }
    if (types.number)
        delete types.integer;
    for (const t in types)
        cond = (0, codegen_1.and)(cond, checkDataType(t, data, strictNums, correct));
    return cond;
}
exports.checkDataTypes = checkDataTypes;
const typeError = {
    message: ({ schema }) => `must be ${schema}`,
    params: ({ schema, schemaValue }) => typeof schema == "string" ? (0, codegen_1._) `{type: ${schema}}` : (0, codegen_1._) `{type: ${schemaValue}}`,
};
function reportTypeError(it) {
    const cxt = getTypeErrorContext(it);
    (0, errors_1.reportError)(cxt, typeError);
}
exports.reportTypeError = reportTypeError;
function getTypeErrorContext(it) {
    const { gen, data, schema } = it;
    const schemaCode = (0, util_1.schemaRefOrVal)(it, schema, "type");
    return {
        gen,
        keyword: "type",
        data,
        schema: schema.type,
        schemaCode,
        schemaValue: schemaCode,
        parentSchema: schema,
        params: {},
        it,
    };
}
//# sourceMappingURL=dataType.js.map

/***/ }),

/***/ 5644:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.assignDefaults = void 0;
const codegen_1 = __nccwpck_require__(7441);
const util_1 = __nccwpck_require__(156);
function assignDefaults(it, ty) {
    const { properties, items } = it.schema;
    if (ty === "object" && properties) {
        for (const key in properties) {
            assignDefault(it, key, properties[key].default);
        }
    }
    else if (ty === "array" && Array.isArray(items)) {
        items.forEach((sch, i) => assignDefault(it, i, sch.default));
    }
}
exports.assignDefaults = assignDefaults;
function assignDefault(it, prop, defaultValue) {
    const { gen, compositeRule, data, opts } = it;
    if (defaultValue === undefined)
        return;
    const childData = (0, codegen_1._) `${data}${(0, codegen_1.getProperty)(prop)}`;
    if (compositeRule) {
        (0, util_1.checkStrictMode)(it, `default is ignored for: ${childData}`);
        return;
    }
    let condition = (0, codegen_1._) `${childData} === undefined`;
    if (opts.useDefaults === "empty") {
        condition = (0, codegen_1._) `${condition} || ${childData} === null || ${childData} === ""`;
    }
    // `${childData} === undefined` +
    // (opts.useDefaults === "empty" ? ` || ${childData} === null || ${childData} === ""` : "")
    gen.if(condition, (0, codegen_1._) `${childData} = ${(0, codegen_1.stringify)(defaultValue)}`);
}
//# sourceMappingURL=defaults.js.map

/***/ }),

/***/ 9691:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getData = exports.KeywordCxt = exports.validateFunctionCode = void 0;
const boolSchema_1 = __nccwpck_require__(8435);
const dataType_1 = __nccwpck_require__(4720);
const applicability_1 = __nccwpck_require__(4333);
const dataType_2 = __nccwpck_require__(4720);
const defaults_1 = __nccwpck_require__(5644);
const keyword_1 = __nccwpck_require__(2576);
const subschema_1 = __nccwpck_require__(4655);
const codegen_1 = __nccwpck_require__(7441);
const names_1 = __nccwpck_require__(7281);
const resolve_1 = __nccwpck_require__(4578);
const util_1 = __nccwpck_require__(156);
const errors_1 = __nccwpck_require__(9289);
// schema compilation - generates validation function, subschemaCode (below) is used for subschemas
function validateFunctionCode(it) {
    if (isSchemaObj(it)) {
        checkKeywords(it);
        if (schemaCxtHasRules(it)) {
            topSchemaObjCode(it);
            return;
        }
    }
    validateFunction(it, () => (0, boolSchema_1.topBoolOrEmptySchema)(it));
}
exports.validateFunctionCode = validateFunctionCode;
function validateFunction({ gen, validateName, schema, schemaEnv, opts }, body) {
    if (opts.code.es5) {
        gen.func(validateName, (0, codegen_1._) `${names_1.default.data}, ${names_1.default.valCxt}`, schemaEnv.$async, () => {
            gen.code((0, codegen_1._) `"use strict"; ${funcSourceUrl(schema, opts)}`);
            destructureValCxtES5(gen, opts);
            gen.code(body);
        });
    }
    else {
        gen.func(validateName, (0, codegen_1._) `${names_1.default.data}, ${destructureValCxt(opts)}`, schemaEnv.$async, () => gen.code(funcSourceUrl(schema, opts)).code(body));
    }
}
function destructureValCxt(opts) {
    return (0, codegen_1._) `{${names_1.default.instancePath}="", ${names_1.default.parentData}, ${names_1.default.parentDataProperty}, ${names_1.default.rootData}=${names_1.default.data}${opts.dynamicRef ? (0, codegen_1._) `, ${names_1.default.dynamicAnchors}={}` : codegen_1.nil}}={}`;
}
function destructureValCxtES5(gen, opts) {
    gen.if(names_1.default.valCxt, () => {
        gen.var(names_1.default.instancePath, (0, codegen_1._) `${names_1.default.valCxt}.${names_1.default.instancePath}`);
        gen.var(names_1.default.parentData, (0, codegen_1._) `${names_1.default.valCxt}.${names_1.default.parentData}`);
        gen.var(names_1.default.parentDataProperty, (0, codegen_1._) `${names_1.default.valCxt}.${names_1.default.parentDataProperty}`);
        gen.var(names_1.default.rootData, (0, codegen_1._) `${names_1.default.valCxt}.${names_1.default.rootData}`);
        if (opts.dynamicRef)
            gen.var(names_1.default.dynamicAnchors, (0, codegen_1._) `${names_1.default.valCxt}.${names_1.default.dynamicAnchors}`);
    }, () => {
        gen.var(names_1.default.instancePath, (0, codegen_1._) `""`);
        gen.var(names_1.default.parentData, (0, codegen_1._) `undefined`);
        gen.var(names_1.default.parentDataProperty, (0, codegen_1._) `undefined`);
        gen.var(names_1.default.rootData, names_1.default.data);
        if (opts.dynamicRef)
            gen.var(names_1.default.dynamicAnchors, (0, codegen_1._) `{}`);
    });
}
function topSchemaObjCode(it) {
    const { schema, opts, gen } = it;
    validateFunction(it, () => {
        if (opts.$comment && schema.$comment)
            commentKeyword(it);
        checkNoDefault(it);
        gen.let(names_1.default.vErrors, null);
        gen.let(names_1.default.errors, 0);
        if (opts.unevaluated)
            resetEvaluated(it);
        typeAndKeywords(it);
        returnResults(it);
    });
    return;
}
function resetEvaluated(it) {
    // TODO maybe some hook to execute it in the end to check whether props/items are Name, as in assignEvaluated
    const { gen, validateName } = it;
    it.evaluated = gen.const("evaluated", (0, codegen_1._) `${validateName}.evaluated`);
    gen.if((0, codegen_1._) `${it.evaluated}.dynamicProps`, () => gen.assign((0, codegen_1._) `${it.evaluated}.props`, (0, codegen_1._) `undefined`));
    gen.if((0, codegen_1._) `${it.evaluated}.dynamicItems`, () => gen.assign((0, codegen_1._) `${it.evaluated}.items`, (0, codegen_1._) `undefined`));
}
function funcSourceUrl(schema, opts) {
    const schId = typeof schema == "object" && schema[opts.schemaId];
    return schId && (opts.code.source || opts.code.process) ? (0, codegen_1._) `/*# sourceURL=${schId} */` : codegen_1.nil;
}
// schema compilation - this function is used recursively to generate code for sub-schemas
function subschemaCode(it, valid) {
    if (isSchemaObj(it)) {
        checkKeywords(it);
        if (schemaCxtHasRules(it)) {
            subSchemaObjCode(it, valid);
            return;
        }
    }
    (0, boolSchema_1.boolOrEmptySchema)(it, valid);
}
function schemaCxtHasRules({ schema, self }) {
    if (typeof schema == "boolean")
        return !schema;
    for (const key in schema)
        if (self.RULES.all[key])
            return true;
    return false;
}
function isSchemaObj(it) {
    return typeof it.schema != "boolean";
}
function subSchemaObjCode(it, valid) {
    const { schema, gen, opts } = it;
    if (opts.$comment && schema.$comment)
        commentKeyword(it);
    updateContext(it);
    checkAsyncSchema(it);
    const errsCount = gen.const("_errs", names_1.default.errors);
    typeAndKeywords(it, errsCount);
    // TODO var
    gen.var(valid, (0, codegen_1._) `${errsCount} === ${names_1.default.errors}`);
}
function checkKeywords(it) {
    (0, util_1.checkUnknownRules)(it);
    checkRefsAndKeywords(it);
}
function typeAndKeywords(it, errsCount) {
    if (it.opts.jtd)
        return schemaKeywords(it, [], false, errsCount);
    const types = (0, dataType_1.getSchemaTypes)(it.schema);
    const checkedTypes = (0, dataType_1.coerceAndCheckDataType)(it, types);
    schemaKeywords(it, types, !checkedTypes, errsCount);
}
function checkRefsAndKeywords(it) {
    const { schema, errSchemaPath, opts, self } = it;
    if (schema.$ref && opts.ignoreKeywordsWithRef && (0, util_1.schemaHasRulesButRef)(schema, self.RULES)) {
        self.logger.warn(`$ref: keywords ignored in schema at path "${errSchemaPath}"`);
    }
}
function checkNoDefault(it) {
    const { schema, opts } = it;
    if (schema.default !== undefined && opts.useDefaults && opts.strictSchema) {
        (0, util_1.checkStrictMode)(it, "default is ignored in the schema root");
    }
}
function updateContext(it) {
    const schId = it.schema[it.opts.schemaId];
    if (schId)
        it.baseId = (0, resolve_1.resolveUrl)(it.opts.uriResolver, it.baseId, schId);
}
function checkAsyncSchema(it) {
    if (it.schema.$async && !it.schemaEnv.$async)
        throw new Error("async schema in sync schema");
}
function commentKeyword({ gen, schemaEnv, schema, errSchemaPath, opts }) {
    const msg = schema.$comment;
    if (opts.$comment === true) {
        gen.code((0, codegen_1._) `${names_1.default.self}.logger.log(${msg})`);
    }
    else if (typeof opts.$comment == "function") {
        const schemaPath = (0, codegen_1.str) `${errSchemaPath}/$comment`;
        const rootName = gen.scopeValue("root", { ref: schemaEnv.root });
        gen.code((0, codegen_1._) `${names_1.default.self}.opts.$comment(${msg}, ${schemaPath}, ${rootName}.schema)`);
    }
}
function returnResults(it) {
    const { gen, schemaEnv, validateName, ValidationError, opts } = it;
    if (schemaEnv.$async) {
        // TODO assign unevaluated
        gen.if((0, codegen_1._) `${names_1.default.errors} === 0`, () => gen.return(names_1.default.data), () => gen.throw((0, codegen_1._) `new ${ValidationError}(${names_1.default.vErrors})`));
    }
    else {
        gen.assign((0, codegen_1._) `${validateName}.errors`, names_1.default.vErrors);
        if (opts.unevaluated)
            assignEvaluated(it);
        gen.return((0, codegen_1._) `${names_1.default.errors} === 0`);
    }
}
function assignEvaluated({ gen, evaluated, props, items }) {
    if (props instanceof codegen_1.Name)
        gen.assign((0, codegen_1._) `${evaluated}.props`, props);
    if (items instanceof codegen_1.Name)
        gen.assign((0, codegen_1._) `${evaluated}.items`, items);
}
function schemaKeywords(it, types, typeErrors, errsCount) {
    const { gen, schema, data, allErrors, opts, self } = it;
    const { RULES } = self;
    if (schema.$ref && (opts.ignoreKeywordsWithRef || !(0, util_1.schemaHasRulesButRef)(schema, RULES))) {
        gen.block(() => keywordCode(it, "$ref", RULES.all.$ref.definition)); // TODO typecast
        return;
    }
    if (!opts.jtd)
        checkStrictTypes(it, types);
    gen.block(() => {
        for (const group of RULES.rules)
            groupKeywords(group);
        groupKeywords(RULES.post);
    });
    function groupKeywords(group) {
        if (!(0, applicability_1.shouldUseGroup)(schema, group))
            return;
        if (group.type) {
            gen.if((0, dataType_2.checkDataType)(group.type, data, opts.strictNumbers));
            iterateKeywords(it, group);
            if (types.length === 1 && types[0] === group.type && typeErrors) {
                gen.else();
                (0, dataType_2.reportTypeError)(it);
            }
            gen.endIf();
        }
        else {
            iterateKeywords(it, group);
        }
        // TODO make it "ok" call?
        if (!allErrors)
            gen.if((0, codegen_1._) `${names_1.default.errors} === ${errsCount || 0}`);
    }
}
function iterateKeywords(it, group) {
    const { gen, schema, opts: { useDefaults }, } = it;
    if (useDefaults)
        (0, defaults_1.assignDefaults)(it, group.type);
    gen.block(() => {
        for (const rule of group.rules) {
            if ((0, applicability_1.shouldUseRule)(schema, rule)) {
                keywordCode(it, rule.keyword, rule.definition, group.type);
            }
        }
    });
}
function checkStrictTypes(it, types) {
    if (it.schemaEnv.meta || !it.opts.strictTypes)
        return;
    checkContextTypes(it, types);
    if (!it.opts.allowUnionTypes)
        checkMultipleTypes(it, types);
    checkKeywordTypes(it, it.dataTypes);
}
function checkContextTypes(it, types) {
    if (!types.length)
        return;
    if (!it.dataTypes.length) {
        it.dataTypes = types;
        return;
    }
    types.forEach((t) => {
        if (!includesType(it.dataTypes, t)) {
            strictTypesError(it, `type "${t}" not allowed by context "${it.dataTypes.join(",")}"`);
        }
    });
    narrowSchemaTypes(it, types);
}
function checkMultipleTypes(it, ts) {
    if (ts.length > 1 && !(ts.length === 2 && ts.includes("null"))) {
        strictTypesError(it, "use allowUnionTypes to allow union type keyword");
    }
}
function checkKeywordTypes(it, ts) {
    const rules = it.self.RULES.all;
    for (const keyword in rules) {
        const rule = rules[keyword];
        if (typeof rule == "object" && (0, applicability_1.shouldUseRule)(it.schema, rule)) {
            const { type } = rule.definition;
            if (type.length && !type.some((t) => hasApplicableType(ts, t))) {
                strictTypesError(it, `missing type "${type.join(",")}" for keyword "${keyword}"`);
            }
        }
    }
}
function hasApplicableType(schTs, kwdT) {
    return schTs.includes(kwdT) || (kwdT === "number" && schTs.includes("integer"));
}
function includesType(ts, t) {
    return ts.includes(t) || (t === "integer" && ts.includes("number"));
}
function narrowSchemaTypes(it, withTypes) {
    const ts = [];
    for (const t of it.dataTypes) {
        if (includesType(withTypes, t))
            ts.push(t);
        else if (withTypes.includes("integer") && t === "number")
            ts.push("integer");
    }
    it.dataTypes = ts;
}
function strictTypesError(it, msg) {
    const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;
    msg += ` at "${schemaPath}" (strictTypes)`;
    (0, util_1.checkStrictMode)(it, msg, it.opts.strictTypes);
}
class KeywordCxt {
    constructor(it, def, keyword) {
        (0, keyword_1.validateKeywordUsage)(it, def, keyword);
        this.gen = it.gen;
        this.allErrors = it.allErrors;
        this.keyword = keyword;
        this.data = it.data;
        this.schema = it.schema[keyword];
        this.$data = def.$data && it.opts.$data && this.schema && this.schema.$data;
        this.schemaValue = (0, util_1.schemaRefOrVal)(it, this.schema, keyword, this.$data);
        this.schemaType = def.schemaType;
        this.parentSchema = it.schema;
        this.params = {};
        this.it = it;
        this.def = def;
        if (this.$data) {
            this.schemaCode = it.gen.const("vSchema", getData(this.$data, it));
        }
        else {
            this.schemaCode = this.schemaValue;
            if (!(0, keyword_1.validSchemaType)(this.schema, def.schemaType, def.allowUndefined)) {
                throw new Error(`${keyword} value must be ${JSON.stringify(def.schemaType)}`);
            }
        }
        if ("code" in def ? def.trackErrors : def.errors !== false) {
            this.errsCount = it.gen.const("_errs", names_1.default.errors);
        }
    }
    result(condition, successAction, failAction) {
        this.failResult((0, codegen_1.not)(condition), successAction, failAction);
    }
    failResult(condition, successAction, failAction) {
        this.gen.if(condition);
        if (failAction)
            failAction();
        else
            this.error();
        if (successAction) {
            this.gen.else();
            successAction();
            if (this.allErrors)
                this.gen.endIf();
        }
        else {
            if (this.allErrors)
                this.gen.endIf();
            else
                this.gen.else();
        }
    }
    pass(condition, failAction) {
        this.failResult((0, codegen_1.not)(condition), undefined, failAction);
    }
    fail(condition) {
        if (condition === undefined) {
            this.error();
            if (!this.allErrors)
                this.gen.if(false); // this branch will be removed by gen.optimize
            return;
        }
        this.gen.if(condition);
        this.error();
        if (this.allErrors)
            this.gen.endIf();
        else
            this.gen.else();
    }
    fail$data(condition) {
        if (!this.$data)
            return this.fail(condition);
        const { schemaCode } = this;
        this.fail((0, codegen_1._) `${schemaCode} !== undefined && (${(0, codegen_1.or)(this.invalid$data(), condition)})`);
    }
    error(append, errorParams, errorPaths) {
        if (errorParams) {
            this.setParams(errorParams);
            this._error(append, errorPaths);
            this.setParams({});
            return;
        }
        this._error(append, errorPaths);
    }
    _error(append, errorPaths) {
        ;
        (append ? errors_1.reportExtraError : errors_1.reportError)(this, this.def.error, errorPaths);
    }
    $dataError() {
        (0, errors_1.reportError)(this, this.def.$dataError || errors_1.keyword$DataError);
    }
    reset() {
        if (this.errsCount === undefined)
            throw new Error('add "trackErrors" to keyword definition');
        (0, errors_1.resetErrorsCount)(this.gen, this.errsCount);
    }
    ok(cond) {
        if (!this.allErrors)
            this.gen.if(cond);
    }
    setParams(obj, assign) {
        if (assign)
            Object.assign(this.params, obj);
        else
            this.params = obj;
    }
    block$data(valid, codeBlock, $dataValid = codegen_1.nil) {
        this.gen.block(() => {
            this.check$data(valid, $dataValid);
            codeBlock();
        });
    }
    check$data(valid = codegen_1.nil, $dataValid = codegen_1.nil) {
        if (!this.$data)
            return;
        const { gen, schemaCode, schemaType, def } = this;
        gen.if((0, codegen_1.or)((0, codegen_1._) `${schemaCode} === undefined`, $dataValid));
        if (valid !== codegen_1.nil)
            gen.assign(valid, true);
        if (schemaType.length || def.validateSchema) {
            gen.elseIf(this.invalid$data());
            this.$dataError();
            if (valid !== codegen_1.nil)
                gen.assign(valid, false);
        }
        gen.else();
    }
    invalid$data() {
        const { gen, schemaCode, schemaType, def, it } = this;
        return (0, codegen_1.or)(wrong$DataType(), invalid$DataSchema());
        function wrong$DataType() {
            if (schemaType.length) {
                /* istanbul ignore if */
                if (!(schemaCode instanceof codegen_1.Name))
                    throw new Error("ajv implementation error");
                const st = Array.isArray(schemaType) ? schemaType : [schemaType];
                return (0, codegen_1._) `${(0, dataType_2.checkDataTypes)(st, schemaCode, it.opts.strictNumbers, dataType_2.DataType.Wrong)}`;
            }
            return codegen_1.nil;
        }
        function invalid$DataSchema() {
            if (def.validateSchema) {
                const validateSchemaRef = gen.scopeValue("validate$data", { ref: def.validateSchema }); // TODO value.code for standalone
                return (0, codegen_1._) `!${validateSchemaRef}(${schemaCode})`;
            }
            return codegen_1.nil;
        }
    }
    subschema(appl, valid) {
        const subschema = (0, subschema_1.getSubschema)(this.it, appl);
        (0, subschema_1.extendSubschemaData)(subschema, this.it, appl);
        (0, subschema_1.extendSubschemaMode)(subschema, appl);
        const nextContext = { ...this.it, ...subschema, items: undefined, props: undefined };
        subschemaCode(nextContext, valid);
        return nextContext;
    }
    mergeEvaluated(schemaCxt, toName) {
        const { it, gen } = this;
        if (!it.opts.unevaluated)
            return;
        if (it.props !== true && schemaCxt.props !== undefined) {
            it.props = util_1.mergeEvaluated.props(gen, schemaCxt.props, it.props, toName);
        }
        if (it.items !== true && schemaCxt.items !== undefined) {
            it.items = util_1.mergeEvaluated.items(gen, schemaCxt.items, it.items, toName);
        }
    }
    mergeValidEvaluated(schemaCxt, valid) {
        const { it, gen } = this;
        if (it.opts.unevaluated && (it.props !== true || it.items !== true)) {
            gen.if(valid, () => this.mergeEvaluated(schemaCxt, codegen_1.Name));
            return true;
        }
    }
}
exports.KeywordCxt = KeywordCxt;
function keywordCode(it, keyword, def, ruleType) {
    const cxt = new KeywordCxt(it, def, keyword);
    if ("code" in def) {
        def.code(cxt, ruleType);
    }
    else if (cxt.$data && def.validate) {
        (0, keyword_1.funcKeywordCode)(cxt, def);
    }
    else if ("macro" in def) {
        (0, keyword_1.macroKeywordCode)(cxt, def);
    }
    else if (def.compile || def.validate) {
        (0, keyword_1.funcKeywordCode)(cxt, def);
    }
}
const JSON_POINTER = /^\/(?:[^~]|~0|~1)*$/;
const RELATIVE_JSON_POINTER = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;
function getData($data, { dataLevel, dataNames, dataPathArr }) {
    let jsonPointer;
    let data;
    if ($data === "")
        return names_1.default.rootData;
    if ($data[0] === "/") {
        if (!JSON_POINTER.test($data))
            throw new Error(`Invalid JSON-pointer: ${$data}`);
        jsonPointer = $data;
        data = names_1.default.rootData;
    }
    else {
        const matches = RELATIVE_JSON_POINTER.exec($data);
        if (!matches)
            throw new Error(`Invalid JSON-pointer: ${$data}`);
        const up = +matches[1];
        jsonPointer = matches[2];
        if (jsonPointer === "#") {
            if (up >= dataLevel)
                throw new Error(errorMsg("property/index", up));
            return dataPathArr[dataLevel - up];
        }
        if (up > dataLevel)
            throw new Error(errorMsg("data", up));
        data = dataNames[dataLevel - up];
        if (!jsonPointer)
            return data;
    }
    let expr = data;
    const segments = jsonPointer.split("/");
    for (const segment of segments) {
        if (segment) {
            data = (0, codegen_1._) `${data}${(0, codegen_1.getProperty)((0, util_1.unescapeJsonPointer)(segment))}`;
            expr = (0, codegen_1._) `${expr} && ${data}`;
        }
    }
    return expr;
    function errorMsg(pointerType, up) {
        return `Cannot access ${pointerType} ${up} levels up, current level is ${dataLevel}`;
    }
}
exports.getData = getData;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 2576:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.validateKeywordUsage = exports.validSchemaType = exports.funcKeywordCode = exports.macroKeywordCode = void 0;
const codegen_1 = __nccwpck_require__(7441);
const names_1 = __nccwpck_require__(7281);
const code_1 = __nccwpck_require__(8470);
const errors_1 = __nccwpck_require__(9289);
function macroKeywordCode(cxt, def) {
    const { gen, keyword, schema, parentSchema, it } = cxt;
    const macroSchema = def.macro.call(it.self, schema, parentSchema, it);
    const schemaRef = useKeyword(gen, keyword, macroSchema);
    if (it.opts.validateSchema !== false)
        it.self.validateSchema(macroSchema, true);
    const valid = gen.name("valid");
    cxt.subschema({
        schema: macroSchema,
        schemaPath: codegen_1.nil,
        errSchemaPath: `${it.errSchemaPath}/${keyword}`,
        topSchemaRef: schemaRef,
        compositeRule: true,
    }, valid);
    cxt.pass(valid, () => cxt.error(true));
}
exports.macroKeywordCode = macroKeywordCode;
function funcKeywordCode(cxt, def) {
    var _a;
    const { gen, keyword, schema, parentSchema, $data, it } = cxt;
    checkAsyncKeyword(it, def);
    const validate = !$data && def.compile ? def.compile.call(it.self, schema, parentSchema, it) : def.validate;
    const validateRef = useKeyword(gen, keyword, validate);
    const valid = gen.let("valid");
    cxt.block$data(valid, validateKeyword);
    cxt.ok((_a = def.valid) !== null && _a !== void 0 ? _a : valid);
    function validateKeyword() {
        if (def.errors === false) {
            assignValid();
            if (def.modifying)
                modifyData(cxt);
            reportErrs(() => cxt.error());
        }
        else {
            const ruleErrs = def.async ? validateAsync() : validateSync();
            if (def.modifying)
                modifyData(cxt);
            reportErrs(() => addErrs(cxt, ruleErrs));
        }
    }
    function validateAsync() {
        const ruleErrs = gen.let("ruleErrs", null);
        gen.try(() => assignValid((0, codegen_1._) `await `), (e) => gen.assign(valid, false).if((0, codegen_1._) `${e} instanceof ${it.ValidationError}`, () => gen.assign(ruleErrs, (0, codegen_1._) `${e}.errors`), () => gen.throw(e)));
        return ruleErrs;
    }
    function validateSync() {
        const validateErrs = (0, codegen_1._) `${validateRef}.errors`;
        gen.assign(validateErrs, null);
        assignValid(codegen_1.nil);
        return validateErrs;
    }
    function assignValid(_await = def.async ? (0, codegen_1._) `await ` : codegen_1.nil) {
        const passCxt = it.opts.passContext ? names_1.default.this : names_1.default.self;
        const passSchema = !(("compile" in def && !$data) || def.schema === false);
        gen.assign(valid, (0, codegen_1._) `${_await}${(0, code_1.callValidateCode)(cxt, validateRef, passCxt, passSchema)}`, def.modifying);
    }
    function reportErrs(errors) {
        var _a;
        gen.if((0, codegen_1.not)((_a = def.valid) !== null && _a !== void 0 ? _a : valid), errors);
    }
}
exports.funcKeywordCode = funcKeywordCode;
function modifyData(cxt) {
    const { gen, data, it } = cxt;
    gen.if(it.parentData, () => gen.assign(data, (0, codegen_1._) `${it.parentData}[${it.parentDataProperty}]`));
}
function addErrs(cxt, errs) {
    const { gen } = cxt;
    gen.if((0, codegen_1._) `Array.isArray(${errs})`, () => {
        gen
            .assign(names_1.default.vErrors, (0, codegen_1._) `${names_1.default.vErrors} === null ? ${errs} : ${names_1.default.vErrors}.concat(${errs})`)
            .assign(names_1.default.errors, (0, codegen_1._) `${names_1.default.vErrors}.length`);
        (0, errors_1.extendErrors)(cxt);
    }, () => cxt.error());
}
function checkAsyncKeyword({ schemaEnv }, def) {
    if (def.async && !schemaEnv.$async)
        throw new Error("async keyword in sync schema");
}
function useKeyword(gen, keyword, result) {
    if (result === undefined)
        throw new Error(`keyword "${keyword}" failed to compile`);
    return gen.scopeValue("keyword", typeof result == "function" ? { ref: result } : { ref: result, code: (0, codegen_1.stringify)(result) });
}
function validSchemaType(schema, schemaType, allowUndefined = false) {
    // TODO add tests
    return (!schemaType.length ||
        schemaType.some((st) => st === "array"
            ? Array.isArray(schema)
            : st === "object"
                ? schema && typeof schema == "object" && !Array.isArray(schema)
                : typeof schema == st || (allowUndefined && typeof schema == "undefined")));
}
exports.validSchemaType = validSchemaType;
function validateKeywordUsage({ schema, opts, self, errSchemaPath }, def, keyword) {
    /* istanbul ignore if */
    if (Array.isArray(def.keyword) ? !def.keyword.includes(keyword) : def.keyword !== keyword) {
        throw new Error("ajv implementation error");
    }
    const deps = def.dependencies;
    if (deps === null || deps === void 0 ? void 0 : deps.some((kwd) => !Object.prototype.hasOwnProperty.call(schema, kwd))) {
        throw new Error(`parent schema must have dependencies of ${keyword}: ${deps.join(",")}`);
    }
    if (def.validateSchema) {
        const valid = def.validateSchema(schema[keyword]);
        if (!valid) {
            const msg = `keyword "${keyword}" value is invalid at path "${errSchemaPath}": ` +
                self.errorsText(def.validateSchema.errors);
            if (opts.validateSchema === "log")
                self.logger.error(msg);
            else
                throw new Error(msg);
        }
    }
}
exports.validateKeywordUsage = validateKeywordUsage;
//# sourceMappingURL=keyword.js.map

/***/ }),

/***/ 4655:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.extendSubschemaMode = exports.extendSubschemaData = exports.getSubschema = void 0;
const codegen_1 = __nccwpck_require__(7441);
const util_1 = __nccwpck_require__(156);
function getSubschema(it, { keyword, schemaProp, schema, schemaPath, errSchemaPath, topSchemaRef }) {
    if (keyword !== undefined && schema !== undefined) {
        throw new Error('both "keyword" and "schema" passed, only one allowed');
    }
    if (keyword !== undefined) {
        const sch = it.schema[keyword];
        return schemaProp === undefined
            ? {
                schema: sch,
                schemaPath: (0, codegen_1._) `${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}`,
                errSchemaPath: `${it.errSchemaPath}/${keyword}`,
            }
            : {
                schema: sch[schemaProp],
                schemaPath: (0, codegen_1._) `${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}${(0, codegen_1.getProperty)(schemaProp)}`,
                errSchemaPath: `${it.errSchemaPath}/${keyword}/${(0, util_1.escapeFragment)(schemaProp)}`,
            };
    }
    if (schema !== undefined) {
        if (schemaPath === undefined || errSchemaPath === undefined || topSchemaRef === undefined) {
            throw new Error('"schemaPath", "errSchemaPath" and "topSchemaRef" are required with "schema"');
        }
        return {
            schema,
            schemaPath,
            topSchemaRef,
            errSchemaPath,
        };
    }
    throw new Error('either "keyword" or "schema" must be passed');
}
exports.getSubschema = getSubschema;
function extendSubschemaData(subschema, it, { dataProp, dataPropType: dpType, data, dataTypes, propertyName }) {
    if (data !== undefined && dataProp !== undefined) {
        throw new Error('both "data" and "dataProp" passed, only one allowed');
    }
    const { gen } = it;
    if (dataProp !== undefined) {
        const { errorPath, dataPathArr, opts } = it;
        const nextData = gen.let("data", (0, codegen_1._) `${it.data}${(0, codegen_1.getProperty)(dataProp)}`, true);
        dataContextProps(nextData);
        subschema.errorPath = (0, codegen_1.str) `${errorPath}${(0, util_1.getErrorPath)(dataProp, dpType, opts.jsPropertySyntax)}`;
        subschema.parentDataProperty = (0, codegen_1._) `${dataProp}`;
        subschema.dataPathArr = [...dataPathArr, subschema.parentDataProperty];
    }
    if (data !== undefined) {
        const nextData = data instanceof codegen_1.Name ? data : gen.let("data", data, true); // replaceable if used once?
        dataContextProps(nextData);
        if (propertyName !== undefined)
            subschema.propertyName = propertyName;
        // TODO something is possibly wrong here with not changing parentDataProperty and not appending dataPathArr
    }
    if (dataTypes)
        subschema.dataTypes = dataTypes;
    function dataContextProps(_nextData) {
        subschema.data = _nextData;
        subschema.dataLevel = it.dataLevel + 1;
        subschema.dataTypes = [];
        it.definedProperties = new Set();
        subschema.parentData = it.data;
        subschema.dataNames = [...it.dataNames, _nextData];
    }
}
exports.extendSubschemaData = extendSubschemaData;
function extendSubschemaMode(subschema, { jtdDiscriminator, jtdMetadata, compositeRule, createErrors, allErrors }) {
    if (compositeRule !== undefined)
        subschema.compositeRule = compositeRule;
    if (createErrors !== undefined)
        subschema.createErrors = createErrors;
    if (allErrors !== undefined)
        subschema.allErrors = allErrors;
    subschema.jtdDiscriminator = jtdDiscriminator; // not inherited
    subschema.jtdMetadata = jtdMetadata; // not inherited
}
exports.extendSubschemaMode = extendSubschemaMode;
//# sourceMappingURL=subschema.js.map

/***/ }),

/***/ 1932:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;
var validate_1 = __nccwpck_require__(9691);
Object.defineProperty(exports, "KeywordCxt", ({ enumerable: true, get: function () { return validate_1.KeywordCxt; } }));
var codegen_1 = __nccwpck_require__(7441);
Object.defineProperty(exports, "_", ({ enumerable: true, get: function () { return codegen_1._; } }));
Object.defineProperty(exports, "str", ({ enumerable: true, get: function () { return codegen_1.str; } }));
Object.defineProperty(exports, "stringify", ({ enumerable: true, get: function () { return codegen_1.stringify; } }));
Object.defineProperty(exports, "nil", ({ enumerable: true, get: function () { return codegen_1.nil; } }));
Object.defineProperty(exports, "Name", ({ enumerable: true, get: function () { return codegen_1.Name; } }));
Object.defineProperty(exports, "CodeGen", ({ enumerable: true, get: function () { return codegen_1.CodeGen; } }));
const validation_error_1 = __nccwpck_require__(958);
const ref_error_1 = __nccwpck_require__(7270);
const rules_1 = __nccwpck_require__(9019);
const compile_1 = __nccwpck_require__(3868);
const codegen_2 = __nccwpck_require__(7441);
const resolve_1 = __nccwpck_require__(4578);
const dataType_1 = __nccwpck_require__(4720);
const util_1 = __nccwpck_require__(156);
const $dataRefSchema = __nccwpck_require__(199);
const uri_1 = __nccwpck_require__(4917);
const defaultRegExp = (str, flags) => new RegExp(str, flags);
defaultRegExp.code = "new RegExp";
const META_IGNORE_OPTIONS = ["removeAdditional", "useDefaults", "coerceTypes"];
const EXT_SCOPE_NAMES = new Set([
    "validate",
    "serialize",
    "parse",
    "wrapper",
    "root",
    "schema",
    "keyword",
    "pattern",
    "formats",
    "validate$data",
    "func",
    "obj",
    "Error",
]);
const removedOptions = {
    errorDataPath: "",
    format: "`validateFormats: false` can be used instead.",
    nullable: '"nullable" keyword is supported by default.',
    jsonPointers: "Deprecated jsPropertySyntax can be used instead.",
    extendRefs: "Deprecated ignoreKeywordsWithRef can be used instead.",
    missingRefs: "Pass empty schema with $id that should be ignored to ajv.addSchema.",
    processCode: "Use option `code: {process: (code, schemaEnv: object) => string}`",
    sourceCode: "Use option `code: {source: true}`",
    strictDefaults: "It is default now, see option `strict`.",
    strictKeywords: "It is default now, see option `strict`.",
    uniqueItems: '"uniqueItems" keyword is always validated.',
    unknownFormats: "Disable strict mode or pass `true` to `ajv.addFormat` (or `formats` option).",
    cache: "Map is used as cache, schema object as key.",
    serialize: "Map is used as cache, schema object as key.",
    ajvErrors: "It is default now.",
};
const deprecatedOptions = {
    ignoreKeywordsWithRef: "",
    jsPropertySyntax: "",
    unicode: '"minLength"/"maxLength" account for unicode characters by default.',
};
const MAX_EXPRESSION = 200;
// eslint-disable-next-line complexity
function requiredOptions(o) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0;
    const s = o.strict;
    const _optz = (_a = o.code) === null || _a === void 0 ? void 0 : _a.optimize;
    const optimize = _optz === true || _optz === undefined ? 1 : _optz || 0;
    const regExp = (_c = (_b = o.code) === null || _b === void 0 ? void 0 : _b.regExp) !== null && _c !== void 0 ? _c : defaultRegExp;
    const uriResolver = (_d = o.uriResolver) !== null && _d !== void 0 ? _d : uri_1.default;
    return {
        strictSchema: (_f = (_e = o.strictSchema) !== null && _e !== void 0 ? _e : s) !== null && _f !== void 0 ? _f : true,
        strictNumbers: (_h = (_g = o.strictNumbers) !== null && _g !== void 0 ? _g : s) !== null && _h !== void 0 ? _h : true,
        strictTypes: (_k = (_j = o.strictTypes) !== null && _j !== void 0 ? _j : s) !== null && _k !== void 0 ? _k : "log",
        strictTuples: (_m = (_l = o.strictTuples) !== null && _l !== void 0 ? _l : s) !== null && _m !== void 0 ? _m : "log",
        strictRequired: (_p = (_o = o.strictRequired) !== null && _o !== void 0 ? _o : s) !== null && _p !== void 0 ? _p : false,
        code: o.code ? { ...o.code, optimize, regExp } : { optimize, regExp },
        loopRequired: (_q = o.loopRequired) !== null && _q !== void 0 ? _q : MAX_EXPRESSION,
        loopEnum: (_r = o.loopEnum) !== null && _r !== void 0 ? _r : MAX_EXPRESSION,
        meta: (_s = o.meta) !== null && _s !== void 0 ? _s : true,
        messages: (_t = o.messages) !== null && _t !== void 0 ? _t : true,
        inlineRefs: (_u = o.inlineRefs) !== null && _u !== void 0 ? _u : true,
        schemaId: (_v = o.schemaId) !== null && _v !== void 0 ? _v : "$id",
        addUsedSchema: (_w = o.addUsedSchema) !== null && _w !== void 0 ? _w : true,
        validateSchema: (_x = o.validateSchema) !== null && _x !== void 0 ? _x : true,
        validateFormats: (_y = o.validateFormats) !== null && _y !== void 0 ? _y : true,
        unicodeRegExp: (_z = o.unicodeRegExp) !== null && _z !== void 0 ? _z : true,
        int32range: (_0 = o.int32range) !== null && _0 !== void 0 ? _0 : true,
        uriResolver: uriResolver,
    };
}
class Ajv {
    constructor(opts = {}) {
        this.schemas = {};
        this.refs = {};
        this.formats = {};
        this._compilations = new Set();
        this._loading = {};
        this._cache = new Map();
        opts = this.opts = { ...opts, ...requiredOptions(opts) };
        const { es5, lines } = this.opts.code;
        this.scope = new codegen_2.ValueScope({ scope: {}, prefixes: EXT_SCOPE_NAMES, es5, lines });
        this.logger = getLogger(opts.logger);
        const formatOpt = opts.validateFormats;
        opts.validateFormats = false;
        this.RULES = (0, rules_1.getRules)();
        checkOptions.call(this, removedOptions, opts, "NOT SUPPORTED");
        checkOptions.call(this, deprecatedOptions, opts, "DEPRECATED", "warn");
        this._metaOpts = getMetaSchemaOptions.call(this);
        if (opts.formats)
            addInitialFormats.call(this);
        this._addVocabularies();
        this._addDefaultMetaSchema();
        if (opts.keywords)
            addInitialKeywords.call(this, opts.keywords);
        if (typeof opts.meta == "object")
            this.addMetaSchema(opts.meta);
        addInitialSchemas.call(this);
        opts.validateFormats = formatOpt;
    }
    _addVocabularies() {
        this.addKeyword("$async");
    }
    _addDefaultMetaSchema() {
        const { $data, meta, schemaId } = this.opts;
        let _dataRefSchema = $dataRefSchema;
        if (schemaId === "id") {
            _dataRefSchema = { ...$dataRefSchema };
            _dataRefSchema.id = _dataRefSchema.$id;
            delete _dataRefSchema.$id;
        }
        if (meta && $data)
            this.addMetaSchema(_dataRefSchema, _dataRefSchema[schemaId], false);
    }
    defaultMeta() {
        const { meta, schemaId } = this.opts;
        return (this.opts.defaultMeta = typeof meta == "object" ? meta[schemaId] || meta : undefined);
    }
    validate(schemaKeyRef, // key, ref or schema object
    data // to be validated
    ) {
        let v;
        if (typeof schemaKeyRef == "string") {
            v = this.getSchema(schemaKeyRef);
            if (!v)
                throw new Error(`no schema with key or ref "${schemaKeyRef}"`);
        }
        else {
            v = this.compile(schemaKeyRef);
        }
        const valid = v(data);
        if (!("$async" in v))
            this.errors = v.errors;
        return valid;
    }
    compile(schema, _meta) {
        const sch = this._addSchema(schema, _meta);
        return (sch.validate || this._compileSchemaEnv(sch));
    }
    compileAsync(schema, meta) {
        if (typeof this.opts.loadSchema != "function") {
            throw new Error("options.loadSchema should be a function");
        }
        const { loadSchema } = this.opts;
        return runCompileAsync.call(this, schema, meta);
        async function runCompileAsync(_schema, _meta) {
            await loadMetaSchema.call(this, _schema.$schema);
            const sch = this._addSchema(_schema, _meta);
            return sch.validate || _compileAsync.call(this, sch);
        }
        async function loadMetaSchema($ref) {
            if ($ref && !this.getSchema($ref)) {
                await runCompileAsync.call(this, { $ref }, true);
            }
        }
        async function _compileAsync(sch) {
            try {
                return this._compileSchemaEnv(sch);
            }
            catch (e) {
                if (!(e instanceof ref_error_1.default))
                    throw e;
                checkLoaded.call(this, e);
                await loadMissingSchema.call(this, e.missingSchema);
                return _compileAsync.call(this, sch);
            }
        }
        function checkLoaded({ missingSchema: ref, missingRef }) {
            if (this.refs[ref]) {
                throw new Error(`AnySchema ${ref} is loaded but ${missingRef} cannot be resolved`);
            }
        }
        async function loadMissingSchema(ref) {
            const _schema = await _loadSchema.call(this, ref);
            if (!this.refs[ref])
                await loadMetaSchema.call(this, _schema.$schema);
            if (!this.refs[ref])
                this.addSchema(_schema, ref, meta);
        }
        async function _loadSchema(ref) {
            const p = this._loading[ref];
            if (p)
                return p;
            try {
                return await (this._loading[ref] = loadSchema(ref));
            }
            finally {
                delete this._loading[ref];
            }
        }
    }
    // Adds schema to the instance
    addSchema(schema, // If array is passed, `key` will be ignored
    key, // Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.
    _meta, // true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.
    _validateSchema = this.opts.validateSchema // false to skip schema validation. Used internally, option validateSchema should be used instead.
    ) {
        if (Array.isArray(schema)) {
            for (const sch of schema)
                this.addSchema(sch, undefined, _meta, _validateSchema);
            return this;
        }
        let id;
        if (typeof schema === "object") {
            const { schemaId } = this.opts;
            id = schema[schemaId];
            if (id !== undefined && typeof id != "string") {
                throw new Error(`schema ${schemaId} must be string`);
            }
        }
        key = (0, resolve_1.normalizeId)(key || id);
        this._checkUnique(key);
        this.schemas[key] = this._addSchema(schema, _meta, key, _validateSchema, true);
        return this;
    }
    // Add schema that will be used to validate other schemas
    // options in META_IGNORE_OPTIONS are alway set to false
    addMetaSchema(schema, key, // schema key
    _validateSchema = this.opts.validateSchema // false to skip schema validation, can be used to override validateSchema option for meta-schema
    ) {
        this.addSchema(schema, key, true, _validateSchema);
        return this;
    }
    //  Validate schema against its meta-schema
    validateSchema(schema, throwOrLogError) {
        if (typeof schema == "boolean")
            return true;
        let $schema;
        $schema = schema.$schema;
        if ($schema !== undefined && typeof $schema != "string") {
            throw new Error("$schema must be a string");
        }
        $schema = $schema || this.opts.defaultMeta || this.defaultMeta();
        if (!$schema) {
            this.logger.warn("meta-schema not available");
            this.errors = null;
            return true;
        }
        const valid = this.validate($schema, schema);
        if (!valid && throwOrLogError) {
            const message = "schema is invalid: " + this.errorsText();
            if (this.opts.validateSchema === "log")
                this.logger.error(message);
            else
                throw new Error(message);
        }
        return valid;
    }
    // Get compiled schema by `key` or `ref`.
    // (`key` that was passed to `addSchema` or full schema reference - `schema.$id` or resolved id)
    getSchema(keyRef) {
        let sch;
        while (typeof (sch = getSchEnv.call(this, keyRef)) == "string")
            keyRef = sch;
        if (sch === undefined) {
            const { schemaId } = this.opts;
            const root = new compile_1.SchemaEnv({ schema: {}, schemaId });
            sch = compile_1.resolveSchema.call(this, root, keyRef);
            if (!sch)
                return;
            this.refs[keyRef] = sch;
        }
        return (sch.validate || this._compileSchemaEnv(sch));
    }
    // Remove cached schema(s).
    // If no parameter is passed all schemas but meta-schemas are removed.
    // If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.
    // Even if schema is referenced by other schemas it still can be removed as other schemas have local references.
    removeSchema(schemaKeyRef) {
        if (schemaKeyRef instanceof RegExp) {
            this._removeAllSchemas(this.schemas, schemaKeyRef);
            this._removeAllSchemas(this.refs, schemaKeyRef);
            return this;
        }
        switch (typeof schemaKeyRef) {
            case "undefined":
                this._removeAllSchemas(this.schemas);
                this._removeAllSchemas(this.refs);
                this._cache.clear();
                return this;
            case "string": {
                const sch = getSchEnv.call(this, schemaKeyRef);
                if (typeof sch == "object")
                    this._cache.delete(sch.schema);
                delete this.schemas[schemaKeyRef];
                delete this.refs[schemaKeyRef];
                return this;
            }
            case "object": {
                const cacheKey = schemaKeyRef;
                this._cache.delete(cacheKey);
                let id = schemaKeyRef[this.opts.schemaId];
                if (id) {
                    id = (0, resolve_1.normalizeId)(id);
                    delete this.schemas[id];
                    delete this.refs[id];
                }
                return this;
            }
            default:
                throw new Error("ajv.removeSchema: invalid parameter");
        }
    }
    // add "vocabulary" - a collection of keywords
    addVocabulary(definitions) {
        for (const def of definitions)
            this.addKeyword(def);
        return this;
    }
    addKeyword(kwdOrDef, def // deprecated
    ) {
        let keyword;
        if (typeof kwdOrDef == "string") {
            keyword = kwdOrDef;
            if (typeof def == "object") {
                this.logger.warn("these parameters are deprecated, see docs for addKeyword");
                def.keyword = keyword;
            }
        }
        else if (typeof kwdOrDef == "object" && def === undefined) {
            def = kwdOrDef;
            keyword = def.keyword;
            if (Array.isArray(keyword) && !keyword.length) {
                throw new Error("addKeywords: keyword must be string or non-empty array");
            }
        }
        else {
            throw new Error("invalid addKeywords parameters");
        }
        checkKeyword.call(this, keyword, def);
        if (!def) {
            (0, util_1.eachItem)(keyword, (kwd) => addRule.call(this, kwd));
            return this;
        }
        keywordMetaschema.call(this, def);
        const definition = {
            ...def,
            type: (0, dataType_1.getJSONTypes)(def.type),
            schemaType: (0, dataType_1.getJSONTypes)(def.schemaType),
        };
        (0, util_1.eachItem)(keyword, definition.type.length === 0
            ? (k) => addRule.call(this, k, definition)
            : (k) => definition.type.forEach((t) => addRule.call(this, k, definition, t)));
        return this;
    }
    getKeyword(keyword) {
        const rule = this.RULES.all[keyword];
        return typeof rule == "object" ? rule.definition : !!rule;
    }
    // Remove keyword
    removeKeyword(keyword) {
        // TODO return type should be Ajv
        const { RULES } = this;
        delete RULES.keywords[keyword];
        delete RULES.all[keyword];
        for (const group of RULES.rules) {
            const i = group.rules.findIndex((rule) => rule.keyword === keyword);
            if (i >= 0)
                group.rules.splice(i, 1);
        }
        return this;
    }
    // Add format
    addFormat(name, format) {
        if (typeof format == "string")
            format = new RegExp(format);
        this.formats[name] = format;
        return this;
    }
    errorsText(errors = this.errors, // optional array of validation errors
    { separator = ", ", dataVar = "data" } = {} // optional options with properties `separator` and `dataVar`
    ) {
        if (!errors || errors.length === 0)
            return "No errors";
        return errors
            .map((e) => `${dataVar}${e.instancePath} ${e.message}`)
            .reduce((text, msg) => text + separator + msg);
    }
    $dataMetaSchema(metaSchema, keywordsJsonPointers) {
        const rules = this.RULES.all;
        metaSchema = JSON.parse(JSON.stringify(metaSchema));
        for (const jsonPointer of keywordsJsonPointers) {
            const segments = jsonPointer.split("/").slice(1); // first segment is an empty string
            let keywords = metaSchema;
            for (const seg of segments)
                keywords = keywords[seg];
            for (const key in rules) {
                const rule = rules[key];
                if (typeof rule != "object")
                    continue;
                const { $data } = rule.definition;
                const schema = keywords[key];
                if ($data && schema)
                    keywords[key] = schemaOrData(schema);
            }
        }
        return metaSchema;
    }
    _removeAllSchemas(schemas, regex) {
        for (const keyRef in schemas) {
            const sch = schemas[keyRef];
            if (!regex || regex.test(keyRef)) {
                if (typeof sch == "string") {
                    delete schemas[keyRef];
                }
                else if (sch && !sch.meta) {
                    this._cache.delete(sch.schema);
                    delete schemas[keyRef];
                }
            }
        }
    }
    _addSchema(schema, meta, baseId, validateSchema = this.opts.validateSchema, addSchema = this.opts.addUsedSchema) {
        let id;
        const { schemaId } = this.opts;
        if (typeof schema == "object") {
            id = schema[schemaId];
        }
        else {
            if (this.opts.jtd)
                throw new Error("schema must be object");
            else if (typeof schema != "boolean")
                throw new Error("schema must be object or boolean");
        }
        let sch = this._cache.get(schema);
        if (sch !== undefined)
            return sch;
        baseId = (0, resolve_1.normalizeId)(id || baseId);
        const localRefs = resolve_1.getSchemaRefs.call(this, schema, baseId);
        sch = new compile_1.SchemaEnv({ schema, schemaId, meta, baseId, localRefs });
        this._cache.set(sch.schema, sch);
        if (addSchema && !baseId.startsWith("#")) {
            // TODO atm it is allowed to overwrite schemas without id (instead of not adding them)
            if (baseId)
                this._checkUnique(baseId);
            this.refs[baseId] = sch;
        }
        if (validateSchema)
            this.validateSchema(schema, true);
        return sch;
    }
    _checkUnique(id) {
        if (this.schemas[id] || this.refs[id]) {
            throw new Error(`schema with key or id "${id}" already exists`);
        }
    }
    _compileSchemaEnv(sch) {
        if (sch.meta)
            this._compileMetaSchema(sch);
        else
            compile_1.compileSchema.call(this, sch);
        /* istanbul ignore if */
        if (!sch.validate)
            throw new Error("ajv implementation error");
        return sch.validate;
    }
    _compileMetaSchema(sch) {
        const currentOpts = this.opts;
        this.opts = this._metaOpts;
        try {
            compile_1.compileSchema.call(this, sch);
        }
        finally {
            this.opts = currentOpts;
        }
    }
}
exports["default"] = Ajv;
Ajv.ValidationError = validation_error_1.default;
Ajv.MissingRefError = ref_error_1.default;
function checkOptions(checkOpts, options, msg, log = "error") {
    for (const key in checkOpts) {
        const opt = key;
        if (opt in options)
            this.logger[log](`${msg}: option ${key}. ${checkOpts[opt]}`);
    }
}
function getSchEnv(keyRef) {
    keyRef = (0, resolve_1.normalizeId)(keyRef); // TODO tests fail without this line
    return this.schemas[keyRef] || this.refs[keyRef];
}
function addInitialSchemas() {
    const optsSchemas = this.opts.schemas;
    if (!optsSchemas)
        return;
    if (Array.isArray(optsSchemas))
        this.addSchema(optsSchemas);
    else
        for (const key in optsSchemas)
            this.addSchema(optsSchemas[key], key);
}
function addInitialFormats() {
    for (const name in this.opts.formats) {
        const format = this.opts.formats[name];
        if (format)
            this.addFormat(name, format);
    }
}
function addInitialKeywords(defs) {
    if (Array.isArray(defs)) {
        this.addVocabulary(defs);
        return;
    }
    this.logger.warn("keywords option as map is deprecated, pass array");
    for (const keyword in defs) {
        const def = defs[keyword];
        if (!def.keyword)
            def.keyword = keyword;
        this.addKeyword(def);
    }
}
function getMetaSchemaOptions() {
    const metaOpts = { ...this.opts };
    for (const opt of META_IGNORE_OPTIONS)
        delete metaOpts[opt];
    return metaOpts;
}
const noLogs = { log() { }, warn() { }, error() { } };
function getLogger(logger) {
    if (logger === false)
        return noLogs;
    if (logger === undefined)
        return console;
    if (logger.log && logger.warn && logger.error)
        return logger;
    throw new Error("logger must implement log, warn and error methods");
}
const KEYWORD_NAME = /^[a-z_$][a-z0-9_$:-]*$/i;
function checkKeyword(keyword, def) {
    const { RULES } = this;
    (0, util_1.eachItem)(keyword, (kwd) => {
        if (RULES.keywords[kwd])
            throw new Error(`Keyword ${kwd} is already defined`);
        if (!KEYWORD_NAME.test(kwd))
            throw new Error(`Keyword ${kwd} has invalid name`);
    });
    if (!def)
        return;
    if (def.$data && !("code" in def || "validate" in def)) {
        throw new Error('$data keyword must have "code" or "validate" function');
    }
}
function addRule(keyword, definition, dataType) {
    var _a;
    const post = definition === null || definition === void 0 ? void 0 : definition.post;
    if (dataType && post)
        throw new Error('keyword with "post" flag cannot have "type"');
    const { RULES } = this;
    let ruleGroup = post ? RULES.post : RULES.rules.find(({ type: t }) => t === dataType);
    if (!ruleGroup) {
        ruleGroup = { type: dataType, rules: [] };
        RULES.rules.push(ruleGroup);
    }
    RULES.keywords[keyword] = true;
    if (!definition)
        return;
    const rule = {
        keyword,
        definition: {
            ...definition,
            type: (0, dataType_1.getJSONTypes)(definition.type),
            schemaType: (0, dataType_1.getJSONTypes)(definition.schemaType),
        },
    };
    if (definition.before)
        addBeforeRule.call(this, ruleGroup, rule, definition.before);
    else
        ruleGroup.rules.push(rule);
    RULES.all[keyword] = rule;
    (_a = definition.implements) === null || _a === void 0 ? void 0 : _a.forEach((kwd) => this.addKeyword(kwd));
}
function addBeforeRule(ruleGroup, rule, before) {
    const i = ruleGroup.rules.findIndex((_rule) => _rule.keyword === before);
    if (i >= 0) {
        ruleGroup.rules.splice(i, 0, rule);
    }
    else {
        ruleGroup.rules.push(rule);
        this.logger.warn(`rule ${before} is not defined`);
    }
}
function keywordMetaschema(def) {
    let { metaSchema } = def;
    if (metaSchema === undefined)
        return;
    if (def.$data && this.opts.$data)
        metaSchema = schemaOrData(metaSchema);
    def.validateSchema = this.compile(metaSchema, true);
}
const $dataRef = {
    $ref: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#",
};
function schemaOrData(schema) {
    return { anyOf: [schema, $dataRef] };
}
//# sourceMappingURL=core.js.map

/***/ }),

/***/ 9720:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const metaSchema = __nccwpck_require__(1174);
const applicator = __nccwpck_require__(4332);
const unevaluated = __nccwpck_require__(846);
const content = __nccwpck_require__(2462);
const core = __nccwpck_require__(314);
const format = __nccwpck_require__(9777);
const metadata = __nccwpck_require__(2883);
const validation = __nccwpck_require__(2871);
const META_SUPPORT_DATA = ["/properties"];
function addMetaSchema2020($data) {
    ;
    [
        metaSchema,
        applicator,
        unevaluated,
        content,
        core,
        with$data(this, format),
        metadata,
        with$data(this, validation),
    ].forEach((sch) => this.addMetaSchema(sch, undefined, false));
    return this;
    function with$data(ajv, sch) {
        return $data ? ajv.$dataMetaSchema(sch, META_SUPPORT_DATA) : sch;
    }
}
exports["default"] = addMetaSchema2020;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 7517:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
// https://github.com/ajv-validator/ajv/issues/889
const equal = __nccwpck_require__(1200);
equal.code = 'require("ajv/dist/runtime/equal").default';
exports["default"] = equal;
//# sourceMappingURL=equal.js.map

/***/ }),

/***/ 3285:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
// https://mathiasbynens.be/notes/javascript-encoding
// https://github.com/bestiejs/punycode.js - punycode.ucs2.decode
function ucs2length(str) {
    const len = str.length;
    let length = 0;
    let pos = 0;
    let value;
    while (pos < len) {
        length++;
        value = str.charCodeAt(pos++);
        if (value >= 0xd800 && value <= 0xdbff && pos < len) {
            // high surrogate, and there is a next character
            value = str.charCodeAt(pos);
            if ((value & 0xfc00) === 0xdc00)
                pos++; // low surrogate
        }
    }
    return length;
}
exports["default"] = ucs2length;
ucs2length.code = 'require("ajv/dist/runtime/ucs2length").default';
//# sourceMappingURL=ucs2length.js.map

/***/ }),

/***/ 4917:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const uri = __nccwpck_require__(8892);
uri.code = 'require("ajv/dist/runtime/uri").default';
exports["default"] = uri;
//# sourceMappingURL=uri.js.map

/***/ }),

/***/ 958:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
class ValidationError extends Error {
    constructor(errors) {
        super("validation failed");
        this.errors = errors;
        this.ajv = this.validation = true;
    }
}
exports["default"] = ValidationError;
//# sourceMappingURL=validation_error.js.map

/***/ }),

/***/ 1776:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.validateAdditionalItems = void 0;
const codegen_1 = __nccwpck_require__(7441);
const util_1 = __nccwpck_require__(156);
const error = {
    message: ({ params: { len } }) => (0, codegen_1.str) `must NOT have more than ${len} items`,
    params: ({ params: { len } }) => (0, codegen_1._) `{limit: ${len}}`,
};
const def = {
    keyword: "additionalItems",
    type: "array",
    schemaType: ["boolean", "object"],
    before: "uniqueItems",
    error,
    code(cxt) {
        const { parentSchema, it } = cxt;
        const { items } = parentSchema;
        if (!Array.isArray(items)) {
            (0, util_1.checkStrictMode)(it, '"additionalItems" is ignored when "items" is not an array of schemas');
            return;
        }
        validateAdditionalItems(cxt, items);
    },
};
function validateAdditionalItems(cxt, items) {
    const { gen, schema, data, keyword, it } = cxt;
    it.items = true;
    const len = gen.const("len", (0, codegen_1._) `${data}.length`);
    if (schema === false) {
        cxt.setParams({ len: items.length });
        cxt.pass((0, codegen_1._) `${len} <= ${items.length}`);
    }
    else if (typeof schema == "object" && !(0, util_1.alwaysValidSchema)(it, schema)) {
        const valid = gen.var("valid", (0, codegen_1._) `${len} <= ${items.length}`); // TODO var
        gen.if((0, codegen_1.not)(valid), () => validateItems(valid));
        cxt.ok(valid);
    }
    function validateItems(valid) {
        gen.forRange("i", items.length, len, (i) => {
            cxt.subschema({ keyword, dataProp: i, dataPropType: util_1.Type.Num }, valid);
            if (!it.allErrors)
                gen.if((0, codegen_1.not)(valid), () => gen.break());
        });
    }
}
exports.validateAdditionalItems = validateAdditionalItems;
exports["default"] = def;
//# sourceMappingURL=additionalItems.js.map

/***/ }),

/***/ 9431:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const code_1 = __nccwpck_require__(8470);
const codegen_1 = __nccwpck_require__(7441);
const names_1 = __nccwpck_require__(7281);
const util_1 = __nccwpck_require__(156);
const error = {
    message: "must NOT have additional properties",
    params: ({ params }) => (0, codegen_1._) `{additionalProperty: ${params.additionalProperty}}`,
};
const def = {
    keyword: "additionalProperties",
    type: ["object"],
    schemaType: ["boolean", "object"],
    allowUndefined: true,
    trackErrors: true,
    error,
    code(cxt) {
        const { gen, schema, parentSchema, data, errsCount, it } = cxt;
        /* istanbul ignore if */
        if (!errsCount)
            throw new Error("ajv implementation error");
        const { allErrors, opts } = it;
        it.props = true;
        if (opts.removeAdditional !== "all" && (0, util_1.alwaysValidSchema)(it, schema))
            return;
        const props = (0, code_1.allSchemaProperties)(parentSchema.properties);
        const patProps = (0, code_1.allSchemaProperties)(parentSchema.patternProperties);
        checkAdditionalProperties();
        cxt.ok((0, codegen_1._) `${errsCount} === ${names_1.default.errors}`);
        function checkAdditionalProperties() {
            gen.forIn("key", data, (key) => {
                if (!props.length && !patProps.length)
                    additionalPropertyCode(key);
                else
                    gen.if(isAdditional(key), () => additionalPropertyCode(key));
            });
        }
        function isAdditional(key) {
            let definedProp;
            if (props.length > 8) {
                // TODO maybe an option instead of hard-coded 8?
                const propsSchema = (0, util_1.schemaRefOrVal)(it, parentSchema.properties, "properties");
                definedProp = (0, code_1.isOwnProperty)(gen, propsSchema, key);
            }
            else if (props.length) {
                definedProp = (0, codegen_1.or)(...props.map((p) => (0, codegen_1._) `${key} === ${p}`));
            }
            else {
                definedProp = codegen_1.nil;
            }
            if (patProps.length) {
                definedProp = (0, codegen_1.or)(definedProp, ...patProps.map((p) => (0, codegen_1._) `${(0, code_1.usePattern)(cxt, p)}.test(${key})`));
            }
            return (0, codegen_1.not)(definedProp);
        }
        function deleteAdditional(key) {
            gen.code((0, codegen_1._) `delete ${data}[${key}]`);
        }
        function additionalPropertyCode(key) {
            if (opts.removeAdditional === "all" || (opts.removeAdditional && schema === false)) {
                deleteAdditional(key);
                return;
            }
            if (schema === false) {
                cxt.setParams({ additionalProperty: key });
                cxt.error();
                if (!allErrors)
                    gen.break();
                return;
            }
            if (typeof schema == "object" && !(0, util_1.alwaysValidSchema)(it, schema)) {
                const valid = gen.name("valid");
                if (opts.removeAdditional === "failing") {
                    applyAdditionalSchema(key, valid, false);
                    gen.if((0, codegen_1.not)(valid), () => {
                        cxt.reset();
                        deleteAdditional(key);
                    });
                }
                else {
                    applyAdditionalSchema(key, valid);
                    if (!allErrors)
                        gen.if((0, codegen_1.not)(valid), () => gen.break());
                }
            }
        }
        function applyAdditionalSchema(key, valid, errors) {
            const subschema = {
                keyword: "additionalProperties",
                dataProp: key,
                dataPropType: util_1.Type.Str,
            };
            if (errors === false) {
                Object.assign(subschema, {
                    compositeRule: true,
                    createErrors: false,
                    allErrors: false,
                });
            }
            cxt.subschema(subschema, valid);
        }
    },
};
exports["default"] = def;
//# sourceMappingURL=additionalProperties.js.map

/***/ }),

/***/ 8619:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const util_1 = __nccwpck_require__(156);
const def = {
    keyword: "allOf",
    schemaType: "array",
    code(cxt) {
        const { gen, schema, it } = cxt;
        /* istanbul ignore if */
        if (!Array.isArray(schema))
            throw new Error("ajv implementation error");
        const valid = gen.name("valid");
        schema.forEach((sch, i) => {
            if ((0, util_1.alwaysValidSchema)(it, sch))
                return;
            const schCxt = cxt.subschema({ keyword: "allOf", schemaProp: i }, valid);
            cxt.ok(valid);
            cxt.mergeEvaluated(schCxt);
        });
    },
};
exports["default"] = def;
//# sourceMappingURL=allOf.js.map

/***/ }),

/***/ 4838:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const code_1 = __nccwpck_require__(8470);
const def = {
    keyword: "anyOf",
    schemaType: "array",
    trackErrors: true,
    code: code_1.validateUnion,
    error: { message: "must match a schema in anyOf" },
};
exports["default"] = def;
//# sourceMappingURL=anyOf.js.map

/***/ }),

/***/ 5785:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __nccwpck_require__(7441);
const util_1 = __nccwpck_require__(156);
const error = {
    message: ({ params: { min, max } }) => max === undefined
        ? (0, codegen_1.str) `must contain at least ${min} valid item(s)`
        : (0, codegen_1.str) `must contain at least ${min} and no more than ${max} valid item(s)`,
    params: ({ params: { min, max } }) => max === undefined ? (0, codegen_1._) `{minContains: ${min}}` : (0, codegen_1._) `{minContains: ${min}, maxContains: ${max}}`,
};
const def = {
    keyword: "contains",
    type: "array",
    schemaType: ["object", "boolean"],
    before: "uniqueItems",
    trackErrors: true,
    error,
    code(cxt) {
        const { gen, schema, parentSchema, data, it } = cxt;
        let min;
        let max;
        const { minContains, maxContains } = parentSchema;
        if (it.opts.next) {
            min = minContains === undefined ? 1 : minContains;
            max = maxContains;
        }
        else {
            min = 1;
        }
        const len = gen.const("len", (0, codegen_1._) `${data}.length`);
        cxt.setParams({ min, max });
        if (max === undefined && min === 0) {
            (0, util_1.checkStrictMode)(it, `"minContains" == 0 without "maxContains": "contains" keyword ignored`);
            return;
        }
        if (max !== undefined && min > max) {
            (0, util_1.checkStrictMode)(it, `"minContains" > "maxContains" is always invalid`);
            cxt.fail();
            return;
        }
        if ((0, util_1.alwaysValidSchema)(it, schema)) {
            let cond = (0, codegen_1._) `${len} >= ${min}`;
            if (max !== undefined)
                cond = (0, codegen_1._) `${cond} && ${len} <= ${max}`;
            cxt.pass(cond);
            return;
        }
        it.items = true;
        const valid = gen.name("valid");
        if (max === undefined && min === 1) {
            validateItems(valid, () => gen.if(valid, () => gen.break()));
        }
        else if (min === 0) {
            gen.let(valid, true);
            if (max !== undefined)
                gen.if((0, codegen_1._) `${data}.length > 0`, validateItemsWithCount);
        }
        else {
            gen.let(valid, false);
            validateItemsWithCount();
        }
        cxt.result(valid, () => cxt.reset());
        function validateItemsWithCount() {
            const schValid = gen.name("_valid");
            const count = gen.let("count", 0);
            validateItems(schValid, () => gen.if(schValid, () => checkLimits(count)));
        }
        function validateItems(_valid, block) {
            gen.forRange("i", 0, len, (i) => {
                cxt.subschema({
                    keyword: "contains",
                    dataProp: i,
                    dataPropType: util_1.Type.Num,
                    compositeRule: true,
                }, _valid);
                block();
            });
        }
        function checkLimits(count) {
            gen.code((0, codegen_1._) `${count}++`);
            if (max === undefined) {
                gen.if((0, codegen_1._) `${count} >= ${min}`, () => gen.assign(valid, true).break());
            }
            else {
                gen.if((0, codegen_1._) `${count} > ${max}`, () => gen.assign(valid, false).break());
                if (min === 1)
                    gen.assign(valid, true);
                else
                    gen.if((0, codegen_1._) `${count} >= ${min}`, () => gen.assign(valid, true));
            }
        }
    },
};
exports["default"] = def;
//# sourceMappingURL=contains.js.map

/***/ }),

/***/ 7328:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.validateSchemaDeps = exports.validatePropertyDeps = exports.error = void 0;
const codegen_1 = __nccwpck_require__(7441);
const util_1 = __nccwpck_require__(156);
const code_1 = __nccwpck_require__(8470);
exports.error = {
    message: ({ params: { property, depsCount, deps } }) => {
        const property_ies = depsCount === 1 ? "property" : "properties";
        return (0, codegen_1.str) `must have ${property_ies} ${deps} when property ${property} is present`;
    },
    params: ({ params: { property, depsCount, deps, missingProperty } }) => (0, codegen_1._) `{property: ${property},
    missingProperty: ${missingProperty},
    depsCount: ${depsCount},
    deps: ${deps}}`, // TODO change to reference
};
const def = {
    keyword: "dependencies",
    type: "object",
    schemaType: "object",
    error: exports.error,
    code(cxt) {
        const [propDeps, schDeps] = splitDependencies(cxt);
        validatePropertyDeps(cxt, propDeps);
        validateSchemaDeps(cxt, schDeps);
    },
};
function splitDependencies({ schema }) {
    const propertyDeps = {};
    const schemaDeps = {};
    for (const key in schema) {
        if (key === "__proto__")
            continue;
        const deps = Array.isArray(schema[key]) ? propertyDeps : schemaDeps;
        deps[key] = schema[key];
    }
    return [propertyDeps, schemaDeps];
}
function validatePropertyDeps(cxt, propertyDeps = cxt.schema) {
    const { gen, data, it } = cxt;
    if (Object.keys(propertyDeps).length === 0)
        return;
    const missing = gen.let("missing");
    for (const prop in propertyDeps) {
        const deps = propertyDeps[prop];
        if (deps.length === 0)
            continue;
        const hasProperty = (0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties);
        cxt.setParams({
            property: prop,
            depsCount: deps.length,
            deps: deps.join(", "),
        });
        if (it.allErrors) {
            gen.if(hasProperty, () => {
                for (const depProp of deps) {
                    (0, code_1.checkReportMissingProp)(cxt, depProp);
                }
            });
        }
        else {
            gen.if((0, codegen_1._) `${hasProperty} && (${(0, code_1.checkMissingProp)(cxt, deps, missing)})`);
            (0, code_1.reportMissingProp)(cxt, missing);
            gen.else();
        }
    }
}
exports.validatePropertyDeps = validatePropertyDeps;
function validateSchemaDeps(cxt, schemaDeps = cxt.schema) {
    const { gen, data, keyword, it } = cxt;
    const valid = gen.name("valid");
    for (const prop in schemaDeps) {
        if ((0, util_1.alwaysValidSchema)(it, schemaDeps[prop]))
            continue;
        gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties), () => {
            const schCxt = cxt.subschema({ keyword, schemaProp: prop }, valid);
            cxt.mergeValidEvaluated(schCxt, valid);
        }, () => gen.var(valid, true) // TODO var
        );
        cxt.ok(valid);
    }
}
exports.validateSchemaDeps = validateSchemaDeps;
exports["default"] = def;
//# sourceMappingURL=dependencies.js.map

/***/ }),

/***/ 7241:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const dependencies_1 = __nccwpck_require__(7328);
const def = {
    keyword: "dependentSchemas",
    type: "object",
    schemaType: "object",
    code: (cxt) => (0, dependencies_1.validateSchemaDeps)(cxt),
};
exports["default"] = def;
//# sourceMappingURL=dependentSchemas.js.map

/***/ }),

/***/ 7336:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __nccwpck_require__(7441);
const util_1 = __nccwpck_require__(156);
const error = {
    message: ({ params }) => (0, codegen_1.str) `must match "${params.ifClause}" schema`,
    params: ({ params }) => (0, codegen_1._) `{failingKeyword: ${params.ifClause}}`,
};
const def = {
    keyword: "if",
    schemaType: ["object", "boolean"],
    trackErrors: true,
    error,
    code(cxt) {
        const { gen, parentSchema, it } = cxt;
        if (parentSchema.then === undefined && parentSchema.else === undefined) {
            (0, util_1.checkStrictMode)(it, '"if" without "then" and "else" is ignored');
        }
        const hasThen = hasSchema(it, "then");
        const hasElse = hasSchema(it, "else");
        if (!hasThen && !hasElse)
            return;
        const valid = gen.let("valid", true);
        const schValid = gen.name("_valid");
        validateIf();
        cxt.reset();
        if (hasThen && hasElse) {
            const ifClause = gen.let("ifClause");
            cxt.setParams({ ifClause });
            gen.if(schValid, validateClause("then", ifClause), validateClause("else", ifClause));
        }
        else if (hasThen) {
            gen.if(schValid, validateClause("then"));
        }
        else {
            gen.if((0, codegen_1.not)(schValid), validateClause("else"));
        }
        cxt.pass(valid, () => cxt.error(true));
        function validateIf() {
            const schCxt = cxt.subschema({
                keyword: "if",
                compositeRule: true,
                createErrors: false,
                allErrors: false,
            }, schValid);
            cxt.mergeEvaluated(schCxt);
        }
        function validateClause(keyword, ifClause) {
            return () => {
                const schCxt = cxt.subschema({ keyword }, schValid);
                gen.assign(valid, schValid);
                cxt.mergeValidEvaluated(schCxt, valid);
                if (ifClause)
                    gen.assign(ifClause, (0, codegen_1._) `${keyword}`);
                else
                    cxt.setParams({ ifClause: keyword });
            };
        }
    },
};
function hasSchema(it, keyword) {
    const schema = it.schema[keyword];
    return schema !== undefined && !(0, util_1.alwaysValidSchema)(it, schema);
}
exports["default"] = def;
//# sourceMappingURL=if.js.map

/***/ }),

/***/ 9395:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const additionalItems_1 = __nccwpck_require__(1776);
const prefixItems_1 = __nccwpck_require__(1683);
const items_1 = __nccwpck_require__(1599);
const items2020_1 = __nccwpck_require__(6725);
const contains_1 = __nccwpck_require__(5785);
const dependencies_1 = __nccwpck_require__(7328);
const propertyNames_1 = __nccwpck_require__(6946);
const additionalProperties_1 = __nccwpck_require__(9431);
const properties_1 = __nccwpck_require__(3707);
const patternProperties_1 = __nccwpck_require__(3871);
const not_1 = __nccwpck_require__(1798);
const anyOf_1 = __nccwpck_require__(4838);
const oneOf_1 = __nccwpck_require__(2267);
const allOf_1 = __nccwpck_require__(8619);
const if_1 = __nccwpck_require__(7336);
const thenElse_1 = __nccwpck_require__(8483);
function getApplicator(draft2020 = false) {
    const applicator = [
        // any
        not_1.default,
        anyOf_1.default,
        oneOf_1.default,
        allOf_1.default,
        if_1.default,
        thenElse_1.default,
        // object
        propertyNames_1.default,
        additionalProperties_1.default,
        dependencies_1.default,
        properties_1.default,
        patternProperties_1.default,
    ];
    // array
    if (draft2020)
        applicator.push(prefixItems_1.default, items2020_1.default);
    else
        applicator.push(additionalItems_1.default, items_1.default);
    applicator.push(contains_1.default);
    return applicator;
}
exports["default"] = getApplicator;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 1599:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.validateTuple = void 0;
const codegen_1 = __nccwpck_require__(7441);
const util_1 = __nccwpck_require__(156);
const code_1 = __nccwpck_require__(8470);
const def = {
    keyword: "items",
    type: "array",
    schemaType: ["object", "array", "boolean"],
    before: "uniqueItems",
    code(cxt) {
        const { schema, it } = cxt;
        if (Array.isArray(schema))
            return validateTuple(cxt, "additionalItems", schema);
        it.items = true;
        if ((0, util_1.alwaysValidSchema)(it, schema))
            return;
        cxt.ok((0, code_1.validateArray)(cxt));
    },
};
function validateTuple(cxt, extraItems, schArr = cxt.schema) {
    const { gen, parentSchema, data, keyword, it } = cxt;
    checkStrictTuple(parentSchema);
    if (it.opts.unevaluated && schArr.length && it.items !== true) {
        it.items = util_1.mergeEvaluated.items(gen, schArr.length, it.items);
    }
    const valid = gen.name("valid");
    const len = gen.const("len", (0, codegen_1._) `${data}.length`);
    schArr.forEach((sch, i) => {
        if ((0, util_1.alwaysValidSchema)(it, sch))
            return;
        gen.if((0, codegen_1._) `${len} > ${i}`, () => cxt.subschema({
            keyword,
            schemaProp: i,
            dataProp: i,
        }, valid));
        cxt.ok(valid);
    });
    function checkStrictTuple(sch) {
        const { opts, errSchemaPath } = it;
        const l = schArr.length;
        const fullTuple = l === sch.minItems && (l === sch.maxItems || sch[extraItems] === false);
        if (opts.strictTuples && !fullTuple) {
            const msg = `"${keyword}" is ${l}-tuple, but minItems or maxItems/${extraItems} are not specified or different at path "${errSchemaPath}"`;
            (0, util_1.checkStrictMode)(it, msg, opts.strictTuples);
        }
    }
}
exports.validateTuple = validateTuple;
exports["default"] = def;
//# sourceMappingURL=items.js.map

/***/ }),

/***/ 6725:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __nccwpck_require__(7441);
const util_1 = __nccwpck_require__(156);
const code_1 = __nccwpck_require__(8470);
const additionalItems_1 = __nccwpck_require__(1776);
const error = {
    message: ({ params: { len } }) => (0, codegen_1.str) `must NOT have more than ${len} items`,
    params: ({ params: { len } }) => (0, codegen_1._) `{limit: ${len}}`,
};
const def = {
    keyword: "items",
    type: "array",
    schemaType: ["object", "boolean"],
    before: "uniqueItems",
    error,
    code(cxt) {
        const { schema, parentSchema, it } = cxt;
        const { prefixItems } = parentSchema;
        it.items = true;
        if ((0, util_1.alwaysValidSchema)(it, schema))
            return;
        if (prefixItems)
            (0, additionalItems_1.validateAdditionalItems)(cxt, prefixItems);
        else
            cxt.ok((0, code_1.validateArray)(cxt));
    },
};
exports["default"] = def;
//# sourceMappingURL=items2020.js.map

/***/ }),

/***/ 1798:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const util_1 = __nccwpck_require__(156);
const def = {
    keyword: "not",
    schemaType: ["object", "boolean"],
    trackErrors: true,
    code(cxt) {
        const { gen, schema, it } = cxt;
        if ((0, util_1.alwaysValidSchema)(it, schema)) {
            cxt.fail();
            return;
        }
        const valid = gen.name("valid");
        cxt.subschema({
            keyword: "not",
            compositeRule: true,
            createErrors: false,
            allErrors: false,
        }, valid);
        cxt.failResult(valid, () => cxt.reset(), () => cxt.error());
    },
    error: { message: "must NOT be valid" },
};
exports["default"] = def;
//# sourceMappingURL=not.js.map

/***/ }),

/***/ 2267:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __nccwpck_require__(7441);
const util_1 = __nccwpck_require__(156);
const error = {
    message: "must match exactly one schema in oneOf",
    params: ({ params }) => (0, codegen_1._) `{passingSchemas: ${params.passing}}`,
};
const def = {
    keyword: "oneOf",
    schemaType: "array",
    trackErrors: true,
    error,
    code(cxt) {
        const { gen, schema, parentSchema, it } = cxt;
        /* istanbul ignore if */
        if (!Array.isArray(schema))
            throw new Error("ajv implementation error");
        if (it.opts.discriminator && parentSchema.discriminator)
            return;
        const schArr = schema;
        const valid = gen.let("valid", false);
        const passing = gen.let("passing", null);
        const schValid = gen.name("_valid");
        cxt.setParams({ passing });
        // TODO possibly fail straight away (with warning or exception) if there are two empty always valid schemas
        gen.block(validateOneOf);
        cxt.result(valid, () => cxt.reset(), () => cxt.error(true));
        function validateOneOf() {
            schArr.forEach((sch, i) => {
                let schCxt;
                if ((0, util_1.alwaysValidSchema)(it, sch)) {
                    gen.var(schValid, true);
                }
                else {
                    schCxt = cxt.subschema({
                        keyword: "oneOf",
                        schemaProp: i,
                        compositeRule: true,
                    }, schValid);
                }
                if (i > 0) {
                    gen
                        .if((0, codegen_1._) `${schValid} && ${valid}`)
                        .assign(valid, false)
                        .assign(passing, (0, codegen_1._) `[${passing}, ${i}]`)
                        .else();
                }
                gen.if(schValid, () => {
                    gen.assign(valid, true);
                    gen.assign(passing, i);
                    if (schCxt)
                        cxt.mergeEvaluated(schCxt, codegen_1.Name);
                });
            });
        }
    },
};
exports["default"] = def;
//# sourceMappingURL=oneOf.js.map

/***/ }),

/***/ 3871:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const code_1 = __nccwpck_require__(8470);
const codegen_1 = __nccwpck_require__(7441);
const util_1 = __nccwpck_require__(156);
const util_2 = __nccwpck_require__(156);
const def = {
    keyword: "patternProperties",
    type: "object",
    schemaType: "object",
    code(cxt) {
        const { gen, schema, data, parentSchema, it } = cxt;
        const { opts } = it;
        const patterns = (0, code_1.allSchemaProperties)(schema);
        const alwaysValidPatterns = patterns.filter((p) => (0, util_1.alwaysValidSchema)(it, schema[p]));
        if (patterns.length === 0 ||
            (alwaysValidPatterns.length === patterns.length &&
                (!it.opts.unevaluated || it.props === true))) {
            return;
        }
        const checkProperties = opts.strictSchema && !opts.allowMatchingProperties && parentSchema.properties;
        const valid = gen.name("valid");
        if (it.props !== true && !(it.props instanceof codegen_1.Name)) {
            it.props = (0, util_2.evaluatedPropsToName)(gen, it.props);
        }
        const { props } = it;
        validatePatternProperties();
        function validatePatternProperties() {
            for (const pat of patterns) {
                if (checkProperties)
                    checkMatchingProperties(pat);
                if (it.allErrors) {
                    validateProperties(pat);
                }
                else {
                    gen.var(valid, true); // TODO var
                    validateProperties(pat);
                    gen.if(valid);
                }
            }
        }
        function checkMatchingProperties(pat) {
            for (const prop in checkProperties) {
                if (new RegExp(pat).test(prop)) {
                    (0, util_1.checkStrictMode)(it, `property ${prop} matches pattern ${pat} (use allowMatchingProperties)`);
                }
            }
        }
        function validateProperties(pat) {
            gen.forIn("key", data, (key) => {
                gen.if((0, codegen_1._) `${(0, code_1.usePattern)(cxt, pat)}.test(${key})`, () => {
                    const alwaysValid = alwaysValidPatterns.includes(pat);
                    if (!alwaysValid) {
                        cxt.subschema({
                            keyword: "patternProperties",
                            schemaProp: pat,
                            dataProp: key,
                            dataPropType: util_2.Type.Str,
                        }, valid);
                    }
                    if (it.opts.unevaluated && props !== true) {
                        gen.assign((0, codegen_1._) `${props}[${key}]`, true);
                    }
                    else if (!alwaysValid && !it.allErrors) {
                        // can short-circuit if `unevaluatedProperties` is not supported (opts.next === false)
                        // or if all properties were evaluated (props === true)
                        gen.if((0, codegen_1.not)(valid), () => gen.break());
                    }
                });
            });
        }
    },
};
exports["default"] = def;
//# sourceMappingURL=patternProperties.js.map

/***/ }),

/***/ 1683:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const items_1 = __nccwpck_require__(1599);
const def = {
    keyword: "prefixItems",
    type: "array",
    schemaType: ["array"],
    before: "uniqueItems",
    code: (cxt) => (0, items_1.validateTuple)(cxt, "items"),
};
exports["default"] = def;
//# sourceMappingURL=prefixItems.js.map

/***/ }),

/***/ 3707:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const validate_1 = __nccwpck_require__(9691);
const code_1 = __nccwpck_require__(8470);
const util_1 = __nccwpck_require__(156);
const additionalProperties_1 = __nccwpck_require__(9431);
const def = {
    keyword: "properties",
    type: "object",
    schemaType: "object",
    code(cxt) {
        const { gen, schema, parentSchema, data, it } = cxt;
        if (it.opts.removeAdditional === "all" && parentSchema.additionalProperties === undefined) {
            additionalProperties_1.default.code(new validate_1.KeywordCxt(it, additionalProperties_1.default, "additionalProperties"));
        }
        const allProps = (0, code_1.allSchemaProperties)(schema);
        for (const prop of allProps) {
            it.definedProperties.add(prop);
        }
        if (it.opts.unevaluated && allProps.length && it.props !== true) {
            it.props = util_1.mergeEvaluated.props(gen, (0, util_1.toHash)(allProps), it.props);
        }
        const properties = allProps.filter((p) => !(0, util_1.alwaysValidSchema)(it, schema[p]));
        if (properties.length === 0)
            return;
        const valid = gen.name("valid");
        for (const prop of properties) {
            if (hasDefault(prop)) {
                applyPropertySchema(prop);
            }
            else {
                gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties));
                applyPropertySchema(prop);
                if (!it.allErrors)
                    gen.else().var(valid, true);
                gen.endIf();
            }
            cxt.it.definedProperties.add(prop);
            cxt.ok(valid);
        }
        function hasDefault(prop) {
            return it.opts.useDefaults && !it.compositeRule && schema[prop].default !== undefined;
        }
        function applyPropertySchema(prop) {
            cxt.subschema({
                keyword: "properties",
                schemaProp: prop,
                dataProp: prop,
            }, valid);
        }
    },
};
exports["default"] = def;
//# sourceMappingURL=properties.js.map

/***/ }),

/***/ 6946:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __nccwpck_require__(7441);
const util_1 = __nccwpck_require__(156);
const error = {
    message: "property name must be valid",
    params: ({ params }) => (0, codegen_1._) `{propertyName: ${params.propertyName}}`,
};
const def = {
    keyword: "propertyNames",
    type: "object",
    schemaType: ["object", "boolean"],
    error,
    code(cxt) {
        const { gen, schema, data, it } = cxt;
        if ((0, util_1.alwaysValidSchema)(it, schema))
            return;
        const valid = gen.name("valid");
        gen.forIn("key", data, (key) => {
            cxt.setParams({ propertyName: key });
            cxt.subschema({
                keyword: "propertyNames",
                data: key,
                dataTypes: ["string"],
                propertyName: key,
                compositeRule: true,
            }, valid);
            gen.if((0, codegen_1.not)(valid), () => {
                cxt.error(true);
                if (!it.allErrors)
                    gen.break();
            });
        });
        cxt.ok(valid);
    },
};
exports["default"] = def;
//# sourceMappingURL=propertyNames.js.map

/***/ }),

/***/ 8483:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const util_1 = __nccwpck_require__(156);
const def = {
    keyword: ["then", "else"],
    schemaType: ["object", "boolean"],
    code({ keyword, parentSchema, it }) {
        if (parentSchema.if === undefined)
            (0, util_1.checkStrictMode)(it, `"${keyword}" without "if" is ignored`);
    },
};
exports["default"] = def;
//# sourceMappingURL=thenElse.js.map

/***/ }),

/***/ 8470:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.validateUnion = exports.validateArray = exports.usePattern = exports.callValidateCode = exports.schemaProperties = exports.allSchemaProperties = exports.noPropertyInData = exports.propertyInData = exports.isOwnProperty = exports.hasPropFunc = exports.reportMissingProp = exports.checkMissingProp = exports.checkReportMissingProp = void 0;
const codegen_1 = __nccwpck_require__(7441);
const util_1 = __nccwpck_require__(156);
const names_1 = __nccwpck_require__(7281);
const util_2 = __nccwpck_require__(156);
function checkReportMissingProp(cxt, prop) {
    const { gen, data, it } = cxt;
    gen.if(noPropertyInData(gen, data, prop, it.opts.ownProperties), () => {
        cxt.setParams({ missingProperty: (0, codegen_1._) `${prop}` }, true);
        cxt.error();
    });
}
exports.checkReportMissingProp = checkReportMissingProp;
function checkMissingProp({ gen, data, it: { opts } }, properties, missing) {
    return (0, codegen_1.or)(...properties.map((prop) => (0, codegen_1.and)(noPropertyInData(gen, data, prop, opts.ownProperties), (0, codegen_1._) `${missing} = ${prop}`)));
}
exports.checkMissingProp = checkMissingProp;
function reportMissingProp(cxt, missing) {
    cxt.setParams({ missingProperty: missing }, true);
    cxt.error();
}
exports.reportMissingProp = reportMissingProp;
function hasPropFunc(gen) {
    return gen.scopeValue("func", {
        // eslint-disable-next-line @typescript-eslint/unbound-method
        ref: Object.prototype.hasOwnProperty,
        code: (0, codegen_1._) `Object.prototype.hasOwnProperty`,
    });
}
exports.hasPropFunc = hasPropFunc;
function isOwnProperty(gen, data, property) {
    return (0, codegen_1._) `${hasPropFunc(gen)}.call(${data}, ${property})`;
}
exports.isOwnProperty = isOwnProperty;
function propertyInData(gen, data, property, ownProperties) {
    const cond = (0, codegen_1._) `${data}${(0, codegen_1.getProperty)(property)} !== undefined`;
    return ownProperties ? (0, codegen_1._) `${cond} && ${isOwnProperty(gen, data, property)}` : cond;
}
exports.propertyInData = propertyInData;
function noPropertyInData(gen, data, property, ownProperties) {
    const cond = (0, codegen_1._) `${data}${(0, codegen_1.getProperty)(property)} === undefined`;
    return ownProperties ? (0, codegen_1.or)(cond, (0, codegen_1.not)(isOwnProperty(gen, data, property))) : cond;
}
exports.noPropertyInData = noPropertyInData;
function allSchemaProperties(schemaMap) {
    return schemaMap ? Object.keys(schemaMap).filter((p) => p !== "__proto__") : [];
}
exports.allSchemaProperties = allSchemaProperties;
function schemaProperties(it, schemaMap) {
    return allSchemaProperties(schemaMap).filter((p) => !(0, util_1.alwaysValidSchema)(it, schemaMap[p]));
}
exports.schemaProperties = schemaProperties;
function callValidateCode({ schemaCode, data, it: { gen, topSchemaRef, schemaPath, errorPath }, it }, func, context, passSchema) {
    const dataAndSchema = passSchema ? (0, codegen_1._) `${schemaCode}, ${data}, ${topSchemaRef}${schemaPath}` : data;
    const valCxt = [
        [names_1.default.instancePath, (0, codegen_1.strConcat)(names_1.default.instancePath, errorPath)],
        [names_1.default.parentData, it.parentData],
        [names_1.default.parentDataProperty, it.parentDataProperty],
        [names_1.default.rootData, names_1.default.rootData],
    ];
    if (it.opts.dynamicRef)
        valCxt.push([names_1.default.dynamicAnchors, names_1.default.dynamicAnchors]);
    const args = (0, codegen_1._) `${dataAndSchema}, ${gen.object(...valCxt)}`;
    return context !== codegen_1.nil ? (0, codegen_1._) `${func}.call(${context}, ${args})` : (0, codegen_1._) `${func}(${args})`;
}
exports.callValidateCode = callValidateCode;
const newRegExp = (0, codegen_1._) `new RegExp`;
function usePattern({ gen, it: { opts } }, pattern) {
    const u = opts.unicodeRegExp ? "u" : "";
    const { regExp } = opts.code;
    const rx = regExp(pattern, u);
    return gen.scopeValue("pattern", {
        key: rx.toString(),
        ref: rx,
        code: (0, codegen_1._) `${regExp.code === "new RegExp" ? newRegExp : (0, util_2.useFunc)(gen, regExp)}(${pattern}, ${u})`,
    });
}
exports.usePattern = usePattern;
function validateArray(cxt) {
    const { gen, data, keyword, it } = cxt;
    const valid = gen.name("valid");
    if (it.allErrors) {
        const validArr = gen.let("valid", true);
        validateItems(() => gen.assign(validArr, false));
        return validArr;
    }
    gen.var(valid, true);
    validateItems(() => gen.break());
    return valid;
    function validateItems(notValid) {
        const len = gen.const("len", (0, codegen_1._) `${data}.length`);
        gen.forRange("i", 0, len, (i) => {
            cxt.subschema({
                keyword,
                dataProp: i,
                dataPropType: util_1.Type.Num,
            }, valid);
            gen.if((0, codegen_1.not)(valid), notValid);
        });
    }
}
exports.validateArray = validateArray;
function validateUnion(cxt) {
    const { gen, schema, keyword, it } = cxt;
    /* istanbul ignore if */
    if (!Array.isArray(schema))
        throw new Error("ajv implementation error");
    const alwaysValid = schema.some((sch) => (0, util_1.alwaysValidSchema)(it, sch));
    if (alwaysValid && !it.opts.unevaluated)
        return;
    const valid = gen.let("valid", false);
    const schValid = gen.name("_valid");
    gen.block(() => schema.forEach((_sch, i) => {
        const schCxt = cxt.subschema({
            keyword,
            schemaProp: i,
            compositeRule: true,
        }, schValid);
        gen.assign(valid, (0, codegen_1._) `${valid} || ${schValid}`);
        const merged = cxt.mergeValidEvaluated(schCxt, schValid);
        // can short-circuit if `unevaluatedProperties/Items` not supported (opts.unevaluated !== true)
        // or if all properties and items were evaluated (it.props === true && it.items === true)
        if (!merged)
            gen.if((0, codegen_1.not)(valid));
    }));
    cxt.result(valid, () => cxt.reset(), () => cxt.error(true));
}
exports.validateUnion = validateUnion;
//# sourceMappingURL=code.js.map

/***/ }),

/***/ 2651:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const def = {
    keyword: "id",
    code() {
        throw new Error('NOT SUPPORTED: keyword "id", use "$id" for schema ID');
    },
};
exports["default"] = def;
//# sourceMappingURL=id.js.map

/***/ }),

/***/ 5529:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const id_1 = __nccwpck_require__(2651);
const ref_1 = __nccwpck_require__(1272);
const core = [
    "$schema",
    "$id",
    "$defs",
    "$vocabulary",
    { keyword: "$comment" },
    "definitions",
    id_1.default,
    ref_1.default,
];
exports["default"] = core;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 1272:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.callRef = exports.getValidate = void 0;
const ref_error_1 = __nccwpck_require__(7270);
const code_1 = __nccwpck_require__(8470);
const codegen_1 = __nccwpck_require__(7441);
const names_1 = __nccwpck_require__(7281);
const compile_1 = __nccwpck_require__(3868);
const util_1 = __nccwpck_require__(156);
const def = {
    keyword: "$ref",
    schemaType: "string",
    code(cxt) {
        const { gen, schema: $ref, it } = cxt;
        const { baseId, schemaEnv: env, validateName, opts, self } = it;
        const { root } = env;
        if (($ref === "#" || $ref === "#/") && baseId === root.baseId)
            return callRootRef();
        const schOrEnv = compile_1.resolveRef.call(self, root, baseId, $ref);
        if (schOrEnv === undefined)
            throw new ref_error_1.default(it.opts.uriResolver, baseId, $ref);
        if (schOrEnv instanceof compile_1.SchemaEnv)
            return callValidate(schOrEnv);
        return inlineRefSchema(schOrEnv);
        function callRootRef() {
            if (env === root)
                return callRef(cxt, validateName, env, env.$async);
            const rootName = gen.scopeValue("root", { ref: root });
            return callRef(cxt, (0, codegen_1._) `${rootName}.validate`, root, root.$async);
        }
        function callValidate(sch) {
            const v = getValidate(cxt, sch);
            callRef(cxt, v, sch, sch.$async);
        }
        function inlineRefSchema(sch) {
            const schName = gen.scopeValue("schema", opts.code.source === true ? { ref: sch, code: (0, codegen_1.stringify)(sch) } : { ref: sch });
            const valid = gen.name("valid");
            const schCxt = cxt.subschema({
                schema: sch,
                dataTypes: [],
                schemaPath: codegen_1.nil,
                topSchemaRef: schName,
                errSchemaPath: $ref,
            }, valid);
            cxt.mergeEvaluated(schCxt);
            cxt.ok(valid);
        }
    },
};
function getValidate(cxt, sch) {
    const { gen } = cxt;
    return sch.validate
        ? gen.scopeValue("validate", { ref: sch.validate })
        : (0, codegen_1._) `${gen.scopeValue("wrapper", { ref: sch })}.validate`;
}
exports.getValidate = getValidate;
function callRef(cxt, v, sch, $async) {
    const { gen, it } = cxt;
    const { allErrors, schemaEnv: env, opts } = it;
    const passCxt = opts.passContext ? names_1.default.this : codegen_1.nil;
    if ($async)
        callAsyncRef();
    else
        callSyncRef();
    function callAsyncRef() {
        if (!env.$async)
            throw new Error("async schema referenced by sync schema");
        const valid = gen.let("valid");
        gen.try(() => {
            gen.code((0, codegen_1._) `await ${(0, code_1.callValidateCode)(cxt, v, passCxt)}`);
            addEvaluatedFrom(v); // TODO will not work with async, it has to be returned with the result
            if (!allErrors)
                gen.assign(valid, true);
        }, (e) => {
            gen.if((0, codegen_1._) `!(${e} instanceof ${it.ValidationError})`, () => gen.throw(e));
            addErrorsFrom(e);
            if (!allErrors)
                gen.assign(valid, false);
        });
        cxt.ok(valid);
    }
    function callSyncRef() {
        cxt.result((0, code_1.callValidateCode)(cxt, v, passCxt), () => addEvaluatedFrom(v), () => addErrorsFrom(v));
    }
    function addErrorsFrom(source) {
        const errs = (0, codegen_1._) `${source}.errors`;
        gen.assign(names_1.default.vErrors, (0, codegen_1._) `${names_1.default.vErrors} === null ? ${errs} : ${names_1.default.vErrors}.concat(${errs})`); // TODO tagged
        gen.assign(names_1.default.errors, (0, codegen_1._) `${names_1.default.vErrors}.length`);
    }
    function addEvaluatedFrom(source) {
        var _a;
        if (!it.opts.unevaluated)
            return;
        const schEvaluated = (_a = sch === null || sch === void 0 ? void 0 : sch.validate) === null || _a === void 0 ? void 0 : _a.evaluated;
        // TODO refactor
        if (it.props !== true) {
            if (schEvaluated && !schEvaluated.dynamicProps) {
                if (schEvaluated.props !== undefined) {
                    it.props = util_1.mergeEvaluated.props(gen, schEvaluated.props, it.props);
                }
            }
            else {
                const props = gen.var("props", (0, codegen_1._) `${source}.evaluated.props`);
                it.props = util_1.mergeEvaluated.props(gen, props, it.props, codegen_1.Name);
            }
        }
        if (it.items !== true) {
            if (schEvaluated && !schEvaluated.dynamicItems) {
                if (schEvaluated.items !== undefined) {
                    it.items = util_1.mergeEvaluated.items(gen, schEvaluated.items, it.items);
                }
            }
            else {
                const items = gen.var("items", (0, codegen_1._) `${source}.evaluated.items`);
                it.items = util_1.mergeEvaluated.items(gen, items, it.items, codegen_1.Name);
            }
        }
    }
}
exports.callRef = callRef;
exports["default"] = def;
//# sourceMappingURL=ref.js.map

/***/ }),

/***/ 5851:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __nccwpck_require__(7441);
const types_1 = __nccwpck_require__(3930);
const compile_1 = __nccwpck_require__(3868);
const util_1 = __nccwpck_require__(156);
const error = {
    message: ({ params: { discrError, tagName } }) => discrError === types_1.DiscrError.Tag
        ? `tag "${tagName}" must be string`
        : `value of tag "${tagName}" must be in oneOf`,
    params: ({ params: { discrError, tag, tagName } }) => (0, codegen_1._) `{error: ${discrError}, tag: ${tagName}, tagValue: ${tag}}`,
};
const def = {
    keyword: "discriminator",
    type: "object",
    schemaType: "object",
    error,
    code(cxt) {
        const { gen, data, schema, parentSchema, it } = cxt;
        const { oneOf } = parentSchema;
        if (!it.opts.discriminator) {
            throw new Error("discriminator: requires discriminator option");
        }
        const tagName = schema.propertyName;
        if (typeof tagName != "string")
            throw new Error("discriminator: requires propertyName");
        if (schema.mapping)
            throw new Error("discriminator: mapping is not supported");
        if (!oneOf)
            throw new Error("discriminator: requires oneOf keyword");
        const valid = gen.let("valid", false);
        const tag = gen.const("tag", (0, codegen_1._) `${data}${(0, codegen_1.getProperty)(tagName)}`);
        gen.if((0, codegen_1._) `typeof ${tag} == "string"`, () => validateMapping(), () => cxt.error(false, { discrError: types_1.DiscrError.Tag, tag, tagName }));
        cxt.ok(valid);
        function validateMapping() {
            const mapping = getMapping();
            gen.if(false);
            for (const tagValue in mapping) {
                gen.elseIf((0, codegen_1._) `${tag} === ${tagValue}`);
                gen.assign(valid, applyTagSchema(mapping[tagValue]));
            }
            gen.else();
            cxt.error(false, { discrError: types_1.DiscrError.Mapping, tag, tagName });
            gen.endIf();
        }
        function applyTagSchema(schemaProp) {
            const _valid = gen.name("valid");
            const schCxt = cxt.subschema({ keyword: "oneOf", schemaProp }, _valid);
            cxt.mergeEvaluated(schCxt, codegen_1.Name);
            return _valid;
        }
        function getMapping() {
            var _a;
            const oneOfMapping = {};
            const topRequired = hasRequired(parentSchema);
            let tagRequired = true;
            for (let i = 0; i < oneOf.length; i++) {
                let sch = oneOf[i];
                if ((sch === null || sch === void 0 ? void 0 : sch.$ref) && !(0, util_1.schemaHasRulesButRef)(sch, it.self.RULES)) {
                    sch = compile_1.resolveRef.call(it.self, it.schemaEnv.root, it.baseId, sch === null || sch === void 0 ? void 0 : sch.$ref);
                    if (sch instanceof compile_1.SchemaEnv)
                        sch = sch.schema;
                }
                const propSch = (_a = sch === null || sch === void 0 ? void 0 : sch.properties) === null || _a === void 0 ? void 0 : _a[tagName];
                if (typeof propSch != "object") {
                    throw new Error(`discriminator: oneOf subschemas (or referenced schemas) must have "properties/${tagName}"`);
                }
                tagRequired = tagRequired && (topRequired || hasRequired(sch));
                addMappings(propSch, i);
            }
            if (!tagRequired)
                throw new Error(`discriminator: "${tagName}" must be required`);
            return oneOfMapping;
            function hasRequired({ required }) {
                return Array.isArray(required) && required.includes(tagName);
            }
            function addMappings(sch, i) {
                if (sch.const) {
                    addMapping(sch.const, i);
                }
                else if (sch.enum) {
                    for (const tagValue of sch.enum) {
                        addMapping(tagValue, i);
                    }
                }
                else {
                    throw new Error(`discriminator: "properties/${tagName}" must have "const" or "enum"`);
                }
            }
            function addMapping(tagValue, i) {
                if (typeof tagValue != "string" || tagValue in oneOfMapping) {
                    throw new Error(`discriminator: "${tagName}" values must be unique strings`);
                }
                oneOfMapping[tagValue] = i;
            }
        }
    },
};
exports["default"] = def;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 3930:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DiscrError = void 0;
var DiscrError;
(function (DiscrError) {
    DiscrError["Tag"] = "tag";
    DiscrError["Mapping"] = "mapping";
})(DiscrError = exports.DiscrError || (exports.DiscrError = {}));
//# sourceMappingURL=types.js.map

/***/ }),

/***/ 6118:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const core_1 = __nccwpck_require__(5529);
const validation_1 = __nccwpck_require__(51);
const applicator_1 = __nccwpck_require__(9395);
const dynamic_1 = __nccwpck_require__(7911);
const next_1 = __nccwpck_require__(1138);
const unevaluated_1 = __nccwpck_require__(7170);
const format_1 = __nccwpck_require__(2875);
const metadata_1 = __nccwpck_require__(2639);
const draft2020Vocabularies = [
    dynamic_1.default,
    core_1.default,
    validation_1.default,
    (0, applicator_1.default)(true),
    format_1.default,
    metadata_1.metadataVocabulary,
    metadata_1.contentVocabulary,
    next_1.default,
    unevaluated_1.default,
];
exports["default"] = draft2020Vocabularies;
//# sourceMappingURL=draft2020.js.map

/***/ }),

/***/ 2088:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const core_1 = __nccwpck_require__(5529);
const validation_1 = __nccwpck_require__(51);
const applicator_1 = __nccwpck_require__(9395);
const format_1 = __nccwpck_require__(2875);
const metadata_1 = __nccwpck_require__(2639);
const draft7Vocabularies = [
    core_1.default,
    validation_1.default,
    (0, applicator_1.default)(),
    format_1.default,
    metadata_1.metadataVocabulary,
    metadata_1.contentVocabulary,
];
exports["default"] = draft7Vocabularies;
//# sourceMappingURL=draft7.js.map

/***/ }),

/***/ 5637:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dynamicAnchor = void 0;
const codegen_1 = __nccwpck_require__(7441);
const names_1 = __nccwpck_require__(7281);
const compile_1 = __nccwpck_require__(3868);
const ref_1 = __nccwpck_require__(1272);
const def = {
    keyword: "$dynamicAnchor",
    schemaType: "string",
    code: (cxt) => dynamicAnchor(cxt, cxt.schema),
};
function dynamicAnchor(cxt, anchor) {
    const { gen, it } = cxt;
    it.schemaEnv.root.dynamicAnchors[anchor] = true;
    const v = (0, codegen_1._) `${names_1.default.dynamicAnchors}${(0, codegen_1.getProperty)(anchor)}`;
    const validate = it.errSchemaPath === "#" ? it.validateName : _getValidate(cxt);
    gen.if((0, codegen_1._) `!${v}`, () => gen.assign(v, validate));
}
exports.dynamicAnchor = dynamicAnchor;
function _getValidate(cxt) {
    const { schemaEnv, schema, self } = cxt.it;
    const { root, baseId, localRefs, meta } = schemaEnv.root;
    const { schemaId } = self.opts;
    const sch = new compile_1.SchemaEnv({ schema, schemaId, root, baseId, localRefs, meta });
    compile_1.compileSchema.call(self, sch);
    return (0, ref_1.getValidate)(cxt, sch);
}
exports["default"] = def;
//# sourceMappingURL=dynamicAnchor.js.map

/***/ }),

/***/ 8663:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dynamicRef = void 0;
const codegen_1 = __nccwpck_require__(7441);
const names_1 = __nccwpck_require__(7281);
const ref_1 = __nccwpck_require__(1272);
const def = {
    keyword: "$dynamicRef",
    schemaType: "string",
    code: (cxt) => dynamicRef(cxt, cxt.schema),
};
function dynamicRef(cxt, ref) {
    const { gen, keyword, it } = cxt;
    if (ref[0] !== "#")
        throw new Error(`"${keyword}" only supports hash fragment reference`);
    const anchor = ref.slice(1);
    if (it.allErrors) {
        _dynamicRef();
    }
    else {
        const valid = gen.let("valid", false);
        _dynamicRef(valid);
        cxt.ok(valid);
    }
    function _dynamicRef(valid) {
        // TODO the assumption here is that `recursiveRef: #` always points to the root
        // of the schema object, which is not correct, because there may be $id that
        // makes # point to it, and the target schema may not contain dynamic/recursiveAnchor.
        // Because of that 2 tests in recursiveRef.json fail.
        // This is a similar problem to #815 (`$id` doesn't alter resolution scope for `{ "$ref": "#" }`).
        // (This problem is not tested in JSON-Schema-Test-Suite)
        if (it.schemaEnv.root.dynamicAnchors[anchor]) {
            const v = gen.let("_v", (0, codegen_1._) `${names_1.default.dynamicAnchors}${(0, codegen_1.getProperty)(anchor)}`);
            gen.if(v, _callRef(v, valid), _callRef(it.validateName, valid));
        }
        else {
            _callRef(it.validateName, valid)();
        }
    }
    function _callRef(validate, valid) {
        return valid
            ? () => gen.block(() => {
                (0, ref_1.callRef)(cxt, validate);
                gen.let(valid, true);
            })
            : () => (0, ref_1.callRef)(cxt, validate);
    }
}
exports.dynamicRef = dynamicRef;
exports["default"] = def;
//# sourceMappingURL=dynamicRef.js.map

/***/ }),

/***/ 7911:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const dynamicAnchor_1 = __nccwpck_require__(5637);
const dynamicRef_1 = __nccwpck_require__(8663);
const recursiveAnchor_1 = __nccwpck_require__(3542);
const recursiveRef_1 = __nccwpck_require__(7409);
const dynamic = [dynamicAnchor_1.default, dynamicRef_1.default, recursiveAnchor_1.default, recursiveRef_1.default];
exports["default"] = dynamic;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 3542:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const dynamicAnchor_1 = __nccwpck_require__(5637);
const util_1 = __nccwpck_require__(156);
const def = {
    keyword: "$recursiveAnchor",
    schemaType: "boolean",
    code(cxt) {
        if (cxt.schema)
            (0, dynamicAnchor_1.dynamicAnchor)(cxt, "");
        else
            (0, util_1.checkStrictMode)(cxt.it, "$recursiveAnchor: false is ignored");
    },
};
exports["default"] = def;
//# sourceMappingURL=recursiveAnchor.js.map

/***/ }),

/***/ 7409:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const dynamicRef_1 = __nccwpck_require__(8663);
const def = {
    keyword: "$recursiveRef",
    schemaType: "string",
    code: (cxt) => (0, dynamicRef_1.dynamicRef)(cxt, cxt.schema),
};
exports["default"] = def;
//# sourceMappingURL=recursiveRef.js.map

/***/ }),

/***/ 1526:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __nccwpck_require__(7441);
const error = {
    message: ({ schemaCode }) => (0, codegen_1.str) `must match format "${schemaCode}"`,
    params: ({ schemaCode }) => (0, codegen_1._) `{format: ${schemaCode}}`,
};
const def = {
    keyword: "format",
    type: ["number", "string"],
    schemaType: "string",
    $data: true,
    error,
    code(cxt, ruleType) {
        const { gen, data, $data, schema, schemaCode, it } = cxt;
        const { opts, errSchemaPath, schemaEnv, self } = it;
        if (!opts.validateFormats)
            return;
        if ($data)
            validate$DataFormat();
        else
            validateFormat();
        function validate$DataFormat() {
            const fmts = gen.scopeValue("formats", {
                ref: self.formats,
                code: opts.code.formats,
            });
            const fDef = gen.const("fDef", (0, codegen_1._) `${fmts}[${schemaCode}]`);
            const fType = gen.let("fType");
            const format = gen.let("format");
            // TODO simplify
            gen.if((0, codegen_1._) `typeof ${fDef} == "object" && !(${fDef} instanceof RegExp)`, () => gen.assign(fType, (0, codegen_1._) `${fDef}.type || "string"`).assign(format, (0, codegen_1._) `${fDef}.validate`), () => gen.assign(fType, (0, codegen_1._) `"string"`).assign(format, fDef));
            cxt.fail$data((0, codegen_1.or)(unknownFmt(), invalidFmt()));
            function unknownFmt() {
                if (opts.strictSchema === false)
                    return codegen_1.nil;
                return (0, codegen_1._) `${schemaCode} && !${format}`;
            }
            function invalidFmt() {
                const callFormat = schemaEnv.$async
                    ? (0, codegen_1._) `(${fDef}.async ? await ${format}(${data}) : ${format}(${data}))`
                    : (0, codegen_1._) `${format}(${data})`;
                const validData = (0, codegen_1._) `(typeof ${format} == "function" ? ${callFormat} : ${format}.test(${data}))`;
                return (0, codegen_1._) `${format} && ${format} !== true && ${fType} === ${ruleType} && !${validData}`;
            }
        }
        function validateFormat() {
            const formatDef = self.formats[schema];
            if (!formatDef) {
                unknownFormat();
                return;
            }
            if (formatDef === true)
                return;
            const [fmtType, format, fmtRef] = getFormat(formatDef);
            if (fmtType === ruleType)
                cxt.pass(validCondition());
            function unknownFormat() {
                if (opts.strictSchema === false) {
                    self.logger.warn(unknownMsg());
                    return;
                }
                throw new Error(unknownMsg());
                function unknownMsg() {
                    return `unknown format "${schema}" ignored in schema at path "${errSchemaPath}"`;
                }
            }
            function getFormat(fmtDef) {
                const code = fmtDef instanceof RegExp
                    ? (0, codegen_1.regexpCode)(fmtDef)
                    : opts.code.formats
                        ? (0, codegen_1._) `${opts.code.formats}${(0, codegen_1.getProperty)(schema)}`
                        : undefined;
                const fmt = gen.scopeValue("formats", { key: schema, ref: fmtDef, code });
                if (typeof fmtDef == "object" && !(fmtDef instanceof RegExp)) {
                    return [fmtDef.type || "string", fmtDef.validate, (0, codegen_1._) `${fmt}.validate`];
                }
                return ["string", fmtDef, fmt];
            }
            function validCondition() {
                if (typeof formatDef == "object" && !(formatDef instanceof RegExp) && formatDef.async) {
                    if (!schemaEnv.$async)
                        throw new Error("async format in sync schema");
                    return (0, codegen_1._) `await ${fmtRef}(${data})`;
                }
                return typeof format == "function" ? (0, codegen_1._) `${fmtRef}(${data})` : (0, codegen_1._) `${fmtRef}.test(${data})`;
            }
        }
    },
};
exports["default"] = def;
//# sourceMappingURL=format.js.map

/***/ }),

/***/ 2875:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const format_1 = __nccwpck_require__(1526);
const format = [format_1.default];
exports["default"] = format;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 2639:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.contentVocabulary = exports.metadataVocabulary = void 0;
exports.metadataVocabulary = [
    "title",
    "description",
    "default",
    "deprecated",
    "readOnly",
    "writeOnly",
    "examples",
];
exports.contentVocabulary = [
    "contentMediaType",
    "contentEncoding",
    "contentSchema",
];
//# sourceMappingURL=metadata.js.map

/***/ }),

/***/ 1138:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const dependentRequired_1 = __nccwpck_require__(738);
const dependentSchemas_1 = __nccwpck_require__(7241);
const limitContains_1 = __nccwpck_require__(3628);
const next = [dependentRequired_1.default, dependentSchemas_1.default, limitContains_1.default];
exports["default"] = next;
//# sourceMappingURL=next.js.map

/***/ }),

/***/ 7170:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const unevaluatedProperties_1 = __nccwpck_require__(441);
const unevaluatedItems_1 = __nccwpck_require__(6683);
const unevaluated = [unevaluatedProperties_1.default, unevaluatedItems_1.default];
exports["default"] = unevaluated;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 6683:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __nccwpck_require__(7441);
const util_1 = __nccwpck_require__(156);
const error = {
    message: ({ params: { len } }) => (0, codegen_1.str) `must NOT have more than ${len} items`,
    params: ({ params: { len } }) => (0, codegen_1._) `{limit: ${len}}`,
};
const def = {
    keyword: "unevaluatedItems",
    type: "array",
    schemaType: ["boolean", "object"],
    error,
    code(cxt) {
        const { gen, schema, data, it } = cxt;
        const items = it.items || 0;
        if (items === true)
            return;
        const len = gen.const("len", (0, codegen_1._) `${data}.length`);
        if (schema === false) {
            cxt.setParams({ len: items });
            cxt.fail((0, codegen_1._) `${len} > ${items}`);
        }
        else if (typeof schema == "object" && !(0, util_1.alwaysValidSchema)(it, schema)) {
            const valid = gen.var("valid", (0, codegen_1._) `${len} <= ${items}`);
            gen.if((0, codegen_1.not)(valid), () => validateItems(valid, items));
            cxt.ok(valid);
        }
        it.items = true;
        function validateItems(valid, from) {
            gen.forRange("i", from, len, (i) => {
                cxt.subschema({ keyword: "unevaluatedItems", dataProp: i, dataPropType: util_1.Type.Num }, valid);
                if (!it.allErrors)
                    gen.if((0, codegen_1.not)(valid), () => gen.break());
            });
        }
    },
};
exports["default"] = def;
//# sourceMappingURL=unevaluatedItems.js.map

/***/ }),

/***/ 441:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __nccwpck_require__(7441);
const util_1 = __nccwpck_require__(156);
const names_1 = __nccwpck_require__(7281);
const error = {
    message: "must NOT have unevaluated properties",
    params: ({ params }) => (0, codegen_1._) `{unevaluatedProperty: ${params.unevaluatedProperty}}`,
};
const def = {
    keyword: "unevaluatedProperties",
    type: "object",
    schemaType: ["boolean", "object"],
    trackErrors: true,
    error,
    code(cxt) {
        const { gen, schema, data, errsCount, it } = cxt;
        /* istanbul ignore if */
        if (!errsCount)
            throw new Error("ajv implementation error");
        const { allErrors, props } = it;
        if (props instanceof codegen_1.Name) {
            gen.if((0, codegen_1._) `${props} !== true`, () => gen.forIn("key", data, (key) => gen.if(unevaluatedDynamic(props, key), () => unevaluatedPropCode(key))));
        }
        else if (props !== true) {
            gen.forIn("key", data, (key) => props === undefined
                ? unevaluatedPropCode(key)
                : gen.if(unevaluatedStatic(props, key), () => unevaluatedPropCode(key)));
        }
        it.props = true;
        cxt.ok((0, codegen_1._) `${errsCount} === ${names_1.default.errors}`);
        function unevaluatedPropCode(key) {
            if (schema === false) {
                cxt.setParams({ unevaluatedProperty: key });
                cxt.error();
                if (!allErrors)
                    gen.break();
                return;
            }
            if (!(0, util_1.alwaysValidSchema)(it, schema)) {
                const valid = gen.name("valid");
                cxt.subschema({
                    keyword: "unevaluatedProperties",
                    dataProp: key,
                    dataPropType: util_1.Type.Str,
                }, valid);
                if (!allErrors)
                    gen.if((0, codegen_1.not)(valid), () => gen.break());
            }
        }
        function unevaluatedDynamic(evaluatedProps, key) {
            return (0, codegen_1._) `!${evaluatedProps} || !${evaluatedProps}[${key}]`;
        }
        function unevaluatedStatic(evaluatedProps, key) {
            const ps = [];
            for (const p in evaluatedProps) {
                if (evaluatedProps[p] === true)
                    ps.push((0, codegen_1._) `${key} !== ${p}`);
            }
            return (0, codegen_1.and)(...ps);
        }
    },
};
exports["default"] = def;
//# sourceMappingURL=unevaluatedProperties.js.map

/***/ }),

/***/ 2480:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __nccwpck_require__(7441);
const util_1 = __nccwpck_require__(156);
const equal_1 = __nccwpck_require__(7517);
const error = {
    message: "must be equal to constant",
    params: ({ schemaCode }) => (0, codegen_1._) `{allowedValue: ${schemaCode}}`,
};
const def = {
    keyword: "const",
    $data: true,
    error,
    code(cxt) {
        const { gen, data, $data, schemaCode, schema } = cxt;
        if ($data || (schema && typeof schema == "object")) {
            cxt.fail$data((0, codegen_1._) `!${(0, util_1.useFunc)(gen, equal_1.default)}(${data}, ${schemaCode})`);
        }
        else {
            cxt.fail((0, codegen_1._) `${schema} !== ${data}`);
        }
    },
};
exports["default"] = def;
//# sourceMappingURL=const.js.map

/***/ }),

/***/ 738:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const dependencies_1 = __nccwpck_require__(7328);
const def = {
    keyword: "dependentRequired",
    type: "object",
    schemaType: "object",
    error: dependencies_1.error,
    code: (cxt) => (0, dependencies_1.validatePropertyDeps)(cxt),
};
exports["default"] = def;
//# sourceMappingURL=dependentRequired.js.map

/***/ }),

/***/ 3296:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __nccwpck_require__(7441);
const util_1 = __nccwpck_require__(156);
const equal_1 = __nccwpck_require__(7517);
const error = {
    message: "must be equal to one of the allowed values",
    params: ({ schemaCode }) => (0, codegen_1._) `{allowedValues: ${schemaCode}}`,
};
const def = {
    keyword: "enum",
    schemaType: "array",
    $data: true,
    error,
    code(cxt) {
        const { gen, data, $data, schema, schemaCode, it } = cxt;
        if (!$data && schema.length === 0)
            throw new Error("enum must have non-empty array");
        const useLoop = schema.length >= it.opts.loopEnum;
        let eql;
        const getEql = () => (eql !== null && eql !== void 0 ? eql : (eql = (0, util_1.useFunc)(gen, equal_1.default)));
        let valid;
        if (useLoop || $data) {
            valid = gen.let("valid");
            cxt.block$data(valid, loopEnum);
        }
        else {
            /* istanbul ignore if */
            if (!Array.isArray(schema))
                throw new Error("ajv implementation error");
            const vSchema = gen.const("vSchema", schemaCode);
            valid = (0, codegen_1.or)(...schema.map((_x, i) => equalCode(vSchema, i)));
        }
        cxt.pass(valid);
        function loopEnum() {
            gen.assign(valid, false);
            gen.forOf("v", schemaCode, (v) => gen.if((0, codegen_1._) `${getEql()}(${data}, ${v})`, () => gen.assign(valid, true).break()));
        }
        function equalCode(vSchema, i) {
            const sch = schema[i];
            return typeof sch === "object" && sch !== null
                ? (0, codegen_1._) `${getEql()}(${data}, ${vSchema}[${i}])`
                : (0, codegen_1._) `${data} === ${sch}`;
        }
    },
};
exports["default"] = def;
//# sourceMappingURL=enum.js.map

/***/ }),

/***/ 51:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const limitNumber_1 = __nccwpck_require__(5634);
const multipleOf_1 = __nccwpck_require__(5549);
const limitLength_1 = __nccwpck_require__(3919);
const pattern_1 = __nccwpck_require__(3706);
const limitProperties_1 = __nccwpck_require__(6114);
const required_1 = __nccwpck_require__(4304);
const limitItems_1 = __nccwpck_require__(6111);
const uniqueItems_1 = __nccwpck_require__(2060);
const const_1 = __nccwpck_require__(2480);
const enum_1 = __nccwpck_require__(3296);
const validation = [
    // number
    limitNumber_1.default,
    multipleOf_1.default,
    // string
    limitLength_1.default,
    pattern_1.default,
    // object
    limitProperties_1.default,
    required_1.default,
    // array
    limitItems_1.default,
    uniqueItems_1.default,
    // any
    { keyword: "type", schemaType: ["string", "array"] },
    { keyword: "nullable", schemaType: "boolean" },
    const_1.default,
    enum_1.default,
];
exports["default"] = validation;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 3628:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const util_1 = __nccwpck_require__(156);
const def = {
    keyword: ["maxContains", "minContains"],
    type: "array",
    schemaType: "number",
    code({ keyword, parentSchema, it }) {
        if (parentSchema.contains === undefined) {
            (0, util_1.checkStrictMode)(it, `"${keyword}" without "contains" is ignored`);
        }
    },
};
exports["default"] = def;
//# sourceMappingURL=limitContains.js.map

/***/ }),

/***/ 6111:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __nccwpck_require__(7441);
const error = {
    message({ keyword, schemaCode }) {
        const comp = keyword === "maxItems" ? "more" : "fewer";
        return (0, codegen_1.str) `must NOT have ${comp} than ${schemaCode} items`;
    },
    params: ({ schemaCode }) => (0, codegen_1._) `{limit: ${schemaCode}}`,
};
const def = {
    keyword: ["maxItems", "minItems"],
    type: "array",
    schemaType: "number",
    $data: true,
    error,
    code(cxt) {
        const { keyword, data, schemaCode } = cxt;
        const op = keyword === "maxItems" ? codegen_1.operators.GT : codegen_1.operators.LT;
        cxt.fail$data((0, codegen_1._) `${data}.length ${op} ${schemaCode}`);
    },
};
exports["default"] = def;
//# sourceMappingURL=limitItems.js.map

/***/ }),

/***/ 3919:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __nccwpck_require__(7441);
const util_1 = __nccwpck_require__(156);
const ucs2length_1 = __nccwpck_require__(3285);
const error = {
    message({ keyword, schemaCode }) {
        const comp = keyword === "maxLength" ? "more" : "fewer";
        return (0, codegen_1.str) `must NOT have ${comp} than ${schemaCode} characters`;
    },
    params: ({ schemaCode }) => (0, codegen_1._) `{limit: ${schemaCode}}`,
};
const def = {
    keyword: ["maxLength", "minLength"],
    type: "string",
    schemaType: "number",
    $data: true,
    error,
    code(cxt) {
        const { keyword, data, schemaCode, it } = cxt;
        const op = keyword === "maxLength" ? codegen_1.operators.GT : codegen_1.operators.LT;
        const len = it.opts.unicode === false ? (0, codegen_1._) `${data}.length` : (0, codegen_1._) `${(0, util_1.useFunc)(cxt.gen, ucs2length_1.default)}(${data})`;
        cxt.fail$data((0, codegen_1._) `${len} ${op} ${schemaCode}`);
    },
};
exports["default"] = def;
//# sourceMappingURL=limitLength.js.map

/***/ }),

/***/ 5634:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __nccwpck_require__(7441);
const ops = codegen_1.operators;
const KWDs = {
    maximum: { okStr: "<=", ok: ops.LTE, fail: ops.GT },
    minimum: { okStr: ">=", ok: ops.GTE, fail: ops.LT },
    exclusiveMaximum: { okStr: "<", ok: ops.LT, fail: ops.GTE },
    exclusiveMinimum: { okStr: ">", ok: ops.GT, fail: ops.LTE },
};
const error = {
    message: ({ keyword, schemaCode }) => (0, codegen_1.str) `must be ${KWDs[keyword].okStr} ${schemaCode}`,
    params: ({ keyword, schemaCode }) => (0, codegen_1._) `{comparison: ${KWDs[keyword].okStr}, limit: ${schemaCode}}`,
};
const def = {
    keyword: Object.keys(KWDs),
    type: "number",
    schemaType: "number",
    $data: true,
    error,
    code(cxt) {
        const { keyword, data, schemaCode } = cxt;
        cxt.fail$data((0, codegen_1._) `${data} ${KWDs[keyword].fail} ${schemaCode} || isNaN(${data})`);
    },
};
exports["default"] = def;
//# sourceMappingURL=limitNumber.js.map

/***/ }),

/***/ 6114:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __nccwpck_require__(7441);
const error = {
    message({ keyword, schemaCode }) {
        const comp = keyword === "maxProperties" ? "more" : "fewer";
        return (0, codegen_1.str) `must NOT have ${comp} than ${schemaCode} properties`;
    },
    params: ({ schemaCode }) => (0, codegen_1._) `{limit: ${schemaCode}}`,
};
const def = {
    keyword: ["maxProperties", "minProperties"],
    type: "object",
    schemaType: "number",
    $data: true,
    error,
    code(cxt) {
        const { keyword, data, schemaCode } = cxt;
        const op = keyword === "maxProperties" ? codegen_1.operators.GT : codegen_1.operators.LT;
        cxt.fail$data((0, codegen_1._) `Object.keys(${data}).length ${op} ${schemaCode}`);
    },
};
exports["default"] = def;
//# sourceMappingURL=limitProperties.js.map

/***/ }),

/***/ 5549:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __nccwpck_require__(7441);
const error = {
    message: ({ schemaCode }) => (0, codegen_1.str) `must be multiple of ${schemaCode}`,
    params: ({ schemaCode }) => (0, codegen_1._) `{multipleOf: ${schemaCode}}`,
};
const def = {
    keyword: "multipleOf",
    type: "number",
    schemaType: "number",
    $data: true,
    error,
    code(cxt) {
        const { gen, data, schemaCode, it } = cxt;
        // const bdt = bad$DataType(schemaCode, <string>def.schemaType, $data)
        const prec = it.opts.multipleOfPrecision;
        const res = gen.let("res");
        const invalid = prec
            ? (0, codegen_1._) `Math.abs(Math.round(${res}) - ${res}) > 1e-${prec}`
            : (0, codegen_1._) `${res} !== parseInt(${res})`;
        cxt.fail$data((0, codegen_1._) `(${schemaCode} === 0 || (${res} = ${data}/${schemaCode}, ${invalid}))`);
    },
};
exports["default"] = def;
//# sourceMappingURL=multipleOf.js.map

/***/ }),

/***/ 3706:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const code_1 = __nccwpck_require__(8470);
const codegen_1 = __nccwpck_require__(7441);
const error = {
    message: ({ schemaCode }) => (0, codegen_1.str) `must match pattern "${schemaCode}"`,
    params: ({ schemaCode }) => (0, codegen_1._) `{pattern: ${schemaCode}}`,
};
const def = {
    keyword: "pattern",
    type: "string",
    schemaType: "string",
    $data: true,
    error,
    code(cxt) {
        const { data, $data, schema, schemaCode, it } = cxt;
        // TODO regexp should be wrapped in try/catchs
        const u = it.opts.unicodeRegExp ? "u" : "";
        const regExp = $data ? (0, codegen_1._) `(new RegExp(${schemaCode}, ${u}))` : (0, code_1.usePattern)(cxt, schema);
        cxt.fail$data((0, codegen_1._) `!${regExp}.test(${data})`);
    },
};
exports["default"] = def;
//# sourceMappingURL=pattern.js.map

/***/ }),

/***/ 4304:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const code_1 = __nccwpck_require__(8470);
const codegen_1 = __nccwpck_require__(7441);
const util_1 = __nccwpck_require__(156);
const error = {
    message: ({ params: { missingProperty } }) => (0, codegen_1.str) `must have required property '${missingProperty}'`,
    params: ({ params: { missingProperty } }) => (0, codegen_1._) `{missingProperty: ${missingProperty}}`,
};
const def = {
    keyword: "required",
    type: "object",
    schemaType: "array",
    $data: true,
    error,
    code(cxt) {
        const { gen, schema, schemaCode, data, $data, it } = cxt;
        const { opts } = it;
        if (!$data && schema.length === 0)
            return;
        const useLoop = schema.length >= opts.loopRequired;
        if (it.allErrors)
            allErrorsMode();
        else
            exitOnErrorMode();
        if (opts.strictRequired) {
            const props = cxt.parentSchema.properties;
            const { definedProperties } = cxt.it;
            for (const requiredKey of schema) {
                if ((props === null || props === void 0 ? void 0 : props[requiredKey]) === undefined && !definedProperties.has(requiredKey)) {
                    const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;
                    const msg = `required property "${requiredKey}" is not defined at "${schemaPath}" (strictRequired)`;
                    (0, util_1.checkStrictMode)(it, msg, it.opts.strictRequired);
                }
            }
        }
        function allErrorsMode() {
            if (useLoop || $data) {
                cxt.block$data(codegen_1.nil, loopAllRequired);
            }
            else {
                for (const prop of schema) {
                    (0, code_1.checkReportMissingProp)(cxt, prop);
                }
            }
        }
        function exitOnErrorMode() {
            const missing = gen.let("missing");
            if (useLoop || $data) {
                const valid = gen.let("valid", true);
                cxt.block$data(valid, () => loopUntilMissing(missing, valid));
                cxt.ok(valid);
            }
            else {
                gen.if((0, code_1.checkMissingProp)(cxt, schema, missing));
                (0, code_1.reportMissingProp)(cxt, missing);
                gen.else();
            }
        }
        function loopAllRequired() {
            gen.forOf("prop", schemaCode, (prop) => {
                cxt.setParams({ missingProperty: prop });
                gen.if((0, code_1.noPropertyInData)(gen, data, prop, opts.ownProperties), () => cxt.error());
            });
        }
        function loopUntilMissing(missing, valid) {
            cxt.setParams({ missingProperty: missing });
            gen.forOf(missing, schemaCode, () => {
                gen.assign(valid, (0, code_1.propertyInData)(gen, data, missing, opts.ownProperties));
                gen.if((0, codegen_1.not)(valid), () => {
                    cxt.error();
                    gen.break();
                });
            }, codegen_1.nil);
        }
    },
};
exports["default"] = def;
//# sourceMappingURL=required.js.map

/***/ }),

/***/ 2060:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const dataType_1 = __nccwpck_require__(4720);
const codegen_1 = __nccwpck_require__(7441);
const util_1 = __nccwpck_require__(156);
const equal_1 = __nccwpck_require__(7517);
const error = {
    message: ({ params: { i, j } }) => (0, codegen_1.str) `must NOT have duplicate items (items ## ${j} and ${i} are identical)`,
    params: ({ params: { i, j } }) => (0, codegen_1._) `{i: ${i}, j: ${j}}`,
};
const def = {
    keyword: "uniqueItems",
    type: "array",
    schemaType: "boolean",
    $data: true,
    error,
    code(cxt) {
        const { gen, data, $data, schema, parentSchema, schemaCode, it } = cxt;
        if (!$data && !schema)
            return;
        const valid = gen.let("valid");
        const itemTypes = parentSchema.items ? (0, dataType_1.getSchemaTypes)(parentSchema.items) : [];
        cxt.block$data(valid, validateUniqueItems, (0, codegen_1._) `${schemaCode} === false`);
        cxt.ok(valid);
        function validateUniqueItems() {
            const i = gen.let("i", (0, codegen_1._) `${data}.length`);
            const j = gen.let("j");
            cxt.setParams({ i, j });
            gen.assign(valid, true);
            gen.if((0, codegen_1._) `${i} > 1`, () => (canOptimize() ? loopN : loopN2)(i, j));
        }
        function canOptimize() {
            return itemTypes.length > 0 && !itemTypes.some((t) => t === "object" || t === "array");
        }
        function loopN(i, j) {
            const item = gen.name("item");
            const wrongType = (0, dataType_1.checkDataTypes)(itemTypes, item, it.opts.strictNumbers, dataType_1.DataType.Wrong);
            const indices = gen.const("indices", (0, codegen_1._) `{}`);
            gen.for((0, codegen_1._) `;${i}--;`, () => {
                gen.let(item, (0, codegen_1._) `${data}[${i}]`);
                gen.if(wrongType, (0, codegen_1._) `continue`);
                if (itemTypes.length > 1)
                    gen.if((0, codegen_1._) `typeof ${item} == "string"`, (0, codegen_1._) `${item} += "_"`);
                gen
                    .if((0, codegen_1._) `typeof ${indices}[${item}] == "number"`, () => {
                    gen.assign(j, (0, codegen_1._) `${indices}[${item}]`);
                    cxt.error();
                    gen.assign(valid, false).break();
                })
                    .code((0, codegen_1._) `${indices}[${item}] = ${i}`);
            });
        }
        function loopN2(i, j) {
            const eql = (0, util_1.useFunc)(gen, equal_1.default);
            const outer = gen.name("outer");
            gen.label(outer).for((0, codegen_1._) `;${i}--;`, () => gen.for((0, codegen_1._) `${j} = ${i}; ${j}--;`, () => gen.if((0, codegen_1._) `${eql}(${data}[${i}], ${data}[${j}])`, () => {
                cxt.error();
                gen.assign(valid, false).break(outer);
            })));
        }
    },
};
exports["default"] = def;
//# sourceMappingURL=uniqueItems.js.map

/***/ }),

/***/ 9633:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

module.exports =
{
  parallel      : __nccwpck_require__(5916),
  serial        : __nccwpck_require__(1166),
  serialOrdered : __nccwpck_require__(6132)
};


/***/ }),

/***/ 6959:
/***/ ((module) => {

// API
module.exports = abort;

/**
 * Aborts leftover active jobs
 *
 * @param {object} state - current state object
 */
function abort(state)
{
  Object.keys(state.jobs).forEach(clean.bind(state));

  // reset leftover jobs
  state.jobs = {};
}

/**
 * Cleans up leftover job by invoking abort function for the provided job id
 *
 * @this  state
 * @param {string|number} key - job id to abort
 */
function clean(key)
{
  if (typeof this.jobs[key] == 'function')
  {
    this.jobs[key]();
  }
}


/***/ }),

/***/ 9624:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var defer = __nccwpck_require__(7534);

// API
module.exports = async;

/**
 * Runs provided callback asynchronously
 * even if callback itself is not
 *
 * @param   {function} callback - callback to invoke
 * @returns {function} - augmented callback
 */
function async(callback)
{
  var isAsync = false;

  // check if async happened
  defer(function() { isAsync = true; });

  return function async_callback(err, result)
  {
    if (isAsync)
    {
      callback(err, result);
    }
    else
    {
      defer(function nextTick_callback()
      {
        callback(err, result);
      });
    }
  };
}


/***/ }),

/***/ 7534:
/***/ ((module) => {

module.exports = defer;

/**
 * Runs provided function on next iteration of the event loop
 *
 * @param {function} fn - function to run
 */
function defer(fn)
{
  var nextTick = typeof setImmediate == 'function'
    ? setImmediate
    : (
      typeof process == 'object' && typeof process.nextTick == 'function'
      ? process.nextTick
      : null
    );

  if (nextTick)
  {
    nextTick(fn);
  }
  else
  {
    setTimeout(fn, 0);
  }
}


/***/ }),

/***/ 5718:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var async = __nccwpck_require__(9624)
  , abort = __nccwpck_require__(6959)
  ;

// API
module.exports = iterate;

/**
 * Iterates over each job object
 *
 * @param {array|object} list - array or object (named list) to iterate over
 * @param {function} iterator - iterator to run
 * @param {object} state - current job status
 * @param {function} callback - invoked when all elements processed
 */
function iterate(list, iterator, state, callback)
{
  // store current index
  var key = state['keyedList'] ? state['keyedList'][state.index] : state.index;

  state.jobs[key] = runJob(iterator, key, list[key], function(error, output)
  {
    // don't repeat yourself
    // skip secondary callbacks
    if (!(key in state.jobs))
    {
      return;
    }

    // clean up jobs
    delete state.jobs[key];

    if (error)
    {
      // don't process rest of the results
      // stop still active jobs
      // and reset the list
      abort(state);
    }
    else
    {
      state.results[key] = output;
    }

    // return salvaged results
    callback(error, state.results);
  });
}

/**
 * Runs iterator over provided job element
 *
 * @param   {function} iterator - iterator to invoke
 * @param   {string|number} key - key/index of the element in the list of jobs
 * @param   {mixed} item - job description
 * @param   {function} callback - invoked after iterator is done with the job
 * @returns {function|mixed} - job abort function or something else
 */
function runJob(iterator, key, item, callback)
{
  var aborter;

  // allow shortcut if iterator expects only two arguments
  if (iterator.length == 2)
  {
    aborter = iterator(item, async(callback));
  }
  // otherwise go with full three arguments
  else
  {
    aborter = iterator(item, key, async(callback));
  }

  return aborter;
}


/***/ }),

/***/ 2917:
/***/ ((module) => {

// API
module.exports = state;

/**
 * Creates initial state object
 * for iteration over list
 *
 * @param   {array|object} list - list to iterate over
 * @param   {function|null} sortMethod - function to use for keys sort,
 *                                     or `null` to keep them as is
 * @returns {object} - initial state object
 */
function state(list, sortMethod)
{
  var isNamedList = !Array.isArray(list)
    , initState =
    {
      index    : 0,
      keyedList: isNamedList || sortMethod ? Object.keys(list) : null,
      jobs     : {},
      results  : isNamedList ? {} : [],
      size     : isNamedList ? Object.keys(list).length : list.length
    }
    ;

  if (sortMethod)
  {
    // sort array keys based on it's values
    // sort object's keys just on own merit
    initState.keyedList.sort(isNamedList ? sortMethod : function(a, b)
    {
      return sortMethod(list[a], list[b]);
    });
  }

  return initState;
}


/***/ }),

/***/ 8509:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var abort = __nccwpck_require__(6959)
  , async = __nccwpck_require__(9624)
  ;

// API
module.exports = terminator;

/**
 * Terminates jobs in the attached state context
 *
 * @this  AsyncKitState#
 * @param {function} callback - final callback to invoke after termination
 */
function terminator(callback)
{
  if (!Object.keys(this.jobs).length)
  {
    return;
  }

  // fast forward iteration index
  this.index = this.size;

  // abort jobs
  abort(this);

  // send back results we have so far
  async(callback)(null, this.results);
}


/***/ }),

/***/ 5916:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var iterate    = __nccwpck_require__(5718)
  , initState  = __nccwpck_require__(2917)
  , terminator = __nccwpck_require__(8509)
  ;

// Public API
module.exports = parallel;

/**
 * Runs iterator over provided array elements in parallel
 *
 * @param   {array|object} list - array or object (named list) to iterate over
 * @param   {function} iterator - iterator to run
 * @param   {function} callback - invoked when all elements processed
 * @returns {function} - jobs terminator
 */
function parallel(list, iterator, callback)
{
  var state = initState(list);

  while (state.index < (state['keyedList'] || list).length)
  {
    iterate(list, iterator, state, function(error, result)
    {
      if (error)
      {
        callback(error, result);
        return;
      }

      // looks like it's the last one
      if (Object.keys(state.jobs).length === 0)
      {
        callback(null, state.results);
        return;
      }
    });

    state.index++;
  }

  return terminator.bind(state, callback);
}


/***/ }),

/***/ 1166:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var serialOrdered = __nccwpck_require__(6132);

// Public API
module.exports = serial;

/**
 * Runs iterator over provided array elements in series
 *
 * @param   {array|object} list - array or object (named list) to iterate over
 * @param   {function} iterator - iterator to run
 * @param   {function} callback - invoked when all elements processed
 * @returns {function} - jobs terminator
 */
function serial(list, iterator, callback)
{
  return serialOrdered(list, iterator, null, callback);
}


/***/ }),

/***/ 6132:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var iterate    = __nccwpck_require__(5718)
  , initState  = __nccwpck_require__(2917)
  , terminator = __nccwpck_require__(8509)
  ;

// Public API
module.exports = serialOrdered;
// sorting helpers
module.exports.ascending  = ascending;
module.exports.descending = descending;

/**
 * Runs iterator over provided sorted array elements in series
 *
 * @param   {array|object} list - array or object (named list) to iterate over
 * @param   {function} iterator - iterator to run
 * @param   {function} sortMethod - custom sort function
 * @param   {function} callback - invoked when all elements processed
 * @returns {function} - jobs terminator
 */
function serialOrdered(list, iterator, sortMethod, callback)
{
  var state = initState(list, sortMethod);

  iterate(list, iterator, state, function iteratorHandler(error, result)
  {
    if (error)
    {
      callback(error, result);
      return;
    }

    state.index++;

    // are we there yet?
    if (state.index < (state['keyedList'] || list).length)
    {
      iterate(list, iterator, state, iteratorHandler);
      return;
    }

    // done here
    callback(null, state.results);
  });

  return terminator.bind(state, callback);
}

/*
 * -- Sort methods
 */

/**
 * sort helper to sort array elements in ascending order
 *
 * @param   {mixed} a - an item to compare
 * @param   {mixed} b - an item to compare
 * @returns {number} - comparison result
 */
function ascending(a, b)
{
  return a < b ? -1 : a > b ? 1 : 0;
}

/**
 * sort helper to sort array elements in descending order
 *
 * @param   {mixed} a - an item to compare
 * @param   {mixed} b - an item to compare
 * @returns {number} - comparison result
 */
function descending(a, b)
{
  return -1 * ascending(a, b);
}


/***/ }),

/***/ 1740:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

/* MIT license */
/* eslint-disable no-mixed-operators */
const cssKeywords = __nccwpck_require__(7443);

// NOTE: conversions should only return primitive values (i.e. arrays, or
//       values that give correct `typeof` results).
//       do not use box values types (i.e. Number(), String(), etc.)

const reverseKeywords = {};
for (const key of Object.keys(cssKeywords)) {
	reverseKeywords[cssKeywords[key]] = key;
}

const convert = {
	rgb: {channels: 3, labels: 'rgb'},
	hsl: {channels: 3, labels: 'hsl'},
	hsv: {channels: 3, labels: 'hsv'},
	hwb: {channels: 3, labels: 'hwb'},
	cmyk: {channels: 4, labels: 'cmyk'},
	xyz: {channels: 3, labels: 'xyz'},
	lab: {channels: 3, labels: 'lab'},
	lch: {channels: 3, labels: 'lch'},
	hex: {channels: 1, labels: ['hex']},
	keyword: {channels: 1, labels: ['keyword']},
	ansi16: {channels: 1, labels: ['ansi16']},
	ansi256: {channels: 1, labels: ['ansi256']},
	hcg: {channels: 3, labels: ['h', 'c', 'g']},
	apple: {channels: 3, labels: ['r16', 'g16', 'b16']},
	gray: {channels: 1, labels: ['gray']}
};

module.exports = convert;

// Hide .channels and .labels properties
for (const model of Object.keys(convert)) {
	if (!('channels' in convert[model])) {
		throw new Error('missing channels property: ' + model);
	}

	if (!('labels' in convert[model])) {
		throw new Error('missing channel labels property: ' + model);
	}

	if (convert[model].labels.length !== convert[model].channels) {
		throw new Error('channel and label counts mismatch: ' + model);
	}

	const {channels, labels} = convert[model];
	delete convert[model].channels;
	delete convert[model].labels;
	Object.defineProperty(convert[model], 'channels', {value: channels});
	Object.defineProperty(convert[model], 'labels', {value: labels});
}

convert.rgb.hsl = function (rgb) {
	const r = rgb[0] / 255;
	const g = rgb[1] / 255;
	const b = rgb[2] / 255;
	const min = Math.min(r, g, b);
	const max = Math.max(r, g, b);
	const delta = max - min;
	let h;
	let s;

	if (max === min) {
		h = 0;
	} else if (r === max) {
		h = (g - b) / delta;
	} else if (g === max) {
		h = 2 + (b - r) / delta;
	} else if (b === max) {
		h = 4 + (r - g) / delta;
	}

	h = Math.min(h * 60, 360);

	if (h < 0) {
		h += 360;
	}

	const l = (min + max) / 2;

	if (max === min) {
		s = 0;
	} else if (l <= 0.5) {
		s = delta / (max + min);
	} else {
		s = delta / (2 - max - min);
	}

	return [h, s * 100, l * 100];
};

convert.rgb.hsv = function (rgb) {
	let rdif;
	let gdif;
	let bdif;
	let h;
	let s;

	const r = rgb[0] / 255;
	const g = rgb[1] / 255;
	const b = rgb[2] / 255;
	const v = Math.max(r, g, b);
	const diff = v - Math.min(r, g, b);
	const diffc = function (c) {
		return (v - c) / 6 / diff + 1 / 2;
	};

	if (diff === 0) {
		h = 0;
		s = 0;
	} else {
		s = diff / v;
		rdif = diffc(r);
		gdif = diffc(g);
		bdif = diffc(b);

		if (r === v) {
			h = bdif - gdif;
		} else if (g === v) {
			h = (1 / 3) + rdif - bdif;
		} else if (b === v) {
			h = (2 / 3) + gdif - rdif;
		}

		if (h < 0) {
			h += 1;
		} else if (h > 1) {
			h -= 1;
		}
	}

	return [
		h * 360,
		s * 100,
		v * 100
	];
};

convert.rgb.hwb = function (rgb) {
	const r = rgb[0];
	const g = rgb[1];
	let b = rgb[2];
	const h = convert.rgb.hsl(rgb)[0];
	const w = 1 / 255 * Math.min(r, Math.min(g, b));

	b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));

	return [h, w * 100, b * 100];
};

convert.rgb.cmyk = function (rgb) {
	const r = rgb[0] / 255;
	const g = rgb[1] / 255;
	const b = rgb[2] / 255;

	const k = Math.min(1 - r, 1 - g, 1 - b);
	const c = (1 - r - k) / (1 - k) || 0;
	const m = (1 - g - k) / (1 - k) || 0;
	const y = (1 - b - k) / (1 - k) || 0;

	return [c * 100, m * 100, y * 100, k * 100];
};

function comparativeDistance(x, y) {
	/*
		See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
	*/
	return (
		((x[0] - y[0]) ** 2) +
		((x[1] - y[1]) ** 2) +
		((x[2] - y[2]) ** 2)
	);
}

convert.rgb.keyword = function (rgb) {
	const reversed = reverseKeywords[rgb];
	if (reversed) {
		return reversed;
	}

	let currentClosestDistance = Infinity;
	let currentClosestKeyword;

	for (const keyword of Object.keys(cssKeywords)) {
		const value = cssKeywords[keyword];

		// Compute comparative distance
		const distance = comparativeDistance(rgb, value);

		// Check if its less, if so set as closest
		if (distance < currentClosestDistance) {
			currentClosestDistance = distance;
			currentClosestKeyword = keyword;
		}
	}

	return currentClosestKeyword;
};

convert.keyword.rgb = function (keyword) {
	return cssKeywords[keyword];
};

convert.rgb.xyz = function (rgb) {
	let r = rgb[0] / 255;
	let g = rgb[1] / 255;
	let b = rgb[2] / 255;

	// Assume sRGB
	r = r > 0.04045 ? (((r + 0.055) / 1.055) ** 2.4) : (r / 12.92);
	g = g > 0.04045 ? (((g + 0.055) / 1.055) ** 2.4) : (g / 12.92);
	b = b > 0.04045 ? (((b + 0.055) / 1.055) ** 2.4) : (b / 12.92);

	const x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
	const y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
	const z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

	return [x * 100, y * 100, z * 100];
};

convert.rgb.lab = function (rgb) {
	const xyz = convert.rgb.xyz(rgb);
	let x = xyz[0];
	let y = xyz[1];
	let z = xyz[2];

	x /= 95.047;
	y /= 100;
	z /= 108.883;

	x = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);
	y = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);
	z = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);

	const l = (116 * y) - 16;
	const a = 500 * (x - y);
	const b = 200 * (y - z);

	return [l, a, b];
};

convert.hsl.rgb = function (hsl) {
	const h = hsl[0] / 360;
	const s = hsl[1] / 100;
	const l = hsl[2] / 100;
	let t2;
	let t3;
	let val;

	if (s === 0) {
		val = l * 255;
		return [val, val, val];
	}

	if (l < 0.5) {
		t2 = l * (1 + s);
	} else {
		t2 = l + s - l * s;
	}

	const t1 = 2 * l - t2;

	const rgb = [0, 0, 0];
	for (let i = 0; i < 3; i++) {
		t3 = h + 1 / 3 * -(i - 1);
		if (t3 < 0) {
			t3++;
		}

		if (t3 > 1) {
			t3--;
		}

		if (6 * t3 < 1) {
			val = t1 + (t2 - t1) * 6 * t3;
		} else if (2 * t3 < 1) {
			val = t2;
		} else if (3 * t3 < 2) {
			val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
		} else {
			val = t1;
		}

		rgb[i] = val * 255;
	}

	return rgb;
};

convert.hsl.hsv = function (hsl) {
	const h = hsl[0];
	let s = hsl[1] / 100;
	let l = hsl[2] / 100;
	let smin = s;
	const lmin = Math.max(l, 0.01);

	l *= 2;
	s *= (l <= 1) ? l : 2 - l;
	smin *= lmin <= 1 ? lmin : 2 - lmin;
	const v = (l + s) / 2;
	const sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);

	return [h, sv * 100, v * 100];
};

convert.hsv.rgb = function (hsv) {
	const h = hsv[0] / 60;
	const s = hsv[1] / 100;
	let v = hsv[2] / 100;
	const hi = Math.floor(h) % 6;

	const f = h - Math.floor(h);
	const p = 255 * v * (1 - s);
	const q = 255 * v * (1 - (s * f));
	const t = 255 * v * (1 - (s * (1 - f)));
	v *= 255;

	switch (hi) {
		case 0:
			return [v, t, p];
		case 1:
			return [q, v, p];
		case 2:
			return [p, v, t];
		case 3:
			return [p, q, v];
		case 4:
			return [t, p, v];
		case 5:
			return [v, p, q];
	}
};

convert.hsv.hsl = function (hsv) {
	const h = hsv[0];
	const s = hsv[1] / 100;
	const v = hsv[2] / 100;
	const vmin = Math.max(v, 0.01);
	let sl;
	let l;

	l = (2 - s) * v;
	const lmin = (2 - s) * vmin;
	sl = s * vmin;
	sl /= (lmin <= 1) ? lmin : 2 - lmin;
	sl = sl || 0;
	l /= 2;

	return [h, sl * 100, l * 100];
};

// http://dev.w3.org/csswg/css-color/#hwb-to-rgb
convert.hwb.rgb = function (hwb) {
	const h = hwb[0] / 360;
	let wh = hwb[1] / 100;
	let bl = hwb[2] / 100;
	const ratio = wh + bl;
	let f;

	// Wh + bl cant be > 1
	if (ratio > 1) {
		wh /= ratio;
		bl /= ratio;
	}

	const i = Math.floor(6 * h);
	const v = 1 - bl;
	f = 6 * h - i;

	if ((i & 0x01) !== 0) {
		f = 1 - f;
	}

	const n = wh + f * (v - wh); // Linear interpolation

	let r;
	let g;
	let b;
	/* eslint-disable max-statements-per-line,no-multi-spaces */
	switch (i) {
		default:
		case 6:
		case 0: r = v;  g = n;  b = wh; break;
		case 1: r = n;  g = v;  b = wh; break;
		case 2: r = wh; g = v;  b = n; break;
		case 3: r = wh; g = n;  b = v; break;
		case 4: r = n;  g = wh; b = v; break;
		case 5: r = v;  g = wh; b = n; break;
	}
	/* eslint-enable max-statements-per-line,no-multi-spaces */

	return [r * 255, g * 255, b * 255];
};

convert.cmyk.rgb = function (cmyk) {
	const c = cmyk[0] / 100;
	const m = cmyk[1] / 100;
	const y = cmyk[2] / 100;
	const k = cmyk[3] / 100;

	const r = 1 - Math.min(1, c * (1 - k) + k);
	const g = 1 - Math.min(1, m * (1 - k) + k);
	const b = 1 - Math.min(1, y * (1 - k) + k);

	return [r * 255, g * 255, b * 255];
};

convert.xyz.rgb = function (xyz) {
	const x = xyz[0] / 100;
	const y = xyz[1] / 100;
	const z = xyz[2] / 100;
	let r;
	let g;
	let b;

	r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
	g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
	b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

	// Assume sRGB
	r = r > 0.0031308
		? ((1.055 * (r ** (1.0 / 2.4))) - 0.055)
		: r * 12.92;

	g = g > 0.0031308
		? ((1.055 * (g ** (1.0 / 2.4))) - 0.055)
		: g * 12.92;

	b = b > 0.0031308
		? ((1.055 * (b ** (1.0 / 2.4))) - 0.055)
		: b * 12.92;

	r = Math.min(Math.max(0, r), 1);
	g = Math.min(Math.max(0, g), 1);
	b = Math.min(Math.max(0, b), 1);

	return [r * 255, g * 255, b * 255];
};

convert.xyz.lab = function (xyz) {
	let x = xyz[0];
	let y = xyz[1];
	let z = xyz[2];

	x /= 95.047;
	y /= 100;
	z /= 108.883;

	x = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);
	y = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);
	z = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);

	const l = (116 * y) - 16;
	const a = 500 * (x - y);
	const b = 200 * (y - z);

	return [l, a, b];
};

convert.lab.xyz = function (lab) {
	const l = lab[0];
	const a = lab[1];
	const b = lab[2];
	let x;
	let y;
	let z;

	y = (l + 16) / 116;
	x = a / 500 + y;
	z = y - b / 200;

	const y2 = y ** 3;
	const x2 = x ** 3;
	const z2 = z ** 3;
	y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
	x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
	z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;

	x *= 95.047;
	y *= 100;
	z *= 108.883;

	return [x, y, z];
};

convert.lab.lch = function (lab) {
	const l = lab[0];
	const a = lab[1];
	const b = lab[2];
	let h;

	const hr = Math.atan2(b, a);
	h = hr * 360 / 2 / Math.PI;

	if (h < 0) {
		h += 360;
	}

	const c = Math.sqrt(a * a + b * b);

	return [l, c, h];
};

convert.lch.lab = function (lch) {
	const l = lch[0];
	const c = lch[1];
	const h = lch[2];

	const hr = h / 360 * 2 * Math.PI;
	const a = c * Math.cos(hr);
	const b = c * Math.sin(hr);

	return [l, a, b];
};

convert.rgb.ansi16 = function (args, saturation = null) {
	const [r, g, b] = args;
	let value = saturation === null ? convert.rgb.hsv(args)[2] : saturation; // Hsv -> ansi16 optimization

	value = Math.round(value / 50);

	if (value === 0) {
		return 30;
	}

	let ansi = 30
		+ ((Math.round(b / 255) << 2)
		| (Math.round(g / 255) << 1)
		| Math.round(r / 255));

	if (value === 2) {
		ansi += 60;
	}

	return ansi;
};

convert.hsv.ansi16 = function (args) {
	// Optimization here; we already know the value and don't need to get
	// it converted for us.
	return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
};

convert.rgb.ansi256 = function (args) {
	const r = args[0];
	const g = args[1];
	const b = args[2];

	// We use the extended greyscale palette here, with the exception of
	// black and white. normal palette only has 4 greyscale shades.
	if (r === g && g === b) {
		if (r < 8) {
			return 16;
		}

		if (r > 248) {
			return 231;
		}

		return Math.round(((r - 8) / 247) * 24) + 232;
	}

	const ansi = 16
		+ (36 * Math.round(r / 255 * 5))
		+ (6 * Math.round(g / 255 * 5))
		+ Math.round(b / 255 * 5);

	return ansi;
};

convert.ansi16.rgb = function (args) {
	let color = args % 10;

	// Handle greyscale
	if (color === 0 || color === 7) {
		if (args > 50) {
			color += 3.5;
		}

		color = color / 10.5 * 255;

		return [color, color, color];
	}

	const mult = (~~(args > 50) + 1) * 0.5;
	const r = ((color & 1) * mult) * 255;
	const g = (((color >> 1) & 1) * mult) * 255;
	const b = (((color >> 2) & 1) * mult) * 255;

	return [r, g, b];
};

convert.ansi256.rgb = function (args) {
	// Handle greyscale
	if (args >= 232) {
		const c = (args - 232) * 10 + 8;
		return [c, c, c];
	}

	args -= 16;

	let rem;
	const r = Math.floor(args / 36) / 5 * 255;
	const g = Math.floor((rem = args % 36) / 6) / 5 * 255;
	const b = (rem % 6) / 5 * 255;

	return [r, g, b];
};

convert.rgb.hex = function (args) {
	const integer = ((Math.round(args[0]) & 0xFF) << 16)
		+ ((Math.round(args[1]) & 0xFF) << 8)
		+ (Math.round(args[2]) & 0xFF);

	const string = integer.toString(16).toUpperCase();
	return '000000'.substring(string.length) + string;
};

convert.hex.rgb = function (args) {
	const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
	if (!match) {
		return [0, 0, 0];
	}

	let colorString = match[0];

	if (match[0].length === 3) {
		colorString = colorString.split('').map(char => {
			return char + char;
		}).join('');
	}

	const integer = parseInt(colorString, 16);
	const r = (integer >> 16) & 0xFF;
	const g = (integer >> 8) & 0xFF;
	const b = integer & 0xFF;

	return [r, g, b];
};

convert.rgb.hcg = function (rgb) {
	const r = rgb[0] / 255;
	const g = rgb[1] / 255;
	const b = rgb[2] / 255;
	const max = Math.max(Math.max(r, g), b);
	const min = Math.min(Math.min(r, g), b);
	const chroma = (max - min);
	let grayscale;
	let hue;

	if (chroma < 1) {
		grayscale = min / (1 - chroma);
	} else {
		grayscale = 0;
	}

	if (chroma <= 0) {
		hue = 0;
	} else
	if (max === r) {
		hue = ((g - b) / chroma) % 6;
	} else
	if (max === g) {
		hue = 2 + (b - r) / chroma;
	} else {
		hue = 4 + (r - g) / chroma;
	}

	hue /= 6;
	hue %= 1;

	return [hue * 360, chroma * 100, grayscale * 100];
};

convert.hsl.hcg = function (hsl) {
	const s = hsl[1] / 100;
	const l = hsl[2] / 100;

	const c = l < 0.5 ? (2.0 * s * l) : (2.0 * s * (1.0 - l));

	let f = 0;
	if (c < 1.0) {
		f = (l - 0.5 * c) / (1.0 - c);
	}

	return [hsl[0], c * 100, f * 100];
};

convert.hsv.hcg = function (hsv) {
	const s = hsv[1] / 100;
	const v = hsv[2] / 100;

	const c = s * v;
	let f = 0;

	if (c < 1.0) {
		f = (v - c) / (1 - c);
	}

	return [hsv[0], c * 100, f * 100];
};

convert.hcg.rgb = function (hcg) {
	const h = hcg[0] / 360;
	const c = hcg[1] / 100;
	const g = hcg[2] / 100;

	if (c === 0.0) {
		return [g * 255, g * 255, g * 255];
	}

	const pure = [0, 0, 0];
	const hi = (h % 1) * 6;
	const v = hi % 1;
	const w = 1 - v;
	let mg = 0;

	/* eslint-disable max-statements-per-line */
	switch (Math.floor(hi)) {
		case 0:
			pure[0] = 1; pure[1] = v; pure[2] = 0; break;
		case 1:
			pure[0] = w; pure[1] = 1; pure[2] = 0; break;
		case 2:
			pure[0] = 0; pure[1] = 1; pure[2] = v; break;
		case 3:
			pure[0] = 0; pure[1] = w; pure[2] = 1; break;
		case 4:
			pure[0] = v; pure[1] = 0; pure[2] = 1; break;
		default:
			pure[0] = 1; pure[1] = 0; pure[2] = w;
	}
	/* eslint-enable max-statements-per-line */

	mg = (1.0 - c) * g;

	return [
		(c * pure[0] + mg) * 255,
		(c * pure[1] + mg) * 255,
		(c * pure[2] + mg) * 255
	];
};

convert.hcg.hsv = function (hcg) {
	const c = hcg[1] / 100;
	const g = hcg[2] / 100;

	const v = c + g * (1.0 - c);
	let f = 0;

	if (v > 0.0) {
		f = c / v;
	}

	return [hcg[0], f * 100, v * 100];
};

convert.hcg.hsl = function (hcg) {
	const c = hcg[1] / 100;
	const g = hcg[2] / 100;

	const l = g * (1.0 - c) + 0.5 * c;
	let s = 0;

	if (l > 0.0 && l < 0.5) {
		s = c / (2 * l);
	} else
	if (l >= 0.5 && l < 1.0) {
		s = c / (2 * (1 - l));
	}

	return [hcg[0], s * 100, l * 100];
};

convert.hcg.hwb = function (hcg) {
	const c = hcg[1] / 100;
	const g = hcg[2] / 100;
	const v = c + g * (1.0 - c);
	return [hcg[0], (v - c) * 100, (1 - v) * 100];
};

convert.hwb.hcg = function (hwb) {
	const w = hwb[1] / 100;
	const b = hwb[2] / 100;
	const v = 1 - b;
	const c = v - w;
	let g = 0;

	if (c < 1) {
		g = (v - c) / (1 - c);
	}

	return [hwb[0], c * 100, g * 100];
};

convert.apple.rgb = function (apple) {
	return [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];
};

convert.rgb.apple = function (rgb) {
	return [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];
};

convert.gray.rgb = function (args) {
	return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
};

convert.gray.hsl = function (args) {
	return [0, 0, args[0]];
};

convert.gray.hsv = convert.gray.hsl;

convert.gray.hwb = function (gray) {
	return [0, 100, gray[0]];
};

convert.gray.cmyk = function (gray) {
	return [0, 0, 0, gray[0]];
};

convert.gray.lab = function (gray) {
	return [gray[0], 0, 0];
};

convert.gray.hex = function (gray) {
	const val = Math.round(gray[0] / 100 * 255) & 0xFF;
	const integer = (val << 16) + (val << 8) + val;

	const string = integer.toString(16).toUpperCase();
	return '000000'.substring(string.length) + string;
};

convert.rgb.gray = function (rgb) {
	const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
	return [val / 255 * 100];
};


/***/ }),

/***/ 5500:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const conversions = __nccwpck_require__(1740);
const route = __nccwpck_require__(2774);

const convert = {};

const models = Object.keys(conversions);

function wrapRaw(fn) {
	const wrappedFn = function (...args) {
		const arg0 = args[0];
		if (arg0 === undefined || arg0 === null) {
			return arg0;
		}

		if (arg0.length > 1) {
			args = arg0;
		}

		return fn(args);
	};

	// Preserve .conversion property if there is one
	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

function wrapRounded(fn) {
	const wrappedFn = function (...args) {
		const arg0 = args[0];

		if (arg0 === undefined || arg0 === null) {
			return arg0;
		}

		if (arg0.length > 1) {
			args = arg0;
		}

		const result = fn(args);

		// We're assuming the result is an array here.
		// see notice in conversions.js; don't use box types
		// in conversion functions.
		if (typeof result === 'object') {
			for (let len = result.length, i = 0; i < len; i++) {
				result[i] = Math.round(result[i]);
			}
		}

		return result;
	};

	// Preserve .conversion property if there is one
	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

models.forEach(fromModel => {
	convert[fromModel] = {};

	Object.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});
	Object.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});

	const routes = route(fromModel);
	const routeModels = Object.keys(routes);

	routeModels.forEach(toModel => {
		const fn = routes[toModel];

		convert[fromModel][toModel] = wrapRounded(fn);
		convert[fromModel][toModel].raw = wrapRaw(fn);
	});
});

module.exports = convert;


/***/ }),

/***/ 2774:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const conversions = __nccwpck_require__(1740);

/*
	This function routes a model to all other models.

	all functions that are routed have a property `.conversion` attached
	to the returned synthetic function. This property is an array
	of strings, each with the steps in between the 'from' and 'to'
	color models (inclusive).

	conversions that are not possible simply are not included.
*/

function buildGraph() {
	const graph = {};
	// https://jsperf.com/object-keys-vs-for-in-with-closure/3
	const models = Object.keys(conversions);

	for (let len = models.length, i = 0; i < len; i++) {
		graph[models[i]] = {
			// http://jsperf.com/1-vs-infinity
			// micro-opt, but this is simple.
			distance: -1,
			parent: null
		};
	}

	return graph;
}

// https://en.wikipedia.org/wiki/Breadth-first_search
function deriveBFS(fromModel) {
	const graph = buildGraph();
	const queue = [fromModel]; // Unshift -> queue -> pop

	graph[fromModel].distance = 0;

	while (queue.length) {
		const current = queue.pop();
		const adjacents = Object.keys(conversions[current]);

		for (let len = adjacents.length, i = 0; i < len; i++) {
			const adjacent = adjacents[i];
			const node = graph[adjacent];

			if (node.distance === -1) {
				node.distance = graph[current].distance + 1;
				node.parent = current;
				queue.unshift(adjacent);
			}
		}
	}

	return graph;
}

function link(from, to) {
	return function (args) {
		return to(from(args));
	};
}

function wrapConversion(toModel, graph) {
	const path = [graph[toModel].parent, toModel];
	let fn = conversions[graph[toModel].parent][toModel];

	let cur = graph[toModel].parent;
	while (graph[cur].parent) {
		path.unshift(graph[cur].parent);
		fn = link(conversions[graph[cur].parent][cur], fn);
		cur = graph[cur].parent;
	}

	fn.conversion = path;
	return fn;
}

module.exports = function (fromModel) {
	const graph = deriveBFS(fromModel);
	const conversion = {};

	const models = Object.keys(graph);
	for (let len = models.length, i = 0; i < len; i++) {
		const toModel = models[i];
		const node = graph[toModel];

		if (node.parent === null) {
			// No possible conversion, or this node is the source model.
			continue;
		}

		conversion[toModel] = wrapConversion(toModel, graph);
	}

	return conversion;
};



/***/ }),

/***/ 7443:
/***/ ((module) => {



module.exports = {
	"aliceblue": [240, 248, 255],
	"antiquewhite": [250, 235, 215],
	"aqua": [0, 255, 255],
	"aquamarine": [127, 255, 212],
	"azure": [240, 255, 255],
	"beige": [245, 245, 220],
	"bisque": [255, 228, 196],
	"black": [0, 0, 0],
	"blanchedalmond": [255, 235, 205],
	"blue": [0, 0, 255],
	"blueviolet": [138, 43, 226],
	"brown": [165, 42, 42],
	"burlywood": [222, 184, 135],
	"cadetblue": [95, 158, 160],
	"chartreuse": [127, 255, 0],
	"chocolate": [210, 105, 30],
	"coral": [255, 127, 80],
	"cornflowerblue": [100, 149, 237],
	"cornsilk": [255, 248, 220],
	"crimson": [220, 20, 60],
	"cyan": [0, 255, 255],
	"darkblue": [0, 0, 139],
	"darkcyan": [0, 139, 139],
	"darkgoldenrod": [184, 134, 11],
	"darkgray": [169, 169, 169],
	"darkgreen": [0, 100, 0],
	"darkgrey": [169, 169, 169],
	"darkkhaki": [189, 183, 107],
	"darkmagenta": [139, 0, 139],
	"darkolivegreen": [85, 107, 47],
	"darkorange": [255, 140, 0],
	"darkorchid": [153, 50, 204],
	"darkred": [139, 0, 0],
	"darksalmon": [233, 150, 122],
	"darkseagreen": [143, 188, 143],
	"darkslateblue": [72, 61, 139],
	"darkslategray": [47, 79, 79],
	"darkslategrey": [47, 79, 79],
	"darkturquoise": [0, 206, 209],
	"darkviolet": [148, 0, 211],
	"deeppink": [255, 20, 147],
	"deepskyblue": [0, 191, 255],
	"dimgray": [105, 105, 105],
	"dimgrey": [105, 105, 105],
	"dodgerblue": [30, 144, 255],
	"firebrick": [178, 34, 34],
	"floralwhite": [255, 250, 240],
	"forestgreen": [34, 139, 34],
	"fuchsia": [255, 0, 255],
	"gainsboro": [220, 220, 220],
	"ghostwhite": [248, 248, 255],
	"gold": [255, 215, 0],
	"goldenrod": [218, 165, 32],
	"gray": [128, 128, 128],
	"green": [0, 128, 0],
	"greenyellow": [173, 255, 47],
	"grey": [128, 128, 128],
	"honeydew": [240, 255, 240],
	"hotpink": [255, 105, 180],
	"indianred": [205, 92, 92],
	"indigo": [75, 0, 130],
	"ivory": [255, 255, 240],
	"khaki": [240, 230, 140],
	"lavender": [230, 230, 250],
	"lavenderblush": [255, 240, 245],
	"lawngreen": [124, 252, 0],
	"lemonchiffon": [255, 250, 205],
	"lightblue": [173, 216, 230],
	"lightcoral": [240, 128, 128],
	"lightcyan": [224, 255, 255],
	"lightgoldenrodyellow": [250, 250, 210],
	"lightgray": [211, 211, 211],
	"lightgreen": [144, 238, 144],
	"lightgrey": [211, 211, 211],
	"lightpink": [255, 182, 193],
	"lightsalmon": [255, 160, 122],
	"lightseagreen": [32, 178, 170],
	"lightskyblue": [135, 206, 250],
	"lightslategray": [119, 136, 153],
	"lightslategrey": [119, 136, 153],
	"lightsteelblue": [176, 196, 222],
	"lightyellow": [255, 255, 224],
	"lime": [0, 255, 0],
	"limegreen": [50, 205, 50],
	"linen": [250, 240, 230],
	"magenta": [255, 0, 255],
	"maroon": [128, 0, 0],
	"mediumaquamarine": [102, 205, 170],
	"mediumblue": [0, 0, 205],
	"mediumorchid": [186, 85, 211],
	"mediumpurple": [147, 112, 219],
	"mediumseagreen": [60, 179, 113],
	"mediumslateblue": [123, 104, 238],
	"mediumspringgreen": [0, 250, 154],
	"mediumturquoise": [72, 209, 204],
	"mediumvioletred": [199, 21, 133],
	"midnightblue": [25, 25, 112],
	"mintcream": [245, 255, 250],
	"mistyrose": [255, 228, 225],
	"moccasin": [255, 228, 181],
	"navajowhite": [255, 222, 173],
	"navy": [0, 0, 128],
	"oldlace": [253, 245, 230],
	"olive": [128, 128, 0],
	"olivedrab": [107, 142, 35],
	"orange": [255, 165, 0],
	"orangered": [255, 69, 0],
	"orchid": [218, 112, 214],
	"palegoldenrod": [238, 232, 170],
	"palegreen": [152, 251, 152],
	"paleturquoise": [175, 238, 238],
	"palevioletred": [219, 112, 147],
	"papayawhip": [255, 239, 213],
	"peachpuff": [255, 218, 185],
	"peru": [205, 133, 63],
	"pink": [255, 192, 203],
	"plum": [221, 160, 221],
	"powderblue": [176, 224, 230],
	"purple": [128, 0, 128],
	"rebeccapurple": [102, 51, 153],
	"red": [255, 0, 0],
	"rosybrown": [188, 143, 143],
	"royalblue": [65, 105, 225],
	"saddlebrown": [139, 69, 19],
	"salmon": [250, 128, 114],
	"sandybrown": [244, 164, 96],
	"seagreen": [46, 139, 87],
	"seashell": [255, 245, 238],
	"sienna": [160, 82, 45],
	"silver": [192, 192, 192],
	"skyblue": [135, 206, 235],
	"slateblue": [106, 90, 205],
	"slategray": [112, 128, 144],
	"slategrey": [112, 128, 144],
	"snow": [255, 250, 250],
	"springgreen": [0, 255, 127],
	"steelblue": [70, 130, 180],
	"tan": [210, 180, 140],
	"teal": [0, 128, 128],
	"thistle": [216, 191, 216],
	"tomato": [255, 99, 71],
	"turquoise": [64, 224, 208],
	"violet": [238, 130, 238],
	"wheat": [245, 222, 179],
	"white": [255, 255, 255],
	"whitesmoke": [245, 245, 245],
	"yellow": [255, 255, 0],
	"yellowgreen": [154, 205, 50]
};


/***/ }),

/***/ 3114:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

/* MIT license */
var colorNames = __nccwpck_require__(7443);
var swizzle = __nccwpck_require__(7562);
var hasOwnProperty = Object.hasOwnProperty;

var reverseNames = Object.create(null);

// create a list of reverse color names
for (var name in colorNames) {
	if (hasOwnProperty.call(colorNames, name)) {
		reverseNames[colorNames[name]] = name;
	}
}

var cs = module.exports = {
	to: {},
	get: {}
};

cs.get = function (string) {
	var prefix = string.substring(0, 3).toLowerCase();
	var val;
	var model;
	switch (prefix) {
		case 'hsl':
			val = cs.get.hsl(string);
			model = 'hsl';
			break;
		case 'hwb':
			val = cs.get.hwb(string);
			model = 'hwb';
			break;
		default:
			val = cs.get.rgb(string);
			model = 'rgb';
			break;
	}

	if (!val) {
		return null;
	}

	return {model: model, value: val};
};

cs.get.rgb = function (string) {
	if (!string) {
		return null;
	}

	var abbr = /^#([a-f0-9]{3,4})$/i;
	var hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;
	var rgba = /^rgba?\(\s*([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/;
	var per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/;
	var keyword = /^(\w+)$/;

	var rgb = [0, 0, 0, 1];
	var match;
	var i;
	var hexAlpha;

	if (match = string.match(hex)) {
		hexAlpha = match[2];
		match = match[1];

		for (i = 0; i < 3; i++) {
			// https://jsperf.com/slice-vs-substr-vs-substring-methods-long-string/19
			var i2 = i * 2;
			rgb[i] = parseInt(match.slice(i2, i2 + 2), 16);
		}

		if (hexAlpha) {
			rgb[3] = parseInt(hexAlpha, 16) / 255;
		}
	} else if (match = string.match(abbr)) {
		match = match[1];
		hexAlpha = match[3];

		for (i = 0; i < 3; i++) {
			rgb[i] = parseInt(match[i] + match[i], 16);
		}

		if (hexAlpha) {
			rgb[3] = parseInt(hexAlpha + hexAlpha, 16) / 255;
		}
	} else if (match = string.match(rgba)) {
		for (i = 0; i < 3; i++) {
			rgb[i] = parseInt(match[i + 1], 0);
		}

		if (match[4]) {
			if (match[5]) {
				rgb[3] = parseFloat(match[4]) * 0.01;
			} else {
				rgb[3] = parseFloat(match[4]);
			}
		}
	} else if (match = string.match(per)) {
		for (i = 0; i < 3; i++) {
			rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
		}

		if (match[4]) {
			if (match[5]) {
				rgb[3] = parseFloat(match[4]) * 0.01;
			} else {
				rgb[3] = parseFloat(match[4]);
			}
		}
	} else if (match = string.match(keyword)) {
		if (match[1] === 'transparent') {
			return [0, 0, 0, 0];
		}

		if (!hasOwnProperty.call(colorNames, match[1])) {
			return null;
		}

		rgb = colorNames[match[1]];
		rgb[3] = 1;

		return rgb;
	} else {
		return null;
	}

	for (i = 0; i < 3; i++) {
		rgb[i] = clamp(rgb[i], 0, 255);
	}
	rgb[3] = clamp(rgb[3], 0, 1);

	return rgb;
};

cs.get.hsl = function (string) {
	if (!string) {
		return null;
	}

	var hsl = /^hsla?\(\s*([+-]?(?:\d{0,3}\.)?\d+)(?:deg)?\s*,?\s*([+-]?[\d\.]+)%\s*,?\s*([+-]?[\d\.]+)%\s*(?:[,|\/]\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/;
	var match = string.match(hsl);

	if (match) {
		var alpha = parseFloat(match[4]);
		var h = ((parseFloat(match[1]) % 360) + 360) % 360;
		var s = clamp(parseFloat(match[2]), 0, 100);
		var l = clamp(parseFloat(match[3]), 0, 100);
		var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);

		return [h, s, l, a];
	}

	return null;
};

cs.get.hwb = function (string) {
	if (!string) {
		return null;
	}

	var hwb = /^hwb\(\s*([+-]?\d{0,3}(?:\.\d+)?)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/;
	var match = string.match(hwb);

	if (match) {
		var alpha = parseFloat(match[4]);
		var h = ((parseFloat(match[1]) % 360) + 360) % 360;
		var w = clamp(parseFloat(match[2]), 0, 100);
		var b = clamp(parseFloat(match[3]), 0, 100);
		var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
		return [h, w, b, a];
	}

	return null;
};

cs.to.hex = function () {
	var rgba = swizzle(arguments);

	return (
		'#' +
		hexDouble(rgba[0]) +
		hexDouble(rgba[1]) +
		hexDouble(rgba[2]) +
		(rgba[3] < 1
			? (hexDouble(Math.round(rgba[3] * 255)))
			: '')
	);
};

cs.to.rgb = function () {
	var rgba = swizzle(arguments);

	return rgba.length < 4 || rgba[3] === 1
		? 'rgb(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ')'
		: 'rgba(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ', ' + rgba[3] + ')';
};

cs.to.rgb.percent = function () {
	var rgba = swizzle(arguments);

	var r = Math.round(rgba[0] / 255 * 100);
	var g = Math.round(rgba[1] / 255 * 100);
	var b = Math.round(rgba[2] / 255 * 100);

	return rgba.length < 4 || rgba[3] === 1
		? 'rgb(' + r + '%, ' + g + '%, ' + b + '%)'
		: 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + rgba[3] + ')';
};

cs.to.hsl = function () {
	var hsla = swizzle(arguments);
	return hsla.length < 4 || hsla[3] === 1
		? 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)'
		: 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + hsla[3] + ')';
};

// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax
// (hwb have alpha optional & 1 is default value)
cs.to.hwb = function () {
	var hwba = swizzle(arguments);

	var a = '';
	if (hwba.length >= 4 && hwba[3] !== 1) {
		a = ', ' + hwba[3];
	}

	return 'hwb(' + hwba[0] + ', ' + hwba[1] + '%, ' + hwba[2] + '%' + a + ')';
};

cs.to.keyword = function (rgb) {
	return reverseNames[rgb.slice(0, 3)];
};

// helpers
function clamp(num, min, max) {
	return Math.min(Math.max(min, num), max);
}

function hexDouble(num) {
	var str = Math.round(num).toString(16).toUpperCase();
	return (str.length < 2) ? '0' + str : str;
}


/***/ }),

/***/ 618:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const colorString = __nccwpck_require__(3114);
const convert = __nccwpck_require__(5500);

const skippedModels = [
	// To be honest, I don't really feel like keyword belongs in color convert, but eh.
	'keyword',

	// Gray conflicts with some method names, and has its own method defined.
	'gray',

	// Shouldn't really be in color-convert either...
	'hex',
];

const hashedModelKeys = {};
for (const model of Object.keys(convert)) {
	hashedModelKeys[[...convert[model].labels].sort().join('')] = model;
}

const limiters = {};

function Color(object, model) {
	if (!(this instanceof Color)) {
		return new Color(object, model);
	}

	if (model && model in skippedModels) {
		model = null;
	}

	if (model && !(model in convert)) {
		throw new Error('Unknown model: ' + model);
	}

	let i;
	let channels;

	if (object == null) { // eslint-disable-line no-eq-null,eqeqeq
		this.model = 'rgb';
		this.color = [0, 0, 0];
		this.valpha = 1;
	} else if (object instanceof Color) {
		this.model = object.model;
		this.color = [...object.color];
		this.valpha = object.valpha;
	} else if (typeof object === 'string') {
		const result = colorString.get(object);
		if (result === null) {
			throw new Error('Unable to parse color from string: ' + object);
		}

		this.model = result.model;
		channels = convert[this.model].channels;
		this.color = result.value.slice(0, channels);
		this.valpha = typeof result.value[channels] === 'number' ? result.value[channels] : 1;
	} else if (object.length > 0) {
		this.model = model || 'rgb';
		channels = convert[this.model].channels;
		const newArray = Array.prototype.slice.call(object, 0, channels);
		this.color = zeroArray(newArray, channels);
		this.valpha = typeof object[channels] === 'number' ? object[channels] : 1;
	} else if (typeof object === 'number') {
		// This is always RGB - can be converted later on.
		this.model = 'rgb';
		this.color = [
			(object >> 16) & 0xFF,
			(object >> 8) & 0xFF,
			object & 0xFF,
		];
		this.valpha = 1;
	} else {
		this.valpha = 1;

		const keys = Object.keys(object);
		if ('alpha' in object) {
			keys.splice(keys.indexOf('alpha'), 1);
			this.valpha = typeof object.alpha === 'number' ? object.alpha : 0;
		}

		const hashedKeys = keys.sort().join('');
		if (!(hashedKeys in hashedModelKeys)) {
			throw new Error('Unable to parse color from object: ' + JSON.stringify(object));
		}

		this.model = hashedModelKeys[hashedKeys];

		const {labels} = convert[this.model];
		const color = [];
		for (i = 0; i < labels.length; i++) {
			color.push(object[labels[i]]);
		}

		this.color = zeroArray(color);
	}

	// Perform limitations (clamping, etc.)
	if (limiters[this.model]) {
		channels = convert[this.model].channels;
		for (i = 0; i < channels; i++) {
			const limit = limiters[this.model][i];
			if (limit) {
				this.color[i] = limit(this.color[i]);
			}
		}
	}

	this.valpha = Math.max(0, Math.min(1, this.valpha));

	if (Object.freeze) {
		Object.freeze(this);
	}
}

Color.prototype = {
	toString() {
		return this.string();
	},

	toJSON() {
		return this[this.model]();
	},

	string(places) {
		let self = this.model in colorString.to ? this : this.rgb();
		self = self.round(typeof places === 'number' ? places : 1);
		const args = self.valpha === 1 ? self.color : [...self.color, this.valpha];
		return colorString.to[self.model](args);
	},

	percentString(places) {
		const self = this.rgb().round(typeof places === 'number' ? places : 1);
		const args = self.valpha === 1 ? self.color : [...self.color, this.valpha];
		return colorString.to.rgb.percent(args);
	},

	array() {
		return this.valpha === 1 ? [...this.color] : [...this.color, this.valpha];
	},

	object() {
		const result = {};
		const {channels} = convert[this.model];
		const {labels} = convert[this.model];

		for (let i = 0; i < channels; i++) {
			result[labels[i]] = this.color[i];
		}

		if (this.valpha !== 1) {
			result.alpha = this.valpha;
		}

		return result;
	},

	unitArray() {
		const rgb = this.rgb().color;
		rgb[0] /= 255;
		rgb[1] /= 255;
		rgb[2] /= 255;

		if (this.valpha !== 1) {
			rgb.push(this.valpha);
		}

		return rgb;
	},

	unitObject() {
		const rgb = this.rgb().object();
		rgb.r /= 255;
		rgb.g /= 255;
		rgb.b /= 255;

		if (this.valpha !== 1) {
			rgb.alpha = this.valpha;
		}

		return rgb;
	},

	round(places) {
		places = Math.max(places || 0, 0);
		return new Color([...this.color.map(roundToPlace(places)), this.valpha], this.model);
	},

	alpha(value) {
		if (value !== undefined) {
			return new Color([...this.color, Math.max(0, Math.min(1, value))], this.model);
		}

		return this.valpha;
	},

	// Rgb
	red: getset('rgb', 0, maxfn(255)),
	green: getset('rgb', 1, maxfn(255)),
	blue: getset('rgb', 2, maxfn(255)),

	hue: getset(['hsl', 'hsv', 'hsl', 'hwb', 'hcg'], 0, value => ((value % 360) + 360) % 360),

	saturationl: getset('hsl', 1, maxfn(100)),
	lightness: getset('hsl', 2, maxfn(100)),

	saturationv: getset('hsv', 1, maxfn(100)),
	value: getset('hsv', 2, maxfn(100)),

	chroma: getset('hcg', 1, maxfn(100)),
	gray: getset('hcg', 2, maxfn(100)),

	white: getset('hwb', 1, maxfn(100)),
	wblack: getset('hwb', 2, maxfn(100)),

	cyan: getset('cmyk', 0, maxfn(100)),
	magenta: getset('cmyk', 1, maxfn(100)),
	yellow: getset('cmyk', 2, maxfn(100)),
	black: getset('cmyk', 3, maxfn(100)),

	x: getset('xyz', 0, maxfn(95.047)),
	y: getset('xyz', 1, maxfn(100)),
	z: getset('xyz', 2, maxfn(108.833)),

	l: getset('lab', 0, maxfn(100)),
	a: getset('lab', 1),
	b: getset('lab', 2),

	keyword(value) {
		if (value !== undefined) {
			return new Color(value);
		}

		return convert[this.model].keyword(this.color);
	},

	hex(value) {
		if (value !== undefined) {
			return new Color(value);
		}

		return colorString.to.hex(this.rgb().round().color);
	},

	hexa(value) {
		if (value !== undefined) {
			return new Color(value);
		}

		const rgbArray = this.rgb().round().color;

		let alphaHex = Math.round(this.valpha * 255).toString(16).toUpperCase();
		if (alphaHex.length === 1) {
			alphaHex = '0' + alphaHex;
		}

		return colorString.to.hex(rgbArray) + alphaHex;
	},

	rgbNumber() {
		const rgb = this.rgb().color;
		return ((rgb[0] & 0xFF) << 16) | ((rgb[1] & 0xFF) << 8) | (rgb[2] & 0xFF);
	},

	luminosity() {
		// http://www.w3.org/TR/WCAG20/#relativeluminancedef
		const rgb = this.rgb().color;

		const lum = [];
		for (const [i, element] of rgb.entries()) {
			const chan = element / 255;
			lum[i] = (chan <= 0.04045) ? chan / 12.92 : ((chan + 0.055) / 1.055) ** 2.4;
		}

		return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
	},

	contrast(color2) {
		// http://www.w3.org/TR/WCAG20/#contrast-ratiodef
		const lum1 = this.luminosity();
		const lum2 = color2.luminosity();

		if (lum1 > lum2) {
			return (lum1 + 0.05) / (lum2 + 0.05);
		}

		return (lum2 + 0.05) / (lum1 + 0.05);
	},

	level(color2) {
		// https://www.w3.org/TR/WCAG/#contrast-enhanced
		const contrastRatio = this.contrast(color2);
		if (contrastRatio >= 7) {
			return 'AAA';
		}

		return (contrastRatio >= 4.5) ? 'AA' : '';
	},

	isDark() {
		// YIQ equation from http://24ways.org/2010/calculating-color-contrast
		const rgb = this.rgb().color;
		const yiq = (rgb[0] * 2126 + rgb[1] * 7152 + rgb[2] * 722) / 10000;
		return yiq < 128;
	},

	isLight() {
		return !this.isDark();
	},

	negate() {
		const rgb = this.rgb();
		for (let i = 0; i < 3; i++) {
			rgb.color[i] = 255 - rgb.color[i];
		}

		return rgb;
	},

	lighten(ratio) {
		const hsl = this.hsl();
		hsl.color[2] += hsl.color[2] * ratio;
		return hsl;
	},

	darken(ratio) {
		const hsl = this.hsl();
		hsl.color[2] -= hsl.color[2] * ratio;
		return hsl;
	},

	saturate(ratio) {
		const hsl = this.hsl();
		hsl.color[1] += hsl.color[1] * ratio;
		return hsl;
	},

	desaturate(ratio) {
		const hsl = this.hsl();
		hsl.color[1] -= hsl.color[1] * ratio;
		return hsl;
	},

	whiten(ratio) {
		const hwb = this.hwb();
		hwb.color[1] += hwb.color[1] * ratio;
		return hwb;
	},

	blacken(ratio) {
		const hwb = this.hwb();
		hwb.color[2] += hwb.color[2] * ratio;
		return hwb;
	},

	grayscale() {
		// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale
		const rgb = this.rgb().color;
		const value = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
		return Color.rgb(value, value, value);
	},

	fade(ratio) {
		return this.alpha(this.valpha - (this.valpha * ratio));
	},

	opaquer(ratio) {
		return this.alpha(this.valpha + (this.valpha * ratio));
	},

	rotate(degrees) {
		const hsl = this.hsl();
		let hue = hsl.color[0];
		hue = (hue + degrees) % 360;
		hue = hue < 0 ? 360 + hue : hue;
		hsl.color[0] = hue;
		return hsl;
	},

	mix(mixinColor, weight) {
		// Ported from sass implementation in C
		// https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209
		if (!mixinColor || !mixinColor.rgb) {
			throw new Error('Argument to "mix" was not a Color instance, but rather an instance of ' + typeof mixinColor);
		}

		const color1 = mixinColor.rgb();
		const color2 = this.rgb();
		const p = weight === undefined ? 0.5 : weight;

		const w = 2 * p - 1;
		const a = color1.alpha() - color2.alpha();

		const w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2;
		const w2 = 1 - w1;

		return Color.rgb(
			w1 * color1.red() + w2 * color2.red(),
			w1 * color1.green() + w2 * color2.green(),
			w1 * color1.blue() + w2 * color2.blue(),
			color1.alpha() * p + color2.alpha() * (1 - p));
	},
};

// Model conversion methods and static constructors
for (const model of Object.keys(convert)) {
	if (skippedModels.includes(model)) {
		continue;
	}

	const {channels} = convert[model];

	// Conversion methods
	Color.prototype[model] = function (...args) {
		if (this.model === model) {
			return new Color(this);
		}

		if (args.length > 0) {
			return new Color(args, model);
		}

		return new Color([...assertArray(convert[this.model][model].raw(this.color)), this.valpha], model);
	};

	// 'static' construction methods
	Color[model] = function (...args) {
		let color = args[0];
		if (typeof color === 'number') {
			color = zeroArray(args, channels);
		}

		return new Color(color, model);
	};
}

function roundTo(number, places) {
	return Number(number.toFixed(places));
}

function roundToPlace(places) {
	return function (number) {
		return roundTo(number, places);
	};
}

function getset(model, channel, modifier) {
	model = Array.isArray(model) ? model : [model];

	for (const m of model) {
		(limiters[m] || (limiters[m] = []))[channel] = modifier;
	}

	model = model[0];

	return function (value) {
		let result;

		if (value !== undefined) {
			if (modifier) {
				value = modifier(value);
			}

			result = this[model]();
			result.color[channel] = value;
			return result;
		}

		result = this[model]().color[channel];
		if (modifier) {
			result = modifier(result);
		}

		return result;
	};
}

function maxfn(max) {
	return function (v) {
		return Math.max(0, Math.min(max, v));
	};
}

function assertArray(value) {
	return Array.isArray(value) ? value : [value];
}

function zeroArray(array, length) {
	for (let i = 0; i < length; i++) {
		if (typeof array[i] !== 'number') {
			array[i] = 0;
		}
	}

	return array;
}

module.exports = Color;


/***/ }),

/***/ 5127:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var util = __nccwpck_require__(3837);
var Stream = (__nccwpck_require__(2781).Stream);
var DelayedStream = __nccwpck_require__(4752);

module.exports = CombinedStream;
function CombinedStream() {
  this.writable = false;
  this.readable = true;
  this.dataSize = 0;
  this.maxDataSize = 2 * 1024 * 1024;
  this.pauseStreams = true;

  this._released = false;
  this._streams = [];
  this._currentStream = null;
  this._insideLoop = false;
  this._pendingNext = false;
}
util.inherits(CombinedStream, Stream);

CombinedStream.create = function(options) {
  var combinedStream = new this();

  options = options || {};
  for (var option in options) {
    combinedStream[option] = options[option];
  }

  return combinedStream;
};

CombinedStream.isStreamLike = function(stream) {
  return (typeof stream !== 'function')
    && (typeof stream !== 'string')
    && (typeof stream !== 'boolean')
    && (typeof stream !== 'number')
    && (!Buffer.isBuffer(stream));
};

CombinedStream.prototype.append = function(stream) {
  var isStreamLike = CombinedStream.isStreamLike(stream);

  if (isStreamLike) {
    if (!(stream instanceof DelayedStream)) {
      var newStream = DelayedStream.create(stream, {
        maxDataSize: Infinity,
        pauseStream: this.pauseStreams,
      });
      stream.on('data', this._checkDataSize.bind(this));
      stream = newStream;
    }

    this._handleErrors(stream);

    if (this.pauseStreams) {
      stream.pause();
    }
  }

  this._streams.push(stream);
  return this;
};

CombinedStream.prototype.pipe = function(dest, options) {
  Stream.prototype.pipe.call(this, dest, options);
  this.resume();
  return dest;
};

CombinedStream.prototype._getNext = function() {
  this._currentStream = null;

  if (this._insideLoop) {
    this._pendingNext = true;
    return; // defer call
  }

  this._insideLoop = true;
  try {
    do {
      this._pendingNext = false;
      this._realGetNext();
    } while (this._pendingNext);
  } finally {
    this._insideLoop = false;
  }
};

CombinedStream.prototype._realGetNext = function() {
  var stream = this._streams.shift();


  if (typeof stream == 'undefined') {
    this.end();
    return;
  }

  if (typeof stream !== 'function') {
    this._pipeNext(stream);
    return;
  }

  var getStream = stream;
  getStream(function(stream) {
    var isStreamLike = CombinedStream.isStreamLike(stream);
    if (isStreamLike) {
      stream.on('data', this._checkDataSize.bind(this));
      this._handleErrors(stream);
    }

    this._pipeNext(stream);
  }.bind(this));
};

CombinedStream.prototype._pipeNext = function(stream) {
  this._currentStream = stream;

  var isStreamLike = CombinedStream.isStreamLike(stream);
  if (isStreamLike) {
    stream.on('end', this._getNext.bind(this));
    stream.pipe(this, {end: false});
    return;
  }

  var value = stream;
  this.write(value);
  this._getNext();
};

CombinedStream.prototype._handleErrors = function(stream) {
  var self = this;
  stream.on('error', function(err) {
    self._emitError(err);
  });
};

CombinedStream.prototype.write = function(data) {
  this.emit('data', data);
};

CombinedStream.prototype.pause = function() {
  if (!this.pauseStreams) {
    return;
  }

  if(this.pauseStreams && this._currentStream && typeof(this._currentStream.pause) == 'function') this._currentStream.pause();
  this.emit('pause');
};

CombinedStream.prototype.resume = function() {
  if (!this._released) {
    this._released = true;
    this.writable = true;
    this._getNext();
  }

  if(this.pauseStreams && this._currentStream && typeof(this._currentStream.resume) == 'function') this._currentStream.resume();
  this.emit('resume');
};

CombinedStream.prototype.end = function() {
  this._reset();
  this.emit('end');
};

CombinedStream.prototype.destroy = function() {
  this._reset();
  this.emit('close');
};

CombinedStream.prototype._reset = function() {
  this.writable = false;
  this._streams = [];
  this._currentStream = null;
};

CombinedStream.prototype._checkDataSize = function() {
  this._updateDataSize();
  if (this.dataSize <= this.maxDataSize) {
    return;
  }

  var message =
    'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';
  this._emitError(new Error(message));
};

CombinedStream.prototype._updateDataSize = function() {
  this.dataSize = 0;

  var self = this;
  this._streams.forEach(function(stream) {
    if (!stream.dataSize) {
      return;
    }

    self.dataSize += stream.dataSize;
  });

  if (this._currentStream && this._currentStream.dataSize) {
    this.dataSize += this._currentStream.dataSize;
  }
};

CombinedStream.prototype._emitError = function(err) {
  this._reset();
  this.emit('error', err);
};


/***/ }),

/***/ 4752:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var Stream = (__nccwpck_require__(2781).Stream);
var util = __nccwpck_require__(3837);

module.exports = DelayedStream;
function DelayedStream() {
  this.source = null;
  this.dataSize = 0;
  this.maxDataSize = 1024 * 1024;
  this.pauseStream = true;

  this._maxDataSizeExceeded = false;
  this._released = false;
  this._bufferedEvents = [];
}
util.inherits(DelayedStream, Stream);

DelayedStream.create = function(source, options) {
  var delayedStream = new this();

  options = options || {};
  for (var option in options) {
    delayedStream[option] = options[option];
  }

  delayedStream.source = source;

  var realEmit = source.emit;
  source.emit = function() {
    delayedStream._handleEmit(arguments);
    return realEmit.apply(source, arguments);
  };

  source.on('error', function() {});
  if (delayedStream.pauseStream) {
    source.pause();
  }

  return delayedStream;
};

Object.defineProperty(DelayedStream.prototype, 'readable', {
  configurable: true,
  enumerable: true,
  get: function() {
    return this.source.readable;
  }
});

DelayedStream.prototype.setEncoding = function() {
  return this.source.setEncoding.apply(this.source, arguments);
};

DelayedStream.prototype.resume = function() {
  if (!this._released) {
    this.release();
  }

  this.source.resume();
};

DelayedStream.prototype.pause = function() {
  this.source.pause();
};

DelayedStream.prototype.release = function() {
  this._released = true;

  this._bufferedEvents.forEach(function(args) {
    this.emit.apply(this, args);
  }.bind(this));
  this._bufferedEvents = [];
};

DelayedStream.prototype.pipe = function() {
  var r = Stream.prototype.pipe.apply(this, arguments);
  this.resume();
  return r;
};

DelayedStream.prototype._handleEmit = function(args) {
  if (this._released) {
    this.emit.apply(this, args);
    return;
  }

  if (args[0] === 'data') {
    this.dataSize += args[1].length;
    this._checkIfMaxDataSizeExceeded();
  }

  this._bufferedEvents.push(args);
};

DelayedStream.prototype._checkIfMaxDataSizeExceeded = function() {
  if (this._maxDataSizeExceeded) {
    return;
  }

  if (this.dataSize <= this.maxDataSize) {
    return;
  }

  this._maxDataSizeExceeded = true;
  var message =
    'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.'
  this.emit('error', new Error(message));
};


/***/ }),

/***/ 1149:
/***/ ((module) => {

module.exports = () => {
	// https://mths.be/emoji
	return /[#*0-9]\uFE0F?\u20E3|[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23ED-\u23EF\u23F1\u23F2\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB\u25FC\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692\u2694-\u2697\u2699\u269B\u269C\u26A0\u26A7\u26AA\u26B0\u26B1\u26BD\u26BE\u26C4\u26C8\u26CF\u26D1\u26D3\u26E9\u26F0-\u26F5\u26F7\u26F8\u26FA\u2702\u2708\u2709\u270F\u2712\u2714\u2716\u271D\u2721\u2733\u2734\u2744\u2747\u2757\u2763\u27A1\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B55\u3030\u303D\u3297\u3299]\uFE0F?|[\u261D\u270C\u270D](?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?|[\u270A\u270B](?:\uD83C[\uDFFB-\uDFFF])?|[\u23E9-\u23EC\u23F0\u23F3\u25FD\u2693\u26A1\u26AB\u26C5\u26CE\u26D4\u26EA\u26FD\u2705\u2728\u274C\u274E\u2753-\u2755\u2795-\u2797\u27B0\u27BF\u2B50]|\u26F9(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|\u2764\uFE0F?(?:\u200D(?:\uD83D\uDD25|\uD83E\uDE79))?|\uD83C(?:[\uDC04\uDD70\uDD71\uDD7E\uDD7F\uDE02\uDE37\uDF21\uDF24-\uDF2C\uDF36\uDF7D\uDF96\uDF97\uDF99-\uDF9B\uDF9E\uDF9F\uDFCD\uDFCE\uDFD4-\uDFDF\uDFF5\uDFF7]\uFE0F?|[\uDF85\uDFC2\uDFC7](?:\uD83C[\uDFFB-\uDFFF])?|[\uDFC3\uDFC4\uDFCA](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDFCB\uDFCC](?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDCCF\uDD8E\uDD91-\uDD9A\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF84\uDF86-\uDF93\uDFA0-\uDFC1\uDFC5\uDFC6\uDFC8\uDFC9\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF8-\uDFFF]|\uDDE6\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF]|\uDDE7\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF]|\uDDE8\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF]|\uDDE9\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF]|\uDDEA\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA]|\uDDEB\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7]|\uDDEC\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE]|\uDDED\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA]|\uDDEE\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9]|\uDDEF\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5]|\uDDF0\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF]|\uDDF1\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE]|\uDDF2\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF]|\uDDF3\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF]|\uDDF4\uD83C\uDDF2|\uDDF5\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE]|\uDDF6\uD83C\uDDE6|\uDDF7\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC]|\uDDF8\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF]|\uDDF9\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF]|\uDDFA\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF]|\uDDFB\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA]|\uDDFC\uD83C[\uDDEB\uDDF8]|\uDDFD\uD83C\uDDF0|\uDDFE\uD83C[\uDDEA\uDDF9]|\uDDFF\uD83C[\uDDE6\uDDF2\uDDFC]|\uDFF3\uFE0F?(?:\u200D(?:\u26A7\uFE0F?|\uD83C\uDF08))?|\uDFF4(?:\u200D\u2620\uFE0F?|\uDB40\uDC67\uDB40\uDC62\uDB40(?:\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDC73\uDB40\uDC63\uDB40\uDC74|\uDC77\uDB40\uDC6C\uDB40\uDC73)\uDB40\uDC7F)?)|\uD83D(?:[\uDC08\uDC26](?:\u200D\u2B1B)?|[\uDC3F\uDCFD\uDD49\uDD4A\uDD6F\uDD70\uDD73\uDD76-\uDD79\uDD87\uDD8A-\uDD8D\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA\uDECB\uDECD-\uDECF\uDEE0-\uDEE5\uDEE9\uDEF0\uDEF3]\uFE0F?|[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC](?:\uD83C[\uDFFB-\uDFFF])?|[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDD74\uDD90](?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?|[\uDC00-\uDC07\uDC09-\uDC14\uDC16-\uDC25\uDC27-\uDC3A\uDC3C-\uDC3E\uDC40\uDC44\uDC45\uDC51-\uDC65\uDC6A\uDC79-\uDC7B\uDC7D-\uDC80\uDC84\uDC88-\uDC8E\uDC90\uDC92-\uDCA9\uDCAB-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDDA4\uDDFB-\uDE2D\uDE2F-\uDE34\uDE37-\uDE44\uDE48-\uDE4A\uDE80-\uDEA2\uDEA4-\uDEB3\uDEB7-\uDEBF\uDEC1-\uDEC5\uDED0-\uDED2\uDED5-\uDED7\uDEDC-\uDEDF\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB\uDFF0]|\uDC15(?:\u200D\uD83E\uDDBA)?|\uDC3B(?:\u200D\u2744\uFE0F?)?|\uDC41\uFE0F?(?:\u200D\uD83D\uDDE8\uFE0F?)?|\uDC68(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D(?:[\uDC68\uDC69]\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFC-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFD-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFD\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFE])))?))?|\uDC69(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?[\uDC68\uDC69]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D(?:[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?|\uDC69\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?))|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFC-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB\uDFFD-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB-\uDFFD\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB-\uDFFE])))?))?|\uDC6F(?:\u200D[\u2640\u2642]\uFE0F?)?|\uDD75(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|\uDE2E(?:\u200D\uD83D\uDCA8)?|\uDE35(?:\u200D\uD83D\uDCAB)?|\uDE36(?:\u200D\uD83C\uDF2B\uFE0F?)?)|\uD83E(?:[\uDD0C\uDD0F\uDD18-\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5\uDEC3-\uDEC5\uDEF0\uDEF2-\uDEF8](?:\uD83C[\uDFFB-\uDFFF])?|[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDDDE\uDDDF](?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDD0D\uDD0E\uDD10-\uDD17\uDD20-\uDD25\uDD27-\uDD2F\uDD3A\uDD3F-\uDD45\uDD47-\uDD76\uDD78-\uDDB4\uDDB7\uDDBA\uDDBC-\uDDCC\uDDD0\uDDE0-\uDDFF\uDE70-\uDE7C\uDE80-\uDE88\uDE90-\uDEBD\uDEBF-\uDEC2\uDECE-\uDEDB\uDEE0-\uDEE8]|\uDD3C(?:\u200D[\u2640\u2642]\uFE0F?|\uD83C[\uDFFB-\uDFFF])?|\uDDD1(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83E\uDDD1))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFC-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB\uDFFD-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB-\uDFFD\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB-\uDFFE]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?))?|\uDEF1(?:\uD83C(?:\uDFFB(?:\u200D\uD83E\uDEF2\uD83C[\uDFFC-\uDFFF])?|\uDFFC(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB\uDFFD-\uDFFF])?|\uDFFD(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])?|\uDFFE(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB-\uDFFD\uDFFF])?|\uDFFF(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB-\uDFFE])?))?)/g;
};


/***/ }),

/***/ 3998:
/***/ ((module) => {



var hasOwn = Object.prototype.hasOwnProperty;
var toStr = Object.prototype.toString;
var defineProperty = Object.defineProperty;
var gOPD = Object.getOwnPropertyDescriptor;

var isArray = function isArray(arr) {
	if (typeof Array.isArray === 'function') {
		return Array.isArray(arr);
	}

	return toStr.call(arr) === '[object Array]';
};

var isPlainObject = function isPlainObject(obj) {
	if (!obj || toStr.call(obj) !== '[object Object]') {
		return false;
	}

	var hasOwnConstructor = hasOwn.call(obj, 'constructor');
	var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
	// Not own constructor property must be Object
	if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
		return false;
	}

	// Own properties are enumerated firstly, so to speed up,
	// if last one is own, then all properties are own.
	var key;
	for (key in obj) { /**/ }

	return typeof key === 'undefined' || hasOwn.call(obj, key);
};

// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target
var setProperty = function setProperty(target, options) {
	if (defineProperty && options.name === '__proto__') {
		defineProperty(target, options.name, {
			enumerable: true,
			configurable: true,
			value: options.newValue,
			writable: true
		});
	} else {
		target[options.name] = options.newValue;
	}
};

// Return undefined instead of __proto__ if '__proto__' is not an own property
var getProperty = function getProperty(obj, name) {
	if (name === '__proto__') {
		if (!hasOwn.call(obj, name)) {
			return void 0;
		} else if (gOPD) {
			// In early versions of node, obj['__proto__'] is buggy when obj has
			// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.
			return gOPD(obj, name).value;
		}
	}

	return obj[name];
};

module.exports = function extend() {
	var options, name, src, copy, copyIsArray, clone;
	var target = arguments[0];
	var i = 1;
	var length = arguments.length;
	var deep = false;

	// Handle a deep copy situation
	if (typeof target === 'boolean') {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}
	if (target == null || (typeof target !== 'object' && typeof target !== 'function')) {
		target = {};
	}

	for (; i < length; ++i) {
		options = arguments[i];
		// Only deal with non-null/undefined values
		if (options != null) {
			// Extend the base object
			for (name in options) {
				src = getProperty(target, name);
				copy = getProperty(options, name);

				// Prevent never-ending loop
				if (target !== copy) {
					// Recurse if we're merging plain objects or arrays
					if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
						if (copyIsArray) {
							copyIsArray = false;
							clone = src && isArray(src) ? src : [];
						} else {
							clone = src && isPlainObject(src) ? src : {};
						}

						// Never move original objects, clone them
						setProperty(target, { name: name, newValue: extend(deep, clone, copy) });

					// Don't bring in undefined values
					} else if (typeof copy !== 'undefined') {
						setProperty(target, { name: name, newValue: copy });
					}
				}
			}
		}
	}

	// Return the modified object
	return target;
};


/***/ }),

/***/ 1200:
/***/ ((module) => {



// do not edit .js files directly - edit src/index.jst



module.exports = function equal(a, b) {
  if (a === b) return true;

  if (a && b && typeof a == 'object' && typeof b == 'object') {
    if (a.constructor !== b.constructor) return false;

    var length, i, keys;
    if (Array.isArray(a)) {
      length = a.length;
      if (length != b.length) return false;
      for (i = length; i-- !== 0;)
        if (!equal(a[i], b[i])) return false;
      return true;
    }



    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();

    keys = Object.keys(a);
    length = keys.length;
    if (length !== Object.keys(b).length) return false;

    for (i = length; i-- !== 0;)
      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;

    for (i = length; i-- !== 0;) {
      var key = keys[i];

      if (!equal(a[key], b[key])) return false;
    }

    return true;
  }

  // true if both NaN, false otherwise
  return a!==a && b!==b;
};


/***/ }),

/***/ 6872:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var CombinedStream = __nccwpck_require__(5127);
var util = __nccwpck_require__(3837);
var path = __nccwpck_require__(1017);
var http = __nccwpck_require__(3685);
var https = __nccwpck_require__(5687);
var parseUrl = (__nccwpck_require__(7310).parse);
var fs = __nccwpck_require__(7147);
var Stream = (__nccwpck_require__(2781).Stream);
var mime = __nccwpck_require__(2834);
var asynckit = __nccwpck_require__(9633);
var populate = __nccwpck_require__(5630);

// Public API
module.exports = FormData;

// make it a Stream
util.inherits(FormData, CombinedStream);

/**
 * Create readable "multipart/form-data" streams.
 * Can be used to submit forms
 * and file uploads to other web applications.
 *
 * @constructor
 * @param {Object} options - Properties to be added/overriden for FormData and CombinedStream
 */
function FormData(options) {
  if (!(this instanceof FormData)) {
    return new FormData(options);
  }

  this._overheadLength = 0;
  this._valueLength = 0;
  this._valuesToMeasure = [];

  CombinedStream.call(this);

  options = options || {};
  for (var option in options) {
    this[option] = options[option];
  }
}

FormData.LINE_BREAK = '\r\n';
FormData.DEFAULT_CONTENT_TYPE = 'application/octet-stream';

FormData.prototype.append = function(field, value, options) {

  options = options || {};

  // allow filename as single option
  if (typeof options == 'string') {
    options = {filename: options};
  }

  var append = CombinedStream.prototype.append.bind(this);

  // all that streamy business can't handle numbers
  if (typeof value == 'number') {
    value = '' + value;
  }

  // https://github.com/felixge/node-form-data/issues/38
  if (util.isArray(value)) {
    // Please convert your array into string
    // the way web server expects it
    this._error(new Error('Arrays are not supported.'));
    return;
  }

  var header = this._multiPartHeader(field, value, options);
  var footer = this._multiPartFooter();

  append(header);
  append(value);
  append(footer);

  // pass along options.knownLength
  this._trackLength(header, value, options);
};

FormData.prototype._trackLength = function(header, value, options) {
  var valueLength = 0;

  // used w/ getLengthSync(), when length is known.
  // e.g. for streaming directly from a remote server,
  // w/ a known file a size, and not wanting to wait for
  // incoming file to finish to get its size.
  if (options.knownLength != null) {
    valueLength += +options.knownLength;
  } else if (Buffer.isBuffer(value)) {
    valueLength = value.length;
  } else if (typeof value === 'string') {
    valueLength = Buffer.byteLength(value);
  }

  this._valueLength += valueLength;

  // @check why add CRLF? does this account for custom/multiple CRLFs?
  this._overheadLength +=
    Buffer.byteLength(header) +
    FormData.LINE_BREAK.length;

  // empty or either doesn't have path or not an http response or not a stream
  if (!value || ( !value.path && !(value.readable && value.hasOwnProperty('httpVersion')) && !(value instanceof Stream))) {
    return;
  }

  // no need to bother with the length
  if (!options.knownLength) {
    this._valuesToMeasure.push(value);
  }
};

FormData.prototype._lengthRetriever = function(value, callback) {

  if (value.hasOwnProperty('fd')) {

    // take read range into a account
    // `end` = Infinity –> read file till the end
    //
    // TODO: Looks like there is bug in Node fs.createReadStream
    // it doesn't respect `end` options without `start` options
    // Fix it when node fixes it.
    // https://github.com/joyent/node/issues/7819
    if (value.end != undefined && value.end != Infinity && value.start != undefined) {

      // when end specified
      // no need to calculate range
      // inclusive, starts with 0
      callback(null, value.end + 1 - (value.start ? value.start : 0));

    // not that fast snoopy
    } else {
      // still need to fetch file size from fs
      fs.stat(value.path, function(err, stat) {

        var fileSize;

        if (err) {
          callback(err);
          return;
        }

        // update final size based on the range options
        fileSize = stat.size - (value.start ? value.start : 0);
        callback(null, fileSize);
      });
    }

  // or http response
  } else if (value.hasOwnProperty('httpVersion')) {
    callback(null, +value.headers['content-length']);

  // or request stream http://github.com/mikeal/request
  } else if (value.hasOwnProperty('httpModule')) {
    // wait till response come back
    value.on('response', function(response) {
      value.pause();
      callback(null, +response.headers['content-length']);
    });
    value.resume();

  // something else
  } else {
    callback('Unknown stream');
  }
};

FormData.prototype._multiPartHeader = function(field, value, options) {
  // custom header specified (as string)?
  // it becomes responsible for boundary
  // (e.g. to handle extra CRLFs on .NET servers)
  if (typeof options.header == 'string') {
    return options.header;
  }

  var contentDisposition = this._getContentDisposition(value, options);
  var contentType = this._getContentType(value, options);

  var contents = '';
  var headers  = {
    // add custom disposition as third element or keep it two elements if not
    'Content-Disposition': ['form-data', 'name="' + field + '"'].concat(contentDisposition || []),
    // if no content type. allow it to be empty array
    'Content-Type': [].concat(contentType || [])
  };

  // allow custom headers.
  if (typeof options.header == 'object') {
    populate(headers, options.header);
  }

  var header;
  for (var prop in headers) {
    if (!headers.hasOwnProperty(prop)) continue;
    header = headers[prop];

    // skip nullish headers.
    if (header == null) {
      continue;
    }

    // convert all headers to arrays.
    if (!Array.isArray(header)) {
      header = [header];
    }

    // add non-empty headers.
    if (header.length) {
      contents += prop + ': ' + header.join('; ') + FormData.LINE_BREAK;
    }
  }

  return '--' + this.getBoundary() + FormData.LINE_BREAK + contents + FormData.LINE_BREAK;
};

FormData.prototype._getContentDisposition = function(value, options) {

  var filename
    , contentDisposition
    ;

  if (typeof options.filepath === 'string') {
    // custom filepath for relative paths
    filename = path.normalize(options.filepath).replace(/\\/g, '/');
  } else if (options.filename || value.name || value.path) {
    // custom filename take precedence
    // formidable and the browser add a name property
    // fs- and request- streams have path property
    filename = path.basename(options.filename || value.name || value.path);
  } else if (value.readable && value.hasOwnProperty('httpVersion')) {
    // or try http response
    filename = path.basename(value.client._httpMessage.path || '');
  }

  if (filename) {
    contentDisposition = 'filename="' + filename + '"';
  }

  return contentDisposition;
};

FormData.prototype._getContentType = function(value, options) {

  // use custom content-type above all
  var contentType = options.contentType;

  // or try `name` from formidable, browser
  if (!contentType && value.name) {
    contentType = mime.lookup(value.name);
  }

  // or try `path` from fs-, request- streams
  if (!contentType && value.path) {
    contentType = mime.lookup(value.path);
  }

  // or if it's http-reponse
  if (!contentType && value.readable && value.hasOwnProperty('httpVersion')) {
    contentType = value.headers['content-type'];
  }

  // or guess it from the filepath or filename
  if (!contentType && (options.filepath || options.filename)) {
    contentType = mime.lookup(options.filepath || options.filename);
  }

  // fallback to the default content type if `value` is not simple value
  if (!contentType && typeof value == 'object') {
    contentType = FormData.DEFAULT_CONTENT_TYPE;
  }

  return contentType;
};

FormData.prototype._multiPartFooter = function() {
  return function(next) {
    var footer = FormData.LINE_BREAK;

    var lastPart = (this._streams.length === 0);
    if (lastPart) {
      footer += this._lastBoundary();
    }

    next(footer);
  }.bind(this);
};

FormData.prototype._lastBoundary = function() {
  return '--' + this.getBoundary() + '--' + FormData.LINE_BREAK;
};

FormData.prototype.getHeaders = function(userHeaders) {
  var header;
  var formHeaders = {
    'content-type': 'multipart/form-data; boundary=' + this.getBoundary()
  };

  for (header in userHeaders) {
    if (userHeaders.hasOwnProperty(header)) {
      formHeaders[header.toLowerCase()] = userHeaders[header];
    }
  }

  return formHeaders;
};

FormData.prototype.setBoundary = function(boundary) {
  this._boundary = boundary;
};

FormData.prototype.getBoundary = function() {
  if (!this._boundary) {
    this._generateBoundary();
  }

  return this._boundary;
};

FormData.prototype.getBuffer = function() {
  var dataBuffer = new Buffer.alloc( 0 );
  var boundary = this.getBoundary();

  // Create the form content. Add Line breaks to the end of data.
  for (var i = 0, len = this._streams.length; i < len; i++) {
    if (typeof this._streams[i] !== 'function') {

      // Add content to the buffer.
      if(Buffer.isBuffer(this._streams[i])) {
        dataBuffer = Buffer.concat( [dataBuffer, this._streams[i]]);
      }else {
        dataBuffer = Buffer.concat( [dataBuffer, Buffer.from(this._streams[i])]);
      }

      // Add break after content.
      if (typeof this._streams[i] !== 'string' || this._streams[i].substring( 2, boundary.length + 2 ) !== boundary) {
        dataBuffer = Buffer.concat( [dataBuffer, Buffer.from(FormData.LINE_BREAK)] );
      }
    }
  }

  // Add the footer and return the Buffer object.
  return Buffer.concat( [dataBuffer, Buffer.from(this._lastBoundary())] );
};

FormData.prototype._generateBoundary = function() {
  // This generates a 50 character boundary similar to those used by Firefox.
  // They are optimized for boyer-moore parsing.
  var boundary = '--------------------------';
  for (var i = 0; i < 24; i++) {
    boundary += Math.floor(Math.random() * 10).toString(16);
  }

  this._boundary = boundary;
};

// Note: getLengthSync DOESN'T calculate streams length
// As workaround one can calculate file size manually
// and add it as knownLength option
FormData.prototype.getLengthSync = function() {
  var knownLength = this._overheadLength + this._valueLength;

  // Don't get confused, there are 3 "internal" streams for each keyval pair
  // so it basically checks if there is any value added to the form
  if (this._streams.length) {
    knownLength += this._lastBoundary().length;
  }

  // https://github.com/form-data/form-data/issues/40
  if (!this.hasKnownLength()) {
    // Some async length retrievers are present
    // therefore synchronous length calculation is false.
    // Please use getLength(callback) to get proper length
    this._error(new Error('Cannot calculate proper length in synchronous way.'));
  }

  return knownLength;
};

// Public API to check if length of added values is known
// https://github.com/form-data/form-data/issues/196
// https://github.com/form-data/form-data/issues/262
FormData.prototype.hasKnownLength = function() {
  var hasKnownLength = true;

  if (this._valuesToMeasure.length) {
    hasKnownLength = false;
  }

  return hasKnownLength;
};

FormData.prototype.getLength = function(cb) {
  var knownLength = this._overheadLength + this._valueLength;

  if (this._streams.length) {
    knownLength += this._lastBoundary().length;
  }

  if (!this._valuesToMeasure.length) {
    process.nextTick(cb.bind(this, null, knownLength));
    return;
  }

  asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function(err, values) {
    if (err) {
      cb(err);
      return;
    }

    values.forEach(function(length) {
      knownLength += length;
    });

    cb(null, knownLength);
  });
};

FormData.prototype.submit = function(params, cb) {
  var request
    , options
    , defaults = {method: 'post'}
    ;

  // parse provided url if it's string
  // or treat it as options object
  if (typeof params == 'string') {

    params = parseUrl(params);
    options = populate({
      port: params.port,
      path: params.pathname,
      host: params.hostname,
      protocol: params.protocol
    }, defaults);

  // use custom params
  } else {

    options = populate(params, defaults);
    // if no port provided use default one
    if (!options.port) {
      options.port = options.protocol == 'https:' ? 443 : 80;
    }
  }

  // put that good code in getHeaders to some use
  options.headers = this.getHeaders(params.headers);

  // https if specified, fallback to http in any other case
  if (options.protocol == 'https:') {
    request = https.request(options);
  } else {
    request = http.request(options);
  }

  // get content length and fire away
  this.getLength(function(err, length) {
    if (err && err !== 'Unknown stream') {
      this._error(err);
      return;
    }

    // add content length
    if (length) {
      request.setHeader('Content-Length', length);
    }

    this.pipe(request);
    if (cb) {
      var onResponse;

      var callback = function (error, responce) {
        request.removeListener('error', callback);
        request.removeListener('response', onResponse);

        return cb.call(this, error, responce);
      };

      onResponse = callback.bind(this, null);

      request.on('error', callback);
      request.on('response', onResponse);
    }
  }.bind(this));

  return request;
};

FormData.prototype._error = function(err) {
  if (!this.error) {
    this.error = err;
    this.pause();
    this.emit('error', err);
  }
};

FormData.prototype.toString = function () {
  return '[object FormData]';
};


/***/ }),

/***/ 5630:
/***/ ((module) => {

// populates missing values
module.exports = function(dst, src) {

  Object.keys(src).forEach(function(prop)
  {
    dst[prop] = dst[prop] || src[prop];
  });

  return dst;
};


/***/ }),

/***/ 2221:
/***/ ((module) => {



const word = '[a-fA-F\\d:]';
const b = options => options && options.includeBoundaries ?
	`(?:(?<=\\s|^)(?=${word})|(?<=${word})(?=\\s|$))` :
	'';

const v4 = '(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}';

const v6seg = '[a-fA-F\\d]{1,4}';
const v6 = `
(?:
(?:${v6seg}:){7}(?:${v6seg}|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8
(?:${v6seg}:){6}(?:${v4}|:${v6seg}|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4
(?:${v6seg}:){5}(?::${v4}|(?::${v6seg}){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4
(?:${v6seg}:){4}(?:(?::${v6seg}){0,1}:${v4}|(?::${v6seg}){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4
(?:${v6seg}:){3}(?:(?::${v6seg}){0,2}:${v4}|(?::${v6seg}){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4
(?:${v6seg}:){2}(?:(?::${v6seg}){0,3}:${v4}|(?::${v6seg}){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4
(?:${v6seg}:){1}(?:(?::${v6seg}){0,4}:${v4}|(?::${v6seg}){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4
(?::(?:(?::${v6seg}){0,5}:${v4}|(?::${v6seg}){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4
)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1
`.replace(/\s*\/\/.*$/gm, '').replace(/\n/g, '').trim();

// Pre-compile only the exact regexes because adding a global flag make regexes stateful
const v46Exact = new RegExp(`(?:^${v4}$)|(?:^${v6}$)`);
const v4exact = new RegExp(`^${v4}$`);
const v6exact = new RegExp(`^${v6}$`);

const ip = options => options && options.exact ?
	v46Exact :
	new RegExp(`(?:${b(options)}${v4}${b(options)})|(?:${b(options)}${v6}${b(options)})`, 'g');

ip.v4 = options => options && options.exact ? v4exact : new RegExp(`${b(options)}${v4}${b(options)}`, 'g');
ip.v6 = options => options && options.exact ? v6exact : new RegExp(`${b(options)}${v6}${b(options)}`, 'g');

module.exports = ip;


/***/ }),

/***/ 1196:
/***/ ((module) => {

module.exports = function isArrayish(obj) {
	if (!obj || typeof obj === 'string') {
		return false;
	}

	return obj instanceof Array || Array.isArray(obj) ||
		(obj.length >= 0 && (obj.splice instanceof Function ||
			(Object.getOwnPropertyDescriptor(obj, (obj.length - 1)) && obj.constructor.name !== 'String')));
};


/***/ }),

/***/ 5486:
/***/ ((module) => {



var traverse = module.exports = function (schema, opts, cb) {
  // Legacy support for v0.3.1 and earlier.
  if (typeof opts == 'function') {
    cb = opts;
    opts = {};
  }

  cb = opts.cb || cb;
  var pre = (typeof cb == 'function') ? cb : cb.pre || function() {};
  var post = cb.post || function() {};

  _traverse(opts, pre, post, schema, '', schema);
};


traverse.keywords = {
  additionalItems: true,
  items: true,
  contains: true,
  additionalProperties: true,
  propertyNames: true,
  not: true,
  if: true,
  then: true,
  else: true
};

traverse.arrayKeywords = {
  items: true,
  allOf: true,
  anyOf: true,
  oneOf: true
};

traverse.propsKeywords = {
  $defs: true,
  definitions: true,
  properties: true,
  patternProperties: true,
  dependencies: true
};

traverse.skipKeywords = {
  default: true,
  enum: true,
  const: true,
  required: true,
  maximum: true,
  minimum: true,
  exclusiveMaximum: true,
  exclusiveMinimum: true,
  multipleOf: true,
  maxLength: true,
  minLength: true,
  pattern: true,
  format: true,
  maxItems: true,
  minItems: true,
  uniqueItems: true,
  maxProperties: true,
  minProperties: true
};


function _traverse(opts, pre, post, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
  if (schema && typeof schema == 'object' && !Array.isArray(schema)) {
    pre(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
    for (var key in schema) {
      var sch = schema[key];
      if (Array.isArray(sch)) {
        if (key in traverse.arrayKeywords) {
          for (var i=0; i<sch.length; i++)
            _traverse(opts, pre, post, sch[i], jsonPtr + '/' + key + '/' + i, rootSchema, jsonPtr, key, schema, i);
        }
      } else if (key in traverse.propsKeywords) {
        if (sch && typeof sch == 'object') {
          for (var prop in sch)
            _traverse(opts, pre, post, sch[prop], jsonPtr + '/' + key + '/' + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);
        }
      } else if (key in traverse.keywords || (opts.allKeys && !(key in traverse.skipKeywords))) {
        _traverse(opts, pre, post, sch, jsonPtr + '/' + key, rootSchema, jsonPtr, key, schema);
      }
    }
    post(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
  }
}


function escapeJsonPtr(str) {
  return str.replace(/~/g, '~0').replace(/\//g, '~1');
}


/***/ }),

/***/ 84:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

/*!
 * mime-db
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015-2022 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module exports.
 */

module.exports = __nccwpck_require__(4881)


/***/ }),

/***/ 2834:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

/*!
 * mime-types
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module dependencies.
 * @private
 */

var db = __nccwpck_require__(84)
var extname = (__nccwpck_require__(1017).extname)

/**
 * Module variables.
 * @private
 */

var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/
var TEXT_TYPE_REGEXP = /^text\//i

/**
 * Module exports.
 * @public
 */

exports.charset = charset
exports.charsets = { lookup: charset }
exports.contentType = contentType
exports.extension = extension
exports.extensions = Object.create(null)
exports.lookup = lookup
exports.types = Object.create(null)

// Populate the extensions/types maps
populateMaps(exports.extensions, exports.types)

/**
 * Get the default charset for a MIME type.
 *
 * @param {string} type
 * @return {boolean|string}
 */

function charset (type) {
  if (!type || typeof type !== 'string') {
    return false
  }

  // TODO: use media-typer
  var match = EXTRACT_TYPE_REGEXP.exec(type)
  var mime = match && db[match[1].toLowerCase()]

  if (mime && mime.charset) {
    return mime.charset
  }

  // default text/* to utf-8
  if (match && TEXT_TYPE_REGEXP.test(match[1])) {
    return 'UTF-8'
  }

  return false
}

/**
 * Create a full Content-Type header given a MIME type or extension.
 *
 * @param {string} str
 * @return {boolean|string}
 */

function contentType (str) {
  // TODO: should this even be in this module?
  if (!str || typeof str !== 'string') {
    return false
  }

  var mime = str.indexOf('/') === -1
    ? exports.lookup(str)
    : str

  if (!mime) {
    return false
  }

  // TODO: use content-type or other module
  if (mime.indexOf('charset') === -1) {
    var charset = exports.charset(mime)
    if (charset) mime += '; charset=' + charset.toLowerCase()
  }

  return mime
}

/**
 * Get the default extension for a MIME type.
 *
 * @param {string} type
 * @return {boolean|string}
 */

function extension (type) {
  if (!type || typeof type !== 'string') {
    return false
  }

  // TODO: use media-typer
  var match = EXTRACT_TYPE_REGEXP.exec(type)

  // get extensions
  var exts = match && exports.extensions[match[1].toLowerCase()]

  if (!exts || !exts.length) {
    return false
  }

  return exts[0]
}

/**
 * Lookup the MIME type for a file path/extension.
 *
 * @param {string} path
 * @return {boolean|string}
 */

function lookup (path) {
  if (!path || typeof path !== 'string') {
    return false
  }

  // get the extension ("ext" or ".ext" or full path)
  var extension = extname('x.' + path)
    .toLowerCase()
    .substr(1)

  if (!extension) {
    return false
  }

  return exports.types[extension] || false
}

/**
 * Populate the extensions and types maps.
 * @private
 */

function populateMaps (extensions, types) {
  // source preference (least -> most)
  var preference = ['nginx', 'apache', undefined, 'iana']

  Object.keys(db).forEach(function forEachMimeType (type) {
    var mime = db[type]
    var exts = mime.extensions

    if (!exts || !exts.length) {
      return
    }

    // mime -> extensions
    extensions[type] = exts

    // extension -> mime
    for (var i = 0; i < exts.length; i++) {
      var extension = exts[i]

      if (types[extension]) {
        var from = preference.indexOf(db[types[extension]].source)
        var to = preference.indexOf(mime.source)

        if (types[extension] !== 'application/octet-stream' &&
          (from > to || (from === to && types[extension].substr(0, 12) === 'application/'))) {
          // skip the remapping
          continue
        }
      }

      // set the extension -> mime
      types[extension] = type
    }
  })
}


/***/ }),

/***/ 3311:
/***/ (function(module) {

(function(root, factory) {
    if ( true && module.exports) {
        module.exports = factory();
    } else {
        root.nearley = factory();
    }
}(this, function() {

    function Rule(name, symbols, postprocess) {
        this.id = ++Rule.highestId;
        this.name = name;
        this.symbols = symbols;        // a list of literal | regex class | nonterminal
        this.postprocess = postprocess;
        return this;
    }
    Rule.highestId = 0;

    Rule.prototype.toString = function(withCursorAt) {
        var symbolSequence = (typeof withCursorAt === "undefined")
                             ? this.symbols.map(getSymbolShortDisplay).join(' ')
                             : (   this.symbols.slice(0, withCursorAt).map(getSymbolShortDisplay).join(' ')
                                 + " ● "
                                 + this.symbols.slice(withCursorAt).map(getSymbolShortDisplay).join(' ')     );
        return this.name + " → " + symbolSequence;
    }


    // a State is a rule at a position from a given starting point in the input stream (reference)
    function State(rule, dot, reference, wantedBy) {
        this.rule = rule;
        this.dot = dot;
        this.reference = reference;
        this.data = [];
        this.wantedBy = wantedBy;
        this.isComplete = this.dot === rule.symbols.length;
    }

    State.prototype.toString = function() {
        return "{" + this.rule.toString(this.dot) + "}, from: " + (this.reference || 0);
    };

    State.prototype.nextState = function(child) {
        var state = new State(this.rule, this.dot + 1, this.reference, this.wantedBy);
        state.left = this;
        state.right = child;
        if (state.isComplete) {
            state.data = state.build();
            // Having right set here will prevent the right state and its children
            // form being garbage collected
            state.right = undefined;
        }
        return state;
    };

    State.prototype.build = function() {
        var children = [];
        var node = this;
        do {
            children.push(node.right.data);
            node = node.left;
        } while (node.left);
        children.reverse();
        return children;
    };

    State.prototype.finish = function() {
        if (this.rule.postprocess) {
            this.data = this.rule.postprocess(this.data, this.reference, Parser.fail);
        }
    };


    function Column(grammar, index) {
        this.grammar = grammar;
        this.index = index;
        this.states = [];
        this.wants = {}; // states indexed by the non-terminal they expect
        this.scannable = []; // list of states that expect a token
        this.completed = {}; // states that are nullable
    }


    Column.prototype.process = function(nextColumn) {
        var states = this.states;
        var wants = this.wants;
        var completed = this.completed;

        for (var w = 0; w < states.length; w++) { // nb. we push() during iteration
            var state = states[w];

            if (state.isComplete) {
                state.finish();
                if (state.data !== Parser.fail) {
                    // complete
                    var wantedBy = state.wantedBy;
                    for (var i = wantedBy.length; i--; ) { // this line is hot
                        var left = wantedBy[i];
                        this.complete(left, state);
                    }

                    // special-case nullables
                    if (state.reference === this.index) {
                        // make sure future predictors of this rule get completed.
                        var exp = state.rule.name;
                        (this.completed[exp] = this.completed[exp] || []).push(state);
                    }
                }

            } else {
                // queue scannable states
                var exp = state.rule.symbols[state.dot];
                if (typeof exp !== 'string') {
                    this.scannable.push(state);
                    continue;
                }

                // predict
                if (wants[exp]) {
                    wants[exp].push(state);

                    if (completed.hasOwnProperty(exp)) {
                        var nulls = completed[exp];
                        for (var i = 0; i < nulls.length; i++) {
                            var right = nulls[i];
                            this.complete(state, right);
                        }
                    }
                } else {
                    wants[exp] = [state];
                    this.predict(exp);
                }
            }
        }
    }

    Column.prototype.predict = function(exp) {
        var rules = this.grammar.byName[exp] || [];

        for (var i = 0; i < rules.length; i++) {
            var r = rules[i];
            var wantedBy = this.wants[exp];
            var s = new State(r, 0, this.index, wantedBy);
            this.states.push(s);
        }
    }

    Column.prototype.complete = function(left, right) {
        var copy = left.nextState(right);
        this.states.push(copy);
    }


    function Grammar(rules, start) {
        this.rules = rules;
        this.start = start || this.rules[0].name;
        var byName = this.byName = {};
        this.rules.forEach(function(rule) {
            if (!byName.hasOwnProperty(rule.name)) {
                byName[rule.name] = [];
            }
            byName[rule.name].push(rule);
        });
    }

    // So we can allow passing (rules, start) directly to Parser for backwards compatibility
    Grammar.fromCompiled = function(rules, start) {
        var lexer = rules.Lexer;
        if (rules.ParserStart) {
          start = rules.ParserStart;
          rules = rules.ParserRules;
        }
        var rules = rules.map(function (r) { return (new Rule(r.name, r.symbols, r.postprocess)); });
        var g = new Grammar(rules, start);
        g.lexer = lexer; // nb. storing lexer on Grammar is iffy, but unavoidable
        return g;
    }


    function StreamLexer() {
      this.reset("");
    }

    StreamLexer.prototype.reset = function(data, state) {
        this.buffer = data;
        this.index = 0;
        this.line = state ? state.line : 1;
        this.lastLineBreak = state ? -state.col : 0;
    }

    StreamLexer.prototype.next = function() {
        if (this.index < this.buffer.length) {
            var ch = this.buffer[this.index++];
            if (ch === '\n') {
              this.line += 1;
              this.lastLineBreak = this.index;
            }
            return {value: ch};
        }
    }

    StreamLexer.prototype.save = function() {
      return {
        line: this.line,
        col: this.index - this.lastLineBreak,
      }
    }

    StreamLexer.prototype.formatError = function(token, message) {
        // nb. this gets called after consuming the offending token,
        // so the culprit is index-1
        var buffer = this.buffer;
        if (typeof buffer === 'string') {
            var lines = buffer
                .split("\n")
                .slice(
                    Math.max(0, this.line - 5), 
                    this.line
                );

            var nextLineBreak = buffer.indexOf('\n', this.index);
            if (nextLineBreak === -1) nextLineBreak = buffer.length;
            var col = this.index - this.lastLineBreak;
            var lastLineDigits = String(this.line).length;
            message += " at line " + this.line + " col " + col + ":\n\n";
            message += lines
                .map(function(line, i) {
                    return pad(this.line - lines.length + i + 1, lastLineDigits) + " " + line;
                }, this)
                .join("\n");
            message += "\n" + pad("", lastLineDigits + col) + "^\n";
            return message;
        } else {
            return message + " at index " + (this.index - 1);
        }

        function pad(n, length) {
            var s = String(n);
            return Array(length - s.length + 1).join(" ") + s;
        }
    }

    function Parser(rules, start, options) {
        if (rules instanceof Grammar) {
            var grammar = rules;
            var options = start;
        } else {
            var grammar = Grammar.fromCompiled(rules, start);
        }
        this.grammar = grammar;

        // Read options
        this.options = {
            keepHistory: false,
            lexer: grammar.lexer || new StreamLexer,
        };
        for (var key in (options || {})) {
            this.options[key] = options[key];
        }

        // Setup lexer
        this.lexer = this.options.lexer;
        this.lexerState = undefined;

        // Setup a table
        var column = new Column(grammar, 0);
        var table = this.table = [column];

        // I could be expecting anything.
        column.wants[grammar.start] = [];
        column.predict(grammar.start);
        // TODO what if start rule is nullable?
        column.process();
        this.current = 0; // token index
    }

    // create a reserved token for indicating a parse fail
    Parser.fail = {};

    Parser.prototype.feed = function(chunk) {
        var lexer = this.lexer;
        lexer.reset(chunk, this.lexerState);

        var token;
        while (true) {
            try {
                token = lexer.next();
                if (!token) {
                    break;
                }
            } catch (e) {
                // Create the next column so that the error reporter
                // can display the correctly predicted states.
                var nextColumn = new Column(this.grammar, this.current + 1);
                this.table.push(nextColumn);
                var err = new Error(this.reportLexerError(e));
                err.offset = this.current;
                err.token = e.token;
                throw err;
            }
            // We add new states to table[current+1]
            var column = this.table[this.current];

            // GC unused states
            if (!this.options.keepHistory) {
                delete this.table[this.current - 1];
            }

            var n = this.current + 1;
            var nextColumn = new Column(this.grammar, n);
            this.table.push(nextColumn);

            // Advance all tokens that expect the symbol
            var literal = token.text !== undefined ? token.text : token.value;
            var value = lexer.constructor === StreamLexer ? token.value : token;
            var scannable = column.scannable;
            for (var w = scannable.length; w--; ) {
                var state = scannable[w];
                var expect = state.rule.symbols[state.dot];
                // Try to consume the token
                // either regex or literal
                if (expect.test ? expect.test(value) :
                    expect.type ? expect.type === token.type
                                : expect.literal === literal) {
                    // Add it
                    var next = state.nextState({data: value, token: token, isToken: true, reference: n - 1});
                    nextColumn.states.push(next);
                }
            }

            // Next, for each of the rules, we either
            // (a) complete it, and try to see if the reference row expected that
            //     rule
            // (b) predict the next nonterminal it expects by adding that
            //     nonterminal's start state
            // To prevent duplication, we also keep track of rules we have already
            // added

            nextColumn.process();

            // If needed, throw an error:
            if (nextColumn.states.length === 0) {
                // No states at all! This is not good.
                var err = new Error(this.reportError(token));
                err.offset = this.current;
                err.token = token;
                throw err;
            }

            // maybe save lexer state
            if (this.options.keepHistory) {
              column.lexerState = lexer.save()
            }

            this.current++;
        }
        if (column) {
          this.lexerState = lexer.save()
        }

        // Incrementally keep track of results
        this.results = this.finish();

        // Allow chaining, for whatever it's worth
        return this;
    };

    Parser.prototype.reportLexerError = function(lexerError) {
        var tokenDisplay, lexerMessage;
        // Planning to add a token property to moo's thrown error
        // even on erroring tokens to be used in error display below
        var token = lexerError.token;
        if (token) {
            tokenDisplay = "input " + JSON.stringify(token.text[0]) + " (lexer error)";
            lexerMessage = this.lexer.formatError(token, "Syntax error");
        } else {
            tokenDisplay = "input (lexer error)";
            lexerMessage = lexerError.message;
        }
        return this.reportErrorCommon(lexerMessage, tokenDisplay);
    };

    Parser.prototype.reportError = function(token) {
        var tokenDisplay = (token.type ? token.type + " token: " : "") + JSON.stringify(token.value !== undefined ? token.value : token);
        var lexerMessage = this.lexer.formatError(token, "Syntax error");
        return this.reportErrorCommon(lexerMessage, tokenDisplay);
    };

    Parser.prototype.reportErrorCommon = function(lexerMessage, tokenDisplay) {
        var lines = [];
        lines.push(lexerMessage);
        var lastColumnIndex = this.table.length - 2;
        var lastColumn = this.table[lastColumnIndex];
        var expectantStates = lastColumn.states
            .filter(function(state) {
                var nextSymbol = state.rule.symbols[state.dot];
                return nextSymbol && typeof nextSymbol !== "string";
            });

        if (expectantStates.length === 0) {
            lines.push('Unexpected ' + tokenDisplay + '. I did not expect any more input. Here is the state of my parse table:\n');
            this.displayStateStack(lastColumn.states, lines);
        } else {
            lines.push('Unexpected ' + tokenDisplay + '. Instead, I was expecting to see one of the following:\n');
            // Display a "state stack" for each expectant state
            // - which shows you how this state came to be, step by step.
            // If there is more than one derivation, we only display the first one.
            var stateStacks = expectantStates
                .map(function(state) {
                    return this.buildFirstStateStack(state, []) || [state];
                }, this);
            // Display each state that is expecting a terminal symbol next.
            stateStacks.forEach(function(stateStack) {
                var state = stateStack[0];
                var nextSymbol = state.rule.symbols[state.dot];
                var symbolDisplay = this.getSymbolDisplay(nextSymbol);
                lines.push('A ' + symbolDisplay + ' based on:');
                this.displayStateStack(stateStack, lines);
            }, this);
        }
        lines.push("");
        return lines.join("\n");
    }
    
    Parser.prototype.displayStateStack = function(stateStack, lines) {
        var lastDisplay;
        var sameDisplayCount = 0;
        for (var j = 0; j < stateStack.length; j++) {
            var state = stateStack[j];
            var display = state.rule.toString(state.dot);
            if (display === lastDisplay) {
                sameDisplayCount++;
            } else {
                if (sameDisplayCount > 0) {
                    lines.push('    ^ ' + sameDisplayCount + ' more lines identical to this');
                }
                sameDisplayCount = 0;
                lines.push('    ' + display);
            }
            lastDisplay = display;
        }
    };

    Parser.prototype.getSymbolDisplay = function(symbol) {
        return getSymbolLongDisplay(symbol);
    };

    /*
    Builds a the first state stack. You can think of a state stack as the call stack
    of the recursive-descent parser which the Nearley parse algorithm simulates.
    A state stack is represented as an array of state objects. Within a
    state stack, the first item of the array will be the starting
    state, with each successive item in the array going further back into history.

    This function needs to be given a starting state and an empty array representing
    the visited states, and it returns an single state stack.

    */
    Parser.prototype.buildFirstStateStack = function(state, visited) {
        if (visited.indexOf(state) !== -1) {
            // Found cycle, return null
            // to eliminate this path from the results, because
            // we don't know how to display it meaningfully
            return null;
        }
        if (state.wantedBy.length === 0) {
            return [state];
        }
        var prevState = state.wantedBy[0];
        var childVisited = [state].concat(visited);
        var childResult = this.buildFirstStateStack(prevState, childVisited);
        if (childResult === null) {
            return null;
        }
        return [state].concat(childResult);
    };

    Parser.prototype.save = function() {
        var column = this.table[this.current];
        column.lexerState = this.lexerState;
        return column;
    };

    Parser.prototype.restore = function(column) {
        var index = column.index;
        this.current = index;
        this.table[index] = column;
        this.table.splice(index + 1);
        this.lexerState = column.lexerState;

        // Incrementally keep track of results
        this.results = this.finish();
    };

    // nb. deprecated: use save/restore instead!
    Parser.prototype.rewind = function(index) {
        if (!this.options.keepHistory) {
            throw new Error('set option `keepHistory` to enable rewinding')
        }
        // nb. recall column (table) indicies fall between token indicies.
        //        col 0   --   token 0   --   col 1
        this.restore(this.table[index]);
    };

    Parser.prototype.finish = function() {
        // Return the possible parsings
        var considerations = [];
        var start = this.grammar.start;
        var column = this.table[this.table.length - 1]
        column.states.forEach(function (t) {
            if (t.rule.name === start
                    && t.dot === t.rule.symbols.length
                    && t.reference === 0
                    && t.data !== Parser.fail) {
                considerations.push(t);
            }
        });
        return considerations.map(function(c) {return c.data; });
    };

    function getSymbolLongDisplay(symbol) {
        var type = typeof symbol;
        if (type === "string") {
            return symbol;
        } else if (type === "object") {
            if (symbol.literal) {
                return JSON.stringify(symbol.literal);
            } else if (symbol instanceof RegExp) {
                return 'character matching ' + symbol;
            } else if (symbol.type) {
                return symbol.type + ' token';
            } else if (symbol.test) {
                return 'token matching ' + String(symbol.test);
            } else {
                throw new Error('Unknown symbol type: ' + symbol);
            }
        }
    }

    function getSymbolShortDisplay(symbol) {
        var type = typeof symbol;
        if (type === "string") {
            return symbol;
        } else if (type === "object") {
            if (symbol.literal) {
                return JSON.stringify(symbol.literal);
            } else if (symbol instanceof RegExp) {
                return symbol.toString();
            } else if (symbol.type) {
                return '%' + symbol.type;
            } else if (symbol.test) {
                return '<' + String(symbol.test) + '>';
            } else {
                throw new Error('Unknown symbol type: ' + symbol);
            }
        }
    }

    return {
        Parser: Parser,
        Grammar: Grammar,
        Rule: Rule,
    };

}));


/***/ }),

/***/ 1351:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

/*! node-domexception. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */

if (!globalThis.DOMException) {
  try {
    const { MessageChannel } = __nccwpck_require__(1267),
    port = new MessageChannel().port1,
    ab = new ArrayBuffer()
    port.postMessage(ab, [ab, ab])
  } catch (err) {
    err.constructor.name === 'DOMException' && (
      globalThis.DOMException = err.constructor
    )
  }
}

module.exports = globalThis.DOMException


/***/ }),

/***/ 6831:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



var extend = __nccwpck_require__(3998);

var data = {
  permanent: __nccwpck_require__(9461),
  provosional: __nccwpck_require__(5978),
  historical: __nccwpck_require__(3985)
};

var allByName = {};

Object.keys(data).forEach(function (type) {
  data[type].forEach(function (schemeObj) {
    allByName[schemeObj.scheme] = extend(schemeObj, { type: type });
  });
});

data.unofficial = (__nccwpck_require__(203).filter)(function (item) {
  return !allByName[item.scheme];
});

data.unofficial.forEach(function (schemeObj) {
  allByName[schemeObj.scheme] = extend(schemeObj, { type: 'unofficial' });
});


module.exports = extend(data, { allByName: allByName });


/***/ }),

/***/ 7562:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



var isArrayish = __nccwpck_require__(1196);

var concat = Array.prototype.concat;
var slice = Array.prototype.slice;

var swizzle = module.exports = function swizzle(args) {
	var results = [];

	for (var i = 0, len = args.length; i < len; i++) {
		var arg = args[i];

		if (isArrayish(arg)) {
			// http://jsperf.com/javascript-array-concat-vs-push/98
			results = concat.call(results, slice.call(arg));
		} else {
			results.push(arg);
		}
	}

	return results;
};

swizzle.wrap = function (fn) {
	return function () {
		return fn(swizzle(arguments));
	};
};


/***/ }),

/***/ 9944:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
// Generated automatically by nearley, version 2.20.1
// http://github.com/Hardmath123/nearley
// Bypasses TS6133. Allow declared but unused functions.
// @ts-ignore
function id(d) { return d[0]; }
const deepFlatten = (arr) => [].concat(...arr.map((v) => (Array.isArray(v) ? deepFlatten(v) : v)));
function flat_string(d) {
    if (d) {
        if (Array.isArray(d))
            return deepFlatten(d).join("");
        return d;
    }
    return "";
}
;
;
;
;
const grammar = {
    Lexer: undefined,
    ParserRules: [
        { "name": "Reverse_path", "symbols": ["Path"] },
        { "name": "Reverse_path$string$1", "symbols": [{ "literal": "<" }, { "literal": ">" }], "postprocess": (d) => d.join('') },
        { "name": "Reverse_path", "symbols": ["Reverse_path$string$1"] },
        { "name": "Forward_path$subexpression$1$subexpression$1", "symbols": [{ "literal": "<" }, /[pP]/, /[oO]/, /[sS]/, /[tT]/, /[mM]/, /[aA]/, /[sS]/, /[tT]/, /[eE]/, /[rR]/, { "literal": "@" }], "postprocess": function (d) { return d.join(""); } },
        { "name": "Forward_path$subexpression$1", "symbols": ["Forward_path$subexpression$1$subexpression$1", "Domain", { "literal": ">" }] },
        { "name": "Forward_path", "symbols": ["Forward_path$subexpression$1"] },
        { "name": "Forward_path$subexpression$2", "symbols": [{ "literal": "<" }, /[pP]/, /[oO]/, /[sS]/, /[tT]/, /[mM]/, /[aA]/, /[sS]/, /[tT]/, /[eE]/, /[rR]/, { "literal": ">" }], "postprocess": function (d) { return d.join(""); } },
        { "name": "Forward_path", "symbols": ["Forward_path$subexpression$2"] },
        { "name": "Forward_path", "symbols": ["Path"] },
        { "name": "Path$ebnf$1$subexpression$1", "symbols": ["A_d_l", { "literal": ":" }] },
        { "name": "Path$ebnf$1", "symbols": ["Path$ebnf$1$subexpression$1"], "postprocess": id },
        { "name": "Path$ebnf$1", "symbols": [], "postprocess": () => null },
        { "name": "Path", "symbols": [{ "literal": "<" }, "Path$ebnf$1", "Mailbox", { "literal": ">" }] },
        { "name": "A_d_l$ebnf$1", "symbols": [] },
        { "name": "A_d_l$ebnf$1$subexpression$1", "symbols": [{ "literal": "," }, "At_domain"] },
        { "name": "A_d_l$ebnf$1", "symbols": ["A_d_l$ebnf$1", "A_d_l$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "A_d_l", "symbols": ["At_domain", "A_d_l$ebnf$1"] },
        { "name": "At_domain", "symbols": [{ "literal": "@" }, "Domain"] },
        { "name": "Domain$ebnf$1", "symbols": [] },
        { "name": "Domain$ebnf$1$subexpression$1", "symbols": [{ "literal": "." }, "sub_domain"] },
        { "name": "Domain$ebnf$1", "symbols": ["Domain$ebnf$1", "Domain$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "Domain", "symbols": ["sub_domain", "Domain$ebnf$1"] },
        { "name": "sub_domain", "symbols": ["U_label"] },
        { "name": "Let_dig", "symbols": ["ALPHA_DIGIT"], "postprocess": id },
        { "name": "Ldh_str$ebnf$1", "symbols": [] },
        { "name": "Ldh_str$ebnf$1", "symbols": ["Ldh_str$ebnf$1", "ALPHA_DIG_DASH"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "Ldh_str", "symbols": ["Ldh_str$ebnf$1", "Let_dig"] },
        { "name": "U_Let_dig", "symbols": ["ALPHA_DIGIT_U"], "postprocess": id },
        { "name": "U_Ldh_str$ebnf$1", "symbols": [] },
        { "name": "U_Ldh_str$ebnf$1", "symbols": ["U_Ldh_str$ebnf$1", "ALPHA_DIG_DASH_U"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "U_Ldh_str", "symbols": ["U_Ldh_str$ebnf$1", "U_Let_dig"] },
        { "name": "U_label$ebnf$1$subexpression$1", "symbols": ["U_Ldh_str"] },
        { "name": "U_label$ebnf$1", "symbols": ["U_label$ebnf$1$subexpression$1"], "postprocess": id },
        { "name": "U_label$ebnf$1", "symbols": [], "postprocess": () => null },
        { "name": "U_label", "symbols": ["U_Let_dig", "U_label$ebnf$1"] },
        { "name": "address_literal$subexpression$1", "symbols": ["IPv4_address_literal"] },
        { "name": "address_literal$subexpression$1", "symbols": ["IPv6_address_literal"] },
        { "name": "address_literal$subexpression$1", "symbols": ["General_address_literal"] },
        { "name": "address_literal", "symbols": [{ "literal": "[" }, "address_literal$subexpression$1", { "literal": "]" }] },
        { "name": "non_local_part", "symbols": ["Domain"], "postprocess": function (d) {
                return { DomainName: flat_string(d[0]) };
            }
        },
        { "name": "non_local_part", "symbols": ["address_literal"], "postprocess": function (d) {
                return { AddressLiteral: flat_string(d[0]) };
            }
        },
        { "name": "Mailbox", "symbols": ["Local_part", { "literal": "@" }, "non_local_part"], "postprocess": function (d) {
                return { localPart: flat_string(d[0]), domainPart: flat_string(d[2]) };
            }
        },
        { "name": "Local_part", "symbols": ["Dot_string"], "postprocess": function (d) {
                return { DotString: flat_string(d[0]) };
            }
        },
        { "name": "Local_part", "symbols": ["Quoted_string"], "postprocess": function (d) {
                return { QuotedString: flat_string(d[0]) };
            }
        },
        { "name": "Dot_string$ebnf$1", "symbols": [] },
        { "name": "Dot_string$ebnf$1$subexpression$1", "symbols": [{ "literal": "." }, "Atom"] },
        { "name": "Dot_string$ebnf$1", "symbols": ["Dot_string$ebnf$1", "Dot_string$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "Dot_string", "symbols": ["Atom", "Dot_string$ebnf$1"] },
        { "name": "Atom$ebnf$1", "symbols": [/[0-9A-Za-z!#$%&'*+\-/=?^_`{|}~\u0080-\uFFFF/]/] },
        { "name": "Atom$ebnf$1", "symbols": ["Atom$ebnf$1", /[0-9A-Za-z!#$%&'*+\-/=?^_`{|}~\u0080-\uFFFF/]/], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "Atom", "symbols": ["Atom$ebnf$1"] },
        { "name": "Quoted_string$ebnf$1", "symbols": [] },
        { "name": "Quoted_string$ebnf$1", "symbols": ["Quoted_string$ebnf$1", "QcontentSMTP"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "Quoted_string", "symbols": ["DQUOTE", "Quoted_string$ebnf$1", "DQUOTE"] },
        { "name": "QcontentSMTP", "symbols": ["qtextSMTP"] },
        { "name": "QcontentSMTP", "symbols": ["quoted_pairSMTP"] },
        { "name": "quoted_pairSMTP", "symbols": [{ "literal": "\\" }, /[\x20-\x7e]/] },
        { "name": "qtextSMTP", "symbols": [/[\x20-\x21\x23-\x5b\x5d-\x7e\u0080-\uFFFF]/], "postprocess": id },
        { "name": "IPv4_address_literal$macrocall$2", "symbols": [{ "literal": "." }, "Snum"] },
        { "name": "IPv4_address_literal$macrocall$1", "symbols": ["IPv4_address_literal$macrocall$2", "IPv4_address_literal$macrocall$2", "IPv4_address_literal$macrocall$2"] },
        { "name": "IPv4_address_literal", "symbols": ["Snum", "IPv4_address_literal$macrocall$1"] },
        { "name": "IPv6_address_literal$subexpression$1", "symbols": [/[iI]/, /[pP]/, /[vV]/, { "literal": "6" }, { "literal": ":" }], "postprocess": function (d) { return d.join(""); } },
        { "name": "IPv6_address_literal", "symbols": ["IPv6_address_literal$subexpression$1", "IPv6_addr"] },
        { "name": "General_address_literal$ebnf$1", "symbols": ["dcontent"] },
        { "name": "General_address_literal$ebnf$1", "symbols": ["General_address_literal$ebnf$1", "dcontent"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "General_address_literal", "symbols": ["Standardized_tag", { "literal": ":" }, "General_address_literal$ebnf$1"] },
        { "name": "Standardized_tag", "symbols": ["Ldh_str"] },
        { "name": "dcontent", "symbols": [/[\x21-\x5a\x5e-\x7e]/], "postprocess": id },
        { "name": "Snum", "symbols": ["DIGIT"] },
        { "name": "Snum$subexpression$1", "symbols": [/[1-9]/, "DIGIT"] },
        { "name": "Snum", "symbols": ["Snum$subexpression$1"] },
        { "name": "Snum$subexpression$2", "symbols": [{ "literal": "1" }, "DIGIT", "DIGIT"] },
        { "name": "Snum", "symbols": ["Snum$subexpression$2"] },
        { "name": "Snum$subexpression$3", "symbols": [{ "literal": "2" }, /[0-4]/, "DIGIT"] },
        { "name": "Snum", "symbols": ["Snum$subexpression$3"] },
        { "name": "Snum$subexpression$4", "symbols": [{ "literal": "2" }, { "literal": "5" }, /[0-5]/] },
        { "name": "Snum", "symbols": ["Snum$subexpression$4"] },
        { "name": "IPv6_addr", "symbols": ["IPv6_full"] },
        { "name": "IPv6_addr", "symbols": ["IPv6_comp"] },
        { "name": "IPv6_addr", "symbols": ["IPv6v4_full"] },
        { "name": "IPv6_addr", "symbols": ["IPv6v4_comp"] },
        { "name": "IPv6_hex", "symbols": ["HEXDIG"] },
        { "name": "IPv6_hex$subexpression$1", "symbols": ["HEXDIG", "HEXDIG"] },
        { "name": "IPv6_hex", "symbols": ["IPv6_hex$subexpression$1"] },
        { "name": "IPv6_hex$subexpression$2", "symbols": ["HEXDIG", "HEXDIG", "HEXDIG"] },
        { "name": "IPv6_hex", "symbols": ["IPv6_hex$subexpression$2"] },
        { "name": "IPv6_hex$subexpression$3", "symbols": ["HEXDIG", "HEXDIG", "HEXDIG", "HEXDIG"] },
        { "name": "IPv6_hex", "symbols": ["IPv6_hex$subexpression$3"] },
        { "name": "IPv6_full$macrocall$2", "symbols": [{ "literal": ":" }, "IPv6_hex"] },
        { "name": "IPv6_full$macrocall$1", "symbols": ["IPv6_full$macrocall$2", "IPv6_full$macrocall$2", "IPv6_full$macrocall$2", "IPv6_full$macrocall$2", "IPv6_full$macrocall$2", "IPv6_full$macrocall$2", "IPv6_full$macrocall$2"] },
        { "name": "IPv6_full", "symbols": ["IPv6_hex", "IPv6_full$macrocall$1"] },
        { "name": "IPv6_comp$ebnf$1$subexpression$1$macrocall$2", "symbols": [{ "literal": ":" }, "IPv6_hex"] },
        { "name": "IPv6_comp$ebnf$1$subexpression$1$macrocall$1", "symbols": ["IPv6_comp$ebnf$1$subexpression$1$macrocall$2", "IPv6_comp$ebnf$1$subexpression$1$macrocall$2", "IPv6_comp$ebnf$1$subexpression$1$macrocall$2", "IPv6_comp$ebnf$1$subexpression$1$macrocall$2", "IPv6_comp$ebnf$1$subexpression$1$macrocall$2"] },
        { "name": "IPv6_comp$ebnf$1$subexpression$1", "symbols": ["IPv6_hex", "IPv6_comp$ebnf$1$subexpression$1$macrocall$1"] },
        { "name": "IPv6_comp$ebnf$1", "symbols": ["IPv6_comp$ebnf$1$subexpression$1"], "postprocess": id },
        { "name": "IPv6_comp$ebnf$1", "symbols": [], "postprocess": () => null },
        { "name": "IPv6_comp$string$1", "symbols": [{ "literal": ":" }, { "literal": ":" }], "postprocess": (d) => d.join('') },
        { "name": "IPv6_comp$ebnf$2$subexpression$1$macrocall$2", "symbols": [{ "literal": ":" }, "IPv6_hex"] },
        { "name": "IPv6_comp$ebnf$2$subexpression$1$macrocall$1", "symbols": ["IPv6_comp$ebnf$2$subexpression$1$macrocall$2", "IPv6_comp$ebnf$2$subexpression$1$macrocall$2", "IPv6_comp$ebnf$2$subexpression$1$macrocall$2", "IPv6_comp$ebnf$2$subexpression$1$macrocall$2", "IPv6_comp$ebnf$2$subexpression$1$macrocall$2"] },
        { "name": "IPv6_comp$ebnf$2$subexpression$1", "symbols": ["IPv6_hex", "IPv6_comp$ebnf$2$subexpression$1$macrocall$1"] },
        { "name": "IPv6_comp$ebnf$2", "symbols": ["IPv6_comp$ebnf$2$subexpression$1"], "postprocess": id },
        { "name": "IPv6_comp$ebnf$2", "symbols": [], "postprocess": () => null },
        { "name": "IPv6_comp", "symbols": ["IPv6_comp$ebnf$1", "IPv6_comp$string$1", "IPv6_comp$ebnf$2"] },
        { "name": "IPv6v4_full$macrocall$2", "symbols": [{ "literal": ":" }, "IPv6_hex"] },
        { "name": "IPv6v4_full$macrocall$1", "symbols": ["IPv6v4_full$macrocall$2", "IPv6v4_full$macrocall$2", "IPv6v4_full$macrocall$2", "IPv6v4_full$macrocall$2", "IPv6v4_full$macrocall$2"] },
        { "name": "IPv6v4_full", "symbols": ["IPv6_hex", "IPv6v4_full$macrocall$1", { "literal": ":" }, "IPv4_address_literal"] },
        { "name": "IPv6v4_comp$ebnf$1$subexpression$1$macrocall$2", "symbols": [{ "literal": ":" }, "IPv6_hex"] },
        { "name": "IPv6v4_comp$ebnf$1$subexpression$1$macrocall$1", "symbols": ["IPv6v4_comp$ebnf$1$subexpression$1$macrocall$2", "IPv6v4_comp$ebnf$1$subexpression$1$macrocall$2", "IPv6v4_comp$ebnf$1$subexpression$1$macrocall$2"] },
        { "name": "IPv6v4_comp$ebnf$1$subexpression$1", "symbols": ["IPv6_hex", "IPv6v4_comp$ebnf$1$subexpression$1$macrocall$1"] },
        { "name": "IPv6v4_comp$ebnf$1", "symbols": ["IPv6v4_comp$ebnf$1$subexpression$1"], "postprocess": id },
        { "name": "IPv6v4_comp$ebnf$1", "symbols": [], "postprocess": () => null },
        { "name": "IPv6v4_comp$string$1", "symbols": [{ "literal": ":" }, { "literal": ":" }], "postprocess": (d) => d.join('') },
        { "name": "IPv6v4_comp$ebnf$2$subexpression$1$macrocall$2", "symbols": [{ "literal": ":" }, "IPv6_hex"] },
        { "name": "IPv6v4_comp$ebnf$2$subexpression$1$macrocall$1", "symbols": ["IPv6v4_comp$ebnf$2$subexpression$1$macrocall$2", "IPv6v4_comp$ebnf$2$subexpression$1$macrocall$2", "IPv6v4_comp$ebnf$2$subexpression$1$macrocall$2"] },
        { "name": "IPv6v4_comp$ebnf$2$subexpression$1", "symbols": ["IPv6_hex", "IPv6v4_comp$ebnf$2$subexpression$1$macrocall$1", { "literal": ":" }] },
        { "name": "IPv6v4_comp$ebnf$2", "symbols": ["IPv6v4_comp$ebnf$2$subexpression$1"], "postprocess": id },
        { "name": "IPv6v4_comp$ebnf$2", "symbols": [], "postprocess": () => null },
        { "name": "IPv6v4_comp", "symbols": ["IPv6v4_comp$ebnf$1", "IPv6v4_comp$string$1", "IPv6v4_comp$ebnf$2", "IPv4_address_literal"] },
        { "name": "DIGIT", "symbols": [/[0-9]/], "postprocess": id },
        { "name": "ALPHA_DIGIT_U", "symbols": [/[0-9A-Za-z\u0080-\uFFFF]/], "postprocess": id },
        { "name": "ALPHA_DIGIT", "symbols": [/[0-9A-Za-z]/], "postprocess": id },
        { "name": "ALPHA_DIG_DASH", "symbols": [/[-0-9A-Za-z]/], "postprocess": id },
        { "name": "ALPHA_DIG_DASH_U", "symbols": [/[-0-9A-Za-z\u0080-\uFFFF]/], "postprocess": id },
        { "name": "HEXDIG", "symbols": [/[0-9A-Fa-f]/], "postprocess": id },
        { "name": "DQUOTE", "symbols": [{ "literal": "\"" }], "postprocess": id }
    ],
    ParserStart: "Reverse_path",
};
exports["default"] = grammar;
//# sourceMappingURL=grammar.js.map

/***/ }),

/***/ 9286:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.canonicalize = exports.canonicalize_quoted_string = exports.normalize = exports.normalize_dot_string = exports.parse = void 0;
// const punycode = require('punycode');
const nearley = __nccwpck_require__(3311);
const grammar_1 = __importDefault(__nccwpck_require__(9944));
grammar_1.default.ParserStart = "Mailbox";
const grammar = nearley.Grammar.fromCompiled(grammar_1.default);
// <https://tools.ietf.org/html/rfc5321#section-4.1.2>
function parse(address) {
    const parser = new nearley.Parser(grammar);
    parser.feed(address);
    if (parser.results.length !== 1) {
        throw new Error("address parsing failed: ambiguous grammar");
    }
    return parser.results[0];
}
exports.parse = parse;
/** Strip +something, strip '.'s, and map to lower case.
 */
function normalize_dot_string(dot_string) {
    const tagless = (function () {
        const plus_loc = dot_string.indexOf("+");
        if (plus_loc === -1) {
            return dot_string;
        }
        return dot_string.substr(0, plus_loc);
    })();
    const dotless = tagless.replace(/\./g, "");
    return dotless.toLowerCase();
}
exports.normalize_dot_string = normalize_dot_string;
/** The G style address normalization.
 */
function normalize(address) {
    var _a, _b;
    const a = parse(address);
    const domain = (_a = a.domainPart.AddressLiteral) !== null && _a !== void 0 ? _a : a.domainPart.DomainName.toLowerCase();
    const local = (_b = a.localPart.QuotedString) !== null && _b !== void 0 ? _b : normalize_dot_string(a.localPart.DotString);
    return `${local}@${domain}`;
}
exports.normalize = normalize;
function canonicalize_quoted_string(quoted_string) {
    const unquoted = quoted_string.substr(1).substr(0, quoted_string.length - 2);
    const unescaped = unquoted.replace(/(?:\\(.))/g, "$1");
    const reescaped = unescaped.replace(/(?:(["\\]))/g, "\\$1");
    return `"${reescaped}"`; // re-quote
}
exports.canonicalize_quoted_string = canonicalize_quoted_string;
/**
 * Apply a canonicalization consistent with standards to support
 * comparison as a string.
 */
function canonicalize(address) {
    var _a;
    const a = parse(address);
    const domain = (_a = a.domainPart.AddressLiteral) !== null && _a !== void 0 ? _a : a.domainPart.DomainName.toLowerCase();
    const local = a.localPart.QuotedString
        ? canonicalize_quoted_string(a.localPart.QuotedString)
        : a.localPart.DotString;
    return `${local}@${domain}`;
}
exports.canonicalize = canonicalize;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 4249:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

module.exports = __nccwpck_require__(709);


/***/ }),

/***/ 709:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var net = __nccwpck_require__(1808);
var tls = __nccwpck_require__(4404);
var http = __nccwpck_require__(3685);
var https = __nccwpck_require__(5687);
var events = __nccwpck_require__(2361);
var assert = __nccwpck_require__(9491);
var util = __nccwpck_require__(3837);


exports.httpOverHttp = httpOverHttp;
exports.httpsOverHttp = httpsOverHttp;
exports.httpOverHttps = httpOverHttps;
exports.httpsOverHttps = httpsOverHttps;


function httpOverHttp(options) {
  var agent = new TunnelingAgent(options);
  agent.request = http.request;
  return agent;
}

function httpsOverHttp(options) {
  var agent = new TunnelingAgent(options);
  agent.request = http.request;
  agent.createSocket = createSecureSocket;
  agent.defaultPort = 443;
  return agent;
}

function httpOverHttps(options) {
  var agent = new TunnelingAgent(options);
  agent.request = https.request;
  return agent;
}

function httpsOverHttps(options) {
  var agent = new TunnelingAgent(options);
  agent.request = https.request;
  agent.createSocket = createSecureSocket;
  agent.defaultPort = 443;
  return agent;
}


function TunnelingAgent(options) {
  var self = this;
  self.options = options || {};
  self.proxyOptions = self.options.proxy || {};
  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets;
  self.requests = [];
  self.sockets = [];

  self.on('free', function onFree(socket, host, port, localAddress) {
    var options = toOptions(host, port, localAddress);
    for (var i = 0, len = self.requests.length; i < len; ++i) {
      var pending = self.requests[i];
      if (pending.host === options.host && pending.port === options.port) {
        // Detect the request to connect same origin server,
        // reuse the connection.
        self.requests.splice(i, 1);
        pending.request.onSocket(socket);
        return;
      }
    }
    socket.destroy();
    self.removeSocket(socket);
  });
}
util.inherits(TunnelingAgent, events.EventEmitter);

TunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {
  var self = this;
  var options = mergeOptions({request: req}, self.options, toOptions(host, port, localAddress));

  if (self.sockets.length >= this.maxSockets) {
    // We are over limit so we'll add it to the queue.
    self.requests.push(options);
    return;
  }

  // If we are under maxSockets create a new one.
  self.createSocket(options, function(socket) {
    socket.on('free', onFree);
    socket.on('close', onCloseOrRemove);
    socket.on('agentRemove', onCloseOrRemove);
    req.onSocket(socket);

    function onFree() {
      self.emit('free', socket, options);
    }

    function onCloseOrRemove(err) {
      self.removeSocket(socket);
      socket.removeListener('free', onFree);
      socket.removeListener('close', onCloseOrRemove);
      socket.removeListener('agentRemove', onCloseOrRemove);
    }
  });
};

TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
  var self = this;
  var placeholder = {};
  self.sockets.push(placeholder);

  var connectOptions = mergeOptions({}, self.proxyOptions, {
    method: 'CONNECT',
    path: options.host + ':' + options.port,
    agent: false,
    headers: {
      host: options.host + ':' + options.port
    }
  });
  if (options.localAddress) {
    connectOptions.localAddress = options.localAddress;
  }
  if (connectOptions.proxyAuth) {
    connectOptions.headers = connectOptions.headers || {};
    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +
        new Buffer(connectOptions.proxyAuth).toString('base64');
  }

  debug('making CONNECT request');
  var connectReq = self.request(connectOptions);
  connectReq.useChunkedEncodingByDefault = false; // for v0.6
  connectReq.once('response', onResponse); // for v0.6
  connectReq.once('upgrade', onUpgrade);   // for v0.6
  connectReq.once('connect', onConnect);   // for v0.7 or later
  connectReq.once('error', onError);
  connectReq.end();

  function onResponse(res) {
    // Very hacky. This is necessary to avoid http-parser leaks.
    res.upgrade = true;
  }

  function onUpgrade(res, socket, head) {
    // Hacky.
    process.nextTick(function() {
      onConnect(res, socket, head);
    });
  }

  function onConnect(res, socket, head) {
    connectReq.removeAllListeners();
    socket.removeAllListeners();

    if (res.statusCode !== 200) {
      debug('tunneling socket could not be established, statusCode=%d',
        res.statusCode);
      socket.destroy();
      var error = new Error('tunneling socket could not be established, ' +
        'statusCode=' + res.statusCode);
      error.code = 'ECONNRESET';
      options.request.emit('error', error);
      self.removeSocket(placeholder);
      return;
    }
    if (head.length > 0) {
      debug('got illegal response body from proxy');
      socket.destroy();
      var error = new Error('got illegal response body from proxy');
      error.code = 'ECONNRESET';
      options.request.emit('error', error);
      self.removeSocket(placeholder);
      return;
    }
    debug('tunneling connection has established');
    self.sockets[self.sockets.indexOf(placeholder)] = socket;
    return cb(socket);
  }

  function onError(cause) {
    connectReq.removeAllListeners();

    debug('tunneling socket could not be established, cause=%s\n',
          cause.message, cause.stack);
    var error = new Error('tunneling socket could not be established, ' +
                          'cause=' + cause.message);
    error.code = 'ECONNRESET';
    options.request.emit('error', error);
    self.removeSocket(placeholder);
  }
};

TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
  var pos = this.sockets.indexOf(socket)
  if (pos === -1) {
    return;
  }
  this.sockets.splice(pos, 1);

  var pending = this.requests.shift();
  if (pending) {
    // If we have pending requests and a socket gets closed a new one
    // needs to be created to take over in the pool for the one that closed.
    this.createSocket(pending, function(socket) {
      pending.request.onSocket(socket);
    });
  }
};

function createSecureSocket(options, cb) {
  var self = this;
  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {
    var hostHeader = options.request.getHeader('host');
    var tlsOptions = mergeOptions({}, self.options, {
      socket: socket,
      servername: hostHeader ? hostHeader.replace(/:.*$/, '') : options.host
    });

    // 0 is dummy port for v0.6
    var secureSocket = tls.connect(0, tlsOptions);
    self.sockets[self.sockets.indexOf(socket)] = secureSocket;
    cb(secureSocket);
  });
}


function toOptions(host, port, localAddress) {
  if (typeof host === 'string') { // since v0.10
    return {
      host: host,
      port: port,
      localAddress: localAddress
    };
  }
  return host; // for v0.11 or later
}

function mergeOptions(target) {
  for (var i = 1, len = arguments.length; i < len; ++i) {
    var overrides = arguments[i];
    if (typeof overrides === 'object') {
      var keys = Object.keys(overrides);
      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
        var k = keys[j];
        if (overrides[k] !== undefined) {
          target[k] = overrides[k];
        }
      }
    }
  }
  return target;
}


var debug;
if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
  debug = function() {
    var args = Array.prototype.slice.call(arguments);
    if (typeof args[0] === 'string') {
      args[0] = 'TUNNEL: ' + args[0];
    } else {
      args.unshift('TUNNEL:');
    }
    console.error.apply(console, args);
  }
} else {
  debug = function() {};
}
exports.debug = debug; // for test


/***/ }),

/***/ 8892:
/***/ (function(__unused_webpack_module, exports) {

/** @license URI.js v4.4.1 (c) 2011 Gary Court. License: http://github.com/garycourt/uri-js */
(function (global, factory) {
	 true ? factory(exports) :
	0;
}(this, (function (exports) { 'use strict';

function merge() {
    for (var _len = arguments.length, sets = Array(_len), _key = 0; _key < _len; _key++) {
        sets[_key] = arguments[_key];
    }

    if (sets.length > 1) {
        sets[0] = sets[0].slice(0, -1);
        var xl = sets.length - 1;
        for (var x = 1; x < xl; ++x) {
            sets[x] = sets[x].slice(1, -1);
        }
        sets[xl] = sets[xl].slice(1);
        return sets.join('');
    } else {
        return sets[0];
    }
}
function subexp(str) {
    return "(?:" + str + ")";
}
function typeOf(o) {
    return o === undefined ? "undefined" : o === null ? "null" : Object.prototype.toString.call(o).split(" ").pop().split("]").shift().toLowerCase();
}
function toUpperCase(str) {
    return str.toUpperCase();
}
function toArray(obj) {
    return obj !== undefined && obj !== null ? obj instanceof Array ? obj : typeof obj.length !== "number" || obj.split || obj.setInterval || obj.call ? [obj] : Array.prototype.slice.call(obj) : [];
}
function assign(target, source) {
    var obj = target;
    if (source) {
        for (var key in source) {
            obj[key] = source[key];
        }
    }
    return obj;
}

function buildExps(isIRI) {
    var ALPHA$$ = "[A-Za-z]",
        CR$ = "[\\x0D]",
        DIGIT$$ = "[0-9]",
        DQUOTE$$ = "[\\x22]",
        HEXDIG$$ = merge(DIGIT$$, "[A-Fa-f]"),
        //case-insensitive
    LF$$ = "[\\x0A]",
        SP$$ = "[\\x20]",
        PCT_ENCODED$ = subexp(subexp("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%" + HEXDIG$$ + HEXDIG$$)),
        //expanded
    GEN_DELIMS$$ = "[\\:\\/\\?\\#\\[\\]\\@]",
        SUB_DELIMS$$ = "[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]",
        RESERVED$$ = merge(GEN_DELIMS$$, SUB_DELIMS$$),
        UCSCHAR$$ = isIRI ? "[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]" : "[]",
        //subset, excludes bidi control characters
    IPRIVATE$$ = isIRI ? "[\\uE000-\\uF8FF]" : "[]",
        //subset
    UNRESERVED$$ = merge(ALPHA$$, DIGIT$$, "[\\-\\.\\_\\~]", UCSCHAR$$),
        SCHEME$ = subexp(ALPHA$$ + merge(ALPHA$$, DIGIT$$, "[\\+\\-\\.]") + "*"),
        USERINFO$ = subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:]")) + "*"),
        DEC_OCTET$ = subexp(subexp("25[0-5]") + "|" + subexp("2[0-4]" + DIGIT$$) + "|" + subexp("1" + DIGIT$$ + DIGIT$$) + "|" + subexp("[1-9]" + DIGIT$$) + "|" + DIGIT$$),
        DEC_OCTET_RELAXED$ = subexp(subexp("25[0-5]") + "|" + subexp("2[0-4]" + DIGIT$$) + "|" + subexp("1" + DIGIT$$ + DIGIT$$) + "|" + subexp("0?[1-9]" + DIGIT$$) + "|0?0?" + DIGIT$$),
        //relaxed parsing rules
    IPV4ADDRESS$ = subexp(DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$),
        H16$ = subexp(HEXDIG$$ + "{1,4}"),
        LS32$ = subexp(subexp(H16$ + "\\:" + H16$) + "|" + IPV4ADDRESS$),
        IPV6ADDRESS1$ = subexp(subexp(H16$ + "\\:") + "{6}" + LS32$),
        //                           6( h16 ":" ) ls32
    IPV6ADDRESS2$ = subexp("\\:\\:" + subexp(H16$ + "\\:") + "{5}" + LS32$),
        //                      "::" 5( h16 ":" ) ls32
    IPV6ADDRESS3$ = subexp(subexp(H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{4}" + LS32$),
        //[               h16 ] "::" 4( h16 ":" ) ls32
    IPV6ADDRESS4$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,1}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{3}" + LS32$),
        //[ *1( h16 ":" ) h16 ] "::" 3( h16 ":" ) ls32
    IPV6ADDRESS5$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,2}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{2}" + LS32$),
        //[ *2( h16 ":" ) h16 ] "::" 2( h16 ":" ) ls32
    IPV6ADDRESS6$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,3}" + H16$) + "?\\:\\:" + H16$ + "\\:" + LS32$),
        //[ *3( h16 ":" ) h16 ] "::"    h16 ":"   ls32
    IPV6ADDRESS7$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,4}" + H16$) + "?\\:\\:" + LS32$),
        //[ *4( h16 ":" ) h16 ] "::"              ls32
    IPV6ADDRESS8$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,5}" + H16$) + "?\\:\\:" + H16$),
        //[ *5( h16 ":" ) h16 ] "::"              h16
    IPV6ADDRESS9$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,6}" + H16$) + "?\\:\\:"),
        //[ *6( h16 ":" ) h16 ] "::"
    IPV6ADDRESS$ = subexp([IPV6ADDRESS1$, IPV6ADDRESS2$, IPV6ADDRESS3$, IPV6ADDRESS4$, IPV6ADDRESS5$, IPV6ADDRESS6$, IPV6ADDRESS7$, IPV6ADDRESS8$, IPV6ADDRESS9$].join("|")),
        ZONEID$ = subexp(subexp(UNRESERVED$$ + "|" + PCT_ENCODED$) + "+"),
        //RFC 6874
    IPV6ADDRZ$ = subexp(IPV6ADDRESS$ + "\\%25" + ZONEID$),
        //RFC 6874
    IPV6ADDRZ_RELAXED$ = subexp(IPV6ADDRESS$ + subexp("\\%25|\\%(?!" + HEXDIG$$ + "{2})") + ZONEID$),
        //RFC 6874, with relaxed parsing rules
    IPVFUTURE$ = subexp("[vV]" + HEXDIG$$ + "+\\." + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:]") + "+"),
        IP_LITERAL$ = subexp("\\[" + subexp(IPV6ADDRZ_RELAXED$ + "|" + IPV6ADDRESS$ + "|" + IPVFUTURE$) + "\\]"),
        //RFC 6874
    REG_NAME$ = subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$)) + "*"),
        HOST$ = subexp(IP_LITERAL$ + "|" + IPV4ADDRESS$ + "(?!" + REG_NAME$ + ")" + "|" + REG_NAME$),
        PORT$ = subexp(DIGIT$$ + "*"),
        AUTHORITY$ = subexp(subexp(USERINFO$ + "@") + "?" + HOST$ + subexp("\\:" + PORT$) + "?"),
        PCHAR$ = subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@]")),
        SEGMENT$ = subexp(PCHAR$ + "*"),
        SEGMENT_NZ$ = subexp(PCHAR$ + "+"),
        SEGMENT_NZ_NC$ = subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\@]")) + "+"),
        PATH_ABEMPTY$ = subexp(subexp("\\/" + SEGMENT$) + "*"),
        PATH_ABSOLUTE$ = subexp("\\/" + subexp(SEGMENT_NZ$ + PATH_ABEMPTY$) + "?"),
        //simplified
    PATH_NOSCHEME$ = subexp(SEGMENT_NZ_NC$ + PATH_ABEMPTY$),
        //simplified
    PATH_ROOTLESS$ = subexp(SEGMENT_NZ$ + PATH_ABEMPTY$),
        //simplified
    PATH_EMPTY$ = "(?!" + PCHAR$ + ")",
        PATH$ = subexp(PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$),
        QUERY$ = subexp(subexp(PCHAR$ + "|" + merge("[\\/\\?]", IPRIVATE$$)) + "*"),
        FRAGMENT$ = subexp(subexp(PCHAR$ + "|[\\/\\?]") + "*"),
        HIER_PART$ = subexp(subexp("\\/\\/" + AUTHORITY$ + PATH_ABEMPTY$) + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$),
        URI$ = subexp(SCHEME$ + "\\:" + HIER_PART$ + subexp("\\?" + QUERY$) + "?" + subexp("\\#" + FRAGMENT$) + "?"),
        RELATIVE_PART$ = subexp(subexp("\\/\\/" + AUTHORITY$ + PATH_ABEMPTY$) + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_EMPTY$),
        RELATIVE$ = subexp(RELATIVE_PART$ + subexp("\\?" + QUERY$) + "?" + subexp("\\#" + FRAGMENT$) + "?"),
        URI_REFERENCE$ = subexp(URI$ + "|" + RELATIVE$),
        ABSOLUTE_URI$ = subexp(SCHEME$ + "\\:" + HIER_PART$ + subexp("\\?" + QUERY$) + "?"),
        GENERIC_REF$ = "^(" + SCHEME$ + ")\\:" + subexp(subexp("\\/\\/(" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$ + ")") + subexp("\\?(" + QUERY$ + ")") + "?" + subexp("\\#(" + FRAGMENT$ + ")") + "?$",
        RELATIVE_REF$ = "^(){0}" + subexp(subexp("\\/\\/(" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_EMPTY$ + ")") + subexp("\\?(" + QUERY$ + ")") + "?" + subexp("\\#(" + FRAGMENT$ + ")") + "?$",
        ABSOLUTE_REF$ = "^(" + SCHEME$ + ")\\:" + subexp(subexp("\\/\\/(" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$ + ")") + subexp("\\?(" + QUERY$ + ")") + "?$",
        SAMEDOC_REF$ = "^" + subexp("\\#(" + FRAGMENT$ + ")") + "?$",
        AUTHORITY_REF$ = "^" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?$";
    return {
        NOT_SCHEME: new RegExp(merge("[^]", ALPHA$$, DIGIT$$, "[\\+\\-\\.]"), "g"),
        NOT_USERINFO: new RegExp(merge("[^\\%\\:]", UNRESERVED$$, SUB_DELIMS$$), "g"),
        NOT_HOST: new RegExp(merge("[^\\%\\[\\]\\:]", UNRESERVED$$, SUB_DELIMS$$), "g"),
        NOT_PATH: new RegExp(merge("[^\\%\\/\\:\\@]", UNRESERVED$$, SUB_DELIMS$$), "g"),
        NOT_PATH_NOSCHEME: new RegExp(merge("[^\\%\\/\\@]", UNRESERVED$$, SUB_DELIMS$$), "g"),
        NOT_QUERY: new RegExp(merge("[^\\%]", UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@\\/\\?]", IPRIVATE$$), "g"),
        NOT_FRAGMENT: new RegExp(merge("[^\\%]", UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@\\/\\?]"), "g"),
        ESCAPE: new RegExp(merge("[^]", UNRESERVED$$, SUB_DELIMS$$), "g"),
        UNRESERVED: new RegExp(UNRESERVED$$, "g"),
        OTHER_CHARS: new RegExp(merge("[^\\%]", UNRESERVED$$, RESERVED$$), "g"),
        PCT_ENCODED: new RegExp(PCT_ENCODED$, "g"),
        IPV4ADDRESS: new RegExp("^(" + IPV4ADDRESS$ + ")$"),
        IPV6ADDRESS: new RegExp("^\\[?(" + IPV6ADDRESS$ + ")" + subexp(subexp("\\%25|\\%(?!" + HEXDIG$$ + "{2})") + "(" + ZONEID$ + ")") + "?\\]?$") //RFC 6874, with relaxed parsing rules
    };
}
var URI_PROTOCOL = buildExps(false);

var IRI_PROTOCOL = buildExps(true);

var slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();













var toConsumableArray = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  } else {
    return Array.from(arr);
  }
};

/** Highest positive signed 32-bit float value */

var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

/** Bootstring parameters */
var base = 36;
var tMin = 1;
var tMax = 26;
var skew = 38;
var damp = 700;
var initialBias = 72;
var initialN = 128; // 0x80
var delimiter = '-'; // '\x2D'

/** Regular expressions */
var regexPunycode = /^xn--/;
var regexNonASCII = /[^\0-\x7E]/; // non-ASCII chars
var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

/** Error messages */
var errors = {
	'overflow': 'Overflow: input needs wider integers to process',
	'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
	'invalid-input': 'Invalid input'
};

/** Convenience shortcuts */
var baseMinusTMin = base - tMin;
var floor = Math.floor;
var stringFromCharCode = String.fromCharCode;

/*--------------------------------------------------------------------------*/

/**
 * A generic error utility function.
 * @private
 * @param {String} type The error type.
 * @returns {Error} Throws a `RangeError` with the applicable error message.
 */
function error$1(type) {
	throw new RangeError(errors[type]);
}

/**
 * A generic `Array#map` utility function.
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} callback The function that gets called for every array
 * item.
 * @returns {Array} A new array of values returned by the callback function.
 */
function map(array, fn) {
	var result = [];
	var length = array.length;
	while (length--) {
		result[length] = fn(array[length]);
	}
	return result;
}

/**
 * A simple `Array#map`-like wrapper to work with domain name strings or email
 * addresses.
 * @private
 * @param {String} domain The domain name or email address.
 * @param {Function} callback The function that gets called for every
 * character.
 * @returns {Array} A new string of characters returned by the callback
 * function.
 */
function mapDomain(string, fn) {
	var parts = string.split('@');
	var result = '';
	if (parts.length > 1) {
		// In email addresses, only the domain name should be punycoded. Leave
		// the local part (i.e. everything up to `@`) intact.
		result = parts[0] + '@';
		string = parts[1];
	}
	// Avoid `split(regex)` for IE8 compatibility. See #17.
	string = string.replace(regexSeparators, '\x2E');
	var labels = string.split('.');
	var encoded = map(labels, fn).join('.');
	return result + encoded;
}

/**
 * Creates an array containing the numeric code points of each Unicode
 * character in the string. While JavaScript uses UCS-2 internally,
 * this function will convert a pair of surrogate halves (each of which
 * UCS-2 exposes as separate characters) into a single code point,
 * matching UTF-16.
 * @see `punycode.ucs2.encode`
 * @see <https://mathiasbynens.be/notes/javascript-encoding>
 * @memberOf punycode.ucs2
 * @name decode
 * @param {String} string The Unicode input string (UCS-2).
 * @returns {Array} The new array of code points.
 */
function ucs2decode(string) {
	var output = [];
	var counter = 0;
	var length = string.length;
	while (counter < length) {
		var value = string.charCodeAt(counter++);
		if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
			// It's a high surrogate, and there is a next character.
			var extra = string.charCodeAt(counter++);
			if ((extra & 0xFC00) == 0xDC00) {
				// Low surrogate.
				output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
			} else {
				// It's an unmatched surrogate; only append this code unit, in case the
				// next code unit is the high surrogate of a surrogate pair.
				output.push(value);
				counter--;
			}
		} else {
			output.push(value);
		}
	}
	return output;
}

/**
 * Creates a string based on an array of numeric code points.
 * @see `punycode.ucs2.decode`
 * @memberOf punycode.ucs2
 * @name encode
 * @param {Array} codePoints The array of numeric code points.
 * @returns {String} The new Unicode string (UCS-2).
 */
var ucs2encode = function ucs2encode(array) {
	return String.fromCodePoint.apply(String, toConsumableArray(array));
};

/**
 * Converts a basic code point into a digit/integer.
 * @see `digitToBasic()`
 * @private
 * @param {Number} codePoint The basic numeric code point value.
 * @returns {Number} The numeric value of a basic code point (for use in
 * representing integers) in the range `0` to `base - 1`, or `base` if
 * the code point does not represent a value.
 */
var basicToDigit = function basicToDigit(codePoint) {
	if (codePoint - 0x30 < 0x0A) {
		return codePoint - 0x16;
	}
	if (codePoint - 0x41 < 0x1A) {
		return codePoint - 0x41;
	}
	if (codePoint - 0x61 < 0x1A) {
		return codePoint - 0x61;
	}
	return base;
};

/**
 * Converts a digit/integer into a basic code point.
 * @see `basicToDigit()`
 * @private
 * @param {Number} digit The numeric value of a basic code point.
 * @returns {Number} The basic code point whose value (when used for
 * representing integers) is `digit`, which needs to be in the range
 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
 * used; else, the lowercase form is used. The behavior is undefined
 * if `flag` is non-zero and `digit` has no uppercase form.
 */
var digitToBasic = function digitToBasic(digit, flag) {
	//  0..25 map to ASCII a..z or A..Z
	// 26..35 map to ASCII 0..9
	return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
};

/**
 * Bias adaptation function as per section 3.4 of RFC 3492.
 * https://tools.ietf.org/html/rfc3492#section-3.4
 * @private
 */
var adapt = function adapt(delta, numPoints, firstTime) {
	var k = 0;
	delta = firstTime ? floor(delta / damp) : delta >> 1;
	delta += floor(delta / numPoints);
	for (; /* no initialization */delta > baseMinusTMin * tMax >> 1; k += base) {
		delta = floor(delta / baseMinusTMin);
	}
	return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
};

/**
 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
 * symbols.
 * @memberOf punycode
 * @param {String} input The Punycode string of ASCII-only symbols.
 * @returns {String} The resulting string of Unicode symbols.
 */
var decode = function decode(input) {
	// Don't use UCS-2.
	var output = [];
	var inputLength = input.length;
	var i = 0;
	var n = initialN;
	var bias = initialBias;

	// Handle the basic code points: let `basic` be the number of input code
	// points before the last delimiter, or `0` if there is none, then copy
	// the first basic code points to the output.

	var basic = input.lastIndexOf(delimiter);
	if (basic < 0) {
		basic = 0;
	}

	for (var j = 0; j < basic; ++j) {
		// if it's not a basic code point
		if (input.charCodeAt(j) >= 0x80) {
			error$1('not-basic');
		}
		output.push(input.charCodeAt(j));
	}

	// Main decoding loop: start just after the last delimiter if any basic code
	// points were copied; start at the beginning otherwise.

	for (var index = basic > 0 ? basic + 1 : 0; index < inputLength;) /* no final expression */{

		// `index` is the index of the next character to be consumed.
		// Decode a generalized variable-length integer into `delta`,
		// which gets added to `i`. The overflow checking is easier
		// if we increase `i` as we go, then subtract off its starting
		// value at the end to obtain `delta`.
		var oldi = i;
		for (var w = 1, k = base;; /* no condition */k += base) {

			if (index >= inputLength) {
				error$1('invalid-input');
			}

			var digit = basicToDigit(input.charCodeAt(index++));

			if (digit >= base || digit > floor((maxInt - i) / w)) {
				error$1('overflow');
			}

			i += digit * w;
			var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

			if (digit < t) {
				break;
			}

			var baseMinusT = base - t;
			if (w > floor(maxInt / baseMinusT)) {
				error$1('overflow');
			}

			w *= baseMinusT;
		}

		var out = output.length + 1;
		bias = adapt(i - oldi, out, oldi == 0);

		// `i` was supposed to wrap around from `out` to `0`,
		// incrementing `n` each time, so we'll fix that now:
		if (floor(i / out) > maxInt - n) {
			error$1('overflow');
		}

		n += floor(i / out);
		i %= out;

		// Insert `n` at position `i` of the output.
		output.splice(i++, 0, n);
	}

	return String.fromCodePoint.apply(String, output);
};

/**
 * Converts a string of Unicode symbols (e.g. a domain name label) to a
 * Punycode string of ASCII-only symbols.
 * @memberOf punycode
 * @param {String} input The string of Unicode symbols.
 * @returns {String} The resulting Punycode string of ASCII-only symbols.
 */
var encode = function encode(input) {
	var output = [];

	// Convert the input in UCS-2 to an array of Unicode code points.
	input = ucs2decode(input);

	// Cache the length.
	var inputLength = input.length;

	// Initialize the state.
	var n = initialN;
	var delta = 0;
	var bias = initialBias;

	// Handle the basic code points.
	var _iteratorNormalCompletion = true;
	var _didIteratorError = false;
	var _iteratorError = undefined;

	try {
		for (var _iterator = input[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
			var _currentValue2 = _step.value;

			if (_currentValue2 < 0x80) {
				output.push(stringFromCharCode(_currentValue2));
			}
		}
	} catch (err) {
		_didIteratorError = true;
		_iteratorError = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion && _iterator.return) {
				_iterator.return();
			}
		} finally {
			if (_didIteratorError) {
				throw _iteratorError;
			}
		}
	}

	var basicLength = output.length;
	var handledCPCount = basicLength;

	// `handledCPCount` is the number of code points that have been handled;
	// `basicLength` is the number of basic code points.

	// Finish the basic string with a delimiter unless it's empty.
	if (basicLength) {
		output.push(delimiter);
	}

	// Main encoding loop:
	while (handledCPCount < inputLength) {

		// All non-basic code points < n have been handled already. Find the next
		// larger one:
		var m = maxInt;
		var _iteratorNormalCompletion2 = true;
		var _didIteratorError2 = false;
		var _iteratorError2 = undefined;

		try {
			for (var _iterator2 = input[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
				var currentValue = _step2.value;

				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow.
		} catch (err) {
			_didIteratorError2 = true;
			_iteratorError2 = err;
		} finally {
			try {
				if (!_iteratorNormalCompletion2 && _iterator2.return) {
					_iterator2.return();
				}
			} finally {
				if (_didIteratorError2) {
					throw _iteratorError2;
				}
			}
		}

		var handledCPCountPlusOne = handledCPCount + 1;
		if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
			error$1('overflow');
		}

		delta += (m - n) * handledCPCountPlusOne;
		n = m;

		var _iteratorNormalCompletion3 = true;
		var _didIteratorError3 = false;
		var _iteratorError3 = undefined;

		try {
			for (var _iterator3 = input[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
				var _currentValue = _step3.value;

				if (_currentValue < n && ++delta > maxInt) {
					error$1('overflow');
				}
				if (_currentValue == n) {
					// Represent delta as a generalized variable-length integer.
					var q = delta;
					for (var k = base;; /* no condition */k += base) {
						var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
						if (q < t) {
							break;
						}
						var qMinusT = q - t;
						var baseMinusT = base - t;
						output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}
		} catch (err) {
			_didIteratorError3 = true;
			_iteratorError3 = err;
		} finally {
			try {
				if (!_iteratorNormalCompletion3 && _iterator3.return) {
					_iterator3.return();
				}
			} finally {
				if (_didIteratorError3) {
					throw _iteratorError3;
				}
			}
		}

		++delta;
		++n;
	}
	return output.join('');
};

/**
 * Converts a Punycode string representing a domain name or an email address
 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
 * it doesn't matter if you call it on a string that has already been
 * converted to Unicode.
 * @memberOf punycode
 * @param {String} input The Punycoded domain name or email address to
 * convert to Unicode.
 * @returns {String} The Unicode representation of the given Punycode
 * string.
 */
var toUnicode = function toUnicode(input) {
	return mapDomain(input, function (string) {
		return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
	});
};

/**
 * Converts a Unicode string representing a domain name or an email address to
 * Punycode. Only the non-ASCII parts of the domain name will be converted,
 * i.e. it doesn't matter if you call it with a domain that's already in
 * ASCII.
 * @memberOf punycode
 * @param {String} input The domain name or email address to convert, as a
 * Unicode string.
 * @returns {String} The Punycode representation of the given domain name or
 * email address.
 */
var toASCII = function toASCII(input) {
	return mapDomain(input, function (string) {
		return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
	});
};

/*--------------------------------------------------------------------------*/

/** Define the public API */
var punycode = {
	/**
  * A string representing the current Punycode.js version number.
  * @memberOf punycode
  * @type String
  */
	'version': '2.1.0',
	/**
  * An object of methods to convert from JavaScript's internal character
  * representation (UCS-2) to Unicode code points, and back.
  * @see <https://mathiasbynens.be/notes/javascript-encoding>
  * @memberOf punycode
  * @type Object
  */
	'ucs2': {
		'decode': ucs2decode,
		'encode': ucs2encode
	},
	'decode': decode,
	'encode': encode,
	'toASCII': toASCII,
	'toUnicode': toUnicode
};

/**
 * URI.js
 *
 * @fileoverview An RFC 3986 compliant, scheme extendable URI parsing/validating/resolving library for JavaScript.
 * @author <a href="mailto:gary.court@gmail.com">Gary Court</a>
 * @see http://github.com/garycourt/uri-js
 */
/**
 * Copyright 2011 Gary Court. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 *    1. Redistributions of source code must retain the above copyright notice, this list of
 *       conditions and the following disclaimer.
 *
 *    2. Redistributions in binary form must reproduce the above copyright notice, this list
 *       of conditions and the following disclaimer in the documentation and/or other materials
 *       provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY GARY COURT ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GARY COURT OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * The views and conclusions contained in the software and documentation are those of the
 * authors and should not be interpreted as representing official policies, either expressed
 * or implied, of Gary Court.
 */
var SCHEMES = {};
function pctEncChar(chr) {
    var c = chr.charCodeAt(0);
    var e = void 0;
    if (c < 16) e = "%0" + c.toString(16).toUpperCase();else if (c < 128) e = "%" + c.toString(16).toUpperCase();else if (c < 2048) e = "%" + (c >> 6 | 192).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();else e = "%" + (c >> 12 | 224).toString(16).toUpperCase() + "%" + (c >> 6 & 63 | 128).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();
    return e;
}
function pctDecChars(str) {
    var newStr = "";
    var i = 0;
    var il = str.length;
    while (i < il) {
        var c = parseInt(str.substr(i + 1, 2), 16);
        if (c < 128) {
            newStr += String.fromCharCode(c);
            i += 3;
        } else if (c >= 194 && c < 224) {
            if (il - i >= 6) {
                var c2 = parseInt(str.substr(i + 4, 2), 16);
                newStr += String.fromCharCode((c & 31) << 6 | c2 & 63);
            } else {
                newStr += str.substr(i, 6);
            }
            i += 6;
        } else if (c >= 224) {
            if (il - i >= 9) {
                var _c = parseInt(str.substr(i + 4, 2), 16);
                var c3 = parseInt(str.substr(i + 7, 2), 16);
                newStr += String.fromCharCode((c & 15) << 12 | (_c & 63) << 6 | c3 & 63);
            } else {
                newStr += str.substr(i, 9);
            }
            i += 9;
        } else {
            newStr += str.substr(i, 3);
            i += 3;
        }
    }
    return newStr;
}
function _normalizeComponentEncoding(components, protocol) {
    function decodeUnreserved(str) {
        var decStr = pctDecChars(str);
        return !decStr.match(protocol.UNRESERVED) ? str : decStr;
    }
    if (components.scheme) components.scheme = String(components.scheme).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_SCHEME, "");
    if (components.userinfo !== undefined) components.userinfo = String(components.userinfo).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_USERINFO, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
    if (components.host !== undefined) components.host = String(components.host).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_HOST, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
    if (components.path !== undefined) components.path = String(components.path).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(components.scheme ? protocol.NOT_PATH : protocol.NOT_PATH_NOSCHEME, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
    if (components.query !== undefined) components.query = String(components.query).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_QUERY, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
    if (components.fragment !== undefined) components.fragment = String(components.fragment).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_FRAGMENT, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
    return components;
}

function _stripLeadingZeros(str) {
    return str.replace(/^0*(.*)/, "$1") || "0";
}
function _normalizeIPv4(host, protocol) {
    var matches = host.match(protocol.IPV4ADDRESS) || [];

    var _matches = slicedToArray(matches, 2),
        address = _matches[1];

    if (address) {
        return address.split(".").map(_stripLeadingZeros).join(".");
    } else {
        return host;
    }
}
function _normalizeIPv6(host, protocol) {
    var matches = host.match(protocol.IPV6ADDRESS) || [];

    var _matches2 = slicedToArray(matches, 3),
        address = _matches2[1],
        zone = _matches2[2];

    if (address) {
        var _address$toLowerCase$ = address.toLowerCase().split('::').reverse(),
            _address$toLowerCase$2 = slicedToArray(_address$toLowerCase$, 2),
            last = _address$toLowerCase$2[0],
            first = _address$toLowerCase$2[1];

        var firstFields = first ? first.split(":").map(_stripLeadingZeros) : [];
        var lastFields = last.split(":").map(_stripLeadingZeros);
        var isLastFieldIPv4Address = protocol.IPV4ADDRESS.test(lastFields[lastFields.length - 1]);
        var fieldCount = isLastFieldIPv4Address ? 7 : 8;
        var lastFieldsStart = lastFields.length - fieldCount;
        var fields = Array(fieldCount);
        for (var x = 0; x < fieldCount; ++x) {
            fields[x] = firstFields[x] || lastFields[lastFieldsStart + x] || '';
        }
        if (isLastFieldIPv4Address) {
            fields[fieldCount - 1] = _normalizeIPv4(fields[fieldCount - 1], protocol);
        }
        var allZeroFields = fields.reduce(function (acc, field, index) {
            if (!field || field === "0") {
                var lastLongest = acc[acc.length - 1];
                if (lastLongest && lastLongest.index + lastLongest.length === index) {
                    lastLongest.length++;
                } else {
                    acc.push({ index: index, length: 1 });
                }
            }
            return acc;
        }, []);
        var longestZeroFields = allZeroFields.sort(function (a, b) {
            return b.length - a.length;
        })[0];
        var newHost = void 0;
        if (longestZeroFields && longestZeroFields.length > 1) {
            var newFirst = fields.slice(0, longestZeroFields.index);
            var newLast = fields.slice(longestZeroFields.index + longestZeroFields.length);
            newHost = newFirst.join(":") + "::" + newLast.join(":");
        } else {
            newHost = fields.join(":");
        }
        if (zone) {
            newHost += "%" + zone;
        }
        return newHost;
    } else {
        return host;
    }
}
var URI_PARSE = /^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i;
var NO_MATCH_IS_UNDEFINED = "".match(/(){0}/)[1] === undefined;
function parse(uriString) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var components = {};
    var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
    if (options.reference === "suffix") uriString = (options.scheme ? options.scheme + ":" : "") + "//" + uriString;
    var matches = uriString.match(URI_PARSE);
    if (matches) {
        if (NO_MATCH_IS_UNDEFINED) {
            //store each component
            components.scheme = matches[1];
            components.userinfo = matches[3];
            components.host = matches[4];
            components.port = parseInt(matches[5], 10);
            components.path = matches[6] || "";
            components.query = matches[7];
            components.fragment = matches[8];
            //fix port number
            if (isNaN(components.port)) {
                components.port = matches[5];
            }
        } else {
            //IE FIX for improper RegExp matching
            //store each component
            components.scheme = matches[1] || undefined;
            components.userinfo = uriString.indexOf("@") !== -1 ? matches[3] : undefined;
            components.host = uriString.indexOf("//") !== -1 ? matches[4] : undefined;
            components.port = parseInt(matches[5], 10);
            components.path = matches[6] || "";
            components.query = uriString.indexOf("?") !== -1 ? matches[7] : undefined;
            components.fragment = uriString.indexOf("#") !== -1 ? matches[8] : undefined;
            //fix port number
            if (isNaN(components.port)) {
                components.port = uriString.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/) ? matches[4] : undefined;
            }
        }
        if (components.host) {
            //normalize IP hosts
            components.host = _normalizeIPv6(_normalizeIPv4(components.host, protocol), protocol);
        }
        //determine reference type
        if (components.scheme === undefined && components.userinfo === undefined && components.host === undefined && components.port === undefined && !components.path && components.query === undefined) {
            components.reference = "same-document";
        } else if (components.scheme === undefined) {
            components.reference = "relative";
        } else if (components.fragment === undefined) {
            components.reference = "absolute";
        } else {
            components.reference = "uri";
        }
        //check for reference errors
        if (options.reference && options.reference !== "suffix" && options.reference !== components.reference) {
            components.error = components.error || "URI is not a " + options.reference + " reference.";
        }
        //find scheme handler
        var schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()];
        //check if scheme can't handle IRIs
        if (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {
            //if host component is a domain name
            if (components.host && (options.domainHost || schemeHandler && schemeHandler.domainHost)) {
                //convert Unicode IDN -> ASCII IDN
                try {
                    components.host = punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase());
                } catch (e) {
                    components.error = components.error || "Host's domain name can not be converted to ASCII via punycode: " + e;
                }
            }
            //convert IRI -> URI
            _normalizeComponentEncoding(components, URI_PROTOCOL);
        } else {
            //normalize encodings
            _normalizeComponentEncoding(components, protocol);
        }
        //perform scheme specific parsing
        if (schemeHandler && schemeHandler.parse) {
            schemeHandler.parse(components, options);
        }
    } else {
        components.error = components.error || "URI can not be parsed.";
    }
    return components;
}

function _recomposeAuthority(components, options) {
    var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
    var uriTokens = [];
    if (components.userinfo !== undefined) {
        uriTokens.push(components.userinfo);
        uriTokens.push("@");
    }
    if (components.host !== undefined) {
        //normalize IP hosts, add brackets and escape zone separator for IPv6
        uriTokens.push(_normalizeIPv6(_normalizeIPv4(String(components.host), protocol), protocol).replace(protocol.IPV6ADDRESS, function (_, $1, $2) {
            return "[" + $1 + ($2 ? "%25" + $2 : "") + "]";
        }));
    }
    if (typeof components.port === "number" || typeof components.port === "string") {
        uriTokens.push(":");
        uriTokens.push(String(components.port));
    }
    return uriTokens.length ? uriTokens.join("") : undefined;
}

var RDS1 = /^\.\.?\//;
var RDS2 = /^\/\.(\/|$)/;
var RDS3 = /^\/\.\.(\/|$)/;
var RDS5 = /^\/?(?:.|\n)*?(?=\/|$)/;
function removeDotSegments(input) {
    var output = [];
    while (input.length) {
        if (input.match(RDS1)) {
            input = input.replace(RDS1, "");
        } else if (input.match(RDS2)) {
            input = input.replace(RDS2, "/");
        } else if (input.match(RDS3)) {
            input = input.replace(RDS3, "/");
            output.pop();
        } else if (input === "." || input === "..") {
            input = "";
        } else {
            var im = input.match(RDS5);
            if (im) {
                var s = im[0];
                input = input.slice(s.length);
                output.push(s);
            } else {
                throw new Error("Unexpected dot segment condition");
            }
        }
    }
    return output.join("");
}

function serialize(components) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var protocol = options.iri ? IRI_PROTOCOL : URI_PROTOCOL;
    var uriTokens = [];
    //find scheme handler
    var schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()];
    //perform scheme specific serialization
    if (schemeHandler && schemeHandler.serialize) schemeHandler.serialize(components, options);
    if (components.host) {
        //if host component is an IPv6 address
        if (protocol.IPV6ADDRESS.test(components.host)) {}
        //TODO: normalize IPv6 address as per RFC 5952

        //if host component is a domain name
        else if (options.domainHost || schemeHandler && schemeHandler.domainHost) {
                //convert IDN via punycode
                try {
                    components.host = !options.iri ? punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase()) : punycode.toUnicode(components.host);
                } catch (e) {
                    components.error = components.error || "Host's domain name can not be converted to " + (!options.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
                }
            }
    }
    //normalize encoding
    _normalizeComponentEncoding(components, protocol);
    if (options.reference !== "suffix" && components.scheme) {
        uriTokens.push(components.scheme);
        uriTokens.push(":");
    }
    var authority = _recomposeAuthority(components, options);
    if (authority !== undefined) {
        if (options.reference !== "suffix") {
            uriTokens.push("//");
        }
        uriTokens.push(authority);
        if (components.path && components.path.charAt(0) !== "/") {
            uriTokens.push("/");
        }
    }
    if (components.path !== undefined) {
        var s = components.path;
        if (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {
            s = removeDotSegments(s);
        }
        if (authority === undefined) {
            s = s.replace(/^\/\//, "/%2F"); //don't allow the path to start with "//"
        }
        uriTokens.push(s);
    }
    if (components.query !== undefined) {
        uriTokens.push("?");
        uriTokens.push(components.query);
    }
    if (components.fragment !== undefined) {
        uriTokens.push("#");
        uriTokens.push(components.fragment);
    }
    return uriTokens.join(""); //merge tokens into a string
}

function resolveComponents(base, relative) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var skipNormalization = arguments[3];

    var target = {};
    if (!skipNormalization) {
        base = parse(serialize(base, options), options); //normalize base components
        relative = parse(serialize(relative, options), options); //normalize relative components
    }
    options = options || {};
    if (!options.tolerant && relative.scheme) {
        target.scheme = relative.scheme;
        //target.authority = relative.authority;
        target.userinfo = relative.userinfo;
        target.host = relative.host;
        target.port = relative.port;
        target.path = removeDotSegments(relative.path || "");
        target.query = relative.query;
    } else {
        if (relative.userinfo !== undefined || relative.host !== undefined || relative.port !== undefined) {
            //target.authority = relative.authority;
            target.userinfo = relative.userinfo;
            target.host = relative.host;
            target.port = relative.port;
            target.path = removeDotSegments(relative.path || "");
            target.query = relative.query;
        } else {
            if (!relative.path) {
                target.path = base.path;
                if (relative.query !== undefined) {
                    target.query = relative.query;
                } else {
                    target.query = base.query;
                }
            } else {
                if (relative.path.charAt(0) === "/") {
                    target.path = removeDotSegments(relative.path);
                } else {
                    if ((base.userinfo !== undefined || base.host !== undefined || base.port !== undefined) && !base.path) {
                        target.path = "/" + relative.path;
                    } else if (!base.path) {
                        target.path = relative.path;
                    } else {
                        target.path = base.path.slice(0, base.path.lastIndexOf("/") + 1) + relative.path;
                    }
                    target.path = removeDotSegments(target.path);
                }
                target.query = relative.query;
            }
            //target.authority = base.authority;
            target.userinfo = base.userinfo;
            target.host = base.host;
            target.port = base.port;
        }
        target.scheme = base.scheme;
    }
    target.fragment = relative.fragment;
    return target;
}

function resolve(baseURI, relativeURI, options) {
    var schemelessOptions = assign({ scheme: 'null' }, options);
    return serialize(resolveComponents(parse(baseURI, schemelessOptions), parse(relativeURI, schemelessOptions), schemelessOptions, true), schemelessOptions);
}

function normalize(uri, options) {
    if (typeof uri === "string") {
        uri = serialize(parse(uri, options), options);
    } else if (typeOf(uri) === "object") {
        uri = parse(serialize(uri, options), options);
    }
    return uri;
}

function equal(uriA, uriB, options) {
    if (typeof uriA === "string") {
        uriA = serialize(parse(uriA, options), options);
    } else if (typeOf(uriA) === "object") {
        uriA = serialize(uriA, options);
    }
    if (typeof uriB === "string") {
        uriB = serialize(parse(uriB, options), options);
    } else if (typeOf(uriB) === "object") {
        uriB = serialize(uriB, options);
    }
    return uriA === uriB;
}

function escapeComponent(str, options) {
    return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.ESCAPE : IRI_PROTOCOL.ESCAPE, pctEncChar);
}

function unescapeComponent(str, options) {
    return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.PCT_ENCODED : IRI_PROTOCOL.PCT_ENCODED, pctDecChars);
}

var handler = {
    scheme: "http",
    domainHost: true,
    parse: function parse(components, options) {
        //report missing host
        if (!components.host) {
            components.error = components.error || "HTTP URIs must have a host.";
        }
        return components;
    },
    serialize: function serialize(components, options) {
        var secure = String(components.scheme).toLowerCase() === "https";
        //normalize the default port
        if (components.port === (secure ? 443 : 80) || components.port === "") {
            components.port = undefined;
        }
        //normalize the empty path
        if (!components.path) {
            components.path = "/";
        }
        //NOTE: We do not parse query strings for HTTP URIs
        //as WWW Form Url Encoded query strings are part of the HTML4+ spec,
        //and not the HTTP spec.
        return components;
    }
};

var handler$1 = {
    scheme: "https",
    domainHost: handler.domainHost,
    parse: handler.parse,
    serialize: handler.serialize
};

function isSecure(wsComponents) {
    return typeof wsComponents.secure === 'boolean' ? wsComponents.secure : String(wsComponents.scheme).toLowerCase() === "wss";
}
//RFC 6455
var handler$2 = {
    scheme: "ws",
    domainHost: true,
    parse: function parse(components, options) {
        var wsComponents = components;
        //indicate if the secure flag is set
        wsComponents.secure = isSecure(wsComponents);
        //construct resouce name
        wsComponents.resourceName = (wsComponents.path || '/') + (wsComponents.query ? '?' + wsComponents.query : '');
        wsComponents.path = undefined;
        wsComponents.query = undefined;
        return wsComponents;
    },
    serialize: function serialize(wsComponents, options) {
        //normalize the default port
        if (wsComponents.port === (isSecure(wsComponents) ? 443 : 80) || wsComponents.port === "") {
            wsComponents.port = undefined;
        }
        //ensure scheme matches secure flag
        if (typeof wsComponents.secure === 'boolean') {
            wsComponents.scheme = wsComponents.secure ? 'wss' : 'ws';
            wsComponents.secure = undefined;
        }
        //reconstruct path from resource name
        if (wsComponents.resourceName) {
            var _wsComponents$resourc = wsComponents.resourceName.split('?'),
                _wsComponents$resourc2 = slicedToArray(_wsComponents$resourc, 2),
                path = _wsComponents$resourc2[0],
                query = _wsComponents$resourc2[1];

            wsComponents.path = path && path !== '/' ? path : undefined;
            wsComponents.query = query;
            wsComponents.resourceName = undefined;
        }
        //forbid fragment component
        wsComponents.fragment = undefined;
        return wsComponents;
    }
};

var handler$3 = {
    scheme: "wss",
    domainHost: handler$2.domainHost,
    parse: handler$2.parse,
    serialize: handler$2.serialize
};

var O = {};
var isIRI = true;
//RFC 3986
var UNRESERVED$$ = "[A-Za-z0-9\\-\\.\\_\\~" + (isIRI ? "\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF" : "") + "]";
var HEXDIG$$ = "[0-9A-Fa-f]"; //case-insensitive
var PCT_ENCODED$ = subexp(subexp("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%" + HEXDIG$$ + HEXDIG$$)); //expanded
//RFC 5322, except these symbols as per RFC 6068: @ : / ? # [ ] & ; =
//const ATEXT$$ = "[A-Za-z0-9\\!\\#\\$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~]";
//const WSP$$ = "[\\x20\\x09]";
//const OBS_QTEXT$$ = "[\\x01-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]";  //(%d1-8 / %d11-12 / %d14-31 / %d127)
//const QTEXT$$ = merge("[\\x21\\x23-\\x5B\\x5D-\\x7E]", OBS_QTEXT$$);  //%d33 / %d35-91 / %d93-126 / obs-qtext
//const VCHAR$$ = "[\\x21-\\x7E]";
//const WSP$$ = "[\\x20\\x09]";
//const OBS_QP$ = subexp("\\\\" + merge("[\\x00\\x0D\\x0A]", OBS_QTEXT$$));  //%d0 / CR / LF / obs-qtext
//const FWS$ = subexp(subexp(WSP$$ + "*" + "\\x0D\\x0A") + "?" + WSP$$ + "+");
//const QUOTED_PAIR$ = subexp(subexp("\\\\" + subexp(VCHAR$$ + "|" + WSP$$)) + "|" + OBS_QP$);
//const QUOTED_STRING$ = subexp('\\"' + subexp(FWS$ + "?" + QCONTENT$) + "*" + FWS$ + "?" + '\\"');
var ATEXT$$ = "[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]";
var QTEXT$$ = "[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]";
var VCHAR$$ = merge(QTEXT$$, "[\\\"\\\\]");
var SOME_DELIMS$$ = "[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]";
var UNRESERVED = new RegExp(UNRESERVED$$, "g");
var PCT_ENCODED = new RegExp(PCT_ENCODED$, "g");
var NOT_LOCAL_PART = new RegExp(merge("[^]", ATEXT$$, "[\\.]", '[\\"]', VCHAR$$), "g");
var NOT_HFNAME = new RegExp(merge("[^]", UNRESERVED$$, SOME_DELIMS$$), "g");
var NOT_HFVALUE = NOT_HFNAME;
function decodeUnreserved(str) {
    var decStr = pctDecChars(str);
    return !decStr.match(UNRESERVED) ? str : decStr;
}
var handler$4 = {
    scheme: "mailto",
    parse: function parse$$1(components, options) {
        var mailtoComponents = components;
        var to = mailtoComponents.to = mailtoComponents.path ? mailtoComponents.path.split(",") : [];
        mailtoComponents.path = undefined;
        if (mailtoComponents.query) {
            var unknownHeaders = false;
            var headers = {};
            var hfields = mailtoComponents.query.split("&");
            for (var x = 0, xl = hfields.length; x < xl; ++x) {
                var hfield = hfields[x].split("=");
                switch (hfield[0]) {
                    case "to":
                        var toAddrs = hfield[1].split(",");
                        for (var _x = 0, _xl = toAddrs.length; _x < _xl; ++_x) {
                            to.push(toAddrs[_x]);
                        }
                        break;
                    case "subject":
                        mailtoComponents.subject = unescapeComponent(hfield[1], options);
                        break;
                    case "body":
                        mailtoComponents.body = unescapeComponent(hfield[1], options);
                        break;
                    default:
                        unknownHeaders = true;
                        headers[unescapeComponent(hfield[0], options)] = unescapeComponent(hfield[1], options);
                        break;
                }
            }
            if (unknownHeaders) mailtoComponents.headers = headers;
        }
        mailtoComponents.query = undefined;
        for (var _x2 = 0, _xl2 = to.length; _x2 < _xl2; ++_x2) {
            var addr = to[_x2].split("@");
            addr[0] = unescapeComponent(addr[0]);
            if (!options.unicodeSupport) {
                //convert Unicode IDN -> ASCII IDN
                try {
                    addr[1] = punycode.toASCII(unescapeComponent(addr[1], options).toLowerCase());
                } catch (e) {
                    mailtoComponents.error = mailtoComponents.error || "Email address's domain name can not be converted to ASCII via punycode: " + e;
                }
            } else {
                addr[1] = unescapeComponent(addr[1], options).toLowerCase();
            }
            to[_x2] = addr.join("@");
        }
        return mailtoComponents;
    },
    serialize: function serialize$$1(mailtoComponents, options) {
        var components = mailtoComponents;
        var to = toArray(mailtoComponents.to);
        if (to) {
            for (var x = 0, xl = to.length; x < xl; ++x) {
                var toAddr = String(to[x]);
                var atIdx = toAddr.lastIndexOf("@");
                var localPart = toAddr.slice(0, atIdx).replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_LOCAL_PART, pctEncChar);
                var domain = toAddr.slice(atIdx + 1);
                //convert IDN via punycode
                try {
                    domain = !options.iri ? punycode.toASCII(unescapeComponent(domain, options).toLowerCase()) : punycode.toUnicode(domain);
                } catch (e) {
                    components.error = components.error || "Email address's domain name can not be converted to " + (!options.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
                }
                to[x] = localPart + "@" + domain;
            }
            components.path = to.join(",");
        }
        var headers = mailtoComponents.headers = mailtoComponents.headers || {};
        if (mailtoComponents.subject) headers["subject"] = mailtoComponents.subject;
        if (mailtoComponents.body) headers["body"] = mailtoComponents.body;
        var fields = [];
        for (var name in headers) {
            if (headers[name] !== O[name]) {
                fields.push(name.replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFNAME, pctEncChar) + "=" + headers[name].replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFVALUE, pctEncChar));
            }
        }
        if (fields.length) {
            components.query = fields.join("&");
        }
        return components;
    }
};

var URN_PARSE = /^([^\:]+)\:(.*)/;
//RFC 2141
var handler$5 = {
    scheme: "urn",
    parse: function parse$$1(components, options) {
        var matches = components.path && components.path.match(URN_PARSE);
        var urnComponents = components;
        if (matches) {
            var scheme = options.scheme || urnComponents.scheme || "urn";
            var nid = matches[1].toLowerCase();
            var nss = matches[2];
            var urnScheme = scheme + ":" + (options.nid || nid);
            var schemeHandler = SCHEMES[urnScheme];
            urnComponents.nid = nid;
            urnComponents.nss = nss;
            urnComponents.path = undefined;
            if (schemeHandler) {
                urnComponents = schemeHandler.parse(urnComponents, options);
            }
        } else {
            urnComponents.error = urnComponents.error || "URN can not be parsed.";
        }
        return urnComponents;
    },
    serialize: function serialize$$1(urnComponents, options) {
        var scheme = options.scheme || urnComponents.scheme || "urn";
        var nid = urnComponents.nid;
        var urnScheme = scheme + ":" + (options.nid || nid);
        var schemeHandler = SCHEMES[urnScheme];
        if (schemeHandler) {
            urnComponents = schemeHandler.serialize(urnComponents, options);
        }
        var uriComponents = urnComponents;
        var nss = urnComponents.nss;
        uriComponents.path = (nid || options.nid) + ":" + nss;
        return uriComponents;
    }
};

var UUID = /^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/;
//RFC 4122
var handler$6 = {
    scheme: "urn:uuid",
    parse: function parse(urnComponents, options) {
        var uuidComponents = urnComponents;
        uuidComponents.uuid = uuidComponents.nss;
        uuidComponents.nss = undefined;
        if (!options.tolerant && (!uuidComponents.uuid || !uuidComponents.uuid.match(UUID))) {
            uuidComponents.error = uuidComponents.error || "UUID is not valid.";
        }
        return uuidComponents;
    },
    serialize: function serialize(uuidComponents, options) {
        var urnComponents = uuidComponents;
        //normalize UUID
        urnComponents.nss = (uuidComponents.uuid || "").toLowerCase();
        return urnComponents;
    }
};

SCHEMES[handler.scheme] = handler;
SCHEMES[handler$1.scheme] = handler$1;
SCHEMES[handler$2.scheme] = handler$2;
SCHEMES[handler$3.scheme] = handler$3;
SCHEMES[handler$4.scheme] = handler$4;
SCHEMES[handler$5.scheme] = handler$5;
SCHEMES[handler$6.scheme] = handler$6;

exports.SCHEMES = SCHEMES;
exports.pctEncChar = pctEncChar;
exports.pctDecChars = pctDecChars;
exports.parse = parse;
exports.removeDotSegments = removeDotSegments;
exports.serialize = serialize;
exports.resolveComponents = resolveComponents;
exports.resolve = resolve;
exports.normalize = normalize;
exports.equal = equal;
exports.escapeComponent = escapeComponent;
exports.unescapeComponent = unescapeComponent;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=uri.all.js.map


/***/ }),

/***/ 4558:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ipRegex = __nccwpck_require__(2221);

var tlds = __nccwpck_require__(4772);
/* istanbul ignore next */


var SafeRegExp = function () {
  try {
    var RE2 = __nccwpck_require__(9315);

    return typeof RE2 === 'function' ? RE2 : RegExp;
  } catch (_unused) {
    return RegExp;
  }
}();

var ipv4 = ipRegex.v4().source;
var ipv6 = ipRegex.v6().source;

module.exports = function (options) {
  options = _objectSpread({
    exact: false,
    strict: false,
    auth: false,
    localhost: true,
    parens: false,
    apostrophes: false,
    trailingPeriod: false,
    ipv4: true,
    ipv6: true,
    tlds: tlds,
    returnString: false
  }, options);
  var protocol = "(?:(?:[a-z]+:)?//)".concat(options.strict ? '' : '?'); // Add option to disable matching urls with HTTP Basic Authentication
  // <https://github.com/kevva/url-regex/pull/63>

  var auth = options.auth ? '(?:\\S+(?::\\S*)?@)?' : '';
  var host = "(?:(?:[a-z\\u00a1-\\uffff0-9][-_]*)*[a-z\\u00a1-\\uffff0-9]+)";
  var domain = "(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*"; // Add ability to pass custom list of tlds
  // <https://github.com/kevva/url-regex/pull/66>

  var tld = "(?:\\.".concat(options.strict ? "(?:[a-z\\u00a1-\\uffff]{2,})" : "(?:".concat(options.tlds.sort(function (a, b) {
    return b.length - a.length;
  }).join('|'), ")"), ")").concat(options.trailingPeriod ? '\\.?' : '');
  var port = '(?::\\d{2,5})?'; // Not accept closing parenthesis
  // <https://github.com/kevva/url-regex/pull/35>
  // Don't allow apostrophes
  // <https://github.com/kevva/url-regex/pull/55>

  var path = options.parens ? options.apostrophes ? '(?:[/?#][^\\s"]*)?' : '(?:[/?#][^\\s"\']*)?' : options.apostrophes ? '(?:[/?#][^\\s"\\)]*)?' : '(?:[/?#][^\\s"\\)\']*)?'; // Added IPv6 support
  // <https://github.com/kevva/url-regex/issues/60>

  var regex = "(?:".concat(protocol, "|www\\.)").concat(auth, "(?:");
  if (options.localhost) regex += 'localhost|';
  if (options.ipv4) regex += "".concat(ipv4, "|");
  if (options.ipv6) regex += "".concat(ipv6, "|");
  regex += "".concat(host).concat(domain).concat(tld, ")").concat(port).concat(path); // Add option to return the regex string instead of a RegExp

  if (options.returnString) return regex;
  return options.exact ? new SafeRegExp("(?:^".concat(regex, "$)"), 'i') : new SafeRegExp(regex, 'ig');
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJpcFJlZ2V4IiwicmVxdWlyZSIsInRsZHMiLCJTYWZlUmVnRXhwIiwiUkUyIiwiUmVnRXhwIiwiaXB2NCIsInY0Iiwic291cmNlIiwiaXB2NiIsInY2IiwibW9kdWxlIiwiZXhwb3J0cyIsIm9wdGlvbnMiLCJleGFjdCIsInN0cmljdCIsImF1dGgiLCJsb2NhbGhvc3QiLCJwYXJlbnMiLCJhcG9zdHJvcGhlcyIsInRyYWlsaW5nUGVyaW9kIiwicmV0dXJuU3RyaW5nIiwicHJvdG9jb2wiLCJob3N0IiwiZG9tYWluIiwidGxkIiwic29ydCIsImEiLCJiIiwibGVuZ3RoIiwiam9pbiIsInBvcnQiLCJwYXRoIiwicmVnZXgiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsSUFBTUEsT0FBTyxHQUFHQyxPQUFPLENBQUMsVUFBRCxDQUF2Qjs7QUFDQSxJQUFNQyxJQUFJLEdBQUdELE9BQU8sQ0FBQyxNQUFELENBQXBCO0FBRUE7OztBQUNBLElBQU1FLFVBQVUsR0FBSSxZQUFNO0FBQ3hCLE1BQUk7QUFDRixRQUFNQyxHQUFHLEdBQUdILE9BQU8sQ0FBQyxLQUFELENBQW5COztBQUNBLFdBQU8sT0FBT0csR0FBUCxLQUFlLFVBQWYsR0FBNEJBLEdBQTVCLEdBQWtDQyxNQUF6QztBQUNELEdBSEQsQ0FHRSxnQkFBTTtBQUNOLFdBQU9BLE1BQVA7QUFDRDtBQUNGLENBUGtCLEVBQW5COztBQVFBLElBQU1DLElBQUksR0FBR04sT0FBTyxDQUFDTyxFQUFSLEdBQWFDLE1BQTFCO0FBQ0EsSUFBTUMsSUFBSSxHQUFHVCxPQUFPLENBQUNVLEVBQVIsR0FBYUYsTUFBMUI7O0FBRUFHLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixVQUFDQyxPQUFELEVBQWE7QUFDNUJBLEVBQUFBLE9BQU87QUFDTEMsSUFBQUEsS0FBSyxFQUFFLEtBREY7QUFFTEMsSUFBQUEsTUFBTSxFQUFFLEtBRkg7QUFHTEMsSUFBQUEsSUFBSSxFQUFFLEtBSEQ7QUFJTEMsSUFBQUEsU0FBUyxFQUFFLElBSk47QUFLTEMsSUFBQUEsTUFBTSxFQUFFLEtBTEg7QUFNTEMsSUFBQUEsV0FBVyxFQUFFLEtBTlI7QUFPTEMsSUFBQUEsY0FBYyxFQUFFLEtBUFg7QUFRTGQsSUFBQUEsSUFBSSxFQUFFLElBUkQ7QUFTTEcsSUFBQUEsSUFBSSxFQUFFLElBVEQ7QUFVTFAsSUFBQUEsSUFBSSxFQUFKQSxJQVZLO0FBV0xtQixJQUFBQSxZQUFZLEVBQUU7QUFYVCxLQVlGUixPQVpFLENBQVA7QUFlQSxNQUFNUyxRQUFRLCtCQUF3QlQsT0FBTyxDQUFDRSxNQUFSLEdBQWlCLEVBQWpCLEdBQXNCLEdBQTlDLENBQWQsQ0FoQjRCLENBaUI1QjtBQUNBOztBQUNBLE1BQU1DLElBQUksR0FBR0gsT0FBTyxDQUFDRyxJQUFSLEdBQWUsc0JBQWYsR0FBd0MsRUFBckQ7QUFDQSxNQUFNTyxJQUFJLEdBQUcsK0RBQWI7QUFDQSxNQUFNQyxNQUFNLEdBQ1YsZ0VBREYsQ0FyQjRCLENBdUI1QjtBQUNBOztBQUNBLE1BQU1DLEdBQUcsbUJBQ1BaLE9BQU8sQ0FBQ0UsTUFBUixHQUNJLDhCQURKLGdCQUVVRixPQUFPLENBQUNYLElBQVIsQ0FBYXdCLElBQWIsQ0FBa0IsVUFBQ0MsQ0FBRCxFQUFJQyxDQUFKO0FBQUEsV0FBVUEsQ0FBQyxDQUFDQyxNQUFGLEdBQVdGLENBQUMsQ0FBQ0UsTUFBdkI7QUFBQSxHQUFsQixFQUFpREMsSUFBakQsQ0FBc0QsR0FBdEQsQ0FGVixNQURPLGNBSUxqQixPQUFPLENBQUNPLGNBQVIsR0FBeUIsTUFBekIsR0FBa0MsRUFKN0IsQ0FBVDtBQU1BLE1BQU1XLElBQUksR0FBRyxnQkFBYixDQS9CNEIsQ0FnQzVCO0FBQ0E7QUFDQTtBQUNBOztBQUNBLE1BQU1DLElBQUksR0FBR25CLE9BQU8sQ0FBQ0ssTUFBUixHQUNUTCxPQUFPLENBQUNNLFdBQVIsR0FDRSxvQkFERixHQUVFLHNCQUhPLEdBSVROLE9BQU8sQ0FBQ00sV0FBUixHQUNBLHVCQURBLEdBRUEseUJBTkosQ0FwQzRCLENBNEM1QjtBQUNBOztBQUNBLE1BQUljLEtBQUssZ0JBQVNYLFFBQVQscUJBQTRCTixJQUE1QixRQUFUO0FBQ0EsTUFBSUgsT0FBTyxDQUFDSSxTQUFaLEVBQXVCZ0IsS0FBSyxJQUFJLFlBQVQ7QUFDdkIsTUFBSXBCLE9BQU8sQ0FBQ1AsSUFBWixFQUFrQjJCLEtBQUssY0FBTzNCLElBQVAsTUFBTDtBQUNsQixNQUFJTyxPQUFPLENBQUNKLElBQVosRUFBa0J3QixLQUFLLGNBQU94QixJQUFQLE1BQUw7QUFDbEJ3QixFQUFBQSxLQUFLLGNBQU9WLElBQVAsU0FBY0MsTUFBZCxTQUF1QkMsR0FBdkIsY0FBOEJNLElBQTlCLFNBQXFDQyxJQUFyQyxDQUFMLENBbEQ0QixDQW9ENUI7O0FBQ0EsTUFBSW5CLE9BQU8sQ0FBQ1EsWUFBWixFQUEwQixPQUFPWSxLQUFQO0FBRTFCLFNBQU9wQixPQUFPLENBQUNDLEtBQVIsR0FDSCxJQUFJWCxVQUFKLGVBQXNCOEIsS0FBdEIsU0FBaUMsR0FBakMsQ0FERyxHQUVILElBQUk5QixVQUFKLENBQWU4QixLQUFmLEVBQXNCLElBQXRCLENBRko7QUFHRCxDQTFERCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGlwUmVnZXggPSByZXF1aXJlKCdpcC1yZWdleCcpO1xuY29uc3QgdGxkcyA9IHJlcXVpcmUoJ3RsZHMnKTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmNvbnN0IFNhZmVSZWdFeHAgPSAoKCkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IFJFMiA9IHJlcXVpcmUoJ3JlMicpO1xuICAgIHJldHVybiB0eXBlb2YgUkUyID09PSAnZnVuY3Rpb24nID8gUkUyIDogUmVnRXhwO1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gUmVnRXhwO1xuICB9XG59KSgpO1xuY29uc3QgaXB2NCA9IGlwUmVnZXgudjQoKS5zb3VyY2U7XG5jb25zdCBpcHY2ID0gaXBSZWdleC52NigpLnNvdXJjZTtcblxubW9kdWxlLmV4cG9ydHMgPSAob3B0aW9ucykgPT4ge1xuICBvcHRpb25zID0ge1xuICAgIGV4YWN0OiBmYWxzZSxcbiAgICBzdHJpY3Q6IGZhbHNlLFxuICAgIGF1dGg6IGZhbHNlLFxuICAgIGxvY2FsaG9zdDogdHJ1ZSxcbiAgICBwYXJlbnM6IGZhbHNlLFxuICAgIGFwb3N0cm9waGVzOiBmYWxzZSxcbiAgICB0cmFpbGluZ1BlcmlvZDogZmFsc2UsXG4gICAgaXB2NDogdHJ1ZSxcbiAgICBpcHY2OiB0cnVlLFxuICAgIHRsZHMsXG4gICAgcmV0dXJuU3RyaW5nOiBmYWxzZSxcbiAgICAuLi5vcHRpb25zXG4gIH07XG5cbiAgY29uc3QgcHJvdG9jb2wgPSBgKD86KD86W2Etel0rOik/Ly8pJHtvcHRpb25zLnN0cmljdCA/ICcnIDogJz8nfWA7XG4gIC8vIEFkZCBvcHRpb24gdG8gZGlzYWJsZSBtYXRjaGluZyB1cmxzIHdpdGggSFRUUCBCYXNpYyBBdXRoZW50aWNhdGlvblxuICAvLyA8aHR0cHM6Ly9naXRodWIuY29tL2tldnZhL3VybC1yZWdleC9wdWxsLzYzPlxuICBjb25zdCBhdXRoID0gb3B0aW9ucy5hdXRoID8gJyg/OlxcXFxTKyg/OjpcXFxcUyopP0ApPycgOiAnJztcbiAgY29uc3QgaG9zdCA9ICcoPzooPzpbYS16XFxcXHUwMGExLVxcXFx1ZmZmZjAtOV1bLV9dKikqW2EtelxcXFx1MDBhMS1cXFxcdWZmZmYwLTldKyknO1xuICBjb25zdCBkb21haW4gPVxuICAgICcoPzpcXFxcLig/OlthLXpcXFxcdTAwYTEtXFxcXHVmZmZmMC05XS0qKSpbYS16XFxcXHUwMGExLVxcXFx1ZmZmZjAtOV0rKSonO1xuICAvLyBBZGQgYWJpbGl0eSB0byBwYXNzIGN1c3RvbSBsaXN0IG9mIHRsZHNcbiAgLy8gPGh0dHBzOi8vZ2l0aHViLmNvbS9rZXZ2YS91cmwtcmVnZXgvcHVsbC82Nj5cbiAgY29uc3QgdGxkID0gYCg/OlxcXFwuJHtcbiAgICBvcHRpb25zLnN0cmljdFxuICAgICAgPyAnKD86W2EtelxcXFx1MDBhMS1cXFxcdWZmZmZdezIsfSknXG4gICAgICA6IGAoPzoke29wdGlvbnMudGxkcy5zb3J0KChhLCBiKSA9PiBiLmxlbmd0aCAtIGEubGVuZ3RoKS5qb2luKCd8Jyl9KWBcbiAgfSkke29wdGlvbnMudHJhaWxpbmdQZXJpb2QgPyAnXFxcXC4/JyA6ICcnfWA7XG5cbiAgY29uc3QgcG9ydCA9ICcoPzo6XFxcXGR7Miw1fSk/JztcbiAgLy8gTm90IGFjY2VwdCBjbG9zaW5nIHBhcmVudGhlc2lzXG4gIC8vIDxodHRwczovL2dpdGh1Yi5jb20va2V2dmEvdXJsLXJlZ2V4L3B1bGwvMzU+XG4gIC8vIERvbid0IGFsbG93IGFwb3N0cm9waGVzXG4gIC8vIDxodHRwczovL2dpdGh1Yi5jb20va2V2dmEvdXJsLXJlZ2V4L3B1bGwvNTU+XG4gIGNvbnN0IHBhdGggPSBvcHRpb25zLnBhcmVuc1xuICAgID8gb3B0aW9ucy5hcG9zdHJvcGhlc1xuICAgICAgPyAnKD86Wy8/I11bXlxcXFxzXCJdKik/J1xuICAgICAgOiAnKD86Wy8/I11bXlxcXFxzXCJcXCddKik/J1xuICAgIDogb3B0aW9ucy5hcG9zdHJvcGhlc1xuICAgID8gJyg/OlsvPyNdW15cXFxcc1wiXFxcXCldKik/J1xuICAgIDogJyg/OlsvPyNdW15cXFxcc1wiXFxcXClcXCddKik/JztcblxuICAvLyBBZGRlZCBJUHY2IHN1cHBvcnRcbiAgLy8gPGh0dHBzOi8vZ2l0aHViLmNvbS9rZXZ2YS91cmwtcmVnZXgvaXNzdWVzLzYwPlxuICBsZXQgcmVnZXggPSBgKD86JHtwcm90b2NvbH18d3d3XFxcXC4pJHthdXRofSg/OmA7XG4gIGlmIChvcHRpb25zLmxvY2FsaG9zdCkgcmVnZXggKz0gJ2xvY2FsaG9zdHwnO1xuICBpZiAob3B0aW9ucy5pcHY0KSByZWdleCArPSBgJHtpcHY0fXxgO1xuICBpZiAob3B0aW9ucy5pcHY2KSByZWdleCArPSBgJHtpcHY2fXxgO1xuICByZWdleCArPSBgJHtob3N0fSR7ZG9tYWlufSR7dGxkfSkke3BvcnR9JHtwYXRofWA7XG5cbiAgLy8gQWRkIG9wdGlvbiB0byByZXR1cm4gdGhlIHJlZ2V4IHN0cmluZyBpbnN0ZWFkIG9mIGEgUmVnRXhwXG4gIGlmIChvcHRpb25zLnJldHVyblN0cmluZykgcmV0dXJuIHJlZ2V4O1xuXG4gIHJldHVybiBvcHRpb25zLmV4YWN0XG4gICAgPyBuZXcgU2FmZVJlZ0V4cChgKD86XiR7cmVnZXh9JClgLCAnaScpXG4gICAgOiBuZXcgU2FmZVJlZ0V4cChyZWdleCwgJ2lnJyk7XG59O1xuIl19

/***/ }),

/***/ 2033:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "v1", ({
  enumerable: true,
  get: function () {
    return _v.default;
  }
}));
Object.defineProperty(exports, "v3", ({
  enumerable: true,
  get: function () {
    return _v2.default;
  }
}));
Object.defineProperty(exports, "v4", ({
  enumerable: true,
  get: function () {
    return _v3.default;
  }
}));
Object.defineProperty(exports, "v5", ({
  enumerable: true,
  get: function () {
    return _v4.default;
  }
}));
Object.defineProperty(exports, "NIL", ({
  enumerable: true,
  get: function () {
    return _nil.default;
  }
}));
Object.defineProperty(exports, "version", ({
  enumerable: true,
  get: function () {
    return _version.default;
  }
}));
Object.defineProperty(exports, "validate", ({
  enumerable: true,
  get: function () {
    return _validate.default;
  }
}));
Object.defineProperty(exports, "stringify", ({
  enumerable: true,
  get: function () {
    return _stringify.default;
  }
}));
Object.defineProperty(exports, "parse", ({
  enumerable: true,
  get: function () {
    return _parse.default;
  }
}));

var _v = _interopRequireDefault(__nccwpck_require__(9370));

var _v2 = _interopRequireDefault(__nccwpck_require__(8638));

var _v3 = _interopRequireDefault(__nccwpck_require__(3519));

var _v4 = _interopRequireDefault(__nccwpck_require__(8239));

var _nil = _interopRequireDefault(__nccwpck_require__(680));

var _version = _interopRequireDefault(__nccwpck_require__(3609));

var _validate = _interopRequireDefault(__nccwpck_require__(6009));

var _stringify = _interopRequireDefault(__nccwpck_require__(9729));

var _parse = _interopRequireDefault(__nccwpck_require__(8951));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),

/***/ 7276:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _crypto = _interopRequireDefault(__nccwpck_require__(6113));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function md5(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === 'string') {
    bytes = Buffer.from(bytes, 'utf8');
  }

  return _crypto.default.createHash('md5').update(bytes).digest();
}

var _default = md5;
exports["default"] = _default;

/***/ }),

/***/ 680:
/***/ ((__unused_webpack_module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _default = '00000000-0000-0000-0000-000000000000';
exports["default"] = _default;

/***/ }),

/***/ 8951:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _validate = _interopRequireDefault(__nccwpck_require__(6009));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parse(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  let v;
  const arr = new Uint8Array(16); // Parse ########-....-....-....-............

  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 0xff;
  arr[2] = v >>> 8 & 0xff;
  arr[3] = v & 0xff; // Parse ........-####-....-....-............

  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 0xff; // Parse ........-....-####-....-............

  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 0xff; // Parse ........-....-....-####-............

  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 0xff; // Parse ........-....-....-....-############
  // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
  arr[11] = v / 0x100000000 & 0xff;
  arr[12] = v >>> 24 & 0xff;
  arr[13] = v >>> 16 & 0xff;
  arr[14] = v >>> 8 & 0xff;
  arr[15] = v & 0xff;
  return arr;
}

var _default = parse;
exports["default"] = _default;

/***/ }),

/***/ 646:
/***/ ((__unused_webpack_module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
exports["default"] = _default;

/***/ }),

/***/ 7548:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = rng;

var _crypto = _interopRequireDefault(__nccwpck_require__(6113));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate

let poolPtr = rnds8Pool.length;

function rng() {
  if (poolPtr > rnds8Pool.length - 16) {
    _crypto.default.randomFillSync(rnds8Pool);

    poolPtr = 0;
  }

  return rnds8Pool.slice(poolPtr, poolPtr += 16);
}

/***/ }),

/***/ 3557:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _crypto = _interopRequireDefault(__nccwpck_require__(6113));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function sha1(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === 'string') {
    bytes = Buffer.from(bytes, 'utf8');
  }

  return _crypto.default.createHash('sha1').update(bytes).digest();
}

var _default = sha1;
exports["default"] = _default;

/***/ }),

/***/ 9729:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _validate = _interopRequireDefault(__nccwpck_require__(6009));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
const byteToHex = [];

for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).substr(1));
}

function stringify(arr, offset = 0) {
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

var _default = stringify;
exports["default"] = _default;

/***/ }),

/***/ 9370:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _rng = _interopRequireDefault(__nccwpck_require__(7548));

var _stringify = _interopRequireDefault(__nccwpck_require__(9729));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html
let _nodeId;

let _clockseq; // Previous uuid creation time


let _lastMSecs = 0;
let _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

function v1(options, buf, offset) {
  let i = buf && offset || 0;
  const b = buf || new Array(16);
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189

  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || _rng.default)();

    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }

    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock

  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval


  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  } // Per 4.2.1.2 Throw error if too many uuids are requested


  if (nsecs >= 10000) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

  msecs += 12219292800000; // `time_low`

  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff; // `time_mid`

  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff; // `time_high_and_version`

  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

  b[i++] = clockseq & 0xff; // `node`

  for (let n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf || (0, _stringify.default)(b);
}

var _default = v1;
exports["default"] = _default;

/***/ }),

/***/ 8638:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _v = _interopRequireDefault(__nccwpck_require__(6694));

var _md = _interopRequireDefault(__nccwpck_require__(7276));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const v3 = (0, _v.default)('v3', 0x30, _md.default);
var _default = v3;
exports["default"] = _default;

/***/ }),

/***/ 6694:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = _default;
exports.URL = exports.DNS = void 0;

var _stringify = _interopRequireDefault(__nccwpck_require__(9729));

var _parse = _interopRequireDefault(__nccwpck_require__(8951));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  const bytes = [];

  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }

  return bytes;
}

const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
exports.DNS = DNS;
const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
exports.URL = URL;

function _default(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === 'string') {
      value = stringToBytes(value);
    }

    if (typeof namespace === 'string') {
      namespace = (0, _parse.default)(namespace);
    }

    if (namespace.length !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    } // Compute hash of namespace and value, Per 4.3
    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
    // hashfunc([...namespace, ... value])`


    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;

    if (buf) {
      offset = offset || 0;

      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }

      return buf;
    }

    return (0, _stringify.default)(bytes);
  } // Function#name is not settable on some platforms (#270)


  try {
    generateUUID.name = name; // eslint-disable-next-line no-empty
  } catch (err) {} // For CommonJS default export support


  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}

/***/ }),

/***/ 3519:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _rng = _interopRequireDefault(__nccwpck_require__(7548));

var _stringify = _interopRequireDefault(__nccwpck_require__(9729));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function v4(options, buf, offset) {
  options = options || {};

  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`


  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return (0, _stringify.default)(rnds);
}

var _default = v4;
exports["default"] = _default;

/***/ }),

/***/ 8239:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _v = _interopRequireDefault(__nccwpck_require__(6694));

var _sha = _interopRequireDefault(__nccwpck_require__(3557));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const v5 = (0, _v.default)('v5', 0x50, _sha.default);
var _default = v5;
exports["default"] = _default;

/***/ }),

/***/ 6009:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _regex = _interopRequireDefault(__nccwpck_require__(646));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function validate(uuid) {
  return typeof uuid === 'string' && _regex.default.test(uuid);
}

var _default = validate;
exports["default"] = _default;

/***/ }),

/***/ 3609:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _validate = _interopRequireDefault(__nccwpck_require__(6009));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function version(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  return parseInt(uuid.substr(14, 1), 16);
}

var _default = version;
exports["default"] = _default;

/***/ }),

/***/ 6484:
/***/ (function(__unused_webpack_module, exports) {

/**
 * web-streams-polyfill v3.2.1
 */
(function (global, factory) {
     true ? factory(exports) :
    0;
}(this, (function (exports) { 'use strict';

    /// <reference lib="es2015.symbol" />
    const SymbolPolyfill = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ?
        Symbol :
        description => `Symbol(${description})`;

    /// <reference lib="dom" />
    function noop() {
        return undefined;
    }
    function getGlobals() {
        if (typeof self !== 'undefined') {
            return self;
        }
        else if (typeof window !== 'undefined') {
            return window;
        }
        else if (typeof global !== 'undefined') {
            return global;
        }
        return undefined;
    }
    const globals = getGlobals();

    function typeIsObject(x) {
        return (typeof x === 'object' && x !== null) || typeof x === 'function';
    }
    const rethrowAssertionErrorRejection = noop;

    const originalPromise = Promise;
    const originalPromiseThen = Promise.prototype.then;
    const originalPromiseResolve = Promise.resolve.bind(originalPromise);
    const originalPromiseReject = Promise.reject.bind(originalPromise);
    function newPromise(executor) {
        return new originalPromise(executor);
    }
    function promiseResolvedWith(value) {
        return originalPromiseResolve(value);
    }
    function promiseRejectedWith(reason) {
        return originalPromiseReject(reason);
    }
    function PerformPromiseThen(promise, onFulfilled, onRejected) {
        // There doesn't appear to be any way to correctly emulate the behaviour from JavaScript, so this is just an
        // approximation.
        return originalPromiseThen.call(promise, onFulfilled, onRejected);
    }
    function uponPromise(promise, onFulfilled, onRejected) {
        PerformPromiseThen(PerformPromiseThen(promise, onFulfilled, onRejected), undefined, rethrowAssertionErrorRejection);
    }
    function uponFulfillment(promise, onFulfilled) {
        uponPromise(promise, onFulfilled);
    }
    function uponRejection(promise, onRejected) {
        uponPromise(promise, undefined, onRejected);
    }
    function transformPromiseWith(promise, fulfillmentHandler, rejectionHandler) {
        return PerformPromiseThen(promise, fulfillmentHandler, rejectionHandler);
    }
    function setPromiseIsHandledToTrue(promise) {
        PerformPromiseThen(promise, undefined, rethrowAssertionErrorRejection);
    }
    const queueMicrotask = (() => {
        const globalQueueMicrotask = globals && globals.queueMicrotask;
        if (typeof globalQueueMicrotask === 'function') {
            return globalQueueMicrotask;
        }
        const resolvedPromise = promiseResolvedWith(undefined);
        return (fn) => PerformPromiseThen(resolvedPromise, fn);
    })();
    function reflectCall(F, V, args) {
        if (typeof F !== 'function') {
            throw new TypeError('Argument is not a function');
        }
        return Function.prototype.apply.call(F, V, args);
    }
    function promiseCall(F, V, args) {
        try {
            return promiseResolvedWith(reflectCall(F, V, args));
        }
        catch (value) {
            return promiseRejectedWith(value);
        }
    }

    // Original from Chromium
    // https://chromium.googlesource.com/chromium/src/+/0aee4434a4dba42a42abaea9bfbc0cd196a63bc1/third_party/blink/renderer/core/streams/SimpleQueue.js
    const QUEUE_MAX_ARRAY_SIZE = 16384;
    /**
     * Simple queue structure.
     *
     * Avoids scalability issues with using a packed array directly by using
     * multiple arrays in a linked list and keeping the array size bounded.
     */
    class SimpleQueue {
        constructor() {
            this._cursor = 0;
            this._size = 0;
            // _front and _back are always defined.
            this._front = {
                _elements: [],
                _next: undefined
            };
            this._back = this._front;
            // The cursor is used to avoid calling Array.shift().
            // It contains the index of the front element of the array inside the
            // front-most node. It is always in the range [0, QUEUE_MAX_ARRAY_SIZE).
            this._cursor = 0;
            // When there is only one node, size === elements.length - cursor.
            this._size = 0;
        }
        get length() {
            return this._size;
        }
        // For exception safety, this method is structured in order:
        // 1. Read state
        // 2. Calculate required state mutations
        // 3. Perform state mutations
        push(element) {
            const oldBack = this._back;
            let newBack = oldBack;
            if (oldBack._elements.length === QUEUE_MAX_ARRAY_SIZE - 1) {
                newBack = {
                    _elements: [],
                    _next: undefined
                };
            }
            // push() is the mutation most likely to throw an exception, so it
            // goes first.
            oldBack._elements.push(element);
            if (newBack !== oldBack) {
                this._back = newBack;
                oldBack._next = newBack;
            }
            ++this._size;
        }
        // Like push(), shift() follows the read -> calculate -> mutate pattern for
        // exception safety.
        shift() { // must not be called on an empty queue
            const oldFront = this._front;
            let newFront = oldFront;
            const oldCursor = this._cursor;
            let newCursor = oldCursor + 1;
            const elements = oldFront._elements;
            const element = elements[oldCursor];
            if (newCursor === QUEUE_MAX_ARRAY_SIZE) {
                newFront = oldFront._next;
                newCursor = 0;
            }
            // No mutations before this point.
            --this._size;
            this._cursor = newCursor;
            if (oldFront !== newFront) {
                this._front = newFront;
            }
            // Permit shifted element to be garbage collected.
            elements[oldCursor] = undefined;
            return element;
        }
        // The tricky thing about forEach() is that it can be called
        // re-entrantly. The queue may be mutated inside the callback. It is easy to
        // see that push() within the callback has no negative effects since the end
        // of the queue is checked for on every iteration. If shift() is called
        // repeatedly within the callback then the next iteration may return an
        // element that has been removed. In this case the callback will be called
        // with undefined values until we either "catch up" with elements that still
        // exist or reach the back of the queue.
        forEach(callback) {
            let i = this._cursor;
            let node = this._front;
            let elements = node._elements;
            while (i !== elements.length || node._next !== undefined) {
                if (i === elements.length) {
                    node = node._next;
                    elements = node._elements;
                    i = 0;
                    if (elements.length === 0) {
                        break;
                    }
                }
                callback(elements[i]);
                ++i;
            }
        }
        // Return the element that would be returned if shift() was called now,
        // without modifying the queue.
        peek() { // must not be called on an empty queue
            const front = this._front;
            const cursor = this._cursor;
            return front._elements[cursor];
        }
    }

    function ReadableStreamReaderGenericInitialize(reader, stream) {
        reader._ownerReadableStream = stream;
        stream._reader = reader;
        if (stream._state === 'readable') {
            defaultReaderClosedPromiseInitialize(reader);
        }
        else if (stream._state === 'closed') {
            defaultReaderClosedPromiseInitializeAsResolved(reader);
        }
        else {
            defaultReaderClosedPromiseInitializeAsRejected(reader, stream._storedError);
        }
    }
    // A client of ReadableStreamDefaultReader and ReadableStreamBYOBReader may use these functions directly to bypass state
    // check.
    function ReadableStreamReaderGenericCancel(reader, reason) {
        const stream = reader._ownerReadableStream;
        return ReadableStreamCancel(stream, reason);
    }
    function ReadableStreamReaderGenericRelease(reader) {
        if (reader._ownerReadableStream._state === 'readable') {
            defaultReaderClosedPromiseReject(reader, new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));
        }
        else {
            defaultReaderClosedPromiseResetToRejected(reader, new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));
        }
        reader._ownerReadableStream._reader = undefined;
        reader._ownerReadableStream = undefined;
    }
    // Helper functions for the readers.
    function readerLockException(name) {
        return new TypeError('Cannot ' + name + ' a stream using a released reader');
    }
    // Helper functions for the ReadableStreamDefaultReader.
    function defaultReaderClosedPromiseInitialize(reader) {
        reader._closedPromise = newPromise((resolve, reject) => {
            reader._closedPromise_resolve = resolve;
            reader._closedPromise_reject = reject;
        });
    }
    function defaultReaderClosedPromiseInitializeAsRejected(reader, reason) {
        defaultReaderClosedPromiseInitialize(reader);
        defaultReaderClosedPromiseReject(reader, reason);
    }
    function defaultReaderClosedPromiseInitializeAsResolved(reader) {
        defaultReaderClosedPromiseInitialize(reader);
        defaultReaderClosedPromiseResolve(reader);
    }
    function defaultReaderClosedPromiseReject(reader, reason) {
        if (reader._closedPromise_reject === undefined) {
            return;
        }
        setPromiseIsHandledToTrue(reader._closedPromise);
        reader._closedPromise_reject(reason);
        reader._closedPromise_resolve = undefined;
        reader._closedPromise_reject = undefined;
    }
    function defaultReaderClosedPromiseResetToRejected(reader, reason) {
        defaultReaderClosedPromiseInitializeAsRejected(reader, reason);
    }
    function defaultReaderClosedPromiseResolve(reader) {
        if (reader._closedPromise_resolve === undefined) {
            return;
        }
        reader._closedPromise_resolve(undefined);
        reader._closedPromise_resolve = undefined;
        reader._closedPromise_reject = undefined;
    }

    const AbortSteps = SymbolPolyfill('[[AbortSteps]]');
    const ErrorSteps = SymbolPolyfill('[[ErrorSteps]]');
    const CancelSteps = SymbolPolyfill('[[CancelSteps]]');
    const PullSteps = SymbolPolyfill('[[PullSteps]]');

    /// <reference lib="es2015.core" />
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite#Polyfill
    const NumberIsFinite = Number.isFinite || function (x) {
        return typeof x === 'number' && isFinite(x);
    };

    /// <reference lib="es2015.core" />
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc#Polyfill
    const MathTrunc = Math.trunc || function (v) {
        return v < 0 ? Math.ceil(v) : Math.floor(v);
    };

    // https://heycam.github.io/webidl/#idl-dictionaries
    function isDictionary(x) {
        return typeof x === 'object' || typeof x === 'function';
    }
    function assertDictionary(obj, context) {
        if (obj !== undefined && !isDictionary(obj)) {
            throw new TypeError(`${context} is not an object.`);
        }
    }
    // https://heycam.github.io/webidl/#idl-callback-functions
    function assertFunction(x, context) {
        if (typeof x !== 'function') {
            throw new TypeError(`${context} is not a function.`);
        }
    }
    // https://heycam.github.io/webidl/#idl-object
    function isObject(x) {
        return (typeof x === 'object' && x !== null) || typeof x === 'function';
    }
    function assertObject(x, context) {
        if (!isObject(x)) {
            throw new TypeError(`${context} is not an object.`);
        }
    }
    function assertRequiredArgument(x, position, context) {
        if (x === undefined) {
            throw new TypeError(`Parameter ${position} is required in '${context}'.`);
        }
    }
    function assertRequiredField(x, field, context) {
        if (x === undefined) {
            throw new TypeError(`${field} is required in '${context}'.`);
        }
    }
    // https://heycam.github.io/webidl/#idl-unrestricted-double
    function convertUnrestrictedDouble(value) {
        return Number(value);
    }
    function censorNegativeZero(x) {
        return x === 0 ? 0 : x;
    }
    function integerPart(x) {
        return censorNegativeZero(MathTrunc(x));
    }
    // https://heycam.github.io/webidl/#idl-unsigned-long-long
    function convertUnsignedLongLongWithEnforceRange(value, context) {
        const lowerBound = 0;
        const upperBound = Number.MAX_SAFE_INTEGER;
        let x = Number(value);
        x = censorNegativeZero(x);
        if (!NumberIsFinite(x)) {
            throw new TypeError(`${context} is not a finite number`);
        }
        x = integerPart(x);
        if (x < lowerBound || x > upperBound) {
            throw new TypeError(`${context} is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`);
        }
        if (!NumberIsFinite(x) || x === 0) {
            return 0;
        }
        // TODO Use BigInt if supported?
        // let xBigInt = BigInt(integerPart(x));
        // xBigInt = BigInt.asUintN(64, xBigInt);
        // return Number(xBigInt);
        return x;
    }

    function assertReadableStream(x, context) {
        if (!IsReadableStream(x)) {
            throw new TypeError(`${context} is not a ReadableStream.`);
        }
    }

    // Abstract operations for the ReadableStream.
    function AcquireReadableStreamDefaultReader(stream) {
        return new ReadableStreamDefaultReader(stream);
    }
    // ReadableStream API exposed for controllers.
    function ReadableStreamAddReadRequest(stream, readRequest) {
        stream._reader._readRequests.push(readRequest);
    }
    function ReadableStreamFulfillReadRequest(stream, chunk, done) {
        const reader = stream._reader;
        const readRequest = reader._readRequests.shift();
        if (done) {
            readRequest._closeSteps();
        }
        else {
            readRequest._chunkSteps(chunk);
        }
    }
    function ReadableStreamGetNumReadRequests(stream) {
        return stream._reader._readRequests.length;
    }
    function ReadableStreamHasDefaultReader(stream) {
        const reader = stream._reader;
        if (reader === undefined) {
            return false;
        }
        if (!IsReadableStreamDefaultReader(reader)) {
            return false;
        }
        return true;
    }
    /**
     * A default reader vended by a {@link ReadableStream}.
     *
     * @public
     */
    class ReadableStreamDefaultReader {
        constructor(stream) {
            assertRequiredArgument(stream, 1, 'ReadableStreamDefaultReader');
            assertReadableStream(stream, 'First parameter');
            if (IsReadableStreamLocked(stream)) {
                throw new TypeError('This stream has already been locked for exclusive reading by another reader');
            }
            ReadableStreamReaderGenericInitialize(this, stream);
            this._readRequests = new SimpleQueue();
        }
        /**
         * Returns a promise that will be fulfilled when the stream becomes closed,
         * or rejected if the stream ever errors or the reader's lock is released before the stream finishes closing.
         */
        get closed() {
            if (!IsReadableStreamDefaultReader(this)) {
                return promiseRejectedWith(defaultReaderBrandCheckException('closed'));
            }
            return this._closedPromise;
        }
        /**
         * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.
         */
        cancel(reason = undefined) {
            if (!IsReadableStreamDefaultReader(this)) {
                return promiseRejectedWith(defaultReaderBrandCheckException('cancel'));
            }
            if (this._ownerReadableStream === undefined) {
                return promiseRejectedWith(readerLockException('cancel'));
            }
            return ReadableStreamReaderGenericCancel(this, reason);
        }
        /**
         * Returns a promise that allows access to the next chunk from the stream's internal queue, if available.
         *
         * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.
         */
        read() {
            if (!IsReadableStreamDefaultReader(this)) {
                return promiseRejectedWith(defaultReaderBrandCheckException('read'));
            }
            if (this._ownerReadableStream === undefined) {
                return promiseRejectedWith(readerLockException('read from'));
            }
            let resolvePromise;
            let rejectPromise;
            const promise = newPromise((resolve, reject) => {
                resolvePromise = resolve;
                rejectPromise = reject;
            });
            const readRequest = {
                _chunkSteps: chunk => resolvePromise({ value: chunk, done: false }),
                _closeSteps: () => resolvePromise({ value: undefined, done: true }),
                _errorSteps: e => rejectPromise(e)
            };
            ReadableStreamDefaultReaderRead(this, readRequest);
            return promise;
        }
        /**
         * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.
         * If the associated stream is errored when the lock is released, the reader will appear errored in the same way
         * from now on; otherwise, the reader will appear closed.
         *
         * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by
         * the reader's {@link ReadableStreamDefaultReader.read | read()} method has not yet been settled. Attempting to
         * do so will throw a `TypeError` and leave the reader locked to the stream.
         */
        releaseLock() {
            if (!IsReadableStreamDefaultReader(this)) {
                throw defaultReaderBrandCheckException('releaseLock');
            }
            if (this._ownerReadableStream === undefined) {
                return;
            }
            if (this._readRequests.length > 0) {
                throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');
            }
            ReadableStreamReaderGenericRelease(this);
        }
    }
    Object.defineProperties(ReadableStreamDefaultReader.prototype, {
        cancel: { enumerable: true },
        read: { enumerable: true },
        releaseLock: { enumerable: true },
        closed: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(ReadableStreamDefaultReader.prototype, SymbolPolyfill.toStringTag, {
            value: 'ReadableStreamDefaultReader',
            configurable: true
        });
    }
    // Abstract operations for the readers.
    function IsReadableStreamDefaultReader(x) {
        if (!typeIsObject(x)) {
            return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_readRequests')) {
            return false;
        }
        return x instanceof ReadableStreamDefaultReader;
    }
    function ReadableStreamDefaultReaderRead(reader, readRequest) {
        const stream = reader._ownerReadableStream;
        stream._disturbed = true;
        if (stream._state === 'closed') {
            readRequest._closeSteps();
        }
        else if (stream._state === 'errored') {
            readRequest._errorSteps(stream._storedError);
        }
        else {
            stream._readableStreamController[PullSteps](readRequest);
        }
    }
    // Helper functions for the ReadableStreamDefaultReader.
    function defaultReaderBrandCheckException(name) {
        return new TypeError(`ReadableStreamDefaultReader.prototype.${name} can only be used on a ReadableStreamDefaultReader`);
    }

    /// <reference lib="es2018.asynciterable" />
    /* eslint-disable @typescript-eslint/no-empty-function */
    const AsyncIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf(async function* () { }).prototype);

    /// <reference lib="es2018.asynciterable" />
    class ReadableStreamAsyncIteratorImpl {
        constructor(reader, preventCancel) {
            this._ongoingPromise = undefined;
            this._isFinished = false;
            this._reader = reader;
            this._preventCancel = preventCancel;
        }
        next() {
            const nextSteps = () => this._nextSteps();
            this._ongoingPromise = this._ongoingPromise ?
                transformPromiseWith(this._ongoingPromise, nextSteps, nextSteps) :
                nextSteps();
            return this._ongoingPromise;
        }
        return(value) {
            const returnSteps = () => this._returnSteps(value);
            return this._ongoingPromise ?
                transformPromiseWith(this._ongoingPromise, returnSteps, returnSteps) :
                returnSteps();
        }
        _nextSteps() {
            if (this._isFinished) {
                return Promise.resolve({ value: undefined, done: true });
            }
            const reader = this._reader;
            if (reader._ownerReadableStream === undefined) {
                return promiseRejectedWith(readerLockException('iterate'));
            }
            let resolvePromise;
            let rejectPromise;
            const promise = newPromise((resolve, reject) => {
                resolvePromise = resolve;
                rejectPromise = reject;
            });
            const readRequest = {
                _chunkSteps: chunk => {
                    this._ongoingPromise = undefined;
                    // This needs to be delayed by one microtask, otherwise we stop pulling too early which breaks a test.
                    // FIXME Is this a bug in the specification, or in the test?
                    queueMicrotask(() => resolvePromise({ value: chunk, done: false }));
                },
                _closeSteps: () => {
                    this._ongoingPromise = undefined;
                    this._isFinished = true;
                    ReadableStreamReaderGenericRelease(reader);
                    resolvePromise({ value: undefined, done: true });
                },
                _errorSteps: reason => {
                    this._ongoingPromise = undefined;
                    this._isFinished = true;
                    ReadableStreamReaderGenericRelease(reader);
                    rejectPromise(reason);
                }
            };
            ReadableStreamDefaultReaderRead(reader, readRequest);
            return promise;
        }
        _returnSteps(value) {
            if (this._isFinished) {
                return Promise.resolve({ value, done: true });
            }
            this._isFinished = true;
            const reader = this._reader;
            if (reader._ownerReadableStream === undefined) {
                return promiseRejectedWith(readerLockException('finish iterating'));
            }
            if (!this._preventCancel) {
                const result = ReadableStreamReaderGenericCancel(reader, value);
                ReadableStreamReaderGenericRelease(reader);
                return transformPromiseWith(result, () => ({ value, done: true }));
            }
            ReadableStreamReaderGenericRelease(reader);
            return promiseResolvedWith({ value, done: true });
        }
    }
    const ReadableStreamAsyncIteratorPrototype = {
        next() {
            if (!IsReadableStreamAsyncIterator(this)) {
                return promiseRejectedWith(streamAsyncIteratorBrandCheckException('next'));
            }
            return this._asyncIteratorImpl.next();
        },
        return(value) {
            if (!IsReadableStreamAsyncIterator(this)) {
                return promiseRejectedWith(streamAsyncIteratorBrandCheckException('return'));
            }
            return this._asyncIteratorImpl.return(value);
        }
    };
    if (AsyncIteratorPrototype !== undefined) {
        Object.setPrototypeOf(ReadableStreamAsyncIteratorPrototype, AsyncIteratorPrototype);
    }
    // Abstract operations for the ReadableStream.
    function AcquireReadableStreamAsyncIterator(stream, preventCancel) {
        const reader = AcquireReadableStreamDefaultReader(stream);
        const impl = new ReadableStreamAsyncIteratorImpl(reader, preventCancel);
        const iterator = Object.create(ReadableStreamAsyncIteratorPrototype);
        iterator._asyncIteratorImpl = impl;
        return iterator;
    }
    function IsReadableStreamAsyncIterator(x) {
        if (!typeIsObject(x)) {
            return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_asyncIteratorImpl')) {
            return false;
        }
        try {
            // noinspection SuspiciousTypeOfGuard
            return x._asyncIteratorImpl instanceof
                ReadableStreamAsyncIteratorImpl;
        }
        catch (_a) {
            return false;
        }
    }
    // Helper functions for the ReadableStream.
    function streamAsyncIteratorBrandCheckException(name) {
        return new TypeError(`ReadableStreamAsyncIterator.${name} can only be used on a ReadableSteamAsyncIterator`);
    }

    /// <reference lib="es2015.core" />
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN#Polyfill
    const NumberIsNaN = Number.isNaN || function (x) {
        // eslint-disable-next-line no-self-compare
        return x !== x;
    };

    function CreateArrayFromList(elements) {
        // We use arrays to represent lists, so this is basically a no-op.
        // Do a slice though just in case we happen to depend on the unique-ness.
        return elements.slice();
    }
    function CopyDataBlockBytes(dest, destOffset, src, srcOffset, n) {
        new Uint8Array(dest).set(new Uint8Array(src, srcOffset, n), destOffset);
    }
    // Not implemented correctly
    function TransferArrayBuffer(O) {
        return O;
    }
    // Not implemented correctly
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function IsDetachedBuffer(O) {
        return false;
    }
    function ArrayBufferSlice(buffer, begin, end) {
        // ArrayBuffer.prototype.slice is not available on IE10
        // https://www.caniuse.com/mdn-javascript_builtins_arraybuffer_slice
        if (buffer.slice) {
            return buffer.slice(begin, end);
        }
        const length = end - begin;
        const slice = new ArrayBuffer(length);
        CopyDataBlockBytes(slice, 0, buffer, begin, length);
        return slice;
    }

    function IsNonNegativeNumber(v) {
        if (typeof v !== 'number') {
            return false;
        }
        if (NumberIsNaN(v)) {
            return false;
        }
        if (v < 0) {
            return false;
        }
        return true;
    }
    function CloneAsUint8Array(O) {
        const buffer = ArrayBufferSlice(O.buffer, O.byteOffset, O.byteOffset + O.byteLength);
        return new Uint8Array(buffer);
    }

    function DequeueValue(container) {
        const pair = container._queue.shift();
        container._queueTotalSize -= pair.size;
        if (container._queueTotalSize < 0) {
            container._queueTotalSize = 0;
        }
        return pair.value;
    }
    function EnqueueValueWithSize(container, value, size) {
        if (!IsNonNegativeNumber(size) || size === Infinity) {
            throw new RangeError('Size must be a finite, non-NaN, non-negative number.');
        }
        container._queue.push({ value, size });
        container._queueTotalSize += size;
    }
    function PeekQueueValue(container) {
        const pair = container._queue.peek();
        return pair.value;
    }
    function ResetQueue(container) {
        container._queue = new SimpleQueue();
        container._queueTotalSize = 0;
    }

    /**
     * A pull-into request in a {@link ReadableByteStreamController}.
     *
     * @public
     */
    class ReadableStreamBYOBRequest {
        constructor() {
            throw new TypeError('Illegal constructor');
        }
        /**
         * Returns the view for writing in to, or `null` if the BYOB request has already been responded to.
         */
        get view() {
            if (!IsReadableStreamBYOBRequest(this)) {
                throw byobRequestBrandCheckException('view');
            }
            return this._view;
        }
        respond(bytesWritten) {
            if (!IsReadableStreamBYOBRequest(this)) {
                throw byobRequestBrandCheckException('respond');
            }
            assertRequiredArgument(bytesWritten, 1, 'respond');
            bytesWritten = convertUnsignedLongLongWithEnforceRange(bytesWritten, 'First parameter');
            if (this._associatedReadableByteStreamController === undefined) {
                throw new TypeError('This BYOB request has been invalidated');
            }
            if (IsDetachedBuffer(this._view.buffer)) ;
            ReadableByteStreamControllerRespond(this._associatedReadableByteStreamController, bytesWritten);
        }
        respondWithNewView(view) {
            if (!IsReadableStreamBYOBRequest(this)) {
                throw byobRequestBrandCheckException('respondWithNewView');
            }
            assertRequiredArgument(view, 1, 'respondWithNewView');
            if (!ArrayBuffer.isView(view)) {
                throw new TypeError('You can only respond with array buffer views');
            }
            if (this._associatedReadableByteStreamController === undefined) {
                throw new TypeError('This BYOB request has been invalidated');
            }
            if (IsDetachedBuffer(view.buffer)) ;
            ReadableByteStreamControllerRespondWithNewView(this._associatedReadableByteStreamController, view);
        }
    }
    Object.defineProperties(ReadableStreamBYOBRequest.prototype, {
        respond: { enumerable: true },
        respondWithNewView: { enumerable: true },
        view: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(ReadableStreamBYOBRequest.prototype, SymbolPolyfill.toStringTag, {
            value: 'ReadableStreamBYOBRequest',
            configurable: true
        });
    }
    /**
     * Allows control of a {@link ReadableStream | readable byte stream}'s state and internal queue.
     *
     * @public
     */
    class ReadableByteStreamController {
        constructor() {
            throw new TypeError('Illegal constructor');
        }
        /**
         * Returns the current BYOB pull request, or `null` if there isn't one.
         */
        get byobRequest() {
            if (!IsReadableByteStreamController(this)) {
                throw byteStreamControllerBrandCheckException('byobRequest');
            }
            return ReadableByteStreamControllerGetBYOBRequest(this);
        }
        /**
         * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is
         * over-full. An underlying byte source ought to use this information to determine when and how to apply backpressure.
         */
        get desiredSize() {
            if (!IsReadableByteStreamController(this)) {
                throw byteStreamControllerBrandCheckException('desiredSize');
            }
            return ReadableByteStreamControllerGetDesiredSize(this);
        }
        /**
         * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from
         * the stream, but once those are read, the stream will become closed.
         */
        close() {
            if (!IsReadableByteStreamController(this)) {
                throw byteStreamControllerBrandCheckException('close');
            }
            if (this._closeRequested) {
                throw new TypeError('The stream has already been closed; do not close it again!');
            }
            const state = this._controlledReadableByteStream._state;
            if (state !== 'readable') {
                throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be closed`);
            }
            ReadableByteStreamControllerClose(this);
        }
        enqueue(chunk) {
            if (!IsReadableByteStreamController(this)) {
                throw byteStreamControllerBrandCheckException('enqueue');
            }
            assertRequiredArgument(chunk, 1, 'enqueue');
            if (!ArrayBuffer.isView(chunk)) {
                throw new TypeError('chunk must be an array buffer view');
            }
            if (chunk.byteLength === 0) {
                throw new TypeError('chunk must have non-zero byteLength');
            }
            if (chunk.buffer.byteLength === 0) {
                throw new TypeError(`chunk's buffer must have non-zero byteLength`);
            }
            if (this._closeRequested) {
                throw new TypeError('stream is closed or draining');
            }
            const state = this._controlledReadableByteStream._state;
            if (state !== 'readable') {
                throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be enqueued to`);
            }
            ReadableByteStreamControllerEnqueue(this, chunk);
        }
        /**
         * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.
         */
        error(e = undefined) {
            if (!IsReadableByteStreamController(this)) {
                throw byteStreamControllerBrandCheckException('error');
            }
            ReadableByteStreamControllerError(this, e);
        }
        /** @internal */
        [CancelSteps](reason) {
            ReadableByteStreamControllerClearPendingPullIntos(this);
            ResetQueue(this);
            const result = this._cancelAlgorithm(reason);
            ReadableByteStreamControllerClearAlgorithms(this);
            return result;
        }
        /** @internal */
        [PullSteps](readRequest) {
            const stream = this._controlledReadableByteStream;
            if (this._queueTotalSize > 0) {
                const entry = this._queue.shift();
                this._queueTotalSize -= entry.byteLength;
                ReadableByteStreamControllerHandleQueueDrain(this);
                const view = new Uint8Array(entry.buffer, entry.byteOffset, entry.byteLength);
                readRequest._chunkSteps(view);
                return;
            }
            const autoAllocateChunkSize = this._autoAllocateChunkSize;
            if (autoAllocateChunkSize !== undefined) {
                let buffer;
                try {
                    buffer = new ArrayBuffer(autoAllocateChunkSize);
                }
                catch (bufferE) {
                    readRequest._errorSteps(bufferE);
                    return;
                }
                const pullIntoDescriptor = {
                    buffer,
                    bufferByteLength: autoAllocateChunkSize,
                    byteOffset: 0,
                    byteLength: autoAllocateChunkSize,
                    bytesFilled: 0,
                    elementSize: 1,
                    viewConstructor: Uint8Array,
                    readerType: 'default'
                };
                this._pendingPullIntos.push(pullIntoDescriptor);
            }
            ReadableStreamAddReadRequest(stream, readRequest);
            ReadableByteStreamControllerCallPullIfNeeded(this);
        }
    }
    Object.defineProperties(ReadableByteStreamController.prototype, {
        close: { enumerable: true },
        enqueue: { enumerable: true },
        error: { enumerable: true },
        byobRequest: { enumerable: true },
        desiredSize: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(ReadableByteStreamController.prototype, SymbolPolyfill.toStringTag, {
            value: 'ReadableByteStreamController',
            configurable: true
        });
    }
    // Abstract operations for the ReadableByteStreamController.
    function IsReadableByteStreamController(x) {
        if (!typeIsObject(x)) {
            return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableByteStream')) {
            return false;
        }
        return x instanceof ReadableByteStreamController;
    }
    function IsReadableStreamBYOBRequest(x) {
        if (!typeIsObject(x)) {
            return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_associatedReadableByteStreamController')) {
            return false;
        }
        return x instanceof ReadableStreamBYOBRequest;
    }
    function ReadableByteStreamControllerCallPullIfNeeded(controller) {
        const shouldPull = ReadableByteStreamControllerShouldCallPull(controller);
        if (!shouldPull) {
            return;
        }
        if (controller._pulling) {
            controller._pullAgain = true;
            return;
        }
        controller._pulling = true;
        // TODO: Test controller argument
        const pullPromise = controller._pullAlgorithm();
        uponPromise(pullPromise, () => {
            controller._pulling = false;
            if (controller._pullAgain) {
                controller._pullAgain = false;
                ReadableByteStreamControllerCallPullIfNeeded(controller);
            }
        }, e => {
            ReadableByteStreamControllerError(controller, e);
        });
    }
    function ReadableByteStreamControllerClearPendingPullIntos(controller) {
        ReadableByteStreamControllerInvalidateBYOBRequest(controller);
        controller._pendingPullIntos = new SimpleQueue();
    }
    function ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor) {
        let done = false;
        if (stream._state === 'closed') {
            done = true;
        }
        const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);
        if (pullIntoDescriptor.readerType === 'default') {
            ReadableStreamFulfillReadRequest(stream, filledView, done);
        }
        else {
            ReadableStreamFulfillReadIntoRequest(stream, filledView, done);
        }
    }
    function ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor) {
        const bytesFilled = pullIntoDescriptor.bytesFilled;
        const elementSize = pullIntoDescriptor.elementSize;
        return new pullIntoDescriptor.viewConstructor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, bytesFilled / elementSize);
    }
    function ReadableByteStreamControllerEnqueueChunkToQueue(controller, buffer, byteOffset, byteLength) {
        controller._queue.push({ buffer, byteOffset, byteLength });
        controller._queueTotalSize += byteLength;
    }
    function ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) {
        const elementSize = pullIntoDescriptor.elementSize;
        const currentAlignedBytes = pullIntoDescriptor.bytesFilled - pullIntoDescriptor.bytesFilled % elementSize;
        const maxBytesToCopy = Math.min(controller._queueTotalSize, pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled);
        const maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy;
        const maxAlignedBytes = maxBytesFilled - maxBytesFilled % elementSize;
        let totalBytesToCopyRemaining = maxBytesToCopy;
        let ready = false;
        if (maxAlignedBytes > currentAlignedBytes) {
            totalBytesToCopyRemaining = maxAlignedBytes - pullIntoDescriptor.bytesFilled;
            ready = true;
        }
        const queue = controller._queue;
        while (totalBytesToCopyRemaining > 0) {
            const headOfQueue = queue.peek();
            const bytesToCopy = Math.min(totalBytesToCopyRemaining, headOfQueue.byteLength);
            const destStart = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;
            CopyDataBlockBytes(pullIntoDescriptor.buffer, destStart, headOfQueue.buffer, headOfQueue.byteOffset, bytesToCopy);
            if (headOfQueue.byteLength === bytesToCopy) {
                queue.shift();
            }
            else {
                headOfQueue.byteOffset += bytesToCopy;
                headOfQueue.byteLength -= bytesToCopy;
            }
            controller._queueTotalSize -= bytesToCopy;
            ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesToCopy, pullIntoDescriptor);
            totalBytesToCopyRemaining -= bytesToCopy;
        }
        return ready;
    }
    function ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, size, pullIntoDescriptor) {
        pullIntoDescriptor.bytesFilled += size;
    }
    function ReadableByteStreamControllerHandleQueueDrain(controller) {
        if (controller._queueTotalSize === 0 && controller._closeRequested) {
            ReadableByteStreamControllerClearAlgorithms(controller);
            ReadableStreamClose(controller._controlledReadableByteStream);
        }
        else {
            ReadableByteStreamControllerCallPullIfNeeded(controller);
        }
    }
    function ReadableByteStreamControllerInvalidateBYOBRequest(controller) {
        if (controller._byobRequest === null) {
            return;
        }
        controller._byobRequest._associatedReadableByteStreamController = undefined;
        controller._byobRequest._view = null;
        controller._byobRequest = null;
    }
    function ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller) {
        while (controller._pendingPullIntos.length > 0) {
            if (controller._queueTotalSize === 0) {
                return;
            }
            const pullIntoDescriptor = controller._pendingPullIntos.peek();
            if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {
                ReadableByteStreamControllerShiftPendingPullInto(controller);
                ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);
            }
        }
    }
    function ReadableByteStreamControllerPullInto(controller, view, readIntoRequest) {
        const stream = controller._controlledReadableByteStream;
        let elementSize = 1;
        if (view.constructor !== DataView) {
            elementSize = view.constructor.BYTES_PER_ELEMENT;
        }
        const ctor = view.constructor;
        // try {
        const buffer = TransferArrayBuffer(view.buffer);
        // } catch (e) {
        //   readIntoRequest._errorSteps(e);
        //   return;
        // }
        const pullIntoDescriptor = {
            buffer,
            bufferByteLength: buffer.byteLength,
            byteOffset: view.byteOffset,
            byteLength: view.byteLength,
            bytesFilled: 0,
            elementSize,
            viewConstructor: ctor,
            readerType: 'byob'
        };
        if (controller._pendingPullIntos.length > 0) {
            controller._pendingPullIntos.push(pullIntoDescriptor);
            // No ReadableByteStreamControllerCallPullIfNeeded() call since:
            // - No change happens on desiredSize
            // - The source has already been notified of that there's at least 1 pending read(view)
            ReadableStreamAddReadIntoRequest(stream, readIntoRequest);
            return;
        }
        if (stream._state === 'closed') {
            const emptyView = new ctor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, 0);
            readIntoRequest._closeSteps(emptyView);
            return;
        }
        if (controller._queueTotalSize > 0) {
            if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {
                const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);
                ReadableByteStreamControllerHandleQueueDrain(controller);
                readIntoRequest._chunkSteps(filledView);
                return;
            }
            if (controller._closeRequested) {
                const e = new TypeError('Insufficient bytes to fill elements in the given buffer');
                ReadableByteStreamControllerError(controller, e);
                readIntoRequest._errorSteps(e);
                return;
            }
        }
        controller._pendingPullIntos.push(pullIntoDescriptor);
        ReadableStreamAddReadIntoRequest(stream, readIntoRequest);
        ReadableByteStreamControllerCallPullIfNeeded(controller);
    }
    function ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor) {
        const stream = controller._controlledReadableByteStream;
        if (ReadableStreamHasBYOBReader(stream)) {
            while (ReadableStreamGetNumReadIntoRequests(stream) > 0) {
                const pullIntoDescriptor = ReadableByteStreamControllerShiftPendingPullInto(controller);
                ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor);
            }
        }
    }
    function ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, pullIntoDescriptor) {
        ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesWritten, pullIntoDescriptor);
        if (pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize) {
            return;
        }
        ReadableByteStreamControllerShiftPendingPullInto(controller);
        const remainderSize = pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize;
        if (remainderSize > 0) {
            const end = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;
            const remainder = ArrayBufferSlice(pullIntoDescriptor.buffer, end - remainderSize, end);
            ReadableByteStreamControllerEnqueueChunkToQueue(controller, remainder, 0, remainder.byteLength);
        }
        pullIntoDescriptor.bytesFilled -= remainderSize;
        ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);
        ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);
    }
    function ReadableByteStreamControllerRespondInternal(controller, bytesWritten) {
        const firstDescriptor = controller._pendingPullIntos.peek();
        ReadableByteStreamControllerInvalidateBYOBRequest(controller);
        const state = controller._controlledReadableByteStream._state;
        if (state === 'closed') {
            ReadableByteStreamControllerRespondInClosedState(controller);
        }
        else {
            ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, firstDescriptor);
        }
        ReadableByteStreamControllerCallPullIfNeeded(controller);
    }
    function ReadableByteStreamControllerShiftPendingPullInto(controller) {
        const descriptor = controller._pendingPullIntos.shift();
        return descriptor;
    }
    function ReadableByteStreamControllerShouldCallPull(controller) {
        const stream = controller._controlledReadableByteStream;
        if (stream._state !== 'readable') {
            return false;
        }
        if (controller._closeRequested) {
            return false;
        }
        if (!controller._started) {
            return false;
        }
        if (ReadableStreamHasDefaultReader(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {
            return true;
        }
        if (ReadableStreamHasBYOBReader(stream) && ReadableStreamGetNumReadIntoRequests(stream) > 0) {
            return true;
        }
        const desiredSize = ReadableByteStreamControllerGetDesiredSize(controller);
        if (desiredSize > 0) {
            return true;
        }
        return false;
    }
    function ReadableByteStreamControllerClearAlgorithms(controller) {
        controller._pullAlgorithm = undefined;
        controller._cancelAlgorithm = undefined;
    }
    // A client of ReadableByteStreamController may use these functions directly to bypass state check.
    function ReadableByteStreamControllerClose(controller) {
        const stream = controller._controlledReadableByteStream;
        if (controller._closeRequested || stream._state !== 'readable') {
            return;
        }
        if (controller._queueTotalSize > 0) {
            controller._closeRequested = true;
            return;
        }
        if (controller._pendingPullIntos.length > 0) {
            const firstPendingPullInto = controller._pendingPullIntos.peek();
            if (firstPendingPullInto.bytesFilled > 0) {
                const e = new TypeError('Insufficient bytes to fill elements in the given buffer');
                ReadableByteStreamControllerError(controller, e);
                throw e;
            }
        }
        ReadableByteStreamControllerClearAlgorithms(controller);
        ReadableStreamClose(stream);
    }
    function ReadableByteStreamControllerEnqueue(controller, chunk) {
        const stream = controller._controlledReadableByteStream;
        if (controller._closeRequested || stream._state !== 'readable') {
            return;
        }
        const buffer = chunk.buffer;
        const byteOffset = chunk.byteOffset;
        const byteLength = chunk.byteLength;
        const transferredBuffer = TransferArrayBuffer(buffer);
        if (controller._pendingPullIntos.length > 0) {
            const firstPendingPullInto = controller._pendingPullIntos.peek();
            if (IsDetachedBuffer(firstPendingPullInto.buffer)) ;
            firstPendingPullInto.buffer = TransferArrayBuffer(firstPendingPullInto.buffer);
        }
        ReadableByteStreamControllerInvalidateBYOBRequest(controller);
        if (ReadableStreamHasDefaultReader(stream)) {
            if (ReadableStreamGetNumReadRequests(stream) === 0) {
                ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);
            }
            else {
                if (controller._pendingPullIntos.length > 0) {
                    ReadableByteStreamControllerShiftPendingPullInto(controller);
                }
                const transferredView = new Uint8Array(transferredBuffer, byteOffset, byteLength);
                ReadableStreamFulfillReadRequest(stream, transferredView, false);
            }
        }
        else if (ReadableStreamHasBYOBReader(stream)) {
            // TODO: Ideally in this branch detaching should happen only if the buffer is not consumed fully.
            ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);
            ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);
        }
        else {
            ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);
        }
        ReadableByteStreamControllerCallPullIfNeeded(controller);
    }
    function ReadableByteStreamControllerError(controller, e) {
        const stream = controller._controlledReadableByteStream;
        if (stream._state !== 'readable') {
            return;
        }
        ReadableByteStreamControllerClearPendingPullIntos(controller);
        ResetQueue(controller);
        ReadableByteStreamControllerClearAlgorithms(controller);
        ReadableStreamError(stream, e);
    }
    function ReadableByteStreamControllerGetBYOBRequest(controller) {
        if (controller._byobRequest === null && controller._pendingPullIntos.length > 0) {
            const firstDescriptor = controller._pendingPullIntos.peek();
            const view = new Uint8Array(firstDescriptor.buffer, firstDescriptor.byteOffset + firstDescriptor.bytesFilled, firstDescriptor.byteLength - firstDescriptor.bytesFilled);
            const byobRequest = Object.create(ReadableStreamBYOBRequest.prototype);
            SetUpReadableStreamBYOBRequest(byobRequest, controller, view);
            controller._byobRequest = byobRequest;
        }
        return controller._byobRequest;
    }
    function ReadableByteStreamControllerGetDesiredSize(controller) {
        const state = controller._controlledReadableByteStream._state;
        if (state === 'errored') {
            return null;
        }
        if (state === 'closed') {
            return 0;
        }
        return controller._strategyHWM - controller._queueTotalSize;
    }
    function ReadableByteStreamControllerRespond(controller, bytesWritten) {
        const firstDescriptor = controller._pendingPullIntos.peek();
        const state = controller._controlledReadableByteStream._state;
        if (state === 'closed') {
            if (bytesWritten !== 0) {
                throw new TypeError('bytesWritten must be 0 when calling respond() on a closed stream');
            }
        }
        else {
            if (bytesWritten === 0) {
                throw new TypeError('bytesWritten must be greater than 0 when calling respond() on a readable stream');
            }
            if (firstDescriptor.bytesFilled + bytesWritten > firstDescriptor.byteLength) {
                throw new RangeError('bytesWritten out of range');
            }
        }
        firstDescriptor.buffer = TransferArrayBuffer(firstDescriptor.buffer);
        ReadableByteStreamControllerRespondInternal(controller, bytesWritten);
    }
    function ReadableByteStreamControllerRespondWithNewView(controller, view) {
        const firstDescriptor = controller._pendingPullIntos.peek();
        const state = controller._controlledReadableByteStream._state;
        if (state === 'closed') {
            if (view.byteLength !== 0) {
                throw new TypeError('The view\'s length must be 0 when calling respondWithNewView() on a closed stream');
            }
        }
        else {
            if (view.byteLength === 0) {
                throw new TypeError('The view\'s length must be greater than 0 when calling respondWithNewView() on a readable stream');
            }
        }
        if (firstDescriptor.byteOffset + firstDescriptor.bytesFilled !== view.byteOffset) {
            throw new RangeError('The region specified by view does not match byobRequest');
        }
        if (firstDescriptor.bufferByteLength !== view.buffer.byteLength) {
            throw new RangeError('The buffer of view has different capacity than byobRequest');
        }
        if (firstDescriptor.bytesFilled + view.byteLength > firstDescriptor.byteLength) {
            throw new RangeError('The region specified by view is larger than byobRequest');
        }
        const viewByteLength = view.byteLength;
        firstDescriptor.buffer = TransferArrayBuffer(view.buffer);
        ReadableByteStreamControllerRespondInternal(controller, viewByteLength);
    }
    function SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize) {
        controller._controlledReadableByteStream = stream;
        controller._pullAgain = false;
        controller._pulling = false;
        controller._byobRequest = null;
        // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.
        controller._queue = controller._queueTotalSize = undefined;
        ResetQueue(controller);
        controller._closeRequested = false;
        controller._started = false;
        controller._strategyHWM = highWaterMark;
        controller._pullAlgorithm = pullAlgorithm;
        controller._cancelAlgorithm = cancelAlgorithm;
        controller._autoAllocateChunkSize = autoAllocateChunkSize;
        controller._pendingPullIntos = new SimpleQueue();
        stream._readableStreamController = controller;
        const startResult = startAlgorithm();
        uponPromise(promiseResolvedWith(startResult), () => {
            controller._started = true;
            ReadableByteStreamControllerCallPullIfNeeded(controller);
        }, r => {
            ReadableByteStreamControllerError(controller, r);
        });
    }
    function SetUpReadableByteStreamControllerFromUnderlyingSource(stream, underlyingByteSource, highWaterMark) {
        const controller = Object.create(ReadableByteStreamController.prototype);
        let startAlgorithm = () => undefined;
        let pullAlgorithm = () => promiseResolvedWith(undefined);
        let cancelAlgorithm = () => promiseResolvedWith(undefined);
        if (underlyingByteSource.start !== undefined) {
            startAlgorithm = () => underlyingByteSource.start(controller);
        }
        if (underlyingByteSource.pull !== undefined) {
            pullAlgorithm = () => underlyingByteSource.pull(controller);
        }
        if (underlyingByteSource.cancel !== undefined) {
            cancelAlgorithm = reason => underlyingByteSource.cancel(reason);
        }
        const autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;
        if (autoAllocateChunkSize === 0) {
            throw new TypeError('autoAllocateChunkSize must be greater than 0');
        }
        SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize);
    }
    function SetUpReadableStreamBYOBRequest(request, controller, view) {
        request._associatedReadableByteStreamController = controller;
        request._view = view;
    }
    // Helper functions for the ReadableStreamBYOBRequest.
    function byobRequestBrandCheckException(name) {
        return new TypeError(`ReadableStreamBYOBRequest.prototype.${name} can only be used on a ReadableStreamBYOBRequest`);
    }
    // Helper functions for the ReadableByteStreamController.
    function byteStreamControllerBrandCheckException(name) {
        return new TypeError(`ReadableByteStreamController.prototype.${name} can only be used on a ReadableByteStreamController`);
    }

    // Abstract operations for the ReadableStream.
    function AcquireReadableStreamBYOBReader(stream) {
        return new ReadableStreamBYOBReader(stream);
    }
    // ReadableStream API exposed for controllers.
    function ReadableStreamAddReadIntoRequest(stream, readIntoRequest) {
        stream._reader._readIntoRequests.push(readIntoRequest);
    }
    function ReadableStreamFulfillReadIntoRequest(stream, chunk, done) {
        const reader = stream._reader;
        const readIntoRequest = reader._readIntoRequests.shift();
        if (done) {
            readIntoRequest._closeSteps(chunk);
        }
        else {
            readIntoRequest._chunkSteps(chunk);
        }
    }
    function ReadableStreamGetNumReadIntoRequests(stream) {
        return stream._reader._readIntoRequests.length;
    }
    function ReadableStreamHasBYOBReader(stream) {
        const reader = stream._reader;
        if (reader === undefined) {
            return false;
        }
        if (!IsReadableStreamBYOBReader(reader)) {
            return false;
        }
        return true;
    }
    /**
     * A BYOB reader vended by a {@link ReadableStream}.
     *
     * @public
     */
    class ReadableStreamBYOBReader {
        constructor(stream) {
            assertRequiredArgument(stream, 1, 'ReadableStreamBYOBReader');
            assertReadableStream(stream, 'First parameter');
            if (IsReadableStreamLocked(stream)) {
                throw new TypeError('This stream has already been locked for exclusive reading by another reader');
            }
            if (!IsReadableByteStreamController(stream._readableStreamController)) {
                throw new TypeError('Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte ' +
                    'source');
            }
            ReadableStreamReaderGenericInitialize(this, stream);
            this._readIntoRequests = new SimpleQueue();
        }
        /**
         * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or
         * the reader's lock is released before the stream finishes closing.
         */
        get closed() {
            if (!IsReadableStreamBYOBReader(this)) {
                return promiseRejectedWith(byobReaderBrandCheckException('closed'));
            }
            return this._closedPromise;
        }
        /**
         * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.
         */
        cancel(reason = undefined) {
            if (!IsReadableStreamBYOBReader(this)) {
                return promiseRejectedWith(byobReaderBrandCheckException('cancel'));
            }
            if (this._ownerReadableStream === undefined) {
                return promiseRejectedWith(readerLockException('cancel'));
            }
            return ReadableStreamReaderGenericCancel(this, reason);
        }
        /**
         * Attempts to reads bytes into view, and returns a promise resolved with the result.
         *
         * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.
         */
        read(view) {
            if (!IsReadableStreamBYOBReader(this)) {
                return promiseRejectedWith(byobReaderBrandCheckException('read'));
            }
            if (!ArrayBuffer.isView(view)) {
                return promiseRejectedWith(new TypeError('view must be an array buffer view'));
            }
            if (view.byteLength === 0) {
                return promiseRejectedWith(new TypeError('view must have non-zero byteLength'));
            }
            if (view.buffer.byteLength === 0) {
                return promiseRejectedWith(new TypeError(`view's buffer must have non-zero byteLength`));
            }
            if (IsDetachedBuffer(view.buffer)) ;
            if (this._ownerReadableStream === undefined) {
                return promiseRejectedWith(readerLockException('read from'));
            }
            let resolvePromise;
            let rejectPromise;
            const promise = newPromise((resolve, reject) => {
                resolvePromise = resolve;
                rejectPromise = reject;
            });
            const readIntoRequest = {
                _chunkSteps: chunk => resolvePromise({ value: chunk, done: false }),
                _closeSteps: chunk => resolvePromise({ value: chunk, done: true }),
                _errorSteps: e => rejectPromise(e)
            };
            ReadableStreamBYOBReaderRead(this, view, readIntoRequest);
            return promise;
        }
        /**
         * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.
         * If the associated stream is errored when the lock is released, the reader will appear errored in the same way
         * from now on; otherwise, the reader will appear closed.
         *
         * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by
         * the reader's {@link ReadableStreamBYOBReader.read | read()} method has not yet been settled. Attempting to
         * do so will throw a `TypeError` and leave the reader locked to the stream.
         */
        releaseLock() {
            if (!IsReadableStreamBYOBReader(this)) {
                throw byobReaderBrandCheckException('releaseLock');
            }
            if (this._ownerReadableStream === undefined) {
                return;
            }
            if (this._readIntoRequests.length > 0) {
                throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');
            }
            ReadableStreamReaderGenericRelease(this);
        }
    }
    Object.defineProperties(ReadableStreamBYOBReader.prototype, {
        cancel: { enumerable: true },
        read: { enumerable: true },
        releaseLock: { enumerable: true },
        closed: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(ReadableStreamBYOBReader.prototype, SymbolPolyfill.toStringTag, {
            value: 'ReadableStreamBYOBReader',
            configurable: true
        });
    }
    // Abstract operations for the readers.
    function IsReadableStreamBYOBReader(x) {
        if (!typeIsObject(x)) {
            return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_readIntoRequests')) {
            return false;
        }
        return x instanceof ReadableStreamBYOBReader;
    }
    function ReadableStreamBYOBReaderRead(reader, view, readIntoRequest) {
        const stream = reader._ownerReadableStream;
        stream._disturbed = true;
        if (stream._state === 'errored') {
            readIntoRequest._errorSteps(stream._storedError);
        }
        else {
            ReadableByteStreamControllerPullInto(stream._readableStreamController, view, readIntoRequest);
        }
    }
    // Helper functions for the ReadableStreamBYOBReader.
    function byobReaderBrandCheckException(name) {
        return new TypeError(`ReadableStreamBYOBReader.prototype.${name} can only be used on a ReadableStreamBYOBReader`);
    }

    function ExtractHighWaterMark(strategy, defaultHWM) {
        const { highWaterMark } = strategy;
        if (highWaterMark === undefined) {
            return defaultHWM;
        }
        if (NumberIsNaN(highWaterMark) || highWaterMark < 0) {
            throw new RangeError('Invalid highWaterMark');
        }
        return highWaterMark;
    }
    function ExtractSizeAlgorithm(strategy) {
        const { size } = strategy;
        if (!size) {
            return () => 1;
        }
        return size;
    }

    function convertQueuingStrategy(init, context) {
        assertDictionary(init, context);
        const highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;
        const size = init === null || init === void 0 ? void 0 : init.size;
        return {
            highWaterMark: highWaterMark === undefined ? undefined : convertUnrestrictedDouble(highWaterMark),
            size: size === undefined ? undefined : convertQueuingStrategySize(size, `${context} has member 'size' that`)
        };
    }
    function convertQueuingStrategySize(fn, context) {
        assertFunction(fn, context);
        return chunk => convertUnrestrictedDouble(fn(chunk));
    }

    function convertUnderlyingSink(original, context) {
        assertDictionary(original, context);
        const abort = original === null || original === void 0 ? void 0 : original.abort;
        const close = original === null || original === void 0 ? void 0 : original.close;
        const start = original === null || original === void 0 ? void 0 : original.start;
        const type = original === null || original === void 0 ? void 0 : original.type;
        const write = original === null || original === void 0 ? void 0 : original.write;
        return {
            abort: abort === undefined ?
                undefined :
                convertUnderlyingSinkAbortCallback(abort, original, `${context} has member 'abort' that`),
            close: close === undefined ?
                undefined :
                convertUnderlyingSinkCloseCallback(close, original, `${context} has member 'close' that`),
            start: start === undefined ?
                undefined :
                convertUnderlyingSinkStartCallback(start, original, `${context} has member 'start' that`),
            write: write === undefined ?
                undefined :
                convertUnderlyingSinkWriteCallback(write, original, `${context} has member 'write' that`),
            type
        };
    }
    function convertUnderlyingSinkAbortCallback(fn, original, context) {
        assertFunction(fn, context);
        return (reason) => promiseCall(fn, original, [reason]);
    }
    function convertUnderlyingSinkCloseCallback(fn, original, context) {
        assertFunction(fn, context);
        return () => promiseCall(fn, original, []);
    }
    function convertUnderlyingSinkStartCallback(fn, original, context) {
        assertFunction(fn, context);
        return (controller) => reflectCall(fn, original, [controller]);
    }
    function convertUnderlyingSinkWriteCallback(fn, original, context) {
        assertFunction(fn, context);
        return (chunk, controller) => promiseCall(fn, original, [chunk, controller]);
    }

    function assertWritableStream(x, context) {
        if (!IsWritableStream(x)) {
            throw new TypeError(`${context} is not a WritableStream.`);
        }
    }

    function isAbortSignal(value) {
        if (typeof value !== 'object' || value === null) {
            return false;
        }
        try {
            return typeof value.aborted === 'boolean';
        }
        catch (_a) {
            // AbortSignal.prototype.aborted throws if its brand check fails
            return false;
        }
    }
    const supportsAbortController = typeof AbortController === 'function';
    /**
     * Construct a new AbortController, if supported by the platform.
     *
     * @internal
     */
    function createAbortController() {
        if (supportsAbortController) {
            return new AbortController();
        }
        return undefined;
    }

    /**
     * A writable stream represents a destination for data, into which you can write.
     *
     * @public
     */
    class WritableStream {
        constructor(rawUnderlyingSink = {}, rawStrategy = {}) {
            if (rawUnderlyingSink === undefined) {
                rawUnderlyingSink = null;
            }
            else {
                assertObject(rawUnderlyingSink, 'First parameter');
            }
            const strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');
            const underlyingSink = convertUnderlyingSink(rawUnderlyingSink, 'First parameter');
            InitializeWritableStream(this);
            const type = underlyingSink.type;
            if (type !== undefined) {
                throw new RangeError('Invalid type is specified');
            }
            const sizeAlgorithm = ExtractSizeAlgorithm(strategy);
            const highWaterMark = ExtractHighWaterMark(strategy, 1);
            SetUpWritableStreamDefaultControllerFromUnderlyingSink(this, underlyingSink, highWaterMark, sizeAlgorithm);
        }
        /**
         * Returns whether or not the writable stream is locked to a writer.
         */
        get locked() {
            if (!IsWritableStream(this)) {
                throw streamBrandCheckException$2('locked');
            }
            return IsWritableStreamLocked(this);
        }
        /**
         * Aborts the stream, signaling that the producer can no longer successfully write to the stream and it is to be
         * immediately moved to an errored state, with any queued-up writes discarded. This will also execute any abort
         * mechanism of the underlying sink.
         *
         * The returned promise will fulfill if the stream shuts down successfully, or reject if the underlying sink signaled
         * that there was an error doing so. Additionally, it will reject with a `TypeError` (without attempting to cancel
         * the stream) if the stream is currently locked.
         */
        abort(reason = undefined) {
            if (!IsWritableStream(this)) {
                return promiseRejectedWith(streamBrandCheckException$2('abort'));
            }
            if (IsWritableStreamLocked(this)) {
                return promiseRejectedWith(new TypeError('Cannot abort a stream that already has a writer'));
            }
            return WritableStreamAbort(this, reason);
        }
        /**
         * Closes the stream. The underlying sink will finish processing any previously-written chunks, before invoking its
         * close behavior. During this time any further attempts to write will fail (without erroring the stream).
         *
         * The method returns a promise that will fulfill if all remaining chunks are successfully written and the stream
         * successfully closes, or rejects if an error is encountered during this process. Additionally, it will reject with
         * a `TypeError` (without attempting to cancel the stream) if the stream is currently locked.
         */
        close() {
            if (!IsWritableStream(this)) {
                return promiseRejectedWith(streamBrandCheckException$2('close'));
            }
            if (IsWritableStreamLocked(this)) {
                return promiseRejectedWith(new TypeError('Cannot close a stream that already has a writer'));
            }
            if (WritableStreamCloseQueuedOrInFlight(this)) {
                return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));
            }
            return WritableStreamClose(this);
        }
        /**
         * Creates a {@link WritableStreamDefaultWriter | writer} and locks the stream to the new writer. While the stream
         * is locked, no other writer can be acquired until this one is released.
         *
         * This functionality is especially useful for creating abstractions that desire the ability to write to a stream
         * without interruption or interleaving. By getting a writer for the stream, you can ensure nobody else can write at
         * the same time, which would cause the resulting written data to be unpredictable and probably useless.
         */
        getWriter() {
            if (!IsWritableStream(this)) {
                throw streamBrandCheckException$2('getWriter');
            }
            return AcquireWritableStreamDefaultWriter(this);
        }
    }
    Object.defineProperties(WritableStream.prototype, {
        abort: { enumerable: true },
        close: { enumerable: true },
        getWriter: { enumerable: true },
        locked: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(WritableStream.prototype, SymbolPolyfill.toStringTag, {
            value: 'WritableStream',
            configurable: true
        });
    }
    // Abstract operations for the WritableStream.
    function AcquireWritableStreamDefaultWriter(stream) {
        return new WritableStreamDefaultWriter(stream);
    }
    // Throws if and only if startAlgorithm throws.
    function CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark = 1, sizeAlgorithm = () => 1) {
        const stream = Object.create(WritableStream.prototype);
        InitializeWritableStream(stream);
        const controller = Object.create(WritableStreamDefaultController.prototype);
        SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);
        return stream;
    }
    function InitializeWritableStream(stream) {
        stream._state = 'writable';
        // The error that will be reported by new method calls once the state becomes errored. Only set when [[state]] is
        // 'erroring' or 'errored'. May be set to an undefined value.
        stream._storedError = undefined;
        stream._writer = undefined;
        // Initialize to undefined first because the constructor of the controller checks this
        // variable to validate the caller.
        stream._writableStreamController = undefined;
        // This queue is placed here instead of the writer class in order to allow for passing a writer to the next data
        // producer without waiting for the queued writes to finish.
        stream._writeRequests = new SimpleQueue();
        // Write requests are removed from _writeRequests when write() is called on the underlying sink. This prevents
        // them from being erroneously rejected on error. If a write() call is in-flight, the request is stored here.
        stream._inFlightWriteRequest = undefined;
        // The promise that was returned from writer.close(). Stored here because it may be fulfilled after the writer
        // has been detached.
        stream._closeRequest = undefined;
        // Close request is removed from _closeRequest when close() is called on the underlying sink. This prevents it
        // from being erroneously rejected on error. If a close() call is in-flight, the request is stored here.
        stream._inFlightCloseRequest = undefined;
        // The promise that was returned from writer.abort(). This may also be fulfilled after the writer has detached.
        stream._pendingAbortRequest = undefined;
        // The backpressure signal set by the controller.
        stream._backpressure = false;
    }
    function IsWritableStream(x) {
        if (!typeIsObject(x)) {
            return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_writableStreamController')) {
            return false;
        }
        return x instanceof WritableStream;
    }
    function IsWritableStreamLocked(stream) {
        if (stream._writer === undefined) {
            return false;
        }
        return true;
    }
    function WritableStreamAbort(stream, reason) {
        var _a;
        if (stream._state === 'closed' || stream._state === 'errored') {
            return promiseResolvedWith(undefined);
        }
        stream._writableStreamController._abortReason = reason;
        (_a = stream._writableStreamController._abortController) === null || _a === void 0 ? void 0 : _a.abort();
        // TypeScript narrows the type of `stream._state` down to 'writable' | 'erroring',
        // but it doesn't know that signaling abort runs author code that might have changed the state.
        // Widen the type again by casting to WritableStreamState.
        const state = stream._state;
        if (state === 'closed' || state === 'errored') {
            return promiseResolvedWith(undefined);
        }
        if (stream._pendingAbortRequest !== undefined) {
            return stream._pendingAbortRequest._promise;
        }
        let wasAlreadyErroring = false;
        if (state === 'erroring') {
            wasAlreadyErroring = true;
            // reason will not be used, so don't keep a reference to it.
            reason = undefined;
        }
        const promise = newPromise((resolve, reject) => {
            stream._pendingAbortRequest = {
                _promise: undefined,
                _resolve: resolve,
                _reject: reject,
                _reason: reason,
                _wasAlreadyErroring: wasAlreadyErroring
            };
        });
        stream._pendingAbortRequest._promise = promise;
        if (!wasAlreadyErroring) {
            WritableStreamStartErroring(stream, reason);
        }
        return promise;
    }
    function WritableStreamClose(stream) {
        const state = stream._state;
        if (state === 'closed' || state === 'errored') {
            return promiseRejectedWith(new TypeError(`The stream (in ${state} state) is not in the writable state and cannot be closed`));
        }
        const promise = newPromise((resolve, reject) => {
            const closeRequest = {
                _resolve: resolve,
                _reject: reject
            };
            stream._closeRequest = closeRequest;
        });
        const writer = stream._writer;
        if (writer !== undefined && stream._backpressure && state === 'writable') {
            defaultWriterReadyPromiseResolve(writer);
        }
        WritableStreamDefaultControllerClose(stream._writableStreamController);
        return promise;
    }
    // WritableStream API exposed for controllers.
    function WritableStreamAddWriteRequest(stream) {
        const promise = newPromise((resolve, reject) => {
            const writeRequest = {
                _resolve: resolve,
                _reject: reject
            };
            stream._writeRequests.push(writeRequest);
        });
        return promise;
    }
    function WritableStreamDealWithRejection(stream, error) {
        const state = stream._state;
        if (state === 'writable') {
            WritableStreamStartErroring(stream, error);
            return;
        }
        WritableStreamFinishErroring(stream);
    }
    function WritableStreamStartErroring(stream, reason) {
        const controller = stream._writableStreamController;
        stream._state = 'erroring';
        stream._storedError = reason;
        const writer = stream._writer;
        if (writer !== undefined) {
            WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason);
        }
        if (!WritableStreamHasOperationMarkedInFlight(stream) && controller._started) {
            WritableStreamFinishErroring(stream);
        }
    }
    function WritableStreamFinishErroring(stream) {
        stream._state = 'errored';
        stream._writableStreamController[ErrorSteps]();
        const storedError = stream._storedError;
        stream._writeRequests.forEach(writeRequest => {
            writeRequest._reject(storedError);
        });
        stream._writeRequests = new SimpleQueue();
        if (stream._pendingAbortRequest === undefined) {
            WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
            return;
        }
        const abortRequest = stream._pendingAbortRequest;
        stream._pendingAbortRequest = undefined;
        if (abortRequest._wasAlreadyErroring) {
            abortRequest._reject(storedError);
            WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
            return;
        }
        const promise = stream._writableStreamController[AbortSteps](abortRequest._reason);
        uponPromise(promise, () => {
            abortRequest._resolve();
            WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
        }, (reason) => {
            abortRequest._reject(reason);
            WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
        });
    }
    function WritableStreamFinishInFlightWrite(stream) {
        stream._inFlightWriteRequest._resolve(undefined);
        stream._inFlightWriteRequest = undefined;
    }
    function WritableStreamFinishInFlightWriteWithError(stream, error) {
        stream._inFlightWriteRequest._reject(error);
        stream._inFlightWriteRequest = undefined;
        WritableStreamDealWithRejection(stream, error);
    }
    function WritableStreamFinishInFlightClose(stream) {
        stream._inFlightCloseRequest._resolve(undefined);
        stream._inFlightCloseRequest = undefined;
        const state = stream._state;
        if (state === 'erroring') {
            // The error was too late to do anything, so it is ignored.
            stream._storedError = undefined;
            if (stream._pendingAbortRequest !== undefined) {
                stream._pendingAbortRequest._resolve();
                stream._pendingAbortRequest = undefined;
            }
        }
        stream._state = 'closed';
        const writer = stream._writer;
        if (writer !== undefined) {
            defaultWriterClosedPromiseResolve(writer);
        }
    }
    function WritableStreamFinishInFlightCloseWithError(stream, error) {
        stream._inFlightCloseRequest._reject(error);
        stream._inFlightCloseRequest = undefined;
        // Never execute sink abort() after sink close().
        if (stream._pendingAbortRequest !== undefined) {
            stream._pendingAbortRequest._reject(error);
            stream._pendingAbortRequest = undefined;
        }
        WritableStreamDealWithRejection(stream, error);
    }
    // TODO(ricea): Fix alphabetical order.
    function WritableStreamCloseQueuedOrInFlight(stream) {
        if (stream._closeRequest === undefined && stream._inFlightCloseRequest === undefined) {
            return false;
        }
        return true;
    }
    function WritableStreamHasOperationMarkedInFlight(stream) {
        if (stream._inFlightWriteRequest === undefined && stream._inFlightCloseRequest === undefined) {
            return false;
        }
        return true;
    }
    function WritableStreamMarkCloseRequestInFlight(stream) {
        stream._inFlightCloseRequest = stream._closeRequest;
        stream._closeRequest = undefined;
    }
    function WritableStreamMarkFirstWriteRequestInFlight(stream) {
        stream._inFlightWriteRequest = stream._writeRequests.shift();
    }
    function WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream) {
        if (stream._closeRequest !== undefined) {
            stream._closeRequest._reject(stream._storedError);
            stream._closeRequest = undefined;
        }
        const writer = stream._writer;
        if (writer !== undefined) {
            defaultWriterClosedPromiseReject(writer, stream._storedError);
        }
    }
    function WritableStreamUpdateBackpressure(stream, backpressure) {
        const writer = stream._writer;
        if (writer !== undefined && backpressure !== stream._backpressure) {
            if (backpressure) {
                defaultWriterReadyPromiseReset(writer);
            }
            else {
                defaultWriterReadyPromiseResolve(writer);
            }
        }
        stream._backpressure = backpressure;
    }
    /**
     * A default writer vended by a {@link WritableStream}.
     *
     * @public
     */
    class WritableStreamDefaultWriter {
        constructor(stream) {
            assertRequiredArgument(stream, 1, 'WritableStreamDefaultWriter');
            assertWritableStream(stream, 'First parameter');
            if (IsWritableStreamLocked(stream)) {
                throw new TypeError('This stream has already been locked for exclusive writing by another writer');
            }
            this._ownerWritableStream = stream;
            stream._writer = this;
            const state = stream._state;
            if (state === 'writable') {
                if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._backpressure) {
                    defaultWriterReadyPromiseInitialize(this);
                }
                else {
                    defaultWriterReadyPromiseInitializeAsResolved(this);
                }
                defaultWriterClosedPromiseInitialize(this);
            }
            else if (state === 'erroring') {
                defaultWriterReadyPromiseInitializeAsRejected(this, stream._storedError);
                defaultWriterClosedPromiseInitialize(this);
            }
            else if (state === 'closed') {
                defaultWriterReadyPromiseInitializeAsResolved(this);
                defaultWriterClosedPromiseInitializeAsResolved(this);
            }
            else {
                const storedError = stream._storedError;
                defaultWriterReadyPromiseInitializeAsRejected(this, storedError);
                defaultWriterClosedPromiseInitializeAsRejected(this, storedError);
            }
        }
        /**
         * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or
         * the writer’s lock is released before the stream finishes closing.
         */
        get closed() {
            if (!IsWritableStreamDefaultWriter(this)) {
                return promiseRejectedWith(defaultWriterBrandCheckException('closed'));
            }
            return this._closedPromise;
        }
        /**
         * Returns the desired size to fill the stream’s internal queue. It can be negative, if the queue is over-full.
         * A producer can use this information to determine the right amount of data to write.
         *
         * It will be `null` if the stream cannot be successfully written to (due to either being errored, or having an abort
         * queued up). It will return zero if the stream is closed. And the getter will throw an exception if invoked when
         * the writer’s lock is released.
         */
        get desiredSize() {
            if (!IsWritableStreamDefaultWriter(this)) {
                throw defaultWriterBrandCheckException('desiredSize');
            }
            if (this._ownerWritableStream === undefined) {
                throw defaultWriterLockException('desiredSize');
            }
            return WritableStreamDefaultWriterGetDesiredSize(this);
        }
        /**
         * Returns a promise that will be fulfilled when the desired size to fill the stream’s internal queue transitions
         * from non-positive to positive, signaling that it is no longer applying backpressure. Once the desired size dips
         * back to zero or below, the getter will return a new promise that stays pending until the next transition.
         *
         * If the stream becomes errored or aborted, or the writer’s lock is released, the returned promise will become
         * rejected.
         */
        get ready() {
            if (!IsWritableStreamDefaultWriter(this)) {
                return promiseRejectedWith(defaultWriterBrandCheckException('ready'));
            }
            return this._readyPromise;
        }
        /**
         * If the reader is active, behaves the same as {@link WritableStream.abort | stream.abort(reason)}.
         */
        abort(reason = undefined) {
            if (!IsWritableStreamDefaultWriter(this)) {
                return promiseRejectedWith(defaultWriterBrandCheckException('abort'));
            }
            if (this._ownerWritableStream === undefined) {
                return promiseRejectedWith(defaultWriterLockException('abort'));
            }
            return WritableStreamDefaultWriterAbort(this, reason);
        }
        /**
         * If the reader is active, behaves the same as {@link WritableStream.close | stream.close()}.
         */
        close() {
            if (!IsWritableStreamDefaultWriter(this)) {
                return promiseRejectedWith(defaultWriterBrandCheckException('close'));
            }
            const stream = this._ownerWritableStream;
            if (stream === undefined) {
                return promiseRejectedWith(defaultWriterLockException('close'));
            }
            if (WritableStreamCloseQueuedOrInFlight(stream)) {
                return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));
            }
            return WritableStreamDefaultWriterClose(this);
        }
        /**
         * Releases the writer’s lock on the corresponding stream. After the lock is released, the writer is no longer active.
         * If the associated stream is errored when the lock is released, the writer will appear errored in the same way from
         * now on; otherwise, the writer will appear closed.
         *
         * Note that the lock can still be released even if some ongoing writes have not yet finished (i.e. even if the
         * promises returned from previous calls to {@link WritableStreamDefaultWriter.write | write()} have not yet settled).
         * It’s not necessary to hold the lock on the writer for the duration of the write; the lock instead simply prevents
         * other producers from writing in an interleaved manner.
         */
        releaseLock() {
            if (!IsWritableStreamDefaultWriter(this)) {
                throw defaultWriterBrandCheckException('releaseLock');
            }
            const stream = this._ownerWritableStream;
            if (stream === undefined) {
                return;
            }
            WritableStreamDefaultWriterRelease(this);
        }
        write(chunk = undefined) {
            if (!IsWritableStreamDefaultWriter(this)) {
                return promiseRejectedWith(defaultWriterBrandCheckException('write'));
            }
            if (this._ownerWritableStream === undefined) {
                return promiseRejectedWith(defaultWriterLockException('write to'));
            }
            return WritableStreamDefaultWriterWrite(this, chunk);
        }
    }
    Object.defineProperties(WritableStreamDefaultWriter.prototype, {
        abort: { enumerable: true },
        close: { enumerable: true },
        releaseLock: { enumerable: true },
        write: { enumerable: true },
        closed: { enumerable: true },
        desiredSize: { enumerable: true },
        ready: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(WritableStreamDefaultWriter.prototype, SymbolPolyfill.toStringTag, {
            value: 'WritableStreamDefaultWriter',
            configurable: true
        });
    }
    // Abstract operations for the WritableStreamDefaultWriter.
    function IsWritableStreamDefaultWriter(x) {
        if (!typeIsObject(x)) {
            return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_ownerWritableStream')) {
            return false;
        }
        return x instanceof WritableStreamDefaultWriter;
    }
    // A client of WritableStreamDefaultWriter may use these functions directly to bypass state check.
    function WritableStreamDefaultWriterAbort(writer, reason) {
        const stream = writer._ownerWritableStream;
        return WritableStreamAbort(stream, reason);
    }
    function WritableStreamDefaultWriterClose(writer) {
        const stream = writer._ownerWritableStream;
        return WritableStreamClose(stream);
    }
    function WritableStreamDefaultWriterCloseWithErrorPropagation(writer) {
        const stream = writer._ownerWritableStream;
        const state = stream._state;
        if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {
            return promiseResolvedWith(undefined);
        }
        if (state === 'errored') {
            return promiseRejectedWith(stream._storedError);
        }
        return WritableStreamDefaultWriterClose(writer);
    }
    function WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, error) {
        if (writer._closedPromiseState === 'pending') {
            defaultWriterClosedPromiseReject(writer, error);
        }
        else {
            defaultWriterClosedPromiseResetToRejected(writer, error);
        }
    }
    function WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, error) {
        if (writer._readyPromiseState === 'pending') {
            defaultWriterReadyPromiseReject(writer, error);
        }
        else {
            defaultWriterReadyPromiseResetToRejected(writer, error);
        }
    }
    function WritableStreamDefaultWriterGetDesiredSize(writer) {
        const stream = writer._ownerWritableStream;
        const state = stream._state;
        if (state === 'errored' || state === 'erroring') {
            return null;
        }
        if (state === 'closed') {
            return 0;
        }
        return WritableStreamDefaultControllerGetDesiredSize(stream._writableStreamController);
    }
    function WritableStreamDefaultWriterRelease(writer) {
        const stream = writer._ownerWritableStream;
        const releasedError = new TypeError(`Writer was released and can no longer be used to monitor the stream's closedness`);
        WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedError);
        // The state transitions to "errored" before the sink abort() method runs, but the writer.closed promise is not
        // rejected until afterwards. This means that simply testing state will not work.
        WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedError);
        stream._writer = undefined;
        writer._ownerWritableStream = undefined;
    }
    function WritableStreamDefaultWriterWrite(writer, chunk) {
        const stream = writer._ownerWritableStream;
        const controller = stream._writableStreamController;
        const chunkSize = WritableStreamDefaultControllerGetChunkSize(controller, chunk);
        if (stream !== writer._ownerWritableStream) {
            return promiseRejectedWith(defaultWriterLockException('write to'));
        }
        const state = stream._state;
        if (state === 'errored') {
            return promiseRejectedWith(stream._storedError);
        }
        if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {
            return promiseRejectedWith(new TypeError('The stream is closing or closed and cannot be written to'));
        }
        if (state === 'erroring') {
            return promiseRejectedWith(stream._storedError);
        }
        const promise = WritableStreamAddWriteRequest(stream);
        WritableStreamDefaultControllerWrite(controller, chunk, chunkSize);
        return promise;
    }
    const closeSentinel = {};
    /**
     * Allows control of a {@link WritableStream | writable stream}'s state and internal queue.
     *
     * @public
     */
    class WritableStreamDefaultController {
        constructor() {
            throw new TypeError('Illegal constructor');
        }
        /**
         * The reason which was passed to `WritableStream.abort(reason)` when the stream was aborted.
         *
         * @deprecated
         *  This property has been removed from the specification, see https://github.com/whatwg/streams/pull/1177.
         *  Use {@link WritableStreamDefaultController.signal}'s `reason` instead.
         */
        get abortReason() {
            if (!IsWritableStreamDefaultController(this)) {
                throw defaultControllerBrandCheckException$2('abortReason');
            }
            return this._abortReason;
        }
        /**
         * An `AbortSignal` that can be used to abort the pending write or close operation when the stream is aborted.
         */
        get signal() {
            if (!IsWritableStreamDefaultController(this)) {
                throw defaultControllerBrandCheckException$2('signal');
            }
            if (this._abortController === undefined) {
                // Older browsers or older Node versions may not support `AbortController` or `AbortSignal`.
                // We don't want to bundle and ship an `AbortController` polyfill together with our polyfill,
                // so instead we only implement support for `signal` if we find a global `AbortController` constructor.
                throw new TypeError('WritableStreamDefaultController.prototype.signal is not supported');
            }
            return this._abortController.signal;
        }
        /**
         * Closes the controlled writable stream, making all future interactions with it fail with the given error `e`.
         *
         * This method is rarely used, since usually it suffices to return a rejected promise from one of the underlying
         * sink's methods. However, it can be useful for suddenly shutting down a stream in response to an event outside the
         * normal lifecycle of interactions with the underlying sink.
         */
        error(e = undefined) {
            if (!IsWritableStreamDefaultController(this)) {
                throw defaultControllerBrandCheckException$2('error');
            }
            const state = this._controlledWritableStream._state;
            if (state !== 'writable') {
                // The stream is closed, errored or will be soon. The sink can't do anything useful if it gets an error here, so
                // just treat it as a no-op.
                return;
            }
            WritableStreamDefaultControllerError(this, e);
        }
        /** @internal */
        [AbortSteps](reason) {
            const result = this._abortAlgorithm(reason);
            WritableStreamDefaultControllerClearAlgorithms(this);
            return result;
        }
        /** @internal */
        [ErrorSteps]() {
            ResetQueue(this);
        }
    }
    Object.defineProperties(WritableStreamDefaultController.prototype, {
        abortReason: { enumerable: true },
        signal: { enumerable: true },
        error: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(WritableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {
            value: 'WritableStreamDefaultController',
            configurable: true
        });
    }
    // Abstract operations implementing interface required by the WritableStream.
    function IsWritableStreamDefaultController(x) {
        if (!typeIsObject(x)) {
            return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_controlledWritableStream')) {
            return false;
        }
        return x instanceof WritableStreamDefaultController;
    }
    function SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm) {
        controller._controlledWritableStream = stream;
        stream._writableStreamController = controller;
        // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.
        controller._queue = undefined;
        controller._queueTotalSize = undefined;
        ResetQueue(controller);
        controller._abortReason = undefined;
        controller._abortController = createAbortController();
        controller._started = false;
        controller._strategySizeAlgorithm = sizeAlgorithm;
        controller._strategyHWM = highWaterMark;
        controller._writeAlgorithm = writeAlgorithm;
        controller._closeAlgorithm = closeAlgorithm;
        controller._abortAlgorithm = abortAlgorithm;
        const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);
        WritableStreamUpdateBackpressure(stream, backpressure);
        const startResult = startAlgorithm();
        const startPromise = promiseResolvedWith(startResult);
        uponPromise(startPromise, () => {
            controller._started = true;
            WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
        }, r => {
            controller._started = true;
            WritableStreamDealWithRejection(stream, r);
        });
    }
    function SetUpWritableStreamDefaultControllerFromUnderlyingSink(stream, underlyingSink, highWaterMark, sizeAlgorithm) {
        const controller = Object.create(WritableStreamDefaultController.prototype);
        let startAlgorithm = () => undefined;
        let writeAlgorithm = () => promiseResolvedWith(undefined);
        let closeAlgorithm = () => promiseResolvedWith(undefined);
        let abortAlgorithm = () => promiseResolvedWith(undefined);
        if (underlyingSink.start !== undefined) {
            startAlgorithm = () => underlyingSink.start(controller);
        }
        if (underlyingSink.write !== undefined) {
            writeAlgorithm = chunk => underlyingSink.write(chunk, controller);
        }
        if (underlyingSink.close !== undefined) {
            closeAlgorithm = () => underlyingSink.close();
        }
        if (underlyingSink.abort !== undefined) {
            abortAlgorithm = reason => underlyingSink.abort(reason);
        }
        SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);
    }
    // ClearAlgorithms may be called twice. Erroring the same stream in multiple ways will often result in redundant calls.
    function WritableStreamDefaultControllerClearAlgorithms(controller) {
        controller._writeAlgorithm = undefined;
        controller._closeAlgorithm = undefined;
        controller._abortAlgorithm = undefined;
        controller._strategySizeAlgorithm = undefined;
    }
    function WritableStreamDefaultControllerClose(controller) {
        EnqueueValueWithSize(controller, closeSentinel, 0);
        WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
    }
    function WritableStreamDefaultControllerGetChunkSize(controller, chunk) {
        try {
            return controller._strategySizeAlgorithm(chunk);
        }
        catch (chunkSizeE) {
            WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);
            return 1;
        }
    }
    function WritableStreamDefaultControllerGetDesiredSize(controller) {
        return controller._strategyHWM - controller._queueTotalSize;
    }
    function WritableStreamDefaultControllerWrite(controller, chunk, chunkSize) {
        try {
            EnqueueValueWithSize(controller, chunk, chunkSize);
        }
        catch (enqueueE) {
            WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);
            return;
        }
        const stream = controller._controlledWritableStream;
        if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._state === 'writable') {
            const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);
            WritableStreamUpdateBackpressure(stream, backpressure);
        }
        WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
    }
    // Abstract operations for the WritableStreamDefaultController.
    function WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller) {
        const stream = controller._controlledWritableStream;
        if (!controller._started) {
            return;
        }
        if (stream._inFlightWriteRequest !== undefined) {
            return;
        }
        const state = stream._state;
        if (state === 'erroring') {
            WritableStreamFinishErroring(stream);
            return;
        }
        if (controller._queue.length === 0) {
            return;
        }
        const value = PeekQueueValue(controller);
        if (value === closeSentinel) {
            WritableStreamDefaultControllerProcessClose(controller);
        }
        else {
            WritableStreamDefaultControllerProcessWrite(controller, value);
        }
    }
    function WritableStreamDefaultControllerErrorIfNeeded(controller, error) {
        if (controller._controlledWritableStream._state === 'writable') {
            WritableStreamDefaultControllerError(controller, error);
        }
    }
    function WritableStreamDefaultControllerProcessClose(controller) {
        const stream = controller._controlledWritableStream;
        WritableStreamMarkCloseRequestInFlight(stream);
        DequeueValue(controller);
        const sinkClosePromise = controller._closeAlgorithm();
        WritableStreamDefaultControllerClearAlgorithms(controller);
        uponPromise(sinkClosePromise, () => {
            WritableStreamFinishInFlightClose(stream);
        }, reason => {
            WritableStreamFinishInFlightCloseWithError(stream, reason);
        });
    }
    function WritableStreamDefaultControllerProcessWrite(controller, chunk) {
        const stream = controller._controlledWritableStream;
        WritableStreamMarkFirstWriteRequestInFlight(stream);
        const sinkWritePromise = controller._writeAlgorithm(chunk);
        uponPromise(sinkWritePromise, () => {
            WritableStreamFinishInFlightWrite(stream);
            const state = stream._state;
            DequeueValue(controller);
            if (!WritableStreamCloseQueuedOrInFlight(stream) && state === 'writable') {
                const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);
                WritableStreamUpdateBackpressure(stream, backpressure);
            }
            WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
        }, reason => {
            if (stream._state === 'writable') {
                WritableStreamDefaultControllerClearAlgorithms(controller);
            }
            WritableStreamFinishInFlightWriteWithError(stream, reason);
        });
    }
    function WritableStreamDefaultControllerGetBackpressure(controller) {
        const desiredSize = WritableStreamDefaultControllerGetDesiredSize(controller);
        return desiredSize <= 0;
    }
    // A client of WritableStreamDefaultController may use these functions directly to bypass state check.
    function WritableStreamDefaultControllerError(controller, error) {
        const stream = controller._controlledWritableStream;
        WritableStreamDefaultControllerClearAlgorithms(controller);
        WritableStreamStartErroring(stream, error);
    }
    // Helper functions for the WritableStream.
    function streamBrandCheckException$2(name) {
        return new TypeError(`WritableStream.prototype.${name} can only be used on a WritableStream`);
    }
    // Helper functions for the WritableStreamDefaultController.
    function defaultControllerBrandCheckException$2(name) {
        return new TypeError(`WritableStreamDefaultController.prototype.${name} can only be used on a WritableStreamDefaultController`);
    }
    // Helper functions for the WritableStreamDefaultWriter.
    function defaultWriterBrandCheckException(name) {
        return new TypeError(`WritableStreamDefaultWriter.prototype.${name} can only be used on a WritableStreamDefaultWriter`);
    }
    function defaultWriterLockException(name) {
        return new TypeError('Cannot ' + name + ' a stream using a released writer');
    }
    function defaultWriterClosedPromiseInitialize(writer) {
        writer._closedPromise = newPromise((resolve, reject) => {
            writer._closedPromise_resolve = resolve;
            writer._closedPromise_reject = reject;
            writer._closedPromiseState = 'pending';
        });
    }
    function defaultWriterClosedPromiseInitializeAsRejected(writer, reason) {
        defaultWriterClosedPromiseInitialize(writer);
        defaultWriterClosedPromiseReject(writer, reason);
    }
    function defaultWriterClosedPromiseInitializeAsResolved(writer) {
        defaultWriterClosedPromiseInitialize(writer);
        defaultWriterClosedPromiseResolve(writer);
    }
    function defaultWriterClosedPromiseReject(writer, reason) {
        if (writer._closedPromise_reject === undefined) {
            return;
        }
        setPromiseIsHandledToTrue(writer._closedPromise);
        writer._closedPromise_reject(reason);
        writer._closedPromise_resolve = undefined;
        writer._closedPromise_reject = undefined;
        writer._closedPromiseState = 'rejected';
    }
    function defaultWriterClosedPromiseResetToRejected(writer, reason) {
        defaultWriterClosedPromiseInitializeAsRejected(writer, reason);
    }
    function defaultWriterClosedPromiseResolve(writer) {
        if (writer._closedPromise_resolve === undefined) {
            return;
        }
        writer._closedPromise_resolve(undefined);
        writer._closedPromise_resolve = undefined;
        writer._closedPromise_reject = undefined;
        writer._closedPromiseState = 'resolved';
    }
    function defaultWriterReadyPromiseInitialize(writer) {
        writer._readyPromise = newPromise((resolve, reject) => {
            writer._readyPromise_resolve = resolve;
            writer._readyPromise_reject = reject;
        });
        writer._readyPromiseState = 'pending';
    }
    function defaultWriterReadyPromiseInitializeAsRejected(writer, reason) {
        defaultWriterReadyPromiseInitialize(writer);
        defaultWriterReadyPromiseReject(writer, reason);
    }
    function defaultWriterReadyPromiseInitializeAsResolved(writer) {
        defaultWriterReadyPromiseInitialize(writer);
        defaultWriterReadyPromiseResolve(writer);
    }
    function defaultWriterReadyPromiseReject(writer, reason) {
        if (writer._readyPromise_reject === undefined) {
            return;
        }
        setPromiseIsHandledToTrue(writer._readyPromise);
        writer._readyPromise_reject(reason);
        writer._readyPromise_resolve = undefined;
        writer._readyPromise_reject = undefined;
        writer._readyPromiseState = 'rejected';
    }
    function defaultWriterReadyPromiseReset(writer) {
        defaultWriterReadyPromiseInitialize(writer);
    }
    function defaultWriterReadyPromiseResetToRejected(writer, reason) {
        defaultWriterReadyPromiseInitializeAsRejected(writer, reason);
    }
    function defaultWriterReadyPromiseResolve(writer) {
        if (writer._readyPromise_resolve === undefined) {
            return;
        }
        writer._readyPromise_resolve(undefined);
        writer._readyPromise_resolve = undefined;
        writer._readyPromise_reject = undefined;
        writer._readyPromiseState = 'fulfilled';
    }

    /// <reference lib="dom" />
    const NativeDOMException = typeof DOMException !== 'undefined' ? DOMException : undefined;

    /// <reference types="node" />
    function isDOMExceptionConstructor(ctor) {
        if (!(typeof ctor === 'function' || typeof ctor === 'object')) {
            return false;
        }
        try {
            new ctor();
            return true;
        }
        catch (_a) {
            return false;
        }
    }
    function createDOMExceptionPolyfill() {
        // eslint-disable-next-line no-shadow
        const ctor = function DOMException(message, name) {
            this.message = message || '';
            this.name = name || 'Error';
            if (Error.captureStackTrace) {
                Error.captureStackTrace(this, this.constructor);
            }
        };
        ctor.prototype = Object.create(Error.prototype);
        Object.defineProperty(ctor.prototype, 'constructor', { value: ctor, writable: true, configurable: true });
        return ctor;
    }
    // eslint-disable-next-line no-redeclare
    const DOMException$1 = isDOMExceptionConstructor(NativeDOMException) ? NativeDOMException : createDOMExceptionPolyfill();

    function ReadableStreamPipeTo(source, dest, preventClose, preventAbort, preventCancel, signal) {
        const reader = AcquireReadableStreamDefaultReader(source);
        const writer = AcquireWritableStreamDefaultWriter(dest);
        source._disturbed = true;
        let shuttingDown = false;
        // This is used to keep track of the spec's requirement that we wait for ongoing writes during shutdown.
        let currentWrite = promiseResolvedWith(undefined);
        return newPromise((resolve, reject) => {
            let abortAlgorithm;
            if (signal !== undefined) {
                abortAlgorithm = () => {
                    const error = new DOMException$1('Aborted', 'AbortError');
                    const actions = [];
                    if (!preventAbort) {
                        actions.push(() => {
                            if (dest._state === 'writable') {
                                return WritableStreamAbort(dest, error);
                            }
                            return promiseResolvedWith(undefined);
                        });
                    }
                    if (!preventCancel) {
                        actions.push(() => {
                            if (source._state === 'readable') {
                                return ReadableStreamCancel(source, error);
                            }
                            return promiseResolvedWith(undefined);
                        });
                    }
                    shutdownWithAction(() => Promise.all(actions.map(action => action())), true, error);
                };
                if (signal.aborted) {
                    abortAlgorithm();
                    return;
                }
                signal.addEventListener('abort', abortAlgorithm);
            }
            // Using reader and writer, read all chunks from this and write them to dest
            // - Backpressure must be enforced
            // - Shutdown must stop all activity
            function pipeLoop() {
                return newPromise((resolveLoop, rejectLoop) => {
                    function next(done) {
                        if (done) {
                            resolveLoop();
                        }
                        else {
                            // Use `PerformPromiseThen` instead of `uponPromise` to avoid
                            // adding unnecessary `.catch(rethrowAssertionErrorRejection)` handlers
                            PerformPromiseThen(pipeStep(), next, rejectLoop);
                        }
                    }
                    next(false);
                });
            }
            function pipeStep() {
                if (shuttingDown) {
                    return promiseResolvedWith(true);
                }
                return PerformPromiseThen(writer._readyPromise, () => {
                    return newPromise((resolveRead, rejectRead) => {
                        ReadableStreamDefaultReaderRead(reader, {
                            _chunkSteps: chunk => {
                                currentWrite = PerformPromiseThen(WritableStreamDefaultWriterWrite(writer, chunk), undefined, noop);
                                resolveRead(false);
                            },
                            _closeSteps: () => resolveRead(true),
                            _errorSteps: rejectRead
                        });
                    });
                });
            }
            // Errors must be propagated forward
            isOrBecomesErrored(source, reader._closedPromise, storedError => {
                if (!preventAbort) {
                    shutdownWithAction(() => WritableStreamAbort(dest, storedError), true, storedError);
                }
                else {
                    shutdown(true, storedError);
                }
            });
            // Errors must be propagated backward
            isOrBecomesErrored(dest, writer._closedPromise, storedError => {
                if (!preventCancel) {
                    shutdownWithAction(() => ReadableStreamCancel(source, storedError), true, storedError);
                }
                else {
                    shutdown(true, storedError);
                }
            });
            // Closing must be propagated forward
            isOrBecomesClosed(source, reader._closedPromise, () => {
                if (!preventClose) {
                    shutdownWithAction(() => WritableStreamDefaultWriterCloseWithErrorPropagation(writer));
                }
                else {
                    shutdown();
                }
            });
            // Closing must be propagated backward
            if (WritableStreamCloseQueuedOrInFlight(dest) || dest._state === 'closed') {
                const destClosed = new TypeError('the destination writable stream closed before all data could be piped to it');
                if (!preventCancel) {
                    shutdownWithAction(() => ReadableStreamCancel(source, destClosed), true, destClosed);
                }
                else {
                    shutdown(true, destClosed);
                }
            }
            setPromiseIsHandledToTrue(pipeLoop());
            function waitForWritesToFinish() {
                // Another write may have started while we were waiting on this currentWrite, so we have to be sure to wait
                // for that too.
                const oldCurrentWrite = currentWrite;
                return PerformPromiseThen(currentWrite, () => oldCurrentWrite !== currentWrite ? waitForWritesToFinish() : undefined);
            }
            function isOrBecomesErrored(stream, promise, action) {
                if (stream._state === 'errored') {
                    action(stream._storedError);
                }
                else {
                    uponRejection(promise, action);
                }
            }
            function isOrBecomesClosed(stream, promise, action) {
                if (stream._state === 'closed') {
                    action();
                }
                else {
                    uponFulfillment(promise, action);
                }
            }
            function shutdownWithAction(action, originalIsError, originalError) {
                if (shuttingDown) {
                    return;
                }
                shuttingDown = true;
                if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {
                    uponFulfillment(waitForWritesToFinish(), doTheRest);
                }
                else {
                    doTheRest();
                }
                function doTheRest() {
                    uponPromise(action(), () => finalize(originalIsError, originalError), newError => finalize(true, newError));
                }
            }
            function shutdown(isError, error) {
                if (shuttingDown) {
                    return;
                }
                shuttingDown = true;
                if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {
                    uponFulfillment(waitForWritesToFinish(), () => finalize(isError, error));
                }
                else {
                    finalize(isError, error);
                }
            }
            function finalize(isError, error) {
                WritableStreamDefaultWriterRelease(writer);
                ReadableStreamReaderGenericRelease(reader);
                if (signal !== undefined) {
                    signal.removeEventListener('abort', abortAlgorithm);
                }
                if (isError) {
                    reject(error);
                }
                else {
                    resolve(undefined);
                }
            }
        });
    }

    /**
     * Allows control of a {@link ReadableStream | readable stream}'s state and internal queue.
     *
     * @public
     */
    class ReadableStreamDefaultController {
        constructor() {
            throw new TypeError('Illegal constructor');
        }
        /**
         * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is
         * over-full. An underlying source ought to use this information to determine when and how to apply backpressure.
         */
        get desiredSize() {
            if (!IsReadableStreamDefaultController(this)) {
                throw defaultControllerBrandCheckException$1('desiredSize');
            }
            return ReadableStreamDefaultControllerGetDesiredSize(this);
        }
        /**
         * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from
         * the stream, but once those are read, the stream will become closed.
         */
        close() {
            if (!IsReadableStreamDefaultController(this)) {
                throw defaultControllerBrandCheckException$1('close');
            }
            if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {
                throw new TypeError('The stream is not in a state that permits close');
            }
            ReadableStreamDefaultControllerClose(this);
        }
        enqueue(chunk = undefined) {
            if (!IsReadableStreamDefaultController(this)) {
                throw defaultControllerBrandCheckException$1('enqueue');
            }
            if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {
                throw new TypeError('The stream is not in a state that permits enqueue');
            }
            return ReadableStreamDefaultControllerEnqueue(this, chunk);
        }
        /**
         * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.
         */
        error(e = undefined) {
            if (!IsReadableStreamDefaultController(this)) {
                throw defaultControllerBrandCheckException$1('error');
            }
            ReadableStreamDefaultControllerError(this, e);
        }
        /** @internal */
        [CancelSteps](reason) {
            ResetQueue(this);
            const result = this._cancelAlgorithm(reason);
            ReadableStreamDefaultControllerClearAlgorithms(this);
            return result;
        }
        /** @internal */
        [PullSteps](readRequest) {
            const stream = this._controlledReadableStream;
            if (this._queue.length > 0) {
                const chunk = DequeueValue(this);
                if (this._closeRequested && this._queue.length === 0) {
                    ReadableStreamDefaultControllerClearAlgorithms(this);
                    ReadableStreamClose(stream);
                }
                else {
                    ReadableStreamDefaultControllerCallPullIfNeeded(this);
                }
                readRequest._chunkSteps(chunk);
            }
            else {
                ReadableStreamAddReadRequest(stream, readRequest);
                ReadableStreamDefaultControllerCallPullIfNeeded(this);
            }
        }
    }
    Object.defineProperties(ReadableStreamDefaultController.prototype, {
        close: { enumerable: true },
        enqueue: { enumerable: true },
        error: { enumerable: true },
        desiredSize: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(ReadableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {
            value: 'ReadableStreamDefaultController',
            configurable: true
        });
    }
    // Abstract operations for the ReadableStreamDefaultController.
    function IsReadableStreamDefaultController(x) {
        if (!typeIsObject(x)) {
            return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableStream')) {
            return false;
        }
        return x instanceof ReadableStreamDefaultController;
    }
    function ReadableStreamDefaultControllerCallPullIfNeeded(controller) {
        const shouldPull = ReadableStreamDefaultControllerShouldCallPull(controller);
        if (!shouldPull) {
            return;
        }
        if (controller._pulling) {
            controller._pullAgain = true;
            return;
        }
        controller._pulling = true;
        const pullPromise = controller._pullAlgorithm();
        uponPromise(pullPromise, () => {
            controller._pulling = false;
            if (controller._pullAgain) {
                controller._pullAgain = false;
                ReadableStreamDefaultControllerCallPullIfNeeded(controller);
            }
        }, e => {
            ReadableStreamDefaultControllerError(controller, e);
        });
    }
    function ReadableStreamDefaultControllerShouldCallPull(controller) {
        const stream = controller._controlledReadableStream;
        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {
            return false;
        }
        if (!controller._started) {
            return false;
        }
        if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {
            return true;
        }
        const desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);
        if (desiredSize > 0) {
            return true;
        }
        return false;
    }
    function ReadableStreamDefaultControllerClearAlgorithms(controller) {
        controller._pullAlgorithm = undefined;
        controller._cancelAlgorithm = undefined;
        controller._strategySizeAlgorithm = undefined;
    }
    // A client of ReadableStreamDefaultController may use these functions directly to bypass state check.
    function ReadableStreamDefaultControllerClose(controller) {
        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {
            return;
        }
        const stream = controller._controlledReadableStream;
        controller._closeRequested = true;
        if (controller._queue.length === 0) {
            ReadableStreamDefaultControllerClearAlgorithms(controller);
            ReadableStreamClose(stream);
        }
    }
    function ReadableStreamDefaultControllerEnqueue(controller, chunk) {
        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {
            return;
        }
        const stream = controller._controlledReadableStream;
        if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {
            ReadableStreamFulfillReadRequest(stream, chunk, false);
        }
        else {
            let chunkSize;
            try {
                chunkSize = controller._strategySizeAlgorithm(chunk);
            }
            catch (chunkSizeE) {
                ReadableStreamDefaultControllerError(controller, chunkSizeE);
                throw chunkSizeE;
            }
            try {
                EnqueueValueWithSize(controller, chunk, chunkSize);
            }
            catch (enqueueE) {
                ReadableStreamDefaultControllerError(controller, enqueueE);
                throw enqueueE;
            }
        }
        ReadableStreamDefaultControllerCallPullIfNeeded(controller);
    }
    function ReadableStreamDefaultControllerError(controller, e) {
        const stream = controller._controlledReadableStream;
        if (stream._state !== 'readable') {
            return;
        }
        ResetQueue(controller);
        ReadableStreamDefaultControllerClearAlgorithms(controller);
        ReadableStreamError(stream, e);
    }
    function ReadableStreamDefaultControllerGetDesiredSize(controller) {
        const state = controller._controlledReadableStream._state;
        if (state === 'errored') {
            return null;
        }
        if (state === 'closed') {
            return 0;
        }
        return controller._strategyHWM - controller._queueTotalSize;
    }
    // This is used in the implementation of TransformStream.
    function ReadableStreamDefaultControllerHasBackpressure(controller) {
        if (ReadableStreamDefaultControllerShouldCallPull(controller)) {
            return false;
        }
        return true;
    }
    function ReadableStreamDefaultControllerCanCloseOrEnqueue(controller) {
        const state = controller._controlledReadableStream._state;
        if (!controller._closeRequested && state === 'readable') {
            return true;
        }
        return false;
    }
    function SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm) {
        controller._controlledReadableStream = stream;
        controller._queue = undefined;
        controller._queueTotalSize = undefined;
        ResetQueue(controller);
        controller._started = false;
        controller._closeRequested = false;
        controller._pullAgain = false;
        controller._pulling = false;
        controller._strategySizeAlgorithm = sizeAlgorithm;
        controller._strategyHWM = highWaterMark;
        controller._pullAlgorithm = pullAlgorithm;
        controller._cancelAlgorithm = cancelAlgorithm;
        stream._readableStreamController = controller;
        const startResult = startAlgorithm();
        uponPromise(promiseResolvedWith(startResult), () => {
            controller._started = true;
            ReadableStreamDefaultControllerCallPullIfNeeded(controller);
        }, r => {
            ReadableStreamDefaultControllerError(controller, r);
        });
    }
    function SetUpReadableStreamDefaultControllerFromUnderlyingSource(stream, underlyingSource, highWaterMark, sizeAlgorithm) {
        const controller = Object.create(ReadableStreamDefaultController.prototype);
        let startAlgorithm = () => undefined;
        let pullAlgorithm = () => promiseResolvedWith(undefined);
        let cancelAlgorithm = () => promiseResolvedWith(undefined);
        if (underlyingSource.start !== undefined) {
            startAlgorithm = () => underlyingSource.start(controller);
        }
        if (underlyingSource.pull !== undefined) {
            pullAlgorithm = () => underlyingSource.pull(controller);
        }
        if (underlyingSource.cancel !== undefined) {
            cancelAlgorithm = reason => underlyingSource.cancel(reason);
        }
        SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);
    }
    // Helper functions for the ReadableStreamDefaultController.
    function defaultControllerBrandCheckException$1(name) {
        return new TypeError(`ReadableStreamDefaultController.prototype.${name} can only be used on a ReadableStreamDefaultController`);
    }

    function ReadableStreamTee(stream, cloneForBranch2) {
        if (IsReadableByteStreamController(stream._readableStreamController)) {
            return ReadableByteStreamTee(stream);
        }
        return ReadableStreamDefaultTee(stream);
    }
    function ReadableStreamDefaultTee(stream, cloneForBranch2) {
        const reader = AcquireReadableStreamDefaultReader(stream);
        let reading = false;
        let readAgain = false;
        let canceled1 = false;
        let canceled2 = false;
        let reason1;
        let reason2;
        let branch1;
        let branch2;
        let resolveCancelPromise;
        const cancelPromise = newPromise(resolve => {
            resolveCancelPromise = resolve;
        });
        function pullAlgorithm() {
            if (reading) {
                readAgain = true;
                return promiseResolvedWith(undefined);
            }
            reading = true;
            const readRequest = {
                _chunkSteps: chunk => {
                    // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using
                    // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let
                    // successful synchronously-available reads get ahead of asynchronously-available errors.
                    queueMicrotask(() => {
                        readAgain = false;
                        const chunk1 = chunk;
                        const chunk2 = chunk;
                        // There is no way to access the cloning code right now in the reference implementation.
                        // If we add one then we'll need an implementation for serializable objects.
                        // if (!canceled2 && cloneForBranch2) {
                        //   chunk2 = StructuredDeserialize(StructuredSerialize(chunk2));
                        // }
                        if (!canceled1) {
                            ReadableStreamDefaultControllerEnqueue(branch1._readableStreamController, chunk1);
                        }
                        if (!canceled2) {
                            ReadableStreamDefaultControllerEnqueue(branch2._readableStreamController, chunk2);
                        }
                        reading = false;
                        if (readAgain) {
                            pullAlgorithm();
                        }
                    });
                },
                _closeSteps: () => {
                    reading = false;
                    if (!canceled1) {
                        ReadableStreamDefaultControllerClose(branch1._readableStreamController);
                    }
                    if (!canceled2) {
                        ReadableStreamDefaultControllerClose(branch2._readableStreamController);
                    }
                    if (!canceled1 || !canceled2) {
                        resolveCancelPromise(undefined);
                    }
                },
                _errorSteps: () => {
                    reading = false;
                }
            };
            ReadableStreamDefaultReaderRead(reader, readRequest);
            return promiseResolvedWith(undefined);
        }
        function cancel1Algorithm(reason) {
            canceled1 = true;
            reason1 = reason;
            if (canceled2) {
                const compositeReason = CreateArrayFromList([reason1, reason2]);
                const cancelResult = ReadableStreamCancel(stream, compositeReason);
                resolveCancelPromise(cancelResult);
            }
            return cancelPromise;
        }
        function cancel2Algorithm(reason) {
            canceled2 = true;
            reason2 = reason;
            if (canceled1) {
                const compositeReason = CreateArrayFromList([reason1, reason2]);
                const cancelResult = ReadableStreamCancel(stream, compositeReason);
                resolveCancelPromise(cancelResult);
            }
            return cancelPromise;
        }
        function startAlgorithm() {
            // do nothing
        }
        branch1 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel1Algorithm);
        branch2 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel2Algorithm);
        uponRejection(reader._closedPromise, (r) => {
            ReadableStreamDefaultControllerError(branch1._readableStreamController, r);
            ReadableStreamDefaultControllerError(branch2._readableStreamController, r);
            if (!canceled1 || !canceled2) {
                resolveCancelPromise(undefined);
            }
        });
        return [branch1, branch2];
    }
    function ReadableByteStreamTee(stream) {
        let reader = AcquireReadableStreamDefaultReader(stream);
        let reading = false;
        let readAgainForBranch1 = false;
        let readAgainForBranch2 = false;
        let canceled1 = false;
        let canceled2 = false;
        let reason1;
        let reason2;
        let branch1;
        let branch2;
        let resolveCancelPromise;
        const cancelPromise = newPromise(resolve => {
            resolveCancelPromise = resolve;
        });
        function forwardReaderError(thisReader) {
            uponRejection(thisReader._closedPromise, r => {
                if (thisReader !== reader) {
                    return;
                }
                ReadableByteStreamControllerError(branch1._readableStreamController, r);
                ReadableByteStreamControllerError(branch2._readableStreamController, r);
                if (!canceled1 || !canceled2) {
                    resolveCancelPromise(undefined);
                }
            });
        }
        function pullWithDefaultReader() {
            if (IsReadableStreamBYOBReader(reader)) {
                ReadableStreamReaderGenericRelease(reader);
                reader = AcquireReadableStreamDefaultReader(stream);
                forwardReaderError(reader);
            }
            const readRequest = {
                _chunkSteps: chunk => {
                    // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using
                    // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let
                    // successful synchronously-available reads get ahead of asynchronously-available errors.
                    queueMicrotask(() => {
                        readAgainForBranch1 = false;
                        readAgainForBranch2 = false;
                        const chunk1 = chunk;
                        let chunk2 = chunk;
                        if (!canceled1 && !canceled2) {
                            try {
                                chunk2 = CloneAsUint8Array(chunk);
                            }
                            catch (cloneE) {
                                ReadableByteStreamControllerError(branch1._readableStreamController, cloneE);
                                ReadableByteStreamControllerError(branch2._readableStreamController, cloneE);
                                resolveCancelPromise(ReadableStreamCancel(stream, cloneE));
                                return;
                            }
                        }
                        if (!canceled1) {
                            ReadableByteStreamControllerEnqueue(branch1._readableStreamController, chunk1);
                        }
                        if (!canceled2) {
                            ReadableByteStreamControllerEnqueue(branch2._readableStreamController, chunk2);
                        }
                        reading = false;
                        if (readAgainForBranch1) {
                            pull1Algorithm();
                        }
                        else if (readAgainForBranch2) {
                            pull2Algorithm();
                        }
                    });
                },
                _closeSteps: () => {
                    reading = false;
                    if (!canceled1) {
                        ReadableByteStreamControllerClose(branch1._readableStreamController);
                    }
                    if (!canceled2) {
                        ReadableByteStreamControllerClose(branch2._readableStreamController);
                    }
                    if (branch1._readableStreamController._pendingPullIntos.length > 0) {
                        ReadableByteStreamControllerRespond(branch1._readableStreamController, 0);
                    }
                    if (branch2._readableStreamController._pendingPullIntos.length > 0) {
                        ReadableByteStreamControllerRespond(branch2._readableStreamController, 0);
                    }
                    if (!canceled1 || !canceled2) {
                        resolveCancelPromise(undefined);
                    }
                },
                _errorSteps: () => {
                    reading = false;
                }
            };
            ReadableStreamDefaultReaderRead(reader, readRequest);
        }
        function pullWithBYOBReader(view, forBranch2) {
            if (IsReadableStreamDefaultReader(reader)) {
                ReadableStreamReaderGenericRelease(reader);
                reader = AcquireReadableStreamBYOBReader(stream);
                forwardReaderError(reader);
            }
            const byobBranch = forBranch2 ? branch2 : branch1;
            const otherBranch = forBranch2 ? branch1 : branch2;
            const readIntoRequest = {
                _chunkSteps: chunk => {
                    // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using
                    // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let
                    // successful synchronously-available reads get ahead of asynchronously-available errors.
                    queueMicrotask(() => {
                        readAgainForBranch1 = false;
                        readAgainForBranch2 = false;
                        const byobCanceled = forBranch2 ? canceled2 : canceled1;
                        const otherCanceled = forBranch2 ? canceled1 : canceled2;
                        if (!otherCanceled) {
                            let clonedChunk;
                            try {
                                clonedChunk = CloneAsUint8Array(chunk);
                            }
                            catch (cloneE) {
                                ReadableByteStreamControllerError(byobBranch._readableStreamController, cloneE);
                                ReadableByteStreamControllerError(otherBranch._readableStreamController, cloneE);
                                resolveCancelPromise(ReadableStreamCancel(stream, cloneE));
                                return;
                            }
                            if (!byobCanceled) {
                                ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);
                            }
                            ReadableByteStreamControllerEnqueue(otherBranch._readableStreamController, clonedChunk);
                        }
                        else if (!byobCanceled) {
                            ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);
                        }
                        reading = false;
                        if (readAgainForBranch1) {
                            pull1Algorithm();
                        }
                        else if (readAgainForBranch2) {
                            pull2Algorithm();
                        }
                    });
                },
                _closeSteps: chunk => {
                    reading = false;
                    const byobCanceled = forBranch2 ? canceled2 : canceled1;
                    const otherCanceled = forBranch2 ? canceled1 : canceled2;
                    if (!byobCanceled) {
                        ReadableByteStreamControllerClose(byobBranch._readableStreamController);
                    }
                    if (!otherCanceled) {
                        ReadableByteStreamControllerClose(otherBranch._readableStreamController);
                    }
                    if (chunk !== undefined) {
                        if (!byobCanceled) {
                            ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);
                        }
                        if (!otherCanceled && otherBranch._readableStreamController._pendingPullIntos.length > 0) {
                            ReadableByteStreamControllerRespond(otherBranch._readableStreamController, 0);
                        }
                    }
                    if (!byobCanceled || !otherCanceled) {
                        resolveCancelPromise(undefined);
                    }
                },
                _errorSteps: () => {
                    reading = false;
                }
            };
            ReadableStreamBYOBReaderRead(reader, view, readIntoRequest);
        }
        function pull1Algorithm() {
            if (reading) {
                readAgainForBranch1 = true;
                return promiseResolvedWith(undefined);
            }
            reading = true;
            const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch1._readableStreamController);
            if (byobRequest === null) {
                pullWithDefaultReader();
            }
            else {
                pullWithBYOBReader(byobRequest._view, false);
            }
            return promiseResolvedWith(undefined);
        }
        function pull2Algorithm() {
            if (reading) {
                readAgainForBranch2 = true;
                return promiseResolvedWith(undefined);
            }
            reading = true;
            const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch2._readableStreamController);
            if (byobRequest === null) {
                pullWithDefaultReader();
            }
            else {
                pullWithBYOBReader(byobRequest._view, true);
            }
            return promiseResolvedWith(undefined);
        }
        function cancel1Algorithm(reason) {
            canceled1 = true;
            reason1 = reason;
            if (canceled2) {
                const compositeReason = CreateArrayFromList([reason1, reason2]);
                const cancelResult = ReadableStreamCancel(stream, compositeReason);
                resolveCancelPromise(cancelResult);
            }
            return cancelPromise;
        }
        function cancel2Algorithm(reason) {
            canceled2 = true;
            reason2 = reason;
            if (canceled1) {
                const compositeReason = CreateArrayFromList([reason1, reason2]);
                const cancelResult = ReadableStreamCancel(stream, compositeReason);
                resolveCancelPromise(cancelResult);
            }
            return cancelPromise;
        }
        function startAlgorithm() {
            return;
        }
        branch1 = CreateReadableByteStream(startAlgorithm, pull1Algorithm, cancel1Algorithm);
        branch2 = CreateReadableByteStream(startAlgorithm, pull2Algorithm, cancel2Algorithm);
        forwardReaderError(reader);
        return [branch1, branch2];
    }

    function convertUnderlyingDefaultOrByteSource(source, context) {
        assertDictionary(source, context);
        const original = source;
        const autoAllocateChunkSize = original === null || original === void 0 ? void 0 : original.autoAllocateChunkSize;
        const cancel = original === null || original === void 0 ? void 0 : original.cancel;
        const pull = original === null || original === void 0 ? void 0 : original.pull;
        const start = original === null || original === void 0 ? void 0 : original.start;
        const type = original === null || original === void 0 ? void 0 : original.type;
        return {
            autoAllocateChunkSize: autoAllocateChunkSize === undefined ?
                undefined :
                convertUnsignedLongLongWithEnforceRange(autoAllocateChunkSize, `${context} has member 'autoAllocateChunkSize' that`),
            cancel: cancel === undefined ?
                undefined :
                convertUnderlyingSourceCancelCallback(cancel, original, `${context} has member 'cancel' that`),
            pull: pull === undefined ?
                undefined :
                convertUnderlyingSourcePullCallback(pull, original, `${context} has member 'pull' that`),
            start: start === undefined ?
                undefined :
                convertUnderlyingSourceStartCallback(start, original, `${context} has member 'start' that`),
            type: type === undefined ? undefined : convertReadableStreamType(type, `${context} has member 'type' that`)
        };
    }
    function convertUnderlyingSourceCancelCallback(fn, original, context) {
        assertFunction(fn, context);
        return (reason) => promiseCall(fn, original, [reason]);
    }
    function convertUnderlyingSourcePullCallback(fn, original, context) {
        assertFunction(fn, context);
        return (controller) => promiseCall(fn, original, [controller]);
    }
    function convertUnderlyingSourceStartCallback(fn, original, context) {
        assertFunction(fn, context);
        return (controller) => reflectCall(fn, original, [controller]);
    }
    function convertReadableStreamType(type, context) {
        type = `${type}`;
        if (type !== 'bytes') {
            throw new TypeError(`${context} '${type}' is not a valid enumeration value for ReadableStreamType`);
        }
        return type;
    }

    function convertReaderOptions(options, context) {
        assertDictionary(options, context);
        const mode = options === null || options === void 0 ? void 0 : options.mode;
        return {
            mode: mode === undefined ? undefined : convertReadableStreamReaderMode(mode, `${context} has member 'mode' that`)
        };
    }
    function convertReadableStreamReaderMode(mode, context) {
        mode = `${mode}`;
        if (mode !== 'byob') {
            throw new TypeError(`${context} '${mode}' is not a valid enumeration value for ReadableStreamReaderMode`);
        }
        return mode;
    }

    function convertIteratorOptions(options, context) {
        assertDictionary(options, context);
        const preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;
        return { preventCancel: Boolean(preventCancel) };
    }

    function convertPipeOptions(options, context) {
        assertDictionary(options, context);
        const preventAbort = options === null || options === void 0 ? void 0 : options.preventAbort;
        const preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;
        const preventClose = options === null || options === void 0 ? void 0 : options.preventClose;
        const signal = options === null || options === void 0 ? void 0 : options.signal;
        if (signal !== undefined) {
            assertAbortSignal(signal, `${context} has member 'signal' that`);
        }
        return {
            preventAbort: Boolean(preventAbort),
            preventCancel: Boolean(preventCancel),
            preventClose: Boolean(preventClose),
            signal
        };
    }
    function assertAbortSignal(signal, context) {
        if (!isAbortSignal(signal)) {
            throw new TypeError(`${context} is not an AbortSignal.`);
        }
    }

    function convertReadableWritablePair(pair, context) {
        assertDictionary(pair, context);
        const readable = pair === null || pair === void 0 ? void 0 : pair.readable;
        assertRequiredField(readable, 'readable', 'ReadableWritablePair');
        assertReadableStream(readable, `${context} has member 'readable' that`);
        const writable = pair === null || pair === void 0 ? void 0 : pair.writable;
        assertRequiredField(writable, 'writable', 'ReadableWritablePair');
        assertWritableStream(writable, `${context} has member 'writable' that`);
        return { readable, writable };
    }

    /**
     * A readable stream represents a source of data, from which you can read.
     *
     * @public
     */
    class ReadableStream {
        constructor(rawUnderlyingSource = {}, rawStrategy = {}) {
            if (rawUnderlyingSource === undefined) {
                rawUnderlyingSource = null;
            }
            else {
                assertObject(rawUnderlyingSource, 'First parameter');
            }
            const strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');
            const underlyingSource = convertUnderlyingDefaultOrByteSource(rawUnderlyingSource, 'First parameter');
            InitializeReadableStream(this);
            if (underlyingSource.type === 'bytes') {
                if (strategy.size !== undefined) {
                    throw new RangeError('The strategy for a byte stream cannot have a size function');
                }
                const highWaterMark = ExtractHighWaterMark(strategy, 0);
                SetUpReadableByteStreamControllerFromUnderlyingSource(this, underlyingSource, highWaterMark);
            }
            else {
                const sizeAlgorithm = ExtractSizeAlgorithm(strategy);
                const highWaterMark = ExtractHighWaterMark(strategy, 1);
                SetUpReadableStreamDefaultControllerFromUnderlyingSource(this, underlyingSource, highWaterMark, sizeAlgorithm);
            }
        }
        /**
         * Whether or not the readable stream is locked to a {@link ReadableStreamDefaultReader | reader}.
         */
        get locked() {
            if (!IsReadableStream(this)) {
                throw streamBrandCheckException$1('locked');
            }
            return IsReadableStreamLocked(this);
        }
        /**
         * Cancels the stream, signaling a loss of interest in the stream by a consumer.
         *
         * The supplied `reason` argument will be given to the underlying source's {@link UnderlyingSource.cancel | cancel()}
         * method, which might or might not use it.
         */
        cancel(reason = undefined) {
            if (!IsReadableStream(this)) {
                return promiseRejectedWith(streamBrandCheckException$1('cancel'));
            }
            if (IsReadableStreamLocked(this)) {
                return promiseRejectedWith(new TypeError('Cannot cancel a stream that already has a reader'));
            }
            return ReadableStreamCancel(this, reason);
        }
        getReader(rawOptions = undefined) {
            if (!IsReadableStream(this)) {
                throw streamBrandCheckException$1('getReader');
            }
            const options = convertReaderOptions(rawOptions, 'First parameter');
            if (options.mode === undefined) {
                return AcquireReadableStreamDefaultReader(this);
            }
            return AcquireReadableStreamBYOBReader(this);
        }
        pipeThrough(rawTransform, rawOptions = {}) {
            if (!IsReadableStream(this)) {
                throw streamBrandCheckException$1('pipeThrough');
            }
            assertRequiredArgument(rawTransform, 1, 'pipeThrough');
            const transform = convertReadableWritablePair(rawTransform, 'First parameter');
            const options = convertPipeOptions(rawOptions, 'Second parameter');
            if (IsReadableStreamLocked(this)) {
                throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream');
            }
            if (IsWritableStreamLocked(transform.writable)) {
                throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream');
            }
            const promise = ReadableStreamPipeTo(this, transform.writable, options.preventClose, options.preventAbort, options.preventCancel, options.signal);
            setPromiseIsHandledToTrue(promise);
            return transform.readable;
        }
        pipeTo(destination, rawOptions = {}) {
            if (!IsReadableStream(this)) {
                return promiseRejectedWith(streamBrandCheckException$1('pipeTo'));
            }
            if (destination === undefined) {
                return promiseRejectedWith(`Parameter 1 is required in 'pipeTo'.`);
            }
            if (!IsWritableStream(destination)) {
                return promiseRejectedWith(new TypeError(`ReadableStream.prototype.pipeTo's first argument must be a WritableStream`));
            }
            let options;
            try {
                options = convertPipeOptions(rawOptions, 'Second parameter');
            }
            catch (e) {
                return promiseRejectedWith(e);
            }
            if (IsReadableStreamLocked(this)) {
                return promiseRejectedWith(new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream'));
            }
            if (IsWritableStreamLocked(destination)) {
                return promiseRejectedWith(new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream'));
            }
            return ReadableStreamPipeTo(this, destination, options.preventClose, options.preventAbort, options.preventCancel, options.signal);
        }
        /**
         * Tees this readable stream, returning a two-element array containing the two resulting branches as
         * new {@link ReadableStream} instances.
         *
         * Teeing a stream will lock it, preventing any other consumer from acquiring a reader.
         * To cancel the stream, cancel both of the resulting branches; a composite cancellation reason will then be
         * propagated to the stream's underlying source.
         *
         * Note that the chunks seen in each branch will be the same object. If the chunks are not immutable,
         * this could allow interference between the two branches.
         */
        tee() {
            if (!IsReadableStream(this)) {
                throw streamBrandCheckException$1('tee');
            }
            const branches = ReadableStreamTee(this);
            return CreateArrayFromList(branches);
        }
        values(rawOptions = undefined) {
            if (!IsReadableStream(this)) {
                throw streamBrandCheckException$1('values');
            }
            const options = convertIteratorOptions(rawOptions, 'First parameter');
            return AcquireReadableStreamAsyncIterator(this, options.preventCancel);
        }
    }
    Object.defineProperties(ReadableStream.prototype, {
        cancel: { enumerable: true },
        getReader: { enumerable: true },
        pipeThrough: { enumerable: true },
        pipeTo: { enumerable: true },
        tee: { enumerable: true },
        values: { enumerable: true },
        locked: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(ReadableStream.prototype, SymbolPolyfill.toStringTag, {
            value: 'ReadableStream',
            configurable: true
        });
    }
    if (typeof SymbolPolyfill.asyncIterator === 'symbol') {
        Object.defineProperty(ReadableStream.prototype, SymbolPolyfill.asyncIterator, {
            value: ReadableStream.prototype.values,
            writable: true,
            configurable: true
        });
    }
    // Abstract operations for the ReadableStream.
    // Throws if and only if startAlgorithm throws.
    function CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark = 1, sizeAlgorithm = () => 1) {
        const stream = Object.create(ReadableStream.prototype);
        InitializeReadableStream(stream);
        const controller = Object.create(ReadableStreamDefaultController.prototype);
        SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);
        return stream;
    }
    // Throws if and only if startAlgorithm throws.
    function CreateReadableByteStream(startAlgorithm, pullAlgorithm, cancelAlgorithm) {
        const stream = Object.create(ReadableStream.prototype);
        InitializeReadableStream(stream);
        const controller = Object.create(ReadableByteStreamController.prototype);
        SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, 0, undefined);
        return stream;
    }
    function InitializeReadableStream(stream) {
        stream._state = 'readable';
        stream._reader = undefined;
        stream._storedError = undefined;
        stream._disturbed = false;
    }
    function IsReadableStream(x) {
        if (!typeIsObject(x)) {
            return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_readableStreamController')) {
            return false;
        }
        return x instanceof ReadableStream;
    }
    function IsReadableStreamLocked(stream) {
        if (stream._reader === undefined) {
            return false;
        }
        return true;
    }
    // ReadableStream API exposed for controllers.
    function ReadableStreamCancel(stream, reason) {
        stream._disturbed = true;
        if (stream._state === 'closed') {
            return promiseResolvedWith(undefined);
        }
        if (stream._state === 'errored') {
            return promiseRejectedWith(stream._storedError);
        }
        ReadableStreamClose(stream);
        const reader = stream._reader;
        if (reader !== undefined && IsReadableStreamBYOBReader(reader)) {
            reader._readIntoRequests.forEach(readIntoRequest => {
                readIntoRequest._closeSteps(undefined);
            });
            reader._readIntoRequests = new SimpleQueue();
        }
        const sourceCancelPromise = stream._readableStreamController[CancelSteps](reason);
        return transformPromiseWith(sourceCancelPromise, noop);
    }
    function ReadableStreamClose(stream) {
        stream._state = 'closed';
        const reader = stream._reader;
        if (reader === undefined) {
            return;
        }
        defaultReaderClosedPromiseResolve(reader);
        if (IsReadableStreamDefaultReader(reader)) {
            reader._readRequests.forEach(readRequest => {
                readRequest._closeSteps();
            });
            reader._readRequests = new SimpleQueue();
        }
    }
    function ReadableStreamError(stream, e) {
        stream._state = 'errored';
        stream._storedError = e;
        const reader = stream._reader;
        if (reader === undefined) {
            return;
        }
        defaultReaderClosedPromiseReject(reader, e);
        if (IsReadableStreamDefaultReader(reader)) {
            reader._readRequests.forEach(readRequest => {
                readRequest._errorSteps(e);
            });
            reader._readRequests = new SimpleQueue();
        }
        else {
            reader._readIntoRequests.forEach(readIntoRequest => {
                readIntoRequest._errorSteps(e);
            });
            reader._readIntoRequests = new SimpleQueue();
        }
    }
    // Helper functions for the ReadableStream.
    function streamBrandCheckException$1(name) {
        return new TypeError(`ReadableStream.prototype.${name} can only be used on a ReadableStream`);
    }

    function convertQueuingStrategyInit(init, context) {
        assertDictionary(init, context);
        const highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;
        assertRequiredField(highWaterMark, 'highWaterMark', 'QueuingStrategyInit');
        return {
            highWaterMark: convertUnrestrictedDouble(highWaterMark)
        };
    }

    // The size function must not have a prototype property nor be a constructor
    const byteLengthSizeFunction = (chunk) => {
        return chunk.byteLength;
    };
    try {
        Object.defineProperty(byteLengthSizeFunction, 'name', {
            value: 'size',
            configurable: true
        });
    }
    catch (_a) {
        // This property is non-configurable in older browsers, so ignore if this throws.
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name#browser_compatibility
    }
    /**
     * A queuing strategy that counts the number of bytes in each chunk.
     *
     * @public
     */
    class ByteLengthQueuingStrategy {
        constructor(options) {
            assertRequiredArgument(options, 1, 'ByteLengthQueuingStrategy');
            options = convertQueuingStrategyInit(options, 'First parameter');
            this._byteLengthQueuingStrategyHighWaterMark = options.highWaterMark;
        }
        /**
         * Returns the high water mark provided to the constructor.
         */
        get highWaterMark() {
            if (!IsByteLengthQueuingStrategy(this)) {
                throw byteLengthBrandCheckException('highWaterMark');
            }
            return this._byteLengthQueuingStrategyHighWaterMark;
        }
        /**
         * Measures the size of `chunk` by returning the value of its `byteLength` property.
         */
        get size() {
            if (!IsByteLengthQueuingStrategy(this)) {
                throw byteLengthBrandCheckException('size');
            }
            return byteLengthSizeFunction;
        }
    }
    Object.defineProperties(ByteLengthQueuingStrategy.prototype, {
        highWaterMark: { enumerable: true },
        size: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(ByteLengthQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {
            value: 'ByteLengthQueuingStrategy',
            configurable: true
        });
    }
    // Helper functions for the ByteLengthQueuingStrategy.
    function byteLengthBrandCheckException(name) {
        return new TypeError(`ByteLengthQueuingStrategy.prototype.${name} can only be used on a ByteLengthQueuingStrategy`);
    }
    function IsByteLengthQueuingStrategy(x) {
        if (!typeIsObject(x)) {
            return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_byteLengthQueuingStrategyHighWaterMark')) {
            return false;
        }
        return x instanceof ByteLengthQueuingStrategy;
    }

    // The size function must not have a prototype property nor be a constructor
    const countSizeFunction = () => {
        return 1;
    };
    try {
        Object.defineProperty(countSizeFunction, 'name', {
            value: 'size',
            configurable: true
        });
    }
    catch (_a) {
        // This property is non-configurable in older browsers, so ignore if this throws.
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name#browser_compatibility
    }
    /**
     * A queuing strategy that counts the number of chunks.
     *
     * @public
     */
    class CountQueuingStrategy {
        constructor(options) {
            assertRequiredArgument(options, 1, 'CountQueuingStrategy');
            options = convertQueuingStrategyInit(options, 'First parameter');
            this._countQueuingStrategyHighWaterMark = options.highWaterMark;
        }
        /**
         * Returns the high water mark provided to the constructor.
         */
        get highWaterMark() {
            if (!IsCountQueuingStrategy(this)) {
                throw countBrandCheckException('highWaterMark');
            }
            return this._countQueuingStrategyHighWaterMark;
        }
        /**
         * Measures the size of `chunk` by always returning 1.
         * This ensures that the total queue size is a count of the number of chunks in the queue.
         */
        get size() {
            if (!IsCountQueuingStrategy(this)) {
                throw countBrandCheckException('size');
            }
            return countSizeFunction;
        }
    }
    Object.defineProperties(CountQueuingStrategy.prototype, {
        highWaterMark: { enumerable: true },
        size: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(CountQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {
            value: 'CountQueuingStrategy',
            configurable: true
        });
    }
    // Helper functions for the CountQueuingStrategy.
    function countBrandCheckException(name) {
        return new TypeError(`CountQueuingStrategy.prototype.${name} can only be used on a CountQueuingStrategy`);
    }
    function IsCountQueuingStrategy(x) {
        if (!typeIsObject(x)) {
            return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_countQueuingStrategyHighWaterMark')) {
            return false;
        }
        return x instanceof CountQueuingStrategy;
    }

    function convertTransformer(original, context) {
        assertDictionary(original, context);
        const flush = original === null || original === void 0 ? void 0 : original.flush;
        const readableType = original === null || original === void 0 ? void 0 : original.readableType;
        const start = original === null || original === void 0 ? void 0 : original.start;
        const transform = original === null || original === void 0 ? void 0 : original.transform;
        const writableType = original === null || original === void 0 ? void 0 : original.writableType;
        return {
            flush: flush === undefined ?
                undefined :
                convertTransformerFlushCallback(flush, original, `${context} has member 'flush' that`),
            readableType,
            start: start === undefined ?
                undefined :
                convertTransformerStartCallback(start, original, `${context} has member 'start' that`),
            transform: transform === undefined ?
                undefined :
                convertTransformerTransformCallback(transform, original, `${context} has member 'transform' that`),
            writableType
        };
    }
    function convertTransformerFlushCallback(fn, original, context) {
        assertFunction(fn, context);
        return (controller) => promiseCall(fn, original, [controller]);
    }
    function convertTransformerStartCallback(fn, original, context) {
        assertFunction(fn, context);
        return (controller) => reflectCall(fn, original, [controller]);
    }
    function convertTransformerTransformCallback(fn, original, context) {
        assertFunction(fn, context);
        return (chunk, controller) => promiseCall(fn, original, [chunk, controller]);
    }

    // Class TransformStream
    /**
     * A transform stream consists of a pair of streams: a {@link WritableStream | writable stream},
     * known as its writable side, and a {@link ReadableStream | readable stream}, known as its readable side.
     * In a manner specific to the transform stream in question, writes to the writable side result in new data being
     * made available for reading from the readable side.
     *
     * @public
     */
    class TransformStream {
        constructor(rawTransformer = {}, rawWritableStrategy = {}, rawReadableStrategy = {}) {
            if (rawTransformer === undefined) {
                rawTransformer = null;
            }
            const writableStrategy = convertQueuingStrategy(rawWritableStrategy, 'Second parameter');
            const readableStrategy = convertQueuingStrategy(rawReadableStrategy, 'Third parameter');
            const transformer = convertTransformer(rawTransformer, 'First parameter');
            if (transformer.readableType !== undefined) {
                throw new RangeError('Invalid readableType specified');
            }
            if (transformer.writableType !== undefined) {
                throw new RangeError('Invalid writableType specified');
            }
            const readableHighWaterMark = ExtractHighWaterMark(readableStrategy, 0);
            const readableSizeAlgorithm = ExtractSizeAlgorithm(readableStrategy);
            const writableHighWaterMark = ExtractHighWaterMark(writableStrategy, 1);
            const writableSizeAlgorithm = ExtractSizeAlgorithm(writableStrategy);
            let startPromise_resolve;
            const startPromise = newPromise(resolve => {
                startPromise_resolve = resolve;
            });
            InitializeTransformStream(this, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm);
            SetUpTransformStreamDefaultControllerFromTransformer(this, transformer);
            if (transformer.start !== undefined) {
                startPromise_resolve(transformer.start(this._transformStreamController));
            }
            else {
                startPromise_resolve(undefined);
            }
        }
        /**
         * The readable side of the transform stream.
         */
        get readable() {
            if (!IsTransformStream(this)) {
                throw streamBrandCheckException('readable');
            }
            return this._readable;
        }
        /**
         * The writable side of the transform stream.
         */
        get writable() {
            if (!IsTransformStream(this)) {
                throw streamBrandCheckException('writable');
            }
            return this._writable;
        }
    }
    Object.defineProperties(TransformStream.prototype, {
        readable: { enumerable: true },
        writable: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(TransformStream.prototype, SymbolPolyfill.toStringTag, {
            value: 'TransformStream',
            configurable: true
        });
    }
    function InitializeTransformStream(stream, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm) {
        function startAlgorithm() {
            return startPromise;
        }
        function writeAlgorithm(chunk) {
            return TransformStreamDefaultSinkWriteAlgorithm(stream, chunk);
        }
        function abortAlgorithm(reason) {
            return TransformStreamDefaultSinkAbortAlgorithm(stream, reason);
        }
        function closeAlgorithm() {
            return TransformStreamDefaultSinkCloseAlgorithm(stream);
        }
        stream._writable = CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, writableHighWaterMark, writableSizeAlgorithm);
        function pullAlgorithm() {
            return TransformStreamDefaultSourcePullAlgorithm(stream);
        }
        function cancelAlgorithm(reason) {
            TransformStreamErrorWritableAndUnblockWrite(stream, reason);
            return promiseResolvedWith(undefined);
        }
        stream._readable = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, readableHighWaterMark, readableSizeAlgorithm);
        // The [[backpressure]] slot is set to undefined so that it can be initialised by TransformStreamSetBackpressure.
        stream._backpressure = undefined;
        stream._backpressureChangePromise = undefined;
        stream._backpressureChangePromise_resolve = undefined;
        TransformStreamSetBackpressure(stream, true);
        stream._transformStreamController = undefined;
    }
    function IsTransformStream(x) {
        if (!typeIsObject(x)) {
            return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_transformStreamController')) {
            return false;
        }
        return x instanceof TransformStream;
    }
    // This is a no-op if both sides are already errored.
    function TransformStreamError(stream, e) {
        ReadableStreamDefaultControllerError(stream._readable._readableStreamController, e);
        TransformStreamErrorWritableAndUnblockWrite(stream, e);
    }
    function TransformStreamErrorWritableAndUnblockWrite(stream, e) {
        TransformStreamDefaultControllerClearAlgorithms(stream._transformStreamController);
        WritableStreamDefaultControllerErrorIfNeeded(stream._writable._writableStreamController, e);
        if (stream._backpressure) {
            // Pretend that pull() was called to permit any pending write() calls to complete. TransformStreamSetBackpressure()
            // cannot be called from enqueue() or pull() once the ReadableStream is errored, so this will will be the final time
            // _backpressure is set.
            TransformStreamSetBackpressure(stream, false);
        }
    }
    function TransformStreamSetBackpressure(stream, backpressure) {
        // Passes also when called during construction.
        if (stream._backpressureChangePromise !== undefined) {
            stream._backpressureChangePromise_resolve();
        }
        stream._backpressureChangePromise = newPromise(resolve => {
            stream._backpressureChangePromise_resolve = resolve;
        });
        stream._backpressure = backpressure;
    }
    // Class TransformStreamDefaultController
    /**
     * Allows control of the {@link ReadableStream} and {@link WritableStream} of the associated {@link TransformStream}.
     *
     * @public
     */
    class TransformStreamDefaultController {
        constructor() {
            throw new TypeError('Illegal constructor');
        }
        /**
         * Returns the desired size to fill the readable side’s internal queue. It can be negative, if the queue is over-full.
         */
        get desiredSize() {
            if (!IsTransformStreamDefaultController(this)) {
                throw defaultControllerBrandCheckException('desiredSize');
            }
            const readableController = this._controlledTransformStream._readable._readableStreamController;
            return ReadableStreamDefaultControllerGetDesiredSize(readableController);
        }
        enqueue(chunk = undefined) {
            if (!IsTransformStreamDefaultController(this)) {
                throw defaultControllerBrandCheckException('enqueue');
            }
            TransformStreamDefaultControllerEnqueue(this, chunk);
        }
        /**
         * Errors both the readable side and the writable side of the controlled transform stream, making all future
         * interactions with it fail with the given error `e`. Any chunks queued for transformation will be discarded.
         */
        error(reason = undefined) {
            if (!IsTransformStreamDefaultController(this)) {
                throw defaultControllerBrandCheckException('error');
            }
            TransformStreamDefaultControllerError(this, reason);
        }
        /**
         * Closes the readable side and errors the writable side of the controlled transform stream. This is useful when the
         * transformer only needs to consume a portion of the chunks written to the writable side.
         */
        terminate() {
            if (!IsTransformStreamDefaultController(this)) {
                throw defaultControllerBrandCheckException('terminate');
            }
            TransformStreamDefaultControllerTerminate(this);
        }
    }
    Object.defineProperties(TransformStreamDefaultController.prototype, {
        enqueue: { enumerable: true },
        error: { enumerable: true },
        terminate: { enumerable: true },
        desiredSize: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(TransformStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {
            value: 'TransformStreamDefaultController',
            configurable: true
        });
    }
    // Transform Stream Default Controller Abstract Operations
    function IsTransformStreamDefaultController(x) {
        if (!typeIsObject(x)) {
            return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_controlledTransformStream')) {
            return false;
        }
        return x instanceof TransformStreamDefaultController;
    }
    function SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm) {
        controller._controlledTransformStream = stream;
        stream._transformStreamController = controller;
        controller._transformAlgorithm = transformAlgorithm;
        controller._flushAlgorithm = flushAlgorithm;
    }
    function SetUpTransformStreamDefaultControllerFromTransformer(stream, transformer) {
        const controller = Object.create(TransformStreamDefaultController.prototype);
        let transformAlgorithm = (chunk) => {
            try {
                TransformStreamDefaultControllerEnqueue(controller, chunk);
                return promiseResolvedWith(undefined);
            }
            catch (transformResultE) {
                return promiseRejectedWith(transformResultE);
            }
        };
        let flushAlgorithm = () => promiseResolvedWith(undefined);
        if (transformer.transform !== undefined) {
            transformAlgorithm = chunk => transformer.transform(chunk, controller);
        }
        if (transformer.flush !== undefined) {
            flushAlgorithm = () => transformer.flush(controller);
        }
        SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);
    }
    function TransformStreamDefaultControllerClearAlgorithms(controller) {
        controller._transformAlgorithm = undefined;
        controller._flushAlgorithm = undefined;
    }
    function TransformStreamDefaultControllerEnqueue(controller, chunk) {
        const stream = controller._controlledTransformStream;
        const readableController = stream._readable._readableStreamController;
        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController)) {
            throw new TypeError('Readable side is not in a state that permits enqueue');
        }
        // We throttle transform invocations based on the backpressure of the ReadableStream, but we still
        // accept TransformStreamDefaultControllerEnqueue() calls.
        try {
            ReadableStreamDefaultControllerEnqueue(readableController, chunk);
        }
        catch (e) {
            // This happens when readableStrategy.size() throws.
            TransformStreamErrorWritableAndUnblockWrite(stream, e);
            throw stream._readable._storedError;
        }
        const backpressure = ReadableStreamDefaultControllerHasBackpressure(readableController);
        if (backpressure !== stream._backpressure) {
            TransformStreamSetBackpressure(stream, true);
        }
    }
    function TransformStreamDefaultControllerError(controller, e) {
        TransformStreamError(controller._controlledTransformStream, e);
    }
    function TransformStreamDefaultControllerPerformTransform(controller, chunk) {
        const transformPromise = controller._transformAlgorithm(chunk);
        return transformPromiseWith(transformPromise, undefined, r => {
            TransformStreamError(controller._controlledTransformStream, r);
            throw r;
        });
    }
    function TransformStreamDefaultControllerTerminate(controller) {
        const stream = controller._controlledTransformStream;
        const readableController = stream._readable._readableStreamController;
        ReadableStreamDefaultControllerClose(readableController);
        const error = new TypeError('TransformStream terminated');
        TransformStreamErrorWritableAndUnblockWrite(stream, error);
    }
    // TransformStreamDefaultSink Algorithms
    function TransformStreamDefaultSinkWriteAlgorithm(stream, chunk) {
        const controller = stream._transformStreamController;
        if (stream._backpressure) {
            const backpressureChangePromise = stream._backpressureChangePromise;
            return transformPromiseWith(backpressureChangePromise, () => {
                const writable = stream._writable;
                const state = writable._state;
                if (state === 'erroring') {
                    throw writable._storedError;
                }
                return TransformStreamDefaultControllerPerformTransform(controller, chunk);
            });
        }
        return TransformStreamDefaultControllerPerformTransform(controller, chunk);
    }
    function TransformStreamDefaultSinkAbortAlgorithm(stream, reason) {
        // abort() is not called synchronously, so it is possible for abort() to be called when the stream is already
        // errored.
        TransformStreamError(stream, reason);
        return promiseResolvedWith(undefined);
    }
    function TransformStreamDefaultSinkCloseAlgorithm(stream) {
        // stream._readable cannot change after construction, so caching it across a call to user code is safe.
        const readable = stream._readable;
        const controller = stream._transformStreamController;
        const flushPromise = controller._flushAlgorithm();
        TransformStreamDefaultControllerClearAlgorithms(controller);
        // Return a promise that is fulfilled with undefined on success.
        return transformPromiseWith(flushPromise, () => {
            if (readable._state === 'errored') {
                throw readable._storedError;
            }
            ReadableStreamDefaultControllerClose(readable._readableStreamController);
        }, r => {
            TransformStreamError(stream, r);
            throw readable._storedError;
        });
    }
    // TransformStreamDefaultSource Algorithms
    function TransformStreamDefaultSourcePullAlgorithm(stream) {
        // Invariant. Enforced by the promises returned by start() and pull().
        TransformStreamSetBackpressure(stream, false);
        // Prevent the next pull() call until there is backpressure.
        return stream._backpressureChangePromise;
    }
    // Helper functions for the TransformStreamDefaultController.
    function defaultControllerBrandCheckException(name) {
        return new TypeError(`TransformStreamDefaultController.prototype.${name} can only be used on a TransformStreamDefaultController`);
    }
    // Helper functions for the TransformStream.
    function streamBrandCheckException(name) {
        return new TypeError(`TransformStream.prototype.${name} can only be used on a TransformStream`);
    }

    exports.ByteLengthQueuingStrategy = ByteLengthQueuingStrategy;
    exports.CountQueuingStrategy = CountQueuingStrategy;
    exports.ReadableByteStreamController = ReadableByteStreamController;
    exports.ReadableStream = ReadableStream;
    exports.ReadableStreamBYOBReader = ReadableStreamBYOBReader;
    exports.ReadableStreamBYOBRequest = ReadableStreamBYOBRequest;
    exports.ReadableStreamDefaultController = ReadableStreamDefaultController;
    exports.ReadableStreamDefaultReader = ReadableStreamDefaultReader;
    exports.TransformStream = TransformStream;
    exports.TransformStreamDefaultController = TransformStreamDefaultController;
    exports.WritableStream = WritableStream;
    exports.WritableStreamDefaultController = WritableStreamDefaultController;
    exports.WritableStreamDefaultWriter = WritableStreamDefaultWriter;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ponyfill.es2018.js.map


/***/ }),

/***/ 9315:
/***/ ((module) => {

module.exports = eval("require")("re2");


/***/ }),

/***/ 9491:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("assert");

/***/ }),

/***/ 4300:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("buffer");

/***/ }),

/***/ 6113:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("crypto");

/***/ }),

/***/ 2361:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("events");

/***/ }),

/***/ 7147:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("fs");

/***/ }),

/***/ 3685:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("http");

/***/ }),

/***/ 5687:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("https");

/***/ }),

/***/ 1808:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("net");

/***/ }),

/***/ 6005:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:crypto");

/***/ }),

/***/ 7561:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:fs");

/***/ }),

/***/ 3977:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:fs/promises");

/***/ }),

/***/ 9411:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:path");

/***/ }),

/***/ 7742:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:process");

/***/ }),

/***/ 2477:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:stream/web");

/***/ }),

/***/ 1041:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:url");

/***/ }),

/***/ 7261:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:util");

/***/ }),

/***/ 2037:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("os");

/***/ }),

/***/ 1017:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("path");

/***/ }),

/***/ 5477:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("punycode");

/***/ }),

/***/ 2781:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("stream");

/***/ }),

/***/ 4404:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("tls");

/***/ }),

/***/ 7310:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("url");

/***/ }),

/***/ 3837:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("util");

/***/ }),

/***/ 1267:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("worker_threads");

/***/ }),

/***/ 796:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var Node = __nccwpck_require__(240);
var Scalar = __nccwpck_require__(5461);
var resolveBlockMap = __nccwpck_require__(5697);
var resolveBlockSeq = __nccwpck_require__(5966);
var resolveFlowCollection = __nccwpck_require__(1451);

function composeCollection(CN, ctx, token, tagToken, onError) {
    let coll;
    switch (token.type) {
        case 'block-map': {
            coll = resolveBlockMap.resolveBlockMap(CN, ctx, token, onError);
            break;
        }
        case 'block-seq': {
            coll = resolveBlockSeq.resolveBlockSeq(CN, ctx, token, onError);
            break;
        }
        case 'flow-collection': {
            coll = resolveFlowCollection.resolveFlowCollection(CN, ctx, token, onError);
            break;
        }
    }
    if (!tagToken)
        return coll;
    const tagName = ctx.directives.tagName(tagToken.source, msg => onError(tagToken, 'TAG_RESOLVE_FAILED', msg));
    if (!tagName)
        return coll;
    // Cast needed due to: https://github.com/Microsoft/TypeScript/issues/3841
    const Coll = coll.constructor;
    if (tagName === '!' || tagName === Coll.tagName) {
        coll.tag = Coll.tagName;
        return coll;
    }
    const expType = Node.isMap(coll) ? 'map' : 'seq';
    let tag = ctx.schema.tags.find(t => t.collection === expType && t.tag === tagName);
    if (!tag) {
        const kt = ctx.schema.knownTags[tagName];
        if (kt && kt.collection === expType) {
            ctx.schema.tags.push(Object.assign({}, kt, { default: false }));
            tag = kt;
        }
        else {
            onError(tagToken, 'TAG_RESOLVE_FAILED', `Unresolved tag: ${tagName}`, true);
            coll.tag = tagName;
            return coll;
        }
    }
    const res = tag.resolve(coll, msg => onError(tagToken, 'TAG_RESOLVE_FAILED', msg), ctx.options);
    const node = Node.isNode(res)
        ? res
        : new Scalar.Scalar(res);
    node.range = coll.range;
    node.tag = tagName;
    if (tag?.format)
        node.format = tag.format;
    return node;
}

exports.composeCollection = composeCollection;


/***/ }),

/***/ 9594:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var Document = __nccwpck_require__(9954);
var composeNode = __nccwpck_require__(1903);
var resolveEnd = __nccwpck_require__(4685);
var resolveProps = __nccwpck_require__(7754);

function composeDoc(options, directives, { offset, start, value, end }, onError) {
    const opts = Object.assign({ _directives: directives }, options);
    const doc = new Document.Document(undefined, opts);
    const ctx = {
        atRoot: true,
        directives: doc.directives,
        options: doc.options,
        schema: doc.schema
    };
    const props = resolveProps.resolveProps(start, {
        indicator: 'doc-start',
        next: value ?? end?.[0],
        offset,
        onError,
        startOnNewline: true
    });
    if (props.found) {
        doc.directives.docStart = true;
        if (value &&
            (value.type === 'block-map' || value.type === 'block-seq') &&
            !props.hasNewline)
            onError(props.end, 'MISSING_CHAR', 'Block collection cannot start on same line with directives-end marker');
    }
    doc.contents = value
        ? composeNode.composeNode(ctx, value, props, onError)
        : composeNode.composeEmptyNode(ctx, props.end, start, null, props, onError);
    const contentEnd = doc.contents.range[2];
    const re = resolveEnd.resolveEnd(end, contentEnd, false, onError);
    if (re.comment)
        doc.comment = re.comment;
    doc.range = [offset, contentEnd, re.offset];
    return doc;
}

exports.composeDoc = composeDoc;


/***/ }),

/***/ 1903:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var Alias = __nccwpck_require__(5163);
var composeCollection = __nccwpck_require__(796);
var composeScalar = __nccwpck_require__(7919);
var resolveEnd = __nccwpck_require__(4685);
var utilEmptyScalarPosition = __nccwpck_require__(2466);

const CN = { composeNode, composeEmptyNode };
function composeNode(ctx, token, props, onError) {
    const { spaceBefore, comment, anchor, tag } = props;
    let node;
    let isSrcToken = true;
    switch (token.type) {
        case 'alias':
            node = composeAlias(ctx, token, onError);
            if (anchor || tag)
                onError(token, 'ALIAS_PROPS', 'An alias node must not specify any properties');
            break;
        case 'scalar':
        case 'single-quoted-scalar':
        case 'double-quoted-scalar':
        case 'block-scalar':
            node = composeScalar.composeScalar(ctx, token, tag, onError);
            if (anchor)
                node.anchor = anchor.source.substring(1);
            break;
        case 'block-map':
        case 'block-seq':
        case 'flow-collection':
            node = composeCollection.composeCollection(CN, ctx, token, tag, onError);
            if (anchor)
                node.anchor = anchor.source.substring(1);
            break;
        default: {
            const message = token.type === 'error'
                ? token.message
                : `Unsupported token (type: ${token.type})`;
            onError(token, 'UNEXPECTED_TOKEN', message);
            node = composeEmptyNode(ctx, token.offset, undefined, null, props, onError);
            isSrcToken = false;
        }
    }
    if (anchor && node.anchor === '')
        onError(anchor, 'BAD_ALIAS', 'Anchor cannot be an empty string');
    if (spaceBefore)
        node.spaceBefore = true;
    if (comment) {
        if (token.type === 'scalar' && token.source === '')
            node.comment = comment;
        else
            node.commentBefore = comment;
    }
    // @ts-expect-error Type checking misses meaning of isSrcToken
    if (ctx.options.keepSourceTokens && isSrcToken)
        node.srcToken = token;
    return node;
}
function composeEmptyNode(ctx, offset, before, pos, { spaceBefore, comment, anchor, tag, end }, onError) {
    const token = {
        type: 'scalar',
        offset: utilEmptyScalarPosition.emptyScalarPosition(offset, before, pos),
        indent: -1,
        source: ''
    };
    const node = composeScalar.composeScalar(ctx, token, tag, onError);
    if (anchor) {
        node.anchor = anchor.source.substring(1);
        if (node.anchor === '')
            onError(anchor, 'BAD_ALIAS', 'Anchor cannot be an empty string');
    }
    if (spaceBefore)
        node.spaceBefore = true;
    if (comment) {
        node.comment = comment;
        node.range[2] = end;
    }
    return node;
}
function composeAlias({ options }, { offset, source, end }, onError) {
    const alias = new Alias.Alias(source.substring(1));
    if (alias.source === '')
        onError(offset, 'BAD_ALIAS', 'Alias cannot be an empty string');
    if (alias.source.endsWith(':'))
        onError(offset + source.length - 1, 'BAD_ALIAS', 'Alias ending in : is ambiguous', true);
    const valueEnd = offset + source.length;
    const re = resolveEnd.resolveEnd(end, valueEnd, options.strict, onError);
    alias.range = [offset, valueEnd, re.offset];
    if (re.comment)
        alias.comment = re.comment;
    return alias;
}

exports.composeEmptyNode = composeEmptyNode;
exports.composeNode = composeNode;


/***/ }),

/***/ 7919:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var Node = __nccwpck_require__(240);
var Scalar = __nccwpck_require__(5461);
var resolveBlockScalar = __nccwpck_require__(5504);
var resolveFlowScalar = __nccwpck_require__(5164);

function composeScalar(ctx, token, tagToken, onError) {
    const { value, type, comment, range } = token.type === 'block-scalar'
        ? resolveBlockScalar.resolveBlockScalar(token, ctx.options.strict, onError)
        : resolveFlowScalar.resolveFlowScalar(token, ctx.options.strict, onError);
    const tagName = tagToken
        ? ctx.directives.tagName(tagToken.source, msg => onError(tagToken, 'TAG_RESOLVE_FAILED', msg))
        : null;
    const tag = tagToken && tagName
        ? findScalarTagByName(ctx.schema, value, tagName, tagToken, onError)
        : token.type === 'scalar'
            ? findScalarTagByTest(ctx, value, token, onError)
            : ctx.schema[Node.SCALAR];
    let scalar;
    try {
        const res = tag.resolve(value, msg => onError(tagToken ?? token, 'TAG_RESOLVE_FAILED', msg), ctx.options);
        scalar = Node.isScalar(res) ? res : new Scalar.Scalar(res);
    }
    catch (error) {
        const msg = error instanceof Error ? error.message : String(error);
        onError(tagToken ?? token, 'TAG_RESOLVE_FAILED', msg);
        scalar = new Scalar.Scalar(value);
    }
    scalar.range = range;
    scalar.source = value;
    if (type)
        scalar.type = type;
    if (tagName)
        scalar.tag = tagName;
    if (tag.format)
        scalar.format = tag.format;
    if (comment)
        scalar.comment = comment;
    return scalar;
}
function findScalarTagByName(schema, value, tagName, tagToken, onError) {
    if (tagName === '!')
        return schema[Node.SCALAR]; // non-specific tag
    const matchWithTest = [];
    for (const tag of schema.tags) {
        if (!tag.collection && tag.tag === tagName) {
            if (tag.default && tag.test)
                matchWithTest.push(tag);
            else
                return tag;
        }
    }
    for (const tag of matchWithTest)
        if (tag.test?.test(value))
            return tag;
    const kt = schema.knownTags[tagName];
    if (kt && !kt.collection) {
        // Ensure that the known tag is available for stringifying,
        // but does not get used by default.
        schema.tags.push(Object.assign({}, kt, { default: false, test: undefined }));
        return kt;
    }
    onError(tagToken, 'TAG_RESOLVE_FAILED', `Unresolved tag: ${tagName}`, tagName !== 'tag:yaml.org,2002:str');
    return schema[Node.SCALAR];
}
function findScalarTagByTest({ directives, schema }, value, token, onError) {
    const tag = schema.tags.find(tag => tag.default && tag.test?.test(value)) || schema[Node.SCALAR];
    if (schema.compat) {
        const compat = schema.compat.find(tag => tag.default && tag.test?.test(value)) ??
            schema[Node.SCALAR];
        if (tag.tag !== compat.tag) {
            const ts = directives.tagString(tag.tag);
            const cs = directives.tagString(compat.tag);
            const msg = `Value may be parsed as either ${ts} or ${cs}`;
            onError(token, 'TAG_RESOLVE_FAILED', msg, true);
        }
    }
    return tag;
}

exports.composeScalar = composeScalar;


/***/ }),

/***/ 6426:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var directives = __nccwpck_require__(8516);
var Document = __nccwpck_require__(9954);
var errors = __nccwpck_require__(2983);
var Node = __nccwpck_require__(240);
var composeDoc = __nccwpck_require__(9594);
var resolveEnd = __nccwpck_require__(4685);

function getErrorPos(src) {
    if (typeof src === 'number')
        return [src, src + 1];
    if (Array.isArray(src))
        return src.length === 2 ? src : [src[0], src[1]];
    const { offset, source } = src;
    return [offset, offset + (typeof source === 'string' ? source.length : 1)];
}
function parsePrelude(prelude) {
    let comment = '';
    let atComment = false;
    let afterEmptyLine = false;
    for (let i = 0; i < prelude.length; ++i) {
        const source = prelude[i];
        switch (source[0]) {
            case '#':
                comment +=
                    (comment === '' ? '' : afterEmptyLine ? '\n\n' : '\n') +
                        (source.substring(1) || ' ');
                atComment = true;
                afterEmptyLine = false;
                break;
            case '%':
                if (prelude[i + 1]?.[0] !== '#')
                    i += 1;
                atComment = false;
                break;
            default:
                // This may be wrong after doc-end, but in that case it doesn't matter
                if (!atComment)
                    afterEmptyLine = true;
                atComment = false;
        }
    }
    return { comment, afterEmptyLine };
}
/**
 * Compose a stream of CST nodes into a stream of YAML Documents.
 *
 * ```ts
 * import { Composer, Parser } from 'yaml'
 *
 * const src: string = ...
 * const tokens = new Parser().parse(src)
 * const docs = new Composer().compose(tokens)
 * ```
 */
class Composer {
    constructor(options = {}) {
        this.doc = null;
        this.atDirectives = false;
        this.prelude = [];
        this.errors = [];
        this.warnings = [];
        this.onError = (source, code, message, warning) => {
            const pos = getErrorPos(source);
            if (warning)
                this.warnings.push(new errors.YAMLWarning(pos, code, message));
            else
                this.errors.push(new errors.YAMLParseError(pos, code, message));
        };
        // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
        this.directives = new directives.Directives({ version: options.version || '1.2' });
        this.options = options;
    }
    decorate(doc, afterDoc) {
        const { comment, afterEmptyLine } = parsePrelude(this.prelude);
        //console.log({ dc: doc.comment, prelude, comment })
        if (comment) {
            const dc = doc.contents;
            if (afterDoc) {
                doc.comment = doc.comment ? `${doc.comment}\n${comment}` : comment;
            }
            else if (afterEmptyLine || doc.directives.docStart || !dc) {
                doc.commentBefore = comment;
            }
            else if (Node.isCollection(dc) && !dc.flow && dc.items.length > 0) {
                let it = dc.items[0];
                if (Node.isPair(it))
                    it = it.key;
                const cb = it.commentBefore;
                it.commentBefore = cb ? `${comment}\n${cb}` : comment;
            }
            else {
                const cb = dc.commentBefore;
                dc.commentBefore = cb ? `${comment}\n${cb}` : comment;
            }
        }
        if (afterDoc) {
            Array.prototype.push.apply(doc.errors, this.errors);
            Array.prototype.push.apply(doc.warnings, this.warnings);
        }
        else {
            doc.errors = this.errors;
            doc.warnings = this.warnings;
        }
        this.prelude = [];
        this.errors = [];
        this.warnings = [];
    }
    /**
     * Current stream status information.
     *
     * Mostly useful at the end of input for an empty stream.
     */
    streamInfo() {
        return {
            comment: parsePrelude(this.prelude).comment,
            directives: this.directives,
            errors: this.errors,
            warnings: this.warnings
        };
    }
    /**
     * Compose tokens into documents.
     *
     * @param forceDoc - If the stream contains no document, still emit a final document including any comments and directives that would be applied to a subsequent document.
     * @param endOffset - Should be set if `forceDoc` is also set, to set the document range end and to indicate errors correctly.
     */
    *compose(tokens, forceDoc = false, endOffset = -1) {
        for (const token of tokens)
            yield* this.next(token);
        yield* this.end(forceDoc, endOffset);
    }
    /** Advance the composer by one CST token. */
    *next(token) {
        if (process.env.LOG_STREAM)
            console.dir(token, { depth: null });
        switch (token.type) {
            case 'directive':
                this.directives.add(token.source, (offset, message, warning) => {
                    const pos = getErrorPos(token);
                    pos[0] += offset;
                    this.onError(pos, 'BAD_DIRECTIVE', message, warning);
                });
                this.prelude.push(token.source);
                this.atDirectives = true;
                break;
            case 'document': {
                const doc = composeDoc.composeDoc(this.options, this.directives, token, this.onError);
                if (this.atDirectives && !doc.directives.docStart)
                    this.onError(token, 'MISSING_CHAR', 'Missing directives-end/doc-start indicator line');
                this.decorate(doc, false);
                if (this.doc)
                    yield this.doc;
                this.doc = doc;
                this.atDirectives = false;
                break;
            }
            case 'byte-order-mark':
            case 'space':
                break;
            case 'comment':
            case 'newline':
                this.prelude.push(token.source);
                break;
            case 'error': {
                const msg = token.source
                    ? `${token.message}: ${JSON.stringify(token.source)}`
                    : token.message;
                const error = new errors.YAMLParseError(getErrorPos(token), 'UNEXPECTED_TOKEN', msg);
                if (this.atDirectives || !this.doc)
                    this.errors.push(error);
                else
                    this.doc.errors.push(error);
                break;
            }
            case 'doc-end': {
                if (!this.doc) {
                    const msg = 'Unexpected doc-end without preceding document';
                    this.errors.push(new errors.YAMLParseError(getErrorPos(token), 'UNEXPECTED_TOKEN', msg));
                    break;
                }
                this.doc.directives.docEnd = true;
                const end = resolveEnd.resolveEnd(token.end, token.offset + token.source.length, this.doc.options.strict, this.onError);
                this.decorate(this.doc, true);
                if (end.comment) {
                    const dc = this.doc.comment;
                    this.doc.comment = dc ? `${dc}\n${end.comment}` : end.comment;
                }
                this.doc.range[2] = end.offset;
                break;
            }
            default:
                this.errors.push(new errors.YAMLParseError(getErrorPos(token), 'UNEXPECTED_TOKEN', `Unsupported token ${token.type}`));
        }
    }
    /**
     * Call at end of input to yield any remaining document.
     *
     * @param forceDoc - If the stream contains no document, still emit a final document including any comments and directives that would be applied to a subsequent document.
     * @param endOffset - Should be set if `forceDoc` is also set, to set the document range end and to indicate errors correctly.
     */
    *end(forceDoc = false, endOffset = -1) {
        if (this.doc) {
            this.decorate(this.doc, true);
            yield this.doc;
            this.doc = null;
        }
        else if (forceDoc) {
            const opts = Object.assign({ _directives: this.directives }, this.options);
            const doc = new Document.Document(undefined, opts);
            if (this.atDirectives)
                this.onError(endOffset, 'MISSING_CHAR', 'Missing directives-end indicator line');
            doc.range = [0, endOffset, endOffset];
            this.decorate(doc, false);
            yield doc;
        }
    }
}

exports.Composer = Composer;


/***/ }),

/***/ 5697:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var Pair = __nccwpck_require__(9200);
var YAMLMap = __nccwpck_require__(163);
var resolveProps = __nccwpck_require__(7754);
var utilContainsNewline = __nccwpck_require__(4601);
var utilFlowIndentCheck = __nccwpck_require__(445);
var utilMapIncludes = __nccwpck_require__(6381);

const startColMsg = 'All mapping items must start at the same column';
function resolveBlockMap({ composeNode, composeEmptyNode }, ctx, bm, onError) {
    const map = new YAMLMap.YAMLMap(ctx.schema);
    if (ctx.atRoot)
        ctx.atRoot = false;
    let offset = bm.offset;
    let commentEnd = null;
    for (const collItem of bm.items) {
        const { start, key, sep, value } = collItem;
        // key properties
        const keyProps = resolveProps.resolveProps(start, {
            indicator: 'explicit-key-ind',
            next: key ?? sep?.[0],
            offset,
            onError,
            startOnNewline: true
        });
        const implicitKey = !keyProps.found;
        if (implicitKey) {
            if (key) {
                if (key.type === 'block-seq')
                    onError(offset, 'BLOCK_AS_IMPLICIT_KEY', 'A block sequence may not be used as an implicit map key');
                else if ('indent' in key && key.indent !== bm.indent)
                    onError(offset, 'BAD_INDENT', startColMsg);
            }
            if (!keyProps.anchor && !keyProps.tag && !sep) {
                commentEnd = keyProps.end;
                if (keyProps.comment) {
                    if (map.comment)
                        map.comment += '\n' + keyProps.comment;
                    else
                        map.comment = keyProps.comment;
                }
                continue;
            }
            if (keyProps.hasNewlineAfterProp || utilContainsNewline.containsNewline(key)) {
                onError(key ?? start[start.length - 1], 'MULTILINE_IMPLICIT_KEY', 'Implicit keys need to be on a single line');
            }
        }
        else if (keyProps.found?.indent !== bm.indent) {
            onError(offset, 'BAD_INDENT', startColMsg);
        }
        // key value
        const keyStart = keyProps.end;
        const keyNode = key
            ? composeNode(ctx, key, keyProps, onError)
            : composeEmptyNode(ctx, keyStart, start, null, keyProps, onError);
        if (ctx.schema.compat)
            utilFlowIndentCheck.flowIndentCheck(bm.indent, key, onError);
        if (utilMapIncludes.mapIncludes(ctx, map.items, keyNode))
            onError(keyStart, 'DUPLICATE_KEY', 'Map keys must be unique');
        // value properties
        const valueProps = resolveProps.resolveProps(sep ?? [], {
            indicator: 'map-value-ind',
            next: value,
            offset: keyNode.range[2],
            onError,
            startOnNewline: !key || key.type === 'block-scalar'
        });
        offset = valueProps.end;
        if (valueProps.found) {
            if (implicitKey) {
                if (value?.type === 'block-map' && !valueProps.hasNewline)
                    onError(offset, 'BLOCK_AS_IMPLICIT_KEY', 'Nested mappings are not allowed in compact mappings');
                if (ctx.options.strict &&
                    keyProps.start < valueProps.found.offset - 1024)
                    onError(keyNode.range, 'KEY_OVER_1024_CHARS', 'The : indicator must be at most 1024 chars after the start of an implicit block mapping key');
            }
            // value value
            const valueNode = value
                ? composeNode(ctx, value, valueProps, onError)
                : composeEmptyNode(ctx, offset, sep, null, valueProps, onError);
            if (ctx.schema.compat)
                utilFlowIndentCheck.flowIndentCheck(bm.indent, value, onError);
            offset = valueNode.range[2];
            const pair = new Pair.Pair(keyNode, valueNode);
            if (ctx.options.keepSourceTokens)
                pair.srcToken = collItem;
            map.items.push(pair);
        }
        else {
            // key with no value
            if (implicitKey)
                onError(keyNode.range, 'MISSING_CHAR', 'Implicit map keys need to be followed by map values');
            if (valueProps.comment) {
                if (keyNode.comment)
                    keyNode.comment += '\n' + valueProps.comment;
                else
                    keyNode.comment = valueProps.comment;
            }
            const pair = new Pair.Pair(keyNode);
            if (ctx.options.keepSourceTokens)
                pair.srcToken = collItem;
            map.items.push(pair);
        }
    }
    if (commentEnd && commentEnd < offset)
        onError(commentEnd, 'IMPOSSIBLE', 'Map comment with trailing content');
    map.range = [bm.offset, offset, commentEnd ?? offset];
    return map;
}

exports.resolveBlockMap = resolveBlockMap;


/***/ }),

/***/ 5504:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var Scalar = __nccwpck_require__(5461);

function resolveBlockScalar(scalar, strict, onError) {
    const start = scalar.offset;
    const header = parseBlockScalarHeader(scalar, strict, onError);
    if (!header)
        return { value: '', type: null, comment: '', range: [start, start, start] };
    const type = header.mode === '>' ? Scalar.Scalar.BLOCK_FOLDED : Scalar.Scalar.BLOCK_LITERAL;
    const lines = scalar.source ? splitLines(scalar.source) : [];
    // determine the end of content & start of chomping
    let chompStart = lines.length;
    for (let i = lines.length - 1; i >= 0; --i) {
        const content = lines[i][1];
        if (content === '' || content === '\r')
            chompStart = i;
        else
            break;
    }
    // shortcut for empty contents
    if (chompStart === 0) {
        const value = header.chomp === '+' && lines.length > 0
            ? '\n'.repeat(Math.max(1, lines.length - 1))
            : '';
        let end = start + header.length;
        if (scalar.source)
            end += scalar.source.length;
        return { value, type, comment: header.comment, range: [start, end, end] };
    }
    // find the indentation level to trim from start
    let trimIndent = scalar.indent + header.indent;
    let offset = scalar.offset + header.length;
    let contentStart = 0;
    for (let i = 0; i < chompStart; ++i) {
        const [indent, content] = lines[i];
        if (content === '' || content === '\r') {
            if (header.indent === 0 && indent.length > trimIndent)
                trimIndent = indent.length;
        }
        else {
            if (indent.length < trimIndent) {
                const message = 'Block scalars with more-indented leading empty lines must use an explicit indentation indicator';
                onError(offset + indent.length, 'MISSING_CHAR', message);
            }
            if (header.indent === 0)
                trimIndent = indent.length;
            contentStart = i;
            break;
        }
        offset += indent.length + content.length + 1;
    }
    // include trailing more-indented empty lines in content
    for (let i = lines.length - 1; i >= chompStart; --i) {
        if (lines[i][0].length > trimIndent)
            chompStart = i + 1;
    }
    let value = '';
    let sep = '';
    let prevMoreIndented = false;
    // leading whitespace is kept intact
    for (let i = 0; i < contentStart; ++i)
        value += lines[i][0].slice(trimIndent) + '\n';
    for (let i = contentStart; i < chompStart; ++i) {
        let [indent, content] = lines[i];
        offset += indent.length + content.length + 1;
        const crlf = content[content.length - 1] === '\r';
        if (crlf)
            content = content.slice(0, -1);
        /* istanbul ignore if already caught in lexer */
        if (content && indent.length < trimIndent) {
            const src = header.indent
                ? 'explicit indentation indicator'
                : 'first line';
            const message = `Block scalar lines must not be less indented than their ${src}`;
            onError(offset - content.length - (crlf ? 2 : 1), 'BAD_INDENT', message);
            indent = '';
        }
        if (type === Scalar.Scalar.BLOCK_LITERAL) {
            value += sep + indent.slice(trimIndent) + content;
            sep = '\n';
        }
        else if (indent.length > trimIndent || content[0] === '\t') {
            // more-indented content within a folded block
            if (sep === ' ')
                sep = '\n';
            else if (!prevMoreIndented && sep === '\n')
                sep = '\n\n';
            value += sep + indent.slice(trimIndent) + content;
            sep = '\n';
            prevMoreIndented = true;
        }
        else if (content === '') {
            // empty line
            if (sep === '\n')
                value += '\n';
            else
                sep = '\n';
        }
        else {
            value += sep + content;
            sep = ' ';
            prevMoreIndented = false;
        }
    }
    switch (header.chomp) {
        case '-':
            break;
        case '+':
            for (let i = chompStart; i < lines.length; ++i)
                value += '\n' + lines[i][0].slice(trimIndent);
            if (value[value.length - 1] !== '\n')
                value += '\n';
            break;
        default:
            value += '\n';
    }
    const end = start + header.length + scalar.source.length;
    return { value, type, comment: header.comment, range: [start, end, end] };
}
function parseBlockScalarHeader({ offset, props }, strict, onError) {
    /* istanbul ignore if should not happen */
    if (props[0].type !== 'block-scalar-header') {
        onError(props[0], 'IMPOSSIBLE', 'Block scalar header not found');
        return null;
    }
    const { source } = props[0];
    const mode = source[0];
    let indent = 0;
    let chomp = '';
    let error = -1;
    for (let i = 1; i < source.length; ++i) {
        const ch = source[i];
        if (!chomp && (ch === '-' || ch === '+'))
            chomp = ch;
        else {
            const n = Number(ch);
            if (!indent && n)
                indent = n;
            else if (error === -1)
                error = offset + i;
        }
    }
    if (error !== -1)
        onError(error, 'UNEXPECTED_TOKEN', `Block scalar header includes extra characters: ${source}`);
    let hasSpace = false;
    let comment = '';
    let length = source.length;
    for (let i = 1; i < props.length; ++i) {
        const token = props[i];
        switch (token.type) {
            case 'space':
                hasSpace = true;
            // fallthrough
            case 'newline':
                length += token.source.length;
                break;
            case 'comment':
                if (strict && !hasSpace) {
                    const message = 'Comments must be separated from other tokens by white space characters';
                    onError(token, 'MISSING_CHAR', message);
                }
                length += token.source.length;
                comment = token.source.substring(1);
                break;
            case 'error':
                onError(token, 'UNEXPECTED_TOKEN', token.message);
                length += token.source.length;
                break;
            /* istanbul ignore next should not happen */
            default: {
                const message = `Unexpected token in block scalar header: ${token.type}`;
                onError(token, 'UNEXPECTED_TOKEN', message);
                const ts = token.source;
                if (ts && typeof ts === 'string')
                    length += ts.length;
            }
        }
    }
    return { mode, indent, chomp, comment, length };
}
/** @returns Array of lines split up as `[indent, content]` */
function splitLines(source) {
    const split = source.split(/\n( *)/);
    const first = split[0];
    const m = first.match(/^( *)/);
    const line0 = m?.[1]
        ? [m[1], first.slice(m[1].length)]
        : ['', first];
    const lines = [line0];
    for (let i = 1; i < split.length; i += 2)
        lines.push([split[i], split[i + 1]]);
    return lines;
}

exports.resolveBlockScalar = resolveBlockScalar;


/***/ }),

/***/ 5966:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var YAMLSeq = __nccwpck_require__(7225);
var resolveProps = __nccwpck_require__(7754);
var utilFlowIndentCheck = __nccwpck_require__(445);

function resolveBlockSeq({ composeNode, composeEmptyNode }, ctx, bs, onError) {
    const seq = new YAMLSeq.YAMLSeq(ctx.schema);
    if (ctx.atRoot)
        ctx.atRoot = false;
    let offset = bs.offset;
    let commentEnd = null;
    for (const { start, value } of bs.items) {
        const props = resolveProps.resolveProps(start, {
            indicator: 'seq-item-ind',
            next: value,
            offset,
            onError,
            startOnNewline: true
        });
        if (!props.found) {
            if (props.anchor || props.tag || value) {
                if (value && value.type === 'block-seq')
                    onError(props.end, 'BAD_INDENT', 'All sequence items must start at the same column');
                else
                    onError(offset, 'MISSING_CHAR', 'Sequence item without - indicator');
            }
            else {
                commentEnd = props.end;
                if (props.comment)
                    seq.comment = props.comment;
                continue;
            }
        }
        const node = value
            ? composeNode(ctx, value, props, onError)
            : composeEmptyNode(ctx, props.end, start, null, props, onError);
        if (ctx.schema.compat)
            utilFlowIndentCheck.flowIndentCheck(bs.indent, value, onError);
        offset = node.range[2];
        seq.items.push(node);
    }
    seq.range = [bs.offset, offset, commentEnd ?? offset];
    return seq;
}

exports.resolveBlockSeq = resolveBlockSeq;


/***/ }),

/***/ 4685:
/***/ ((__unused_webpack_module, exports) => {



function resolveEnd(end, offset, reqSpace, onError) {
    let comment = '';
    if (end) {
        let hasSpace = false;
        let sep = '';
        for (const token of end) {
            const { source, type } = token;
            switch (type) {
                case 'space':
                    hasSpace = true;
                    break;
                case 'comment': {
                    if (reqSpace && !hasSpace)
                        onError(token, 'MISSING_CHAR', 'Comments must be separated from other tokens by white space characters');
                    const cb = source.substring(1) || ' ';
                    if (!comment)
                        comment = cb;
                    else
                        comment += sep + cb;
                    sep = '';
                    break;
                }
                case 'newline':
                    if (comment)
                        sep += source;
                    hasSpace = true;
                    break;
                default:
                    onError(token, 'UNEXPECTED_TOKEN', `Unexpected ${type} at node end`);
            }
            offset += source.length;
        }
    }
    return { comment, offset };
}

exports.resolveEnd = resolveEnd;


/***/ }),

/***/ 1451:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var Node = __nccwpck_require__(240);
var Pair = __nccwpck_require__(9200);
var YAMLMap = __nccwpck_require__(163);
var YAMLSeq = __nccwpck_require__(7225);
var resolveEnd = __nccwpck_require__(4685);
var resolveProps = __nccwpck_require__(7754);
var utilContainsNewline = __nccwpck_require__(4601);
var utilMapIncludes = __nccwpck_require__(6381);

const blockMsg = 'Block collections are not allowed within flow collections';
const isBlock = (token) => token && (token.type === 'block-map' || token.type === 'block-seq');
function resolveFlowCollection({ composeNode, composeEmptyNode }, ctx, fc, onError) {
    const isMap = fc.start.source === '{';
    const fcName = isMap ? 'flow map' : 'flow sequence';
    const coll = isMap
        ? new YAMLMap.YAMLMap(ctx.schema)
        : new YAMLSeq.YAMLSeq(ctx.schema);
    coll.flow = true;
    const atRoot = ctx.atRoot;
    if (atRoot)
        ctx.atRoot = false;
    let offset = fc.offset + fc.start.source.length;
    for (let i = 0; i < fc.items.length; ++i) {
        const collItem = fc.items[i];
        const { start, key, sep, value } = collItem;
        const props = resolveProps.resolveProps(start, {
            flow: fcName,
            indicator: 'explicit-key-ind',
            next: key ?? sep?.[0],
            offset,
            onError,
            startOnNewline: false
        });
        if (!props.found) {
            if (!props.anchor && !props.tag && !sep && !value) {
                if (i === 0 && props.comma)
                    onError(props.comma, 'UNEXPECTED_TOKEN', `Unexpected , in ${fcName}`);
                else if (i < fc.items.length - 1)
                    onError(props.start, 'UNEXPECTED_TOKEN', `Unexpected empty item in ${fcName}`);
                if (props.comment) {
                    if (coll.comment)
                        coll.comment += '\n' + props.comment;
                    else
                        coll.comment = props.comment;
                }
                offset = props.end;
                continue;
            }
            if (!isMap && ctx.options.strict && utilContainsNewline.containsNewline(key))
                onError(key, // checked by containsNewline()
                'MULTILINE_IMPLICIT_KEY', 'Implicit keys of flow sequence pairs need to be on a single line');
        }
        if (i === 0) {
            if (props.comma)
                onError(props.comma, 'UNEXPECTED_TOKEN', `Unexpected , in ${fcName}`);
        }
        else {
            if (!props.comma)
                onError(props.start, 'MISSING_CHAR', `Missing , between ${fcName} items`);
            if (props.comment) {
                let prevItemComment = '';
                loop: for (const st of start) {
                    switch (st.type) {
                        case 'comma':
                        case 'space':
                            break;
                        case 'comment':
                            prevItemComment = st.source.substring(1);
                            break loop;
                        default:
                            break loop;
                    }
                }
                if (prevItemComment) {
                    let prev = coll.items[coll.items.length - 1];
                    if (Node.isPair(prev))
                        prev = prev.value ?? prev.key;
                    if (prev.comment)
                        prev.comment += '\n' + prevItemComment;
                    else
                        prev.comment = prevItemComment;
                    props.comment = props.comment.substring(prevItemComment.length + 1);
                }
            }
        }
        if (!isMap && !sep && !props.found) {
            // item is a value in a seq
            // → key & sep are empty, start does not include ? or :
            const valueNode = value
                ? composeNode(ctx, value, props, onError)
                : composeEmptyNode(ctx, props.end, sep, null, props, onError);
            coll.items.push(valueNode);
            offset = valueNode.range[2];
            if (isBlock(value))
                onError(valueNode.range, 'BLOCK_IN_FLOW', blockMsg);
        }
        else {
            // item is a key+value pair
            // key value
            const keyStart = props.end;
            const keyNode = key
                ? composeNode(ctx, key, props, onError)
                : composeEmptyNode(ctx, keyStart, start, null, props, onError);
            if (isBlock(key))
                onError(keyNode.range, 'BLOCK_IN_FLOW', blockMsg);
            // value properties
            const valueProps = resolveProps.resolveProps(sep ?? [], {
                flow: fcName,
                indicator: 'map-value-ind',
                next: value,
                offset: keyNode.range[2],
                onError,
                startOnNewline: false
            });
            if (valueProps.found) {
                if (!isMap && !props.found && ctx.options.strict) {
                    if (sep)
                        for (const st of sep) {
                            if (st === valueProps.found)
                                break;
                            if (st.type === 'newline') {
                                onError(st, 'MULTILINE_IMPLICIT_KEY', 'Implicit keys of flow sequence pairs need to be on a single line');
                                break;
                            }
                        }
                    if (props.start < valueProps.found.offset - 1024)
                        onError(valueProps.found, 'KEY_OVER_1024_CHARS', 'The : indicator must be at most 1024 chars after the start of an implicit flow sequence key');
                }
            }
            else if (value) {
                if ('source' in value && value.source && value.source[0] === ':')
                    onError(value, 'MISSING_CHAR', `Missing space after : in ${fcName}`);
                else
                    onError(valueProps.start, 'MISSING_CHAR', `Missing , or : between ${fcName} items`);
            }
            // value value
            const valueNode = value
                ? composeNode(ctx, value, valueProps, onError)
                : valueProps.found
                    ? composeEmptyNode(ctx, valueProps.end, sep, null, valueProps, onError)
                    : null;
            if (valueNode) {
                if (isBlock(value))
                    onError(valueNode.range, 'BLOCK_IN_FLOW', blockMsg);
            }
            else if (valueProps.comment) {
                if (keyNode.comment)
                    keyNode.comment += '\n' + valueProps.comment;
                else
                    keyNode.comment = valueProps.comment;
            }
            const pair = new Pair.Pair(keyNode, valueNode);
            if (ctx.options.keepSourceTokens)
                pair.srcToken = collItem;
            if (isMap) {
                const map = coll;
                if (utilMapIncludes.mapIncludes(ctx, map.items, keyNode))
                    onError(keyStart, 'DUPLICATE_KEY', 'Map keys must be unique');
                map.items.push(pair);
            }
            else {
                const map = new YAMLMap.YAMLMap(ctx.schema);
                map.flow = true;
                map.items.push(pair);
                coll.items.push(map);
            }
            offset = valueNode ? valueNode.range[2] : valueProps.end;
        }
    }
    const expectedEnd = isMap ? '}' : ']';
    const [ce, ...ee] = fc.end;
    let cePos = offset;
    if (ce && ce.source === expectedEnd)
        cePos = ce.offset + ce.source.length;
    else {
        const name = fcName[0].toUpperCase() + fcName.substring(1);
        const msg = atRoot
            ? `${name} must end with a ${expectedEnd}`
            : `${name} in block collection must be sufficiently indented and end with a ${expectedEnd}`;
        onError(offset, atRoot ? 'MISSING_CHAR' : 'BAD_INDENT', msg);
        if (ce && ce.source.length !== 1)
            ee.unshift(ce);
    }
    if (ee.length > 0) {
        const end = resolveEnd.resolveEnd(ee, cePos, ctx.options.strict, onError);
        if (end.comment) {
            if (coll.comment)
                coll.comment += '\n' + end.comment;
            else
                coll.comment = end.comment;
        }
        coll.range = [fc.offset, cePos, end.offset];
    }
    else {
        coll.range = [fc.offset, cePos, cePos];
    }
    return coll;
}

exports.resolveFlowCollection = resolveFlowCollection;


/***/ }),

/***/ 5164:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var Scalar = __nccwpck_require__(5461);
var resolveEnd = __nccwpck_require__(4685);

function resolveFlowScalar(scalar, strict, onError) {
    const { offset, type, source, end } = scalar;
    let _type;
    let value;
    const _onError = (rel, code, msg) => onError(offset + rel, code, msg);
    switch (type) {
        case 'scalar':
            _type = Scalar.Scalar.PLAIN;
            value = plainValue(source, _onError);
            break;
        case 'single-quoted-scalar':
            _type = Scalar.Scalar.QUOTE_SINGLE;
            value = singleQuotedValue(source, _onError);
            break;
        case 'double-quoted-scalar':
            _type = Scalar.Scalar.QUOTE_DOUBLE;
            value = doubleQuotedValue(source, _onError);
            break;
        /* istanbul ignore next should not happen */
        default:
            onError(scalar, 'UNEXPECTED_TOKEN', `Expected a flow scalar value, but found: ${type}`);
            return {
                value: '',
                type: null,
                comment: '',
                range: [offset, offset + source.length, offset + source.length]
            };
    }
    const valueEnd = offset + source.length;
    const re = resolveEnd.resolveEnd(end, valueEnd, strict, onError);
    return {
        value,
        type: _type,
        comment: re.comment,
        range: [offset, valueEnd, re.offset]
    };
}
function plainValue(source, onError) {
    let badChar = '';
    switch (source[0]) {
        /* istanbul ignore next should not happen */
        case '\t':
            badChar = 'a tab character';
            break;
        case ',':
            badChar = 'flow indicator character ,';
            break;
        case '%':
            badChar = 'directive indicator character %';
            break;
        case '|':
        case '>': {
            badChar = `block scalar indicator ${source[0]}`;
            break;
        }
        case '@':
        case '`': {
            badChar = `reserved character ${source[0]}`;
            break;
        }
    }
    if (badChar)
        onError(0, 'BAD_SCALAR_START', `Plain value cannot start with ${badChar}`);
    return foldLines(source);
}
function singleQuotedValue(source, onError) {
    if (source[source.length - 1] !== "'" || source.length === 1)
        onError(source.length, 'MISSING_CHAR', "Missing closing 'quote");
    return foldLines(source.slice(1, -1)).replace(/''/g, "'");
}
function foldLines(source) {
    /**
     * The negative lookbehind here and in the `re` RegExp is to
     * prevent causing a polynomial search time in certain cases.
     *
     * The try-catch is for Safari, which doesn't support this yet:
     * https://caniuse.com/js-regexp-lookbehind
     */
    let first, line;
    try {
        first = new RegExp('(.*?)(?<![ \t])[ \t]*\r?\n', 'sy');
        line = new RegExp('[ \t]*(.*?)(?:(?<![ \t])[ \t]*)?\r?\n', 'sy');
    }
    catch (_) {
        first = /(.*?)[ \t]*\r?\n/sy;
        line = /[ \t]*(.*?)[ \t]*\r?\n/sy;
    }
    let match = first.exec(source);
    if (!match)
        return source;
    let res = match[1];
    let sep = ' ';
    let pos = first.lastIndex;
    line.lastIndex = pos;
    while ((match = line.exec(source))) {
        if (match[1] === '') {
            if (sep === '\n')
                res += sep;
            else
                sep = '\n';
        }
        else {
            res += sep + match[1];
            sep = ' ';
        }
        pos = line.lastIndex;
    }
    const last = /[ \t]*(.*)/sy;
    last.lastIndex = pos;
    match = last.exec(source);
    return res + sep + (match?.[1] ?? '');
}
function doubleQuotedValue(source, onError) {
    let res = '';
    for (let i = 1; i < source.length - 1; ++i) {
        const ch = source[i];
        if (ch === '\r' && source[i + 1] === '\n')
            continue;
        if (ch === '\n') {
            const { fold, offset } = foldNewline(source, i);
            res += fold;
            i = offset;
        }
        else if (ch === '\\') {
            let next = source[++i];
            const cc = escapeCodes[next];
            if (cc)
                res += cc;
            else if (next === '\n') {
                // skip escaped newlines, but still trim the following line
                next = source[i + 1];
                while (next === ' ' || next === '\t')
                    next = source[++i + 1];
            }
            else if (next === '\r' && source[i + 1] === '\n') {
                // skip escaped CRLF newlines, but still trim the following line
                next = source[++i + 1];
                while (next === ' ' || next === '\t')
                    next = source[++i + 1];
            }
            else if (next === 'x' || next === 'u' || next === 'U') {
                const length = { x: 2, u: 4, U: 8 }[next];
                res += parseCharCode(source, i + 1, length, onError);
                i += length;
            }
            else {
                const raw = source.substr(i - 1, 2);
                onError(i - 1, 'BAD_DQ_ESCAPE', `Invalid escape sequence ${raw}`);
                res += raw;
            }
        }
        else if (ch === ' ' || ch === '\t') {
            // trim trailing whitespace
            const wsStart = i;
            let next = source[i + 1];
            while (next === ' ' || next === '\t')
                next = source[++i + 1];
            if (next !== '\n' && !(next === '\r' && source[i + 2] === '\n'))
                res += i > wsStart ? source.slice(wsStart, i + 1) : ch;
        }
        else {
            res += ch;
        }
    }
    if (source[source.length - 1] !== '"' || source.length === 1)
        onError(source.length, 'MISSING_CHAR', 'Missing closing "quote');
    return res;
}
/**
 * Fold a single newline into a space, multiple newlines to N - 1 newlines.
 * Presumes `source[offset] === '\n'`
 */
function foldNewline(source, offset) {
    let fold = '';
    let ch = source[offset + 1];
    while (ch === ' ' || ch === '\t' || ch === '\n' || ch === '\r') {
        if (ch === '\r' && source[offset + 2] !== '\n')
            break;
        if (ch === '\n')
            fold += '\n';
        offset += 1;
        ch = source[offset + 1];
    }
    if (!fold)
        fold = ' ';
    return { fold, offset };
}
const escapeCodes = {
    '0': '\0',
    a: '\x07',
    b: '\b',
    e: '\x1b',
    f: '\f',
    n: '\n',
    r: '\r',
    t: '\t',
    v: '\v',
    N: '\u0085',
    _: '\u00a0',
    L: '\u2028',
    P: '\u2029',
    ' ': ' ',
    '"': '"',
    '/': '/',
    '\\': '\\',
    '\t': '\t'
};
function parseCharCode(source, offset, length, onError) {
    const cc = source.substr(offset, length);
    const ok = cc.length === length && /^[0-9a-fA-F]+$/.test(cc);
    const code = ok ? parseInt(cc, 16) : NaN;
    if (isNaN(code)) {
        const raw = source.substr(offset - 2, length + 2);
        onError(offset - 2, 'BAD_DQ_ESCAPE', `Invalid escape sequence ${raw}`);
        return raw;
    }
    return String.fromCodePoint(code);
}

exports.resolveFlowScalar = resolveFlowScalar;


/***/ }),

/***/ 7754:
/***/ ((__unused_webpack_module, exports) => {



function resolveProps(tokens, { flow, indicator, next, offset, onError, startOnNewline }) {
    let spaceBefore = false;
    let atNewline = startOnNewline;
    let hasSpace = startOnNewline;
    let comment = '';
    let commentSep = '';
    let hasNewline = false;
    let hasNewlineAfterProp = false;
    let reqSpace = false;
    let anchor = null;
    let tag = null;
    let comma = null;
    let found = null;
    let start = null;
    for (const token of tokens) {
        if (reqSpace) {
            if (token.type !== 'space' &&
                token.type !== 'newline' &&
                token.type !== 'comma')
                onError(token.offset, 'MISSING_CHAR', 'Tags and anchors must be separated from the next token by white space');
            reqSpace = false;
        }
        switch (token.type) {
            case 'space':
                // At the doc level, tabs at line start may be parsed
                // as leading white space rather than indentation.
                // In a flow collection, only the parser handles indent.
                if (!flow &&
                    atNewline &&
                    indicator !== 'doc-start' &&
                    token.source[0] === '\t')
                    onError(token, 'TAB_AS_INDENT', 'Tabs are not allowed as indentation');
                hasSpace = true;
                break;
            case 'comment': {
                if (!hasSpace)
                    onError(token, 'MISSING_CHAR', 'Comments must be separated from other tokens by white space characters');
                const cb = token.source.substring(1) || ' ';
                if (!comment)
                    comment = cb;
                else
                    comment += commentSep + cb;
                commentSep = '';
                atNewline = false;
                break;
            }
            case 'newline':
                if (atNewline) {
                    if (comment)
                        comment += token.source;
                    else
                        spaceBefore = true;
                }
                else
                    commentSep += token.source;
                atNewline = true;
                hasNewline = true;
                if (anchor || tag)
                    hasNewlineAfterProp = true;
                hasSpace = true;
                break;
            case 'anchor':
                if (anchor)
                    onError(token, 'MULTIPLE_ANCHORS', 'A node can have at most one anchor');
                if (token.source.endsWith(':'))
                    onError(token.offset + token.source.length - 1, 'BAD_ALIAS', 'Anchor ending in : is ambiguous', true);
                anchor = token;
                if (start === null)
                    start = token.offset;
                atNewline = false;
                hasSpace = false;
                reqSpace = true;
                break;
            case 'tag': {
                if (tag)
                    onError(token, 'MULTIPLE_TAGS', 'A node can have at most one tag');
                tag = token;
                if (start === null)
                    start = token.offset;
                atNewline = false;
                hasSpace = false;
                reqSpace = true;
                break;
            }
            case indicator:
                // Could here handle preceding comments differently
                if (anchor || tag)
                    onError(token, 'BAD_PROP_ORDER', `Anchors and tags must be after the ${token.source} indicator`);
                if (found)
                    onError(token, 'UNEXPECTED_TOKEN', `Unexpected ${token.source} in ${flow ?? 'collection'}`);
                found = token;
                atNewline = false;
                hasSpace = false;
                break;
            case 'comma':
                if (flow) {
                    if (comma)
                        onError(token, 'UNEXPECTED_TOKEN', `Unexpected , in ${flow}`);
                    comma = token;
                    atNewline = false;
                    hasSpace = false;
                    break;
                }
            // else fallthrough
            default:
                onError(token, 'UNEXPECTED_TOKEN', `Unexpected ${token.type} token`);
                atNewline = false;
                hasSpace = false;
        }
    }
    const last = tokens[tokens.length - 1];
    const end = last ? last.offset + last.source.length : offset;
    if (reqSpace &&
        next &&
        next.type !== 'space' &&
        next.type !== 'newline' &&
        next.type !== 'comma' &&
        (next.type !== 'scalar' || next.source !== ''))
        onError(next.offset, 'MISSING_CHAR', 'Tags and anchors must be separated from the next token by white space');
    return {
        comma,
        found,
        spaceBefore,
        comment,
        hasNewline,
        hasNewlineAfterProp,
        anchor,
        tag,
        end,
        start: start ?? end
    };
}

exports.resolveProps = resolveProps;


/***/ }),

/***/ 4601:
/***/ ((__unused_webpack_module, exports) => {



function containsNewline(key) {
    if (!key)
        return null;
    switch (key.type) {
        case 'alias':
        case 'scalar':
        case 'double-quoted-scalar':
        case 'single-quoted-scalar':
            if (key.source.includes('\n'))
                return true;
            if (key.end)
                for (const st of key.end)
                    if (st.type === 'newline')
                        return true;
            return false;
        case 'flow-collection':
            for (const it of key.items) {
                for (const st of it.start)
                    if (st.type === 'newline')
                        return true;
                if (it.sep)
                    for (const st of it.sep)
                        if (st.type === 'newline')
                            return true;
                if (containsNewline(it.key) || containsNewline(it.value))
                    return true;
            }
            return false;
        default:
            return true;
    }
}

exports.containsNewline = containsNewline;


/***/ }),

/***/ 2466:
/***/ ((__unused_webpack_module, exports) => {



function emptyScalarPosition(offset, before, pos) {
    if (before) {
        if (pos === null)
            pos = before.length;
        for (let i = pos - 1; i >= 0; --i) {
            let st = before[i];
            switch (st.type) {
                case 'space':
                case 'comment':
                case 'newline':
                    offset -= st.source.length;
                    continue;
            }
            // Technically, an empty scalar is immediately after the last non-empty
            // node, but it's more useful to place it after any whitespace.
            st = before[++i];
            while (st?.type === 'space') {
                offset += st.source.length;
                st = before[++i];
            }
            break;
        }
    }
    return offset;
}

exports.emptyScalarPosition = emptyScalarPosition;


/***/ }),

/***/ 445:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var utilContainsNewline = __nccwpck_require__(4601);

function flowIndentCheck(indent, fc, onError) {
    if (fc?.type === 'flow-collection') {
        const end = fc.end[0];
        if (end.indent === indent &&
            (end.source === ']' || end.source === '}') &&
            utilContainsNewline.containsNewline(fc)) {
            const msg = 'Flow end indicator should be more indented than parent';
            onError(end, 'BAD_INDENT', msg, true);
        }
    }
}

exports.flowIndentCheck = flowIndentCheck;


/***/ }),

/***/ 6381:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var Node = __nccwpck_require__(240);

function mapIncludes(ctx, items, search) {
    const { uniqueKeys } = ctx.options;
    if (uniqueKeys === false)
        return false;
    const isEqual = typeof uniqueKeys === 'function'
        ? uniqueKeys
        : (a, b) => a === b ||
            (Node.isScalar(a) &&
                Node.isScalar(b) &&
                a.value === b.value &&
                !(a.value === '<<' && ctx.schema.merge));
    return items.some(pair => isEqual(pair.key, search));
}

exports.mapIncludes = mapIncludes;


/***/ }),

/***/ 9954:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var Alias = __nccwpck_require__(5163);
var Collection = __nccwpck_require__(6848);
var Node = __nccwpck_require__(240);
var Pair = __nccwpck_require__(9200);
var toJS = __nccwpck_require__(9001);
var Schema = __nccwpck_require__(8726);
var stringify = __nccwpck_require__(1631);
var stringifyDocument = __nccwpck_require__(8279);
var anchors = __nccwpck_require__(7626);
var applyReviver = __nccwpck_require__(6071);
var createNode = __nccwpck_require__(6822);
var directives = __nccwpck_require__(8516);

class Document {
    constructor(value, replacer, options) {
        /** A comment before this Document */
        this.commentBefore = null;
        /** A comment immediately after this Document */
        this.comment = null;
        /** Errors encountered during parsing. */
        this.errors = [];
        /** Warnings encountered during parsing. */
        this.warnings = [];
        Object.defineProperty(this, Node.NODE_TYPE, { value: Node.DOC });
        let _replacer = null;
        if (typeof replacer === 'function' || Array.isArray(replacer)) {
            _replacer = replacer;
        }
        else if (options === undefined && replacer) {
            options = replacer;
            replacer = undefined;
        }
        const opt = Object.assign({
            intAsBigInt: false,
            keepSourceTokens: false,
            logLevel: 'warn',
            prettyErrors: true,
            strict: true,
            uniqueKeys: true,
            version: '1.2'
        }, options);
        this.options = opt;
        let { version } = opt;
        if (options?._directives) {
            this.directives = options._directives.atDocument();
            if (this.directives.yaml.explicit)
                version = this.directives.yaml.version;
        }
        else
            this.directives = new directives.Directives({ version });
        this.setSchema(version, options);
        if (value === undefined)
            this.contents = null;
        else {
            this.contents = this.createNode(value, _replacer, options);
        }
    }
    /**
     * Create a deep copy of this Document and its contents.
     *
     * Custom Node values that inherit from `Object` still refer to their original instances.
     */
    clone() {
        const copy = Object.create(Document.prototype, {
            [Node.NODE_TYPE]: { value: Node.DOC }
        });
        copy.commentBefore = this.commentBefore;
        copy.comment = this.comment;
        copy.errors = this.errors.slice();
        copy.warnings = this.warnings.slice();
        copy.options = Object.assign({}, this.options);
        if (this.directives)
            copy.directives = this.directives.clone();
        copy.schema = this.schema.clone();
        copy.contents = Node.isNode(this.contents)
            ? this.contents.clone(copy.schema)
            : this.contents;
        if (this.range)
            copy.range = this.range.slice();
        return copy;
    }
    /** Adds a value to the document. */
    add(value) {
        if (assertCollection(this.contents))
            this.contents.add(value);
    }
    /** Adds a value to the document. */
    addIn(path, value) {
        if (assertCollection(this.contents))
            this.contents.addIn(path, value);
    }
    /**
     * Create a new `Alias` node, ensuring that the target `node` has the required anchor.
     *
     * If `node` already has an anchor, `name` is ignored.
     * Otherwise, the `node.anchor` value will be set to `name`,
     * or if an anchor with that name is already present in the document,
     * `name` will be used as a prefix for a new unique anchor.
     * If `name` is undefined, the generated anchor will use 'a' as a prefix.
     */
    createAlias(node, name) {
        if (!node.anchor) {
            const prev = anchors.anchorNames(this);
            node.anchor =
                // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
                !name || prev.has(name) ? anchors.findNewAnchor(name || 'a', prev) : name;
        }
        return new Alias.Alias(node.anchor);
    }
    createNode(value, replacer, options) {
        let _replacer = undefined;
        if (typeof replacer === 'function') {
            value = replacer.call({ '': value }, '', value);
            _replacer = replacer;
        }
        else if (Array.isArray(replacer)) {
            const keyToStr = (v) => typeof v === 'number' || v instanceof String || v instanceof Number;
            const asStr = replacer.filter(keyToStr).map(String);
            if (asStr.length > 0)
                replacer = replacer.concat(asStr);
            _replacer = replacer;
        }
        else if (options === undefined && replacer) {
            options = replacer;
            replacer = undefined;
        }
        const { aliasDuplicateObjects, anchorPrefix, flow, keepUndefined, onTagObj, tag } = options ?? {};
        const { onAnchor, setAnchors, sourceObjects } = anchors.createNodeAnchors(this, 
        // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
        anchorPrefix || 'a');
        const ctx = {
            aliasDuplicateObjects: aliasDuplicateObjects ?? true,
            keepUndefined: keepUndefined ?? false,
            onAnchor,
            onTagObj,
            replacer: _replacer,
            schema: this.schema,
            sourceObjects
        };
        const node = createNode.createNode(value, tag, ctx);
        if (flow && Node.isCollection(node))
            node.flow = true;
        setAnchors();
        return node;
    }
    /**
     * Convert a key and a value into a `Pair` using the current schema,
     * recursively wrapping all values as `Scalar` or `Collection` nodes.
     */
    createPair(key, value, options = {}) {
        const k = this.createNode(key, null, options);
        const v = this.createNode(value, null, options);
        return new Pair.Pair(k, v);
    }
    /**
     * Removes a value from the document.
     * @returns `true` if the item was found and removed.
     */
    delete(key) {
        return assertCollection(this.contents) ? this.contents.delete(key) : false;
    }
    /**
     * Removes a value from the document.
     * @returns `true` if the item was found and removed.
     */
    deleteIn(path) {
        if (Collection.isEmptyPath(path)) {
            if (this.contents == null)
                return false;
            this.contents = null;
            return true;
        }
        return assertCollection(this.contents)
            ? this.contents.deleteIn(path)
            : false;
    }
    /**
     * Returns item at `key`, or `undefined` if not found. By default unwraps
     * scalar values from their surrounding node; to disable set `keepScalar` to
     * `true` (collections are always returned intact).
     */
    get(key, keepScalar) {
        return Node.isCollection(this.contents)
            ? this.contents.get(key, keepScalar)
            : undefined;
    }
    /**
     * Returns item at `path`, or `undefined` if not found. By default unwraps
     * scalar values from their surrounding node; to disable set `keepScalar` to
     * `true` (collections are always returned intact).
     */
    getIn(path, keepScalar) {
        if (Collection.isEmptyPath(path))
            return !keepScalar && Node.isScalar(this.contents)
                ? this.contents.value
                : this.contents;
        return Node.isCollection(this.contents)
            ? this.contents.getIn(path, keepScalar)
            : undefined;
    }
    /**
     * Checks if the document includes a value with the key `key`.
     */
    has(key) {
        return Node.isCollection(this.contents) ? this.contents.has(key) : false;
    }
    /**
     * Checks if the document includes a value at `path`.
     */
    hasIn(path) {
        if (Collection.isEmptyPath(path))
            return this.contents !== undefined;
        return Node.isCollection(this.contents) ? this.contents.hasIn(path) : false;
    }
    /**
     * Sets a value in this document. For `!!set`, `value` needs to be a
     * boolean to add/remove the item from the set.
     */
    set(key, value) {
        if (this.contents == null) {
            this.contents = Collection.collectionFromPath(this.schema, [key], value);
        }
        else if (assertCollection(this.contents)) {
            this.contents.set(key, value);
        }
    }
    /**
     * Sets a value in this document. For `!!set`, `value` needs to be a
     * boolean to add/remove the item from the set.
     */
    setIn(path, value) {
        if (Collection.isEmptyPath(path))
            this.contents = value;
        else if (this.contents == null) {
            this.contents = Collection.collectionFromPath(this.schema, Array.from(path), value);
        }
        else if (assertCollection(this.contents)) {
            this.contents.setIn(path, value);
        }
    }
    /**
     * Change the YAML version and schema used by the document.
     * A `null` version disables support for directives, explicit tags, anchors, and aliases.
     * It also requires the `schema` option to be given as a `Schema` instance value.
     *
     * Overrides all previously set schema options.
     */
    setSchema(version, options = {}) {
        if (typeof version === 'number')
            version = String(version);
        let opt;
        switch (version) {
            case '1.1':
                if (this.directives)
                    this.directives.yaml.version = '1.1';
                else
                    this.directives = new directives.Directives({ version: '1.1' });
                opt = { merge: true, resolveKnownTags: false, schema: 'yaml-1.1' };
                break;
            case '1.2':
            case 'next':
                if (this.directives)
                    this.directives.yaml.version = version;
                else
                    this.directives = new directives.Directives({ version });
                opt = { merge: false, resolveKnownTags: true, schema: 'core' };
                break;
            case null:
                if (this.directives)
                    delete this.directives;
                opt = null;
                break;
            default: {
                const sv = JSON.stringify(version);
                throw new Error(`Expected '1.1', '1.2' or null as first argument, but found: ${sv}`);
            }
        }
        // Not using `instanceof Schema` to allow for duck typing
        if (options.schema instanceof Object)
            this.schema = options.schema;
        else if (opt)
            this.schema = new Schema.Schema(Object.assign(opt, options));
        else
            throw new Error(`With a null YAML version, the { schema: Schema } option is required`);
    }
    // json & jsonArg are only used from toJSON()
    toJS({ json, jsonArg, mapAsMap, maxAliasCount, onAnchor, reviver } = {}) {
        const ctx = {
            anchors: new Map(),
            doc: this,
            keep: !json,
            mapAsMap: mapAsMap === true,
            mapKeyWarned: false,
            maxAliasCount: typeof maxAliasCount === 'number' ? maxAliasCount : 100,
            stringify: stringify.stringify
        };
        const res = toJS.toJS(this.contents, jsonArg ?? '', ctx);
        if (typeof onAnchor === 'function')
            for (const { count, res } of ctx.anchors.values())
                onAnchor(res, count);
        return typeof reviver === 'function'
            ? applyReviver.applyReviver(reviver, { '': res }, '', res)
            : res;
    }
    /**
     * A JSON representation of the document `contents`.
     *
     * @param jsonArg Used by `JSON.stringify` to indicate the array index or
     *   property name.
     */
    toJSON(jsonArg, onAnchor) {
        return this.toJS({ json: true, jsonArg, mapAsMap: false, onAnchor });
    }
    /** A YAML representation of the document. */
    toString(options = {}) {
        if (this.errors.length > 0)
            throw new Error('Document with errors cannot be stringified');
        if ('indent' in options &&
            (!Number.isInteger(options.indent) || Number(options.indent) <= 0)) {
            const s = JSON.stringify(options.indent);
            throw new Error(`"indent" option must be a positive integer, not ${s}`);
        }
        return stringifyDocument.stringifyDocument(this, options);
    }
}
function assertCollection(contents) {
    if (Node.isCollection(contents))
        return true;
    throw new Error('Expected a YAML collection as document contents');
}

exports.Document = Document;


/***/ }),

/***/ 7626:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var Node = __nccwpck_require__(240);
var visit = __nccwpck_require__(8159);

/**
 * Verify that the input string is a valid anchor.
 *
 * Will throw on errors.
 */
function anchorIsValid(anchor) {
    if (/[\x00-\x19\s,[\]{}]/.test(anchor)) {
        const sa = JSON.stringify(anchor);
        const msg = `Anchor must not contain whitespace or control characters: ${sa}`;
        throw new Error(msg);
    }
    return true;
}
function anchorNames(root) {
    const anchors = new Set();
    visit.visit(root, {
        Value(_key, node) {
            if (node.anchor)
                anchors.add(node.anchor);
        }
    });
    return anchors;
}
/** Find a new anchor name with the given `prefix` and a one-indexed suffix. */
function findNewAnchor(prefix, exclude) {
    for (let i = 1; true; ++i) {
        const name = `${prefix}${i}`;
        if (!exclude.has(name))
            return name;
    }
}
function createNodeAnchors(doc, prefix) {
    const aliasObjects = [];
    const sourceObjects = new Map();
    let prevAnchors = null;
    return {
        onAnchor: (source) => {
            aliasObjects.push(source);
            if (!prevAnchors)
                prevAnchors = anchorNames(doc);
            const anchor = findNewAnchor(prefix, prevAnchors);
            prevAnchors.add(anchor);
            return anchor;
        },
        /**
         * With circular references, the source node is only resolved after all
         * of its child nodes are. This is why anchors are set only after all of
         * the nodes have been created.
         */
        setAnchors: () => {
            for (const source of aliasObjects) {
                const ref = sourceObjects.get(source);
                if (typeof ref === 'object' &&
                    ref.anchor &&
                    (Node.isScalar(ref.node) || Node.isCollection(ref.node))) {
                    ref.node.anchor = ref.anchor;
                }
                else {
                    const error = new Error('Failed to resolve repeated object (this should not happen)');
                    error.source = source;
                    throw error;
                }
            }
        },
        sourceObjects
    };
}

exports.anchorIsValid = anchorIsValid;
exports.anchorNames = anchorNames;
exports.createNodeAnchors = createNodeAnchors;
exports.findNewAnchor = findNewAnchor;


/***/ }),

/***/ 6071:
/***/ ((__unused_webpack_module, exports) => {



/**
 * Applies the JSON.parse reviver algorithm as defined in the ECMA-262 spec,
 * in section 24.5.1.1 "Runtime Semantics: InternalizeJSONProperty" of the
 * 2021 edition: https://tc39.es/ecma262/#sec-json.parse
 *
 * Includes extensions for handling Map and Set objects.
 */
function applyReviver(reviver, obj, key, val) {
    if (val && typeof val === 'object') {
        if (Array.isArray(val)) {
            for (let i = 0, len = val.length; i < len; ++i) {
                const v0 = val[i];
                const v1 = applyReviver(reviver, val, String(i), v0);
                if (v1 === undefined)
                    delete val[i];
                else if (v1 !== v0)
                    val[i] = v1;
            }
        }
        else if (val instanceof Map) {
            for (const k of Array.from(val.keys())) {
                const v0 = val.get(k);
                const v1 = applyReviver(reviver, val, k, v0);
                if (v1 === undefined)
                    val.delete(k);
                else if (v1 !== v0)
                    val.set(k, v1);
            }
        }
        else if (val instanceof Set) {
            for (const v0 of Array.from(val)) {
                const v1 = applyReviver(reviver, val, v0, v0);
                if (v1 === undefined)
                    val.delete(v0);
                else if (v1 !== v0) {
                    val.delete(v0);
                    val.add(v1);
                }
            }
        }
        else {
            for (const [k, v0] of Object.entries(val)) {
                const v1 = applyReviver(reviver, val, k, v0);
                if (v1 === undefined)
                    delete val[k];
                else if (v1 !== v0)
                    val[k] = v1;
            }
        }
    }
    return reviver.call(obj, key, val);
}

exports.applyReviver = applyReviver;


/***/ }),

/***/ 6822:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var Alias = __nccwpck_require__(5163);
var Node = __nccwpck_require__(240);
var Scalar = __nccwpck_require__(5461);

const defaultTagPrefix = 'tag:yaml.org,2002:';
function findTagObject(value, tagName, tags) {
    if (tagName) {
        const match = tags.filter(t => t.tag === tagName);
        const tagObj = match.find(t => !t.format) ?? match[0];
        if (!tagObj)
            throw new Error(`Tag ${tagName} not found`);
        return tagObj;
    }
    return tags.find(t => t.identify?.(value) && !t.format);
}
function createNode(value, tagName, ctx) {
    if (Node.isDocument(value))
        value = value.contents;
    if (Node.isNode(value))
        return value;
    if (Node.isPair(value)) {
        const map = ctx.schema[Node.MAP].createNode?.(ctx.schema, null, ctx);
        map.items.push(value);
        return map;
    }
    if (value instanceof String ||
        value instanceof Number ||
        value instanceof Boolean ||
        (typeof BigInt !== 'undefined' && value instanceof BigInt) // not supported everywhere
    ) {
        // https://tc39.es/ecma262/#sec-serializejsonproperty
        value = value.valueOf();
    }
    const { aliasDuplicateObjects, onAnchor, onTagObj, schema, sourceObjects } = ctx;
    // Detect duplicate references to the same object & use Alias nodes for all
    // after first. The `ref` wrapper allows for circular references to resolve.
    let ref = undefined;
    if (aliasDuplicateObjects && value && typeof value === 'object') {
        ref = sourceObjects.get(value);
        if (ref) {
            if (!ref.anchor)
                ref.anchor = onAnchor(value);
            return new Alias.Alias(ref.anchor);
        }
        else {
            ref = { anchor: null, node: null };
            sourceObjects.set(value, ref);
        }
    }
    if (tagName?.startsWith('!!'))
        tagName = defaultTagPrefix + tagName.slice(2);
    let tagObj = findTagObject(value, tagName, schema.tags);
    if (!tagObj) {
        if (value && typeof value.toJSON === 'function') {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-call
            value = value.toJSON();
        }
        if (!value || typeof value !== 'object') {
            const node = new Scalar.Scalar(value);
            if (ref)
                ref.node = node;
            return node;
        }
        tagObj =
            value instanceof Map
                ? schema[Node.MAP]
                : Symbol.iterator in Object(value)
                    ? schema[Node.SEQ]
                    : schema[Node.MAP];
    }
    if (onTagObj) {
        onTagObj(tagObj);
        delete ctx.onTagObj;
    }
    const node = tagObj?.createNode
        ? tagObj.createNode(ctx.schema, value, ctx)
        : new Scalar.Scalar(value);
    if (tagName)
        node.tag = tagName;
    if (ref)
        ref.node = node;
    return node;
}

exports.createNode = createNode;


/***/ }),

/***/ 8516:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var Node = __nccwpck_require__(240);
var visit = __nccwpck_require__(8159);

const escapeChars = {
    '!': '%21',
    ',': '%2C',
    '[': '%5B',
    ']': '%5D',
    '{': '%7B',
    '}': '%7D'
};
const escapeTagName = (tn) => tn.replace(/[!,[\]{}]/g, ch => escapeChars[ch]);
class Directives {
    constructor(yaml, tags) {
        /**
         * The directives-end/doc-start marker `---`. If `null`, a marker may still be
         * included in the document's stringified representation.
         */
        this.docStart = null;
        /** The doc-end marker `...`.  */
        this.docEnd = false;
        this.yaml = Object.assign({}, Directives.defaultYaml, yaml);
        this.tags = Object.assign({}, Directives.defaultTags, tags);
    }
    clone() {
        const copy = new Directives(this.yaml, this.tags);
        copy.docStart = this.docStart;
        return copy;
    }
    /**
     * During parsing, get a Directives instance for the current document and
     * update the stream state according to the current version's spec.
     */
    atDocument() {
        const res = new Directives(this.yaml, this.tags);
        switch (this.yaml.version) {
            case '1.1':
                this.atNextDocument = true;
                break;
            case '1.2':
                this.atNextDocument = false;
                this.yaml = {
                    explicit: Directives.defaultYaml.explicit,
                    version: '1.2'
                };
                this.tags = Object.assign({}, Directives.defaultTags);
                break;
        }
        return res;
    }
    /**
     * @param onError - May be called even if the action was successful
     * @returns `true` on success
     */
    add(line, onError) {
        if (this.atNextDocument) {
            this.yaml = { explicit: Directives.defaultYaml.explicit, version: '1.1' };
            this.tags = Object.assign({}, Directives.defaultTags);
            this.atNextDocument = false;
        }
        const parts = line.trim().split(/[ \t]+/);
        const name = parts.shift();
        switch (name) {
            case '%TAG': {
                if (parts.length !== 2) {
                    onError(0, '%TAG directive should contain exactly two parts');
                    if (parts.length < 2)
                        return false;
                }
                const [handle, prefix] = parts;
                this.tags[handle] = prefix;
                return true;
            }
            case '%YAML': {
                this.yaml.explicit = true;
                if (parts.length !== 1) {
                    onError(0, '%YAML directive should contain exactly one part');
                    return false;
                }
                const [version] = parts;
                if (version === '1.1' || version === '1.2') {
                    this.yaml.version = version;
                    return true;
                }
                else {
                    const isValid = /^\d+\.\d+$/.test(version);
                    onError(6, `Unsupported YAML version ${version}`, isValid);
                    return false;
                }
            }
            default:
                onError(0, `Unknown directive ${name}`, true);
                return false;
        }
    }
    /**
     * Resolves a tag, matching handles to those defined in %TAG directives.
     *
     * @returns Resolved tag, which may also be the non-specific tag `'!'` or a
     *   `'!local'` tag, or `null` if unresolvable.
     */
    tagName(source, onError) {
        if (source === '!')
            return '!'; // non-specific tag
        if (source[0] !== '!') {
            onError(`Not a valid tag: ${source}`);
            return null;
        }
        if (source[1] === '<') {
            const verbatim = source.slice(2, -1);
            if (verbatim === '!' || verbatim === '!!') {
                onError(`Verbatim tags aren't resolved, so ${source} is invalid.`);
                return null;
            }
            if (source[source.length - 1] !== '>')
                onError('Verbatim tags must end with a >');
            return verbatim;
        }
        const [, handle, suffix] = source.match(/^(.*!)([^!]*)$/);
        if (!suffix)
            onError(`The ${source} tag has no suffix`);
        const prefix = this.tags[handle];
        if (prefix)
            return prefix + decodeURIComponent(suffix);
        if (handle === '!')
            return source; // local tag
        onError(`Could not resolve tag: ${source}`);
        return null;
    }
    /**
     * Given a fully resolved tag, returns its printable string form,
     * taking into account current tag prefixes and defaults.
     */
    tagString(tag) {
        for (const [handle, prefix] of Object.entries(this.tags)) {
            if (tag.startsWith(prefix))
                return handle + escapeTagName(tag.substring(prefix.length));
        }
        return tag[0] === '!' ? tag : `!<${tag}>`;
    }
    toString(doc) {
        const lines = this.yaml.explicit
            ? [`%YAML ${this.yaml.version || '1.2'}`]
            : [];
        const tagEntries = Object.entries(this.tags);
        let tagNames;
        if (doc && tagEntries.length > 0 && Node.isNode(doc.contents)) {
            const tags = {};
            visit.visit(doc.contents, (_key, node) => {
                if (Node.isNode(node) && node.tag)
                    tags[node.tag] = true;
            });
            tagNames = Object.keys(tags);
        }
        else
            tagNames = [];
        for (const [handle, prefix] of tagEntries) {
            if (handle === '!!' && prefix === 'tag:yaml.org,2002:')
                continue;
            if (!doc || tagNames.some(tn => tn.startsWith(prefix)))
                lines.push(`%TAG ${handle} ${prefix}`);
        }
        return lines.join('\n');
    }
}
Directives.defaultYaml = { explicit: false, version: '1.2' };
Directives.defaultTags = { '!!': 'tag:yaml.org,2002:' };

exports.Directives = Directives;


/***/ }),

/***/ 2983:
/***/ ((__unused_webpack_module, exports) => {



class YAMLError extends Error {
    constructor(name, pos, code, message) {
        super();
        this.name = name;
        this.code = code;
        this.message = message;
        this.pos = pos;
    }
}
class YAMLParseError extends YAMLError {
    constructor(pos, code, message) {
        super('YAMLParseError', pos, code, message);
    }
}
class YAMLWarning extends YAMLError {
    constructor(pos, code, message) {
        super('YAMLWarning', pos, code, message);
    }
}
const prettifyError = (src, lc) => (error) => {
    if (error.pos[0] === -1)
        return;
    error.linePos = error.pos.map(pos => lc.linePos(pos));
    const { line, col } = error.linePos[0];
    error.message += ` at line ${line}, column ${col}`;
    let ci = col - 1;
    let lineStr = src
        .substring(lc.lineStarts[line - 1], lc.lineStarts[line])
        .replace(/[\n\r]+$/, '');
    // Trim to max 80 chars, keeping col position near the middle
    if (ci >= 60 && lineStr.length > 80) {
        const trimStart = Math.min(ci - 39, lineStr.length - 79);
        lineStr = '…' + lineStr.substring(trimStart);
        ci -= trimStart - 1;
    }
    if (lineStr.length > 80)
        lineStr = lineStr.substring(0, 79) + '…';
    // Include previous line in context if pointing at line start
    if (line > 1 && /^ *$/.test(lineStr.substring(0, ci))) {
        // Regexp won't match if start is trimmed
        let prev = src.substring(lc.lineStarts[line - 2], lc.lineStarts[line - 1]);
        if (prev.length > 80)
            prev = prev.substring(0, 79) + '…\n';
        lineStr = prev + lineStr;
    }
    if (/[^ ]/.test(lineStr)) {
        let count = 1;
        const end = error.linePos[1];
        if (end && end.line === line && end.col > col) {
            count = Math.min(end.col - col, 80 - ci);
        }
        const pointer = ' '.repeat(ci) + '^'.repeat(count);
        error.message += `:\n\n${lineStr}\n${pointer}\n`;
    }
};

exports.YAMLError = YAMLError;
exports.YAMLParseError = YAMLParseError;
exports.YAMLWarning = YAMLWarning;
exports.prettifyError = prettifyError;


/***/ }),

/***/ 3277:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var composer = __nccwpck_require__(6426);
var Document = __nccwpck_require__(9954);
var Schema = __nccwpck_require__(8726);
var errors = __nccwpck_require__(2983);
var Alias = __nccwpck_require__(5163);
var Node = __nccwpck_require__(240);
var Pair = __nccwpck_require__(9200);
var Scalar = __nccwpck_require__(5461);
var YAMLMap = __nccwpck_require__(163);
var YAMLSeq = __nccwpck_require__(7225);
var cst = __nccwpck_require__(1670);
var lexer = __nccwpck_require__(8791);
var lineCounter = __nccwpck_require__(7978);
var parser = __nccwpck_require__(272);
var publicApi = __nccwpck_require__(1461);
var visit = __nccwpck_require__(8159);



exports.Composer = composer.Composer;
exports.Document = Document.Document;
exports.Schema = Schema.Schema;
exports.YAMLError = errors.YAMLError;
exports.YAMLParseError = errors.YAMLParseError;
exports.YAMLWarning = errors.YAMLWarning;
exports.Alias = Alias.Alias;
exports.isAlias = Node.isAlias;
exports.isCollection = Node.isCollection;
exports.isDocument = Node.isDocument;
exports.isMap = Node.isMap;
exports.isNode = Node.isNode;
exports.isPair = Node.isPair;
exports.isScalar = Node.isScalar;
exports.isSeq = Node.isSeq;
exports.Pair = Pair.Pair;
exports.Scalar = Scalar.Scalar;
exports.YAMLMap = YAMLMap.YAMLMap;
exports.YAMLSeq = YAMLSeq.YAMLSeq;
exports.CST = cst;
exports.Lexer = lexer.Lexer;
exports.LineCounter = lineCounter.LineCounter;
exports.Parser = parser.Parser;
exports.parse = publicApi.parse;
exports.parseAllDocuments = publicApi.parseAllDocuments;
exports.parseDocument = publicApi.parseDocument;
exports.stringify = publicApi.stringify;
exports.visit = visit.visit;
exports.visitAsync = visit.visitAsync;


/***/ }),

/***/ 1829:
/***/ ((__unused_webpack_module, exports) => {



function debug(logLevel, ...messages) {
    if (logLevel === 'debug')
        console.log(...messages);
}
function warn(logLevel, warning) {
    if (logLevel === 'debug' || logLevel === 'warn') {
        if (typeof process !== 'undefined' && process.emitWarning)
            process.emitWarning(warning);
        else
            console.warn(warning);
    }
}

exports.debug = debug;
exports.warn = warn;


/***/ }),

/***/ 5163:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var anchors = __nccwpck_require__(7626);
var visit = __nccwpck_require__(8159);
var Node = __nccwpck_require__(240);

class Alias extends Node.NodeBase {
    constructor(source) {
        super(Node.ALIAS);
        this.source = source;
        Object.defineProperty(this, 'tag', {
            set() {
                throw new Error('Alias nodes cannot have tags');
            }
        });
    }
    /**
     * Resolve the value of this alias within `doc`, finding the last
     * instance of the `source` anchor before this node.
     */
    resolve(doc) {
        let found = undefined;
        visit.visit(doc, {
            Node: (_key, node) => {
                if (node === this)
                    return visit.visit.BREAK;
                if (node.anchor === this.source)
                    found = node;
            }
        });
        return found;
    }
    toJSON(_arg, ctx) {
        if (!ctx)
            return { source: this.source };
        const { anchors, doc, maxAliasCount } = ctx;
        const source = this.resolve(doc);
        if (!source) {
            const msg = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;
            throw new ReferenceError(msg);
        }
        const data = anchors.get(source);
        /* istanbul ignore if */
        if (!data || data.res === undefined) {
            const msg = 'This should not happen: Alias anchor was not resolved?';
            throw new ReferenceError(msg);
        }
        if (maxAliasCount >= 0) {
            data.count += 1;
            if (data.aliasCount === 0)
                data.aliasCount = getAliasCount(doc, source, anchors);
            if (data.count * data.aliasCount > maxAliasCount) {
                const msg = 'Excessive alias count indicates a resource exhaustion attack';
                throw new ReferenceError(msg);
            }
        }
        return data.res;
    }
    toString(ctx, _onComment, _onChompKeep) {
        const src = `*${this.source}`;
        if (ctx) {
            anchors.anchorIsValid(this.source);
            if (ctx.options.verifyAliasOrder && !ctx.anchors.has(this.source)) {
                const msg = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;
                throw new Error(msg);
            }
            if (ctx.implicitKey)
                return `${src} `;
        }
        return src;
    }
}
function getAliasCount(doc, node, anchors) {
    if (Node.isAlias(node)) {
        const source = node.resolve(doc);
        const anchor = anchors && source && anchors.get(source);
        return anchor ? anchor.count * anchor.aliasCount : 0;
    }
    else if (Node.isCollection(node)) {
        let count = 0;
        for (const item of node.items) {
            const c = getAliasCount(doc, item, anchors);
            if (c > count)
                count = c;
        }
        return count;
    }
    else if (Node.isPair(node)) {
        const kc = getAliasCount(doc, node.key, anchors);
        const vc = getAliasCount(doc, node.value, anchors);
        return Math.max(kc, vc);
    }
    return 1;
}

exports.Alias = Alias;


/***/ }),

/***/ 6848:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var createNode = __nccwpck_require__(6822);
var Node = __nccwpck_require__(240);

function collectionFromPath(schema, path, value) {
    let v = value;
    for (let i = path.length - 1; i >= 0; --i) {
        const k = path[i];
        if (typeof k === 'number' && Number.isInteger(k) && k >= 0) {
            const a = [];
            a[k] = v;
            v = a;
        }
        else {
            v = new Map([[k, v]]);
        }
    }
    return createNode.createNode(v, undefined, {
        aliasDuplicateObjects: false,
        keepUndefined: false,
        onAnchor: () => {
            throw new Error('This should not happen, please report a bug.');
        },
        schema,
        sourceObjects: new Map()
    });
}
// Type guard is intentionally a little wrong so as to be more useful,
// as it does not cover untypable empty non-string iterables (e.g. []).
const isEmptyPath = (path) => path == null ||
    (typeof path === 'object' && !!path[Symbol.iterator]().next().done);
class Collection extends Node.NodeBase {
    constructor(type, schema) {
        super(type);
        Object.defineProperty(this, 'schema', {
            value: schema,
            configurable: true,
            enumerable: false,
            writable: true
        });
    }
    /**
     * Create a copy of this collection.
     *
     * @param schema - If defined, overwrites the original's schema
     */
    clone(schema) {
        const copy = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));
        if (schema)
            copy.schema = schema;
        copy.items = copy.items.map(it => Node.isNode(it) || Node.isPair(it) ? it.clone(schema) : it);
        if (this.range)
            copy.range = this.range.slice();
        return copy;
    }
    /**
     * Adds a value to the collection. For `!!map` and `!!omap` the value must
     * be a Pair instance or a `{ key, value }` object, which may not have a key
     * that already exists in the map.
     */
    addIn(path, value) {
        if (isEmptyPath(path))
            this.add(value);
        else {
            const [key, ...rest] = path;
            const node = this.get(key, true);
            if (Node.isCollection(node))
                node.addIn(rest, value);
            else if (node === undefined && this.schema)
                this.set(key, collectionFromPath(this.schema, rest, value));
            else
                throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);
        }
    }
    /**
     * Removes a value from the collection.
     * @returns `true` if the item was found and removed.
     */
    deleteIn(path) {
        const [key, ...rest] = path;
        if (rest.length === 0)
            return this.delete(key);
        const node = this.get(key, true);
        if (Node.isCollection(node))
            return node.deleteIn(rest);
        else
            throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);
    }
    /**
     * Returns item at `key`, or `undefined` if not found. By default unwraps
     * scalar values from their surrounding node; to disable set `keepScalar` to
     * `true` (collections are always returned intact).
     */
    getIn(path, keepScalar) {
        const [key, ...rest] = path;
        const node = this.get(key, true);
        if (rest.length === 0)
            return !keepScalar && Node.isScalar(node) ? node.value : node;
        else
            return Node.isCollection(node) ? node.getIn(rest, keepScalar) : undefined;
    }
    hasAllNullValues(allowScalar) {
        return this.items.every(node => {
            if (!Node.isPair(node))
                return false;
            const n = node.value;
            return (n == null ||
                (allowScalar &&
                    Node.isScalar(n) &&
                    n.value == null &&
                    !n.commentBefore &&
                    !n.comment &&
                    !n.tag));
        });
    }
    /**
     * Checks if the collection includes a value with the key `key`.
     */
    hasIn(path) {
        const [key, ...rest] = path;
        if (rest.length === 0)
            return this.has(key);
        const node = this.get(key, true);
        return Node.isCollection(node) ? node.hasIn(rest) : false;
    }
    /**
     * Sets a value in this collection. For `!!set`, `value` needs to be a
     * boolean to add/remove the item from the set.
     */
    setIn(path, value) {
        const [key, ...rest] = path;
        if (rest.length === 0) {
            this.set(key, value);
        }
        else {
            const node = this.get(key, true);
            if (Node.isCollection(node))
                node.setIn(rest, value);
            else if (node === undefined && this.schema)
                this.set(key, collectionFromPath(this.schema, rest, value));
            else
                throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);
        }
    }
}
Collection.maxFlowStringSingleLineLength = 60;

exports.Collection = Collection;
exports.collectionFromPath = collectionFromPath;
exports.isEmptyPath = isEmptyPath;


/***/ }),

/***/ 240:
/***/ ((__unused_webpack_module, exports) => {



const ALIAS = Symbol.for('yaml.alias');
const DOC = Symbol.for('yaml.document');
const MAP = Symbol.for('yaml.map');
const PAIR = Symbol.for('yaml.pair');
const SCALAR = Symbol.for('yaml.scalar');
const SEQ = Symbol.for('yaml.seq');
const NODE_TYPE = Symbol.for('yaml.node.type');
const isAlias = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === ALIAS;
const isDocument = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === DOC;
const isMap = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === MAP;
const isPair = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === PAIR;
const isScalar = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SCALAR;
const isSeq = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SEQ;
function isCollection(node) {
    if (node && typeof node === 'object')
        switch (node[NODE_TYPE]) {
            case MAP:
            case SEQ:
                return true;
        }
    return false;
}
function isNode(node) {
    if (node && typeof node === 'object')
        switch (node[NODE_TYPE]) {
            case ALIAS:
            case MAP:
            case SCALAR:
            case SEQ:
                return true;
        }
    return false;
}
const hasAnchor = (node) => (isScalar(node) || isCollection(node)) && !!node.anchor;
class NodeBase {
    constructor(type) {
        Object.defineProperty(this, NODE_TYPE, { value: type });
    }
    /** Create a copy of this node.  */
    clone() {
        const copy = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));
        if (this.range)
            copy.range = this.range.slice();
        return copy;
    }
}

exports.ALIAS = ALIAS;
exports.DOC = DOC;
exports.MAP = MAP;
exports.NODE_TYPE = NODE_TYPE;
exports.NodeBase = NodeBase;
exports.PAIR = PAIR;
exports.SCALAR = SCALAR;
exports.SEQ = SEQ;
exports.hasAnchor = hasAnchor;
exports.isAlias = isAlias;
exports.isCollection = isCollection;
exports.isDocument = isDocument;
exports.isMap = isMap;
exports.isNode = isNode;
exports.isPair = isPair;
exports.isScalar = isScalar;
exports.isSeq = isSeq;


/***/ }),

/***/ 9200:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var createNode = __nccwpck_require__(6822);
var stringifyPair = __nccwpck_require__(4775);
var addPairToJSMap = __nccwpck_require__(2021);
var Node = __nccwpck_require__(240);

function createPair(key, value, ctx) {
    const k = createNode.createNode(key, undefined, ctx);
    const v = createNode.createNode(value, undefined, ctx);
    return new Pair(k, v);
}
class Pair {
    constructor(key, value = null) {
        Object.defineProperty(this, Node.NODE_TYPE, { value: Node.PAIR });
        this.key = key;
        this.value = value;
    }
    clone(schema) {
        let { key, value } = this;
        if (Node.isNode(key))
            key = key.clone(schema);
        if (Node.isNode(value))
            value = value.clone(schema);
        return new Pair(key, value);
    }
    toJSON(_, ctx) {
        const pair = ctx?.mapAsMap ? new Map() : {};
        return addPairToJSMap.addPairToJSMap(ctx, pair, this);
    }
    toString(ctx, onComment, onChompKeep) {
        return ctx?.doc
            ? stringifyPair.stringifyPair(this, ctx, onComment, onChompKeep)
            : JSON.stringify(this);
    }
}

exports.Pair = Pair;
exports.createPair = createPair;


/***/ }),

/***/ 5461:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var Node = __nccwpck_require__(240);
var toJS = __nccwpck_require__(9001);

const isScalarValue = (value) => !value || (typeof value !== 'function' && typeof value !== 'object');
class Scalar extends Node.NodeBase {
    constructor(value) {
        super(Node.SCALAR);
        this.value = value;
    }
    toJSON(arg, ctx) {
        return ctx?.keep ? this.value : toJS.toJS(this.value, arg, ctx);
    }
    toString() {
        return String(this.value);
    }
}
Scalar.BLOCK_FOLDED = 'BLOCK_FOLDED';
Scalar.BLOCK_LITERAL = 'BLOCK_LITERAL';
Scalar.PLAIN = 'PLAIN';
Scalar.QUOTE_DOUBLE = 'QUOTE_DOUBLE';
Scalar.QUOTE_SINGLE = 'QUOTE_SINGLE';

exports.Scalar = Scalar;
exports.isScalarValue = isScalarValue;


/***/ }),

/***/ 163:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var stringifyCollection = __nccwpck_require__(8949);
var addPairToJSMap = __nccwpck_require__(2021);
var Collection = __nccwpck_require__(6848);
var Node = __nccwpck_require__(240);
var Pair = __nccwpck_require__(9200);
var Scalar = __nccwpck_require__(5461);

function findPair(items, key) {
    const k = Node.isScalar(key) ? key.value : key;
    for (const it of items) {
        if (Node.isPair(it)) {
            if (it.key === key || it.key === k)
                return it;
            if (Node.isScalar(it.key) && it.key.value === k)
                return it;
        }
    }
    return undefined;
}
class YAMLMap extends Collection.Collection {
    static get tagName() {
        return 'tag:yaml.org,2002:map';
    }
    constructor(schema) {
        super(Node.MAP, schema);
        this.items = [];
    }
    /**
     * Adds a value to the collection.
     *
     * @param overwrite - If not set `true`, using a key that is already in the
     *   collection will throw. Otherwise, overwrites the previous value.
     */
    add(pair, overwrite) {
        let _pair;
        if (Node.isPair(pair))
            _pair = pair;
        else if (!pair || typeof pair !== 'object' || !('key' in pair)) {
            // In TypeScript, this never happens.
            _pair = new Pair.Pair(pair, pair?.value);
        }
        else
            _pair = new Pair.Pair(pair.key, pair.value);
        const prev = findPair(this.items, _pair.key);
        const sortEntries = this.schema?.sortMapEntries;
        if (prev) {
            if (!overwrite)
                throw new Error(`Key ${_pair.key} already set`);
            // For scalars, keep the old node & its comments and anchors
            if (Node.isScalar(prev.value) && Scalar.isScalarValue(_pair.value))
                prev.value.value = _pair.value;
            else
                prev.value = _pair.value;
        }
        else if (sortEntries) {
            const i = this.items.findIndex(item => sortEntries(_pair, item) < 0);
            if (i === -1)
                this.items.push(_pair);
            else
                this.items.splice(i, 0, _pair);
        }
        else {
            this.items.push(_pair);
        }
    }
    delete(key) {
        const it = findPair(this.items, key);
        if (!it)
            return false;
        const del = this.items.splice(this.items.indexOf(it), 1);
        return del.length > 0;
    }
    get(key, keepScalar) {
        const it = findPair(this.items, key);
        const node = it?.value;
        return (!keepScalar && Node.isScalar(node) ? node.value : node) ?? undefined;
    }
    has(key) {
        return !!findPair(this.items, key);
    }
    set(key, value) {
        this.add(new Pair.Pair(key, value), true);
    }
    /**
     * @param ctx - Conversion context, originally set in Document#toJS()
     * @param {Class} Type - If set, forces the returned collection type
     * @returns Instance of Type, Map, or Object
     */
    toJSON(_, ctx, Type) {
        const map = Type ? new Type() : ctx?.mapAsMap ? new Map() : {};
        if (ctx?.onCreate)
            ctx.onCreate(map);
        for (const item of this.items)
            addPairToJSMap.addPairToJSMap(ctx, map, item);
        return map;
    }
    toString(ctx, onComment, onChompKeep) {
        if (!ctx)
            return JSON.stringify(this);
        for (const item of this.items) {
            if (!Node.isPair(item))
                throw new Error(`Map items must all be pairs; found ${JSON.stringify(item)} instead`);
        }
        if (!ctx.allNullValues && this.hasAllNullValues(false))
            ctx = Object.assign({}, ctx, { allNullValues: true });
        return stringifyCollection.stringifyCollection(this, ctx, {
            blockItemPrefix: '',
            flowChars: { start: '{', end: '}' },
            itemIndent: ctx.indent || '',
            onChompKeep,
            onComment
        });
    }
}

exports.YAMLMap = YAMLMap;
exports.findPair = findPair;


/***/ }),

/***/ 7225:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var stringifyCollection = __nccwpck_require__(8949);
var Collection = __nccwpck_require__(6848);
var Node = __nccwpck_require__(240);
var Scalar = __nccwpck_require__(5461);
var toJS = __nccwpck_require__(9001);

class YAMLSeq extends Collection.Collection {
    static get tagName() {
        return 'tag:yaml.org,2002:seq';
    }
    constructor(schema) {
        super(Node.SEQ, schema);
        this.items = [];
    }
    add(value) {
        this.items.push(value);
    }
    /**
     * Removes a value from the collection.
     *
     * `key` must contain a representation of an integer for this to succeed.
     * It may be wrapped in a `Scalar`.
     *
     * @returns `true` if the item was found and removed.
     */
    delete(key) {
        const idx = asItemIndex(key);
        if (typeof idx !== 'number')
            return false;
        const del = this.items.splice(idx, 1);
        return del.length > 0;
    }
    get(key, keepScalar) {
        const idx = asItemIndex(key);
        if (typeof idx !== 'number')
            return undefined;
        const it = this.items[idx];
        return !keepScalar && Node.isScalar(it) ? it.value : it;
    }
    /**
     * Checks if the collection includes a value with the key `key`.
     *
     * `key` must contain a representation of an integer for this to succeed.
     * It may be wrapped in a `Scalar`.
     */
    has(key) {
        const idx = asItemIndex(key);
        return typeof idx === 'number' && idx < this.items.length;
    }
    /**
     * Sets a value in this collection. For `!!set`, `value` needs to be a
     * boolean to add/remove the item from the set.
     *
     * If `key` does not contain a representation of an integer, this will throw.
     * It may be wrapped in a `Scalar`.
     */
    set(key, value) {
        const idx = asItemIndex(key);
        if (typeof idx !== 'number')
            throw new Error(`Expected a valid index, not ${key}.`);
        const prev = this.items[idx];
        if (Node.isScalar(prev) && Scalar.isScalarValue(value))
            prev.value = value;
        else
            this.items[idx] = value;
    }
    toJSON(_, ctx) {
        const seq = [];
        if (ctx?.onCreate)
            ctx.onCreate(seq);
        let i = 0;
        for (const item of this.items)
            seq.push(toJS.toJS(item, String(i++), ctx));
        return seq;
    }
    toString(ctx, onComment, onChompKeep) {
        if (!ctx)
            return JSON.stringify(this);
        return stringifyCollection.stringifyCollection(this, ctx, {
            blockItemPrefix: '- ',
            flowChars: { start: '[', end: ']' },
            itemIndent: (ctx.indent || '') + '  ',
            onChompKeep,
            onComment
        });
    }
}
function asItemIndex(key) {
    let idx = Node.isScalar(key) ? key.value : key;
    if (idx && typeof idx === 'string')
        idx = Number(idx);
    return typeof idx === 'number' && Number.isInteger(idx) && idx >= 0
        ? idx
        : null;
}

exports.YAMLSeq = YAMLSeq;


/***/ }),

/***/ 2021:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var log = __nccwpck_require__(1829);
var stringify = __nccwpck_require__(1631);
var Node = __nccwpck_require__(240);
var Scalar = __nccwpck_require__(5461);
var toJS = __nccwpck_require__(9001);

const MERGE_KEY = '<<';
function addPairToJSMap(ctx, map, { key, value }) {
    if (ctx?.doc.schema.merge && isMergeKey(key)) {
        value = Node.isAlias(value) ? value.resolve(ctx.doc) : value;
        if (Node.isSeq(value))
            for (const it of value.items)
                mergeToJSMap(ctx, map, it);
        else if (Array.isArray(value))
            for (const it of value)
                mergeToJSMap(ctx, map, it);
        else
            mergeToJSMap(ctx, map, value);
    }
    else {
        const jsKey = toJS.toJS(key, '', ctx);
        if (map instanceof Map) {
            map.set(jsKey, toJS.toJS(value, jsKey, ctx));
        }
        else if (map instanceof Set) {
            map.add(jsKey);
        }
        else {
            const stringKey = stringifyKey(key, jsKey, ctx);
            const jsValue = toJS.toJS(value, stringKey, ctx);
            if (stringKey in map)
                Object.defineProperty(map, stringKey, {
                    value: jsValue,
                    writable: true,
                    enumerable: true,
                    configurable: true
                });
            else
                map[stringKey] = jsValue;
        }
    }
    return map;
}
const isMergeKey = (key) => key === MERGE_KEY ||
    (Node.isScalar(key) &&
        key.value === MERGE_KEY &&
        (!key.type || key.type === Scalar.Scalar.PLAIN));
// If the value associated with a merge key is a single mapping node, each of
// its key/value pairs is inserted into the current mapping, unless the key
// already exists in it. If the value associated with the merge key is a
// sequence, then this sequence is expected to contain mapping nodes and each
// of these nodes is merged in turn according to its order in the sequence.
// Keys in mapping nodes earlier in the sequence override keys specified in
// later mapping nodes. -- http://yaml.org/type/merge.html
function mergeToJSMap(ctx, map, value) {
    const source = ctx && Node.isAlias(value) ? value.resolve(ctx.doc) : value;
    if (!Node.isMap(source))
        throw new Error('Merge sources must be maps or map aliases');
    const srcMap = source.toJSON(null, ctx, Map);
    for (const [key, value] of srcMap) {
        if (map instanceof Map) {
            if (!map.has(key))
                map.set(key, value);
        }
        else if (map instanceof Set) {
            map.add(key);
        }
        else if (!Object.prototype.hasOwnProperty.call(map, key)) {
            Object.defineProperty(map, key, {
                value,
                writable: true,
                enumerable: true,
                configurable: true
            });
        }
    }
    return map;
}
function stringifyKey(key, jsKey, ctx) {
    if (jsKey === null)
        return '';
    if (typeof jsKey !== 'object')
        return String(jsKey);
    if (Node.isNode(key) && ctx && ctx.doc) {
        const strCtx = stringify.createStringifyContext(ctx.doc, {});
        strCtx.anchors = new Set();
        for (const node of ctx.anchors.keys())
            strCtx.anchors.add(node.anchor);
        strCtx.inFlow = true;
        strCtx.inStringifyKey = true;
        const strKey = key.toString(strCtx);
        if (!ctx.mapKeyWarned) {
            let jsonStr = JSON.stringify(strKey);
            if (jsonStr.length > 40)
                jsonStr = jsonStr.substring(0, 36) + '..."';
            log.warn(ctx.doc.options.logLevel, `Keys with collection values will be stringified due to JS Object restrictions: ${jsonStr}. Set mapAsMap: true to use object keys.`);
            ctx.mapKeyWarned = true;
        }
        return strKey;
    }
    return JSON.stringify(jsKey);
}

exports.addPairToJSMap = addPairToJSMap;


/***/ }),

/***/ 9001:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var Node = __nccwpck_require__(240);

/**
 * Recursively convert any node or its contents to native JavaScript
 *
 * @param value - The input value
 * @param arg - If `value` defines a `toJSON()` method, use this
 *   as its first argument
 * @param ctx - Conversion context, originally set in Document#toJS(). If
 *   `{ keep: true }` is not set, output should be suitable for JSON
 *   stringification.
 */
function toJS(value, arg, ctx) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    if (Array.isArray(value))
        return value.map((v, i) => toJS(v, String(i), ctx));
    if (value && typeof value.toJSON === 'function') {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-call
        if (!ctx || !Node.hasAnchor(value))
            return value.toJSON(arg, ctx);
        const data = { aliasCount: 0, count: 1, res: undefined };
        ctx.anchors.set(value, data);
        ctx.onCreate = res => {
            data.res = res;
            delete ctx.onCreate;
        };
        const res = value.toJSON(arg, ctx);
        if (ctx.onCreate)
            ctx.onCreate(res);
        return res;
    }
    if (typeof value === 'bigint' && !ctx?.keep)
        return Number(value);
    return value;
}

exports.toJS = toJS;


/***/ }),

/***/ 7465:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var resolveBlockScalar = __nccwpck_require__(5504);
var resolveFlowScalar = __nccwpck_require__(5164);
var errors = __nccwpck_require__(2983);
var stringifyString = __nccwpck_require__(5917);

function resolveAsScalar(token, strict = true, onError) {
    if (token) {
        const _onError = (pos, code, message) => {
            const offset = typeof pos === 'number' ? pos : Array.isArray(pos) ? pos[0] : pos.offset;
            if (onError)
                onError(offset, code, message);
            else
                throw new errors.YAMLParseError([offset, offset + 1], code, message);
        };
        switch (token.type) {
            case 'scalar':
            case 'single-quoted-scalar':
            case 'double-quoted-scalar':
                return resolveFlowScalar.resolveFlowScalar(token, strict, _onError);
            case 'block-scalar':
                return resolveBlockScalar.resolveBlockScalar(token, strict, _onError);
        }
    }
    return null;
}
/**
 * Create a new scalar token with `value`
 *
 * Values that represent an actual string but may be parsed as a different type should use a `type` other than `'PLAIN'`,
 * as this function does not support any schema operations and won't check for such conflicts.
 *
 * @param value The string representation of the value, which will have its content properly indented.
 * @param context.end Comments and whitespace after the end of the value, or after the block scalar header. If undefined, a newline will be added.
 * @param context.implicitKey Being within an implicit key may affect the resolved type of the token's value.
 * @param context.indent The indent level of the token.
 * @param context.inFlow Is this scalar within a flow collection? This may affect the resolved type of the token's value.
 * @param context.offset The offset position of the token.
 * @param context.type The preferred type of the scalar token. If undefined, the previous type of the `token` will be used, defaulting to `'PLAIN'`.
 */
function createScalarToken(value, context) {
    const { implicitKey = false, indent, inFlow = false, offset = -1, type = 'PLAIN' } = context;
    const source = stringifyString.stringifyString({ type, value }, {
        implicitKey,
        indent: indent > 0 ? ' '.repeat(indent) : '',
        inFlow,
        options: { blockQuote: true, lineWidth: -1 }
    });
    const end = context.end ?? [
        { type: 'newline', offset: -1, indent, source: '\n' }
    ];
    switch (source[0]) {
        case '|':
        case '>': {
            const he = source.indexOf('\n');
            const head = source.substring(0, he);
            const body = source.substring(he + 1) + '\n';
            const props = [
                { type: 'block-scalar-header', offset, indent, source: head }
            ];
            if (!addEndtoBlockProps(props, end))
                props.push({ type: 'newline', offset: -1, indent, source: '\n' });
            return { type: 'block-scalar', offset, indent, props, source: body };
        }
        case '"':
            return { type: 'double-quoted-scalar', offset, indent, source, end };
        case "'":
            return { type: 'single-quoted-scalar', offset, indent, source, end };
        default:
            return { type: 'scalar', offset, indent, source, end };
    }
}
/**
 * Set the value of `token` to the given string `value`, overwriting any previous contents and type that it may have.
 *
 * Best efforts are made to retain any comments previously associated with the `token`,
 * though all contents within a collection's `items` will be overwritten.
 *
 * Values that represent an actual string but may be parsed as a different type should use a `type` other than `'PLAIN'`,
 * as this function does not support any schema operations and won't check for such conflicts.
 *
 * @param token Any token. If it does not include an `indent` value, the value will be stringified as if it were an implicit key.
 * @param value The string representation of the value, which will have its content properly indented.
 * @param context.afterKey In most cases, values after a key should have an additional level of indentation.
 * @param context.implicitKey Being within an implicit key may affect the resolved type of the token's value.
 * @param context.inFlow Being within a flow collection may affect the resolved type of the token's value.
 * @param context.type The preferred type of the scalar token. If undefined, the previous type of the `token` will be used, defaulting to `'PLAIN'`.
 */
function setScalarValue(token, value, context = {}) {
    let { afterKey = false, implicitKey = false, inFlow = false, type } = context;
    let indent = 'indent' in token ? token.indent : null;
    if (afterKey && typeof indent === 'number')
        indent += 2;
    if (!type)
        switch (token.type) {
            case 'single-quoted-scalar':
                type = 'QUOTE_SINGLE';
                break;
            case 'double-quoted-scalar':
                type = 'QUOTE_DOUBLE';
                break;
            case 'block-scalar': {
                const header = token.props[0];
                if (header.type !== 'block-scalar-header')
                    throw new Error('Invalid block scalar header');
                type = header.source[0] === '>' ? 'BLOCK_FOLDED' : 'BLOCK_LITERAL';
                break;
            }
            default:
                type = 'PLAIN';
        }
    const source = stringifyString.stringifyString({ type, value }, {
        implicitKey: implicitKey || indent === null,
        indent: indent !== null && indent > 0 ? ' '.repeat(indent) : '',
        inFlow,
        options: { blockQuote: true, lineWidth: -1 }
    });
    switch (source[0]) {
        case '|':
        case '>':
            setBlockScalarValue(token, source);
            break;
        case '"':
            setFlowScalarValue(token, source, 'double-quoted-scalar');
            break;
        case "'":
            setFlowScalarValue(token, source, 'single-quoted-scalar');
            break;
        default:
            setFlowScalarValue(token, source, 'scalar');
    }
}
function setBlockScalarValue(token, source) {
    const he = source.indexOf('\n');
    const head = source.substring(0, he);
    const body = source.substring(he + 1) + '\n';
    if (token.type === 'block-scalar') {
        const header = token.props[0];
        if (header.type !== 'block-scalar-header')
            throw new Error('Invalid block scalar header');
        header.source = head;
        token.source = body;
    }
    else {
        const { offset } = token;
        const indent = 'indent' in token ? token.indent : -1;
        const props = [
            { type: 'block-scalar-header', offset, indent, source: head }
        ];
        if (!addEndtoBlockProps(props, 'end' in token ? token.end : undefined))
            props.push({ type: 'newline', offset: -1, indent, source: '\n' });
        for (const key of Object.keys(token))
            if (key !== 'type' && key !== 'offset')
                delete token[key];
        Object.assign(token, { type: 'block-scalar', indent, props, source: body });
    }
}
/** @returns `true` if last token is a newline */
function addEndtoBlockProps(props, end) {
    if (end)
        for (const st of end)
            switch (st.type) {
                case 'space':
                case 'comment':
                    props.push(st);
                    break;
                case 'newline':
                    props.push(st);
                    return true;
            }
    return false;
}
function setFlowScalarValue(token, source, type) {
    switch (token.type) {
        case 'scalar':
        case 'double-quoted-scalar':
        case 'single-quoted-scalar':
            token.type = type;
            token.source = source;
            break;
        case 'block-scalar': {
            const end = token.props.slice(1);
            let oa = source.length;
            if (token.props[0].type === 'block-scalar-header')
                oa -= token.props[0].source.length;
            for (const tok of end)
                tok.offset += oa;
            delete token.props;
            Object.assign(token, { type, source, end });
            break;
        }
        case 'block-map':
        case 'block-seq': {
            const offset = token.offset + source.length;
            const nl = { type: 'newline', offset, indent: token.indent, source: '\n' };
            delete token.items;
            Object.assign(token, { type, source, end: [nl] });
            break;
        }
        default: {
            const indent = 'indent' in token ? token.indent : -1;
            const end = 'end' in token && Array.isArray(token.end)
                ? token.end.filter(st => st.type === 'space' ||
                    st.type === 'comment' ||
                    st.type === 'newline')
                : [];
            for (const key of Object.keys(token))
                if (key !== 'type' && key !== 'offset')
                    delete token[key];
            Object.assign(token, { type, indent, source, end });
        }
    }
}

exports.createScalarToken = createScalarToken;
exports.resolveAsScalar = resolveAsScalar;
exports.setScalarValue = setScalarValue;


/***/ }),

/***/ 3960:
/***/ ((__unused_webpack_module, exports) => {



/**
 * Stringify a CST document, token, or collection item
 *
 * Fair warning: This applies no validation whatsoever, and
 * simply concatenates the sources in their logical order.
 */
const stringify = (cst) => 'type' in cst ? stringifyToken(cst) : stringifyItem(cst);
function stringifyToken(token) {
    switch (token.type) {
        case 'block-scalar': {
            let res = '';
            for (const tok of token.props)
                res += stringifyToken(tok);
            return res + token.source;
        }
        case 'block-map':
        case 'block-seq': {
            let res = '';
            for (const item of token.items)
                res += stringifyItem(item);
            return res;
        }
        case 'flow-collection': {
            let res = token.start.source;
            for (const item of token.items)
                res += stringifyItem(item);
            for (const st of token.end)
                res += st.source;
            return res;
        }
        case 'document': {
            let res = stringifyItem(token);
            if (token.end)
                for (const st of token.end)
                    res += st.source;
            return res;
        }
        default: {
            let res = token.source;
            if ('end' in token && token.end)
                for (const st of token.end)
                    res += st.source;
            return res;
        }
    }
}
function stringifyItem({ start, key, sep, value }) {
    let res = '';
    for (const st of start)
        res += st.source;
    if (key)
        res += stringifyToken(key);
    if (sep)
        for (const st of sep)
            res += st.source;
    if (value)
        res += stringifyToken(value);
    return res;
}

exports.stringify = stringify;


/***/ }),

/***/ 7223:
/***/ ((__unused_webpack_module, exports) => {



const BREAK = Symbol('break visit');
const SKIP = Symbol('skip children');
const REMOVE = Symbol('remove item');
/**
 * Apply a visitor to a CST document or item.
 *
 * Walks through the tree (depth-first) starting from the root, calling a
 * `visitor` function with two arguments when entering each item:
 *   - `item`: The current item, which included the following members:
 *     - `start: SourceToken[]` – Source tokens before the key or value,
 *       possibly including its anchor or tag.
 *     - `key?: Token | null` – Set for pair values. May then be `null`, if
 *       the key before the `:` separator is empty.
 *     - `sep?: SourceToken[]` – Source tokens between the key and the value,
 *       which should include the `:` map value indicator if `value` is set.
 *     - `value?: Token` – The value of a sequence item, or of a map pair.
 *   - `path`: The steps from the root to the current node, as an array of
 *     `['key' | 'value', number]` tuples.
 *
 * The return value of the visitor may be used to control the traversal:
 *   - `undefined` (default): Do nothing and continue
 *   - `visit.SKIP`: Do not visit the children of this token, continue with
 *      next sibling
 *   - `visit.BREAK`: Terminate traversal completely
 *   - `visit.REMOVE`: Remove the current item, then continue with the next one
 *   - `number`: Set the index of the next step. This is useful especially if
 *     the index of the current token has changed.
 *   - `function`: Define the next visitor for this item. After the original
 *     visitor is called on item entry, next visitors are called after handling
 *     a non-empty `key` and when exiting the item.
 */
function visit(cst, visitor) {
    if ('type' in cst && cst.type === 'document')
        cst = { start: cst.start, value: cst.value };
    _visit(Object.freeze([]), cst, visitor);
}
// Without the `as symbol` casts, TS declares these in the `visit`
// namespace using `var`, but then complains about that because
// `unique symbol` must be `const`.
/** Terminate visit traversal completely */
visit.BREAK = BREAK;
/** Do not visit the children of the current item */
visit.SKIP = SKIP;
/** Remove the current item */
visit.REMOVE = REMOVE;
/** Find the item at `path` from `cst` as the root */
visit.itemAtPath = (cst, path) => {
    let item = cst;
    for (const [field, index] of path) {
        const tok = item?.[field];
        if (tok && 'items' in tok) {
            item = tok.items[index];
        }
        else
            return undefined;
    }
    return item;
};
/**
 * Get the immediate parent collection of the item at `path` from `cst` as the root.
 *
 * Throws an error if the collection is not found, which should never happen if the item itself exists.
 */
visit.parentCollection = (cst, path) => {
    const parent = visit.itemAtPath(cst, path.slice(0, -1));
    const field = path[path.length - 1][0];
    const coll = parent?.[field];
    if (coll && 'items' in coll)
        return coll;
    throw new Error('Parent collection not found');
};
function _visit(path, item, visitor) {
    let ctrl = visitor(item, path);
    if (typeof ctrl === 'symbol')
        return ctrl;
    for (const field of ['key', 'value']) {
        const token = item[field];
        if (token && 'items' in token) {
            for (let i = 0; i < token.items.length; ++i) {
                const ci = _visit(Object.freeze(path.concat([[field, i]])), token.items[i], visitor);
                if (typeof ci === 'number')
                    i = ci - 1;
                else if (ci === BREAK)
                    return BREAK;
                else if (ci === REMOVE) {
                    token.items.splice(i, 1);
                    i -= 1;
                }
            }
            if (typeof ctrl === 'function' && field === 'key')
                ctrl = ctrl(item, path);
        }
    }
    return typeof ctrl === 'function' ? ctrl(item, path) : ctrl;
}

exports.visit = visit;


/***/ }),

/***/ 1670:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var cstScalar = __nccwpck_require__(7465);
var cstStringify = __nccwpck_require__(3960);
var cstVisit = __nccwpck_require__(7223);

/** The byte order mark */
const BOM = '\u{FEFF}';
/** Start of doc-mode */
const DOCUMENT = '\x02'; // C0: Start of Text
/** Unexpected end of flow-mode */
const FLOW_END = '\x18'; // C0: Cancel
/** Next token is a scalar value */
const SCALAR = '\x1f'; // C0: Unit Separator
/** @returns `true` if `token` is a flow or block collection */
const isCollection = (token) => !!token && 'items' in token;
/** @returns `true` if `token` is a flow or block scalar; not an alias */
const isScalar = (token) => !!token &&
    (token.type === 'scalar' ||
        token.type === 'single-quoted-scalar' ||
        token.type === 'double-quoted-scalar' ||
        token.type === 'block-scalar');
/* istanbul ignore next */
/** Get a printable representation of a lexer token */
function prettyToken(token) {
    switch (token) {
        case BOM:
            return '<BOM>';
        case DOCUMENT:
            return '<DOC>';
        case FLOW_END:
            return '<FLOW_END>';
        case SCALAR:
            return '<SCALAR>';
        default:
            return JSON.stringify(token);
    }
}
/** Identify the type of a lexer token. May return `null` for unknown tokens. */
function tokenType(source) {
    switch (source) {
        case BOM:
            return 'byte-order-mark';
        case DOCUMENT:
            return 'doc-mode';
        case FLOW_END:
            return 'flow-error-end';
        case SCALAR:
            return 'scalar';
        case '---':
            return 'doc-start';
        case '...':
            return 'doc-end';
        case '':
        case '\n':
        case '\r\n':
            return 'newline';
        case '-':
            return 'seq-item-ind';
        case '?':
            return 'explicit-key-ind';
        case ':':
            return 'map-value-ind';
        case '{':
            return 'flow-map-start';
        case '}':
            return 'flow-map-end';
        case '[':
            return 'flow-seq-start';
        case ']':
            return 'flow-seq-end';
        case ',':
            return 'comma';
    }
    switch (source[0]) {
        case ' ':
        case '\t':
            return 'space';
        case '#':
            return 'comment';
        case '%':
            return 'directive-line';
        case '*':
            return 'alias';
        case '&':
            return 'anchor';
        case '!':
            return 'tag';
        case "'":
            return 'single-quoted-scalar';
        case '"':
            return 'double-quoted-scalar';
        case '|':
        case '>':
            return 'block-scalar-header';
    }
    return null;
}

exports.createScalarToken = cstScalar.createScalarToken;
exports.resolveAsScalar = cstScalar.resolveAsScalar;
exports.setScalarValue = cstScalar.setScalarValue;
exports.stringify = cstStringify.stringify;
exports.visit = cstVisit.visit;
exports.BOM = BOM;
exports.DOCUMENT = DOCUMENT;
exports.FLOW_END = FLOW_END;
exports.SCALAR = SCALAR;
exports.isCollection = isCollection;
exports.isScalar = isScalar;
exports.prettyToken = prettyToken;
exports.tokenType = tokenType;


/***/ }),

/***/ 8791:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var cst = __nccwpck_require__(1670);

/*
START -> stream

stream
  directive -> line-end -> stream
  indent + line-end -> stream
  [else] -> line-start

line-end
  comment -> line-end
  newline -> .
  input-end -> END

line-start
  doc-start -> doc
  doc-end -> stream
  [else] -> indent -> block-start

block-start
  seq-item-start -> block-start
  explicit-key-start -> block-start
  map-value-start -> block-start
  [else] -> doc

doc
  line-end -> line-start
  spaces -> doc
  anchor -> doc
  tag -> doc
  flow-start -> flow -> doc
  flow-end -> error -> doc
  seq-item-start -> error -> doc
  explicit-key-start -> error -> doc
  map-value-start -> doc
  alias -> doc
  quote-start -> quoted-scalar -> doc
  block-scalar-header -> line-end -> block-scalar(min) -> line-start
  [else] -> plain-scalar(false, min) -> doc

flow
  line-end -> flow
  spaces -> flow
  anchor -> flow
  tag -> flow
  flow-start -> flow -> flow
  flow-end -> .
  seq-item-start -> error -> flow
  explicit-key-start -> flow
  map-value-start -> flow
  alias -> flow
  quote-start -> quoted-scalar -> flow
  comma -> flow
  [else] -> plain-scalar(true, 0) -> flow

quoted-scalar
  quote-end -> .
  [else] -> quoted-scalar

block-scalar(min)
  newline + peek(indent < min) -> .
  [else] -> block-scalar(min)

plain-scalar(is-flow, min)
  scalar-end(is-flow) -> .
  peek(newline + (indent < min)) -> .
  [else] -> plain-scalar(min)
*/
function isEmpty(ch) {
    switch (ch) {
        case undefined:
        case ' ':
        case '\n':
        case '\r':
        case '\t':
            return true;
        default:
            return false;
    }
}
const hexDigits = '0123456789ABCDEFabcdef'.split('');
const tagChars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-#;/?:@&=+$_.!~*'()".split('');
const invalidFlowScalarChars = ',[]{}'.split('');
const invalidAnchorChars = ' ,[]{}\n\r\t'.split('');
const isNotAnchorChar = (ch) => !ch || invalidAnchorChars.includes(ch);
/**
 * Splits an input string into lexical tokens, i.e. smaller strings that are
 * easily identifiable by `tokens.tokenType()`.
 *
 * Lexing starts always in a "stream" context. Incomplete input may be buffered
 * until a complete token can be emitted.
 *
 * In addition to slices of the original input, the following control characters
 * may also be emitted:
 *
 * - `\x02` (Start of Text): A document starts with the next token
 * - `\x18` (Cancel): Unexpected end of flow-mode (indicates an error)
 * - `\x1f` (Unit Separator): Next token is a scalar value
 * - `\u{FEFF}` (Byte order mark): Emitted separately outside documents
 */
class Lexer {
    constructor() {
        /**
         * Flag indicating whether the end of the current buffer marks the end of
         * all input
         */
        this.atEnd = false;
        /**
         * Explicit indent set in block scalar header, as an offset from the current
         * minimum indent, so e.g. set to 1 from a header `|2+`. Set to -1 if not
         * explicitly set.
         */
        this.blockScalarIndent = -1;
        /**
         * Block scalars that include a + (keep) chomping indicator in their header
         * include trailing empty lines, which are otherwise excluded from the
         * scalar's contents.
         */
        this.blockScalarKeep = false;
        /** Current input */
        this.buffer = '';
        /**
         * Flag noting whether the map value indicator : can immediately follow this
         * node within a flow context.
         */
        this.flowKey = false;
        /** Count of surrounding flow collection levels. */
        this.flowLevel = 0;
        /**
         * Minimum level of indentation required for next lines to be parsed as a
         * part of the current scalar value.
         */
        this.indentNext = 0;
        /** Indentation level of the current line. */
        this.indentValue = 0;
        /** Position of the next \n character. */
        this.lineEndPos = null;
        /** Stores the state of the lexer if reaching the end of incpomplete input */
        this.next = null;
        /** A pointer to `buffer`; the current position of the lexer. */
        this.pos = 0;
    }
    /**
     * Generate YAML tokens from the `source` string. If `incomplete`,
     * a part of the last line may be left as a buffer for the next call.
     *
     * @returns A generator of lexical tokens
     */
    *lex(source, incomplete = false) {
        if (source) {
            this.buffer = this.buffer ? this.buffer + source : source;
            this.lineEndPos = null;
        }
        this.atEnd = !incomplete;
        let next = this.next ?? 'stream';
        while (next && (incomplete || this.hasChars(1)))
            next = yield* this.parseNext(next);
    }
    atLineEnd() {
        let i = this.pos;
        let ch = this.buffer[i];
        while (ch === ' ' || ch === '\t')
            ch = this.buffer[++i];
        if (!ch || ch === '#' || ch === '\n')
            return true;
        if (ch === '\r')
            return this.buffer[i + 1] === '\n';
        return false;
    }
    charAt(n) {
        return this.buffer[this.pos + n];
    }
    continueScalar(offset) {
        let ch = this.buffer[offset];
        if (this.indentNext > 0) {
            let indent = 0;
            while (ch === ' ')
                ch = this.buffer[++indent + offset];
            if (ch === '\r') {
                const next = this.buffer[indent + offset + 1];
                if (next === '\n' || (!next && !this.atEnd))
                    return offset + indent + 1;
            }
            return ch === '\n' || indent >= this.indentNext || (!ch && !this.atEnd)
                ? offset + indent
                : -1;
        }
        if (ch === '-' || ch === '.') {
            const dt = this.buffer.substr(offset, 3);
            if ((dt === '---' || dt === '...') && isEmpty(this.buffer[offset + 3]))
                return -1;
        }
        return offset;
    }
    getLine() {
        let end = this.lineEndPos;
        if (typeof end !== 'number' || (end !== -1 && end < this.pos)) {
            end = this.buffer.indexOf('\n', this.pos);
            this.lineEndPos = end;
        }
        if (end === -1)
            return this.atEnd ? this.buffer.substring(this.pos) : null;
        if (this.buffer[end - 1] === '\r')
            end -= 1;
        return this.buffer.substring(this.pos, end);
    }
    hasChars(n) {
        return this.pos + n <= this.buffer.length;
    }
    setNext(state) {
        this.buffer = this.buffer.substring(this.pos);
        this.pos = 0;
        this.lineEndPos = null;
        this.next = state;
        return null;
    }
    peek(n) {
        return this.buffer.substr(this.pos, n);
    }
    *parseNext(next) {
        switch (next) {
            case 'stream':
                return yield* this.parseStream();
            case 'line-start':
                return yield* this.parseLineStart();
            case 'block-start':
                return yield* this.parseBlockStart();
            case 'doc':
                return yield* this.parseDocument();
            case 'flow':
                return yield* this.parseFlowCollection();
            case 'quoted-scalar':
                return yield* this.parseQuotedScalar();
            case 'block-scalar':
                return yield* this.parseBlockScalar();
            case 'plain-scalar':
                return yield* this.parsePlainScalar();
        }
    }
    *parseStream() {
        let line = this.getLine();
        if (line === null)
            return this.setNext('stream');
        if (line[0] === cst.BOM) {
            yield* this.pushCount(1);
            line = line.substring(1);
        }
        if (line[0] === '%') {
            let dirEnd = line.length;
            const cs = line.indexOf('#');
            if (cs !== -1) {
                const ch = line[cs - 1];
                if (ch === ' ' || ch === '\t')
                    dirEnd = cs - 1;
            }
            while (true) {
                const ch = line[dirEnd - 1];
                if (ch === ' ' || ch === '\t')
                    dirEnd -= 1;
                else
                    break;
            }
            const n = (yield* this.pushCount(dirEnd)) + (yield* this.pushSpaces(true));
            yield* this.pushCount(line.length - n); // possible comment
            this.pushNewline();
            return 'stream';
        }
        if (this.atLineEnd()) {
            const sp = yield* this.pushSpaces(true);
            yield* this.pushCount(line.length - sp);
            yield* this.pushNewline();
            return 'stream';
        }
        yield cst.DOCUMENT;
        return yield* this.parseLineStart();
    }
    *parseLineStart() {
        const ch = this.charAt(0);
        if (!ch && !this.atEnd)
            return this.setNext('line-start');
        if (ch === '-' || ch === '.') {
            if (!this.atEnd && !this.hasChars(4))
                return this.setNext('line-start');
            const s = this.peek(3);
            if (s === '---' && isEmpty(this.charAt(3))) {
                yield* this.pushCount(3);
                this.indentValue = 0;
                this.indentNext = 0;
                return 'doc';
            }
            else if (s === '...' && isEmpty(this.charAt(3))) {
                yield* this.pushCount(3);
                return 'stream';
            }
        }
        this.indentValue = yield* this.pushSpaces(false);
        if (this.indentNext > this.indentValue && !isEmpty(this.charAt(1)))
            this.indentNext = this.indentValue;
        return yield* this.parseBlockStart();
    }
    *parseBlockStart() {
        const [ch0, ch1] = this.peek(2);
        if (!ch1 && !this.atEnd)
            return this.setNext('block-start');
        if ((ch0 === '-' || ch0 === '?' || ch0 === ':') && isEmpty(ch1)) {
            const n = (yield* this.pushCount(1)) + (yield* this.pushSpaces(true));
            this.indentNext = this.indentValue + 1;
            this.indentValue += n;
            return yield* this.parseBlockStart();
        }
        return 'doc';
    }
    *parseDocument() {
        yield* this.pushSpaces(true);
        const line = this.getLine();
        if (line === null)
            return this.setNext('doc');
        let n = yield* this.pushIndicators();
        switch (line[n]) {
            case '#':
                yield* this.pushCount(line.length - n);
            // fallthrough
            case undefined:
                yield* this.pushNewline();
                return yield* this.parseLineStart();
            case '{':
            case '[':
                yield* this.pushCount(1);
                this.flowKey = false;
                this.flowLevel = 1;
                return 'flow';
            case '}':
            case ']':
                // this is an error
                yield* this.pushCount(1);
                return 'doc';
            case '*':
                yield* this.pushUntil(isNotAnchorChar);
                return 'doc';
            case '"':
            case "'":
                return yield* this.parseQuotedScalar();
            case '|':
            case '>':
                n += yield* this.parseBlockScalarHeader();
                n += yield* this.pushSpaces(true);
                yield* this.pushCount(line.length - n);
                yield* this.pushNewline();
                return yield* this.parseBlockScalar();
            default:
                return yield* this.parsePlainScalar();
        }
    }
    *parseFlowCollection() {
        let nl, sp;
        let indent = -1;
        do {
            nl = yield* this.pushNewline();
            if (nl > 0) {
                sp = yield* this.pushSpaces(false);
                this.indentValue = indent = sp;
            }
            else {
                sp = 0;
            }
            sp += yield* this.pushSpaces(true);
        } while (nl + sp > 0);
        const line = this.getLine();
        if (line === null)
            return this.setNext('flow');
        if ((indent !== -1 && indent < this.indentNext && line[0] !== '#') ||
            (indent === 0 &&
                (line.startsWith('---') || line.startsWith('...')) &&
                isEmpty(line[3]))) {
            // Allowing for the terminal ] or } at the same (rather than greater)
            // indent level as the initial [ or { is technically invalid, but
            // failing here would be surprising to users.
            const atFlowEndMarker = indent === this.indentNext - 1 &&
                this.flowLevel === 1 &&
                (line[0] === ']' || line[0] === '}');
            if (!atFlowEndMarker) {
                // this is an error
                this.flowLevel = 0;
                yield cst.FLOW_END;
                return yield* this.parseLineStart();
            }
        }
        let n = 0;
        while (line[n] === ',') {
            n += yield* this.pushCount(1);
            n += yield* this.pushSpaces(true);
            this.flowKey = false;
        }
        n += yield* this.pushIndicators();
        switch (line[n]) {
            case undefined:
                return 'flow';
            case '#':
                yield* this.pushCount(line.length - n);
                return 'flow';
            case '{':
            case '[':
                yield* this.pushCount(1);
                this.flowKey = false;
                this.flowLevel += 1;
                return 'flow';
            case '}':
            case ']':
                yield* this.pushCount(1);
                this.flowKey = true;
                this.flowLevel -= 1;
                return this.flowLevel ? 'flow' : 'doc';
            case '*':
                yield* this.pushUntil(isNotAnchorChar);
                return 'flow';
            case '"':
            case "'":
                this.flowKey = true;
                return yield* this.parseQuotedScalar();
            case ':': {
                const next = this.charAt(1);
                if (this.flowKey || isEmpty(next) || next === ',') {
                    this.flowKey = false;
                    yield* this.pushCount(1);
                    yield* this.pushSpaces(true);
                    return 'flow';
                }
            }
            // fallthrough
            default:
                this.flowKey = false;
                return yield* this.parsePlainScalar();
        }
    }
    *parseQuotedScalar() {
        const quote = this.charAt(0);
        let end = this.buffer.indexOf(quote, this.pos + 1);
        if (quote === "'") {
            while (end !== -1 && this.buffer[end + 1] === "'")
                end = this.buffer.indexOf("'", end + 2);
        }
        else {
            // double-quote
            while (end !== -1) {
                let n = 0;
                while (this.buffer[end - 1 - n] === '\\')
                    n += 1;
                if (n % 2 === 0)
                    break;
                end = this.buffer.indexOf('"', end + 1);
            }
        }
        // Only looking for newlines within the quotes
        const qb = this.buffer.substring(0, end);
        let nl = qb.indexOf('\n', this.pos);
        if (nl !== -1) {
            while (nl !== -1) {
                const cs = this.continueScalar(nl + 1);
                if (cs === -1)
                    break;
                nl = qb.indexOf('\n', cs);
            }
            if (nl !== -1) {
                // this is an error caused by an unexpected unindent
                end = nl - (qb[nl - 1] === '\r' ? 2 : 1);
            }
        }
        if (end === -1) {
            if (!this.atEnd)
                return this.setNext('quoted-scalar');
            end = this.buffer.length;
        }
        yield* this.pushToIndex(end + 1, false);
        return this.flowLevel ? 'flow' : 'doc';
    }
    *parseBlockScalarHeader() {
        this.blockScalarIndent = -1;
        this.blockScalarKeep = false;
        let i = this.pos;
        while (true) {
            const ch = this.buffer[++i];
            if (ch === '+')
                this.blockScalarKeep = true;
            else if (ch > '0' && ch <= '9')
                this.blockScalarIndent = Number(ch) - 1;
            else if (ch !== '-')
                break;
        }
        return yield* this.pushUntil(ch => isEmpty(ch) || ch === '#');
    }
    *parseBlockScalar() {
        let nl = this.pos - 1; // may be -1 if this.pos === 0
        let indent = 0;
        let ch;
        loop: for (let i = this.pos; (ch = this.buffer[i]); ++i) {
            switch (ch) {
                case ' ':
                    indent += 1;
                    break;
                case '\n':
                    nl = i;
                    indent = 0;
                    break;
                case '\r': {
                    const next = this.buffer[i + 1];
                    if (!next && !this.atEnd)
                        return this.setNext('block-scalar');
                    if (next === '\n')
                        break;
                } // fallthrough
                default:
                    break loop;
            }
        }
        if (!ch && !this.atEnd)
            return this.setNext('block-scalar');
        if (indent >= this.indentNext) {
            if (this.blockScalarIndent === -1)
                this.indentNext = indent;
            else
                this.indentNext += this.blockScalarIndent;
            do {
                const cs = this.continueScalar(nl + 1);
                if (cs === -1)
                    break;
                nl = this.buffer.indexOf('\n', cs);
            } while (nl !== -1);
            if (nl === -1) {
                if (!this.atEnd)
                    return this.setNext('block-scalar');
                nl = this.buffer.length;
            }
        }
        if (!this.blockScalarKeep) {
            do {
                let i = nl - 1;
                let ch = this.buffer[i];
                if (ch === '\r')
                    ch = this.buffer[--i];
                const lastChar = i; // Drop the line if last char not more indented
                while (ch === ' ' || ch === '\t')
                    ch = this.buffer[--i];
                if (ch === '\n' && i >= this.pos && i + 1 + indent > lastChar)
                    nl = i;
                else
                    break;
            } while (true);
        }
        yield cst.SCALAR;
        yield* this.pushToIndex(nl + 1, true);
        return yield* this.parseLineStart();
    }
    *parsePlainScalar() {
        const inFlow = this.flowLevel > 0;
        let end = this.pos - 1;
        let i = this.pos - 1;
        let ch;
        while ((ch = this.buffer[++i])) {
            if (ch === ':') {
                const next = this.buffer[i + 1];
                if (isEmpty(next) || (inFlow && next === ','))
                    break;
                end = i;
            }
            else if (isEmpty(ch)) {
                let next = this.buffer[i + 1];
                if (ch === '\r') {
                    if (next === '\n') {
                        i += 1;
                        ch = '\n';
                        next = this.buffer[i + 1];
                    }
                    else
                        end = i;
                }
                if (next === '#' || (inFlow && invalidFlowScalarChars.includes(next)))
                    break;
                if (ch === '\n') {
                    const cs = this.continueScalar(i + 1);
                    if (cs === -1)
                        break;
                    i = Math.max(i, cs - 2); // to advance, but still account for ' #'
                }
            }
            else {
                if (inFlow && invalidFlowScalarChars.includes(ch))
                    break;
                end = i;
            }
        }
        if (!ch && !this.atEnd)
            return this.setNext('plain-scalar');
        yield cst.SCALAR;
        yield* this.pushToIndex(end + 1, true);
        return inFlow ? 'flow' : 'doc';
    }
    *pushCount(n) {
        if (n > 0) {
            yield this.buffer.substr(this.pos, n);
            this.pos += n;
            return n;
        }
        return 0;
    }
    *pushToIndex(i, allowEmpty) {
        const s = this.buffer.slice(this.pos, i);
        if (s) {
            yield s;
            this.pos += s.length;
            return s.length;
        }
        else if (allowEmpty)
            yield '';
        return 0;
    }
    *pushIndicators() {
        switch (this.charAt(0)) {
            case '!':
                return ((yield* this.pushTag()) +
                    (yield* this.pushSpaces(true)) +
                    (yield* this.pushIndicators()));
            case '&':
                return ((yield* this.pushUntil(isNotAnchorChar)) +
                    (yield* this.pushSpaces(true)) +
                    (yield* this.pushIndicators()));
            case '-': // this is an error
            case '?': // this is an error outside flow collections
            case ':': {
                const inFlow = this.flowLevel > 0;
                const ch1 = this.charAt(1);
                if (isEmpty(ch1) || (inFlow && invalidFlowScalarChars.includes(ch1))) {
                    if (!inFlow)
                        this.indentNext = this.indentValue + 1;
                    else if (this.flowKey)
                        this.flowKey = false;
                    return ((yield* this.pushCount(1)) +
                        (yield* this.pushSpaces(true)) +
                        (yield* this.pushIndicators()));
                }
            }
        }
        return 0;
    }
    *pushTag() {
        if (this.charAt(1) === '<') {
            let i = this.pos + 2;
            let ch = this.buffer[i];
            while (!isEmpty(ch) && ch !== '>')
                ch = this.buffer[++i];
            return yield* this.pushToIndex(ch === '>' ? i + 1 : i, false);
        }
        else {
            let i = this.pos + 1;
            let ch = this.buffer[i];
            while (ch) {
                if (tagChars.includes(ch))
                    ch = this.buffer[++i];
                else if (ch === '%' &&
                    hexDigits.includes(this.buffer[i + 1]) &&
                    hexDigits.includes(this.buffer[i + 2])) {
                    ch = this.buffer[(i += 3)];
                }
                else
                    break;
            }
            return yield* this.pushToIndex(i, false);
        }
    }
    *pushNewline() {
        const ch = this.buffer[this.pos];
        if (ch === '\n')
            return yield* this.pushCount(1);
        else if (ch === '\r' && this.charAt(1) === '\n')
            return yield* this.pushCount(2);
        else
            return 0;
    }
    *pushSpaces(allowTabs) {
        let i = this.pos - 1;
        let ch;
        do {
            ch = this.buffer[++i];
        } while (ch === ' ' || (allowTabs && ch === '\t'));
        const n = i - this.pos;
        if (n > 0) {
            yield this.buffer.substr(this.pos, n);
            this.pos = i;
        }
        return n;
    }
    *pushUntil(test) {
        let i = this.pos;
        let ch = this.buffer[i];
        while (!test(ch))
            ch = this.buffer[++i];
        return yield* this.pushToIndex(i, false);
    }
}

exports.Lexer = Lexer;


/***/ }),

/***/ 7978:
/***/ ((__unused_webpack_module, exports) => {



/**
 * Tracks newlines during parsing in order to provide an efficient API for
 * determining the one-indexed `{ line, col }` position for any offset
 * within the input.
 */
class LineCounter {
    constructor() {
        this.lineStarts = [];
        /**
         * Should be called in ascending order. Otherwise, call
         * `lineCounter.lineStarts.sort()` before calling `linePos()`.
         */
        this.addNewLine = (offset) => this.lineStarts.push(offset);
        /**
         * Performs a binary search and returns the 1-indexed { line, col }
         * position of `offset`. If `line === 0`, `addNewLine` has never been
         * called or `offset` is before the first known newline.
         */
        this.linePos = (offset) => {
            let low = 0;
            let high = this.lineStarts.length;
            while (low < high) {
                const mid = (low + high) >> 1; // Math.floor((low + high) / 2)
                if (this.lineStarts[mid] < offset)
                    low = mid + 1;
                else
                    high = mid;
            }
            if (this.lineStarts[low] === offset)
                return { line: low + 1, col: 1 };
            if (low === 0)
                return { line: 0, col: offset };
            const start = this.lineStarts[low - 1];
            return { line: low, col: offset - start + 1 };
        };
    }
}

exports.LineCounter = LineCounter;


/***/ }),

/***/ 272:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var cst = __nccwpck_require__(1670);
var lexer = __nccwpck_require__(8791);

function includesToken(list, type) {
    for (let i = 0; i < list.length; ++i)
        if (list[i].type === type)
            return true;
    return false;
}
function findNonEmptyIndex(list) {
    for (let i = 0; i < list.length; ++i) {
        switch (list[i].type) {
            case 'space':
            case 'comment':
            case 'newline':
                break;
            default:
                return i;
        }
    }
    return -1;
}
function isFlowToken(token) {
    switch (token?.type) {
        case 'alias':
        case 'scalar':
        case 'single-quoted-scalar':
        case 'double-quoted-scalar':
        case 'flow-collection':
            return true;
        default:
            return false;
    }
}
function getPrevProps(parent) {
    switch (parent.type) {
        case 'document':
            return parent.start;
        case 'block-map': {
            const it = parent.items[parent.items.length - 1];
            return it.sep ?? it.start;
        }
        case 'block-seq':
            return parent.items[parent.items.length - 1].start;
        /* istanbul ignore next should not happen */
        default:
            return [];
    }
}
/** Note: May modify input array */
function getFirstKeyStartProps(prev) {
    if (prev.length === 0)
        return [];
    let i = prev.length;
    loop: while (--i >= 0) {
        switch (prev[i].type) {
            case 'doc-start':
            case 'explicit-key-ind':
            case 'map-value-ind':
            case 'seq-item-ind':
            case 'newline':
                break loop;
        }
    }
    while (prev[++i]?.type === 'space') {
        /* loop */
    }
    return prev.splice(i, prev.length);
}
function fixFlowSeqItems(fc) {
    if (fc.start.type === 'flow-seq-start') {
        for (const it of fc.items) {
            if (it.sep &&
                !it.value &&
                !includesToken(it.start, 'explicit-key-ind') &&
                !includesToken(it.sep, 'map-value-ind')) {
                if (it.key)
                    it.value = it.key;
                delete it.key;
                if (isFlowToken(it.value)) {
                    if (it.value.end)
                        Array.prototype.push.apply(it.value.end, it.sep);
                    else
                        it.value.end = it.sep;
                }
                else
                    Array.prototype.push.apply(it.start, it.sep);
                delete it.sep;
            }
        }
    }
}
/**
 * A YAML concrete syntax tree (CST) parser
 *
 * ```ts
 * const src: string = ...
 * for (const token of new Parser().parse(src)) {
 *   // token: Token
 * }
 * ```
 *
 * To use the parser with a user-provided lexer:
 *
 * ```ts
 * function* parse(source: string, lexer: Lexer) {
 *   const parser = new Parser()
 *   for (const lexeme of lexer.lex(source))
 *     yield* parser.next(lexeme)
 *   yield* parser.end()
 * }
 *
 * const src: string = ...
 * const lexer = new Lexer()
 * for (const token of parse(src, lexer)) {
 *   // token: Token
 * }
 * ```
 */
class Parser {
    /**
     * @param onNewLine - If defined, called separately with the start position of
     *   each new line (in `parse()`, including the start of input).
     */
    constructor(onNewLine) {
        /** If true, space and sequence indicators count as indentation */
        this.atNewLine = true;
        /** If true, next token is a scalar value */
        this.atScalar = false;
        /** Current indentation level */
        this.indent = 0;
        /** Current offset since the start of parsing */
        this.offset = 0;
        /** On the same line with a block map key */
        this.onKeyLine = false;
        /** Top indicates the node that's currently being built */
        this.stack = [];
        /** The source of the current token, set in parse() */
        this.source = '';
        /** The type of the current token, set in parse() */
        this.type = '';
        // Must be defined after `next()`
        this.lexer = new lexer.Lexer();
        this.onNewLine = onNewLine;
    }
    /**
     * Parse `source` as a YAML stream.
     * If `incomplete`, a part of the last line may be left as a buffer for the next call.
     *
     * Errors are not thrown, but yielded as `{ type: 'error', message }` tokens.
     *
     * @returns A generator of tokens representing each directive, document, and other structure.
     */
    *parse(source, incomplete = false) {
        if (this.onNewLine && this.offset === 0)
            this.onNewLine(0);
        for (const lexeme of this.lexer.lex(source, incomplete))
            yield* this.next(lexeme);
        if (!incomplete)
            yield* this.end();
    }
    /**
     * Advance the parser by the `source` of one lexical token.
     */
    *next(source) {
        this.source = source;
        if (process.env.LOG_TOKENS)
            console.log('|', cst.prettyToken(source));
        if (this.atScalar) {
            this.atScalar = false;
            yield* this.step();
            this.offset += source.length;
            return;
        }
        const type = cst.tokenType(source);
        if (!type) {
            const message = `Not a YAML token: ${source}`;
            yield* this.pop({ type: 'error', offset: this.offset, message, source });
            this.offset += source.length;
        }
        else if (type === 'scalar') {
            this.atNewLine = false;
            this.atScalar = true;
            this.type = 'scalar';
        }
        else {
            this.type = type;
            yield* this.step();
            switch (type) {
                case 'newline':
                    this.atNewLine = true;
                    this.indent = 0;
                    if (this.onNewLine)
                        this.onNewLine(this.offset + source.length);
                    break;
                case 'space':
                    if (this.atNewLine && source[0] === ' ')
                        this.indent += source.length;
                    break;
                case 'explicit-key-ind':
                case 'map-value-ind':
                case 'seq-item-ind':
                    if (this.atNewLine)
                        this.indent += source.length;
                    break;
                case 'doc-mode':
                case 'flow-error-end':
                    return;
                default:
                    this.atNewLine = false;
            }
            this.offset += source.length;
        }
    }
    /** Call at end of input to push out any remaining constructions */
    *end() {
        while (this.stack.length > 0)
            yield* this.pop();
    }
    get sourceToken() {
        const st = {
            type: this.type,
            offset: this.offset,
            indent: this.indent,
            source: this.source
        };
        return st;
    }
    *step() {
        const top = this.peek(1);
        if (this.type === 'doc-end' && (!top || top.type !== 'doc-end')) {
            while (this.stack.length > 0)
                yield* this.pop();
            this.stack.push({
                type: 'doc-end',
                offset: this.offset,
                source: this.source
            });
            return;
        }
        if (!top)
            return yield* this.stream();
        switch (top.type) {
            case 'document':
                return yield* this.document(top);
            case 'alias':
            case 'scalar':
            case 'single-quoted-scalar':
            case 'double-quoted-scalar':
                return yield* this.scalar(top);
            case 'block-scalar':
                return yield* this.blockScalar(top);
            case 'block-map':
                return yield* this.blockMap(top);
            case 'block-seq':
                return yield* this.blockSequence(top);
            case 'flow-collection':
                return yield* this.flowCollection(top);
            case 'doc-end':
                return yield* this.documentEnd(top);
        }
        /* istanbul ignore next should not happen */
        yield* this.pop();
    }
    peek(n) {
        return this.stack[this.stack.length - n];
    }
    *pop(error) {
        const token = error ?? this.stack.pop();
        /* istanbul ignore if should not happen */
        if (!token) {
            const message = 'Tried to pop an empty stack';
            yield { type: 'error', offset: this.offset, source: '', message };
        }
        else if (this.stack.length === 0) {
            yield token;
        }
        else {
            const top = this.peek(1);
            if (token.type === 'block-scalar') {
                // Block scalars use their parent rather than header indent
                token.indent = 'indent' in top ? top.indent : 0;
            }
            else if (token.type === 'flow-collection' && top.type === 'document') {
                // Ignore all indent for top-level flow collections
                token.indent = 0;
            }
            if (token.type === 'flow-collection')
                fixFlowSeqItems(token);
            switch (top.type) {
                case 'document':
                    top.value = token;
                    break;
                case 'block-scalar':
                    top.props.push(token); // error
                    break;
                case 'block-map': {
                    const it = top.items[top.items.length - 1];
                    if (it.value) {
                        top.items.push({ start: [], key: token, sep: [] });
                        this.onKeyLine = true;
                        return;
                    }
                    else if (it.sep) {
                        it.value = token;
                    }
                    else {
                        Object.assign(it, { key: token, sep: [] });
                        this.onKeyLine = !includesToken(it.start, 'explicit-key-ind');
                        return;
                    }
                    break;
                }
                case 'block-seq': {
                    const it = top.items[top.items.length - 1];
                    if (it.value)
                        top.items.push({ start: [], value: token });
                    else
                        it.value = token;
                    break;
                }
                case 'flow-collection': {
                    const it = top.items[top.items.length - 1];
                    if (!it || it.value)
                        top.items.push({ start: [], key: token, sep: [] });
                    else if (it.sep)
                        it.value = token;
                    else
                        Object.assign(it, { key: token, sep: [] });
                    return;
                }
                /* istanbul ignore next should not happen */
                default:
                    yield* this.pop();
                    yield* this.pop(token);
            }
            if ((top.type === 'document' ||
                top.type === 'block-map' ||
                top.type === 'block-seq') &&
                (token.type === 'block-map' || token.type === 'block-seq')) {
                const last = token.items[token.items.length - 1];
                if (last &&
                    !last.sep &&
                    !last.value &&
                    last.start.length > 0 &&
                    findNonEmptyIndex(last.start) === -1 &&
                    (token.indent === 0 ||
                        last.start.every(st => st.type !== 'comment' || st.indent < token.indent))) {
                    if (top.type === 'document')
                        top.end = last.start;
                    else
                        top.items.push({ start: last.start });
                    token.items.splice(-1, 1);
                }
            }
        }
    }
    *stream() {
        switch (this.type) {
            case 'directive-line':
                yield { type: 'directive', offset: this.offset, source: this.source };
                return;
            case 'byte-order-mark':
            case 'space':
            case 'comment':
            case 'newline':
                yield this.sourceToken;
                return;
            case 'doc-mode':
            case 'doc-start': {
                const doc = {
                    type: 'document',
                    offset: this.offset,
                    start: []
                };
                if (this.type === 'doc-start')
                    doc.start.push(this.sourceToken);
                this.stack.push(doc);
                return;
            }
        }
        yield {
            type: 'error',
            offset: this.offset,
            message: `Unexpected ${this.type} token in YAML stream`,
            source: this.source
        };
    }
    *document(doc) {
        if (doc.value)
            return yield* this.lineEnd(doc);
        switch (this.type) {
            case 'doc-start': {
                if (findNonEmptyIndex(doc.start) !== -1) {
                    yield* this.pop();
                    yield* this.step();
                }
                else
                    doc.start.push(this.sourceToken);
                return;
            }
            case 'anchor':
            case 'tag':
            case 'space':
            case 'comment':
            case 'newline':
                doc.start.push(this.sourceToken);
                return;
        }
        const bv = this.startBlockValue(doc);
        if (bv)
            this.stack.push(bv);
        else {
            yield {
                type: 'error',
                offset: this.offset,
                message: `Unexpected ${this.type} token in YAML document`,
                source: this.source
            };
        }
    }
    *scalar(scalar) {
        if (this.type === 'map-value-ind') {
            const prev = getPrevProps(this.peek(2));
            const start = getFirstKeyStartProps(prev);
            let sep;
            if (scalar.end) {
                sep = scalar.end;
                sep.push(this.sourceToken);
                delete scalar.end;
            }
            else
                sep = [this.sourceToken];
            const map = {
                type: 'block-map',
                offset: scalar.offset,
                indent: scalar.indent,
                items: [{ start, key: scalar, sep }]
            };
            this.onKeyLine = true;
            this.stack[this.stack.length - 1] = map;
        }
        else
            yield* this.lineEnd(scalar);
    }
    *blockScalar(scalar) {
        switch (this.type) {
            case 'space':
            case 'comment':
            case 'newline':
                scalar.props.push(this.sourceToken);
                return;
            case 'scalar':
                scalar.source = this.source;
                // block-scalar source includes trailing newline
                this.atNewLine = true;
                this.indent = 0;
                if (this.onNewLine) {
                    let nl = this.source.indexOf('\n') + 1;
                    while (nl !== 0) {
                        this.onNewLine(this.offset + nl);
                        nl = this.source.indexOf('\n', nl) + 1;
                    }
                }
                yield* this.pop();
                break;
            /* istanbul ignore next should not happen */
            default:
                yield* this.pop();
                yield* this.step();
        }
    }
    *blockMap(map) {
        const it = map.items[map.items.length - 1];
        // it.sep is true-ish if pair already has key or : separator
        switch (this.type) {
            case 'newline':
                this.onKeyLine = false;
                if (it.value) {
                    const end = 'end' in it.value ? it.value.end : undefined;
                    const last = Array.isArray(end) ? end[end.length - 1] : undefined;
                    if (last?.type === 'comment')
                        end?.push(this.sourceToken);
                    else
                        map.items.push({ start: [this.sourceToken] });
                }
                else if (it.sep) {
                    it.sep.push(this.sourceToken);
                }
                else {
                    it.start.push(this.sourceToken);
                }
                return;
            case 'space':
            case 'comment':
                if (it.value) {
                    map.items.push({ start: [this.sourceToken] });
                }
                else if (it.sep) {
                    it.sep.push(this.sourceToken);
                }
                else {
                    if (this.atIndentedComment(it.start, map.indent)) {
                        const prev = map.items[map.items.length - 2];
                        const end = prev?.value?.end;
                        if (Array.isArray(end)) {
                            Array.prototype.push.apply(end, it.start);
                            end.push(this.sourceToken);
                            map.items.pop();
                            return;
                        }
                    }
                    it.start.push(this.sourceToken);
                }
                return;
        }
        if (this.indent >= map.indent) {
            const atNextItem = !this.onKeyLine && this.indent === map.indent && it.sep;
            // For empty nodes, assign newline-separated not indented empty tokens to following node
            let start = [];
            if (atNextItem && it.sep && !it.value) {
                const nl = [];
                for (let i = 0; i < it.sep.length; ++i) {
                    const st = it.sep[i];
                    switch (st.type) {
                        case 'newline':
                            nl.push(i);
                            break;
                        case 'space':
                            break;
                        case 'comment':
                            if (st.indent > map.indent)
                                nl.length = 0;
                            break;
                        default:
                            nl.length = 0;
                    }
                }
                if (nl.length >= 2)
                    start = it.sep.splice(nl[1]);
            }
            switch (this.type) {
                case 'anchor':
                case 'tag':
                    if (atNextItem || it.value) {
                        start.push(this.sourceToken);
                        map.items.push({ start });
                        this.onKeyLine = true;
                    }
                    else if (it.sep) {
                        it.sep.push(this.sourceToken);
                    }
                    else {
                        it.start.push(this.sourceToken);
                    }
                    return;
                case 'explicit-key-ind':
                    if (!it.sep && !includesToken(it.start, 'explicit-key-ind')) {
                        it.start.push(this.sourceToken);
                    }
                    else if (atNextItem || it.value) {
                        start.push(this.sourceToken);
                        map.items.push({ start });
                    }
                    else {
                        this.stack.push({
                            type: 'block-map',
                            offset: this.offset,
                            indent: this.indent,
                            items: [{ start: [this.sourceToken] }]
                        });
                    }
                    this.onKeyLine = true;
                    return;
                case 'map-value-ind':
                    if (includesToken(it.start, 'explicit-key-ind')) {
                        if (!it.sep) {
                            if (includesToken(it.start, 'newline')) {
                                Object.assign(it, { key: null, sep: [this.sourceToken] });
                            }
                            else {
                                const start = getFirstKeyStartProps(it.start);
                                this.stack.push({
                                    type: 'block-map',
                                    offset: this.offset,
                                    indent: this.indent,
                                    items: [{ start, key: null, sep: [this.sourceToken] }]
                                });
                            }
                        }
                        else if (it.value) {
                            map.items.push({ start: [], key: null, sep: [this.sourceToken] });
                        }
                        else if (includesToken(it.sep, 'map-value-ind')) {
                            this.stack.push({
                                type: 'block-map',
                                offset: this.offset,
                                indent: this.indent,
                                items: [{ start, key: null, sep: [this.sourceToken] }]
                            });
                        }
                        else if (isFlowToken(it.key) &&
                            !includesToken(it.sep, 'newline')) {
                            const start = getFirstKeyStartProps(it.start);
                            const key = it.key;
                            const sep = it.sep;
                            sep.push(this.sourceToken);
                            // @ts-expect-error type guard is wrong here
                            delete it.key, delete it.sep;
                            this.stack.push({
                                type: 'block-map',
                                offset: this.offset,
                                indent: this.indent,
                                items: [{ start, key, sep }]
                            });
                        }
                        else if (start.length > 0) {
                            // Not actually at next item
                            it.sep = it.sep.concat(start, this.sourceToken);
                        }
                        else {
                            it.sep.push(this.sourceToken);
                        }
                    }
                    else {
                        if (!it.sep) {
                            Object.assign(it, { key: null, sep: [this.sourceToken] });
                        }
                        else if (it.value || atNextItem) {
                            map.items.push({ start, key: null, sep: [this.sourceToken] });
                        }
                        else if (includesToken(it.sep, 'map-value-ind')) {
                            this.stack.push({
                                type: 'block-map',
                                offset: this.offset,
                                indent: this.indent,
                                items: [{ start: [], key: null, sep: [this.sourceToken] }]
                            });
                        }
                        else {
                            it.sep.push(this.sourceToken);
                        }
                    }
                    this.onKeyLine = true;
                    return;
                case 'alias':
                case 'scalar':
                case 'single-quoted-scalar':
                case 'double-quoted-scalar': {
                    const fs = this.flowScalar(this.type);
                    if (atNextItem || it.value) {
                        map.items.push({ start, key: fs, sep: [] });
                        this.onKeyLine = true;
                    }
                    else if (it.sep) {
                        this.stack.push(fs);
                    }
                    else {
                        Object.assign(it, { key: fs, sep: [] });
                        this.onKeyLine = true;
                    }
                    return;
                }
                default: {
                    const bv = this.startBlockValue(map);
                    if (bv) {
                        if (atNextItem &&
                            bv.type !== 'block-seq' &&
                            includesToken(it.start, 'explicit-key-ind')) {
                            map.items.push({ start });
                        }
                        this.stack.push(bv);
                        return;
                    }
                }
            }
        }
        yield* this.pop();
        yield* this.step();
    }
    *blockSequence(seq) {
        const it = seq.items[seq.items.length - 1];
        switch (this.type) {
            case 'newline':
                if (it.value) {
                    const end = 'end' in it.value ? it.value.end : undefined;
                    const last = Array.isArray(end) ? end[end.length - 1] : undefined;
                    if (last?.type === 'comment')
                        end?.push(this.sourceToken);
                    else
                        seq.items.push({ start: [this.sourceToken] });
                }
                else
                    it.start.push(this.sourceToken);
                return;
            case 'space':
            case 'comment':
                if (it.value)
                    seq.items.push({ start: [this.sourceToken] });
                else {
                    if (this.atIndentedComment(it.start, seq.indent)) {
                        const prev = seq.items[seq.items.length - 2];
                        const end = prev?.value?.end;
                        if (Array.isArray(end)) {
                            Array.prototype.push.apply(end, it.start);
                            end.push(this.sourceToken);
                            seq.items.pop();
                            return;
                        }
                    }
                    it.start.push(this.sourceToken);
                }
                return;
            case 'anchor':
            case 'tag':
                if (it.value || this.indent <= seq.indent)
                    break;
                it.start.push(this.sourceToken);
                return;
            case 'seq-item-ind':
                if (this.indent !== seq.indent)
                    break;
                if (it.value || includesToken(it.start, 'seq-item-ind'))
                    seq.items.push({ start: [this.sourceToken] });
                else
                    it.start.push(this.sourceToken);
                return;
        }
        if (this.indent > seq.indent) {
            const bv = this.startBlockValue(seq);
            if (bv) {
                this.stack.push(bv);
                return;
            }
        }
        yield* this.pop();
        yield* this.step();
    }
    *flowCollection(fc) {
        const it = fc.items[fc.items.length - 1];
        if (this.type === 'flow-error-end') {
            let top;
            do {
                yield* this.pop();
                top = this.peek(1);
            } while (top && top.type === 'flow-collection');
        }
        else if (fc.end.length === 0) {
            switch (this.type) {
                case 'comma':
                case 'explicit-key-ind':
                    if (!it || it.sep)
                        fc.items.push({ start: [this.sourceToken] });
                    else
                        it.start.push(this.sourceToken);
                    return;
                case 'map-value-ind':
                    if (!it || it.value)
                        fc.items.push({ start: [], key: null, sep: [this.sourceToken] });
                    else if (it.sep)
                        it.sep.push(this.sourceToken);
                    else
                        Object.assign(it, { key: null, sep: [this.sourceToken] });
                    return;
                case 'space':
                case 'comment':
                case 'newline':
                case 'anchor':
                case 'tag':
                    if (!it || it.value)
                        fc.items.push({ start: [this.sourceToken] });
                    else if (it.sep)
                        it.sep.push(this.sourceToken);
                    else
                        it.start.push(this.sourceToken);
                    return;
                case 'alias':
                case 'scalar':
                case 'single-quoted-scalar':
                case 'double-quoted-scalar': {
                    const fs = this.flowScalar(this.type);
                    if (!it || it.value)
                        fc.items.push({ start: [], key: fs, sep: [] });
                    else if (it.sep)
                        this.stack.push(fs);
                    else
                        Object.assign(it, { key: fs, sep: [] });
                    return;
                }
                case 'flow-map-end':
                case 'flow-seq-end':
                    fc.end.push(this.sourceToken);
                    return;
            }
            const bv = this.startBlockValue(fc);
            /* istanbul ignore else should not happen */
            if (bv)
                this.stack.push(bv);
            else {
                yield* this.pop();
                yield* this.step();
            }
        }
        else {
            const parent = this.peek(2);
            if (parent.type === 'block-map' &&
                ((this.type === 'map-value-ind' && parent.indent === fc.indent) ||
                    (this.type === 'newline' &&
                        !parent.items[parent.items.length - 1].sep))) {
                yield* this.pop();
                yield* this.step();
            }
            else if (this.type === 'map-value-ind' &&
                parent.type !== 'flow-collection') {
                const prev = getPrevProps(parent);
                const start = getFirstKeyStartProps(prev);
                fixFlowSeqItems(fc);
                const sep = fc.end.splice(1, fc.end.length);
                sep.push(this.sourceToken);
                const map = {
                    type: 'block-map',
                    offset: fc.offset,
                    indent: fc.indent,
                    items: [{ start, key: fc, sep }]
                };
                this.onKeyLine = true;
                this.stack[this.stack.length - 1] = map;
            }
            else {
                yield* this.lineEnd(fc);
            }
        }
    }
    flowScalar(type) {
        if (this.onNewLine) {
            let nl = this.source.indexOf('\n') + 1;
            while (nl !== 0) {
                this.onNewLine(this.offset + nl);
                nl = this.source.indexOf('\n', nl) + 1;
            }
        }
        return {
            type,
            offset: this.offset,
            indent: this.indent,
            source: this.source
        };
    }
    startBlockValue(parent) {
        switch (this.type) {
            case 'alias':
            case 'scalar':
            case 'single-quoted-scalar':
            case 'double-quoted-scalar':
                return this.flowScalar(this.type);
            case 'block-scalar-header':
                return {
                    type: 'block-scalar',
                    offset: this.offset,
                    indent: this.indent,
                    props: [this.sourceToken],
                    source: ''
                };
            case 'flow-map-start':
            case 'flow-seq-start':
                return {
                    type: 'flow-collection',
                    offset: this.offset,
                    indent: this.indent,
                    start: this.sourceToken,
                    items: [],
                    end: []
                };
            case 'seq-item-ind':
                return {
                    type: 'block-seq',
                    offset: this.offset,
                    indent: this.indent,
                    items: [{ start: [this.sourceToken] }]
                };
            case 'explicit-key-ind': {
                this.onKeyLine = true;
                const prev = getPrevProps(parent);
                const start = getFirstKeyStartProps(prev);
                start.push(this.sourceToken);
                return {
                    type: 'block-map',
                    offset: this.offset,
                    indent: this.indent,
                    items: [{ start }]
                };
            }
            case 'map-value-ind': {
                this.onKeyLine = true;
                const prev = getPrevProps(parent);
                const start = getFirstKeyStartProps(prev);
                return {
                    type: 'block-map',
                    offset: this.offset,
                    indent: this.indent,
                    items: [{ start, key: null, sep: [this.sourceToken] }]
                };
            }
        }
        return null;
    }
    atIndentedComment(start, indent) {
        if (this.type !== 'comment')
            return false;
        if (this.indent <= indent)
            return false;
        return start.every(st => st.type === 'newline' || st.type === 'space');
    }
    *documentEnd(docEnd) {
        if (this.type !== 'doc-mode') {
            if (docEnd.end)
                docEnd.end.push(this.sourceToken);
            else
                docEnd.end = [this.sourceToken];
            if (this.type === 'newline')
                yield* this.pop();
        }
    }
    *lineEnd(token) {
        switch (this.type) {
            case 'comma':
            case 'doc-start':
            case 'doc-end':
            case 'flow-seq-end':
            case 'flow-map-end':
            case 'map-value-ind':
                yield* this.pop();
                yield* this.step();
                break;
            case 'newline':
                this.onKeyLine = false;
            // fallthrough
            case 'space':
            case 'comment':
            default:
                // all other values are errors
                if (token.end)
                    token.end.push(this.sourceToken);
                else
                    token.end = [this.sourceToken];
                if (this.type === 'newline')
                    yield* this.pop();
        }
    }
}

exports.Parser = Parser;


/***/ }),

/***/ 1461:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var composer = __nccwpck_require__(6426);
var Document = __nccwpck_require__(9954);
var errors = __nccwpck_require__(2983);
var log = __nccwpck_require__(1829);
var lineCounter = __nccwpck_require__(7978);
var parser = __nccwpck_require__(272);

function parseOptions(options) {
    const prettyErrors = options.prettyErrors !== false;
    const lineCounter$1 = options.lineCounter || (prettyErrors && new lineCounter.LineCounter()) || null;
    return { lineCounter: lineCounter$1, prettyErrors };
}
/**
 * Parse the input as a stream of YAML documents.
 *
 * Documents should be separated from each other by `...` or `---` marker lines.
 *
 * @returns If an empty `docs` array is returned, it will be of type
 *   EmptyStream and contain additional stream information. In
 *   TypeScript, you should use `'empty' in docs` as a type guard for it.
 */
function parseAllDocuments(source, options = {}) {
    const { lineCounter, prettyErrors } = parseOptions(options);
    const parser$1 = new parser.Parser(lineCounter?.addNewLine);
    const composer$1 = new composer.Composer(options);
    const docs = Array.from(composer$1.compose(parser$1.parse(source)));
    if (prettyErrors && lineCounter)
        for (const doc of docs) {
            doc.errors.forEach(errors.prettifyError(source, lineCounter));
            doc.warnings.forEach(errors.prettifyError(source, lineCounter));
        }
    if (docs.length > 0)
        return docs;
    return Object.assign([], { empty: true }, composer$1.streamInfo());
}
/** Parse an input string into a single YAML.Document */
function parseDocument(source, options = {}) {
    const { lineCounter, prettyErrors } = parseOptions(options);
    const parser$1 = new parser.Parser(lineCounter?.addNewLine);
    const composer$1 = new composer.Composer(options);
    // `doc` is always set by compose.end(true) at the very latest
    let doc = null;
    for (const _doc of composer$1.compose(parser$1.parse(source), true, source.length)) {
        if (!doc)
            doc = _doc;
        else if (doc.options.logLevel !== 'silent') {
            doc.errors.push(new errors.YAMLParseError(_doc.range.slice(0, 2), 'MULTIPLE_DOCS', 'Source contains multiple documents; please use YAML.parseAllDocuments()'));
            break;
        }
    }
    if (prettyErrors && lineCounter) {
        doc.errors.forEach(errors.prettifyError(source, lineCounter));
        doc.warnings.forEach(errors.prettifyError(source, lineCounter));
    }
    return doc;
}
function parse(src, reviver, options) {
    let _reviver = undefined;
    if (typeof reviver === 'function') {
        _reviver = reviver;
    }
    else if (options === undefined && reviver && typeof reviver === 'object') {
        options = reviver;
    }
    const doc = parseDocument(src, options);
    if (!doc)
        return null;
    doc.warnings.forEach(warning => log.warn(doc.options.logLevel, warning));
    if (doc.errors.length > 0) {
        if (doc.options.logLevel !== 'silent')
            throw doc.errors[0];
        else
            doc.errors = [];
    }
    return doc.toJS(Object.assign({ reviver: _reviver }, options));
}
function stringify(value, replacer, options) {
    let _replacer = null;
    if (typeof replacer === 'function' || Array.isArray(replacer)) {
        _replacer = replacer;
    }
    else if (options === undefined && replacer) {
        options = replacer;
    }
    if (typeof options === 'string')
        options = options.length;
    if (typeof options === 'number') {
        const indent = Math.round(options);
        options = indent < 1 ? undefined : indent > 8 ? { indent: 8 } : { indent };
    }
    if (value === undefined) {
        const { keepUndefined } = options ?? replacer ?? {};
        if (!keepUndefined)
            return undefined;
    }
    return new Document.Document(value, _replacer, options).toString(options);
}

exports.parse = parse;
exports.parseAllDocuments = parseAllDocuments;
exports.parseDocument = parseDocument;
exports.stringify = stringify;


/***/ }),

/***/ 8726:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var Node = __nccwpck_require__(240);
var map = __nccwpck_require__(8407);
var seq = __nccwpck_require__(1442);
var string = __nccwpck_require__(1550);
var tags = __nccwpck_require__(536);

const sortMapEntriesByKey = (a, b) => a.key < b.key ? -1 : a.key > b.key ? 1 : 0;
class Schema {
    constructor({ compat, customTags, merge, resolveKnownTags, schema, sortMapEntries, toStringDefaults }) {
        this.compat = Array.isArray(compat)
            ? tags.getTags(compat, 'compat')
            : compat
                ? tags.getTags(null, compat)
                : null;
        this.merge = !!merge;
        this.name = (typeof schema === 'string' && schema) || 'core';
        this.knownTags = resolveKnownTags ? tags.coreKnownTags : {};
        this.tags = tags.getTags(customTags, this.name);
        this.toStringOptions = toStringDefaults ?? null;
        Object.defineProperty(this, Node.MAP, { value: map.map });
        Object.defineProperty(this, Node.SCALAR, { value: string.string });
        Object.defineProperty(this, Node.SEQ, { value: seq.seq });
        // Used by createMap()
        this.sortMapEntries =
            typeof sortMapEntries === 'function'
                ? sortMapEntries
                : sortMapEntries === true
                    ? sortMapEntriesByKey
                    : null;
    }
    clone() {
        const copy = Object.create(Schema.prototype, Object.getOwnPropertyDescriptors(this));
        copy.tags = this.tags.slice();
        return copy;
    }
}

exports.Schema = Schema;


/***/ }),

/***/ 8407:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var Node = __nccwpck_require__(240);
var Pair = __nccwpck_require__(9200);
var YAMLMap = __nccwpck_require__(163);

function createMap(schema, obj, ctx) {
    const { keepUndefined, replacer } = ctx;
    const map = new YAMLMap.YAMLMap(schema);
    const add = (key, value) => {
        if (typeof replacer === 'function')
            value = replacer.call(obj, key, value);
        else if (Array.isArray(replacer) && !replacer.includes(key))
            return;
        if (value !== undefined || keepUndefined)
            map.items.push(Pair.createPair(key, value, ctx));
    };
    if (obj instanceof Map) {
        for (const [key, value] of obj)
            add(key, value);
    }
    else if (obj && typeof obj === 'object') {
        for (const key of Object.keys(obj))
            add(key, obj[key]);
    }
    if (typeof schema.sortMapEntries === 'function') {
        map.items.sort(schema.sortMapEntries);
    }
    return map;
}
const map = {
    collection: 'map',
    createNode: createMap,
    default: true,
    nodeClass: YAMLMap.YAMLMap,
    tag: 'tag:yaml.org,2002:map',
    resolve(map, onError) {
        if (!Node.isMap(map))
            onError('Expected a mapping for this tag');
        return map;
    }
};

exports.map = map;


/***/ }),

/***/ 284:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var Scalar = __nccwpck_require__(5461);

const nullTag = {
    identify: value => value == null,
    createNode: () => new Scalar.Scalar(null),
    default: true,
    tag: 'tag:yaml.org,2002:null',
    test: /^(?:~|[Nn]ull|NULL)?$/,
    resolve: () => new Scalar.Scalar(null),
    stringify: ({ source }, ctx) => typeof source === 'string' && nullTag.test.test(source)
        ? source
        : ctx.options.nullStr
};

exports.nullTag = nullTag;


/***/ }),

/***/ 1442:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var createNode = __nccwpck_require__(6822);
var Node = __nccwpck_require__(240);
var YAMLSeq = __nccwpck_require__(7225);

function createSeq(schema, obj, ctx) {
    const { replacer } = ctx;
    const seq = new YAMLSeq.YAMLSeq(schema);
    if (obj && Symbol.iterator in Object(obj)) {
        let i = 0;
        for (let it of obj) {
            if (typeof replacer === 'function') {
                const key = obj instanceof Set ? it : String(i++);
                it = replacer.call(obj, key, it);
            }
            seq.items.push(createNode.createNode(it, undefined, ctx));
        }
    }
    return seq;
}
const seq = {
    collection: 'seq',
    createNode: createSeq,
    default: true,
    nodeClass: YAMLSeq.YAMLSeq,
    tag: 'tag:yaml.org,2002:seq',
    resolve(seq, onError) {
        if (!Node.isSeq(seq))
            onError('Expected a sequence for this tag');
        return seq;
    }
};

exports.seq = seq;


/***/ }),

/***/ 1550:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var stringifyString = __nccwpck_require__(5917);

const string = {
    identify: value => typeof value === 'string',
    default: true,
    tag: 'tag:yaml.org,2002:str',
    resolve: str => str,
    stringify(item, ctx, onComment, onChompKeep) {
        ctx = Object.assign({ actualString: true }, ctx);
        return stringifyString.stringifyString(item, ctx, onComment, onChompKeep);
    }
};

exports.string = string;


/***/ }),

/***/ 8608:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var Scalar = __nccwpck_require__(5461);

const boolTag = {
    identify: value => typeof value === 'boolean',
    default: true,
    tag: 'tag:yaml.org,2002:bool',
    test: /^(?:[Tt]rue|TRUE|[Ff]alse|FALSE)$/,
    resolve: str => new Scalar.Scalar(str[0] === 't' || str[0] === 'T'),
    stringify({ source, value }, ctx) {
        if (source && boolTag.test.test(source)) {
            const sv = source[0] === 't' || source[0] === 'T';
            if (value === sv)
                return source;
        }
        return value ? ctx.options.trueStr : ctx.options.falseStr;
    }
};

exports.boolTag = boolTag;


/***/ }),

/***/ 6066:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var Scalar = __nccwpck_require__(5461);
var stringifyNumber = __nccwpck_require__(6275);

const floatNaN = {
    identify: value => typeof value === 'number',
    default: true,
    tag: 'tag:yaml.org,2002:float',
    test: /^(?:[-+]?\.(?:inf|Inf|INF|nan|NaN|NAN))$/,
    resolve: str => str.slice(-3).toLowerCase() === 'nan'
        ? NaN
        : str[0] === '-'
            ? Number.NEGATIVE_INFINITY
            : Number.POSITIVE_INFINITY,
    stringify: stringifyNumber.stringifyNumber
};
const floatExp = {
    identify: value => typeof value === 'number',
    default: true,
    tag: 'tag:yaml.org,2002:float',
    format: 'EXP',
    test: /^[-+]?(?:\.[0-9]+|[0-9]+(?:\.[0-9]*)?)[eE][-+]?[0-9]+$/,
    resolve: str => parseFloat(str),
    stringify(node) {
        const num = Number(node.value);
        return isFinite(num) ? num.toExponential() : stringifyNumber.stringifyNumber(node);
    }
};
const float = {
    identify: value => typeof value === 'number',
    default: true,
    tag: 'tag:yaml.org,2002:float',
    test: /^[-+]?(?:\.[0-9]+|[0-9]+\.[0-9]*)$/,
    resolve(str) {
        const node = new Scalar.Scalar(parseFloat(str));
        const dot = str.indexOf('.');
        if (dot !== -1 && str[str.length - 1] === '0')
            node.minFractionDigits = str.length - dot - 1;
        return node;
    },
    stringify: stringifyNumber.stringifyNumber
};

exports.float = float;
exports.floatExp = floatExp;
exports.floatNaN = floatNaN;


/***/ }),

/***/ 4067:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var stringifyNumber = __nccwpck_require__(6275);

const intIdentify = (value) => typeof value === 'bigint' || Number.isInteger(value);
const intResolve = (str, offset, radix, { intAsBigInt }) => (intAsBigInt ? BigInt(str) : parseInt(str.substring(offset), radix));
function intStringify(node, radix, prefix) {
    const { value } = node;
    if (intIdentify(value) && value >= 0)
        return prefix + value.toString(radix);
    return stringifyNumber.stringifyNumber(node);
}
const intOct = {
    identify: value => intIdentify(value) && value >= 0,
    default: true,
    tag: 'tag:yaml.org,2002:int',
    format: 'OCT',
    test: /^0o[0-7]+$/,
    resolve: (str, _onError, opt) => intResolve(str, 2, 8, opt),
    stringify: node => intStringify(node, 8, '0o')
};
const int = {
    identify: intIdentify,
    default: true,
    tag: 'tag:yaml.org,2002:int',
    test: /^[-+]?[0-9]+$/,
    resolve: (str, _onError, opt) => intResolve(str, 0, 10, opt),
    stringify: stringifyNumber.stringifyNumber
};
const intHex = {
    identify: value => intIdentify(value) && value >= 0,
    default: true,
    tag: 'tag:yaml.org,2002:int',
    format: 'HEX',
    test: /^0x[0-9a-fA-F]+$/,
    resolve: (str, _onError, opt) => intResolve(str, 2, 16, opt),
    stringify: node => intStringify(node, 16, '0x')
};

exports.int = int;
exports.intHex = intHex;
exports.intOct = intOct;


/***/ }),

/***/ 7849:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var map = __nccwpck_require__(8407);
var _null = __nccwpck_require__(284);
var seq = __nccwpck_require__(1442);
var string = __nccwpck_require__(1550);
var bool = __nccwpck_require__(8608);
var float = __nccwpck_require__(6066);
var int = __nccwpck_require__(4067);

const schema = [
    map.map,
    seq.seq,
    string.string,
    _null.nullTag,
    bool.boolTag,
    int.intOct,
    int.int,
    int.intHex,
    float.floatNaN,
    float.floatExp,
    float.float
];

exports.schema = schema;


/***/ }),

/***/ 5879:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var Scalar = __nccwpck_require__(5461);
var map = __nccwpck_require__(8407);
var seq = __nccwpck_require__(1442);

function intIdentify(value) {
    return typeof value === 'bigint' || Number.isInteger(value);
}
const stringifyJSON = ({ value }) => JSON.stringify(value);
const jsonScalars = [
    {
        identify: value => typeof value === 'string',
        default: true,
        tag: 'tag:yaml.org,2002:str',
        resolve: str => str,
        stringify: stringifyJSON
    },
    {
        identify: value => value == null,
        createNode: () => new Scalar.Scalar(null),
        default: true,
        tag: 'tag:yaml.org,2002:null',
        test: /^null$/,
        resolve: () => null,
        stringify: stringifyJSON
    },
    {
        identify: value => typeof value === 'boolean',
        default: true,
        tag: 'tag:yaml.org,2002:bool',
        test: /^true|false$/,
        resolve: str => str === 'true',
        stringify: stringifyJSON
    },
    {
        identify: intIdentify,
        default: true,
        tag: 'tag:yaml.org,2002:int',
        test: /^-?(?:0|[1-9][0-9]*)$/,
        resolve: (str, _onError, { intAsBigInt }) => intAsBigInt ? BigInt(str) : parseInt(str, 10),
        stringify: ({ value }) => intIdentify(value) ? value.toString() : JSON.stringify(value)
    },
    {
        identify: value => typeof value === 'number',
        default: true,
        tag: 'tag:yaml.org,2002:float',
        test: /^-?(?:0|[1-9][0-9]*)(?:\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,
        resolve: str => parseFloat(str),
        stringify: stringifyJSON
    }
];
const jsonError = {
    default: true,
    tag: '',
    test: /^/,
    resolve(str, onError) {
        onError(`Unresolved plain scalar ${JSON.stringify(str)}`);
        return str;
    }
};
const schema = [map.map, seq.seq].concat(jsonScalars, jsonError);

exports.schema = schema;


/***/ }),

/***/ 536:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var map = __nccwpck_require__(8407);
var _null = __nccwpck_require__(284);
var seq = __nccwpck_require__(1442);
var string = __nccwpck_require__(1550);
var bool = __nccwpck_require__(8608);
var float = __nccwpck_require__(6066);
var int = __nccwpck_require__(4067);
var schema = __nccwpck_require__(7849);
var schema$1 = __nccwpck_require__(5879);
var binary = __nccwpck_require__(7442);
var omap = __nccwpck_require__(6428);
var pairs = __nccwpck_require__(3440);
var schema$2 = __nccwpck_require__(9856);
var set = __nccwpck_require__(5360);
var timestamp = __nccwpck_require__(615);

const schemas = new Map([
    ['core', schema.schema],
    ['failsafe', [map.map, seq.seq, string.string]],
    ['json', schema$1.schema],
    ['yaml11', schema$2.schema],
    ['yaml-1.1', schema$2.schema]
]);
const tagsByName = {
    binary: binary.binary,
    bool: bool.boolTag,
    float: float.float,
    floatExp: float.floatExp,
    floatNaN: float.floatNaN,
    floatTime: timestamp.floatTime,
    int: int.int,
    intHex: int.intHex,
    intOct: int.intOct,
    intTime: timestamp.intTime,
    map: map.map,
    null: _null.nullTag,
    omap: omap.omap,
    pairs: pairs.pairs,
    seq: seq.seq,
    set: set.set,
    timestamp: timestamp.timestamp
};
const coreKnownTags = {
    'tag:yaml.org,2002:binary': binary.binary,
    'tag:yaml.org,2002:omap': omap.omap,
    'tag:yaml.org,2002:pairs': pairs.pairs,
    'tag:yaml.org,2002:set': set.set,
    'tag:yaml.org,2002:timestamp': timestamp.timestamp
};
function getTags(customTags, schemaName) {
    let tags = schemas.get(schemaName);
    if (!tags) {
        if (Array.isArray(customTags))
            tags = [];
        else {
            const keys = Array.from(schemas.keys())
                .filter(key => key !== 'yaml11')
                .map(key => JSON.stringify(key))
                .join(', ');
            throw new Error(`Unknown schema "${schemaName}"; use one of ${keys} or define customTags array`);
        }
    }
    if (Array.isArray(customTags)) {
        for (const tag of customTags)
            tags = tags.concat(tag);
    }
    else if (typeof customTags === 'function') {
        tags = customTags(tags.slice());
    }
    return tags.map(tag => {
        if (typeof tag !== 'string')
            return tag;
        const tagObj = tagsByName[tag];
        if (tagObj)
            return tagObj;
        const keys = Object.keys(tagsByName)
            .map(key => JSON.stringify(key))
            .join(', ');
        throw new Error(`Unknown custom tag "${tag}"; use one of ${keys}`);
    });
}

exports.coreKnownTags = coreKnownTags;
exports.getTags = getTags;


/***/ }),

/***/ 7442:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var Scalar = __nccwpck_require__(5461);
var stringifyString = __nccwpck_require__(5917);

const binary = {
    identify: value => value instanceof Uint8Array,
    default: false,
    tag: 'tag:yaml.org,2002:binary',
    /**
     * Returns a Buffer in node and an Uint8Array in browsers
     *
     * To use the resulting buffer as an image, you'll want to do something like:
     *
     *   const blob = new Blob([buffer], { type: 'image/jpeg' })
     *   document.querySelector('#photo').src = URL.createObjectURL(blob)
     */
    resolve(src, onError) {
        if (typeof Buffer === 'function') {
            return Buffer.from(src, 'base64');
        }
        else if (typeof atob === 'function') {
            // On IE 11, atob() can't handle newlines
            const str = atob(src.replace(/[\n\r]/g, ''));
            const buffer = new Uint8Array(str.length);
            for (let i = 0; i < str.length; ++i)
                buffer[i] = str.charCodeAt(i);
            return buffer;
        }
        else {
            onError('This environment does not support reading binary tags; either Buffer or atob is required');
            return src;
        }
    },
    stringify({ comment, type, value }, ctx, onComment, onChompKeep) {
        const buf = value; // checked earlier by binary.identify()
        let str;
        if (typeof Buffer === 'function') {
            str =
                buf instanceof Buffer
                    ? buf.toString('base64')
                    : Buffer.from(buf.buffer).toString('base64');
        }
        else if (typeof btoa === 'function') {
            let s = '';
            for (let i = 0; i < buf.length; ++i)
                s += String.fromCharCode(buf[i]);
            str = btoa(s);
        }
        else {
            throw new Error('This environment does not support writing binary tags; either Buffer or btoa is required');
        }
        if (!type)
            type = Scalar.Scalar.BLOCK_LITERAL;
        if (type !== Scalar.Scalar.QUOTE_DOUBLE) {
            const lineWidth = Math.max(ctx.options.lineWidth - ctx.indent.length, ctx.options.minContentWidth);
            const n = Math.ceil(str.length / lineWidth);
            const lines = new Array(n);
            for (let i = 0, o = 0; i < n; ++i, o += lineWidth) {
                lines[i] = str.substr(o, lineWidth);
            }
            str = lines.join(type === Scalar.Scalar.BLOCK_LITERAL ? '\n' : ' ');
        }
        return stringifyString.stringifyString({ comment, type, value: str }, ctx, onComment, onChompKeep);
    }
};

exports.binary = binary;


/***/ }),

/***/ 585:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var Scalar = __nccwpck_require__(5461);

function boolStringify({ value, source }, ctx) {
    const boolObj = value ? trueTag : falseTag;
    if (source && boolObj.test.test(source))
        return source;
    return value ? ctx.options.trueStr : ctx.options.falseStr;
}
const trueTag = {
    identify: value => value === true,
    default: true,
    tag: 'tag:yaml.org,2002:bool',
    test: /^(?:Y|y|[Yy]es|YES|[Tt]rue|TRUE|[Oo]n|ON)$/,
    resolve: () => new Scalar.Scalar(true),
    stringify: boolStringify
};
const falseTag = {
    identify: value => value === false,
    default: true,
    tag: 'tag:yaml.org,2002:bool',
    test: /^(?:N|n|[Nn]o|NO|[Ff]alse|FALSE|[Oo]ff|OFF)$/i,
    resolve: () => new Scalar.Scalar(false),
    stringify: boolStringify
};

exports.falseTag = falseTag;
exports.trueTag = trueTag;


/***/ }),

/***/ 1844:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var Scalar = __nccwpck_require__(5461);
var stringifyNumber = __nccwpck_require__(6275);

const floatNaN = {
    identify: value => typeof value === 'number',
    default: true,
    tag: 'tag:yaml.org,2002:float',
    test: /^[-+]?\.(?:inf|Inf|INF|nan|NaN|NAN)$/,
    resolve: (str) => str.slice(-3).toLowerCase() === 'nan'
        ? NaN
        : str[0] === '-'
            ? Number.NEGATIVE_INFINITY
            : Number.POSITIVE_INFINITY,
    stringify: stringifyNumber.stringifyNumber
};
const floatExp = {
    identify: value => typeof value === 'number',
    default: true,
    tag: 'tag:yaml.org,2002:float',
    format: 'EXP',
    test: /^[-+]?(?:[0-9][0-9_]*)?(?:\.[0-9_]*)?[eE][-+]?[0-9]+$/,
    resolve: (str) => parseFloat(str.replace(/_/g, '')),
    stringify(node) {
        const num = Number(node.value);
        return isFinite(num) ? num.toExponential() : stringifyNumber.stringifyNumber(node);
    }
};
const float = {
    identify: value => typeof value === 'number',
    default: true,
    tag: 'tag:yaml.org,2002:float',
    test: /^[-+]?(?:[0-9][0-9_]*)?\.[0-9_]*$/,
    resolve(str) {
        const node = new Scalar.Scalar(parseFloat(str.replace(/_/g, '')));
        const dot = str.indexOf('.');
        if (dot !== -1) {
            const f = str.substring(dot + 1).replace(/_/g, '');
            if (f[f.length - 1] === '0')
                node.minFractionDigits = f.length;
        }
        return node;
    },
    stringify: stringifyNumber.stringifyNumber
};

exports.float = float;
exports.floatExp = floatExp;
exports.floatNaN = floatNaN;


/***/ }),

/***/ 3087:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var stringifyNumber = __nccwpck_require__(6275);

const intIdentify = (value) => typeof value === 'bigint' || Number.isInteger(value);
function intResolve(str, offset, radix, { intAsBigInt }) {
    const sign = str[0];
    if (sign === '-' || sign === '+')
        offset += 1;
    str = str.substring(offset).replace(/_/g, '');
    if (intAsBigInt) {
        switch (radix) {
            case 2:
                str = `0b${str}`;
                break;
            case 8:
                str = `0o${str}`;
                break;
            case 16:
                str = `0x${str}`;
                break;
        }
        const n = BigInt(str);
        return sign === '-' ? BigInt(-1) * n : n;
    }
    const n = parseInt(str, radix);
    return sign === '-' ? -1 * n : n;
}
function intStringify(node, radix, prefix) {
    const { value } = node;
    if (intIdentify(value)) {
        const str = value.toString(radix);
        return value < 0 ? '-' + prefix + str.substr(1) : prefix + str;
    }
    return stringifyNumber.stringifyNumber(node);
}
const intBin = {
    identify: intIdentify,
    default: true,
    tag: 'tag:yaml.org,2002:int',
    format: 'BIN',
    test: /^[-+]?0b[0-1_]+$/,
    resolve: (str, _onError, opt) => intResolve(str, 2, 2, opt),
    stringify: node => intStringify(node, 2, '0b')
};
const intOct = {
    identify: intIdentify,
    default: true,
    tag: 'tag:yaml.org,2002:int',
    format: 'OCT',
    test: /^[-+]?0[0-7_]+$/,
    resolve: (str, _onError, opt) => intResolve(str, 1, 8, opt),
    stringify: node => intStringify(node, 8, '0')
};
const int = {
    identify: intIdentify,
    default: true,
    tag: 'tag:yaml.org,2002:int',
    test: /^[-+]?[0-9][0-9_]*$/,
    resolve: (str, _onError, opt) => intResolve(str, 0, 10, opt),
    stringify: stringifyNumber.stringifyNumber
};
const intHex = {
    identify: intIdentify,
    default: true,
    tag: 'tag:yaml.org,2002:int',
    format: 'HEX',
    test: /^[-+]?0x[0-9a-fA-F_]+$/,
    resolve: (str, _onError, opt) => intResolve(str, 2, 16, opt),
    stringify: node => intStringify(node, 16, '0x')
};

exports.int = int;
exports.intBin = intBin;
exports.intHex = intHex;
exports.intOct = intOct;


/***/ }),

/***/ 6428:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var YAMLSeq = __nccwpck_require__(7225);
var toJS = __nccwpck_require__(9001);
var Node = __nccwpck_require__(240);
var YAMLMap = __nccwpck_require__(163);
var pairs = __nccwpck_require__(3440);

class YAMLOMap extends YAMLSeq.YAMLSeq {
    constructor() {
        super();
        this.add = YAMLMap.YAMLMap.prototype.add.bind(this);
        this.delete = YAMLMap.YAMLMap.prototype.delete.bind(this);
        this.get = YAMLMap.YAMLMap.prototype.get.bind(this);
        this.has = YAMLMap.YAMLMap.prototype.has.bind(this);
        this.set = YAMLMap.YAMLMap.prototype.set.bind(this);
        this.tag = YAMLOMap.tag;
    }
    /**
     * If `ctx` is given, the return type is actually `Map<unknown, unknown>`,
     * but TypeScript won't allow widening the signature of a child method.
     */
    toJSON(_, ctx) {
        if (!ctx)
            return super.toJSON(_);
        const map = new Map();
        if (ctx?.onCreate)
            ctx.onCreate(map);
        for (const pair of this.items) {
            let key, value;
            if (Node.isPair(pair)) {
                key = toJS.toJS(pair.key, '', ctx);
                value = toJS.toJS(pair.value, key, ctx);
            }
            else {
                key = toJS.toJS(pair, '', ctx);
            }
            if (map.has(key))
                throw new Error('Ordered maps must not include duplicate keys');
            map.set(key, value);
        }
        return map;
    }
}
YAMLOMap.tag = 'tag:yaml.org,2002:omap';
const omap = {
    collection: 'seq',
    identify: value => value instanceof Map,
    nodeClass: YAMLOMap,
    default: false,
    tag: 'tag:yaml.org,2002:omap',
    resolve(seq, onError) {
        const pairs$1 = pairs.resolvePairs(seq, onError);
        const seenKeys = [];
        for (const { key } of pairs$1.items) {
            if (Node.isScalar(key)) {
                if (seenKeys.includes(key.value)) {
                    onError(`Ordered maps must not include duplicate keys: ${key.value}`);
                }
                else {
                    seenKeys.push(key.value);
                }
            }
        }
        return Object.assign(new YAMLOMap(), pairs$1);
    },
    createNode(schema, iterable, ctx) {
        const pairs$1 = pairs.createPairs(schema, iterable, ctx);
        const omap = new YAMLOMap();
        omap.items = pairs$1.items;
        return omap;
    }
};

exports.YAMLOMap = YAMLOMap;
exports.omap = omap;


/***/ }),

/***/ 3440:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var Node = __nccwpck_require__(240);
var Pair = __nccwpck_require__(9200);
var Scalar = __nccwpck_require__(5461);
var YAMLSeq = __nccwpck_require__(7225);

function resolvePairs(seq, onError) {
    if (Node.isSeq(seq)) {
        for (let i = 0; i < seq.items.length; ++i) {
            let item = seq.items[i];
            if (Node.isPair(item))
                continue;
            else if (Node.isMap(item)) {
                if (item.items.length > 1)
                    onError('Each pair must have its own sequence indicator');
                const pair = item.items[0] || new Pair.Pair(new Scalar.Scalar(null));
                if (item.commentBefore)
                    pair.key.commentBefore = pair.key.commentBefore
                        ? `${item.commentBefore}\n${pair.key.commentBefore}`
                        : item.commentBefore;
                if (item.comment) {
                    const cn = pair.value ?? pair.key;
                    cn.comment = cn.comment
                        ? `${item.comment}\n${cn.comment}`
                        : item.comment;
                }
                item = pair;
            }
            seq.items[i] = Node.isPair(item) ? item : new Pair.Pair(item);
        }
    }
    else
        onError('Expected a sequence for this tag');
    return seq;
}
function createPairs(schema, iterable, ctx) {
    const { replacer } = ctx;
    const pairs = new YAMLSeq.YAMLSeq(schema);
    pairs.tag = 'tag:yaml.org,2002:pairs';
    let i = 0;
    if (iterable && Symbol.iterator in Object(iterable))
        for (let it of iterable) {
            if (typeof replacer === 'function')
                it = replacer.call(iterable, String(i++), it);
            let key, value;
            if (Array.isArray(it)) {
                if (it.length === 2) {
                    key = it[0];
                    value = it[1];
                }
                else
                    throw new TypeError(`Expected [key, value] tuple: ${it}`);
            }
            else if (it && it instanceof Object) {
                const keys = Object.keys(it);
                if (keys.length === 1) {
                    key = keys[0];
                    value = it[key];
                }
                else
                    throw new TypeError(`Expected { key: value } tuple: ${it}`);
            }
            else {
                key = it;
            }
            pairs.items.push(Pair.createPair(key, value, ctx));
        }
    return pairs;
}
const pairs = {
    collection: 'seq',
    default: false,
    tag: 'tag:yaml.org,2002:pairs',
    resolve: resolvePairs,
    createNode: createPairs
};

exports.createPairs = createPairs;
exports.pairs = pairs;
exports.resolvePairs = resolvePairs;


/***/ }),

/***/ 9856:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var map = __nccwpck_require__(8407);
var _null = __nccwpck_require__(284);
var seq = __nccwpck_require__(1442);
var string = __nccwpck_require__(1550);
var binary = __nccwpck_require__(7442);
var bool = __nccwpck_require__(585);
var float = __nccwpck_require__(1844);
var int = __nccwpck_require__(3087);
var omap = __nccwpck_require__(6428);
var pairs = __nccwpck_require__(3440);
var set = __nccwpck_require__(5360);
var timestamp = __nccwpck_require__(615);

const schema = [
    map.map,
    seq.seq,
    string.string,
    _null.nullTag,
    bool.trueTag,
    bool.falseTag,
    int.intBin,
    int.intOct,
    int.int,
    int.intHex,
    float.floatNaN,
    float.floatExp,
    float.float,
    binary.binary,
    omap.omap,
    pairs.pairs,
    set.set,
    timestamp.intTime,
    timestamp.floatTime,
    timestamp.timestamp
];

exports.schema = schema;


/***/ }),

/***/ 5360:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var Node = __nccwpck_require__(240);
var Pair = __nccwpck_require__(9200);
var YAMLMap = __nccwpck_require__(163);

class YAMLSet extends YAMLMap.YAMLMap {
    constructor(schema) {
        super(schema);
        this.tag = YAMLSet.tag;
    }
    add(key) {
        let pair;
        if (Node.isPair(key))
            pair = key;
        else if (key &&
            typeof key === 'object' &&
            'key' in key &&
            'value' in key &&
            key.value === null)
            pair = new Pair.Pair(key.key, null);
        else
            pair = new Pair.Pair(key, null);
        const prev = YAMLMap.findPair(this.items, pair.key);
        if (!prev)
            this.items.push(pair);
    }
    /**
     * If `keepPair` is `true`, returns the Pair matching `key`.
     * Otherwise, returns the value of that Pair's key.
     */
    get(key, keepPair) {
        const pair = YAMLMap.findPair(this.items, key);
        return !keepPair && Node.isPair(pair)
            ? Node.isScalar(pair.key)
                ? pair.key.value
                : pair.key
            : pair;
    }
    set(key, value) {
        if (typeof value !== 'boolean')
            throw new Error(`Expected boolean value for set(key, value) in a YAML set, not ${typeof value}`);
        const prev = YAMLMap.findPair(this.items, key);
        if (prev && !value) {
            this.items.splice(this.items.indexOf(prev), 1);
        }
        else if (!prev && value) {
            this.items.push(new Pair.Pair(key));
        }
    }
    toJSON(_, ctx) {
        return super.toJSON(_, ctx, Set);
    }
    toString(ctx, onComment, onChompKeep) {
        if (!ctx)
            return JSON.stringify(this);
        if (this.hasAllNullValues(true))
            return super.toString(Object.assign({}, ctx, { allNullValues: true }), onComment, onChompKeep);
        else
            throw new Error('Set items must all have null values');
    }
}
YAMLSet.tag = 'tag:yaml.org,2002:set';
const set = {
    collection: 'map',
    identify: value => value instanceof Set,
    nodeClass: YAMLSet,
    default: false,
    tag: 'tag:yaml.org,2002:set',
    resolve(map, onError) {
        if (Node.isMap(map)) {
            if (map.hasAllNullValues(true))
                return Object.assign(new YAMLSet(), map);
            else
                onError('Set items must all have null values');
        }
        else
            onError('Expected a mapping for this tag');
        return map;
    },
    createNode(schema, iterable, ctx) {
        const { replacer } = ctx;
        const set = new YAMLSet(schema);
        if (iterable && Symbol.iterator in Object(iterable))
            for (let value of iterable) {
                if (typeof replacer === 'function')
                    value = replacer.call(iterable, value, value);
                set.items.push(Pair.createPair(value, null, ctx));
            }
        return set;
    }
};

exports.YAMLSet = YAMLSet;
exports.set = set;


/***/ }),

/***/ 615:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var stringifyNumber = __nccwpck_require__(6275);

/** Internal types handle bigint as number, because TS can't figure it out. */
function parseSexagesimal(str, asBigInt) {
    const sign = str[0];
    const parts = sign === '-' || sign === '+' ? str.substring(1) : str;
    const num = (n) => asBigInt ? BigInt(n) : Number(n);
    const res = parts
        .replace(/_/g, '')
        .split(':')
        .reduce((res, p) => res * num(60) + num(p), num(0));
    return (sign === '-' ? num(-1) * res : res);
}
/**
 * hhhh:mm:ss.sss
 *
 * Internal types handle bigint as number, because TS can't figure it out.
 */
function stringifySexagesimal(node) {
    let { value } = node;
    let num = (n) => n;
    if (typeof value === 'bigint')
        num = n => BigInt(n);
    else if (isNaN(value) || !isFinite(value))
        return stringifyNumber.stringifyNumber(node);
    let sign = '';
    if (value < 0) {
        sign = '-';
        value *= num(-1);
    }
    const _60 = num(60);
    const parts = [value % _60]; // seconds, including ms
    if (value < 60) {
        parts.unshift(0); // at least one : is required
    }
    else {
        value = (value - parts[0]) / _60;
        parts.unshift(value % _60); // minutes
        if (value >= 60) {
            value = (value - parts[0]) / _60;
            parts.unshift(value); // hours
        }
    }
    return (sign +
        parts
            .map(n => (n < 10 ? '0' + String(n) : String(n)))
            .join(':')
            .replace(/000000\d*$/, '') // % 60 may introduce error
    );
}
const intTime = {
    identify: value => typeof value === 'bigint' || Number.isInteger(value),
    default: true,
    tag: 'tag:yaml.org,2002:int',
    format: 'TIME',
    test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+$/,
    resolve: (str, _onError, { intAsBigInt }) => parseSexagesimal(str, intAsBigInt),
    stringify: stringifySexagesimal
};
const floatTime = {
    identify: value => typeof value === 'number',
    default: true,
    tag: 'tag:yaml.org,2002:float',
    format: 'TIME',
    test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\.[0-9_]*$/,
    resolve: str => parseSexagesimal(str, false),
    stringify: stringifySexagesimal
};
const timestamp = {
    identify: value => value instanceof Date,
    default: true,
    tag: 'tag:yaml.org,2002:timestamp',
    // If the time zone is omitted, the timestamp is assumed to be specified in UTC. The time part
    // may be omitted altogether, resulting in a date format. In such a case, the time part is
    // assumed to be 00:00:00Z (start of day, UTC).
    test: RegExp('^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})' + // YYYY-Mm-Dd
        '(?:' + // time is optional
        '(?:t|T|[ \\t]+)' + // t | T | whitespace
        '([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\.[0-9]+)?)' + // Hh:Mm:Ss(.ss)?
        '(?:[ \\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?' + // Z | +5 | -03:30
        ')?$'),
    resolve(str) {
        const match = str.match(timestamp.test);
        if (!match)
            throw new Error('!!timestamp expects a date, starting with yyyy-mm-dd');
        const [, year, month, day, hour, minute, second] = match.map(Number);
        const millisec = match[7] ? Number((match[7] + '00').substr(1, 3)) : 0;
        let date = Date.UTC(year, month - 1, day, hour || 0, minute || 0, second || 0, millisec);
        const tz = match[8];
        if (tz && tz !== 'Z') {
            let d = parseSexagesimal(tz, false);
            if (Math.abs(d) < 30)
                d *= 60;
            date -= 60000 * d;
        }
        return new Date(date);
    },
    stringify: ({ value }) => value.toISOString().replace(/((T00:00)?:00)?\.000Z$/, '')
};

exports.floatTime = floatTime;
exports.intTime = intTime;
exports.timestamp = timestamp;


/***/ }),

/***/ 1040:
/***/ ((__unused_webpack_module, exports) => {



const FOLD_FLOW = 'flow';
const FOLD_BLOCK = 'block';
const FOLD_QUOTED = 'quoted';
/**
 * Tries to keep input at up to `lineWidth` characters, splitting only on spaces
 * not followed by newlines or spaces unless `mode` is `'quoted'`. Lines are
 * terminated with `\n` and started with `indent`.
 */
function foldFlowLines(text, indent, mode = 'flow', { indentAtStart, lineWidth = 80, minContentWidth = 20, onFold, onOverflow } = {}) {
    if (!lineWidth || lineWidth < 0)
        return text;
    const endStep = Math.max(1 + minContentWidth, 1 + lineWidth - indent.length);
    if (text.length <= endStep)
        return text;
    const folds = [];
    const escapedFolds = {};
    let end = lineWidth - indent.length;
    if (typeof indentAtStart === 'number') {
        if (indentAtStart > lineWidth - Math.max(2, minContentWidth))
            folds.push(0);
        else
            end = lineWidth - indentAtStart;
    }
    let split = undefined;
    let prev = undefined;
    let overflow = false;
    let i = -1;
    let escStart = -1;
    let escEnd = -1;
    if (mode === FOLD_BLOCK) {
        i = consumeMoreIndentedLines(text, i);
        if (i !== -1)
            end = i + endStep;
    }
    for (let ch; (ch = text[(i += 1)]);) {
        if (mode === FOLD_QUOTED && ch === '\\') {
            escStart = i;
            switch (text[i + 1]) {
                case 'x':
                    i += 3;
                    break;
                case 'u':
                    i += 5;
                    break;
                case 'U':
                    i += 9;
                    break;
                default:
                    i += 1;
            }
            escEnd = i;
        }
        if (ch === '\n') {
            if (mode === FOLD_BLOCK)
                i = consumeMoreIndentedLines(text, i);
            end = i + endStep;
            split = undefined;
        }
        else {
            if (ch === ' ' &&
                prev &&
                prev !== ' ' &&
                prev !== '\n' &&
                prev !== '\t') {
                // space surrounded by non-space can be replaced with newline + indent
                const next = text[i + 1];
                if (next && next !== ' ' && next !== '\n' && next !== '\t')
                    split = i;
            }
            if (i >= end) {
                if (split) {
                    folds.push(split);
                    end = split + endStep;
                    split = undefined;
                }
                else if (mode === FOLD_QUOTED) {
                    // white-space collected at end may stretch past lineWidth
                    while (prev === ' ' || prev === '\t') {
                        prev = ch;
                        ch = text[(i += 1)];
                        overflow = true;
                    }
                    // Account for newline escape, but don't break preceding escape
                    const j = i > escEnd + 1 ? i - 2 : escStart - 1;
                    // Bail out if lineWidth & minContentWidth are shorter than an escape string
                    if (escapedFolds[j])
                        return text;
                    folds.push(j);
                    escapedFolds[j] = true;
                    end = j + endStep;
                    split = undefined;
                }
                else {
                    overflow = true;
                }
            }
        }
        prev = ch;
    }
    if (overflow && onOverflow)
        onOverflow();
    if (folds.length === 0)
        return text;
    if (onFold)
        onFold();
    let res = text.slice(0, folds[0]);
    for (let i = 0; i < folds.length; ++i) {
        const fold = folds[i];
        const end = folds[i + 1] || text.length;
        if (fold === 0)
            res = `\n${indent}${text.slice(0, end)}`;
        else {
            if (mode === FOLD_QUOTED && escapedFolds[fold])
                res += `${text[fold]}\\`;
            res += `\n${indent}${text.slice(fold + 1, end)}`;
        }
    }
    return res;
}
/**
 * Presumes `i + 1` is at the start of a line
 * @returns index of last newline in more-indented block
 */
function consumeMoreIndentedLines(text, i) {
    let ch = text[i + 1];
    while (ch === ' ' || ch === '\t') {
        do {
            ch = text[(i += 1)];
        } while (ch && ch !== '\n');
        ch = text[i + 1];
    }
    return i;
}

exports.FOLD_BLOCK = FOLD_BLOCK;
exports.FOLD_FLOW = FOLD_FLOW;
exports.FOLD_QUOTED = FOLD_QUOTED;
exports.foldFlowLines = foldFlowLines;


/***/ }),

/***/ 1631:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var anchors = __nccwpck_require__(7626);
var Node = __nccwpck_require__(240);
var stringifyComment = __nccwpck_require__(3502);
var stringifyString = __nccwpck_require__(5917);

function createStringifyContext(doc, options) {
    const opt = Object.assign({
        blockQuote: true,
        commentString: stringifyComment.stringifyComment,
        defaultKeyType: null,
        defaultStringType: 'PLAIN',
        directives: null,
        doubleQuotedAsJSON: false,
        doubleQuotedMinMultiLineLength: 40,
        falseStr: 'false',
        flowCollectionPadding: true,
        indentSeq: true,
        lineWidth: 80,
        minContentWidth: 20,
        nullStr: 'null',
        simpleKeys: false,
        singleQuote: null,
        trueStr: 'true',
        verifyAliasOrder: true
    }, doc.schema.toStringOptions, options);
    let inFlow;
    switch (opt.collectionStyle) {
        case 'block':
            inFlow = false;
            break;
        case 'flow':
            inFlow = true;
            break;
        default:
            inFlow = null;
    }
    return {
        anchors: new Set(),
        doc,
        flowCollectionPadding: opt.flowCollectionPadding ? ' ' : '',
        indent: '',
        indentStep: typeof opt.indent === 'number' ? ' '.repeat(opt.indent) : '  ',
        inFlow,
        options: opt
    };
}
function getTagObject(tags, item) {
    if (item.tag) {
        const match = tags.filter(t => t.tag === item.tag);
        if (match.length > 0)
            return match.find(t => t.format === item.format) ?? match[0];
    }
    let tagObj = undefined;
    let obj;
    if (Node.isScalar(item)) {
        obj = item.value;
        const match = tags.filter(t => t.identify?.(obj));
        tagObj =
            match.find(t => t.format === item.format) ?? match.find(t => !t.format);
    }
    else {
        obj = item;
        tagObj = tags.find(t => t.nodeClass && obj instanceof t.nodeClass);
    }
    if (!tagObj) {
        const name = obj?.constructor?.name ?? typeof obj;
        throw new Error(`Tag not resolved for ${name} value`);
    }
    return tagObj;
}
// needs to be called before value stringifier to allow for circular anchor refs
function stringifyProps(node, tagObj, { anchors: anchors$1, doc }) {
    if (!doc.directives)
        return '';
    const props = [];
    const anchor = (Node.isScalar(node) || Node.isCollection(node)) && node.anchor;
    if (anchor && anchors.anchorIsValid(anchor)) {
        anchors$1.add(anchor);
        props.push(`&${anchor}`);
    }
    const tag = node.tag ? node.tag : tagObj.default ? null : tagObj.tag;
    if (tag)
        props.push(doc.directives.tagString(tag));
    return props.join(' ');
}
function stringify(item, ctx, onComment, onChompKeep) {
    if (Node.isPair(item))
        return item.toString(ctx, onComment, onChompKeep);
    if (Node.isAlias(item)) {
        if (ctx.doc.directives)
            return item.toString(ctx);
        if (ctx.resolvedAliases?.has(item)) {
            throw new TypeError(`Cannot stringify circular structure without alias nodes`);
        }
        else {
            if (ctx.resolvedAliases)
                ctx.resolvedAliases.add(item);
            else
                ctx.resolvedAliases = new Set([item]);
            item = item.resolve(ctx.doc);
        }
    }
    let tagObj = undefined;
    const node = Node.isNode(item)
        ? item
        : ctx.doc.createNode(item, { onTagObj: o => (tagObj = o) });
    if (!tagObj)
        tagObj = getTagObject(ctx.doc.schema.tags, node);
    const props = stringifyProps(node, tagObj, ctx);
    if (props.length > 0)
        ctx.indentAtStart = (ctx.indentAtStart ?? 0) + props.length + 1;
    const str = typeof tagObj.stringify === 'function'
        ? tagObj.stringify(node, ctx, onComment, onChompKeep)
        : Node.isScalar(node)
            ? stringifyString.stringifyString(node, ctx, onComment, onChompKeep)
            : node.toString(ctx, onComment, onChompKeep);
    if (!props)
        return str;
    return Node.isScalar(node) || str[0] === '{' || str[0] === '['
        ? `${props} ${str}`
        : `${props}\n${ctx.indent}${str}`;
}

exports.createStringifyContext = createStringifyContext;
exports.stringify = stringify;


/***/ }),

/***/ 8949:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var Collection = __nccwpck_require__(6848);
var Node = __nccwpck_require__(240);
var stringify = __nccwpck_require__(1631);
var stringifyComment = __nccwpck_require__(3502);

function stringifyCollection(collection, ctx, options) {
    const flow = ctx.inFlow ?? collection.flow;
    const stringify = flow ? stringifyFlowCollection : stringifyBlockCollection;
    return stringify(collection, ctx, options);
}
function stringifyBlockCollection({ comment, items }, ctx, { blockItemPrefix, flowChars, itemIndent, onChompKeep, onComment }) {
    const { indent, options: { commentString } } = ctx;
    const itemCtx = Object.assign({}, ctx, { indent: itemIndent, type: null });
    let chompKeep = false; // flag for the preceding node's status
    const lines = [];
    for (let i = 0; i < items.length; ++i) {
        const item = items[i];
        let comment = null;
        if (Node.isNode(item)) {
            if (!chompKeep && item.spaceBefore)
                lines.push('');
            addCommentBefore(ctx, lines, item.commentBefore, chompKeep);
            if (item.comment)
                comment = item.comment;
        }
        else if (Node.isPair(item)) {
            const ik = Node.isNode(item.key) ? item.key : null;
            if (ik) {
                if (!chompKeep && ik.spaceBefore)
                    lines.push('');
                addCommentBefore(ctx, lines, ik.commentBefore, chompKeep);
            }
        }
        chompKeep = false;
        let str = stringify.stringify(item, itemCtx, () => (comment = null), () => (chompKeep = true));
        if (comment)
            str += stringifyComment.lineComment(str, itemIndent, commentString(comment));
        if (chompKeep && comment)
            chompKeep = false;
        lines.push(blockItemPrefix + str);
    }
    let str;
    if (lines.length === 0) {
        str = flowChars.start + flowChars.end;
    }
    else {
        str = lines[0];
        for (let i = 1; i < lines.length; ++i) {
            const line = lines[i];
            str += line ? `\n${indent}${line}` : '\n';
        }
    }
    if (comment) {
        str += '\n' + stringifyComment.indentComment(commentString(comment), indent);
        if (onComment)
            onComment();
    }
    else if (chompKeep && onChompKeep)
        onChompKeep();
    return str;
}
function stringifyFlowCollection({ comment, items }, ctx, { flowChars, itemIndent, onComment }) {
    const { indent, indentStep, flowCollectionPadding: fcPadding, options: { commentString } } = ctx;
    itemIndent += indentStep;
    const itemCtx = Object.assign({}, ctx, {
        indent: itemIndent,
        inFlow: true,
        type: null
    });
    let reqNewline = false;
    let linesAtValue = 0;
    const lines = [];
    for (let i = 0; i < items.length; ++i) {
        const item = items[i];
        let comment = null;
        if (Node.isNode(item)) {
            if (item.spaceBefore)
                lines.push('');
            addCommentBefore(ctx, lines, item.commentBefore, false);
            if (item.comment)
                comment = item.comment;
        }
        else if (Node.isPair(item)) {
            const ik = Node.isNode(item.key) ? item.key : null;
            if (ik) {
                if (ik.spaceBefore)
                    lines.push('');
                addCommentBefore(ctx, lines, ik.commentBefore, false);
                if (ik.comment)
                    reqNewline = true;
            }
            const iv = Node.isNode(item.value) ? item.value : null;
            if (iv) {
                if (iv.comment)
                    comment = iv.comment;
                if (iv.commentBefore)
                    reqNewline = true;
            }
            else if (item.value == null && ik && ik.comment) {
                comment = ik.comment;
            }
        }
        if (comment)
            reqNewline = true;
        let str = stringify.stringify(item, itemCtx, () => (comment = null));
        if (i < items.length - 1)
            str += ',';
        if (comment)
            str += stringifyComment.lineComment(str, itemIndent, commentString(comment));
        if (!reqNewline && (lines.length > linesAtValue || str.includes('\n')))
            reqNewline = true;
        lines.push(str);
        linesAtValue = lines.length;
    }
    let str;
    const { start, end } = flowChars;
    if (lines.length === 0) {
        str = start + end;
    }
    else {
        if (!reqNewline) {
            const len = lines.reduce((sum, line) => sum + line.length + 2, 2);
            reqNewline = len > Collection.Collection.maxFlowStringSingleLineLength;
        }
        if (reqNewline) {
            str = start;
            for (const line of lines)
                str += line ? `\n${indentStep}${indent}${line}` : '\n';
            str += `\n${indent}${end}`;
        }
        else {
            str = `${start}${fcPadding}${lines.join(' ')}${fcPadding}${end}`;
        }
    }
    if (comment) {
        str += stringifyComment.lineComment(str, commentString(comment), indent);
        if (onComment)
            onComment();
    }
    return str;
}
function addCommentBefore({ indent, options: { commentString } }, lines, comment, chompKeep) {
    if (comment && chompKeep)
        comment = comment.replace(/^\n+/, '');
    if (comment) {
        const ic = stringifyComment.indentComment(commentString(comment), indent);
        lines.push(ic.trimStart()); // Avoid double indent on first line
    }
}

exports.stringifyCollection = stringifyCollection;


/***/ }),

/***/ 3502:
/***/ ((__unused_webpack_module, exports) => {



/**
 * Stringifies a comment.
 *
 * Empty comment lines are left empty,
 * lines consisting of a single space are replaced by `#`,
 * and all other lines are prefixed with a `#`.
 */
const stringifyComment = (str) => str.replace(/^(?!$)(?: $)?/gm, '#');
function indentComment(comment, indent) {
    if (/^\n+$/.test(comment))
        return comment.substring(1);
    return indent ? comment.replace(/^(?! *$)/gm, indent) : comment;
}
const lineComment = (str, indent, comment) => str.endsWith('\n')
    ? indentComment(comment, indent)
    : comment.includes('\n')
        ? '\n' + indentComment(comment, indent)
        : (str.endsWith(' ') ? '' : ' ') + comment;

exports.indentComment = indentComment;
exports.lineComment = lineComment;
exports.stringifyComment = stringifyComment;


/***/ }),

/***/ 8279:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var Node = __nccwpck_require__(240);
var stringify = __nccwpck_require__(1631);
var stringifyComment = __nccwpck_require__(3502);

function stringifyDocument(doc, options) {
    const lines = [];
    let hasDirectives = options.directives === true;
    if (options.directives !== false && doc.directives) {
        const dir = doc.directives.toString(doc);
        if (dir) {
            lines.push(dir);
            hasDirectives = true;
        }
        else if (doc.directives.docStart)
            hasDirectives = true;
    }
    if (hasDirectives)
        lines.push('---');
    const ctx = stringify.createStringifyContext(doc, options);
    const { commentString } = ctx.options;
    if (doc.commentBefore) {
        if (lines.length !== 1)
            lines.unshift('');
        const cs = commentString(doc.commentBefore);
        lines.unshift(stringifyComment.indentComment(cs, ''));
    }
    let chompKeep = false;
    let contentComment = null;
    if (doc.contents) {
        if (Node.isNode(doc.contents)) {
            if (doc.contents.spaceBefore && hasDirectives)
                lines.push('');
            if (doc.contents.commentBefore) {
                const cs = commentString(doc.contents.commentBefore);
                lines.push(stringifyComment.indentComment(cs, ''));
            }
            // top-level block scalars need to be indented if followed by a comment
            ctx.forceBlockIndent = !!doc.comment;
            contentComment = doc.contents.comment;
        }
        const onChompKeep = contentComment ? undefined : () => (chompKeep = true);
        let body = stringify.stringify(doc.contents, ctx, () => (contentComment = null), onChompKeep);
        if (contentComment)
            body += stringifyComment.lineComment(body, '', commentString(contentComment));
        if ((body[0] === '|' || body[0] === '>') &&
            lines[lines.length - 1] === '---') {
            // Top-level block scalars with a preceding doc marker ought to use the
            // same line for their header.
            lines[lines.length - 1] = `--- ${body}`;
        }
        else
            lines.push(body);
    }
    else {
        lines.push(stringify.stringify(doc.contents, ctx));
    }
    if (doc.directives?.docEnd) {
        if (doc.comment) {
            const cs = commentString(doc.comment);
            if (cs.includes('\n')) {
                lines.push('...');
                lines.push(stringifyComment.indentComment(cs, ''));
            }
            else {
                lines.push(`... ${cs}`);
            }
        }
        else {
            lines.push('...');
        }
    }
    else {
        let dc = doc.comment;
        if (dc && chompKeep)
            dc = dc.replace(/^\n+/, '');
        if (dc) {
            if ((!chompKeep || contentComment) && lines[lines.length - 1] !== '')
                lines.push('');
            lines.push(stringifyComment.indentComment(commentString(dc), ''));
        }
    }
    return lines.join('\n') + '\n';
}

exports.stringifyDocument = stringifyDocument;


/***/ }),

/***/ 6275:
/***/ ((__unused_webpack_module, exports) => {



function stringifyNumber({ format, minFractionDigits, tag, value }) {
    if (typeof value === 'bigint')
        return String(value);
    const num = typeof value === 'number' ? value : Number(value);
    if (!isFinite(num))
        return isNaN(num) ? '.nan' : num < 0 ? '-.inf' : '.inf';
    let n = JSON.stringify(value);
    if (!format &&
        minFractionDigits &&
        (!tag || tag === 'tag:yaml.org,2002:float') &&
        /^\d/.test(n)) {
        let i = n.indexOf('.');
        if (i < 0) {
            i = n.length;
            n += '.';
        }
        let d = minFractionDigits - (n.length - i - 1);
        while (d-- > 0)
            n += '0';
    }
    return n;
}

exports.stringifyNumber = stringifyNumber;


/***/ }),

/***/ 4775:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var Node = __nccwpck_require__(240);
var Scalar = __nccwpck_require__(5461);
var stringify = __nccwpck_require__(1631);
var stringifyComment = __nccwpck_require__(3502);

function stringifyPair({ key, value }, ctx, onComment, onChompKeep) {
    const { allNullValues, doc, indent, indentStep, options: { commentString, indentSeq, simpleKeys } } = ctx;
    let keyComment = (Node.isNode(key) && key.comment) || null;
    if (simpleKeys) {
        if (keyComment) {
            throw new Error('With simple keys, key nodes cannot have comments');
        }
        if (Node.isCollection(key)) {
            const msg = 'With simple keys, collection cannot be used as a key value';
            throw new Error(msg);
        }
    }
    let explicitKey = !simpleKeys &&
        (!key ||
            (keyComment && value == null && !ctx.inFlow) ||
            Node.isCollection(key) ||
            (Node.isScalar(key)
                ? key.type === Scalar.Scalar.BLOCK_FOLDED || key.type === Scalar.Scalar.BLOCK_LITERAL
                : typeof key === 'object'));
    ctx = Object.assign({}, ctx, {
        allNullValues: false,
        implicitKey: !explicitKey && (simpleKeys || !allNullValues),
        indent: indent + indentStep
    });
    let keyCommentDone = false;
    let chompKeep = false;
    let str = stringify.stringify(key, ctx, () => (keyCommentDone = true), () => (chompKeep = true));
    if (!explicitKey && !ctx.inFlow && str.length > 1024) {
        if (simpleKeys)
            throw new Error('With simple keys, single line scalar must not span more than 1024 characters');
        explicitKey = true;
    }
    if (ctx.inFlow) {
        if (allNullValues || value == null) {
            if (keyCommentDone && onComment)
                onComment();
            return str === '' ? '?' : explicitKey ? `? ${str}` : str;
        }
    }
    else if ((allNullValues && !simpleKeys) || (value == null && explicitKey)) {
        str = `? ${str}`;
        if (keyComment && !keyCommentDone) {
            str += stringifyComment.lineComment(str, ctx.indent, commentString(keyComment));
        }
        else if (chompKeep && onChompKeep)
            onChompKeep();
        return str;
    }
    if (keyCommentDone)
        keyComment = null;
    if (explicitKey) {
        if (keyComment)
            str += stringifyComment.lineComment(str, ctx.indent, commentString(keyComment));
        str = `? ${str}\n${indent}:`;
    }
    else {
        str = `${str}:`;
        if (keyComment)
            str += stringifyComment.lineComment(str, ctx.indent, commentString(keyComment));
    }
    let vsb, vcb, valueComment;
    if (Node.isNode(value)) {
        vsb = !!value.spaceBefore;
        vcb = value.commentBefore;
        valueComment = value.comment;
    }
    else {
        vsb = false;
        vcb = null;
        valueComment = null;
        if (value && typeof value === 'object')
            value = doc.createNode(value);
    }
    ctx.implicitKey = false;
    if (!explicitKey && !keyComment && Node.isScalar(value))
        ctx.indentAtStart = str.length + 1;
    chompKeep = false;
    if (!indentSeq &&
        indentStep.length >= 2 &&
        !ctx.inFlow &&
        !explicitKey &&
        Node.isSeq(value) &&
        !value.flow &&
        !value.tag &&
        !value.anchor) {
        // If indentSeq === false, consider '- ' as part of indentation where possible
        ctx.indent = ctx.indent.substring(2);
    }
    let valueCommentDone = false;
    const valueStr = stringify.stringify(value, ctx, () => (valueCommentDone = true), () => (chompKeep = true));
    let ws = ' ';
    if (keyComment || vsb || vcb) {
        ws = vsb ? '\n' : '';
        if (vcb) {
            const cs = commentString(vcb);
            ws += `\n${stringifyComment.indentComment(cs, ctx.indent)}`;
        }
        if (valueStr === '' && !ctx.inFlow) {
            if (ws === '\n')
                ws = '\n\n';
        }
        else {
            ws += `\n${ctx.indent}`;
        }
    }
    else if (!explicitKey && Node.isCollection(value)) {
        const vs0 = valueStr[0];
        const nl0 = valueStr.indexOf('\n');
        const hasNewline = nl0 !== -1;
        const flow = ctx.inFlow ?? value.flow ?? value.items.length === 0;
        if (hasNewline || !flow) {
            let hasPropsLine = false;
            if (hasNewline && (vs0 === '&' || vs0 === '!')) {
                let sp0 = valueStr.indexOf(' ');
                if (vs0 === '&' &&
                    sp0 !== -1 &&
                    sp0 < nl0 &&
                    valueStr[sp0 + 1] === '!') {
                    sp0 = valueStr.indexOf(' ', sp0 + 1);
                }
                if (sp0 === -1 || nl0 < sp0)
                    hasPropsLine = true;
            }
            if (!hasPropsLine)
                ws = `\n${ctx.indent}`;
        }
    }
    else if (valueStr === '' || valueStr[0] === '\n') {
        ws = '';
    }
    str += ws + valueStr;
    if (ctx.inFlow) {
        if (valueCommentDone && onComment)
            onComment();
    }
    else if (valueComment && !valueCommentDone) {
        str += stringifyComment.lineComment(str, ctx.indent, commentString(valueComment));
    }
    else if (chompKeep && onChompKeep) {
        onChompKeep();
    }
    return str;
}

exports.stringifyPair = stringifyPair;


/***/ }),

/***/ 5917:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var Scalar = __nccwpck_require__(5461);
var foldFlowLines = __nccwpck_require__(1040);

const getFoldOptions = (ctx) => ({
    indentAtStart: ctx.indentAtStart,
    lineWidth: ctx.options.lineWidth,
    minContentWidth: ctx.options.minContentWidth
});
// Also checks for lines starting with %, as parsing the output as YAML 1.1 will
// presume that's starting a new document.
const containsDocumentMarker = (str) => /^(%|---|\.\.\.)/m.test(str);
function lineLengthOverLimit(str, lineWidth, indentLength) {
    if (!lineWidth || lineWidth < 0)
        return false;
    const limit = lineWidth - indentLength;
    const strLen = str.length;
    if (strLen <= limit)
        return false;
    for (let i = 0, start = 0; i < strLen; ++i) {
        if (str[i] === '\n') {
            if (i - start > limit)
                return true;
            start = i + 1;
            if (strLen - start <= limit)
                return false;
        }
    }
    return true;
}
function doubleQuotedString(value, ctx) {
    const json = JSON.stringify(value);
    if (ctx.options.doubleQuotedAsJSON)
        return json;
    const { implicitKey } = ctx;
    const minMultiLineLength = ctx.options.doubleQuotedMinMultiLineLength;
    const indent = ctx.indent || (containsDocumentMarker(value) ? '  ' : '');
    let str = '';
    let start = 0;
    for (let i = 0, ch = json[i]; ch; ch = json[++i]) {
        if (ch === ' ' && json[i + 1] === '\\' && json[i + 2] === 'n') {
            // space before newline needs to be escaped to not be folded
            str += json.slice(start, i) + '\\ ';
            i += 1;
            start = i;
            ch = '\\';
        }
        if (ch === '\\')
            switch (json[i + 1]) {
                case 'u':
                    {
                        str += json.slice(start, i);
                        const code = json.substr(i + 2, 4);
                        switch (code) {
                            case '0000':
                                str += '\\0';
                                break;
                            case '0007':
                                str += '\\a';
                                break;
                            case '000b':
                                str += '\\v';
                                break;
                            case '001b':
                                str += '\\e';
                                break;
                            case '0085':
                                str += '\\N';
                                break;
                            case '00a0':
                                str += '\\_';
                                break;
                            case '2028':
                                str += '\\L';
                                break;
                            case '2029':
                                str += '\\P';
                                break;
                            default:
                                if (code.substr(0, 2) === '00')
                                    str += '\\x' + code.substr(2);
                                else
                                    str += json.substr(i, 6);
                        }
                        i += 5;
                        start = i + 1;
                    }
                    break;
                case 'n':
                    if (implicitKey ||
                        json[i + 2] === '"' ||
                        json.length < minMultiLineLength) {
                        i += 1;
                    }
                    else {
                        // folding will eat first newline
                        str += json.slice(start, i) + '\n\n';
                        while (json[i + 2] === '\\' &&
                            json[i + 3] === 'n' &&
                            json[i + 4] !== '"') {
                            str += '\n';
                            i += 2;
                        }
                        str += indent;
                        // space after newline needs to be escaped to not be folded
                        if (json[i + 2] === ' ')
                            str += '\\';
                        i += 1;
                        start = i + 1;
                    }
                    break;
                default:
                    i += 1;
            }
    }
    str = start ? str + json.slice(start) : json;
    return implicitKey
        ? str
        : foldFlowLines.foldFlowLines(str, indent, foldFlowLines.FOLD_QUOTED, getFoldOptions(ctx));
}
function singleQuotedString(value, ctx) {
    if (ctx.options.singleQuote === false ||
        (ctx.implicitKey && value.includes('\n')) ||
        /[ \t]\n|\n[ \t]/.test(value) // single quoted string can't have leading or trailing whitespace around newline
    )
        return doubleQuotedString(value, ctx);
    const indent = ctx.indent || (containsDocumentMarker(value) ? '  ' : '');
    const res = "'" + value.replace(/'/g, "''").replace(/\n+/g, `$&\n${indent}`) + "'";
    return ctx.implicitKey
        ? res
        : foldFlowLines.foldFlowLines(res, indent, foldFlowLines.FOLD_FLOW, getFoldOptions(ctx));
}
function quotedString(value, ctx) {
    const { singleQuote } = ctx.options;
    let qs;
    if (singleQuote === false)
        qs = doubleQuotedString;
    else {
        const hasDouble = value.includes('"');
        const hasSingle = value.includes("'");
        if (hasDouble && !hasSingle)
            qs = singleQuotedString;
        else if (hasSingle && !hasDouble)
            qs = doubleQuotedString;
        else
            qs = singleQuote ? singleQuotedString : doubleQuotedString;
    }
    return qs(value, ctx);
}
function blockString({ comment, type, value }, ctx, onComment, onChompKeep) {
    const { blockQuote, commentString, lineWidth } = ctx.options;
    // 1. Block can't end in whitespace unless the last line is non-empty.
    // 2. Strings consisting of only whitespace are best rendered explicitly.
    if (!blockQuote || /\n[\t ]+$/.test(value) || /^\s*$/.test(value)) {
        return quotedString(value, ctx);
    }
    const indent = ctx.indent ||
        (ctx.forceBlockIndent || containsDocumentMarker(value) ? '  ' : '');
    const literal = blockQuote === 'literal'
        ? true
        : blockQuote === 'folded' || type === Scalar.Scalar.BLOCK_FOLDED
            ? false
            : type === Scalar.Scalar.BLOCK_LITERAL
                ? true
                : !lineLengthOverLimit(value, lineWidth, indent.length);
    if (!value)
        return literal ? '|\n' : '>\n';
    // determine chomping from whitespace at value end
    let chomp;
    let endStart;
    for (endStart = value.length; endStart > 0; --endStart) {
        const ch = value[endStart - 1];
        if (ch !== '\n' && ch !== '\t' && ch !== ' ')
            break;
    }
    let end = value.substring(endStart);
    const endNlPos = end.indexOf('\n');
    if (endNlPos === -1) {
        chomp = '-'; // strip
    }
    else if (value === end || endNlPos !== end.length - 1) {
        chomp = '+'; // keep
        if (onChompKeep)
            onChompKeep();
    }
    else {
        chomp = ''; // clip
    }
    if (end) {
        value = value.slice(0, -end.length);
        if (end[end.length - 1] === '\n')
            end = end.slice(0, -1);
        end = end.replace(/\n+(?!\n|$)/g, `$&${indent}`);
    }
    // determine indent indicator from whitespace at value start
    let startWithSpace = false;
    let startEnd;
    let startNlPos = -1;
    for (startEnd = 0; startEnd < value.length; ++startEnd) {
        const ch = value[startEnd];
        if (ch === ' ')
            startWithSpace = true;
        else if (ch === '\n')
            startNlPos = startEnd;
        else
            break;
    }
    let start = value.substring(0, startNlPos < startEnd ? startNlPos + 1 : startEnd);
    if (start) {
        value = value.substring(start.length);
        start = start.replace(/\n+/g, `$&${indent}`);
    }
    const indentSize = indent ? '2' : '1'; // root is at -1
    let header = (literal ? '|' : '>') + (startWithSpace ? indentSize : '') + chomp;
    if (comment) {
        header += ' ' + commentString(comment.replace(/ ?[\r\n]+/g, ' '));
        if (onComment)
            onComment();
    }
    if (literal) {
        value = value.replace(/\n+/g, `$&${indent}`);
        return `${header}\n${indent}${start}${value}${end}`;
    }
    value = value
        .replace(/\n+/g, '\n$&')
        .replace(/(?:^|\n)([\t ].*)(?:([\n\t ]*)\n(?![\n\t ]))?/g, '$1$2') // more-indented lines aren't folded
        //                ^ more-ind. ^ empty     ^ capture next empty lines only at end of indent
        .replace(/\n+/g, `$&${indent}`);
    const body = foldFlowLines.foldFlowLines(`${start}${value}${end}`, indent, foldFlowLines.FOLD_BLOCK, getFoldOptions(ctx));
    return `${header}\n${indent}${body}`;
}
function plainString(item, ctx, onComment, onChompKeep) {
    const { type, value } = item;
    const { actualString, implicitKey, indent, indentStep, inFlow } = ctx;
    if ((implicitKey && /[\n[\]{},]/.test(value)) ||
        (inFlow && /[[\]{},]/.test(value))) {
        return quotedString(value, ctx);
    }
    if (!value ||
        /^[\n\t ,[\]{}#&*!|>'"%@`]|^[?-]$|^[?-][ \t]|[\n:][ \t]|[ \t]\n|[\n\t ]#|[\n\t :]$/.test(value)) {
        // not allowed:
        // - empty string, '-' or '?'
        // - start with an indicator character (except [?:-]) or /[?-] /
        // - '\n ', ': ' or ' \n' anywhere
        // - '#' not preceded by a non-space char
        // - end with ' ' or ':'
        return implicitKey || inFlow || !value.includes('\n')
            ? quotedString(value, ctx)
            : blockString(item, ctx, onComment, onChompKeep);
    }
    if (!implicitKey &&
        !inFlow &&
        type !== Scalar.Scalar.PLAIN &&
        value.includes('\n')) {
        // Where allowed & type not set explicitly, prefer block style for multiline strings
        return blockString(item, ctx, onComment, onChompKeep);
    }
    if (containsDocumentMarker(value)) {
        if (indent === '') {
            ctx.forceBlockIndent = true;
            return blockString(item, ctx, onComment, onChompKeep);
        }
        else if (implicitKey && indent === indentStep) {
            return quotedString(value, ctx);
        }
    }
    const str = value.replace(/\n+/g, `$&\n${indent}`);
    // Verify that output will be parsed as a string, as e.g. plain numbers and
    // booleans get parsed with those types in v1.2 (e.g. '42', 'true' & '0.9e-3'),
    // and others in v1.1.
    if (actualString) {
        const test = (tag) => tag.default && tag.tag !== 'tag:yaml.org,2002:str' && tag.test?.test(str);
        const { compat, tags } = ctx.doc.schema;
        if (tags.some(test) || compat?.some(test))
            return quotedString(value, ctx);
    }
    return implicitKey
        ? str
        : foldFlowLines.foldFlowLines(str, indent, foldFlowLines.FOLD_FLOW, getFoldOptions(ctx));
}
function stringifyString(item, ctx, onComment, onChompKeep) {
    const { implicitKey, inFlow } = ctx;
    const ss = typeof item.value === 'string'
        ? item
        : Object.assign({}, item, { value: String(item.value) });
    let { type } = item;
    if (type !== Scalar.Scalar.QUOTE_DOUBLE) {
        // force double quotes on control characters & unpaired surrogates
        if (/[\x00-\x08\x0b-\x1f\x7f-\x9f\u{D800}-\u{DFFF}]/u.test(ss.value))
            type = Scalar.Scalar.QUOTE_DOUBLE;
    }
    const _stringify = (_type) => {
        switch (_type) {
            case Scalar.Scalar.BLOCK_FOLDED:
            case Scalar.Scalar.BLOCK_LITERAL:
                return implicitKey || inFlow
                    ? quotedString(ss.value, ctx) // blocks are not valid inside flow containers
                    : blockString(ss, ctx, onComment, onChompKeep);
            case Scalar.Scalar.QUOTE_DOUBLE:
                return doubleQuotedString(ss.value, ctx);
            case Scalar.Scalar.QUOTE_SINGLE:
                return singleQuotedString(ss.value, ctx);
            case Scalar.Scalar.PLAIN:
                return plainString(ss, ctx, onComment, onChompKeep);
            default:
                return null;
        }
    };
    let res = _stringify(type);
    if (res === null) {
        const { defaultKeyType, defaultStringType } = ctx.options;
        const t = (implicitKey && defaultKeyType) || defaultStringType;
        res = _stringify(t);
        if (res === null)
            throw new Error(`Unsupported default string type ${t}`);
    }
    return res;
}

exports.stringifyString = stringifyString;


/***/ }),

/***/ 8159:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var Node = __nccwpck_require__(240);

const BREAK = Symbol('break visit');
const SKIP = Symbol('skip children');
const REMOVE = Symbol('remove node');
/**
 * Apply a visitor to an AST node or document.
 *
 * Walks through the tree (depth-first) starting from `node`, calling a
 * `visitor` function with three arguments:
 *   - `key`: For sequence values and map `Pair`, the node's index in the
 *     collection. Within a `Pair`, `'key'` or `'value'`, correspondingly.
 *     `null` for the root node.
 *   - `node`: The current node.
 *   - `path`: The ancestry of the current node.
 *
 * The return value of the visitor may be used to control the traversal:
 *   - `undefined` (default): Do nothing and continue
 *   - `visit.SKIP`: Do not visit the children of this node, continue with next
 *     sibling
 *   - `visit.BREAK`: Terminate traversal completely
 *   - `visit.REMOVE`: Remove the current node, then continue with the next one
 *   - `Node`: Replace the current node, then continue by visiting it
 *   - `number`: While iterating the items of a sequence or map, set the index
 *     of the next step. This is useful especially if the index of the current
 *     node has changed.
 *
 * If `visitor` is a single function, it will be called with all values
 * encountered in the tree, including e.g. `null` values. Alternatively,
 * separate visitor functions may be defined for each `Map`, `Pair`, `Seq`,
 * `Alias` and `Scalar` node. To define the same visitor function for more than
 * one node type, use the `Collection` (map and seq), `Value` (map, seq & scalar)
 * and `Node` (alias, map, seq & scalar) targets. Of all these, only the most
 * specific defined one will be used for each node.
 */
function visit(node, visitor) {
    const visitor_ = initVisitor(visitor);
    if (Node.isDocument(node)) {
        const cd = visit_(null, node.contents, visitor_, Object.freeze([node]));
        if (cd === REMOVE)
            node.contents = null;
    }
    else
        visit_(null, node, visitor_, Object.freeze([]));
}
// Without the `as symbol` casts, TS declares these in the `visit`
// namespace using `var`, but then complains about that because
// `unique symbol` must be `const`.
/** Terminate visit traversal completely */
visit.BREAK = BREAK;
/** Do not visit the children of the current node */
visit.SKIP = SKIP;
/** Remove the current node */
visit.REMOVE = REMOVE;
function visit_(key, node, visitor, path) {
    const ctrl = callVisitor(key, node, visitor, path);
    if (Node.isNode(ctrl) || Node.isPair(ctrl)) {
        replaceNode(key, path, ctrl);
        return visit_(key, ctrl, visitor, path);
    }
    if (typeof ctrl !== 'symbol') {
        if (Node.isCollection(node)) {
            path = Object.freeze(path.concat(node));
            for (let i = 0; i < node.items.length; ++i) {
                const ci = visit_(i, node.items[i], visitor, path);
                if (typeof ci === 'number')
                    i = ci - 1;
                else if (ci === BREAK)
                    return BREAK;
                else if (ci === REMOVE) {
                    node.items.splice(i, 1);
                    i -= 1;
                }
            }
        }
        else if (Node.isPair(node)) {
            path = Object.freeze(path.concat(node));
            const ck = visit_('key', node.key, visitor, path);
            if (ck === BREAK)
                return BREAK;
            else if (ck === REMOVE)
                node.key = null;
            const cv = visit_('value', node.value, visitor, path);
            if (cv === BREAK)
                return BREAK;
            else if (cv === REMOVE)
                node.value = null;
        }
    }
    return ctrl;
}
/**
 * Apply an async visitor to an AST node or document.
 *
 * Walks through the tree (depth-first) starting from `node`, calling a
 * `visitor` function with three arguments:
 *   - `key`: For sequence values and map `Pair`, the node's index in the
 *     collection. Within a `Pair`, `'key'` or `'value'`, correspondingly.
 *     `null` for the root node.
 *   - `node`: The current node.
 *   - `path`: The ancestry of the current node.
 *
 * The return value of the visitor may be used to control the traversal:
 *   - `Promise`: Must resolve to one of the following values
 *   - `undefined` (default): Do nothing and continue
 *   - `visit.SKIP`: Do not visit the children of this node, continue with next
 *     sibling
 *   - `visit.BREAK`: Terminate traversal completely
 *   - `visit.REMOVE`: Remove the current node, then continue with the next one
 *   - `Node`: Replace the current node, then continue by visiting it
 *   - `number`: While iterating the items of a sequence or map, set the index
 *     of the next step. This is useful especially if the index of the current
 *     node has changed.
 *
 * If `visitor` is a single function, it will be called with all values
 * encountered in the tree, including e.g. `null` values. Alternatively,
 * separate visitor functions may be defined for each `Map`, `Pair`, `Seq`,
 * `Alias` and `Scalar` node. To define the same visitor function for more than
 * one node type, use the `Collection` (map and seq), `Value` (map, seq & scalar)
 * and `Node` (alias, map, seq & scalar) targets. Of all these, only the most
 * specific defined one will be used for each node.
 */
async function visitAsync(node, visitor) {
    const visitor_ = initVisitor(visitor);
    if (Node.isDocument(node)) {
        const cd = await visitAsync_(null, node.contents, visitor_, Object.freeze([node]));
        if (cd === REMOVE)
            node.contents = null;
    }
    else
        await visitAsync_(null, node, visitor_, Object.freeze([]));
}
// Without the `as symbol` casts, TS declares these in the `visit`
// namespace using `var`, but then complains about that because
// `unique symbol` must be `const`.
/** Terminate visit traversal completely */
visitAsync.BREAK = BREAK;
/** Do not visit the children of the current node */
visitAsync.SKIP = SKIP;
/** Remove the current node */
visitAsync.REMOVE = REMOVE;
async function visitAsync_(key, node, visitor, path) {
    const ctrl = await callVisitor(key, node, visitor, path);
    if (Node.isNode(ctrl) || Node.isPair(ctrl)) {
        replaceNode(key, path, ctrl);
        return visitAsync_(key, ctrl, visitor, path);
    }
    if (typeof ctrl !== 'symbol') {
        if (Node.isCollection(node)) {
            path = Object.freeze(path.concat(node));
            for (let i = 0; i < node.items.length; ++i) {
                const ci = await visitAsync_(i, node.items[i], visitor, path);
                if (typeof ci === 'number')
                    i = ci - 1;
                else if (ci === BREAK)
                    return BREAK;
                else if (ci === REMOVE) {
                    node.items.splice(i, 1);
                    i -= 1;
                }
            }
        }
        else if (Node.isPair(node)) {
            path = Object.freeze(path.concat(node));
            const ck = await visitAsync_('key', node.key, visitor, path);
            if (ck === BREAK)
                return BREAK;
            else if (ck === REMOVE)
                node.key = null;
            const cv = await visitAsync_('value', node.value, visitor, path);
            if (cv === BREAK)
                return BREAK;
            else if (cv === REMOVE)
                node.value = null;
        }
    }
    return ctrl;
}
function initVisitor(visitor) {
    if (typeof visitor === 'object' &&
        (visitor.Collection || visitor.Node || visitor.Value)) {
        return Object.assign({
            Alias: visitor.Node,
            Map: visitor.Node,
            Scalar: visitor.Node,
            Seq: visitor.Node
        }, visitor.Value && {
            Map: visitor.Value,
            Scalar: visitor.Value,
            Seq: visitor.Value
        }, visitor.Collection && {
            Map: visitor.Collection,
            Seq: visitor.Collection
        }, visitor);
    }
    return visitor;
}
function callVisitor(key, node, visitor, path) {
    if (typeof visitor === 'function')
        return visitor(key, node, path);
    if (Node.isMap(node))
        return visitor.Map?.(key, node, path);
    if (Node.isSeq(node))
        return visitor.Seq?.(key, node, path);
    if (Node.isPair(node))
        return visitor.Pair?.(key, node, path);
    if (Node.isScalar(node))
        return visitor.Scalar?.(key, node, path);
    if (Node.isAlias(node))
        return visitor.Alias?.(key, node, path);
    return undefined;
}
function replaceNode(key, path, node) {
    const parent = path[path.length - 1];
    if (Node.isCollection(parent)) {
        parent.items[key] = node;
    }
    else if (Node.isPair(parent)) {
        if (key === 'key')
            parent.key = node;
        else
            parent.value = node;
    }
    else if (Node.isDocument(parent)) {
        parent.contents = node;
    }
    else {
        const pt = Node.isAlias(parent) ? 'alias' : 'scalar';
        throw new Error(`Cannot replace node with ${pt} parent`);
    }
}

exports.visit = visit;
exports.visitAsync = visitAsync;


/***/ }),

/***/ 4348:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __nccwpck_require__) => {

/* c8 ignore start */
// 64 KiB (same size chrome slice theirs blob into Uint8array's)
const POOL_SIZE = 65536

if (!globalThis.ReadableStream) {
  // `node:stream/web` got introduced in v16.5.0 as experimental
  // and it's preferred over the polyfilled version. So we also
  // suppress the warning that gets emitted by NodeJS for using it.
  try {
    const process = __nccwpck_require__(7742)
    const { emitWarning } = process
    try {
      process.emitWarning = () => {}
      Object.assign(globalThis, __nccwpck_require__(2477))
      process.emitWarning = emitWarning
    } catch (error) {
      process.emitWarning = emitWarning
      throw error
    }
  } catch (error) {
    // fallback to polyfill implementation
    Object.assign(globalThis, __nccwpck_require__(6484))
  }
}

try {
  // Don't use node: prefix for this, require+node: is not supported until node v14.14
  // Only `import()` can use prefix in 12.20 and later
  const { Blob } = __nccwpck_require__(4300)
  if (Blob && !Blob.prototype.stream) {
    Blob.prototype.stream = function name (params) {
      let position = 0
      const blob = this

      return new ReadableStream({
        type: 'bytes',
        async pull (ctrl) {
          const chunk = blob.slice(position, Math.min(blob.size, position + POOL_SIZE))
          const buffer = await chunk.arrayBuffer()
          position += buffer.byteLength
          ctrl.enqueue(new Uint8Array(buffer))

          if (position === blob.size) {
            ctrl.close()
          }
        }
      })
    }
  }
} catch (error) {}
/* c8 ignore end */


/***/ }),

/***/ 5137:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __nccwpck_require__) => {


// EXPORTS
__nccwpck_require__.d(__webpack_exports__, {
  "xG": () => (/* reexport */ array),
  "eP": () => (/* reexport */ json),
  "Lz": () => (/* reexport */ number),
  "Pf": () => (/* reexport */ string),
  "yA": () => (/* reexport */ stringify_json)
});

// UNUSED EXPORTS: BigIntItemFilter, BigIntegerItemFilter, FunctionItemFilter, GeneratorItemFilter, JSONStringifiedItemFilter, JSONStringifyItemFilter, MapItemFilter, ObjectItemFilter, ObjectPlainItemFilter, PlainObjectItemFilter, RegExItemFilter, RegExpItemFilter, RegularExpressionItemFilter, SetItemFilter, StringifiedJSONItemFilter, areEqual, default, isArray, isBigInt, isBigInteger, isFunction, isGenerator, isJSON, isJSONStringified, isJSONStringify, isMap, isNumber, isObject, isObjectPlain, isPlainObject, isRegEx, isRegExp, isRegularExpression, isSet, isString, isStringifiedJSON, isStringifyJSON, typeOf

;// CONCATENATED MODULE: external "node:assert"
const external_node_assert_namespaceObject = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:assert");
;// CONCATENATED MODULE: ./node_modules/.pnpm/@hugoalh+advanced-determine@10.0.0/node_modules/@hugoalh/advanced-determine/lib/internal/object-meta.js
/**
 * @access private
 * @class ObjectMeta
 */
class ObjectMeta {
	/**
	 * @constructor
	 * @param {object} item
	 */
	constructor(item) {
		this.prototypes = Object.getPrototypeOf(item);
		this.symbolKeys = Object.getOwnPropertySymbols(item);
		this.descriptors = Object.getOwnPropertyDescriptors(item);
		this.configurableEntries = [];
		this.enumerableEntries = [];
		this.getterEntries = [];
		this.nonAccessorEntries = [];
		this.nonConfigurableEntries = [];
		this.nonEnumerableEntries = [];
		this.nonWritableEntries = [];
		this.setterEntries = [];
		this.writableEntries = [];
		for (let descriptor in this.descriptors) {
			if (Object.prototype.hasOwnProperty.call(this.descriptors, descriptor)) {
				let descriptorProperties = this.descriptors[descriptor];
				if (descriptorProperties.configurable) {
					this.configurableEntries.push(descriptor);
				} else {
					this.nonConfigurableEntries.push(descriptor);
				}
				if (descriptorProperties.enumerable) {
					this.enumerableEntries.push(descriptor);
				} else {
					this.nonEnumerableEntries.push(descriptor);
				}
				if (typeof descriptorProperties.get !== "undefined") {
					this.getterEntries.push(descriptor);
				}
				if (typeof descriptorProperties.set !== "undefined") {
					this.setterEntries.push(descriptor);
				}
				if (typeof descriptorProperties.get === "undefined" && typeof descriptorProperties.set === "undefined") {
					this.nonAccessorEntries.push(descriptor);
				}
				if (descriptorProperties.writable) {
					this.writableEntries.push(descriptor);
				} else {
					this.nonWritableEntries.push(descriptor);
				}
			}
		}
	}
}
/* harmony default export */ const object_meta = (ObjectMeta);

;// CONCATENATED MODULE: ./node_modules/.pnpm/@hugoalh+advanced-determine@10.0.0/node_modules/@hugoalh/advanced-determine/lib/type-of.js
/**
 * @function typeOf
 * @description Determine item type of the unevaluated operand.
 * @param {unknown} item Item that need to determine.
 * @returns {"array" | "bigint" | "boolean" | "function" | "nan" | "null" | "number" | "object" | "regexp" | "string" | "symbol" | "undefined"} Determine result.
 */
function typeOf(item) {
	let itemOriginalType = typeof item;
	if (itemOriginalType === "number") {
		if (Number.isNaN(item)) {
			return "nan";
		}
	} else if (itemOriginalType === "object") {
		if (Array.isArray(item)) {
			return "array";
		}
		if (item === null) {
			return "null";
		}
		if (item instanceof RegExp) {
			return "regexp";
		}
	}
	return itemOriginalType;
}
/* harmony default export */ const type_of = (typeOf);

;// CONCATENATED MODULE: ./node_modules/.pnpm/@hugoalh+advanced-determine@10.0.0/node_modules/@hugoalh/advanced-determine/lib/are-equal.js



/**
 * @access private
 * @function areEqualObjectMeta
 * @param {object} item1 Item 1.
 * @param {object} item2 Item 2.
 * @returns {boolean}
 */
function areEqualObjectMeta(item1, item2) {
	let item1ObjectMeta = new object_meta(item1);
	let item2ObjectMeta = new object_meta(item2);
	if (!areEqualInternal(item1ObjectMeta.prototypes, item2ObjectMeta.prototypes)) {
		return false;
	}
	if (item1ObjectMeta.symbolKeys.length !== item2ObjectMeta.symbolKeys.length) {
		return false;
	}
	for (let item1SymbolKey of item1ObjectMeta.symbolKeys) {
		if (
			!item2ObjectMeta.symbolKeys.includes(item1SymbolKey) ||
			!areEqualInternal(item1[item1SymbolKey], item2[item1SymbolKey])
		) {
			return false;
		}
	}
	if (Object.entries(item1ObjectMeta.descriptors).length !== Object.entries(item2ObjectMeta.descriptors).length) {
		return false;
	}
	if (
		item1ObjectMeta.configurableEntries.length !== item2ObjectMeta.configurableEntries.length ||
		item1ObjectMeta.enumerableEntries.length !== item2ObjectMeta.enumerableEntries.length ||
		item1ObjectMeta.getterEntries.length !== item2ObjectMeta.getterEntries.length ||
		item1ObjectMeta.nonAccessorEntries.length !== item2ObjectMeta.nonAccessorEntries.length ||
		item1ObjectMeta.nonConfigurableEntries.length !== item2ObjectMeta.nonConfigurableEntries.length ||
		item1ObjectMeta.nonEnumerableEntries.length !== item2ObjectMeta.nonEnumerableEntries.length ||
		item1ObjectMeta.nonWritableEntries.length !== item2ObjectMeta.nonWritableEntries.length ||
		item1ObjectMeta.setterEntries.length !== item2ObjectMeta.setterEntries.length ||
		item1ObjectMeta.writableEntries.length !== item2ObjectMeta.writableEntries.length
	) {
		return false;
	}
	for (let item1ConfigurableEntry of item1ObjectMeta.configurableEntries) {
		if (!item2ObjectMeta.configurableEntries.includes(item1ConfigurableEntry)) {
			return false;
		}
	}
	for (let item1EnumerableEntry of item1ObjectMeta.enumerableEntries) {
		if (!item2ObjectMeta.enumerableEntries.includes(item1EnumerableEntry)) {
			return false;
		}
	}
	for (let item1GetterEntry of item1ObjectMeta.getterEntries) {
		if (
			!item2ObjectMeta.getterEntries.includes(item1GetterEntry) ||
			!areEqualInternal(item1[item1GetterEntry], item2[item1GetterEntry])
		) {
			return false;
		}
	}
	for (let item1NonAccessorEntry of item1ObjectMeta.nonAccessorEntries) {
		if (
			!item2ObjectMeta.nonAccessorEntries.includes(item1NonAccessorEntry) ||
			!areEqualInternal(item1[item1NonAccessorEntry], item2[item1NonAccessorEntry])
		) {
			return false;
		}
	}
	for (let item1NonConfigurableEntry of item1ObjectMeta.nonConfigurableEntries) {
		if (!item2ObjectMeta.nonConfigurableEntries.includes(item1NonConfigurableEntry)) {
			return false;
		}
	}
	for (let item1NonEnumerableEntry of item1ObjectMeta.nonEnumerableEntries) {
		if (!item2ObjectMeta.nonEnumerableEntries.includes(item1NonEnumerableEntry)) {
			return false;
		}
	}
	for (let item1NonWritableEntry of item1ObjectMeta.nonWritableEntries) {
		if (!item2ObjectMeta.nonWritableEntries.includes(item1NonWritableEntry)) {
			return false;
		}
	}
	for (let item1SetterEntry of item1ObjectMeta.setterEntries) {
		if (
			!item2ObjectMeta.setterEntries.includes(item1SetterEntry) ||
			!areEqualInternal(item1[item1SetterEntry], item2[item1SetterEntry])
		) {
			return false;
		}
	}
	for (let item1WritableEntry of item1ObjectMeta.writableEntries) {
		if (!item2ObjectMeta.writableEntries.includes(item1WritableEntry)) {
			return false;
		}
	}
	return true;
}
/**
 * @access private
 * @function areEqualInternal
 * @param {unknown} item1 Item 1.
 * @param {unknown} item2 Item 2.
 * @returns {boolean}
 */
function areEqualInternal(item1, item2) {
	if (item1 === item2) {
		return true;
	}
	let item1TypeOf = type_of(item1);
	let item2TypeOf = type_of(item2);
	if (
		item1TypeOf !== item2TypeOf ||
		item1TypeOf === "bigint" ||
		item1TypeOf === "boolean" ||
		item1TypeOf === "nan" ||
		item1TypeOf === "null" ||
		item1TypeOf === "number" ||
		item1TypeOf === "string" ||
		item1TypeOf === "symbol" ||
		item1TypeOf === "undefined"
	) {
		return false;
	}
	if (item1 instanceof Map && item2 instanceof Map) {
		if (item1.size !== item2.size) {
			return false;
		}
		if (areEqualInternal(Array.from(item1.entries()), Array.from(item2.entries()))) {
			return true;
		}
		let item2Keys = Array.from(item2.keys());
		let item2Values = Array.from(item2.values());
		for (let [item1Key, item1Value] of item1.entries()) {
			let matchItem2KeysIndexes = [];
			item2Keys.forEach((item2Key, item2KeysIndex) => {
				if (
					(type_of(item1Key) === "nan" && type_of(item2Key) === "nan") ||
					areEqualInternal(item1Key, item2Key)
				) {
					matchItem2KeysIndexes.push(item2KeysIndex);
				}
			});
			if (matchItem2KeysIndexes.length === 0) {
				return false;
			}
			if (matchItem2KeysIndexes.some((matchItem2KeysIndex) => {
				let matchItem2Value = item2Values[matchItem2KeysIndex];
				return !(
					(type_of(item1Value) === "nan" && type_of(matchItem2Value) === "nan") ||
					areEqualInternal(item1Value, matchItem2Value)
				);
			})) {
				return false;
			}
		}
		return true;
	}
	if (item1 instanceof RegExp && item2 instanceof RegExp) {
		return (item1.flags === item2.flags && item1.source === item2.source);
	}
	if (item1 instanceof Set && item2 instanceof Set) {
		if (item1.size !== item2.size) {
			return false;
		}
		if (areEqualInternal(Array.from(item1.values()), Array.from(item2.values()))) {
			return true;
		}
		for (let item1Value of item1.values()) {
			let matchItem2Values = [];
			for (let item2Value of item2.values()) {
				if (
					(type_of(item1Value) === "nan" && type_of(item2Value) === "nan") ||
					areEqualInternal(item1Value, item2Value)
				) {
					matchItem2Values.push(item2Value);
				}
			}
			if (matchItem2Values.length === 0) {
				return false;
			}
		}
		return true;
	}
	if (
		(item1TypeOf === "array" && item2TypeOf === "array") ||
		(item1TypeOf === "object" && item2TypeOf === "object")
	) {
		return ((Object.entries(item1).length === Object.entries(item2).length) ? areEqualObjectMeta(item1, item2) : false);
	}
	try {
		(0,external_node_assert_namespaceObject.notDeepStrictEqual)(item1, item2);
	} catch {
		return true;
	}
	return false;
}
/**
 * @function areEqual
 * @description Determine items are equal or not.
 * @param {...unknown} items Items that need to determine.
 * @returns {boolean} Determine result.
 */
function areEqual(...items) {
	switch (items.length) {
		case 0:
			throw new ReferenceError(`Argument \`items\` is not defined.`);
		case 1:
		case 2:
			return areEqualInternal(...items);
		default:
			for (let index = 0; index < items.length - 1; index++) {
				if (!areEqualInternal(items[index], items[index + 1])) {
					return false;
				}
			}
			return true;
	}
}
/* harmony default export */ const are_equal = (areEqual);

;// CONCATENATED MODULE: ./node_modules/.pnpm/@hugoalh+advanced-determine@10.0.0/node_modules/@hugoalh/advanced-determine/lib/internal/check-item.js
/**
 * @access private
 * @function checkNumber
 * @param {unknown} item
 * @returns {boolean}
 */
function checkNumber(item) {
	return (typeof item === "number" && !Number.isNaN(item));
}
/**
 * @access private
 * @function checkNumberWithMaximum
 * @param {unknown} item
 * @param {number} maximum
 * @returns {boolean}
 */
function checkNumberWithMaximum(item, maximum) {
	return (checkNumber(item) && item <= maximum);
}
/**
 * @access private
 * @function checkNumberIPS
 * @param {unknown} item
 * @returns {boolean}
 */
function checkNumberIPS(item) {
	return (checkNumber(item) && Number.isSafeInteger(item) && item >= 0);
}
/**
 * @access private
 * @function checkNumberIPSWithMaximum
 * @param {unknown} item
 * @param {number} maximum
 * @returns {boolean}
 */
function checkNumberIPSWithMaximum(item, maximum) {
	return (checkNumberIPS(item) && item <= maximum);
}


;// CONCATENATED MODULE: ./node_modules/.pnpm/@hugoalh+undefinish@1.0.18/node_modules/@hugoalh/undefinish/lib/main.mjs
/**
 * @function undefinish
 * @description Undefinish coalescing.
 * @param {...unknown} inputs
 * @returns {unknown}
 */
function undefinish(...inputs) {
	for (let input of inputs) {
		if (typeof input !== "undefined") {
			return input;
		}
	}
	return undefined;
}
/* harmony default export */ const main = (undefinish);

;// CONCATENATED MODULE: ./node_modules/.pnpm/@hugoalh+advanced-determine@10.0.0/node_modules/@hugoalh/advanced-determine/lib/item-filter/array.js


/**
 * @class ArrayItemFilter
 * @description Determine item with the filter of type of array.
 */
class ArrayItemFilter {
	#maximumLength;
	#minimumLength;
	#strict;
	#unique;
	/**
	 * @constructor
	 * @description Initialize the filter of type of array to determine item.
	 * @param {object} [param0={}] Options.
	 * @param {boolean} [param0.allowEmpty=false] Whether to allow an empty array.
	 * @param {number} [param0.maximumLength=Infinity] Maximum length of the array.
	 * @param {number} [param0.minimumLength=1] Minimum length of the array.
	 * @param {boolean} [param0.strict=false] Whether to determine no custom defined properties in the array.
	 * @param {boolean} [param0.unique=false] Whether to determine all of the elements in the array are unique.
	 */
	constructor({
		allowEmpty = false,
		maximumLength,
		minimumLength,
		strict = false,
		unique = false,
		...aliases
	} = {}) {
		if (typeof allowEmpty !== "boolean") {
			throw new TypeError(`Argument \`allowEmpty\` must be type of boolean.`);
		}
		maximumLength = main(maximumLength, aliases.maxLength, aliases.maximumElements, aliases.maxElements, Infinity);
		if (maximumLength !== Infinity && !checkNumberIPS(maximumLength)) {
			throw new TypeError(`Argument \`maximumLength\` must be \`Infinity\` or type of number (integer, positive, and safe).`);
		}
		minimumLength = main(minimumLength, aliases.minLength, aliases.minimumElements, aliases.minElements, 1);
		if (!checkNumberIPSWithMaximum(minimumLength, maximumLength)) {
			throw new TypeError(`Argument \`minimumLength\` must be type of number (integer, positive, and safe) and <= ${maximumLength}.`);
		}
		if (typeof strict !== "boolean") {
			throw new TypeError(`Argument \`strict\` must be type of boolean.`);
		}
		if (typeof unique !== "boolean") {
			throw new TypeError(`Argument \`unique\` must be type of boolean.`);
		}
		this.#maximumLength = maximumLength;
		this.#minimumLength = allowEmpty ? 0 : minimumLength;
		this.#strict = strict;
		this.#unique = unique;
	}
	/**
	 * @method test
	 * @description Determine item with the configured filter of type of array.
	 * @param {unknown} item Item that need to determine.
	 * @returns {boolean} Determine result.
	 */
	test(item) {
		if (
			!Array.isArray(item) ||
			!(item instanceof Array) ||
			item.constructor.name !== "Array" ||
			Object.prototype.toString.call(item) !== "[object Array]"
		) {
			return false;
		}
		if (this.#strict) {
			let itemPrototype = Object.getPrototypeOf(item);
			if (
				(itemPrototype !== null && itemPrototype !== Array.prototype) ||
				Object.getOwnPropertySymbols(item).length > 0
			) {
				return false;
			}
			let itemDescriptors = Object.getOwnPropertyDescriptors(item);
			for (let itemPropertyKey in itemDescriptors) {
				if (Object.prototype.hasOwnProperty.call(itemDescriptors, itemPropertyKey)) {
					if (itemPropertyKey.search(/^(?:0|[1-9]\d*)$/u) === 0 && Number(itemPropertyKey) < 4294967296) {
						let itemPropertyDescriptor = itemDescriptors[itemPropertyKey];
						if (
							!itemPropertyDescriptor.configurable ||
							!itemPropertyDescriptor.enumerable ||
							typeof itemPropertyDescriptor.get !== "undefined" ||
							typeof itemPropertyDescriptor.set !== "undefined" ||
							!itemPropertyDescriptor.writable
						) {
							return false;
						}
					} else if (itemPropertyKey === "length") {
						let itemPropertyDescriptor = itemDescriptors[itemPropertyKey];
						if (
							itemPropertyDescriptor.configurable ||
							itemPropertyDescriptor.enumerable ||
							typeof itemPropertyDescriptor.get !== "undefined" ||
							typeof itemPropertyDescriptor.set !== "undefined" ||
							!itemPropertyDescriptor.writable
						) {
							return false;
						}
					} else {
						return false;
					}
				}
			}
		}
		if (
			Object.entries(item).length !== item.length ||
			this.#maximumLength < item.length ||
			item.length < this.#minimumLength ||
			(this.#unique && new Set(item).size !== item.length)
		) {
			return false;
		}
		return true;
	}
}
/* harmony default export */ const array = (ArrayItemFilter);

;// CONCATENATED MODULE: ./node_modules/.pnpm/@hugoalh+advanced-determine@10.0.0/node_modules/@hugoalh/advanced-determine/lib/internal/integer-types-range.js
const grid8 = 2n ** 8n;
const grid16 = 2n ** 16n;
const grid32 = 2n ** 32n;
const grid64 = 2n ** 64n;
/**
 * @access private
 * @function integerTypesRangeInt
 * @param {bigint} grid Grid.
 * @returns {[bigint, bigint]}
 */
function integerTypesRangeInt(grid) {
	let gridHalf = grid / 2n;
	return [-gridHalf, gridHalf - 1n];
}
/**
 * @access private
 * @function integerTypesRangeUInt
 * @param {bigint} grid Grid.
 * @returns {[bigint, bigint]}
 */
function integerTypesRangeUInt(grid) {
	return [0n, grid - 1n];
}
/**
 * @typedef {boolean} AsNumber Whether to return result as type of number.
 */
/**
 * @access private
 * @function integerTypesRangeOutput
 * @template {AsNumber} T
 * @param {[bigint, bigint]} output Output.
 * @param {T} [asNumber=false] Whether to return result as type of number.
 * @returns {T extends true ? [number, number] : [bigint, bigint]}
 */
function integerTypesRangeOutput(output, asNumber = false) {
	if (asNumber) {
		return output.map((value) => {
			return Number(value);
		});
	}
	return output;
}
/**
 * @access private
 * @function integerTypesRange
 * @param {string} name Name of the integer type.
 * @param {AsNumber} [asNumber=false] Whether to return result as type of number.
 * @returns {ReturnType<typeof integerTypesRangeOutput>}
 */
function integerTypesRange(name, asNumber = false) {
	switch (name) {
		case "char":
		case "Char":
		case "int8":
		case "Int8":
			return integerTypesRangeOutput(integerTypesRangeInt(grid8), asNumber);
		case "int16":
		case "Int16":
		case "short":
		case "Short":
			return integerTypesRangeOutput(integerTypesRangeInt(grid16), asNumber);
		case "int32":
		case "Int32":
		case "rune":
		case "Rune":
			return integerTypesRangeOutput(integerTypesRangeInt(grid32), asNumber);
		case "int64":
		case "Int64":
		case "long":
		case "Long":
			return integerTypesRangeOutput(integerTypesRangeInt(grid64), asNumber);
		case "byte":
		case "Byte":
		case "uchar":
		case "Uchar":
		case "UChar":
		case "uint8":
		case "Uint8":
		case "UInt8":
			return integerTypesRangeOutput(integerTypesRangeUInt(grid8), asNumber);
		case "uint16":
		case "Uint16":
		case "UInt16":
		case "ushort":
		case "Ushort":
		case "UShort":
			return integerTypesRangeOutput(integerTypesRangeUInt(grid16), asNumber);
		case "uint32":
		case "Uint32":
		case "UInt32":
			return integerTypesRangeOutput(integerTypesRangeUInt(grid32), asNumber);
		case "uint64":
		case "Uint64":
		case "UInt64":
		case "ulong":
		case "Ulong":
		case "ULong":
			return integerTypesRangeOutput(integerTypesRangeUInt(grid64), asNumber);
		default:
			throw new RangeError(`\`${name}\` is not a valid interger type.`);
	}
}
/* harmony default export */ const integer_types_range = (integerTypesRange);

;// CONCATENATED MODULE: ./node_modules/.pnpm/@hugoalh+advanced-determine@10.0.0/node_modules/@hugoalh/advanced-determine/lib/internal/is-prime-number.js
/**
 * @access private
 * @function bigIntegerSquareRoot
 * @param {bigint} n
 * @returns {bigint}
 * @note From https://stackoverflow.com/a/53684036.
 */
function bigIntegerSquareRoot(n) {
	let x0 = 1n;
	while (true) {
		let x1 = (n / x0 + x0) >> 1n;
		if (
			x0 === x1 ||
			x0 === x1 - 1n
		) {
			return x0;
		}
		x0 = x1;
	}
}
/**
 * @access private
 * @function isPrimeNumber
 * @param {bigint | number} item
 * @returns {boolean}
 */
function isPrimeNumber(item) {
	let itemRaw = (typeof item === "bigint") ? item : BigInt(item);
	if (
		itemRaw === 2n ||
		itemRaw === 3n ||
		itemRaw === 5n ||
		itemRaw === 7n
	) {
		return true;
	}
	if (
		itemRaw < 2n ||
		itemRaw % 2n === 0n ||
		itemRaw % 3n === 0n ||
		itemRaw % 5n === 0n ||
		itemRaw % 7n === 0n
	) {
		return false;
	}
	for (let divisor = 3n; divisor <= bigIntegerSquareRoot(itemRaw) + 1n; divisor += 2n) {
		if (itemRaw % divisor === 0n) {
			return false;
		}
	}
	return true;
}
/* harmony default export */ const is_prime_number = (isPrimeNumber);

;// CONCATENATED MODULE: ./node_modules/.pnpm/@hugoalh+advanced-determine@10.0.0/node_modules/@hugoalh/advanced-determine/lib/item-filter/big-integer.js



const maximumSafeInteger = BigInt(Number.MAX_SAFE_INTEGER);
const minimumSafeInteger = BigInt(Number.MIN_SAFE_INTEGER);
/**
 * @class BigIntegerItemFilter
 * @alias BigIntItemFilter
 * @description Determine item with the filter of type of big integer.
 */
class BigIntegerItemFilter {
	#even;
	#exclusiveMaximum;
	#exclusiveMinimum;
	#maximum;
	#minimum;
	#negative;
	#odd;
	#positive;
	#prime;
	#safe;
	#unsafe;
	/**
	 * @constructor
	 * @description Initialize the filter of type of big integer to determine item.
	 * @param {object} [param0={}] Options.
	 * @param {boolean} [param0.even] Whether an even big integer.
	 * @param {boolean} [param0.exclusiveMaximum=false] Whether to exclusive maximum of the big integer.
	 * @param {boolean} [param0.exclusiveMinimum=false] Whether to exclusive minimum of the big integer.
	 * @param {bigint} [param0.maximum=Infinity] Maximum of the big integer.
	 * @param {bigint} [param0.minimum=-Infinity] Minimum of the big integer.
	 * @param {boolean} [param0.negative] Whether a negative big integer.
	 * @param {boolean} [param0.odd] Whether an odd big integer.
	 * @param {boolean} [param0.positive] Whether a positive big integer.
	 * @param {boolean} [param0.prime] Whether a prime big integer.
	 * @param {boolean} [param0.safe] Whether an IEEE-754 big integer.
	 * @param {string} [param0.type] Type of the big integer.
	 * @param {boolean} [param0.unsafe] Whether not an IEEE-754 big integer.
	 */
	constructor({
		even,
		exclusiveMaximum,
		exclusiveMinimum,
		maximum,
		minimum,
		negative,
		odd,
		positive,
		prime,
		safe,
		type,
		unsafe,
		...aliases
	} = {}) {
		if (typeof even !== "boolean" && typeof even !== "undefined") {
			throw new TypeError(`Argument \`even\` must be type of boolean or undefined.`);
		}
		exclusiveMaximum = main(exclusiveMaximum, aliases.exclusiveMax, false);
		if (typeof exclusiveMaximum !== "boolean") {
			throw new TypeError(`Argument \`exclusiveMaximum\` must be type of boolean.`);
		}
		exclusiveMinimum = main(exclusiveMinimum, aliases.exclusiveMin, false);
		if (typeof exclusiveMinimum !== "boolean") {
			throw new TypeError(`Argument \`exclusiveMinimum\` must be type of boolean.`);
		}
		maximum = main(maximum, aliases.max, Infinity);
		if (maximum !== Infinity && typeof maximum !== "bigint") {
			throw new TypeError(`Argument \`maximum\` must be \`Infinity\` or type of big integer.`);
		}
		minimum = main(minimum, aliases.min, -Infinity);
		if (minimum !== -Infinity && !(typeof minimum === "bigint" && minimum <= maximum)) {
			throw new TypeError(`Argument \`minimum\` must be \`-Infinity\`, or type of big integer and <= ${maximum}.`);
		}
		negative = main(negative, aliases.ngt, aliases.nega);
		if (typeof negative !== "boolean" && typeof negative !== "undefined") {
			throw new TypeError(`Argument \`negative\` must be type of boolean or undefined.`);
		}
		if (typeof odd !== "boolean" && typeof odd !== "undefined") {
			throw new TypeError(`Argument \`odd\` must be type of boolean or undefined.`);
		}
		positive = main(positive, aliases.pst, aliases.posi);
		if (typeof positive !== "boolean" && typeof positive !== "undefined") {
			throw new TypeError(`Argument \`positive\` must be type of boolean or undefined.`);
		}
		if (typeof prime !== "boolean" && typeof prime !== "undefined") {
			throw new TypeError(`Argument \`prime\` must be type of boolean or undefined.`);
		}
		if (typeof safe !== "boolean" && typeof safe !== "undefined") {
			throw new TypeError(`Argument \`safe\` must be type of boolean or undefined.`);
		}
		if (typeof unsafe !== "boolean" && typeof unsafe !== "undefined") {
			throw new TypeError(`Argument \`unsafe\` must be type of boolean or undefined.`);
		}
		if (typeof type === "string") {
			this.#exclusiveMaximum = false;
			this.#exclusiveMinimum = false;
			[this.#minimum, this.#maximum] = integer_types_range(type);
		} else if (typeof type === "undefined") {
			this.#exclusiveMaximum = exclusiveMaximum;
			this.#exclusiveMinimum = exclusiveMinimum;
			this.#maximum = maximum;
			this.#minimum = minimum;
		} else {
			throw new TypeError(`Argument \`type\` must be type of string or undefined.`);
		}
		this.#even = even;
		this.#negative = negative;
		this.#odd = odd;
		this.#positive = positive;
		this.#prime = prime;
		this.#safe = safe;
		this.#unsafe = unsafe;
	}
	/**
	 * @method test
	 * @description Determine item with the configured filter of type of big integer.
	 * @param {unknown} item Item that need to determine.
	 * @returns {boolean} Determine result.
	 */
	test(item) {
		if (
			typeof item !== "bigint" ||
			(this.#even === false && item % 2n === 0n) ||
			(this.#even === true && item % 2n !== 0n) ||
			(this.#exclusiveMaximum && this.#maximum <= item) ||
			(!this.#exclusiveMaximum && this.#maximum < item) ||
			(this.#exclusiveMinimum && item <= this.#minimum) ||
			(!this.#exclusiveMinimum && item < this.#minimum) ||
			((
				this.#negative === true ||
				this.#positive === false
			) && item >= 0n) ||
			((
				this.#positive === true ||
				this.#negative === false
			) && item < 0n) ||
			(this.#odd === false && item % 2n !== 0n) ||
			(this.#odd === true && item % 2n === 0n) ||
			(this.#prime === false && is_prime_number(item)) ||
			(this.#prime === true && !is_prime_number(item)) ||
			(
				(
					this.#safe === true ||
					this.#unsafe === false
				) && (
					maximumSafeInteger < item ||
					item < minimumSafeInteger
				)
			) ||
			((
				this.#unsafe === true ||
				this.#safe === false
			) && minimumSafeInteger <= item && item <= maximumSafeInteger)
		) {
			return false;
		}
		return true;
	}
}
/* harmony default export */ const big_integer = (BigIntegerItemFilter);

// EXTERNAL MODULE: external "node:util"
var external_node_util_ = __nccwpck_require__(7261);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@hugoalh+advanced-determine@10.0.0/node_modules/@hugoalh/advanced-determine/lib/item-filter/function.js


/**
 * @class FunctionItemFilter
 * @description Determine item with the filter of type of function.
 */
class FunctionItemFilter {
	#asynchronous;
	#constructorNameRegExp;
	#generator;
	#objectStringRegExp;
	/**
	 * @constructor
	 * @description Initialize the filter of type of function to determine item.
	 * @param {object} [param0={}] Options.
	 * @param {boolean} [param0.asynchronous] Whether an asynchronous function.
	 * @param {boolean} [param0.generator] Whether a generator function.
	 * @returns {boolean} Determine result.
	 */
	constructor({
		asynchronous,
		generator,
		...aliases
	} = {}) {
		asynchronous = main(asynchronous, aliases.async);
		if (typeof asynchronous !== "boolean" && typeof asynchronous !== "undefined") {
			throw new TypeError(`Argument \`asynchronous\` must be type of boolean or undefined.`);
		}
		if (typeof generator !== "boolean" && typeof generator !== "undefined") {
			throw new TypeError(`Argument \`generator\` must be type of boolean or undefined.`);
		}
		let constructorNameRegExpPattern = `${(asynchronous === false) ? "" : "(?:Async)"}${(typeof asynchronous === "undefined") ? "?" : ""}${(generator === false) ? "" : "(?:Generator)"}${(typeof generator === "undefined") ? "?" : ""}Function`;
		this.#asynchronous = asynchronous;
		this.#constructorNameRegExp = new RegExp(`^${constructorNameRegExpPattern}$`, "u");
		this.#generator = generator;
		this.#objectStringRegExp = new RegExp(`^\\[object ${constructorNameRegExpPattern}\\]$`, "u");
	}
	/**
	 * @method test
	 * @description Determine item with the configured filter of type of function.
	 * @param {unknown} item Item that need to determine.
	 * @returns {boolean} Determine result.
	 */
	test(item) {
		if (
			typeof item !== "function" ||
			(this.#asynchronous === false && external_node_util_.types.isAsyncFunction(item)) ||
			(this.#asynchronous === true && !external_node_util_.types.isAsyncFunction(item)) ||
			(this.#generator === false && external_node_util_.types.isGeneratorFunction(item)) ||
			(this.#generator === true && !external_node_util_.types.isGeneratorFunction(item)) ||
			item.constructor.name.search(this.#constructorNameRegExp) !== 0 ||
			Object.prototype.toString.call(item).search(this.#objectStringRegExp) !== 0
		) {
			return false;
		}
		return true;
	}
}
/* harmony default export */ const item_filter_function = (FunctionItemFilter);

;// CONCATENATED MODULE: ./node_modules/.pnpm/@hugoalh+advanced-determine@10.0.0/node_modules/@hugoalh/advanced-determine/lib/item-filter/object.js
/**
 * @class ObjectItemFilter
 * @description Determine item with the filter of type of object.
 */
class ObjectItemFilter {
	/**
	 * @constructor
	 * @description Initialize the filter of type of object to determine item.
	 */
	constructor() { }// Use to add description during create instance.
	/**
	 * @method test
	 * @description Determine item with the configured filter of type of object.
	 * @param {unknown} item Item that need to determine.
	 * @returns {boolean} Determine result.
	 */
	test(item) {
		return (typeof item === "object" && !Array.isArray(item) && item !== null && !(item instanceof RegExp));
	}
}
/* harmony default export */ const object = (ObjectItemFilter);

;// CONCATENATED MODULE: ./node_modules/.pnpm/@hugoalh+advanced-determine@10.0.0/node_modules/@hugoalh/advanced-determine/lib/item-filter/generator.js



/**
 * @class GeneratorItemFilter
 * @description Determine item with the filter of type of generator.
 */
class GeneratorItemFilter {
	#objectStringRegExp;
	/**
	 * @constructor
	 * @description Initialize the filter of type of generator to determine item.
	 * @param {object} [param0={}] Options.
	 * @param {boolean} [param0.asynchronous] Whether an asynchronous generator.
	 */
	constructor({
		asynchronous,
		...aliases
	} = {}) {
		asynchronous = main(asynchronous, aliases.async);
		if (typeof asynchronous !== "boolean" && typeof asynchronous !== "undefined") {
			throw new TypeError(`Argument \`asynchronous\` must be type of boolean or undefined.`);
		}
		this.#objectStringRegExp = new RegExp(`^\\[object ${(asynchronous === false) ? "" : "(?:Async)"}${(typeof asynchronous === "undefined") ? "?" : ""}Generator\\]$`, "u");
	}
	/**
	 * @method test
	 * @description Determine item with the configured filter of type of generator.
	 * @param {unknown} item Item that need to determine.
	 * @returns {boolean} Determine result.
	 */
	test(item) {
		if (
			!(new object().test(item)) ||
			!external_node_util_.types.isGeneratorObject(item) ||
			Object.prototype.toString.call(item).search(this.#objectStringRegExp) !== 0 ||
			typeof item.next !== "function" ||
			typeof item.return !== "function" ||
			typeof item.throw !== "function"
		) {
			return false;
		}
		return true;
	}
}
/* harmony default export */ const generator = (GeneratorItemFilter);

;// CONCATENATED MODULE: ./node_modules/.pnpm/@hugoalh+advanced-determine@10.0.0/node_modules/@hugoalh/advanced-determine/lib/is/array.js

/**
 * @function isArray
 * @description Determine item with the filter of type of array.
 * @param {unknown} item Item that need to determine.
 * @param {object} [param1={}] Options.
 * @param {boolean} [param1.allowEmpty=false] Whether to allow an empty array.
 * @param {number} [param1.maximumLength=Infinity] Maximum length of the array.
 * @param {number} [param1.minimumLength=1] Minimum length of the array.
 * @param {boolean} [param1.strict=false] Whether to determine no custom defined properties in the array.
 * @param {boolean} [param1.unique=false] Whether to determine all of the elements in the array are unique.
 * @returns {boolean} Determine result.
 */
function isArray(item, {
	allowEmpty = false,
	maximumLength,
	minimumLength,
	strict = false,
	unique = false,
	...aliases
} = {}) {
	return new array({
		allowEmpty,
		maximumLength,
		minimumLength,
		strict,
		unique,
		...aliases
	}).test(item);
}
/* harmony default export */ const is_array = (isArray);

;// CONCATENATED MODULE: ./node_modules/.pnpm/@hugoalh+advanced-determine@10.0.0/node_modules/@hugoalh/advanced-determine/lib/is/big-integer.js

/**
 * @function isBigInteger
 * @alias isBigInt
 * @description Determine item with the filter of type of big integer.
 * @param {unknown} item Item that need to determine.
 * @param {object} [param1={}] Options.
 * @param {boolean} [param1.even] Whether an even big integer.
 * @param {boolean} [param1.exclusiveMaximum=false] Whether to exclusive maximum of the big integer.
 * @param {boolean} [param1.exclusiveMinimum=false] Whether to exclusive minimum of the big integer.
 * @param {bigint} [param1.maximum=Infinity] Maximum of the big integer.
 * @param {bigint} [param1.minimum=-Infinity] Minimum of the big integer.
 * @param {boolean} [param1.negative] Whether a negative big integer.
 * @param {boolean} [param1.odd] Whether an odd big integer.
 * @param {boolean} [param1.positive] Whether a positive big integer.
 * @param {boolean} [param1.prime] Whether a prime big integer.
 * @param {boolean} [param1.safe] Whether an IEEE-754 big integer.
 * @param {string} [param1.type] Type of the big integer.
 * @param {boolean} [param1.unsafe] Whether not an IEEE-754 big integer.
 * @returns {boolean} Determine result.
 */
function isBigInteger(item, {
	even,
	exclusiveMaximum,
	exclusiveMinimum,
	maximum,
	minimum,
	negative,
	odd,
	positive,
	prime,
	safe,
	type,
	unsafe,
	...aliases
} = {}) {
	return new big_integer({
		even,
		exclusiveMaximum,
		exclusiveMinimum,
		maximum,
		minimum,
		negative,
		odd,
		positive,
		prime,
		safe,
		type,
		unsafe,
		...aliases
	}).test(item);
}
/* harmony default export */ const is_big_integer = (isBigInteger);

;// CONCATENATED MODULE: ./node_modules/.pnpm/@hugoalh+advanced-determine@10.0.0/node_modules/@hugoalh/advanced-determine/lib/is/function.js

/**
 * @function isFunction
 * @description Determine item with the filter of type of function.
 * @param {unknown} item Item that need to determine.
 * @param {object} [param1={}] Options.
 * @param {boolean} [param1.asynchronous] Whether an asynchronous function.
 * @param {boolean} [param1.generator] Whether a generator function.
 * @returns {boolean} Determine result.
 */
function isFunction(item, {
	asynchronous,
	generator,
	...aliases
} = {}) {
	return new item_filter_function({
		asynchronous,
		generator,
		...aliases
	}).test(item);
}
/* harmony default export */ const is_function = (isFunction);

;// CONCATENATED MODULE: ./node_modules/.pnpm/@hugoalh+advanced-determine@10.0.0/node_modules/@hugoalh/advanced-determine/lib/is/generator.js

/**
 * @function isGenerator
 * @description Determine item with the filter of type of generator.
 * @param {unknown} item Item that need to determine.
 * @param {object} [param1={}] Options.
 * @param {boolean} [param1.asynchronous] Whether an asynchronous generator.
 * @returns {boolean} Determine result.
 */
function isGenerator(item, {
	asynchronous,
	...aliases
} = {}) {
	return new generator({
		asynchronous,
		...aliases
	}).test(item);
}
/* harmony default export */ const is_generator = (isGenerator);

;// CONCATENATED MODULE: ./node_modules/.pnpm/@hugoalh+advanced-determine@10.0.0/node_modules/@hugoalh/advanced-determine/lib/item-filter/plain-object.js




/**
 * @class PlainObjectItemFilter
 * @alias ObjectPlainItemFilter
 * @description Determine item with the filter of type of plain object.
 */
class PlainObjectItemFilter {
	#configurableEntries;
	#enumerableEntries;
	#getterEntries;
	#maximumEntries;
	#minimumEntries;
	#setterEntries;
	#symbolKeys;
	#writableEntries;
	/**
	 * @constructor
	 * @description Initialize the filter of type of plain object to determine item.
	 * @param {object} [param0={}] Options.
	 * @param {boolean} [param0.allowEmpty=false] Whether to allow an empty plain object.
	 * @param {boolean} [param0.configurableEntries] Whether contain configurable entries in the plain object.
	 * @param {boolean} [param0.enumerableEntries] Whether contain enumerable entries in the plain object.
	 * @param {boolean} [param0.getterEntries] Whether contain getter entries in the plain object.
	 * @param {number} [param0.maximumEntries=Infinity] Maximum entries of the plain object.
	 * @param {number} [param0.minimumEntries=1] Minimum entries of the plain object.
	 * @param {boolean} [param0.setterEntries] Whether contain setter entries in the plain object.
	 * @param {boolean} [param0.strict=false] Whether to determine no custom defined properties (i.e.: getters, setters, non-configurable, non-enumerable, and non-writable) in the plain object, and no symbols in the plain object keys.
	 * @param {boolean} [param0.symbolKeys] Whether contain symbols in the plain object keys.
	 * @param {boolean} [param0.writableEntries] Whether contain writable entries in the plain object.
	 */
	constructor({
		allowEmpty = false,
		configurableEntries,
		enumerableEntries,
		getterEntries,
		maximumEntries,
		minimumEntries,
		setterEntries,
		strict = false,
		symbolKeys,
		writableEntries,
		...aliases
	} = {}) {
		if (typeof allowEmpty !== "boolean") {
			throw new TypeError(`Argument \`allowEmpty\` must be type of boolean.`);
		}
		if (typeof configurableEntries !== "boolean" && typeof configurableEntries !== "undefined") {
			throw new TypeError(`Argument \`configurableEntries\` must be type of boolean or undefined.`);
		}
		if (typeof enumerableEntries !== "boolean" && typeof enumerableEntries !== "undefined") {
			throw new TypeError(`Argument \`elementsEnumerable\` must be type of boolean or undefined.`);
		}
		if (typeof getterEntries !== "boolean" && typeof getterEntries !== "undefined") {
			throw new TypeError(`Argument \`getterEntries\` must be type of boolean or undefined.`);
		}
		maximumEntries = main(maximumEntries, aliases.maxEntries, Infinity);
		if (maximumEntries !== Infinity && !checkNumberIPS(maximumEntries)) {
			throw new TypeError(`Argument \`maximumEntries\` must be \`Infinity\` or type of number (integer, positive, and safe).`);
		}
		minimumEntries = main(minimumEntries, aliases.minEntries, 1);
		if (!checkNumberIPSWithMaximum(minimumEntries, maximumEntries)) {
			throw new TypeError(`Argument \`minimumEntries\` must be type of number (integer, positive, and safe) and <= ${maximumEntries}.`);
		}
		if (typeof setterEntries !== "boolean" && typeof setterEntries !== "undefined") {
			throw new TypeError(`Argument \`setterEntries\` must be type of boolean or undefined.`);
		}
		if (typeof strict !== "boolean") {
			throw new TypeError(`Argument \`strict\` must be type of boolean.`);
		}
		if (typeof symbolKeys !== "boolean" && typeof symbolKeys !== "undefined") {
			throw new TypeError(`Argument \`keysSymbols\` must be type of boolean or undefined.`);
		}
		if (typeof writableEntries !== "boolean" && typeof writableEntries !== "undefined") {
			throw new TypeError(`Argument \`elementsWritable\` must be type of boolean or undefined.`);
		}
		this.#maximumEntries = maximumEntries;
		this.#minimumEntries = allowEmpty ? 0 : minimumEntries;
		if (strict) {
			this.#configurableEntries = true;
			this.#enumerableEntries = true;
			this.#getterEntries = false;
			this.#setterEntries = false;
			this.#symbolKeys = false;
			this.#writableEntries = true;
		} else {
			this.#configurableEntries = configurableEntries;
			this.#enumerableEntries = enumerableEntries;
			this.#getterEntries = getterEntries;
			this.#setterEntries = setterEntries;
			this.#symbolKeys = symbolKeys;
			this.#writableEntries = writableEntries;
		}
	}
	/**
	 * @method test
	 * @description Determine item with the configured filter of type of plain object.
	 * @param {unknown} item Item that need to determine.
	 * @returns {boolean} Determine result.
	 */
	test(item) {
		if (
			!(new object().test(item)) ||
			!(item instanceof Object) ||
			item.constructor.name !== "Object" ||
			Object.prototype.toString.call(item) !== "[object Object]"
		) {
			return false;
		}
		let itemObjectMeta = new object_meta(item);
		if (itemObjectMeta.prototypes !== null && itemObjectMeta.prototypes !== Object.prototype) {
			return false;
		}
		let itemShadow = item;
		while (Object.getPrototypeOf(itemShadow) !== null) {
			itemShadow = Object.getPrototypeOf(itemShadow);
		}
		if (itemObjectMeta.prototypes !== itemShadow) {
			return false;
		}
		if (
			(this.#symbolKeys === false && itemObjectMeta.symbolKeys.length > 0) ||
			(this.#symbolKeys === true && itemObjectMeta.symbolKeys.length === 0)
		) {
			return false;
		}
		if (
			Object.entries(item).length !== itemObjectMeta.enumerableEntries.length ||
			itemObjectMeta.configurableEntries.length + itemObjectMeta.nonConfigurableEntries.length !== itemObjectMeta.enumerableEntries.length + itemObjectMeta.nonEnumerableEntries.length ||
			itemObjectMeta.enumerableEntries.length + itemObjectMeta.nonEnumerableEntries.length !== itemObjectMeta.getterEntries.length + itemObjectMeta.nonAccessorEntries.length + itemObjectMeta.setterEntries.length ||
			itemObjectMeta.getterEntries.length + itemObjectMeta.nonAccessorEntries.length + itemObjectMeta.setterEntries.length !== itemObjectMeta.nonWritableEntries.length + itemObjectMeta.writableEntries.length ||
			itemObjectMeta.configurableEntries.length + itemObjectMeta.nonConfigurableEntries.length !== itemObjectMeta.nonWritableEntries.length + itemObjectMeta.writableEntries.length ||
			this.#maximumEntries < itemObjectMeta.getterEntries.length + itemObjectMeta.nonAccessorEntries.length + itemObjectMeta.setterEntries.length + itemObjectMeta.symbolKeys.length ||
			itemObjectMeta.getterEntries.length + itemObjectMeta.nonAccessorEntries.length + itemObjectMeta.setterEntries.length + itemObjectMeta.symbolKeys.length < this.#minimumEntries ||
			(this.#configurableEntries === false && itemObjectMeta.configurableEntries.length > 0) ||
			(this.#configurableEntries === true && itemObjectMeta.nonConfigurableEntries.length > 0) ||
			(this.#enumerableEntries === false && itemObjectMeta.enumerableEntries.length > 0) ||
			(this.#enumerableEntries === true && itemObjectMeta.nonEnumerableEntries.length > 0) ||
			(this.#getterEntries === false && itemObjectMeta.getterEntries.length > 0) ||
			(this.#setterEntries === false && itemObjectMeta.setterEntries.length > 0) ||
			((
				this.#getterEntries === true ||
				this.#setterEntries === true
			) && itemObjectMeta.nonAccessorEntries.length > 0) ||
			(this.#writableEntries === false && itemObjectMeta.writableEntries.length > 0) ||
			(this.#writableEntries === true && itemObjectMeta.nonWritableEntries.length > 0)
		) {
			return false;
		}
		return true;
	}
}
/* harmony default export */ const plain_object = (PlainObjectItemFilter);

;// CONCATENATED MODULE: ./node_modules/.pnpm/@hugoalh+advanced-determine@10.0.0/node_modules/@hugoalh/advanced-determine/lib/item-filter/json.js




const jsonArrayFilter = new array({ strict: true });
const jsonObjectFilter = new plain_object({
	configurableEntries: true,
	enumerableEntries: true,
	getterEntries: false,
	setterEntries: false,
	symbolKeys: false,
	writableEntries: true
});
const jsonLegalKeysPatternRegExp = /^[$_a-z][$\d_a-z]*$/u;
/**
 * @access private
 * @function isJSONValue
 * @param {unknown} item Item that need to determine.
 * @param {RegExp} [keysPattern] Whether a pattern matchable JSON keys.
 * @returns {boolean}
 */
function isJSONValue(item, keysPattern) {
	return (
		typeof item === "boolean" ||
		isJSONInternal(item, keysPattern) ||
		item === null ||
		checkNumber(item) ||
		typeof item === "string"
	);
}
/**
 * @access private
 * @function isJSONInternal
 * @param {unknown} item Item that need to determine.
 * @param {RegExp} [keysPattern] Whether a pattern matchable JSON keys.
 * @returns {boolean}
 */
function isJSONInternal(item, keysPattern) {
	if (jsonArrayFilter.test(item)) {
		for (let itemElement of item) {
			if (!isJSONValue(itemElement, keysPattern)) {
				return false;
			}
		}
		return true;
	}
	if (jsonObjectFilter.test(item)) {
		try {
			JSON.stringify(item);
		} catch {
			return false;
		}
		for (let itemKey of Object.keys(item)) {
			if (
				(keysPattern instanceof RegExp && itemKey.search(keysPattern) === -1) ||
				!isJSONValue(item[itemKey], keysPattern)
			) {
				return false;
			}
		}
		return true;
	}
	return false;
}
/**
 * @class JSONItemFilter
 * @description Determine item with the filter of type of JSON.
 */
class JSONItemFilter {
	#arrayRoot;
	#keysPattern;
	#maximumEntries;
	#minimumEntries;
	/**
	 * @constructor
	 * @description Initialize the filter of type of JSON to determine item.
	 * @param {object} [param0={}] Options.
	 * @param {boolean} [param0.allowEmpty=false] Whether to allow an empty JSON.
	 * @param {boolean} [param0.arrayRoot] Whether type of array as the root of the JSON.
	 * @param {RegExp} [param0.keysPattern] Whether a pattern matchable JSON keys.
	 * @param {number} [param0.maximumEntries=Infinity] Maximum entries of the JSON.
	 * @param {number} [param0.minimumEntries=1] Minimum entries of the JSON.
	 * @param {boolean} [param0.strict=false] Whether to determine type of array not as the root of the JSON, and no illegal namespace characters in the JSON keys.
	 * @param {boolean} [param0.strictKeys=false] Whether to determine no illegal namespace characters in the JSON keys.
	 */
	constructor({
		allowEmpty = false,
		arrayRoot,
		keysPattern,
		maximumEntries,
		minimumEntries,
		strict = false,
		strictKeys = false,
		...aliases
	} = {}) {
		if (typeof allowEmpty !== "boolean") {
			throw new TypeError(`Argument \`empty\` must be type of boolean.`);
		}
		if (typeof arrayRoot !== "boolean" && typeof arrayRoot !== "undefined") {
			throw new TypeError(`Argument \`arrayRoot\` must be type of boolean or undefined.`);
		}
		if (!(keysPattern instanceof RegExp) && typeof keysPattern !== "undefined") {
			throw new TypeError(`Argument \`keysPattern\` must be type of regular expression or undefined.`);
		}
		maximumEntries = main(maximumEntries, aliases.maxEntries, Infinity);
		if (maximumEntries !== Infinity && !checkNumberIPS(maximumEntries)) {
			throw new TypeError(`Argument \`maximumEntries\` must be \`Infinity\` or type of number (integer, positive, and safe).`);
		}
		minimumEntries = main(minimumEntries, aliases.minEntries, 1);
		if (!checkNumberIPSWithMaximum(minimumEntries, maximumEntries)) {
			throw new TypeError(`Argument \`minimumEntries\` must be type of number (integer, positive, and safe) and <= ${maximumEntries}.`);
		}
		if (typeof strict !== "boolean") {
			throw new TypeError(`Argument \`strict\` must be type of boolean.`);
		}
		if (typeof strictKeys !== "boolean") {
			throw new TypeError(`Argument \`strictKeys\` must be type of boolean.`);
		}
		this.#arrayRoot = strict ? false : arrayRoot;
		this.#keysPattern = (
			strict ||
			strictKeys
		) ? jsonLegalKeysPatternRegExp : keysPattern;
		this.#maximumEntries = maximumEntries;
		this.#minimumEntries = allowEmpty ? 0 : minimumEntries;
	}
	/**
	 * @method test
	 * @description Determine item with the configured filter of type of JSON.
	 * @param {unknown} item Item that need to determine.
	 * @returns {boolean} Determine result.
	 */
	test(item) {
		let itemEntriesLength = Object.entries(item).length;
		if (
			!isJSONInternal(item, this.#keysPattern) ||
			(this.#arrayRoot === false && Array.isArray(item)) ||
			(this.#arrayRoot === true && !Array.isArray(item)) ||
			this.#maximumEntries < itemEntriesLength ||
			itemEntriesLength < this.#minimumEntries
		) {
			return false;
		}
		return true;
	}
}
/* harmony default export */ const json = (JSONItemFilter);

;// CONCATENATED MODULE: ./node_modules/.pnpm/@hugoalh+advanced-determine@10.0.0/node_modules/@hugoalh/advanced-determine/lib/is/json.js

/**
 * @function isJSON
 * @description Determine item with the filter of type of JSON.
 * @param {unknown} item Item that need to determine.
 * @param {object} [param1={}] Options.
 * @param {boolean} [param1.allowEmpty=false] Whether to allow an empty JSON.
 * @param {boolean} [param1.arrayRoot] Whether type of array as the root of the JSON.
 * @param {RegExp} [param1.keysPattern] Whether a pattern matchable JSON keys.
 * @param {number} [param1.maximumEntries=Infinity] Maximum entries of the JSON.
 * @param {number} [param1.minimumEntries=1] Minimum entries of the JSON.
 * @param {boolean} [param1.strict=false] Whether to determine type of array not as the root of the JSON, and no illegal namespace characters in the JSON keys.
 * @param {boolean} [param1.strictKeys=false] Whether to determine no illegal namespace characters in the JSON keys.
 * @returns {boolean} Determine result.
 */
function isJSON(item, {
	allowEmpty = false,
	arrayRoot,
	keysPattern,
	maximumEntries,
	minimumEntries,
	strict = false,
	strictKeys = false,
	...aliases
} = {}) {
	return new json({
		allowEmpty,
		arrayRoot,
		keysPattern,
		maximumEntries,
		minimumEntries,
		strict,
		strictKeys,
		...aliases
	}).test(item);
}
/* harmony default export */ const is_json = (isJSON);

;// CONCATENATED MODULE: ./node_modules/.pnpm/@hugoalh+advanced-determine@10.0.0/node_modules/@hugoalh/advanced-determine/lib/item-filter/map.js


/**
 * @class MapItemFilter
 * @description Determine item with the filter of type of map.
 */
class MapItemFilter {
	#maximumSize;
	#minimumSize;
	/**
	 * @constructor
	 * @description Initialize the filter of type of map to determine item.
	 * @param {object} [param0={}] Options.
	 * @param {boolean} [param0.allowEmpty=false] Whether to allow an empty map.
	 * @param {number} [param0.maximumSize=Infinity] Maximum size of the map.
	 * @param {number} [param0.minimumSize=1] Minimum size of the map.
	 */
	constructor({
		allowEmpty = false,
		maximumSize,
		minimumSize,
		...aliases
	} = {}) {
		if (typeof allowEmpty !== "boolean") {
			throw new TypeError(`Argument \`allowEmpty\` must be type of boolean.`);
		}
		maximumSize = main(maximumSize, aliases.maxSize, Infinity);
		if (maximumSize !== Infinity && !checkNumberIPS(maximumSize)) {
			throw new TypeError(`Argument \`maximumSize\` must be \`Infinity\` or type of number (integer, positive, and safe).`);
		}
		minimumSize = main(minimumSize, aliases.minSize, 1);
		if (!checkNumberIPSWithMaximum(minimumSize, maximumSize)) {
			throw new TypeError(`Argument \`minimumSize\` must be type of number (integer, positive, and safe) and <= ${maximumSize}.`);
		}
		this.#maximumSize = maximumSize;
		this.#minimumSize = allowEmpty ? 0 : minimumSize;
	}
	/**
	 * @method test
	 * @description Determine item with the configured filter of type of map.
	 * @param {unknown} item Item that need to determine.
	 * @returns {boolean} Determine result.
	 */
	test(item) {
		if (
			!(item instanceof Map) ||
			this.#maximumSize < item.size ||
			item.size < this.#minimumSize
		) {
			return false;
		}
		return true;
	}
}
/* harmony default export */ const map = (MapItemFilter);

;// CONCATENATED MODULE: ./node_modules/.pnpm/@hugoalh+advanced-determine@10.0.0/node_modules/@hugoalh/advanced-determine/lib/is/map.js

/**
 * @function isMap
 * @description Determine item with the filter of type of map.
 * @param {unknown} item Item that need to determine.
 * @param {object} [param1={}] Options.
 * @param {boolean} [param1.allowEmpty=false] Whether to allow an empty map.
 * @param {number} [param1.maximumSize=Infinity] Maximum size of the map.
 * @param {number} [param1.minimumSize=1] Minimum size of the map.
 * @returns {boolean} Determine result.
 */
function isMap(item, {
	allowEmpty = false,
	maximumSize,
	minimumSize,
	...aliases
} = {}) {
	return new map({
		allowEmpty,
		maximumSize,
		minimumSize,
		...aliases
	}).test(item);
}
/* harmony default export */ const is_map = (isMap);

;// CONCATENATED MODULE: ./node_modules/.pnpm/@hugoalh+advanced-determine@10.0.0/node_modules/@hugoalh/advanced-determine/lib/item-filter/number.js




/**
 * @class NumberItemFilter
 * @description Determine item with the filter of type of number.
 */
class NumberItemFilter {
	#even;
	#exclusiveMaximum;
	#exclusiveMinimum;
	#finite;
	#float;
	#infinite;
	#integer;
	#maximum;
	#minimum;
	#negative;
	#odd;
	#positive;
	#prime;
	#safe;
	#unsafe;
	/**
	 * @constructor
	 * @description Initialize the filter of type of number to determine item.
	 * @param {object} [param0={}] Options.
	 * @param {boolean} [param0.even] Whether an even number.
	 * @param {boolean} [param0.exclusiveMaximum=false] Whether to exclusive maximum of the number.
	 * @param {boolean} [param0.exclusiveMinimum=false] Whether to exclusive minimum of the number.
	 * @param {boolean} [param0.finite] Whether a finite number.
	 * @param {boolean} [param0.float] Whether a float number.
	 * @param {boolean} [param0.infinite] Whether an infinite number.
	 * @param {boolean} [param0.integer] Whether an integer number.
	 * @param {number} [param0.maximum=Infinity] Maximum of the number.
	 * @param {number} [param0.minimum=-Infinity] Minimum of the number.
	 * @param {boolean} [param0.negative] Whether a negative number.
	 * @param {boolean} [param0.odd] Whether an odd number.
	 * @param {boolean} [param0.positive] Whether a positive number.
	 * @param {boolean} [param0.prime] Whether a prime number.
	 * @param {boolean} [param0.safe] Whether an IEEE-754 number.
	 * @param {string} [param0.type] Type of the integer.
	 * @param {boolean} [param0.unsafe] Whether not an IEEE-754 number.
	 */
	constructor({
		even,
		exclusiveMaximum,
		exclusiveMinimum,
		finite,
		float,
		infinite,
		integer,
		maximum,
		minimum,
		negative,
		odd,
		positive,
		prime,
		safe,
		type,
		unsafe,
		...aliases
	} = {}) {
		if (typeof even !== "boolean" && typeof even !== "undefined") {
			throw new TypeError(`Argument \`even\` must be type of boolean or undefined.`);
		}
		exclusiveMaximum = main(exclusiveMaximum, aliases.exclusiveMax, false);
		if (typeof exclusiveMaximum !== "boolean") {
			throw new TypeError(`Argument \`exclusiveMaximum\` must be type of boolean.`);
		}
		exclusiveMinimum = main(exclusiveMinimum, aliases.exclusiveMin, false);
		if (typeof exclusiveMinimum !== "boolean") {
			throw new TypeError(`Argument \`exclusiveMinimum\` must be type of boolean.`);
		}
		if (typeof finite !== "boolean" && typeof finite !== "undefined") {
			throw new TypeError(`Argument \`finite\` must be type of boolean or undefined.`);
		}
		float = main(float, aliases.flt);
		if (typeof float !== "boolean" && typeof float !== "undefined") {
			throw new TypeError(`Argument \`float\` must be type of boolean or undefined.`);
		}
		if (typeof infinite !== "boolean" && typeof infinite !== "undefined") {
			throw new TypeError(`Argument \`infinite\` must be type of boolean or undefined.`);
		}
		integer = main(integer, aliases.int);
		if (typeof integer !== "boolean" && typeof integer !== "undefined") {
			throw new TypeError(`Argument \`integer\` must be type of boolean or undefined.`);
		}
		maximum = main(maximum, aliases.max, Infinity);
		if (maximum !== Infinity && !checkNumber(maximum)) {
			throw new TypeError(`Argument \`maximum\` must be \`Infinity\` or type of number.`);
		}
		minimum = main(minimum, aliases.min, -Infinity);
		if (minimum !== -Infinity && !checkNumberWithMaximum(minimum, maximum)) {
			throw new TypeError(`Argument \`minimum\` must be \`-Infinity\`, or type of number and <= ${maximum}.`);
		}
		negative = main(negative, aliases.ngt, aliases.nega);
		if (typeof negative !== "boolean" && typeof negative !== "undefined") {
			throw new TypeError(`Argument \`negative\` must be type of boolean or undefined.`);
		}
		if (typeof odd !== "boolean" && typeof odd !== "undefined") {
			throw new TypeError(`Argument \`odd\` must be type of boolean or undefined.`);
		}
		positive = main(positive, aliases.pst, aliases.posi);
		if (typeof positive !== "boolean" && typeof positive !== "undefined") {
			throw new TypeError(`Argument \`positive\` must be type of boolean or undefined.`);
		}
		if (typeof prime !== "boolean" && typeof prime !== "undefined") {
			throw new TypeError(`Argument \`prime\` must be type of boolean or undefined.`);
		}
		if (typeof safe !== "boolean" && typeof safe !== "undefined") {
			throw new TypeError(`Argument \`safe\` must be type of boolean or undefined.`);
		}
		if (typeof unsafe !== "boolean" && typeof unsafe !== "undefined") {
			throw new TypeError(`Argument \`unsafe\` must be type of boolean or undefined.`);
		}
		if (typeof type === "string") {
			this.#exclusiveMaximum = false;
			this.#exclusiveMinimum = false;
			this.#float = undefined;
			this.#integer = true;
			[this.#minimum, this.#maximum] = integer_types_range(type, true);
		} else if (typeof type === "undefined") {
			this.#exclusiveMaximum = exclusiveMaximum;
			this.#exclusiveMinimum = exclusiveMinimum;
			this.#float = float;
			this.#integer = integer;
			this.#maximum = maximum;
			this.#minimum = minimum;
		} else {
			throw new TypeError(`Argument \`type\` must be type of string or undefined.`);
		}
		this.#even = even;
		this.#finite = finite;
		this.#infinite = infinite;
		this.#negative = negative;
		this.#odd = odd;
		this.#positive = positive;
		this.#prime = prime;
		this.#safe = safe;
		this.#unsafe = unsafe;
	}
	/**
	 * @method test
	 * @description Determine item with the configured filter of type of number.
	 * @param {unknown} item Item that need to determine.
	 * @returns {boolean} Determine result.
	 */
	test(item) {
		let itemIsFinite = Number.isFinite(item);
		let itemIsInteger = Number.isInteger(item);
		let itemIsSafeInteger = Number.isSafeInteger(item);
		if (
			typeof item !== "number" ||
			Number.isNaN(item) ||
			(this.#even === false && itemIsSafeInteger && item % 2 === 0) ||
			(this.#even === true && (
				!itemIsSafeInteger ||
				item % 2 !== 0
			)) ||
			(this.#exclusiveMaximum && this.#maximum <= item) ||
			(!this.#exclusiveMaximum && this.#maximum < item) ||
			(this.#exclusiveMinimum && item <= this.#minimum) ||
			(!this.#exclusiveMinimum && item < this.#minimum) ||
			((
				this.#finite === true ||
				this.#infinite === false
			) && !itemIsFinite) ||
			((
				this.#infinite === true ||
				this.#finite === false
			) && itemIsFinite) ||
			((
				this.#float === true ||
				this.#integer === false
			) && itemIsInteger) ||
			((
				this.#integer === true ||
				this.#float === false
			) && !itemIsInteger) ||
			((
				this.#negative === true ||
				this.#positive === false
			) && item >= 0) ||
			((
				this.#positive === true ||
				this.#negative === false
			) && item < 0) ||
			(this.#odd === false && itemIsSafeInteger && item % 2 !== 0) ||
			(this.#odd === true && (
				!itemIsSafeInteger ||
				item % 2 === 0
			)) ||
			(this.#prime === false && itemIsSafeInteger && is_prime_number(item)) ||
			(this.#prime === true && (
				!itemIsSafeInteger ||
				!is_prime_number(item)
			)) ||
			(
				(
					this.#safe === true ||
					this.#unsafe === false
				) && (
					item < Number.MIN_SAFE_INTEGER ||
					item > Number.MAX_SAFE_INTEGER
				)
			) ||
			((
				this.#unsafe === true ||
				this.#safe === false
			) && item >= Number.MIN_SAFE_INTEGER && item <= Number.MAX_SAFE_INTEGER)
		) {
			return false;
		}
		return true;
	}
}
/* harmony default export */ const number = (NumberItemFilter);

;// CONCATENATED MODULE: ./node_modules/.pnpm/@hugoalh+advanced-determine@10.0.0/node_modules/@hugoalh/advanced-determine/lib/is/number.js

/**
 * @function isNumber
 * @description Determine item with the filter of type of number.
 * @param {unknown} item Item that need to determine.
 * @param {object} [param1={}] Options.
 * @param {boolean} [param1.even] Whether an even number.
 * @param {boolean} [param1.exclusiveMaximum=false] Whether to exclusive maximum of the number.
 * @param {boolean} [param1.exclusiveMinimum=false] Whether to exclusive minimum of the number.
 * @param {boolean} [param1.finite] Whether a finite number.
 * @param {boolean} [param1.float] Whether a float number.
 * @param {boolean} [param1.infinite] Whether an infinite number.
 * @param {boolean} [param1.integer] Whether an integer number.
 * @param {number} [param1.maximum=Infinity] Maximum of the number.
 * @param {number} [param1.minimum=-Infinity] Minimum of the number.
 * @param {boolean} [param1.negative] Whether a negative number.
 * @param {boolean} [param1.odd] Whether an odd number.
 * @param {boolean} [param1.positive] Whether a positive number.
 * @param {boolean} [param1.prime] Whether a prime number.
 * @param {boolean} [param1.safe] Whether an IEEE-754 number.
 * @param {string} [param1.type] Type of the integer.
 * @param {boolean} [param1.unsafe] Whether not an IEEE-754 number.
 * @returns {boolean} Determine result.
 */
function isNumber(item, {
	even,
	exclusiveMaximum,
	exclusiveMinimum,
	finite,
	float,
	infinite,
	integer,
	maximum,
	minimum,
	negative,
	odd,
	positive,
	prime,
	safe,
	type,
	unsafe,
	...aliases
} = {}) {
	return new number({
		even,
		exclusiveMaximum,
		exclusiveMinimum,
		finite,
		float,
		infinite,
		integer,
		maximum,
		minimum,
		negative,
		odd,
		positive,
		prime,
		safe,
		type,
		unsafe,
		...aliases
	}).test(item);
}
/* harmony default export */ const is_number = (isNumber);

;// CONCATENATED MODULE: ./node_modules/.pnpm/@hugoalh+advanced-determine@10.0.0/node_modules/@hugoalh/advanced-determine/lib/is/object.js

/**
 * @function isObject
 * @description Determine item with the filter of type of object.
 * @param {unknown} item Item that need to determine.
 * @returns {boolean} Determine result.
 */
function isObject(item) {
	return new object().test(item);
}
/* harmony default export */ const is_object = (isObject);

;// CONCATENATED MODULE: ./node_modules/.pnpm/@hugoalh+advanced-determine@10.0.0/node_modules/@hugoalh/advanced-determine/lib/is/plain-object.js

/**
 * @function isPlainObject
 * @alias isObjectPlain
 * @description Determine item with the filter of type of plain object.
 * @param {unknown} item Item that need to determine.
 * @param {object} [param1={}] Options.
 * @param {boolean} [param1.allowEmpty=false] Whether to allow an empty plain object.
 * @param {boolean} [param1.configurableEntries] Whether contain configurable entries in the plain object.
 * @param {boolean} [param1.enumerableEntries] Whether contain enumerable entries in the plain object.
 * @param {boolean} [param1.getterEntries] Whether contain getter entries in the plain object.
 * @param {number} [param1.maximumEntries=Infinity] Maximum entries of the plain object.
 * @param {number} [param1.minimumEntries=1] Minimum entries of the plain object.
 * @param {boolean} [param1.setterEntries] Whether contain setter entries in the plain object.
 * @param {boolean} [param1.strict=false] Whether to determine no custom defined properties (i.e.: getters, setters, non-configurable, non-enumerable, and non-writable) in the plain object, and no symbols in the plain object keys.
 * @param {boolean} [param1.symbolKeys] Whether contain symbols in the plain object keys.
 * @param {boolean} [param1.writableEntries] Whether contain writable entries in the plain object.
 * @returns {boolean} Determine result.
 */
function isPlainObject(item, {
	allowEmpty = false,
	configurableEntries,
	enumerableEntries,
	getterEntries,
	maximumEntries,
	minimumEntries,
	setterEntries,
	strict = false,
	symbolKeys,
	writableEntries,
	...aliases
} = {}) {
	return new plain_object({
		allowEmpty,
		configurableEntries,
		enumerableEntries,
		getterEntries,
		maximumEntries,
		minimumEntries,
		setterEntries,
		strict,
		symbolKeys,
		writableEntries,
		...aliases
	}).test(item);
}
/* harmony default export */ const is_plain_object = (isPlainObject);

;// CONCATENATED MODULE: ./node_modules/.pnpm/@hugoalh+advanced-determine@10.0.0/node_modules/@hugoalh/advanced-determine/lib/item-filter/regular-expression.js

/**
 * @class RegularExpressionItemFilter
 * @alias RegExItemFilter
 * @alias RegExpItemFilter
 * @description Determine item with the filter of type of regular expression.
 */
class RegularExpressionItemFilter {
	#caseInsensitive;
	#dotAll;
	#exactly;
	#global;
	#multipleLine;
	#sticky;
	#unicode;
	/**
	 * @constructor
	 * @description Initialize the filter of type of regular expression to determine item.
	 * @param {object} [param0={}] Options.
	 * @param {boolean} [param0.caseInsensitive] Whether a case insensitive regular expression.
	 * @param {boolean} [param0.dotAll] Whether a dot-all regular expression.
	 * @param {boolean} [param0.exactly] Whether an exactly regular expression.
	 * @param {boolean} [param0.global] Whether a global regular expression.
	 * @param {boolean} [param0.multipleLine] Whether a multiple line regular expression.
	 * @param {boolean} [param0.sticky] Whether a sticky regular expression.
	 * @param {boolean} [param0.unicode] Whether an unicode regular expression.
	 */
	constructor({
		caseInsensitive,
		dotAll,
		exactly,
		global,
		multipleLine,
		sticky,
		unicode,
		...aliases
	} = {}) {
		caseInsensitive = main(caseInsensitive, aliases.ignoreCase);
		if (typeof caseInsensitive !== "boolean" && typeof caseInsensitive !== "undefined") {
			throw new TypeError(`Argument \`caseInsensitive\` must be type of boolean or undefined.`);
		}
		if (typeof dotAll !== "boolean" && typeof dotAll !== "undefined") {
			throw new TypeError(`Argument \`dotAll\` must be type of boolean or undefined.`);
		}
		exactly = main(exactly, aliases.exact);
		if (typeof exactly !== "boolean" && typeof exactly !== "undefined") {
			throw new TypeError(`Argument \`exactly\` must be type of boolean or undefined.`);
		}
		if (typeof global !== "boolean" && typeof global !== "undefined") {
			throw new TypeError(`Argument \`global\` must be type of boolean or undefined.`);
		}
		multipleLine = main(multipleLine, aliases.multiLine, aliases.multiline);
		if (typeof multipleLine !== "boolean" && typeof multipleLine !== "undefined") {
			throw new TypeError(`Argument \`multipleLine\` must be type of boolean or undefined.`);
		}
		if (typeof sticky !== "boolean" && typeof sticky !== "undefined") {
			throw new TypeError(`Argument \`sticky\` must be type of boolean or undefined.`);
		}
		if (typeof unicode !== "boolean" && typeof unicode !== "undefined") {
			throw new TypeError(`Argument \`unicode\` must be type of boolean or undefined.`);
		}
		this.#caseInsensitive = caseInsensitive;
		this.#dotAll = dotAll;
		this.#exactly = exactly;
		this.#global = global;
		this.#multipleLine = multipleLine;
		this.#sticky = sticky;
		this.#unicode = unicode;
	}
	/**
	 * @method test
	 * @description Determine item with the configured filter of type of regular expression.
	 * @param {unknown} item Item that need to determine.
	 * @returns {boolean} Determine result.
	 */
	test(item) {
		if (
			!(item instanceof RegExp) ||
			(this.#caseInsensitive === false && item.ignoreCase) ||
			(this.#caseInsensitive === true && !item.ignoreCase) ||
			(this.#dotAll === false && item.dotAll) ||
			(this.#dotAll === true && !item.dotAll) ||
			(this.#exactly === false && item.source.startsWith("^") && item.source.endsWith("$")) ||
			(this.#exactly === true && (
				!item.source.startsWith("^") ||
				!item.source.endsWith("$")
			)) ||
			(this.#global === false && item.global) ||
			(this.#global === true && !item.global) ||
			(this.#multipleLine === false && item.multiline) ||
			(this.#multipleLine === true && !item.multiline) ||
			(this.#sticky === false && item.sticky) ||
			(this.#sticky === true && !item.sticky) ||
			(this.#unicode === false && item.unicode) ||
			(this.#unicode === true && !item.unicode)
		) {
			return false;
		}
		return true;
	}
}
/* harmony default export */ const regular_expression = (RegularExpressionItemFilter);

;// CONCATENATED MODULE: ./node_modules/.pnpm/@hugoalh+advanced-determine@10.0.0/node_modules/@hugoalh/advanced-determine/lib/is/regular-expression.js

/**
 * @function isRegularExpression
 * @alias isRegEx
 * @alias isRegExp
 * @description Determine item with the filter of type of regular expression.
 * @param {unknown} item Item that need to determine.
 * @param {object} [param1={}] Options.
 * @param {boolean} [param1.caseInsensitive] Whether a case insensitive regular expression.
 * @param {boolean} [param1.dotAll] Whether a dot-all regular expression.
 * @param {boolean} [param1.exactly] Whether an exactly regular expression.
 * @param {boolean} [param1.global] Whether a global regular expression.
 * @param {boolean} [param1.multipleLine] Whether a multiple line regular expression.
 * @param {boolean} [param1.sticky] Whether a sticky regular expression.
 * @param {boolean} [param1.unicode] Whether an unicode regular expression.
 * @returns {boolean} Determine result.
 */
function isRegularExpression(item, {
	caseInsensitive,
	dotAll,
	exactly,
	global,
	multipleLine,
	sticky,
	unicode,
	...aliases
} = {}) {
	return new regular_expression({
		caseInsensitive,
		dotAll,
		exactly,
		global,
		multipleLine,
		sticky,
		unicode,
		...aliases
	}).test(item);
}
/* harmony default export */ const is_regular_expression = (isRegularExpression);

;// CONCATENATED MODULE: ./node_modules/.pnpm/@hugoalh+advanced-determine@10.0.0/node_modules/@hugoalh/advanced-determine/lib/item-filter/set.js


/**
 * @class SetItemFilter
 * @description Determine item with the filter of type of set.
 */
class SetItemFilter {
	#maximumSize;
	#minimumSize;
	/**
	 * @constructor
	 * @description Initialize the filter of type of set to determine item.
	 * @param {object} [param0={}] Options.
	 * @param {boolean} [param0.allowEmpty=false] Whether to allow an empty set.
	 * @param {number} [param0.maximumSize=Infinity] Maximum size of the set.
	 * @param {number} [param0.minimumSize=1] Minimum size of the set.
	 */
	constructor({
		allowEmpty = false,
		maximumSize,
		minimumSize,
		...aliases
	} = {}) {
		if (typeof allowEmpty !== "boolean") {
			throw new TypeError(`Argument \`empty\` must be type of boolean.`);
		}
		maximumSize = main(maximumSize, aliases.maxSize, Infinity);
		if (maximumSize !== Infinity && !checkNumberIPS(maximumSize)) {
			throw new TypeError(`Argument \`maximumSize\` must be \`Infinity\` or type of number (integer, positive, and safe).`);
		}
		minimumSize = main(minimumSize, aliases.minSize, 1);
		if (!checkNumberIPSWithMaximum(minimumSize, maximumSize)) {
			throw new TypeError(`Argument \`minimumSize\` must be type of number (integer, positive, and safe) and <= ${maximumSize}.`);
		}
		this.#maximumSize = maximumSize;
		this.#minimumSize = allowEmpty ? 0 : minimumSize;
	}
	/**
	 * @method test
	 * @description Determine item with the configured filter of type of set.
	 * @param {unknown} item Item that need to determine.
	 * @returns {boolean} Determine result.
	 */
	test(item) {
		if (
			!(item instanceof Set) ||
			this.#maximumSize < item.size ||
			item.size < this.#minimumSize
		) {
			return false;
		}
		return true;
	}
}
/* harmony default export */ const set = (SetItemFilter);

;// CONCATENATED MODULE: ./node_modules/.pnpm/@hugoalh+advanced-determine@10.0.0/node_modules/@hugoalh/advanced-determine/lib/is/set.js

/**
 * @function isSet
 * @description Determine item with the filter of type of set.
 * @param {unknown} item Item that need to determine.
 * @param {object} [param1={}] Options.
 * @param {boolean} [param1.allowEmpty=false] Whether to allow an empty set.
 * @param {number} [param1.maximumSize=Infinity] Maximum size of the set.
 * @param {number} [param1.minimumSize=1] Minimum size of the set.
 * @returns {boolean} Determine result.
 */
function isSet(item, {
	allowEmpty = false,
	maximumSize,
	minimumSize,
	...aliases
} = {}) {
	return new set({
		allowEmpty,
		maximumSize,
		minimumSize,
		...aliases
	}).test(item);
}
/* harmony default export */ const is_set = (isSet);

;// CONCATENATED MODULE: ./node_modules/.pnpm/@hugoalh+advanced-determine@10.0.0/node_modules/@hugoalh/advanced-determine/lib/item-filter/string.js


const newLineRegExp = /[\n\r]/gu;
/**
 * @class StringItemFilter
 * @description Determine item with the filter of type of string.
 */
class StringItemFilter {
	#ascii;
	#lowerCase;
	#maximumLength;
	#minimumLength;
	#multipleLine;
	#pattern;
	#preTrim;
	#singleLine;
	#upperCase;
	/**
	 * @constructor
	 * @description Initialize the filter of type of string to determine item.
	 * @param {object} [param0={}] Options.
	 * @param {boolean} [param0.allowEmpty=false] Whether to allow an empty string.
	 * @param {boolean} [param0.ascii] Whether an ASCII string.
	 * @param {boolean} [param0.lowerCase] Whether a lower case string.
	 * @param {number} [param0.maximumLength=Infinity] Maximum length of the string.
	 * @param {number} [param0.minimumLength=1] Minimum length of the string.
	 * @param {boolean} [param0.multipleLine] Whether a multiple lines string.
	 * @param {RegExp} [param0.pattern] Whether a pattern matchable string.
	 * @param {boolean} [param0.preTrim=false] Whether to trim the string internally before determine.
	 * @param {boolean} [param0.singleLine] Whether a single line string.
	 * @param {boolean} [param0.upperCase] Whether an upper case string.
	 */
	constructor({
		allowEmpty = false,
		ascii,
		lowerCase,
		maximumLength,
		minimumLength,
		multipleLine,
		pattern,
		preTrim = false,
		singleLine,
		upperCase,
		...aliases
	} = {}) {
		if (typeof allowEmpty !== "boolean" && typeof allowEmpty !== "undefined") {
			throw new TypeError(`Argument \`empty\` must be type of boolean or undefined.`);
		}
		if (typeof ascii !== "boolean" && typeof ascii !== "undefined") {
			throw new TypeError(`Argument \`ascii\` must be type of boolean or undefined.`);
		}
		if (typeof lowerCase !== "boolean" && typeof lowerCase !== "undefined") {
			throw new TypeError(`Argument \`lowerCase\` must be type of boolean or undefined.`);
		}
		maximumLength = main(maximumLength, aliases.maxLength, aliases.maximumCharacters, aliases.maxCharacters, Infinity);
		if (maximumLength !== Infinity && !checkNumberIPS(maximumLength)) {
			throw new TypeError(`Argument \`maximumLength\` must be \`Infinity\` or type of number (integer, positive, and safe).`);
		}
		minimumLength = main(minimumLength, aliases.minLength, aliases.minimumCharacters, aliases.minCharacters, 1);
		if (!checkNumberIPSWithMaximum(minimumLength, maximumLength)) {
			throw new TypeError(`Argument \`minimumLength\` must be type of number (integer, positive, and safe) and <= ${maximumLength}.`);
		}
		multipleLine = main(multipleLine, aliases.multipleLines, aliases.multiLine, aliases.multiLines, aliases.multiline, aliases.multilines);
		if (typeof multipleLine !== "boolean" && typeof multipleLine !== "undefined") {
			throw new TypeError(`Argument \`multipleLine\` must be type of boolean or undefined.`);
		}
		if (!(pattern instanceof RegExp) && typeof pattern !== "undefined") {
			throw new TypeError(`Argument \`pattern\` must be type of regular expression or undefined.`);
		}
		if (typeof preTrim !== "boolean") {
			throw new TypeError(`Argument \`preTrim\` must be type of boolean.`);
		}
		if (typeof singleLine !== "boolean" && typeof singleLine !== "undefined") {
			throw new TypeError(`Argument \`singleLine\` must be type of boolean or undefined.`);
		}
		if (typeof upperCase !== "boolean" && typeof upperCase !== "undefined") {
			throw new TypeError(`Argument \`upperCase\` must be type of boolean or undefined.`);
		}
		this.#ascii = ascii;
		this.#lowerCase = lowerCase;
		this.#maximumLength = maximumLength;
		this.#minimumLength = allowEmpty ? 0 : minimumLength;
		this.#multipleLine = multipleLine;
		this.#pattern = pattern;
		this.#preTrim = preTrim;
		this.#singleLine = singleLine;
		this.#upperCase = upperCase;
	}
	/**
	 * @method test
	 * @description Determine item with the configured filter of type of string.
	 * @param {unknown} item Item that need to determine.
	 * @returns {boolean} Determine result.
	 */
	test(item) {
		if (typeof item !== "string") {
			return false;
		}
		let itemRaw = this.#preTrim ? item.trim() : item;
		if (typeof this.#ascii === "boolean") {
			for (let character of itemRaw) {
				let charCode = character.charCodeAt(0);
				if (
					(this.#ascii === false && charCode < 128) ||
					(this.#ascii === true && charCode > 127)
				) {
					return false;
				}
			}
		}
		if (
			this.#maximumLength < itemRaw.length ||
			itemRaw.length < this.#minimumLength ||
			(this.#pattern instanceof RegExp && itemRaw.search(this.#pattern) === -1) ||
			((
				this.#lowerCase === true ||
				this.#upperCase === false
			) && itemRaw !== itemRaw.toLowerCase()) ||
			((
				this.#upperCase === true ||
				this.#lowerCase === false
			) && itemRaw !== itemRaw.toUpperCase()) ||
			((
				this.#multipleLine === true ||
				this.#singleLine === false
			) && itemRaw.search(newLineRegExp) === -1) ||
			((
				this.#singleLine === true ||
				this.#multipleLine === false
			) && itemRaw.search(newLineRegExp) !== -1)
		) {
			return false;
		}
		return true;
	}
}
/* harmony default export */ const string = (StringItemFilter);

;// CONCATENATED MODULE: ./node_modules/.pnpm/@hugoalh+advanced-determine@10.0.0/node_modules/@hugoalh/advanced-determine/lib/is/string.js

/**
 * @function isString
 * @description Determine item with the filter of type of string.
 * @param {unknown} item Item that need to determine.
 * @param {object} [param1={}] Options.
 * @param {boolean} [param1.allowEmpty=false] Whether to allow an empty string.
 * @param {boolean} [param1.ascii] Whether an ASCII string.
 * @param {boolean} [param1.lowerCase] Whether a lower case string.
 * @param {number} [param1.maximumLength=Infinity] Maximum length of the string.
 * @param {number} [param1.minimumLength=1] Minimum length of the string.
 * @param {boolean} [param1.multipleLine] Whether a multiple lines string.
 * @param {RegExp} [param1.pattern] Whether a pattern matchable string.
 * @param {boolean} [param1.preTrim=false] Whether to trim the string internally before determine.
 * @param {boolean} [param1.singleLine] Whether a single line string.
 * @param {boolean} [param1.upperCase] Whether an upper case string.
 * @returns {boolean} Determine result.
 */
function isString(item, {
	allowEmpty = false,
	ascii,
	lowerCase,
	maximumLength,
	minimumLength,
	multipleLine,
	pattern,
	preTrim = false,
	singleLine,
	upperCase,
	...aliases
} = {}) {
	return new string({
		allowEmpty,
		ascii,
		lowerCase,
		maximumLength,
		minimumLength,
		multipleLine,
		pattern,
		preTrim,
		singleLine,
		upperCase,
		...aliases
	}).test(item);
}
/* harmony default export */ const is_string = (isString);

;// CONCATENATED MODULE: ./node_modules/.pnpm/@hugoalh+advanced-determine@10.0.0/node_modules/@hugoalh/advanced-determine/lib/item-filter/stringify-json.js

/**
 * @class StringifyJSONItemFilter
 * @alias JSONStringifiedItemFilter
 * @alias JSONStringifyItemFilter
 * @alias StringifiedJSONItemFilter
 * @description Determine item with the filter of type of stringify JSON.
 */
class StringifyJSONItemFilter {
	#jsonItemFilterWrapper;
	/**
	 * @constructor
	 * @description Initialize the filter of type of stringify JSON to determine item.
	 * @param {object} [param0={}] Options.
	 * @param {boolean} [param0.allowEmpty=false] Whether to allow an empty stringify JSON.
	 * @param {boolean} [param0.arrayRoot] Whether type of array as the root of the stringify JSON.
	 * @param {RegExp} [param0.keysPattern] Whether a pattern matchable stringify JSON keys.
	 * @param {number} [param0.maximumEntries=Infinity] Maximum entries of the stringify JSON.
	 * @param {number} [param0.minimumEntries=1] Minimum entries of the stringify JSON.
	 * @param {boolean} [param0.strict=false] Whether to determine type of array not as the root of the stringify JSON, and no illegal namespace characters in the stringify JSON keys.
	 * @param {boolean} [param0.strictKeys=false] Whether to determine no illegal namespace characters in the stringify JSON keys.
	 */
	constructor({
		allowEmpty = false,
		arrayRoot,
		keysPattern,
		maximumEntries,
		minimumEntries,
		strict = false,
		strictKeys = false,
		...aliases
	} = {}) {
		this.#jsonItemFilterWrapper = new json({
			allowEmpty,
			arrayRoot,
			keysPattern,
			maximumEntries,
			minimumEntries,
			strict,
			strictKeys,
			...aliases
		});
	}
	/**
	 * @method test
	 * @description Determine item with the configured filter of type of stringify JSON.
	 * @param {unknown} item Item that need to determine.
	 * @returns {boolean} Determine result.
	 */
	test(item) {
		if (typeof item !== "string") {
			return false;
		}
		let itemParse;
		try {
			itemParse = JSON.parse(item);
		} catch {
			return false;
		}
		return this.#jsonItemFilterWrapper.test(itemParse);
	}
}
/* harmony default export */ const stringify_json = (StringifyJSONItemFilter);

;// CONCATENATED MODULE: ./node_modules/.pnpm/@hugoalh+advanced-determine@10.0.0/node_modules/@hugoalh/advanced-determine/lib/is/stringify-json.js

/**
 * @function isStringifyJSON
 * @alias isJSONStringified
 * @alias isJSONStringify
 * @alias isStringifiedJSON
 * @description Determine item with the filter of type of stringify JSON.
 * @param {unknown} item Item that need to determine.
 * @param {object} [param1={}] Options.
 * @param {boolean} [param1.allowEmpty=false] Whether to allow an empty stringify JSON.
 * @param {boolean} [param1.arrayRoot] Whether type of array as the root of the stringify JSON.
 * @param {RegExp} [param1.keysPattern] Whether a pattern matchable stringify JSON keys.
 * @param {number} [param1.maximumEntries=Infinity] Maximum entries of the stringify JSON.
 * @param {number} [param1.minimumEntries=1] Minimum entries of the stringify JSON.
 * @param {boolean} [param1.strict=false] Whether to determine type of array not as the root of the stringify JSON, and no illegal namespace characters in the stringify JSON keys.
 * @param {boolean} [param1.strictKeys=false] Whether to determine no illegal namespace characters in the stringify JSON keys.
 * @returns {boolean} Determine result.
 */
function isStringifyJSON(item, {
	allowEmpty = false,
	arrayRoot,
	keysPattern,
	maximumEntries,
	minimumEntries,
	strict = false,
	strictKeys = false,
	...aliases
} = {}) {
	return new stringify_json({
		allowEmpty,
		arrayRoot,
		keysPattern,
		maximumEntries,
		minimumEntries,
		strict,
		strictKeys,
		...aliases
	}).test(item);
}
/* harmony default export */ const is_stringify_json = (isStringifyJSON);

;// CONCATENATED MODULE: ./node_modules/.pnpm/@hugoalh+advanced-determine@10.0.0/node_modules/@hugoalh/advanced-determine/lib/main.js





























/* harmony default export */ const lib_main = ({
	areEqual: are_equal,
	ArrayItemFilter: array,
	BigIntegerItemFilter: big_integer,
	BigIntItemFilter: big_integer,
	FunctionItemFilter: item_filter_function,
	GeneratorItemFilter: generator,
	isArray: is_array,
	isBigInt: is_big_integer,
	isBigInteger: is_big_integer,
	isFunction: is_function,
	isGenerator: is_generator,
	isJSON: is_json,
	isJSONStringified: is_stringify_json,
	isJSONStringify: is_stringify_json,
	isMap: is_map,
	isNumber: is_number,
	isObject: is_object,
	isObjectPlain: is_plain_object,
	isPlainObject: is_plain_object,
	isRegEx: is_regular_expression,
	isRegExp: is_regular_expression,
	isRegularExpression: is_regular_expression,
	isSet: is_set,
	isString: is_string,
	isStringifiedJSON: is_stringify_json,
	isStringifyJSON: is_stringify_json,
	JSONItemFilter: json,
	JSONStringifiedItemFilter: stringify_json,
	JSONStringifyItemFilter: stringify_json,
	MapItemFilter: map,
	NumberItemFilter: number,
	ObjectItemFilter: object,
	ObjectPlainItemFilter: plain_object,
	PlainObjectItemFilter: plain_object,
	RegExItemFilter: regular_expression,
	RegExpItemFilter: regular_expression,
	RegularExpressionItemFilter: regular_expression,
	SetItemFilter: set,
	StringifiedJSONItemFilter: stringify_json,
	StringifyJSONItemFilter: stringify_json,
	StringItemFilter: string,
	typeOf: type_of
});


/***/ }),

/***/ 8033:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __nccwpck_require__) => {


// EXPORTS
__nccwpck_require__.d(__webpack_exports__, {
  "Qy": () => (/* reexport */ string_overflow_truncator)
});

// UNUSED EXPORTS: default, stringOverflow

// EXTERNAL MODULE: ./node_modules/.pnpm/@hugoalh+advanced-determine@10.0.0/node_modules/@hugoalh/advanced-determine/lib/main.js + 34 modules
var main = __nccwpck_require__(5137);
;// CONCATENATED MODULE: ./node_modules/.pnpm/ansi-regex@6.0.1/node_modules/ansi-regex/index.js
function ansiRegex({onlyFirst = false} = {}) {
	const pattern = [
	    '[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)',
		'(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))'
	].join('|');

	return new RegExp(pattern, onlyFirst ? undefined : 'g');
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/char-regex@2.0.1/node_modules/char-regex/index.js
// Based on https://github.com/lodash/lodash/blob/6018350ac10d5ce6a5b7db625140b82aeab804df/.internal/unicodeSize.js

function charRegex() {
	// Unicode character classes
	const astralRange = '\\ud800-\\udfff';
	const comboMarksRange = '\\u0300-\\u036f';
	const comboHalfMarksRange = '\\ufe20-\\ufe2f';
	const comboSymbolsRange = '\\u20d0-\\u20ff';
	const comboMarksExtendedRange = '\\u1ab0-\\u1aff';
	const comboMarksSupplementRange = '\\u1dc0-\\u1dff';
	const comboRange = comboMarksRange + comboHalfMarksRange + comboSymbolsRange + comboMarksExtendedRange + comboMarksSupplementRange;
	const varRange = '\\ufe0e\\ufe0f';

	// Telugu characters
	const teluguVowels = '\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c14\\u0c60-\\u0c61';
	const teluguVowelsDiacritic = '\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4c\\u0c62-\\u0c63';
	const teluguConsonants = '\\u0c15-\\u0c28\\u0c2a-\\u0c39';
	const teluguConsonantsRare = '\\u0c58-\\u0c5a';
	const teluguModifiers = '\\u0c01-\\u0c03\\u0c4d\\u0c55\\u0c56';
	const teluguNumerals = '\\u0c66-\\u0c6f\\u0c78-\\u0c7e';
	const teluguSingle = `[${teluguVowels}(?:${teluguConsonants}(?!\\u0c4d))${teluguNumerals}${teluguConsonantsRare}]`;
	const teluguDouble = `[${teluguConsonants}${teluguConsonantsRare}][${teluguVowelsDiacritic}]|[${teluguConsonants}${teluguConsonantsRare}][${teluguModifiers}`;
	const teluguTriple = `[${teluguConsonants}]\\u0c4d[${teluguConsonants}]`;
	const telugu = `(?:${teluguTriple}|${teluguDouble}|${teluguSingle})`;

	// Unicode capture groups
	const astral = `[${astralRange}]`;
	const combo = `[${comboRange}]`;
	const fitz = '\\ud83c[\\udffb-\\udfff]';
	const modifier = `(?:${combo}|${fitz})`;
	const nonAstral = `[^${astralRange}]`;
	const regional = '(?:\\ud83c[\\udde6-\\uddff]){2}';
	const surrogatePair = '[\\ud800-\\udbff][\\udc00-\\udfff]';
	const zeroWidthJoiner = '\\u200d';
	const blackFlag = '(?:\\ud83c\\udff4\\udb40\\udc67\\udb40\\udc62\\udb40(?:\\udc65|\\udc73|\\udc77)\\udb40(?:\\udc6e|\\udc63|\\udc6c)\\udb40(?:\\udc67|\\udc74|\\udc73)\\udb40\\udc7f)';

	// Unicode regexes
	const optModifier = `${modifier}?`;
	const optVar = `[${varRange}]?`;
	const optJoin = `(?:${zeroWidthJoiner}(?:${[nonAstral, regional, surrogatePair].join('|')})${optVar + optModifier})*`;
	const seq = optVar + optModifier + optJoin;
	const nonAstralCombo = `${nonAstral}${combo}?`;
	const symbol = `(?:${[blackFlag, nonAstralCombo, combo, regional, surrogatePair, astral].join('|')})`;

	// Match string symbols (https://mathiasbynens.be/notes/javascript-unicode)
	return new RegExp(`${fitz}(?=${fitz})|${telugu}|${symbol + seq}`, 'g');
}

// EXTERNAL MODULE: ./node_modules/.pnpm/emoji-regex@10.2.1/node_modules/emoji-regex/index.js
var emoji_regex = __nccwpck_require__(1149);
// EXTERNAL MODULE: ./node_modules/.pnpm/url-regex-safe@3.0.0/node_modules/url-regex-safe/lib/index.js
var lib = __nccwpck_require__(4558);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@hugoalh+string-overflow@1.0.0/node_modules/@hugoalh/string-overflow/dist/string-overflow-truncator.js
var __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _StringOverflowTruncator_ellipsisMark, _StringOverflowTruncator_ellipsisPosition, _StringOverflowTruncator_maximumLength, _StringOverflowTruncator_resultLengthMaximum, _StringOverflowTruncator_safeURLs, _StringOverflowTruncator_safeWords;


const ansiRegExp = new RegExp(ansiRegex().source, "u");

const characterRegExp = new RegExp(charRegex().source, "u");

const emojiRegExp = new RegExp(emoji_regex().source, "u");

const urlRegExp = new RegExp(lib().source, "u");
const ellipsisPositionEndRegExp = /^(?:[Ee](?:nd)?|[Rr](?:ight)?)$/u;
const ellipsisPositionMiddleRegExp = /^(?:[Cc](?:enter)?|[Mm](?:iddle)?)$/u;
const ellipsisPositionStartRegExp = /^(?:[Ll](?:eft)?|[Ss](?:tart)?)$/u;
const numberIPSFilter = new main/* NumberItemFilter */.Lz({
    integer: true,
    positive: true,
    safe: true
});
const wordsRegExp = /[\d\w]+(?:[~@#$%&*_'.-][\d\w]+)*/u;
/**
 * @access private
 * @function stringDissect
 * @param {string} item String that need to dissect.
 * @param {object} [param1={}] Options.
 * @param {boolean} [param1.safeURLs=true] Whether to prevent URLs get truncated at the target string thus cause issues.
 * @param {boolean} [param1.safeWords=true] Whether to prevent words get truncated at the target string.
 * @returns {string[]} A dissected string.
 */
function stringDissect(item, { safeURLs = true, safeWords = true } = {}) {
    let itemRaw = item;
    let result = [];
    /**
     * @access private
     * @function unshiftString
     * @param {string} content
     * @returns {void}
     */
    function unshiftString(content) {
        result.push(content);
        itemRaw = itemRaw.substring(content.length);
    }
    while (itemRaw.length > 0) {
        if (itemRaw.search(ansiRegExp) === 0) {
            unshiftString(itemRaw.match(ansiRegExp)[0]);
            continue;
        }
        if (itemRaw.search(emojiRegExp) === 0) {
            unshiftString(itemRaw.match(emojiRegExp)[0]);
            continue;
        }
        if (safeURLs && itemRaw.search(urlRegExp) === 0) {
            unshiftString(itemRaw.match(urlRegExp)[0]);
            continue;
        }
        if (safeWords && itemRaw.search(wordsRegExp) === 0) {
            unshiftString(itemRaw.match(wordsRegExp)[0]);
            continue;
        }
        if (itemRaw.search(characterRegExp) === 0) {
            unshiftString(itemRaw.match(characterRegExp)[0]);
            continue;
        }
        unshiftString(itemRaw.charAt(0));
    }
    return result;
}
/**
 * @class StringOverflowTruncator
 * @description String truncator to truncate the string with the specify length; Safe with the emojis, URLs, and words.
 */
class StringOverflowTruncator {
    /**
     * @constructor
     * @description Initialize string truncator.
     * @param {number} maximumLength Maximum length of the target string.
     * @param {object} [param1={}] Options.
     * @param {string} [param1.ellipsisMark="..."] Ellipsis mark of the target string.
     * @param {string} [param1.ellipsisPosition="End"] Ellipsis position at the target string.
     * @param {boolean} [param1.safeURLs=true] Whether to prevent URLs get truncated at the target string thus cause issues.
     * @param {boolean} [param1.safeWords=true] Whether to prevent words get truncated at the target string.
     */
    constructor(maximumLength, { ellipsisMark = "...", ellipsisPosition = "End", safeURLs = true, safeWords = true } = {}) {
        _StringOverflowTruncator_ellipsisMark.set(this, void 0);
        _StringOverflowTruncator_ellipsisPosition.set(this, void 0);
        _StringOverflowTruncator_maximumLength.set(this, void 0);
        _StringOverflowTruncator_resultLengthMaximum.set(this, void 0);
        _StringOverflowTruncator_safeURLs.set(this, void 0);
        _StringOverflowTruncator_safeWords.set(this, void 0);
        if (!numberIPSFilter.test(maximumLength)) {
            throw new TypeError(`Argument \`maximumLength\` must be type of number (integer, positive, and safe)!`);
        }
        if (typeof ellipsisMark !== "string") {
            throw new TypeError(`Argument \`ellipsisMark\` must be type of string!`);
        }
        if (typeof ellipsisPosition !== "string") {
            throw new TypeError(`Argument \`ellipsisPosition\` must be type of string!`);
        }
        if (ellipsisPosition.search(ellipsisPositionEndRegExp) === 0) {
            __classPrivateFieldSet(this, _StringOverflowTruncator_ellipsisPosition, "E", "f");
        }
        else if (ellipsisPosition.search(ellipsisPositionMiddleRegExp) === 0) {
            __classPrivateFieldSet(this, _StringOverflowTruncator_ellipsisPosition, "M", "f");
        }
        else if (ellipsisPosition.search(ellipsisPositionStartRegExp) === 0) {
            __classPrivateFieldSet(this, _StringOverflowTruncator_ellipsisPosition, "S", "f");
        }
        else {
            throw new RangeError(`\`${ellipsisPosition}\` is not a valid ellipsis position!`);
        }
        if (typeof safeURLs !== "boolean") {
            throw new TypeError(`Argument \`safeURLs\` must be type of boolean!`);
        }
        if (typeof safeWords !== "boolean") {
            throw new TypeError(`Argument \`safeWords\` must be type of boolean!`);
        }
        if (ellipsisMark.length > maximumLength) {
            throw new Error(`Ellipsis string also overflow!`);
        }
        __classPrivateFieldSet(this, _StringOverflowTruncator_ellipsisMark, ellipsisMark, "f");
        __classPrivateFieldSet(this, _StringOverflowTruncator_maximumLength, maximumLength, "f");
        __classPrivateFieldSet(this, _StringOverflowTruncator_resultLengthMaximum, maximumLength - ellipsisMark.length, "f");
        __classPrivateFieldSet(this, _StringOverflowTruncator_safeURLs, safeURLs, "f");
        __classPrivateFieldSet(this, _StringOverflowTruncator_safeWords, safeWords, "f");
    }
    /**
     * @method truncate
     * @description Truncate the string.
     * @param {string} item String that need to truncate.
     * @returns {string} A truncated string.
     */
    truncate(item) {
        if (typeof item !== "string") {
            throw new TypeError(`Argument \`item\` must be type of string!`);
        }
        if (item.length <= __classPrivateFieldGet(this, _StringOverflowTruncator_maximumLength, "f")) {
            return item;
        }
        let resultLengthLeft = 0;
        let resultLengthRight = 0;
        if (__classPrivateFieldGet(this, _StringOverflowTruncator_ellipsisPosition, "f") === "S") {
            resultLengthRight = __classPrivateFieldGet(this, _StringOverflowTruncator_resultLengthMaximum, "f");
        }
        else if (__classPrivateFieldGet(this, _StringOverflowTruncator_ellipsisPosition, "f") === "M") {
            let resultLengthHalf = Math.floor(__classPrivateFieldGet(this, _StringOverflowTruncator_resultLengthMaximum, "f") / 2);
            resultLengthLeft = resultLengthHalf;
            resultLengthRight = resultLengthHalf;
        }
        else {
            resultLengthLeft = __classPrivateFieldGet(this, _StringOverflowTruncator_resultLengthMaximum, "f");
        }
        let stringGroup = stringDissect(item, {
            safeURLs: __classPrivateFieldGet(this, _StringOverflowTruncator_safeURLs, "f"),
            safeWords: __classPrivateFieldGet(this, _StringOverflowTruncator_safeWords, "f")
        });
        let resultStringLeftGroup = [];
        for (let index = 0, resultStringLeftLength = 0; index < stringGroup.length; index++) {
            let content = stringGroup[index];
            if (resultStringLeftLength + content.length > resultLengthLeft) {
                break;
            }
            resultStringLeftGroup.push(content);
            resultStringLeftLength += content.length;
        }
        let resultStringRightGroup = [];
        for (let index = stringGroup.length - 1, resultStringRightLength = 0; index >= 0; index--) {
            let content = stringGroup[index];
            if (resultStringRightLength + content.length > resultLengthRight) {
                break;
            }
            resultStringRightGroup.unshift(content);
            resultStringRightLength += content.length;
        }
        return `${resultStringLeftGroup.join("")}${__classPrivateFieldGet(this, _StringOverflowTruncator_ellipsisMark, "f")}${resultStringRightGroup.join("")}`;
    }
}
_StringOverflowTruncator_ellipsisMark = new WeakMap(), _StringOverflowTruncator_ellipsisPosition = new WeakMap(), _StringOverflowTruncator_maximumLength = new WeakMap(), _StringOverflowTruncator_resultLengthMaximum = new WeakMap(), _StringOverflowTruncator_safeURLs = new WeakMap(), _StringOverflowTruncator_safeWords = new WeakMap();
/* harmony default export */ const string_overflow_truncator = (StringOverflowTruncator);

;// CONCATENATED MODULE: ./node_modules/.pnpm/@hugoalh+string-overflow@1.0.0/node_modules/@hugoalh/string-overflow/dist/string-overflow.js

/**
 * @function stringOverflow
 * @description String truncator to truncate the string with the specify length; Safe with the emojis, URLs, and words.
 * @param {string} item String that need to truncate.
 * @param {number} maximumLength Maximum length of the target string.
 * @param {object} [param2={}] Options.
 * @param {string} [param2.ellipsisMark="..."] Ellipsis mark of the target string.
 * @param {string} [param2.ellipsisPosition="End"] Ellipsis position at the target string.
 * @param {boolean} [param2.safeURLs=true] Whether to prevent URLs get truncated at the target string thus cause issues.
 * @param {boolean} [param2.safeWords=true] Whether to prevent words get truncated at the target string.
 * @returns {string} A truncated string.
 */
function stringOverflow(item, maximumLength, { ellipsisMark = "...", ellipsisPosition = "End", safeURLs = true, safeWords = true } = {}) {
    return new string_overflow_truncator(maximumLength, {
        ellipsisMark,
        ellipsisPosition,
        safeURLs,
        safeWords
    }).truncate(item);
}
/* harmony default export */ const string_overflow = (stringOverflow);

;// CONCATENATED MODULE: ./node_modules/.pnpm/@hugoalh+string-overflow@1.0.0/node_modules/@hugoalh/string-overflow/dist/main.js



/* harmony default export */ const dist_main = ({
    stringOverflow: string_overflow,
    StringOverflowTruncator: string_overflow_truncator
});


/***/ }),

/***/ 4261:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __nccwpck_require__) => {


// EXPORTS
__nccwpck_require__.d(__webpack_exports__, {
  "cX": () => (/* binding */ Chalk)
});

// UNUSED EXPORTS: backgroundColorNames, backgroundColors, chalkStderr, colorNames, colors, default, foregroundColorNames, foregroundColors, modifierNames, modifiers, supportsColor, supportsColorStderr

;// CONCATENATED MODULE: ./node_modules/.pnpm/chalk@5.2.0/node_modules/chalk/source/vendor/ansi-styles/index.js
const ANSI_BACKGROUND_OFFSET = 10;

const wrapAnsi16 = (offset = 0) => code => `\u001B[${code + offset}m`;

const wrapAnsi256 = (offset = 0) => code => `\u001B[${38 + offset};5;${code}m`;

const wrapAnsi16m = (offset = 0) => (red, green, blue) => `\u001B[${38 + offset};2;${red};${green};${blue}m`;

const styles = {
	modifier: {
		reset: [0, 0],
		// 21 isn't widely supported and 22 does the same thing
		bold: [1, 22],
		dim: [2, 22],
		italic: [3, 23],
		underline: [4, 24],
		overline: [53, 55],
		inverse: [7, 27],
		hidden: [8, 28],
		strikethrough: [9, 29],
	},
	color: {
		black: [30, 39],
		red: [31, 39],
		green: [32, 39],
		yellow: [33, 39],
		blue: [34, 39],
		magenta: [35, 39],
		cyan: [36, 39],
		white: [37, 39],

		// Bright color
		blackBright: [90, 39],
		gray: [90, 39], // Alias of `blackBright`
		grey: [90, 39], // Alias of `blackBright`
		redBright: [91, 39],
		greenBright: [92, 39],
		yellowBright: [93, 39],
		blueBright: [94, 39],
		magentaBright: [95, 39],
		cyanBright: [96, 39],
		whiteBright: [97, 39],
	},
	bgColor: {
		bgBlack: [40, 49],
		bgRed: [41, 49],
		bgGreen: [42, 49],
		bgYellow: [43, 49],
		bgBlue: [44, 49],
		bgMagenta: [45, 49],
		bgCyan: [46, 49],
		bgWhite: [47, 49],

		// Bright color
		bgBlackBright: [100, 49],
		bgGray: [100, 49], // Alias of `bgBlackBright`
		bgGrey: [100, 49], // Alias of `bgBlackBright`
		bgRedBright: [101, 49],
		bgGreenBright: [102, 49],
		bgYellowBright: [103, 49],
		bgBlueBright: [104, 49],
		bgMagentaBright: [105, 49],
		bgCyanBright: [106, 49],
		bgWhiteBright: [107, 49],
	},
};

const modifierNames = Object.keys(styles.modifier);
const foregroundColorNames = Object.keys(styles.color);
const backgroundColorNames = Object.keys(styles.bgColor);
const colorNames = [...foregroundColorNames, ...backgroundColorNames];

function assembleStyles() {
	const codes = new Map();

	for (const [groupName, group] of Object.entries(styles)) {
		for (const [styleName, style] of Object.entries(group)) {
			styles[styleName] = {
				open: `\u001B[${style[0]}m`,
				close: `\u001B[${style[1]}m`,
			};

			group[styleName] = styles[styleName];

			codes.set(style[0], style[1]);
		}

		Object.defineProperty(styles, groupName, {
			value: group,
			enumerable: false,
		});
	}

	Object.defineProperty(styles, 'codes', {
		value: codes,
		enumerable: false,
	});

	styles.color.close = '\u001B[39m';
	styles.bgColor.close = '\u001B[49m';

	styles.color.ansi = wrapAnsi16();
	styles.color.ansi256 = wrapAnsi256();
	styles.color.ansi16m = wrapAnsi16m();
	styles.bgColor.ansi = wrapAnsi16(ANSI_BACKGROUND_OFFSET);
	styles.bgColor.ansi256 = wrapAnsi256(ANSI_BACKGROUND_OFFSET);
	styles.bgColor.ansi16m = wrapAnsi16m(ANSI_BACKGROUND_OFFSET);

	// From https://github.com/Qix-/color-convert/blob/3f0e0d4e92e235796ccb17f6e85c72094a651f49/conversions.js
	Object.defineProperties(styles, {
		rgbToAnsi256: {
			value(red, green, blue) {
				// We use the extended greyscale palette here, with the exception of
				// black and white. normal palette only has 4 greyscale shades.
				if (red === green && green === blue) {
					if (red < 8) {
						return 16;
					}

					if (red > 248) {
						return 231;
					}

					return Math.round(((red - 8) / 247) * 24) + 232;
				}

				return 16
					+ (36 * Math.round(red / 255 * 5))
					+ (6 * Math.round(green / 255 * 5))
					+ Math.round(blue / 255 * 5);
			},
			enumerable: false,
		},
		hexToRgb: {
			value(hex) {
				const matches = /[a-f\d]{6}|[a-f\d]{3}/i.exec(hex.toString(16));
				if (!matches) {
					return [0, 0, 0];
				}

				let [colorString] = matches;

				if (colorString.length === 3) {
					colorString = [...colorString].map(character => character + character).join('');
				}

				const integer = Number.parseInt(colorString, 16);

				return [
					/* eslint-disable no-bitwise */
					(integer >> 16) & 0xFF,
					(integer >> 8) & 0xFF,
					integer & 0xFF,
					/* eslint-enable no-bitwise */
				];
			},
			enumerable: false,
		},
		hexToAnsi256: {
			value: hex => styles.rgbToAnsi256(...styles.hexToRgb(hex)),
			enumerable: false,
		},
		ansi256ToAnsi: {
			value(code) {
				if (code < 8) {
					return 30 + code;
				}

				if (code < 16) {
					return 90 + (code - 8);
				}

				let red;
				let green;
				let blue;

				if (code >= 232) {
					red = (((code - 232) * 10) + 8) / 255;
					green = red;
					blue = red;
				} else {
					code -= 16;

					const remainder = code % 36;

					red = Math.floor(code / 36) / 5;
					green = Math.floor(remainder / 6) / 5;
					blue = (remainder % 6) / 5;
				}

				const value = Math.max(red, green, blue) * 2;

				if (value === 0) {
					return 30;
				}

				// eslint-disable-next-line no-bitwise
				let result = 30 + ((Math.round(blue) << 2) | (Math.round(green) << 1) | Math.round(red));

				if (value === 2) {
					result += 60;
				}

				return result;
			},
			enumerable: false,
		},
		rgbToAnsi: {
			value: (red, green, blue) => styles.ansi256ToAnsi(styles.rgbToAnsi256(red, green, blue)),
			enumerable: false,
		},
		hexToAnsi: {
			value: hex => styles.ansi256ToAnsi(styles.hexToAnsi256(hex)),
			enumerable: false,
		},
	});

	return styles;
}

const ansiStyles = assembleStyles();

/* harmony default export */ const ansi_styles = (ansiStyles);

// EXTERNAL MODULE: external "node:process"
var external_node_process_ = __nccwpck_require__(7742);
;// CONCATENATED MODULE: external "node:os"
const external_node_os_namespaceObject = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:os");
;// CONCATENATED MODULE: external "node:tty"
const external_node_tty_namespaceObject = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:tty");
;// CONCATENATED MODULE: ./node_modules/.pnpm/chalk@5.2.0/node_modules/chalk/source/vendor/supports-color/index.js




// From: https://github.com/sindresorhus/has-flag/blob/main/index.js
function hasFlag(flag, argv = globalThis.Deno ? globalThis.Deno.args : external_node_process_.argv) {
	const prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');
	const position = argv.indexOf(prefix + flag);
	const terminatorPosition = argv.indexOf('--');
	return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
}

const {env} = external_node_process_;

let flagForceColor;
if (
	hasFlag('no-color')
	|| hasFlag('no-colors')
	|| hasFlag('color=false')
	|| hasFlag('color=never')
) {
	flagForceColor = 0;
} else if (
	hasFlag('color')
	|| hasFlag('colors')
	|| hasFlag('color=true')
	|| hasFlag('color=always')
) {
	flagForceColor = 1;
}

function envForceColor() {
	if ('FORCE_COLOR' in env) {
		if (env.FORCE_COLOR === 'true') {
			return 1;
		}

		if (env.FORCE_COLOR === 'false') {
			return 0;
		}

		return env.FORCE_COLOR.length === 0 ? 1 : Math.min(Number.parseInt(env.FORCE_COLOR, 10), 3);
	}
}

function translateLevel(level) {
	if (level === 0) {
		return false;
	}

	return {
		level,
		hasBasic: true,
		has256: level >= 2,
		has16m: level >= 3,
	};
}

function _supportsColor(haveStream, {streamIsTTY, sniffFlags = true} = {}) {
	const noFlagForceColor = envForceColor();
	if (noFlagForceColor !== undefined) {
		flagForceColor = noFlagForceColor;
	}

	const forceColor = sniffFlags ? flagForceColor : noFlagForceColor;

	if (forceColor === 0) {
		return 0;
	}

	if (sniffFlags) {
		if (hasFlag('color=16m')
			|| hasFlag('color=full')
			|| hasFlag('color=truecolor')) {
			return 3;
		}

		if (hasFlag('color=256')) {
			return 2;
		}
	}

	// Check for Azure DevOps pipelines.
	// Has to be above the `!streamIsTTY` check.
	if ('TF_BUILD' in env && 'AGENT_NAME' in env) {
		return 1;
	}

	if (haveStream && !streamIsTTY && forceColor === undefined) {
		return 0;
	}

	const min = forceColor || 0;

	if (env.TERM === 'dumb') {
		return min;
	}

	if (external_node_process_.platform === 'win32') {
		// Windows 10 build 10586 is the first Windows release that supports 256 colors.
		// Windows 10 build 14931 is the first release that supports 16m/TrueColor.
		const osRelease = external_node_os_namespaceObject.release().split('.');
		if (
			Number(osRelease[0]) >= 10
			&& Number(osRelease[2]) >= 10_586
		) {
			return Number(osRelease[2]) >= 14_931 ? 3 : 2;
		}

		return 1;
	}

	if ('CI' in env) {
		if ('GITHUB_ACTIONS' in env) {
			return 3;
		}

		if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI', 'BUILDKITE', 'DRONE'].some(sign => sign in env) || env.CI_NAME === 'codeship') {
			return 1;
		}

		return min;
	}

	if ('TEAMCITY_VERSION' in env) {
		return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
	}

	if (env.COLORTERM === 'truecolor') {
		return 3;
	}

	if (env.TERM === 'xterm-kitty') {
		return 3;
	}

	if ('TERM_PROGRAM' in env) {
		const version = Number.parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);

		switch (env.TERM_PROGRAM) {
			case 'iTerm.app': {
				return version >= 3 ? 3 : 2;
			}

			case 'Apple_Terminal': {
				return 2;
			}
			// No default
		}
	}

	if (/-256(color)?$/i.test(env.TERM)) {
		return 2;
	}

	if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
		return 1;
	}

	if ('COLORTERM' in env) {
		return 1;
	}

	return min;
}

function createSupportsColor(stream, options = {}) {
	const level = _supportsColor(stream, {
		streamIsTTY: stream && stream.isTTY,
		...options,
	});

	return translateLevel(level);
}

const supportsColor = {
	stdout: createSupportsColor({isTTY: external_node_tty_namespaceObject.isatty(1)}),
	stderr: createSupportsColor({isTTY: external_node_tty_namespaceObject.isatty(2)}),
};

/* harmony default export */ const supports_color = (supportsColor);

;// CONCATENATED MODULE: ./node_modules/.pnpm/chalk@5.2.0/node_modules/chalk/source/utilities.js
// TODO: When targeting Node.js 16, use `String.prototype.replaceAll`.
function stringReplaceAll(string, substring, replacer) {
	let index = string.indexOf(substring);
	if (index === -1) {
		return string;
	}

	const substringLength = substring.length;
	let endIndex = 0;
	let returnValue = '';
	do {
		returnValue += string.slice(endIndex, index) + substring + replacer;
		endIndex = index + substringLength;
		index = string.indexOf(substring, endIndex);
	} while (index !== -1);

	returnValue += string.slice(endIndex);
	return returnValue;
}

function stringEncaseCRLFWithFirstIndex(string, prefix, postfix, index) {
	let endIndex = 0;
	let returnValue = '';
	do {
		const gotCR = string[index - 1] === '\r';
		returnValue += string.slice(endIndex, (gotCR ? index - 1 : index)) + prefix + (gotCR ? '\r\n' : '\n') + postfix;
		endIndex = index + 1;
		index = string.indexOf('\n', endIndex);
	} while (index !== -1);

	returnValue += string.slice(endIndex);
	return returnValue;
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/chalk@5.2.0/node_modules/chalk/source/index.js




const {stdout: stdoutColor, stderr: stderrColor} = supports_color;

const GENERATOR = Symbol('GENERATOR');
const STYLER = Symbol('STYLER');
const IS_EMPTY = Symbol('IS_EMPTY');

// `supportsColor.level` → `ansiStyles.color[name]` mapping
const levelMapping = [
	'ansi',
	'ansi',
	'ansi256',
	'ansi16m',
];

const source_styles = Object.create(null);

const applyOptions = (object, options = {}) => {
	if (options.level && !(Number.isInteger(options.level) && options.level >= 0 && options.level <= 3)) {
		throw new Error('The `level` option should be an integer from 0 to 3');
	}

	// Detect level if not set manually
	const colorLevel = stdoutColor ? stdoutColor.level : 0;
	object.level = options.level === undefined ? colorLevel : options.level;
};

class Chalk {
	constructor(options) {
		// eslint-disable-next-line no-constructor-return
		return chalkFactory(options);
	}
}

const chalkFactory = options => {
	const chalk = (...strings) => strings.join(' ');
	applyOptions(chalk, options);

	Object.setPrototypeOf(chalk, createChalk.prototype);

	return chalk;
};

function createChalk(options) {
	return chalkFactory(options);
}

Object.setPrototypeOf(createChalk.prototype, Function.prototype);

for (const [styleName, style] of Object.entries(ansi_styles)) {
	source_styles[styleName] = {
		get() {
			const builder = createBuilder(this, createStyler(style.open, style.close, this[STYLER]), this[IS_EMPTY]);
			Object.defineProperty(this, styleName, {value: builder});
			return builder;
		},
	};
}

source_styles.visible = {
	get() {
		const builder = createBuilder(this, this[STYLER], true);
		Object.defineProperty(this, 'visible', {value: builder});
		return builder;
	},
};

const getModelAnsi = (model, level, type, ...arguments_) => {
	if (model === 'rgb') {
		if (level === 'ansi16m') {
			return ansi_styles[type].ansi16m(...arguments_);
		}

		if (level === 'ansi256') {
			return ansi_styles[type].ansi256(ansi_styles.rgbToAnsi256(...arguments_));
		}

		return ansi_styles[type].ansi(ansi_styles.rgbToAnsi(...arguments_));
	}

	if (model === 'hex') {
		return getModelAnsi('rgb', level, type, ...ansi_styles.hexToRgb(...arguments_));
	}

	return ansi_styles[type][model](...arguments_);
};

const usedModels = ['rgb', 'hex', 'ansi256'];

for (const model of usedModels) {
	source_styles[model] = {
		get() {
			const {level} = this;
			return function (...arguments_) {
				const styler = createStyler(getModelAnsi(model, levelMapping[level], 'color', ...arguments_), ansi_styles.color.close, this[STYLER]);
				return createBuilder(this, styler, this[IS_EMPTY]);
			};
		},
	};

	const bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);
	source_styles[bgModel] = {
		get() {
			const {level} = this;
			return function (...arguments_) {
				const styler = createStyler(getModelAnsi(model, levelMapping[level], 'bgColor', ...arguments_), ansi_styles.bgColor.close, this[STYLER]);
				return createBuilder(this, styler, this[IS_EMPTY]);
			};
		},
	};
}

const proto = Object.defineProperties(() => {}, {
	...source_styles,
	level: {
		enumerable: true,
		get() {
			return this[GENERATOR].level;
		},
		set(level) {
			this[GENERATOR].level = level;
		},
	},
});

const createStyler = (open, close, parent) => {
	let openAll;
	let closeAll;
	if (parent === undefined) {
		openAll = open;
		closeAll = close;
	} else {
		openAll = parent.openAll + open;
		closeAll = close + parent.closeAll;
	}

	return {
		open,
		close,
		openAll,
		closeAll,
		parent,
	};
};

const createBuilder = (self, _styler, _isEmpty) => {
	// Single argument is hot path, implicit coercion is faster than anything
	// eslint-disable-next-line no-implicit-coercion
	const builder = (...arguments_) => applyStyle(builder, (arguments_.length === 1) ? ('' + arguments_[0]) : arguments_.join(' '));

	// We alter the prototype because we must return a function, but there is
	// no way to create a function with a different prototype
	Object.setPrototypeOf(builder, proto);

	builder[GENERATOR] = self;
	builder[STYLER] = _styler;
	builder[IS_EMPTY] = _isEmpty;

	return builder;
};

const applyStyle = (self, string) => {
	if (self.level <= 0 || !string) {
		return self[IS_EMPTY] ? '' : string;
	}

	let styler = self[STYLER];

	if (styler === undefined) {
		return string;
	}

	const {openAll, closeAll} = styler;
	if (string.includes('\u001B')) {
		while (styler !== undefined) {
			// Replace any instances already present with a re-opening code
			// otherwise only the part of the string until said closing code
			// will be colored, and the rest will simply be 'plain'.
			string = stringReplaceAll(string, styler.close, styler.open);

			styler = styler.parent;
		}
	}

	// We can move both next actions out of loop, because remaining actions in loop won't have
	// any/visible effect on parts we add here. Close the styling before a linebreak and reopen
	// after next line to fix a bleed issue on macOS: https://github.com/chalk/chalk/pull/92
	const lfIndex = string.indexOf('\n');
	if (lfIndex !== -1) {
		string = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);
	}

	return openAll + string + closeAll;
};

Object.defineProperties(createChalk.prototype, source_styles);

const chalk = createChalk();
const chalkStderr = createChalk({level: stderrColor ? stderrColor.level : 0});





/* harmony default export */ const source = ((/* unused pure expression or super */ null && (chalk)));


/***/ }),

/***/ 1564:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __nccwpck_require__) => {

/* harmony export */ __nccwpck_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* unused harmony export File */
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __nccwpck_require__(8967);


const _File = class File extends _index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z {
  #lastModified = 0
  #name = ''

  /**
   * @param {*[]} fileBits
   * @param {string} fileName
   * @param {{lastModified?: number, type?: string}} options
   */// @ts-ignore
  constructor (fileBits, fileName, options = {}) {
    if (arguments.length < 2) {
      throw new TypeError(`Failed to construct 'File': 2 arguments required, but only ${arguments.length} present.`)
    }
    super(fileBits, options)

    if (options === null) options = {}

    // Simulate WebIDL type casting for NaN value in lastModified option.
    const lastModified = options.lastModified === undefined ? Date.now() : Number(options.lastModified)
    if (!Number.isNaN(lastModified)) {
      this.#lastModified = lastModified
    }

    this.#name = String(fileName)
  }

  get name () {
    return this.#name
  }

  get lastModified () {
    return this.#lastModified
  }

  get [Symbol.toStringTag] () {
    return 'File'
  }

  static [Symbol.hasInstance] (object) {
    return !!object && object instanceof _index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z &&
      /^(File)$/.test(object[Symbol.toStringTag])
  }
}

/** @type {typeof globalThis.File} */// @ts-ignore
const File = _File
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (File);


/***/ }),

/***/ 5703:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __nccwpck_require__) => {

/* harmony export */ __nccwpck_require__.d(__webpack_exports__, {
/* harmony export */   "$B": () => (/* reexport safe */ _file_js__WEBPACK_IMPORTED_MODULE_3__.Z)
/* harmony export */ });
/* unused harmony exports blobFrom, blobFromSync, fileFrom, fileFromSync */
/* harmony import */ var node_fs__WEBPACK_IMPORTED_MODULE_0__ = __nccwpck_require__(7561);
/* harmony import */ var node_path__WEBPACK_IMPORTED_MODULE_1__ = __nccwpck_require__(9411);
/* harmony import */ var node_domexception__WEBPACK_IMPORTED_MODULE_2__ = __nccwpck_require__(1351);
/* harmony import */ var _file_js__WEBPACK_IMPORTED_MODULE_3__ = __nccwpck_require__(1564);
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_4__ = __nccwpck_require__(8967);







const { stat } = node_fs__WEBPACK_IMPORTED_MODULE_0__.promises

/**
 * @param {string} path filepath on the disk
 * @param {string} [type] mimetype to use
 */
const blobFromSync = (path, type) => fromBlob(statSync(path), path, type)

/**
 * @param {string} path filepath on the disk
 * @param {string} [type] mimetype to use
 * @returns {Promise<Blob>}
 */
const blobFrom = (path, type) => stat(path).then(stat => fromBlob(stat, path, type))

/**
 * @param {string} path filepath on the disk
 * @param {string} [type] mimetype to use
 * @returns {Promise<File>}
 */
const fileFrom = (path, type) => stat(path).then(stat => fromFile(stat, path, type))

/**
 * @param {string} path filepath on the disk
 * @param {string} [type] mimetype to use
 */
const fileFromSync = (path, type) => fromFile(statSync(path), path, type)

// @ts-ignore
const fromBlob = (stat, path, type = '') => new Blob([new BlobDataItem({
  path,
  size: stat.size,
  lastModified: stat.mtimeMs,
  start: 0
})], { type })

// @ts-ignore
const fromFile = (stat, path, type = '') => new File([new BlobDataItem({
  path,
  size: stat.size,
  lastModified: stat.mtimeMs,
  start: 0
})], basename(path), { type, lastModified: stat.mtimeMs })

/**
 * This is a blob backed up by a file on the disk
 * with minium requirement. Its wrapped around a Blob as a blobPart
 * so you have no direct access to this.
 *
 * @private
 */
class BlobDataItem {
  #path
  #start

  constructor (options) {
    this.#path = options.path
    this.#start = options.start
    this.size = options.size
    this.lastModified = options.lastModified
  }

  /**
   * Slicing arguments is first validated and formatted
   * to not be out of range by Blob.prototype.slice
   */
  slice (start, end) {
    return new BlobDataItem({
      path: this.#path,
      lastModified: this.lastModified,
      size: end - start,
      start: this.#start + start
    })
  }

  async * stream () {
    const { mtimeMs } = await stat(this.#path)
    if (mtimeMs > this.lastModified) {
      throw new DOMException('The requested file could not be read, typically due to permission problems that have occurred after a reference to a file was acquired.', 'NotReadableError')
    }
    yield * createReadStream(this.#path, {
      start: this.#start,
      end: this.#start + this.size - 1
    })
  }

  get [Symbol.toStringTag] () {
    return 'Blob'
  }
}

/* unused harmony default export */ var __WEBPACK_DEFAULT_EXPORT__ = ((/* unused pure expression or super */ null && (blobFromSync)));



/***/ }),

/***/ 8967:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __nccwpck_require__) => {

/* harmony export */ __nccwpck_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* unused harmony export Blob */
/* harmony import */ var _streams_cjs__WEBPACK_IMPORTED_MODULE_0__ = __nccwpck_require__(4348);
/*! fetch-blob. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */

// TODO (jimmywarting): in the feature use conditional loading with top level await (requires 14.x)
// Node has recently added whatwg stream into core



// 64 KiB (same size chrome slice theirs blob into Uint8array's)
const POOL_SIZE = 65536

/** @param {(Blob | Uint8Array)[]} parts */
async function * toIterator (parts, clone = true) {
  for (const part of parts) {
    if ('stream' in part) {
      yield * (/** @type {AsyncIterableIterator<Uint8Array>} */ (part.stream()))
    } else if (ArrayBuffer.isView(part)) {
      if (clone) {
        let position = part.byteOffset
        const end = part.byteOffset + part.byteLength
        while (position !== end) {
          const size = Math.min(end - position, POOL_SIZE)
          const chunk = part.buffer.slice(position, position + size)
          position += chunk.byteLength
          yield new Uint8Array(chunk)
        }
      } else {
        yield part
      }
    /* c8 ignore next 10 */
    } else {
      // For blobs that have arrayBuffer but no stream method (nodes buffer.Blob)
      let position = 0, b = (/** @type {Blob} */ (part))
      while (position !== b.size) {
        const chunk = b.slice(position, Math.min(b.size, position + POOL_SIZE))
        const buffer = await chunk.arrayBuffer()
        position += buffer.byteLength
        yield new Uint8Array(buffer)
      }
    }
  }
}

const _Blob = class Blob {
  /** @type {Array.<(Blob|Uint8Array)>} */
  #parts = []
  #type = ''
  #size = 0
  #endings = 'transparent'

  /**
   * The Blob() constructor returns a new Blob object. The content
   * of the blob consists of the concatenation of the values given
   * in the parameter array.
   *
   * @param {*} blobParts
   * @param {{ type?: string, endings?: string }} [options]
   */
  constructor (blobParts = [], options = {}) {
    if (typeof blobParts !== 'object' || blobParts === null) {
      throw new TypeError('Failed to construct \'Blob\': The provided value cannot be converted to a sequence.')
    }

    if (typeof blobParts[Symbol.iterator] !== 'function') {
      throw new TypeError('Failed to construct \'Blob\': The object must have a callable @@iterator property.')
    }

    if (typeof options !== 'object' && typeof options !== 'function') {
      throw new TypeError('Failed to construct \'Blob\': parameter 2 cannot convert to dictionary.')
    }

    if (options === null) options = {}

    const encoder = new TextEncoder()
    for (const element of blobParts) {
      let part
      if (ArrayBuffer.isView(element)) {
        part = new Uint8Array(element.buffer.slice(element.byteOffset, element.byteOffset + element.byteLength))
      } else if (element instanceof ArrayBuffer) {
        part = new Uint8Array(element.slice(0))
      } else if (element instanceof Blob) {
        part = element
      } else {
        part = encoder.encode(`${element}`)
      }

      this.#size += ArrayBuffer.isView(part) ? part.byteLength : part.size
      this.#parts.push(part)
    }

    this.#endings = `${options.endings === undefined ? 'transparent' : options.endings}`
    const type = options.type === undefined ? '' : String(options.type)
    this.#type = /^[\x20-\x7E]*$/.test(type) ? type : ''
  }

  /**
   * The Blob interface's size property returns the
   * size of the Blob in bytes.
   */
  get size () {
    return this.#size
  }

  /**
   * The type property of a Blob object returns the MIME type of the file.
   */
  get type () {
    return this.#type
  }

  /**
   * The text() method in the Blob interface returns a Promise
   * that resolves with a string containing the contents of
   * the blob, interpreted as UTF-8.
   *
   * @return {Promise<string>}
   */
  async text () {
    // More optimized than using this.arrayBuffer()
    // that requires twice as much ram
    const decoder = new TextDecoder()
    let str = ''
    for await (const part of toIterator(this.#parts, false)) {
      str += decoder.decode(part, { stream: true })
    }
    // Remaining
    str += decoder.decode()
    return str
  }

  /**
   * The arrayBuffer() method in the Blob interface returns a
   * Promise that resolves with the contents of the blob as
   * binary data contained in an ArrayBuffer.
   *
   * @return {Promise<ArrayBuffer>}
   */
  async arrayBuffer () {
    // Easier way... Just a unnecessary overhead
    // const view = new Uint8Array(this.size);
    // await this.stream().getReader({mode: 'byob'}).read(view);
    // return view.buffer;

    const data = new Uint8Array(this.size)
    let offset = 0
    for await (const chunk of toIterator(this.#parts, false)) {
      data.set(chunk, offset)
      offset += chunk.length
    }

    return data.buffer
  }

  stream () {
    const it = toIterator(this.#parts, true)

    return new globalThis.ReadableStream({
      // @ts-ignore
      type: 'bytes',
      async pull (ctrl) {
        const chunk = await it.next()
        chunk.done ? ctrl.close() : ctrl.enqueue(chunk.value)
      },

      async cancel () {
        await it.return()
      }
    })
  }

  /**
   * The Blob interface's slice() method creates and returns a
   * new Blob object which contains data from a subset of the
   * blob on which it's called.
   *
   * @param {number} [start]
   * @param {number} [end]
   * @param {string} [type]
   */
  slice (start = 0, end = this.size, type = '') {
    const { size } = this

    let relativeStart = start < 0 ? Math.max(size + start, 0) : Math.min(start, size)
    let relativeEnd = end < 0 ? Math.max(size + end, 0) : Math.min(end, size)

    const span = Math.max(relativeEnd - relativeStart, 0)
    const parts = this.#parts
    const blobParts = []
    let added = 0

    for (const part of parts) {
      // don't add the overflow to new blobParts
      if (added >= span) {
        break
      }

      const size = ArrayBuffer.isView(part) ? part.byteLength : part.size
      if (relativeStart && size <= relativeStart) {
        // Skip the beginning and change the relative
        // start & end position as we skip the unwanted parts
        relativeStart -= size
        relativeEnd -= size
      } else {
        let chunk
        if (ArrayBuffer.isView(part)) {
          chunk = part.subarray(relativeStart, Math.min(size, relativeEnd))
          added += chunk.byteLength
        } else {
          chunk = part.slice(relativeStart, Math.min(size, relativeEnd))
          added += chunk.size
        }
        relativeEnd -= size
        blobParts.push(chunk)
        relativeStart = 0 // All next sequential parts should start at 0
      }
    }

    const blob = new Blob([], { type: String(type).toLowerCase() })
    blob.#size = span
    blob.#parts = blobParts

    return blob
  }

  get [Symbol.toStringTag] () {
    return 'Blob'
  }

  static [Symbol.hasInstance] (object) {
    return (
      object &&
      typeof object === 'object' &&
      typeof object.constructor === 'function' &&
      (
        typeof object.stream === 'function' ||
        typeof object.arrayBuffer === 'function'
      ) &&
      /^(Blob|File)$/.test(object[Symbol.toStringTag])
    )
  }
}

Object.defineProperties(_Blob.prototype, {
  size: { enumerable: true },
  type: { enumerable: true },
  slice: { enumerable: true }
})

/** @type {typeof globalThis.Blob} */
const Blob = _Blob
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Blob);


/***/ }),

/***/ 2000:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __nccwpck_require__) => {

/* harmony export */ __nccwpck_require__.d(__webpack_exports__, {
/* harmony export */   "Ct": () => (/* binding */ FormData),
/* harmony export */   "au": () => (/* binding */ formDataToBlob)
/* harmony export */ });
/* unused harmony export File */
/* harmony import */ var fetch_blob__WEBPACK_IMPORTED_MODULE_0__ = __nccwpck_require__(8967);
/* harmony import */ var fetch_blob_file_js__WEBPACK_IMPORTED_MODULE_1__ = __nccwpck_require__(1564);
/*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */




var {toStringTag:t,iterator:i,hasInstance:h}=Symbol,
r=Math.random,
m='append,set,get,getAll,delete,keys,values,entries,forEach,constructor'.split(','),
f=(a,b,c)=>(a+='',/^(Blob|File)$/.test(b && b[t])?[(c=c!==void 0?c+'':b[t]=='File'?b.name:'blob',a),b.name!==c||b[t]=='blob'?new fetch_blob_file_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z([b],c,b):b]:[a,b+'']),
e=(c,f)=>(f?c:c.replace(/\r?\n|\r/g,'\r\n')).replace(/\n/g,'%0A').replace(/\r/g,'%0D').replace(/"/g,'%22'),
x=(n, a, e)=>{if(a.length<e){throw new TypeError(`Failed to execute '${n}' on 'FormData': ${e} arguments required, but only ${a.length} present.`)}}

const File = (/* unused pure expression or super */ null && (F))

/** @type {typeof globalThis.FormData} */
const FormData = class FormData {
#d=[];
constructor(...a){if(a.length)throw new TypeError(`Failed to construct 'FormData': parameter 1 is not of type 'HTMLFormElement'.`)}
get [t]() {return 'FormData'}
[i](){return this.entries()}
static [h](o) {return o&&typeof o==='object'&&o[t]==='FormData'&&!m.some(m=>typeof o[m]!='function')}
append(...a){x('append',arguments,2);this.#d.push(f(...a))}
delete(a){x('delete',arguments,1);a+='';this.#d=this.#d.filter(([b])=>b!==a)}
get(a){x('get',arguments,1);a+='';for(var b=this.#d,l=b.length,c=0;c<l;c++)if(b[c][0]===a)return b[c][1];return null}
getAll(a,b){x('getAll',arguments,1);b=[];a+='';this.#d.forEach(c=>c[0]===a&&b.push(c[1]));return b}
has(a){x('has',arguments,1);a+='';return this.#d.some(b=>b[0]===a)}
forEach(a,b){x('forEach',arguments,1);for(var [c,d]of this)a.call(b,d,c,this)}
set(...a){x('set',arguments,2);var b=[],c=!0;a=f(...a);this.#d.forEach(d=>{d[0]===a[0]?c&&(c=!b.push(a)):b.push(d)});c&&b.push(a);this.#d=b}
*entries(){yield*this.#d}
*keys(){for(var[a]of this)yield a}
*values(){for(var[,a]of this)yield a}}

/** @param {FormData} F */
function formDataToBlob (F,B=fetch_blob__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z){
var b=`${r()}${r()}`.replace(/\./g, '').slice(-28).padStart(32, '-'),c=[],p=`--${b}\r\nContent-Disposition: form-data; name="`
F.forEach((v,n)=>typeof v=='string'
?c.push(p+e(n)+`"\r\n\r\n${v.replace(/\r(?!\n)|(?<!\r)\n/g, '\r\n')}\r\n`)
:c.push(p+e(n)+`"; filename="${e(v.name, 1)}"\r\nContent-Type: ${v.type||"application/octet-stream"}\r\n\r\n`, v, '\r\n'))
c.push(`--${b}--`)
return new B(c,{type:"multipart/form-data; boundary="+b})}


/***/ }),

/***/ 5066:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __nccwpck_require__) => {


// EXPORTS
__nccwpck_require__.d(__webpack_exports__, {
  "ZP": () => (/* binding */ fetch)
});

// UNUSED EXPORTS: AbortError, Blob, FetchError, File, FormData, Headers, Request, Response, blobFrom, blobFromSync, fileFrom, fileFromSync, isRedirect

;// CONCATENATED MODULE: external "node:http"
const external_node_http_namespaceObject = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:http");
;// CONCATENATED MODULE: external "node:https"
const external_node_https_namespaceObject = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:https");
;// CONCATENATED MODULE: external "node:zlib"
const external_node_zlib_namespaceObject = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:zlib");
;// CONCATENATED MODULE: external "node:stream"
const external_node_stream_namespaceObject = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:stream");
;// CONCATENATED MODULE: external "node:buffer"
const external_node_buffer_namespaceObject = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:buffer");
;// CONCATENATED MODULE: ./node_modules/.pnpm/data-uri-to-buffer@4.0.1/node_modules/data-uri-to-buffer/dist/index.js
/**
 * Returns a `Buffer` instance from the given data URI `uri`.
 *
 * @param {String} uri Data URI to turn into a Buffer instance
 * @returns {Buffer} Buffer instance from Data URI
 * @api public
 */
function dataUriToBuffer(uri) {
    if (!/^data:/i.test(uri)) {
        throw new TypeError('`uri` does not appear to be a Data URI (must begin with "data:")');
    }
    // strip newlines
    uri = uri.replace(/\r?\n/g, '');
    // split the URI up into the "metadata" and the "data" portions
    const firstComma = uri.indexOf(',');
    if (firstComma === -1 || firstComma <= 4) {
        throw new TypeError('malformed data: URI');
    }
    // remove the "data:" scheme and parse the metadata
    const meta = uri.substring(5, firstComma).split(';');
    let charset = '';
    let base64 = false;
    const type = meta[0] || 'text/plain';
    let typeFull = type;
    for (let i = 1; i < meta.length; i++) {
        if (meta[i] === 'base64') {
            base64 = true;
        }
        else if (meta[i]) {
            typeFull += `;${meta[i]}`;
            if (meta[i].indexOf('charset=') === 0) {
                charset = meta[i].substring(8);
            }
        }
    }
    // defaults to US-ASCII only if type is not provided
    if (!meta[0] && !charset.length) {
        typeFull += ';charset=US-ASCII';
        charset = 'US-ASCII';
    }
    // get the encoded data portion and decode URI-encoded chars
    const encoding = base64 ? 'base64' : 'ascii';
    const data = unescape(uri.substring(firstComma + 1));
    const buffer = Buffer.from(data, encoding);
    // set `.type` and `.typeFull` properties to MIME type
    buffer.type = type;
    buffer.typeFull = typeFull;
    // set the `.charset` property
    buffer.charset = charset;
    return buffer;
}
/* harmony default export */ const dist = (dataUriToBuffer);
//# sourceMappingURL=index.js.map
// EXTERNAL MODULE: external "node:util"
var external_node_util_ = __nccwpck_require__(7261);
// EXTERNAL MODULE: ./node_modules/.pnpm/fetch-blob@3.2.0/node_modules/fetch-blob/index.js
var fetch_blob = __nccwpck_require__(8967);
// EXTERNAL MODULE: ./node_modules/.pnpm/formdata-polyfill@4.0.10/node_modules/formdata-polyfill/esm.min.js
var esm_min = __nccwpck_require__(2000);
;// CONCATENATED MODULE: ./node_modules/.pnpm/node-fetch@3.3.0/node_modules/node-fetch/src/errors/base.js
class FetchBaseError extends Error {
	constructor(message, type) {
		super(message);
		// Hide custom error implementation details from end-users
		Error.captureStackTrace(this, this.constructor);

		this.type = type;
	}

	get name() {
		return this.constructor.name;
	}

	get [Symbol.toStringTag]() {
		return this.constructor.name;
	}
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/node-fetch@3.3.0/node_modules/node-fetch/src/errors/fetch-error.js



/**
 * @typedef {{ address?: string, code: string, dest?: string, errno: number, info?: object, message: string, path?: string, port?: number, syscall: string}} SystemError
*/

/**
 * FetchError interface for operational errors
 */
class FetchError extends FetchBaseError {
	/**
	 * @param  {string} message -      Error message for human
	 * @param  {string} [type] -        Error type for machine
	 * @param  {SystemError} [systemError] - For Node.js system error
	 */
	constructor(message, type, systemError) {
		super(message, type);
		// When err.type is `system`, err.erroredSysCall contains system error and err.code contains system error code
		if (systemError) {
			// eslint-disable-next-line no-multi-assign
			this.code = this.errno = systemError.code;
			this.erroredSysCall = systemError.syscall;
		}
	}
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/node-fetch@3.3.0/node_modules/node-fetch/src/utils/is.js
/**
 * Is.js
 *
 * Object type checks.
 */

const NAME = Symbol.toStringTag;

/**
 * Check if `obj` is a URLSearchParams object
 * ref: https://github.com/node-fetch/node-fetch/issues/296#issuecomment-307598143
 * @param {*} object - Object to check for
 * @return {boolean}
 */
const isURLSearchParameters = object => {
	return (
		typeof object === 'object' &&
		typeof object.append === 'function' &&
		typeof object.delete === 'function' &&
		typeof object.get === 'function' &&
		typeof object.getAll === 'function' &&
		typeof object.has === 'function' &&
		typeof object.set === 'function' &&
		typeof object.sort === 'function' &&
		object[NAME] === 'URLSearchParams'
	);
};

/**
 * Check if `object` is a W3C `Blob` object (which `File` inherits from)
 * @param {*} object - Object to check for
 * @return {boolean}
 */
const isBlob = object => {
	return (
		object &&
		typeof object === 'object' &&
		typeof object.arrayBuffer === 'function' &&
		typeof object.type === 'string' &&
		typeof object.stream === 'function' &&
		typeof object.constructor === 'function' &&
		/^(Blob|File)$/.test(object[NAME])
	);
};

/**
 * Check if `obj` is an instance of AbortSignal.
 * @param {*} object - Object to check for
 * @return {boolean}
 */
const isAbortSignal = object => {
	return (
		typeof object === 'object' && (
			object[NAME] === 'AbortSignal' ||
			object[NAME] === 'EventTarget'
		)
	);
};

/**
 * isDomainOrSubdomain reports whether sub is a subdomain (or exact match) of
 * the parent domain.
 *
 * Both domains must already be in canonical form.
 * @param {string|URL} original
 * @param {string|URL} destination
 */
const isDomainOrSubdomain = (destination, original) => {
	const orig = new URL(original).hostname;
	const dest = new URL(destination).hostname;

	return orig === dest || orig.endsWith(`.${dest}`);
};

/**
 * isSameProtocol reports whether the two provided URLs use the same protocol.
 *
 * Both domains must already be in canonical form.
 * @param {string|URL} original
 * @param {string|URL} destination
 */
const isSameProtocol = (destination, original) => {
	const orig = new URL(original).protocol;
	const dest = new URL(destination).protocol;

	return orig === dest;
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/node-fetch@3.3.0/node_modules/node-fetch/src/body.js

/**
 * Body.js
 *
 * Body interface provides common methods for Request and Response
 */












const pipeline = (0,external_node_util_.promisify)(external_node_stream_namespaceObject.pipeline);
const INTERNALS = Symbol('Body internals');

/**
 * Body mixin
 *
 * Ref: https://fetch.spec.whatwg.org/#body
 *
 * @param   Stream  body  Readable stream
 * @param   Object  opts  Response options
 * @return  Void
 */
class Body {
	constructor(body, {
		size = 0
	} = {}) {
		let boundary = null;

		if (body === null) {
			// Body is undefined or null
			body = null;
		} else if (isURLSearchParameters(body)) {
			// Body is a URLSearchParams
			body = external_node_buffer_namespaceObject.Buffer.from(body.toString());
		} else if (isBlob(body)) {
			// Body is blob
		} else if (external_node_buffer_namespaceObject.Buffer.isBuffer(body)) {
			// Body is Buffer
		} else if (external_node_util_.types.isAnyArrayBuffer(body)) {
			// Body is ArrayBuffer
			body = external_node_buffer_namespaceObject.Buffer.from(body);
		} else if (ArrayBuffer.isView(body)) {
			// Body is ArrayBufferView
			body = external_node_buffer_namespaceObject.Buffer.from(body.buffer, body.byteOffset, body.byteLength);
		} else if (body instanceof external_node_stream_namespaceObject) {
			// Body is stream
		} else if (body instanceof esm_min/* FormData */.Ct) {
			// Body is FormData
			body = (0,esm_min/* formDataToBlob */.au)(body);
			boundary = body.type.split('=')[1];
		} else {
			// None of the above
			// coerce to string then buffer
			body = external_node_buffer_namespaceObject.Buffer.from(String(body));
		}

		let stream = body;

		if (external_node_buffer_namespaceObject.Buffer.isBuffer(body)) {
			stream = external_node_stream_namespaceObject.Readable.from(body);
		} else if (isBlob(body)) {
			stream = external_node_stream_namespaceObject.Readable.from(body.stream());
		}

		this[INTERNALS] = {
			body,
			stream,
			boundary,
			disturbed: false,
			error: null
		};
		this.size = size;

		if (body instanceof external_node_stream_namespaceObject) {
			body.on('error', error_ => {
				const error = error_ instanceof FetchBaseError ?
					error_ :
					new FetchError(`Invalid response body while trying to fetch ${this.url}: ${error_.message}`, 'system', error_);
				this[INTERNALS].error = error;
			});
		}
	}

	get body() {
		return this[INTERNALS].stream;
	}

	get bodyUsed() {
		return this[INTERNALS].disturbed;
	}

	/**
	 * Decode response as ArrayBuffer
	 *
	 * @return  Promise
	 */
	async arrayBuffer() {
		const {buffer, byteOffset, byteLength} = await consumeBody(this);
		return buffer.slice(byteOffset, byteOffset + byteLength);
	}

	async formData() {
		const ct = this.headers.get('content-type');

		if (ct.startsWith('application/x-www-form-urlencoded')) {
			const formData = new esm_min/* FormData */.Ct();
			const parameters = new URLSearchParams(await this.text());

			for (const [name, value] of parameters) {
				formData.append(name, value);
			}

			return formData;
		}

		const {toFormData} = await __nccwpck_require__.e(/* import() */ 161).then(__nccwpck_require__.bind(__nccwpck_require__, 8161));
		return toFormData(this.body, ct);
	}

	/**
	 * Return raw response as Blob
	 *
	 * @return Promise
	 */
	async blob() {
		const ct = (this.headers && this.headers.get('content-type')) || (this[INTERNALS].body && this[INTERNALS].body.type) || '';
		const buf = await this.arrayBuffer();

		return new fetch_blob/* default */.Z([buf], {
			type: ct
		});
	}

	/**
	 * Decode response as json
	 *
	 * @return  Promise
	 */
	async json() {
		const text = await this.text();
		return JSON.parse(text);
	}

	/**
	 * Decode response as text
	 *
	 * @return  Promise
	 */
	async text() {
		const buffer = await consumeBody(this);
		return new TextDecoder().decode(buffer);
	}

	/**
	 * Decode response as buffer (non-spec api)
	 *
	 * @return  Promise
	 */
	buffer() {
		return consumeBody(this);
	}
}

Body.prototype.buffer = (0,external_node_util_.deprecate)(Body.prototype.buffer, 'Please use \'response.arrayBuffer()\' instead of \'response.buffer()\'', 'node-fetch#buffer');

// In browsers, all properties are enumerable.
Object.defineProperties(Body.prototype, {
	body: {enumerable: true},
	bodyUsed: {enumerable: true},
	arrayBuffer: {enumerable: true},
	blob: {enumerable: true},
	json: {enumerable: true},
	text: {enumerable: true},
	data: {get: (0,external_node_util_.deprecate)(() => {},
		'data doesn\'t exist, use json(), text(), arrayBuffer(), or body instead',
		'https://github.com/node-fetch/node-fetch/issues/1000 (response)')}
});

/**
 * Consume and convert an entire Body to a Buffer.
 *
 * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body
 *
 * @return Promise
 */
async function consumeBody(data) {
	if (data[INTERNALS].disturbed) {
		throw new TypeError(`body used already for: ${data.url}`);
	}

	data[INTERNALS].disturbed = true;

	if (data[INTERNALS].error) {
		throw data[INTERNALS].error;
	}

	const {body} = data;

	// Body is null
	if (body === null) {
		return external_node_buffer_namespaceObject.Buffer.alloc(0);
	}

	/* c8 ignore next 3 */
	if (!(body instanceof external_node_stream_namespaceObject)) {
		return external_node_buffer_namespaceObject.Buffer.alloc(0);
	}

	// Body is stream
	// get ready to actually consume the body
	const accum = [];
	let accumBytes = 0;

	try {
		for await (const chunk of body) {
			if (data.size > 0 && accumBytes + chunk.length > data.size) {
				const error = new FetchError(`content size at ${data.url} over limit: ${data.size}`, 'max-size');
				body.destroy(error);
				throw error;
			}

			accumBytes += chunk.length;
			accum.push(chunk);
		}
	} catch (error) {
		const error_ = error instanceof FetchBaseError ? error : new FetchError(`Invalid response body while trying to fetch ${data.url}: ${error.message}`, 'system', error);
		throw error_;
	}

	if (body.readableEnded === true || body._readableState.ended === true) {
		try {
			if (accum.every(c => typeof c === 'string')) {
				return external_node_buffer_namespaceObject.Buffer.from(accum.join(''));
			}

			return external_node_buffer_namespaceObject.Buffer.concat(accum, accumBytes);
		} catch (error) {
			throw new FetchError(`Could not create Buffer from response body for ${data.url}: ${error.message}`, 'system', error);
		}
	} else {
		throw new FetchError(`Premature close of server response while trying to fetch ${data.url}`);
	}
}

/**
 * Clone body given Res/Req instance
 *
 * @param   Mixed   instance       Response or Request instance
 * @param   String  highWaterMark  highWaterMark for both PassThrough body streams
 * @return  Mixed
 */
const clone = (instance, highWaterMark) => {
	let p1;
	let p2;
	let {body} = instance[INTERNALS];

	// Don't allow cloning a used body
	if (instance.bodyUsed) {
		throw new Error('cannot clone body after it is used');
	}

	// Check that body is a stream and not form-data object
	// note: we can't clone the form-data object without having it as a dependency
	if ((body instanceof external_node_stream_namespaceObject) && (typeof body.getBoundary !== 'function')) {
		// Tee instance body
		p1 = new external_node_stream_namespaceObject.PassThrough({highWaterMark});
		p2 = new external_node_stream_namespaceObject.PassThrough({highWaterMark});
		body.pipe(p1);
		body.pipe(p2);
		// Set instance body to teed body and return the other teed body
		instance[INTERNALS].stream = p1;
		body = p2;
	}

	return body;
};

const getNonSpecFormDataBoundary = (0,external_node_util_.deprecate)(
	body => body.getBoundary(),
	'form-data doesn\'t follow the spec and requires special treatment. Use alternative package',
	'https://github.com/node-fetch/node-fetch/issues/1167'
);

/**
 * Performs the operation "extract a `Content-Type` value from |object|" as
 * specified in the specification:
 * https://fetch.spec.whatwg.org/#concept-bodyinit-extract
 *
 * This function assumes that instance.body is present.
 *
 * @param {any} body Any options.body input
 * @returns {string | null}
 */
const extractContentType = (body, request) => {
	// Body is null or undefined
	if (body === null) {
		return null;
	}

	// Body is string
	if (typeof body === 'string') {
		return 'text/plain;charset=UTF-8';
	}

	// Body is a URLSearchParams
	if (isURLSearchParameters(body)) {
		return 'application/x-www-form-urlencoded;charset=UTF-8';
	}

	// Body is blob
	if (isBlob(body)) {
		return body.type || null;
	}

	// Body is a Buffer (Buffer, ArrayBuffer or ArrayBufferView)
	if (external_node_buffer_namespaceObject.Buffer.isBuffer(body) || external_node_util_.types.isAnyArrayBuffer(body) || ArrayBuffer.isView(body)) {
		return null;
	}

	if (body instanceof esm_min/* FormData */.Ct) {
		return `multipart/form-data; boundary=${request[INTERNALS].boundary}`;
	}

	// Detect form data input from form-data module
	if (body && typeof body.getBoundary === 'function') {
		return `multipart/form-data;boundary=${getNonSpecFormDataBoundary(body)}`;
	}

	// Body is stream - can't really do much about this
	if (body instanceof external_node_stream_namespaceObject) {
		return null;
	}

	// Body constructor defaults other things to string
	return 'text/plain;charset=UTF-8';
};

/**
 * The Fetch Standard treats this as if "total bytes" is a property on the body.
 * For us, we have to explicitly get it with a function.
 *
 * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes
 *
 * @param {any} obj.body Body object from the Body instance.
 * @returns {number | null}
 */
const getTotalBytes = request => {
	const {body} = request[INTERNALS];

	// Body is null or undefined
	if (body === null) {
		return 0;
	}

	// Body is Blob
	if (isBlob(body)) {
		return body.size;
	}

	// Body is Buffer
	if (external_node_buffer_namespaceObject.Buffer.isBuffer(body)) {
		return body.length;
	}

	// Detect form data input from form-data module
	if (body && typeof body.getLengthSync === 'function') {
		return body.hasKnownLength && body.hasKnownLength() ? body.getLengthSync() : null;
	}

	// Body is stream
	return null;
};

/**
 * Write a Body to a Node.js WritableStream (e.g. http.Request) object.
 *
 * @param {Stream.Writable} dest The stream to write to.
 * @param obj.body Body object from the Body instance.
 * @returns {Promise<void>}
 */
const writeToStream = async (dest, {body}) => {
	if (body === null) {
		// Body is null
		dest.end();
	} else {
		// Body is stream
		await pipeline(body, dest);
	}
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/node-fetch@3.3.0/node_modules/node-fetch/src/headers.js
/**
 * Headers.js
 *
 * Headers class offers convenient helpers
 */




/* c8 ignore next 9 */
const validateHeaderName = typeof external_node_http_namespaceObject.validateHeaderName === 'function' ?
	external_node_http_namespaceObject.validateHeaderName :
	name => {
		if (!/^[\^`\-\w!#$%&'*+.|~]+$/.test(name)) {
			const error = new TypeError(`Header name must be a valid HTTP token [${name}]`);
			Object.defineProperty(error, 'code', {value: 'ERR_INVALID_HTTP_TOKEN'});
			throw error;
		}
	};

/* c8 ignore next 9 */
const validateHeaderValue = typeof external_node_http_namespaceObject.validateHeaderValue === 'function' ?
	external_node_http_namespaceObject.validateHeaderValue :
	(name, value) => {
		if (/[^\t\u0020-\u007E\u0080-\u00FF]/.test(value)) {
			const error = new TypeError(`Invalid character in header content ["${name}"]`);
			Object.defineProperty(error, 'code', {value: 'ERR_INVALID_CHAR'});
			throw error;
		}
	};

/**
 * @typedef {Headers | Record<string, string> | Iterable<readonly [string, string]> | Iterable<Iterable<string>>} HeadersInit
 */

/**
 * This Fetch API interface allows you to perform various actions on HTTP request and response headers.
 * These actions include retrieving, setting, adding to, and removing.
 * A Headers object has an associated header list, which is initially empty and consists of zero or more name and value pairs.
 * You can add to this using methods like append() (see Examples.)
 * In all methods of this interface, header names are matched by case-insensitive byte sequence.
 *
 */
class Headers extends URLSearchParams {
	/**
	 * Headers class
	 *
	 * @constructor
	 * @param {HeadersInit} [init] - Response headers
	 */
	constructor(init) {
		// Validate and normalize init object in [name, value(s)][]
		/** @type {string[][]} */
		let result = [];
		if (init instanceof Headers) {
			const raw = init.raw();
			for (const [name, values] of Object.entries(raw)) {
				result.push(...values.map(value => [name, value]));
			}
		} else if (init == null) { // eslint-disable-line no-eq-null, eqeqeq
			// No op
		} else if (typeof init === 'object' && !external_node_util_.types.isBoxedPrimitive(init)) {
			const method = init[Symbol.iterator];
			// eslint-disable-next-line no-eq-null, eqeqeq
			if (method == null) {
				// Record<ByteString, ByteString>
				result.push(...Object.entries(init));
			} else {
				if (typeof method !== 'function') {
					throw new TypeError('Header pairs must be iterable');
				}

				// Sequence<sequence<ByteString>>
				// Note: per spec we have to first exhaust the lists then process them
				result = [...init]
					.map(pair => {
						if (
							typeof pair !== 'object' || external_node_util_.types.isBoxedPrimitive(pair)
						) {
							throw new TypeError('Each header pair must be an iterable object');
						}

						return [...pair];
					}).map(pair => {
						if (pair.length !== 2) {
							throw new TypeError('Each header pair must be a name/value tuple');
						}

						return [...pair];
					});
			}
		} else {
			throw new TypeError('Failed to construct \'Headers\': The provided value is not of type \'(sequence<sequence<ByteString>> or record<ByteString, ByteString>)');
		}

		// Validate and lowercase
		result =
			result.length > 0 ?
				result.map(([name, value]) => {
					validateHeaderName(name);
					validateHeaderValue(name, String(value));
					return [String(name).toLowerCase(), String(value)];
				}) :
				undefined;

		super(result);

		// Returning a Proxy that will lowercase key names, validate parameters and sort keys
		// eslint-disable-next-line no-constructor-return
		return new Proxy(this, {
			get(target, p, receiver) {
				switch (p) {
					case 'append':
					case 'set':
						return (name, value) => {
							validateHeaderName(name);
							validateHeaderValue(name, String(value));
							return URLSearchParams.prototype[p].call(
								target,
								String(name).toLowerCase(),
								String(value)
							);
						};

					case 'delete':
					case 'has':
					case 'getAll':
						return name => {
							validateHeaderName(name);
							return URLSearchParams.prototype[p].call(
								target,
								String(name).toLowerCase()
							);
						};

					case 'keys':
						return () => {
							target.sort();
							return new Set(URLSearchParams.prototype.keys.call(target)).keys();
						};

					default:
						return Reflect.get(target, p, receiver);
				}
			}
		});
		/* c8 ignore next */
	}

	get [Symbol.toStringTag]() {
		return this.constructor.name;
	}

	toString() {
		return Object.prototype.toString.call(this);
	}

	get(name) {
		const values = this.getAll(name);
		if (values.length === 0) {
			return null;
		}

		let value = values.join(', ');
		if (/^content-encoding$/i.test(name)) {
			value = value.toLowerCase();
		}

		return value;
	}

	forEach(callback, thisArg = undefined) {
		for (const name of this.keys()) {
			Reflect.apply(callback, thisArg, [this.get(name), name, this]);
		}
	}

	* values() {
		for (const name of this.keys()) {
			yield this.get(name);
		}
	}

	/**
	 * @type {() => IterableIterator<[string, string]>}
	 */
	* entries() {
		for (const name of this.keys()) {
			yield [name, this.get(name)];
		}
	}

	[Symbol.iterator]() {
		return this.entries();
	}

	/**
	 * Node-fetch non-spec method
	 * returning all headers and their values as array
	 * @returns {Record<string, string[]>}
	 */
	raw() {
		return [...this.keys()].reduce((result, key) => {
			result[key] = this.getAll(key);
			return result;
		}, {});
	}

	/**
	 * For better console.log(headers) and also to convert Headers into Node.js Request compatible format
	 */
	[Symbol.for('nodejs.util.inspect.custom')]() {
		return [...this.keys()].reduce((result, key) => {
			const values = this.getAll(key);
			// Http.request() only supports string as Host header.
			// This hack makes specifying custom Host header possible.
			if (key === 'host') {
				result[key] = values[0];
			} else {
				result[key] = values.length > 1 ? values : values[0];
			}

			return result;
		}, {});
	}
}

/**
 * Re-shaping object for Web IDL tests
 * Only need to do it for overridden methods
 */
Object.defineProperties(
	Headers.prototype,
	['get', 'entries', 'forEach', 'values'].reduce((result, property) => {
		result[property] = {enumerable: true};
		return result;
	}, {})
);

/**
 * Create a Headers object from an http.IncomingMessage.rawHeaders, ignoring those that do
 * not conform to HTTP grammar productions.
 * @param {import('http').IncomingMessage['rawHeaders']} headers
 */
function fromRawHeaders(headers = []) {
	return new Headers(
		headers
			// Split into pairs
			.reduce((result, value, index, array) => {
				if (index % 2 === 0) {
					result.push(array.slice(index, index + 2));
				}

				return result;
			}, [])
			.filter(([name, value]) => {
				try {
					validateHeaderName(name);
					validateHeaderValue(name, String(value));
					return true;
				} catch {
					return false;
				}
			})

	);
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/node-fetch@3.3.0/node_modules/node-fetch/src/utils/is-redirect.js
const redirectStatus = new Set([301, 302, 303, 307, 308]);

/**
 * Redirect code matching
 *
 * @param {number} code - Status code
 * @return {boolean}
 */
const isRedirect = code => {
	return redirectStatus.has(code);
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/node-fetch@3.3.0/node_modules/node-fetch/src/response.js
/**
 * Response.js
 *
 * Response class provides content decoding
 */





const response_INTERNALS = Symbol('Response internals');

/**
 * Response class
 *
 * Ref: https://fetch.spec.whatwg.org/#response-class
 *
 * @param   Stream  body  Readable stream
 * @param   Object  opts  Response options
 * @return  Void
 */
class Response extends Body {
	constructor(body = null, options = {}) {
		super(body, options);

		// eslint-disable-next-line no-eq-null, eqeqeq, no-negated-condition
		const status = options.status != null ? options.status : 200;

		const headers = new Headers(options.headers);

		if (body !== null && !headers.has('Content-Type')) {
			const contentType = extractContentType(body, this);
			if (contentType) {
				headers.append('Content-Type', contentType);
			}
		}

		this[response_INTERNALS] = {
			type: 'default',
			url: options.url,
			status,
			statusText: options.statusText || '',
			headers,
			counter: options.counter,
			highWaterMark: options.highWaterMark
		};
	}

	get type() {
		return this[response_INTERNALS].type;
	}

	get url() {
		return this[response_INTERNALS].url || '';
	}

	get status() {
		return this[response_INTERNALS].status;
	}

	/**
	 * Convenience property representing if the request ended normally
	 */
	get ok() {
		return this[response_INTERNALS].status >= 200 && this[response_INTERNALS].status < 300;
	}

	get redirected() {
		return this[response_INTERNALS].counter > 0;
	}

	get statusText() {
		return this[response_INTERNALS].statusText;
	}

	get headers() {
		return this[response_INTERNALS].headers;
	}

	get highWaterMark() {
		return this[response_INTERNALS].highWaterMark;
	}

	/**
	 * Clone this response
	 *
	 * @return  Response
	 */
	clone() {
		return new Response(clone(this, this.highWaterMark), {
			type: this.type,
			url: this.url,
			status: this.status,
			statusText: this.statusText,
			headers: this.headers,
			ok: this.ok,
			redirected: this.redirected,
			size: this.size,
			highWaterMark: this.highWaterMark
		});
	}

	/**
	 * @param {string} url    The URL that the new response is to originate from.
	 * @param {number} status An optional status code for the response (e.g., 302.)
	 * @returns {Response}    A Response object.
	 */
	static redirect(url, status = 302) {
		if (!isRedirect(status)) {
			throw new RangeError('Failed to execute "redirect" on "response": Invalid status code');
		}

		return new Response(null, {
			headers: {
				location: new URL(url).toString()
			},
			status
		});
	}

	static error() {
		const response = new Response(null, {status: 0, statusText: ''});
		response[response_INTERNALS].type = 'error';
		return response;
	}

	static json(data = undefined, init = {}) {
		const body = JSON.stringify(data);

		if (body === undefined) {
			throw new TypeError('data is not JSON serializable');
		}

		const headers = new Headers(init && init.headers);

		if (!headers.has('content-type')) {
			headers.set('content-type', 'application/json');
		}

		return new Response(body, {
			...init,
			headers
		});
	}

	get [Symbol.toStringTag]() {
		return 'Response';
	}
}

Object.defineProperties(Response.prototype, {
	type: {enumerable: true},
	url: {enumerable: true},
	status: {enumerable: true},
	ok: {enumerable: true},
	redirected: {enumerable: true},
	statusText: {enumerable: true},
	headers: {enumerable: true},
	clone: {enumerable: true}
});

// EXTERNAL MODULE: external "node:url"
var external_node_url_ = __nccwpck_require__(1041);
;// CONCATENATED MODULE: ./node_modules/.pnpm/node-fetch@3.3.0/node_modules/node-fetch/src/utils/get-search.js
const getSearch = parsedURL => {
	if (parsedURL.search) {
		return parsedURL.search;
	}

	const lastOffset = parsedURL.href.length - 1;
	const hash = parsedURL.hash || (parsedURL.href[lastOffset] === '#' ? '#' : '');
	return parsedURL.href[lastOffset - hash.length] === '?' ? '?' : '';
};

;// CONCATENATED MODULE: external "node:net"
const external_node_net_namespaceObject = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:net");
;// CONCATENATED MODULE: ./node_modules/.pnpm/node-fetch@3.3.0/node_modules/node-fetch/src/utils/referrer.js


/**
 * @external URL
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/URL|URL}
 */

/**
 * @module utils/referrer
 * @private
 */

/**
 * @see {@link https://w3c.github.io/webappsec-referrer-policy/#strip-url|Referrer Policy §8.4. Strip url for use as a referrer}
 * @param {string} URL
 * @param {boolean} [originOnly=false]
 */
function stripURLForUseAsAReferrer(url, originOnly = false) {
	// 1. If url is null, return no referrer.
	if (url == null) { // eslint-disable-line no-eq-null, eqeqeq
		return 'no-referrer';
	}

	url = new URL(url);

	// 2. If url's scheme is a local scheme, then return no referrer.
	if (/^(about|blob|data):$/.test(url.protocol)) {
		return 'no-referrer';
	}

	// 3. Set url's username to the empty string.
	url.username = '';

	// 4. Set url's password to null.
	// Note: `null` appears to be a mistake as this actually results in the password being `"null"`.
	url.password = '';

	// 5. Set url's fragment to null.
	// Note: `null` appears to be a mistake as this actually results in the fragment being `"#null"`.
	url.hash = '';

	// 6. If the origin-only flag is true, then:
	if (originOnly) {
		// 6.1. Set url's path to null.
		// Note: `null` appears to be a mistake as this actually results in the path being `"/null"`.
		url.pathname = '';

		// 6.2. Set url's query to null.
		// Note: `null` appears to be a mistake as this actually results in the query being `"?null"`.
		url.search = '';
	}

	// 7. Return url.
	return url;
}

/**
 * @see {@link https://w3c.github.io/webappsec-referrer-policy/#enumdef-referrerpolicy|enum ReferrerPolicy}
 */
const ReferrerPolicy = new Set([
	'',
	'no-referrer',
	'no-referrer-when-downgrade',
	'same-origin',
	'origin',
	'strict-origin',
	'origin-when-cross-origin',
	'strict-origin-when-cross-origin',
	'unsafe-url'
]);

/**
 * @see {@link https://w3c.github.io/webappsec-referrer-policy/#default-referrer-policy|default referrer policy}
 */
const DEFAULT_REFERRER_POLICY = 'strict-origin-when-cross-origin';

/**
 * @see {@link https://w3c.github.io/webappsec-referrer-policy/#referrer-policies|Referrer Policy §3. Referrer Policies}
 * @param {string} referrerPolicy
 * @returns {string} referrerPolicy
 */
function validateReferrerPolicy(referrerPolicy) {
	if (!ReferrerPolicy.has(referrerPolicy)) {
		throw new TypeError(`Invalid referrerPolicy: ${referrerPolicy}`);
	}

	return referrerPolicy;
}

/**
 * @see {@link https://w3c.github.io/webappsec-secure-contexts/#is-origin-trustworthy|Referrer Policy §3.2. Is origin potentially trustworthy?}
 * @param {external:URL} url
 * @returns `true`: "Potentially Trustworthy", `false`: "Not Trustworthy"
 */
function isOriginPotentiallyTrustworthy(url) {
	// 1. If origin is an opaque origin, return "Not Trustworthy".
	// Not applicable

	// 2. Assert: origin is a tuple origin.
	// Not for implementations

	// 3. If origin's scheme is either "https" or "wss", return "Potentially Trustworthy".
	if (/^(http|ws)s:$/.test(url.protocol)) {
		return true;
	}

	// 4. If origin's host component matches one of the CIDR notations 127.0.0.0/8 or ::1/128 [RFC4632], return "Potentially Trustworthy".
	const hostIp = url.host.replace(/(^\[)|(]$)/g, '');
	const hostIPVersion = (0,external_node_net_namespaceObject.isIP)(hostIp);

	if (hostIPVersion === 4 && /^127\./.test(hostIp)) {
		return true;
	}

	if (hostIPVersion === 6 && /^(((0+:){7})|(::(0+:){0,6}))0*1$/.test(hostIp)) {
		return true;
	}

	// 5. If origin's host component is "localhost" or falls within ".localhost", and the user agent conforms to the name resolution rules in [let-localhost-be-localhost], return "Potentially Trustworthy".
	// We are returning FALSE here because we cannot ensure conformance to
	// let-localhost-be-loalhost (https://tools.ietf.org/html/draft-west-let-localhost-be-localhost)
	if (url.host === 'localhost' || url.host.endsWith('.localhost')) {
		return false;
	}

	// 6. If origin's scheme component is file, return "Potentially Trustworthy".
	if (url.protocol === 'file:') {
		return true;
	}

	// 7. If origin's scheme component is one which the user agent considers to be authenticated, return "Potentially Trustworthy".
	// Not supported

	// 8. If origin has been configured as a trustworthy origin, return "Potentially Trustworthy".
	// Not supported

	// 9. Return "Not Trustworthy".
	return false;
}

/**
 * @see {@link https://w3c.github.io/webappsec-secure-contexts/#is-url-trustworthy|Referrer Policy §3.3. Is url potentially trustworthy?}
 * @param {external:URL} url
 * @returns `true`: "Potentially Trustworthy", `false`: "Not Trustworthy"
 */
function isUrlPotentiallyTrustworthy(url) {
	// 1. If url is "about:blank" or "about:srcdoc", return "Potentially Trustworthy".
	if (/^about:(blank|srcdoc)$/.test(url)) {
		return true;
	}

	// 2. If url's scheme is "data", return "Potentially Trustworthy".
	if (url.protocol === 'data:') {
		return true;
	}

	// Note: The origin of blob: and filesystem: URLs is the origin of the context in which they were
	// created. Therefore, blobs created in a trustworthy origin will themselves be potentially
	// trustworthy.
	if (/^(blob|filesystem):$/.test(url.protocol)) {
		return true;
	}

	// 3. Return the result of executing §3.2 Is origin potentially trustworthy? on url's origin.
	return isOriginPotentiallyTrustworthy(url);
}

/**
 * Modifies the referrerURL to enforce any extra security policy considerations.
 * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}, step 7
 * @callback module:utils/referrer~referrerURLCallback
 * @param {external:URL} referrerURL
 * @returns {external:URL} modified referrerURL
 */

/**
 * Modifies the referrerOrigin to enforce any extra security policy considerations.
 * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}, step 7
 * @callback module:utils/referrer~referrerOriginCallback
 * @param {external:URL} referrerOrigin
 * @returns {external:URL} modified referrerOrigin
 */

/**
 * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}
 * @param {Request} request
 * @param {object} o
 * @param {module:utils/referrer~referrerURLCallback} o.referrerURLCallback
 * @param {module:utils/referrer~referrerOriginCallback} o.referrerOriginCallback
 * @returns {external:URL} Request's referrer
 */
function determineRequestsReferrer(request, {referrerURLCallback, referrerOriginCallback} = {}) {
	// There are 2 notes in the specification about invalid pre-conditions.  We return null, here, for
	// these cases:
	// > Note: If request's referrer is "no-referrer", Fetch will not call into this algorithm.
	// > Note: If request's referrer policy is the empty string, Fetch will not call into this
	// > algorithm.
	if (request.referrer === 'no-referrer' || request.referrerPolicy === '') {
		return null;
	}

	// 1. Let policy be request's associated referrer policy.
	const policy = request.referrerPolicy;

	// 2. Let environment be request's client.
	// not applicable to node.js

	// 3. Switch on request's referrer:
	if (request.referrer === 'about:client') {
		return 'no-referrer';
	}

	// "a URL": Let referrerSource be request's referrer.
	const referrerSource = request.referrer;

	// 4. Let request's referrerURL be the result of stripping referrerSource for use as a referrer.
	let referrerURL = stripURLForUseAsAReferrer(referrerSource);

	// 5. Let referrerOrigin be the result of stripping referrerSource for use as a referrer, with the
	//    origin-only flag set to true.
	let referrerOrigin = stripURLForUseAsAReferrer(referrerSource, true);

	// 6. If the result of serializing referrerURL is a string whose length is greater than 4096, set
	//    referrerURL to referrerOrigin.
	if (referrerURL.toString().length > 4096) {
		referrerURL = referrerOrigin;
	}

	// 7. The user agent MAY alter referrerURL or referrerOrigin at this point to enforce arbitrary
	//    policy considerations in the interests of minimizing data leakage. For example, the user
	//    agent could strip the URL down to an origin, modify its host, replace it with an empty
	//    string, etc.
	if (referrerURLCallback) {
		referrerURL = referrerURLCallback(referrerURL);
	}

	if (referrerOriginCallback) {
		referrerOrigin = referrerOriginCallback(referrerOrigin);
	}

	// 8.Execute the statements corresponding to the value of policy:
	const currentURL = new URL(request.url);

	switch (policy) {
		case 'no-referrer':
			return 'no-referrer';

		case 'origin':
			return referrerOrigin;

		case 'unsafe-url':
			return referrerURL;

		case 'strict-origin':
			// 1. If referrerURL is a potentially trustworthy URL and request's current URL is not a
			//    potentially trustworthy URL, then return no referrer.
			if (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {
				return 'no-referrer';
			}

			// 2. Return referrerOrigin.
			return referrerOrigin.toString();

		case 'strict-origin-when-cross-origin':
			// 1. If the origin of referrerURL and the origin of request's current URL are the same, then
			//    return referrerURL.
			if (referrerURL.origin === currentURL.origin) {
				return referrerURL;
			}

			// 2. If referrerURL is a potentially trustworthy URL and request's current URL is not a
			//    potentially trustworthy URL, then return no referrer.
			if (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {
				return 'no-referrer';
			}

			// 3. Return referrerOrigin.
			return referrerOrigin;

		case 'same-origin':
			// 1. If the origin of referrerURL and the origin of request's current URL are the same, then
			//    return referrerURL.
			if (referrerURL.origin === currentURL.origin) {
				return referrerURL;
			}

			// 2. Return no referrer.
			return 'no-referrer';

		case 'origin-when-cross-origin':
			// 1. If the origin of referrerURL and the origin of request's current URL are the same, then
			//    return referrerURL.
			if (referrerURL.origin === currentURL.origin) {
				return referrerURL;
			}

			// Return referrerOrigin.
			return referrerOrigin;

		case 'no-referrer-when-downgrade':
			// 1. If referrerURL is a potentially trustworthy URL and request's current URL is not a
			//    potentially trustworthy URL, then return no referrer.
			if (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {
				return 'no-referrer';
			}

			// 2. Return referrerURL.
			return referrerURL;

		default:
			throw new TypeError(`Invalid referrerPolicy: ${policy}`);
	}
}

/**
 * @see {@link https://w3c.github.io/webappsec-referrer-policy/#parse-referrer-policy-from-header|Referrer Policy §8.1. Parse a referrer policy from a Referrer-Policy header}
 * @param {Headers} headers Response headers
 * @returns {string} policy
 */
function parseReferrerPolicyFromHeader(headers) {
	// 1. Let policy-tokens be the result of extracting header list values given `Referrer-Policy`
	//    and response’s header list.
	const policyTokens = (headers.get('referrer-policy') || '').split(/[,\s]+/);

	// 2. Let policy be the empty string.
	let policy = '';

	// 3. For each token in policy-tokens, if token is a referrer policy and token is not the empty
	//    string, then set policy to token.
	// Note: This algorithm loops over multiple policy values to allow deployment of new policy
	// values with fallbacks for older user agents, as described in § 11.1 Unknown Policy Values.
	for (const token of policyTokens) {
		if (token && ReferrerPolicy.has(token)) {
			policy = token;
		}
	}

	// 4. Return policy.
	return policy;
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/node-fetch@3.3.0/node_modules/node-fetch/src/request.js
/**
 * Request.js
 *
 * Request class contains server only options
 *
 * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.
 */









const request_INTERNALS = Symbol('Request internals');

/**
 * Check if `obj` is an instance of Request.
 *
 * @param  {*} object
 * @return {boolean}
 */
const isRequest = object => {
	return (
		typeof object === 'object' &&
		typeof object[request_INTERNALS] === 'object'
	);
};

const doBadDataWarn = (0,external_node_util_.deprecate)(() => {},
	'.data is not a valid RequestInit property, use .body instead',
	'https://github.com/node-fetch/node-fetch/issues/1000 (request)');

/**
 * Request class
 *
 * Ref: https://fetch.spec.whatwg.org/#request-class
 *
 * @param   Mixed   input  Url or Request instance
 * @param   Object  init   Custom options
 * @return  Void
 */
class Request extends Body {
	constructor(input, init = {}) {
		let parsedURL;

		// Normalize input and force URL to be encoded as UTF-8 (https://github.com/node-fetch/node-fetch/issues/245)
		if (isRequest(input)) {
			parsedURL = new URL(input.url);
		} else {
			parsedURL = new URL(input);
			input = {};
		}

		if (parsedURL.username !== '' || parsedURL.password !== '') {
			throw new TypeError(`${parsedURL} is an url with embedded credentials.`);
		}

		let method = init.method || input.method || 'GET';
		if (/^(delete|get|head|options|post|put)$/i.test(method)) {
			method = method.toUpperCase();
		}

		if (!isRequest(init) && 'data' in init) {
			doBadDataWarn();
		}

		// eslint-disable-next-line no-eq-null, eqeqeq
		if ((init.body != null || (isRequest(input) && input.body !== null)) &&
			(method === 'GET' || method === 'HEAD')) {
			throw new TypeError('Request with GET/HEAD method cannot have body');
		}

		const inputBody = init.body ?
			init.body :
			(isRequest(input) && input.body !== null ?
				clone(input) :
				null);

		super(inputBody, {
			size: init.size || input.size || 0
		});

		const headers = new Headers(init.headers || input.headers || {});

		if (inputBody !== null && !headers.has('Content-Type')) {
			const contentType = extractContentType(inputBody, this);
			if (contentType) {
				headers.set('Content-Type', contentType);
			}
		}

		let signal = isRequest(input) ?
			input.signal :
			null;
		if ('signal' in init) {
			signal = init.signal;
		}

		// eslint-disable-next-line no-eq-null, eqeqeq
		if (signal != null && !isAbortSignal(signal)) {
			throw new TypeError('Expected signal to be an instanceof AbortSignal or EventTarget');
		}

		// §5.4, Request constructor steps, step 15.1
		// eslint-disable-next-line no-eq-null, eqeqeq
		let referrer = init.referrer == null ? input.referrer : init.referrer;
		if (referrer === '') {
			// §5.4, Request constructor steps, step 15.2
			referrer = 'no-referrer';
		} else if (referrer) {
			// §5.4, Request constructor steps, step 15.3.1, 15.3.2
			const parsedReferrer = new URL(referrer);
			// §5.4, Request constructor steps, step 15.3.3, 15.3.4
			referrer = /^about:(\/\/)?client$/.test(parsedReferrer) ? 'client' : parsedReferrer;
		} else {
			referrer = undefined;
		}

		this[request_INTERNALS] = {
			method,
			redirect: init.redirect || input.redirect || 'follow',
			headers,
			parsedURL,
			signal,
			referrer
		};

		// Node-fetch-only options
		this.follow = init.follow === undefined ? (input.follow === undefined ? 20 : input.follow) : init.follow;
		this.compress = init.compress === undefined ? (input.compress === undefined ? true : input.compress) : init.compress;
		this.counter = init.counter || input.counter || 0;
		this.agent = init.agent || input.agent;
		this.highWaterMark = init.highWaterMark || input.highWaterMark || 16384;
		this.insecureHTTPParser = init.insecureHTTPParser || input.insecureHTTPParser || false;

		// §5.4, Request constructor steps, step 16.
		// Default is empty string per https://fetch.spec.whatwg.org/#concept-request-referrer-policy
		this.referrerPolicy = init.referrerPolicy || input.referrerPolicy || '';
	}

	/** @returns {string} */
	get method() {
		return this[request_INTERNALS].method;
	}

	/** @returns {string} */
	get url() {
		return (0,external_node_url_.format)(this[request_INTERNALS].parsedURL);
	}

	/** @returns {Headers} */
	get headers() {
		return this[request_INTERNALS].headers;
	}

	get redirect() {
		return this[request_INTERNALS].redirect;
	}

	/** @returns {AbortSignal} */
	get signal() {
		return this[request_INTERNALS].signal;
	}

	// https://fetch.spec.whatwg.org/#dom-request-referrer
	get referrer() {
		if (this[request_INTERNALS].referrer === 'no-referrer') {
			return '';
		}

		if (this[request_INTERNALS].referrer === 'client') {
			return 'about:client';
		}

		if (this[request_INTERNALS].referrer) {
			return this[request_INTERNALS].referrer.toString();
		}

		return undefined;
	}

	get referrerPolicy() {
		return this[request_INTERNALS].referrerPolicy;
	}

	set referrerPolicy(referrerPolicy) {
		this[request_INTERNALS].referrerPolicy = validateReferrerPolicy(referrerPolicy);
	}

	/**
	 * Clone this request
	 *
	 * @return  Request
	 */
	clone() {
		return new Request(this);
	}

	get [Symbol.toStringTag]() {
		return 'Request';
	}
}

Object.defineProperties(Request.prototype, {
	method: {enumerable: true},
	url: {enumerable: true},
	headers: {enumerable: true},
	redirect: {enumerable: true},
	clone: {enumerable: true},
	signal: {enumerable: true},
	referrer: {enumerable: true},
	referrerPolicy: {enumerable: true}
});

/**
 * Convert a Request to Node.js http request options.
 *
 * @param {Request} request - A Request instance
 * @return The options object to be passed to http.request
 */
const getNodeRequestOptions = request => {
	const {parsedURL} = request[request_INTERNALS];
	const headers = new Headers(request[request_INTERNALS].headers);

	// Fetch step 1.3
	if (!headers.has('Accept')) {
		headers.set('Accept', '*/*');
	}

	// HTTP-network-or-cache fetch steps 2.4-2.7
	let contentLengthValue = null;
	if (request.body === null && /^(post|put)$/i.test(request.method)) {
		contentLengthValue = '0';
	}

	if (request.body !== null) {
		const totalBytes = getTotalBytes(request);
		// Set Content-Length if totalBytes is a number (that is not NaN)
		if (typeof totalBytes === 'number' && !Number.isNaN(totalBytes)) {
			contentLengthValue = String(totalBytes);
		}
	}

	if (contentLengthValue) {
		headers.set('Content-Length', contentLengthValue);
	}

	// 4.1. Main fetch, step 2.6
	// > If request's referrer policy is the empty string, then set request's referrer policy to the
	// > default referrer policy.
	if (request.referrerPolicy === '') {
		request.referrerPolicy = DEFAULT_REFERRER_POLICY;
	}

	// 4.1. Main fetch, step 2.7
	// > If request's referrer is not "no-referrer", set request's referrer to the result of invoking
	// > determine request's referrer.
	if (request.referrer && request.referrer !== 'no-referrer') {
		request[request_INTERNALS].referrer = determineRequestsReferrer(request);
	} else {
		request[request_INTERNALS].referrer = 'no-referrer';
	}

	// 4.5. HTTP-network-or-cache fetch, step 6.9
	// > If httpRequest's referrer is a URL, then append `Referer`/httpRequest's referrer, serialized
	// >  and isomorphic encoded, to httpRequest's header list.
	if (request[request_INTERNALS].referrer instanceof URL) {
		headers.set('Referer', request.referrer);
	}

	// HTTP-network-or-cache fetch step 2.11
	if (!headers.has('User-Agent')) {
		headers.set('User-Agent', 'node-fetch');
	}

	// HTTP-network-or-cache fetch step 2.15
	if (request.compress && !headers.has('Accept-Encoding')) {
		headers.set('Accept-Encoding', 'gzip, deflate, br');
	}

	let {agent} = request;
	if (typeof agent === 'function') {
		agent = agent(parsedURL);
	}

	if (!headers.has('Connection') && !agent) {
		headers.set('Connection', 'close');
	}

	// HTTP-network fetch step 4.2
	// chunked encoding is handled by Node.js

	const search = getSearch(parsedURL);

	// Pass the full URL directly to request(), but overwrite the following
	// options:
	const options = {
		// Overwrite search to retain trailing ? (issue #776)
		path: parsedURL.pathname + search,
		// The following options are not expressed in the URL
		method: request.method,
		headers: headers[Symbol.for('nodejs.util.inspect.custom')](),
		insecureHTTPParser: request.insecureHTTPParser,
		agent
	};

	return {
		/** @type {URL} */
		parsedURL,
		options
	};
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/node-fetch@3.3.0/node_modules/node-fetch/src/errors/abort-error.js


/**
 * AbortError interface for cancelled requests
 */
class AbortError extends FetchBaseError {
	constructor(message, type = 'aborted') {
		super(message, type);
	}
}

// EXTERNAL MODULE: ./node_modules/.pnpm/fetch-blob@3.2.0/node_modules/fetch-blob/from.js
var from = __nccwpck_require__(5703);
;// CONCATENATED MODULE: ./node_modules/.pnpm/node-fetch@3.3.0/node_modules/node-fetch/src/index.js
/**
 * Index.js
 *
 * a request API compatible with window.fetch
 *
 * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.
 */
























const supportedSchemas = new Set(['data:', 'http:', 'https:']);

/**
 * Fetch function
 *
 * @param   {string | URL | import('./request').default} url - Absolute url or Request instance
 * @param   {*} [options_] - Fetch options
 * @return  {Promise<import('./response').default>}
 */
async function fetch(url, options_) {
	return new Promise((resolve, reject) => {
		// Build request object
		const request = new Request(url, options_);
		const {parsedURL, options} = getNodeRequestOptions(request);
		if (!supportedSchemas.has(parsedURL.protocol)) {
			throw new TypeError(`node-fetch cannot load ${url}. URL scheme "${parsedURL.protocol.replace(/:$/, '')}" is not supported.`);
		}

		if (parsedURL.protocol === 'data:') {
			const data = dist(request.url);
			const response = new Response(data, {headers: {'Content-Type': data.typeFull}});
			resolve(response);
			return;
		}

		// Wrap http.request into fetch
		const send = (parsedURL.protocol === 'https:' ? external_node_https_namespaceObject : external_node_http_namespaceObject).request;
		const {signal} = request;
		let response = null;

		const abort = () => {
			const error = new AbortError('The operation was aborted.');
			reject(error);
			if (request.body && request.body instanceof external_node_stream_namespaceObject.Readable) {
				request.body.destroy(error);
			}

			if (!response || !response.body) {
				return;
			}

			response.body.emit('error', error);
		};

		if (signal && signal.aborted) {
			abort();
			return;
		}

		const abortAndFinalize = () => {
			abort();
			finalize();
		};

		// Send request
		const request_ = send(parsedURL.toString(), options);

		if (signal) {
			signal.addEventListener('abort', abortAndFinalize);
		}

		const finalize = () => {
			request_.abort();
			if (signal) {
				signal.removeEventListener('abort', abortAndFinalize);
			}
		};

		request_.on('error', error => {
			reject(new FetchError(`request to ${request.url} failed, reason: ${error.message}`, 'system', error));
			finalize();
		});

		fixResponseChunkedTransferBadEnding(request_, error => {
			if (response && response.body) {
				response.body.destroy(error);
			}
		});

		/* c8 ignore next 18 */
		if (process.version < 'v14') {
			// Before Node.js 14, pipeline() does not fully support async iterators and does not always
			// properly handle when the socket close/end events are out of order.
			request_.on('socket', s => {
				let endedWithEventsCount;
				s.prependListener('end', () => {
					endedWithEventsCount = s._eventsCount;
				});
				s.prependListener('close', hadError => {
					// if end happened before close but the socket didn't emit an error, do it now
					if (response && endedWithEventsCount < s._eventsCount && !hadError) {
						const error = new Error('Premature close');
						error.code = 'ERR_STREAM_PREMATURE_CLOSE';
						response.body.emit('error', error);
					}
				});
			});
		}

		request_.on('response', response_ => {
			request_.setTimeout(0);
			const headers = fromRawHeaders(response_.rawHeaders);

			// HTTP fetch step 5
			if (isRedirect(response_.statusCode)) {
				// HTTP fetch step 5.2
				const location = headers.get('Location');

				// HTTP fetch step 5.3
				let locationURL = null;
				try {
					locationURL = location === null ? null : new URL(location, request.url);
				} catch {
					// error here can only be invalid URL in Location: header
					// do not throw when options.redirect == manual
					// let the user extract the errorneous redirect URL
					if (request.redirect !== 'manual') {
						reject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, 'invalid-redirect'));
						finalize();
						return;
					}
				}

				// HTTP fetch step 5.5
				switch (request.redirect) {
					case 'error':
						reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, 'no-redirect'));
						finalize();
						return;
					case 'manual':
						// Nothing to do
						break;
					case 'follow': {
						// HTTP-redirect fetch step 2
						if (locationURL === null) {
							break;
						}

						// HTTP-redirect fetch step 5
						if (request.counter >= request.follow) {
							reject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));
							finalize();
							return;
						}

						// HTTP-redirect fetch step 6 (counter increment)
						// Create a new Request object.
						const requestOptions = {
							headers: new Headers(request.headers),
							follow: request.follow,
							counter: request.counter + 1,
							agent: request.agent,
							compress: request.compress,
							method: request.method,
							body: clone(request),
							signal: request.signal,
							size: request.size,
							referrer: request.referrer,
							referrerPolicy: request.referrerPolicy
						};

						// when forwarding sensitive headers like "Authorization",
						// "WWW-Authenticate", and "Cookie" to untrusted targets,
						// headers will be ignored when following a redirect to a domain
						// that is not a subdomain match or exact match of the initial domain.
						// For example, a redirect from "foo.com" to either "foo.com" or "sub.foo.com"
						// will forward the sensitive headers, but a redirect to "bar.com" will not.
						// headers will also be ignored when following a redirect to a domain using
						// a different protocol. For example, a redirect from "https://foo.com" to "http://foo.com"
						// will not forward the sensitive headers
						if (!isDomainOrSubdomain(request.url, locationURL) || !isSameProtocol(request.url, locationURL)) {
							for (const name of ['authorization', 'www-authenticate', 'cookie', 'cookie2']) {
								requestOptions.headers.delete(name);
							}
						}

						// HTTP-redirect fetch step 9
						if (response_.statusCode !== 303 && request.body && options_.body instanceof external_node_stream_namespaceObject.Readable) {
							reject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));
							finalize();
							return;
						}

						// HTTP-redirect fetch step 11
						if (response_.statusCode === 303 || ((response_.statusCode === 301 || response_.statusCode === 302) && request.method === 'POST')) {
							requestOptions.method = 'GET';
							requestOptions.body = undefined;
							requestOptions.headers.delete('content-length');
						}

						// HTTP-redirect fetch step 14
						const responseReferrerPolicy = parseReferrerPolicyFromHeader(headers);
						if (responseReferrerPolicy) {
							requestOptions.referrerPolicy = responseReferrerPolicy;
						}

						// HTTP-redirect fetch step 15
						resolve(fetch(new Request(locationURL, requestOptions)));
						finalize();
						return;
					}

					default:
						return reject(new TypeError(`Redirect option '${request.redirect}' is not a valid value of RequestRedirect`));
				}
			}

			// Prepare response
			if (signal) {
				response_.once('end', () => {
					signal.removeEventListener('abort', abortAndFinalize);
				});
			}

			let body = (0,external_node_stream_namespaceObject.pipeline)(response_, new external_node_stream_namespaceObject.PassThrough(), error => {
				if (error) {
					reject(error);
				}
			});
			// see https://github.com/nodejs/node/pull/29376
			/* c8 ignore next 3 */
			if (process.version < 'v12.10') {
				response_.on('aborted', abortAndFinalize);
			}

			const responseOptions = {
				url: request.url,
				status: response_.statusCode,
				statusText: response_.statusMessage,
				headers,
				size: request.size,
				counter: request.counter,
				highWaterMark: request.highWaterMark
			};

			// HTTP-network fetch step 12.1.1.3
			const codings = headers.get('Content-Encoding');

			// HTTP-network fetch step 12.1.1.4: handle content codings

			// in following scenarios we ignore compression support
			// 1. compression support is disabled
			// 2. HEAD request
			// 3. no Content-Encoding header
			// 4. no content response (204)
			// 5. content not modified response (304)
			if (!request.compress || request.method === 'HEAD' || codings === null || response_.statusCode === 204 || response_.statusCode === 304) {
				response = new Response(body, responseOptions);
				resolve(response);
				return;
			}

			// For Node v6+
			// Be less strict when decoding compressed responses, since sometimes
			// servers send slightly invalid responses that are still accepted
			// by common browsers.
			// Always using Z_SYNC_FLUSH is what cURL does.
			const zlibOptions = {
				flush: external_node_zlib_namespaceObject.Z_SYNC_FLUSH,
				finishFlush: external_node_zlib_namespaceObject.Z_SYNC_FLUSH
			};

			// For gzip
			if (codings === 'gzip' || codings === 'x-gzip') {
				body = (0,external_node_stream_namespaceObject.pipeline)(body, external_node_zlib_namespaceObject.createGunzip(zlibOptions), error => {
					if (error) {
						reject(error);
					}
				});
				response = new Response(body, responseOptions);
				resolve(response);
				return;
			}

			// For deflate
			if (codings === 'deflate' || codings === 'x-deflate') {
				// Handle the infamous raw deflate response from old servers
				// a hack for old IIS and Apache servers
				const raw = (0,external_node_stream_namespaceObject.pipeline)(response_, new external_node_stream_namespaceObject.PassThrough(), error => {
					if (error) {
						reject(error);
					}
				});
				raw.once('data', chunk => {
					// See http://stackoverflow.com/questions/37519828
					if ((chunk[0] & 0x0F) === 0x08) {
						body = (0,external_node_stream_namespaceObject.pipeline)(body, external_node_zlib_namespaceObject.createInflate(), error => {
							if (error) {
								reject(error);
							}
						});
					} else {
						body = (0,external_node_stream_namespaceObject.pipeline)(body, external_node_zlib_namespaceObject.createInflateRaw(), error => {
							if (error) {
								reject(error);
							}
						});
					}

					response = new Response(body, responseOptions);
					resolve(response);
				});
				raw.once('end', () => {
					// Some old IIS servers return zero-length OK deflate responses, so
					// 'data' is never emitted. See https://github.com/node-fetch/node-fetch/pull/903
					if (!response) {
						response = new Response(body, responseOptions);
						resolve(response);
					}
				});
				return;
			}

			// For br
			if (codings === 'br') {
				body = (0,external_node_stream_namespaceObject.pipeline)(body, external_node_zlib_namespaceObject.createBrotliDecompress(), error => {
					if (error) {
						reject(error);
					}
				});
				response = new Response(body, responseOptions);
				resolve(response);
				return;
			}

			// Otherwise, use response as-is
			response = new Response(body, responseOptions);
			resolve(response);
		});

		// eslint-disable-next-line promise/prefer-await-to-then
		writeToStream(request_, request).catch(reject);
	});
}

function fixResponseChunkedTransferBadEnding(request, errorCallback) {
	const LAST_CHUNK = external_node_buffer_namespaceObject.Buffer.from('0\r\n\r\n');

	let isChunkedTransfer = false;
	let properLastChunkReceived = false;
	let previousChunk;

	request.on('response', response => {
		const {headers} = response;
		isChunkedTransfer = headers['transfer-encoding'] === 'chunked' && !headers['content-length'];
	});

	request.on('socket', socket => {
		const onSocketClose = () => {
			if (isChunkedTransfer && !properLastChunkReceived) {
				const error = new Error('Premature close');
				error.code = 'ERR_STREAM_PREMATURE_CLOSE';
				errorCallback(error);
			}
		};

		const onData = buf => {
			properLastChunkReceived = external_node_buffer_namespaceObject.Buffer.compare(buf.slice(-5), LAST_CHUNK) === 0;

			// Sometimes final 0-length chunk and end of message code are in separate packets
			if (!properLastChunkReceived && previousChunk) {
				properLastChunkReceived = (
					external_node_buffer_namespaceObject.Buffer.compare(previousChunk.slice(-3), LAST_CHUNK.slice(0, 3)) === 0 &&
					external_node_buffer_namespaceObject.Buffer.compare(buf.slice(-2), LAST_CHUNK.slice(3)) === 0
				);
			}

			previousChunk = buf;
		};

		socket.prependListener('close', onSocketClose);
		socket.on('data', onData);

		request.on('close', () => {
			socket.removeListener('close', onSocketClose);
			socket.removeListener('data', onData);
		});
	});
}


/***/ }),

/***/ 7771:
/***/ ((__webpack_module__, __unused_webpack___webpack_exports__, __nccwpck_require__) => {

__nccwpck_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {
/* harmony import */ var node_fs_promises__WEBPACK_IMPORTED_MODULE_0__ = __nccwpck_require__(3977);
/* harmony import */ var _hugoalh_advanced_determine__WEBPACK_IMPORTED_MODULE_1__ = __nccwpck_require__(5137);
/* harmony import */ var node_path__WEBPACK_IMPORTED_MODULE_2__ = __nccwpck_require__(9411);
/* harmony import */ var chalk__WEBPACK_IMPORTED_MODULE_3__ = __nccwpck_require__(4261);
/* harmony import */ var node_fs__WEBPACK_IMPORTED_MODULE_4__ = __nccwpck_require__(7561);
/* harmony import */ var _actions_core__WEBPACK_IMPORTED_MODULE_5__ = __nccwpck_require__(7733);
/* harmony import */ var node_url__WEBPACK_IMPORTED_MODULE_6__ = __nccwpck_require__(1041);
/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_7__ = __nccwpck_require__(6005);
/* harmony import */ var _hugoalh_string_overflow__WEBPACK_IMPORTED_MODULE_8__ = __nccwpck_require__(8033);
/* harmony import */ var ajv_dist_2020_js__WEBPACK_IMPORTED_MODULE_9__ = __nccwpck_require__(9407);
/* harmony import */ var ajv_formats__WEBPACK_IMPORTED_MODULE_10__ = __nccwpck_require__(6314);
/* harmony import */ var ajv_formats_draft2019__WEBPACK_IMPORTED_MODULE_11__ = __nccwpck_require__(7152);
/* harmony import */ var color__WEBPACK_IMPORTED_MODULE_15__ = __nccwpck_require__(618);
/* harmony import */ var color_name_list__WEBPACK_IMPORTED_MODULE_12__ = __nccwpck_require__(248);
/* harmony import */ var form_data__WEBPACK_IMPORTED_MODULE_13__ = __nccwpck_require__(6872);
/* harmony import */ var node_fetch__WEBPACK_IMPORTED_MODULE_16__ = __nccwpck_require__(5066);
/* harmony import */ var yaml__WEBPACK_IMPORTED_MODULE_14__ = __nccwpck_require__(3277);

















try {
	const ghactionsActionDirectory = (0,node_path__WEBPACK_IMPORTED_MODULE_2__.join)((0,node_path__WEBPACK_IMPORTED_MODULE_2__.dirname)((0,node_url__WEBPACK_IMPORTED_MODULE_6__.fileURLToPath)(import.meta.url)), "../");
	const ghactionsWorkspaceDirectory = process.env.GITHUB_WORKSPACE;
	const chalk = new chalk__WEBPACK_IMPORTED_MODULE_3__/* .Chalk */ .cX({ level: 3 });
	const discordWebhookQuery = new node_url__WEBPACK_IMPORTED_MODULE_6__.URLSearchParams();
	const discordWebhookURLRegExp = /^(?:https:\/\/(?:canary\.)?discord(?:app)?\.com\/api\/webhooks\/)?(?<key>\d+\/(?:[\da-zA-Z][\da-zA-Z_-]*)?[\da-zA-Z])$/u;
	const ajv = new ajv_dist_2020_js__WEBPACK_IMPORTED_MODULE_9__({
		$comment: false,
		$data: false,
		allErrors: true,
		allowMatchingProperties: true,
		allowUnionTypes: true,
		code: {
			es5: false,
			esm: true,
			lines: false,
			optimize: true,
			source: false
		},
		coerceTypes: false,
		logger: {
			error: _actions_core__WEBPACK_IMPORTED_MODULE_5__.error,
			log: console.log,
			warn: _actions_core__WEBPACK_IMPORTED_MODULE_5__.warning
		},
		strictSchema: "log",
		timestamp: "string",
		useDefaults: false,
		validateSchema: true
	});
	ajv_formats__WEBPACK_IMPORTED_MODULE_10__(ajv);
	ajv_formats_draft2019__WEBPACK_IMPORTED_MODULE_11__(ajv);
	const jsonSchemaValidator = ajv.compile(JSON.parse((await (0,node_fs_promises__WEBPACK_IMPORTED_MODULE_0__.readFile)((0,node_path__WEBPACK_IMPORTED_MODULE_2__.join)(ghactionsActionDirectory, "discord-webhook-payload-custom.schema.json"))).toString()));
	const exclusiveColorNamespaceList = JSON.parse((await (0,node_fs_promises__WEBPACK_IMPORTED_MODULE_0__.readFile)((0,node_path__WEBPACK_IMPORTED_MODULE_2__.join)(ghactionsActionDirectory, "exclusive-color-namespace.json"))).toString());
	(0,_actions_core__WEBPACK_IMPORTED_MODULE_5__.startGroup)(`Import inputs.`);
	let keyRaw = (0,_actions_core__WEBPACK_IMPORTED_MODULE_5__.getInput)("key");
	if (!(new _hugoalh_advanced_determine__WEBPACK_IMPORTED_MODULE_1__/* .StringItemFilter */ .Pf({ pattern: discordWebhookURLRegExp }).test(keyRaw))) {
		throw new TypeError(`Input \`key\` is not a valid Discord webhook key!`);
	}
	let key = keyRaw.match(discordWebhookURLRegExp).groups.key;
	(0,_actions_core__WEBPACK_IMPORTED_MODULE_5__.setSecret)(key);
	let truncateEnable = (0,_actions_core__WEBPACK_IMPORTED_MODULE_5__.getBooleanInput)("truncate_enable");
	if (typeof truncateEnable !== "boolean") {
		throw new TypeError(`Input \`truncate_enable\` must be type of boolean!`);
	}
	console.log(`${chalk.bold("Truncate Enable:")} ${truncateEnable}`);
	let truncateEllipsis = (0,_actions_core__WEBPACK_IMPORTED_MODULE_5__.getInput)("truncate_ellipsis");
	console.log(`${chalk.bold("Truncate Ellipsis:")} ${truncateEllipsis}`);
	let truncatePosition = (0,_actions_core__WEBPACK_IMPORTED_MODULE_5__.getInput)("truncate_position");
	console.log(`${chalk.bold("Truncate Position:")} ${truncatePosition}`);
	let stringOverflowTruncatorOptions = {
		ellipsisMark: truncateEllipsis,
		ellipsisPosition: truncatePosition
	};
	const stringTruncate80 = new _hugoalh_string_overflow__WEBPACK_IMPORTED_MODULE_8__/* .StringOverflowTruncator */ .Qy(80, stringOverflowTruncatorOptions);
	const stringTruncate100 = new _hugoalh_string_overflow__WEBPACK_IMPORTED_MODULE_8__/* .StringOverflowTruncator */ .Qy(100, stringOverflowTruncatorOptions);
	const stringTruncate256 = new _hugoalh_string_overflow__WEBPACK_IMPORTED_MODULE_8__/* .StringOverflowTruncator */ .Qy(256, stringOverflowTruncatorOptions);
	const stringTruncate1024 = new _hugoalh_string_overflow__WEBPACK_IMPORTED_MODULE_8__/* .StringOverflowTruncator */ .Qy(1024, stringOverflowTruncatorOptions);
	const stringTruncate2000 = new _hugoalh_string_overflow__WEBPACK_IMPORTED_MODULE_8__/* .StringOverflowTruncator */ .Qy(2000, stringOverflowTruncatorOptions);
	const stringTruncate2048 = new _hugoalh_string_overflow__WEBPACK_IMPORTED_MODULE_8__/* .StringOverflowTruncator */ .Qy(2048, stringOverflowTruncatorOptions);
	const stringTruncate4096 = new _hugoalh_string_overflow__WEBPACK_IMPORTED_MODULE_8__/* .StringOverflowTruncator */ .Qy(4096, stringOverflowTruncatorOptions);
	let payloadRaw = (0,_actions_core__WEBPACK_IMPORTED_MODULE_5__.getInput)("payload");
	let payload = new _hugoalh_advanced_determine__WEBPACK_IMPORTED_MODULE_1__/* .StringifyJSONItemFilter */ .yA({
		allowEmpty: true,
		arrayRoot: false
	}).test(payloadRaw) ? JSON.parse(payloadRaw) : yaml__WEBPACK_IMPORTED_MODULE_14__.parse(payloadRaw);
	if (!(new _hugoalh_advanced_determine__WEBPACK_IMPORTED_MODULE_1__/* .JSONItemFilter */ .eP({
		allowEmpty: true,
		arrayRoot: false
	}).test(payload))) {
		throw new TypeError(`\`${payload}\` is not a valid Discord webhook JSON/YAML/YML payload!`);
	}
	if (typeof payload.$schema !== "undefined") {
		delete payload.$schema;
	}
	if (typeof payload.content === "string") {
		if (payload.content.length === 0) {
			delete payload.content;
		} else if (payload.content.length > 2000) {
			if (!truncateEnable) {
				throw new Error(`Input \`payload.content\` is too large!`);
			}
			payload.content = stringTruncate2000.truncate(payload.content);
		}
	}
	if (typeof payload.username === "string") {
		if (payload.username.length === 0) {
			delete payload.username;
		} else if (payload.username.length > 80) {
			if (!truncateEnable) {
				throw new Error(`Input \`payload.username\` is too large!`);
			}
			payload.username = stringTruncate80.truncate(payload.username);
		}
	}
	if (typeof payload.avatar_url === "string") {
		if (payload.avatar_url.length === 0) {
			delete payload.avatar_url;
		}
	}
	if (Array.isArray(payload.embeds)) {
		for (let embedsIndex = 0; embedsIndex < payload.embeds.length; embedsIndex++) {
			if (typeof payload.embeds[embedsIndex].title === "string") {
				if (payload.embeds[embedsIndex].title.length === 0) {
					delete payload.embeds[embedsIndex].title;
				} else if (payload.embeds[embedsIndex].title.length > 256) {
					if (!truncateEnable) {
						throw new Error(`Input \`payload.embeds[${embedsIndex}].title\` is too large!`);
					}
					payload.embeds[embedsIndex].title = stringTruncate256.truncate(payload.embeds[embedsIndex].title);
				}
			}
			if (typeof payload.embeds[embedsIndex].description === "string") {
				if (payload.embeds[embedsIndex].description.length === 0) {
					delete payload.embeds[embedsIndex].description;
				} else if (payload.embeds[embedsIndex].description.length > 4096) {
					if (!truncateEnable) {
						throw new Error(`Input \`payload.embeds[${embedsIndex}].description\` is too large!`);
					}
					payload.embeds[embedsIndex].description = stringTruncate4096.truncate(payload.embeds[embedsIndex].description);
				}
			}
			if (typeof payload.embeds[embedsIndex].url === "string") {
				if (payload.embeds[embedsIndex].url.length === 0) {
					delete payload.embeds[embedsIndex].url;
				}
			}
			if (typeof payload.embeds[embedsIndex].color === "string") {
				if (payload.embeds[embedsIndex].color.toLowerCase() === "random") {
					payload.embeds[embedsIndex].color = (0,node_crypto__WEBPACK_IMPORTED_MODULE_7__.randomInt)(0, 256) * 65536 + (0,node_crypto__WEBPACK_IMPORTED_MODULE_7__.randomInt)(0, 256) * 256 + (0,node_crypto__WEBPACK_IMPORTED_MODULE_7__.randomInt)(0, 256);
				} else if (exclusiveColorNamespaceList.map((value) => {
					return value.name.toLowerCase();
				}).includes(payload.embeds[embedsIndex].color.toLowerCase())) {
					payload.embeds[embedsIndex].color = color__WEBPACK_IMPORTED_MODULE_15__(exclusiveColorNamespaceList[exclusiveColorNamespaceList.findIndex((value) => {
						return (value.name.toLowerCase() === payload.embeds[embedsIndex].color.toLowerCase());
					})].hex, "hex").rgbNumber();
				} else if (color_name_list__WEBPACK_IMPORTED_MODULE_12__.map((value) => {
					return value.name.toLowerCase();
				}).includes(payload.embeds[embedsIndex].color.toLowerCase())) {
					payload.embeds[embedsIndex].color = color__WEBPACK_IMPORTED_MODULE_15__(color_name_list__WEBPACK_IMPORTED_MODULE_12__[color_name_list__WEBPACK_IMPORTED_MODULE_12__.findIndex((value) => {
						return (value.name.toLowerCase() === payload.embeds[embedsIndex].color.toLowerCase());
					})].hex, "hex").rgbNumber();
				} else {
					try {
						payload.embeds[embedsIndex].color = color__WEBPACK_IMPORTED_MODULE_15__(payload.embeds[embedsIndex].color).rgbNumber();
					} catch { }
				}
			}
			if (typeof payload.embeds[embedsIndex].footer !== "undefined") {
				if (typeof payload.embeds[embedsIndex].footer.text === "string") {
					if (payload.embeds[embedsIndex].footer.text.length === 0) {
						delete payload.embeds[embedsIndex].footer.text;
					} else if (payload.embeds[embedsIndex].footer.text.length > 2048) {
						if (!truncateEnable) {
							throw new Error(`Input \`payload.embeds[${embedsIndex}].footer.text\` is too large!`);
						}
						payload.embeds[embedsIndex].footer.text = stringTruncate2048.truncate(payload.embeds[embedsIndex].footer.text);
					}
				}
				if (typeof payload.embeds[embedsIndex].footer.icon_url === "string") {
					if (payload.embeds[embedsIndex].footer.icon_url.length === 0) {
						delete payload.embeds[embedsIndex].footer.icon_url;
					}
				}
			}
			if (typeof payload.embeds[embedsIndex].image !== "undefined") {
				if (typeof payload.embeds[embedsIndex].image.url === "string") {
					if (payload.embeds[embedsIndex].image.url.length === 0) {
						delete payload.embeds[embedsIndex].image.url;
					}
				}
			}
			if (typeof payload.embeds[embedsIndex].thumbnail !== "undefined") {
				if (typeof payload.embeds[embedsIndex].thumbnail.url === "string") {
					if (payload.embeds[embedsIndex].thumbnail.url.length === 0) {
						delete payload.embeds[embedsIndex].thumbnail.url;
					}
				}
			}
			if (typeof payload.embeds[embedsIndex].author !== "undefined") {
				if (typeof payload.embeds[embedsIndex].author.name === "string") {
					if (payload.embeds[embedsIndex].author.name.length === 0) {
						delete payload.embeds[embedsIndex].author.name;
					} else if (payload.embeds[embedsIndex].author.name.length > 256) {
						if (!truncateEnable) {
							throw new Error(`Input \`payload.embeds[${embedsIndex}].author.name\` is too large!`);
						}
						payload.embeds[embedsIndex].author.name = stringTruncate256.truncate(payload.embeds[embedsIndex].author.name);
					}
				}
				if (typeof payload.embeds[embedsIndex].author.url === "string") {
					if (payload.embeds[embedsIndex].author.url.length === 0) {
						delete payload.embeds[embedsIndex].author.url;
					}
				}
				if (typeof payload.embeds[embedsIndex].author.icon_url === "string") {
					if (payload.embeds[embedsIndex].author.icon_url.length === 0) {
						delete payload.embeds[embedsIndex].author.icon_url;
					}
				}
			}
			if (Array.isArray(payload.embeds[embedsIndex].fields)) {
				for (let fieldsIndex = 0; fieldsIndex < payload.embeds[embedsIndex].fields.length; fieldsIndex++) {
					if (typeof payload.embeds[embedsIndex].fields[fieldsIndex].name === "string") {
						if (payload.embeds[embedsIndex].fields[fieldsIndex].name.length > 256) {
							if (!truncateEnable) {
								throw new Error(`Input \`payload.embeds[${embedsIndex}].fields[${fieldsIndex}].name\` is too large!`);
							}
							payload.embeds[embedsIndex].fields[fieldsIndex].name = stringTruncate256.truncate(payload.embeds[embedsIndex].fields[fieldsIndex].name);
						}
					}
					if (typeof payload.embeds[embedsIndex].fields[fieldsIndex].value === "string") {
						if (payload.embeds[embedsIndex].fields[fieldsIndex].value.length > 1024) {
							if (!truncateEnable) {
								throw new Error(`Input \`payload.embeds[${embedsIndex}].fields[${fieldsIndex}].value\` is too large!`);
							}
							payload.embeds[embedsIndex].fields[fieldsIndex].value = stringTruncate1024.truncate(payload.embeds[embedsIndex].fields[fieldsIndex].value);
						}
					}
				}
				if (payload.embeds[embedsIndex].fields.length === 0) {
					delete payload.embeds[embedsIndex].fields;
				}
			}
		}
		payload.embeds = payload.embeds.filter((value) => {
			return (Object.keys(value).length > 0);
		});
		if (payload.embeds.length === 0) {
			delete payload.embeds;
		}
	}
	if (jsonSchemaValidator(payload) === false) {
		for (let error of jsonSchemaValidator.errors) {
			(0,_actions_core__WEBPACK_IMPORTED_MODULE_5__.error)(error?.message ?? error);
		}
		throw JSON.stringify(jsonSchemaValidator.errors);
	}
	let payloadStringify = JSON.stringify(payload);
	console.log(`${chalk.bold("Payload:")} ${payloadStringify}`);
	let files = yaml__WEBPACK_IMPORTED_MODULE_14__.parse((0,_actions_core__WEBPACK_IMPORTED_MODULE_5__.getInput)("files"));
	if (
		!(new _hugoalh_advanced_determine__WEBPACK_IMPORTED_MODULE_1__/* .ArrayItemFilter */ .xG({
			allowEmpty: true,
			maximumLength: 10,
			strict: true,
			unique: true
		}).test(files)) ||
		files.some((file) => {
			return !(new _hugoalh_advanced_determine__WEBPACK_IMPORTED_MODULE_1__/* .StringItemFilter */ .Pf().test(file));
		})
	) {
		throw new TypeError(`Input \`files\` must be type of strings-array (unique) and maximum 10 elements!`);
	}
	for (let file of files) {
		try {
			await (0,node_fs_promises__WEBPACK_IMPORTED_MODULE_0__.access)((0,node_path__WEBPACK_IMPORTED_MODULE_2__.join)(ghactionsWorkspaceDirectory, file), node_fs_promises__WEBPACK_IMPORTED_MODULE_0__.constants.R_OK);
		} catch {
			throw new Error(`File \`${file}\` is not accessible, exist, and/or readable!`);
		}
	}
	console.log(`${chalk.bold("Files:")} ${files}`);
	if (typeof payload.content === "undefined" && typeof payload.embeds === "undefined" && files.length === 0) {
		throw new Error(`At least one of the input \`payload.content\`, \`payload.embeds\`, or \`files\` must be provided!`);
	}
	let method = (0,_actions_core__WEBPACK_IMPORTED_MODULE_5__.getInput)("method").toLowerCase();
	if (method.length === 0) {
		method = (files.length > 0) ? "form" : "json";
	}
	if (
		(method !== "form" && method !== "json") ||
		(method === "json" && files.length > 0)
	) {
		throw new Error(`\`${method}\` is not a valid method!`);
	}
	let wait = (0,_actions_core__WEBPACK_IMPORTED_MODULE_5__.getBooleanInput)("wait");
	if (typeof wait !== "boolean") {
		throw new TypeError(`Input \`wait\` must be type of boolean!`);
	}
	if (wait) {
		discordWebhookQuery.set("wait", "true");
	}
	console.log(`${chalk.bold("Wait:")} ${wait}`);
	let threadID = (0,_actions_core__WEBPACK_IMPORTED_MODULE_5__.getInput)("threadid");
	let threadType = (0,_actions_core__WEBPACK_IMPORTED_MODULE_5__.getInput)("thread_type").toLowerCase();
	let threadValue = (0,_actions_core__WEBPACK_IMPORTED_MODULE_5__.getInput)("thread_value");
	if (threadID.length === 0) {
		if (threadType === "id") {
			if (!(new _hugoalh_advanced_determine__WEBPACK_IMPORTED_MODULE_1__/* .StringItemFilter */ .Pf({ pattern: /^\d+$/u }).test(threadValue))) {
				throw new TypeError(`Input \`thread_value\` is not a valid thread ID!`);
			}
			(0,_actions_core__WEBPACK_IMPORTED_MODULE_5__.setSecret)(threadValue);
			discordWebhookQuery.set("thread_id", threadValue);
		} else if (threadType === "name") {
			if (threadValue.length === 0) {
				const arrayAloneFilter = new _hugoalh_advanced_determine__WEBPACK_IMPORTED_MODULE_1__/* .ArrayItemFilter */ .xG({
					maximumLength: 1,
					minimumLength: 1
				});
				const stringTFilter = new _hugoalh_advanced_determine__WEBPACK_IMPORTED_MODULE_1__/* .StringItemFilter */ .Pf({ preTrim: true });
				if (stringTFilter.test(payload.content)) {
					threadValue = stringTruncate100.truncate(payload.content.trim().replace(/\r?\n/gu, " "));
				} else if (arrayAloneFilter.test(payload.embeds) && stringTFilter.test(payload.embeds[0].title)) {
					threadValue = stringTruncate100.truncate(payload.embeds[0].title.trim().replace(/\r?\n/gu, " "));
				} else if (arrayAloneFilter.test(payload.embeds) && stringTFilter.test(payload.embeds[0].description)) {
					threadValue = stringTruncate100.truncate(payload.embeds[0].description.trim().replace(/\r?\n/gu, " "));
				} else {
					threadValue = `Send Discord Webhook - ${new Date().toISOString().replace(/\.000Z$/gu, "Z")}`;
				}
			} else if (threadValue.length > 100) {
				if (!truncateEnable) {
					throw new Error(`Input \`thread_value\` is too large!`);
				}
				threadValue = stringTruncate100.truncate(threadValue);
			}
			payload.thread_name = threadValue;
			console.log(`${chalk.bold("Thread Name:")} ${threadValue}`);
		} else if (threadType !== "none") {
			throw new TypeError(`\`${threadType}\` is not a valid thread type!`);
		}
	} else {
		if (!(new _hugoalh_advanced_determine__WEBPACK_IMPORTED_MODULE_1__/* .StringItemFilter */ .Pf({ pattern: /^\d+$/u }).test(threadID))) {
			throw new TypeError(`Input \`threadid\` is not a valid thread ID!`);
		}
		(0,_actions_core__WEBPACK_IMPORTED_MODULE_5__.setSecret)(threadID);
		discordWebhookQuery.set("thread_id", threadID);
	}
	(0,_actions_core__WEBPACK_IMPORTED_MODULE_5__.endGroup)();
	(0,_actions_core__WEBPACK_IMPORTED_MODULE_5__.startGroup)(`Post network request to Discord.`);
	let requestBody;
	let requestHeaders = {
		"User-Agent": `SendDiscordWebhook.GitHubAction/5.0.1 NodeJS/${process.versions.node}-${process.platform}-${process.arch}`
	};
	let requestQuery = discordWebhookQuery.toString();
	if (method === "form") {
		requestBody = new form_data__WEBPACK_IMPORTED_MODULE_13__();
		if (files.length > 0) {
			payload.attachments = [];
			for (let filesIndex = 0; filesIndex < files.length; filesIndex++) {
				let fileFullPath = (0,node_path__WEBPACK_IMPORTED_MODULE_2__.join)(ghactionsWorkspaceDirectory, files[filesIndex]);
				let fileName = (0,node_path__WEBPACK_IMPORTED_MODULE_2__.basename)(fileFullPath);
				payload.attachments.push({
					"filename": fileName,
					"id": filesIndex
				});
				requestBody.append(`files[${filesIndex}]`, (0,node_fs__WEBPACK_IMPORTED_MODULE_4__.createReadStream)(fileFullPath));
			}
		}
		requestBody.append("payload_json", JSON.stringify(payload));
		requestHeaders = {
			...requestBody.getHeaders(),
			...requestHeaders
		};
	} else {
		requestBody = payloadStringify;
		requestHeaders = {
			"Content-Type": "application/json",
			...requestHeaders
		};
	}
	let response = await (0,node_fetch__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .ZP)(`https://discord.com/api/webhooks/${key}${(requestQuery.length > 0) ? `?${requestQuery}` : ""}`, {
		body: requestBody,
		follow: 1,
		headers: requestHeaders,
		method: "POST",
		redirect: "follow"
	}).catch((reason) => {
		throw new Error(`Unexpected web request issue: ${reason?.message ?? reason}`);
	});
	let responseText = await response.text();
	(0,_actions_core__WEBPACK_IMPORTED_MODULE_5__.setOutput)("response", responseText);
	(0,_actions_core__WEBPACK_IMPORTED_MODULE_5__.setOutput)("status_code", response.status);
	(0,_actions_core__WEBPACK_IMPORTED_MODULE_5__.setOutput)("status_ok", response.ok);
	(0,_actions_core__WEBPACK_IMPORTED_MODULE_5__.setOutput)("status_text", response.statusText);
	if (!response.ok) {
		throw new Error(`Unexpected response status \`${response.status} ${response.statusText}\`: ${responseText}`);
	}
	console.log(`${chalk.bold("Response Status:")} ${response.status} ${response.statusText}`);
	console.log(`${chalk.bold("Response Content:")} ${responseText}`);
	(0,_actions_core__WEBPACK_IMPORTED_MODULE_5__.endGroup)();
} catch (error) {
	(0,_actions_core__WEBPACK_IMPORTED_MODULE_5__.error)(error?.message ?? error);
	(0,_actions_core__WEBPACK_IMPORTED_MODULE_5__.endGroup)();
	process.exit(1);
}

__webpack_async_result__();
} catch(e) { __webpack_async_result__(e); } }, 1);

/***/ }),

/***/ 199:
/***/ ((module) => {

module.exports = JSON.parse('{"$id":"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#","description":"Meta-schema for $data reference (JSON AnySchema extension proposal)","type":"object","required":["$data"],"properties":{"$data":{"type":"string","anyOf":[{"format":"relative-json-pointer"},{"format":"json-pointer"}]}},"additionalProperties":false}');

/***/ }),

/***/ 4332:
/***/ ((module) => {

module.exports = JSON.parse('{"$schema":"https://json-schema.org/draft/2020-12/schema","$id":"https://json-schema.org/draft/2020-12/meta/applicator","$vocabulary":{"https://json-schema.org/draft/2020-12/vocab/applicator":true},"$dynamicAnchor":"meta","title":"Applicator vocabulary meta-schema","type":["object","boolean"],"properties":{"prefixItems":{"$ref":"#/$defs/schemaArray"},"items":{"$dynamicRef":"#meta"},"contains":{"$dynamicRef":"#meta"},"additionalProperties":{"$dynamicRef":"#meta"},"properties":{"type":"object","additionalProperties":{"$dynamicRef":"#meta"},"default":{}},"patternProperties":{"type":"object","additionalProperties":{"$dynamicRef":"#meta"},"propertyNames":{"format":"regex"},"default":{}},"dependentSchemas":{"type":"object","additionalProperties":{"$dynamicRef":"#meta"},"default":{}},"propertyNames":{"$dynamicRef":"#meta"},"if":{"$dynamicRef":"#meta"},"then":{"$dynamicRef":"#meta"},"else":{"$dynamicRef":"#meta"},"allOf":{"$ref":"#/$defs/schemaArray"},"anyOf":{"$ref":"#/$defs/schemaArray"},"oneOf":{"$ref":"#/$defs/schemaArray"},"not":{"$dynamicRef":"#meta"}},"$defs":{"schemaArray":{"type":"array","minItems":1,"items":{"$dynamicRef":"#meta"}}}}');

/***/ }),

/***/ 2462:
/***/ ((module) => {

module.exports = JSON.parse('{"$schema":"https://json-schema.org/draft/2020-12/schema","$id":"https://json-schema.org/draft/2020-12/meta/content","$vocabulary":{"https://json-schema.org/draft/2020-12/vocab/content":true},"$dynamicAnchor":"meta","title":"Content vocabulary meta-schema","type":["object","boolean"],"properties":{"contentEncoding":{"type":"string"},"contentMediaType":{"type":"string"},"contentSchema":{"$dynamicRef":"#meta"}}}');

/***/ }),

/***/ 314:
/***/ ((module) => {

module.exports = JSON.parse('{"$schema":"https://json-schema.org/draft/2020-12/schema","$id":"https://json-schema.org/draft/2020-12/meta/core","$vocabulary":{"https://json-schema.org/draft/2020-12/vocab/core":true},"$dynamicAnchor":"meta","title":"Core vocabulary meta-schema","type":["object","boolean"],"properties":{"$id":{"$ref":"#/$defs/uriReferenceString","$comment":"Non-empty fragments not allowed.","pattern":"^[^#]*#?$"},"$schema":{"$ref":"#/$defs/uriString"},"$ref":{"$ref":"#/$defs/uriReferenceString"},"$anchor":{"$ref":"#/$defs/anchorString"},"$dynamicRef":{"$ref":"#/$defs/uriReferenceString"},"$dynamicAnchor":{"$ref":"#/$defs/anchorString"},"$vocabulary":{"type":"object","propertyNames":{"$ref":"#/$defs/uriString"},"additionalProperties":{"type":"boolean"}},"$comment":{"type":"string"},"$defs":{"type":"object","additionalProperties":{"$dynamicRef":"#meta"}}},"$defs":{"anchorString":{"type":"string","pattern":"^[A-Za-z_][-A-Za-z0-9._]*$"},"uriString":{"type":"string","format":"uri"},"uriReferenceString":{"type":"string","format":"uri-reference"}}}');

/***/ }),

/***/ 9777:
/***/ ((module) => {

module.exports = JSON.parse('{"$schema":"https://json-schema.org/draft/2020-12/schema","$id":"https://json-schema.org/draft/2020-12/meta/format-annotation","$vocabulary":{"https://json-schema.org/draft/2020-12/vocab/format-annotation":true},"$dynamicAnchor":"meta","title":"Format vocabulary meta-schema for annotation results","type":["object","boolean"],"properties":{"format":{"type":"string"}}}');

/***/ }),

/***/ 2883:
/***/ ((module) => {

module.exports = JSON.parse('{"$schema":"https://json-schema.org/draft/2020-12/schema","$id":"https://json-schema.org/draft/2020-12/meta/meta-data","$vocabulary":{"https://json-schema.org/draft/2020-12/vocab/meta-data":true},"$dynamicAnchor":"meta","title":"Meta-data vocabulary meta-schema","type":["object","boolean"],"properties":{"title":{"type":"string"},"description":{"type":"string"},"default":true,"deprecated":{"type":"boolean","default":false},"readOnly":{"type":"boolean","default":false},"writeOnly":{"type":"boolean","default":false},"examples":{"type":"array","items":true}}}');

/***/ }),

/***/ 846:
/***/ ((module) => {

module.exports = JSON.parse('{"$schema":"https://json-schema.org/draft/2020-12/schema","$id":"https://json-schema.org/draft/2020-12/meta/unevaluated","$vocabulary":{"https://json-schema.org/draft/2020-12/vocab/unevaluated":true},"$dynamicAnchor":"meta","title":"Unevaluated applicator vocabulary meta-schema","type":["object","boolean"],"properties":{"unevaluatedItems":{"$dynamicRef":"#meta"},"unevaluatedProperties":{"$dynamicRef":"#meta"}}}');

/***/ }),

/***/ 2871:
/***/ ((module) => {

module.exports = JSON.parse('{"$schema":"https://json-schema.org/draft/2020-12/schema","$id":"https://json-schema.org/draft/2020-12/meta/validation","$vocabulary":{"https://json-schema.org/draft/2020-12/vocab/validation":true},"$dynamicAnchor":"meta","title":"Validation vocabulary meta-schema","type":["object","boolean"],"properties":{"type":{"anyOf":[{"$ref":"#/$defs/simpleTypes"},{"type":"array","items":{"$ref":"#/$defs/simpleTypes"},"minItems":1,"uniqueItems":true}]},"const":true,"enum":{"type":"array","items":true},"multipleOf":{"type":"number","exclusiveMinimum":0},"maximum":{"type":"number"},"exclusiveMaximum":{"type":"number"},"minimum":{"type":"number"},"exclusiveMinimum":{"type":"number"},"maxLength":{"$ref":"#/$defs/nonNegativeInteger"},"minLength":{"$ref":"#/$defs/nonNegativeIntegerDefault0"},"pattern":{"type":"string","format":"regex"},"maxItems":{"$ref":"#/$defs/nonNegativeInteger"},"minItems":{"$ref":"#/$defs/nonNegativeIntegerDefault0"},"uniqueItems":{"type":"boolean","default":false},"maxContains":{"$ref":"#/$defs/nonNegativeInteger"},"minContains":{"$ref":"#/$defs/nonNegativeInteger","default":1},"maxProperties":{"$ref":"#/$defs/nonNegativeInteger"},"minProperties":{"$ref":"#/$defs/nonNegativeIntegerDefault0"},"required":{"$ref":"#/$defs/stringArray"},"dependentRequired":{"type":"object","additionalProperties":{"$ref":"#/$defs/stringArray"}}},"$defs":{"nonNegativeInteger":{"type":"integer","minimum":0},"nonNegativeIntegerDefault0":{"$ref":"#/$defs/nonNegativeInteger","default":0},"simpleTypes":{"enum":["array","boolean","integer","null","number","object","string"]},"stringArray":{"type":"array","items":{"type":"string"},"uniqueItems":true,"default":[]}}}');

/***/ }),

/***/ 1174:
/***/ ((module) => {

module.exports = JSON.parse('{"$schema":"https://json-schema.org/draft/2020-12/schema","$id":"https://json-schema.org/draft/2020-12/schema","$vocabulary":{"https://json-schema.org/draft/2020-12/vocab/core":true,"https://json-schema.org/draft/2020-12/vocab/applicator":true,"https://json-schema.org/draft/2020-12/vocab/unevaluated":true,"https://json-schema.org/draft/2020-12/vocab/validation":true,"https://json-schema.org/draft/2020-12/vocab/meta-data":true,"https://json-schema.org/draft/2020-12/vocab/format-annotation":true,"https://json-schema.org/draft/2020-12/vocab/content":true},"$dynamicAnchor":"meta","title":"Core and Validation specifications meta-schema","allOf":[{"$ref":"meta/core"},{"$ref":"meta/applicator"},{"$ref":"meta/unevaluated"},{"$ref":"meta/validation"},{"$ref":"meta/meta-data"},{"$ref":"meta/format-annotation"},{"$ref":"meta/content"}],"type":["object","boolean"],"$comment":"This meta-schema also defines keywords that have appeared in previous drafts in order to prevent incompatible extensions as they remain in common use.","properties":{"definitions":{"$comment":"\\"definitions\\" has been replaced by \\"$defs\\".","type":"object","additionalProperties":{"$dynamicRef":"#meta"},"deprecated":true,"default":{}},"dependencies":{"$comment":"\\"dependencies\\" has been split and replaced by \\"dependentSchemas\\" and \\"dependentRequired\\" in order to serve their differing semantics.","type":"object","additionalProperties":{"anyOf":[{"$dynamicRef":"#meta"},{"$ref":"meta/validation#/$defs/stringArray"}]},"deprecated":true,"default":{}},"$recursiveAnchor":{"$comment":"\\"$recursiveAnchor\\" has been replaced by \\"$dynamicAnchor\\".","$ref":"meta/core#/$defs/anchorString","deprecated":true},"$recursiveRef":{"$comment":"\\"$recursiveRef\\" has been replaced by \\"$dynamicRef\\".","$ref":"meta/core#/$defs/uriReferenceString","deprecated":true}}}');

/***/ }),

/***/ 4746:
/***/ ((module) => {

module.exports = JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","$id":"http://json-schema.org/draft-07/schema#","title":"Core schema meta-schema","definitions":{"schemaArray":{"type":"array","minItems":1,"items":{"$ref":"#"}},"nonNegativeInteger":{"type":"integer","minimum":0},"nonNegativeIntegerDefault0":{"allOf":[{"$ref":"#/definitions/nonNegativeInteger"},{"default":0}]},"simpleTypes":{"enum":["array","boolean","integer","null","number","object","string"]},"stringArray":{"type":"array","items":{"type":"string"},"uniqueItems":true,"default":[]}},"type":["object","boolean"],"properties":{"$id":{"type":"string","format":"uri-reference"},"$schema":{"type":"string","format":"uri"},"$ref":{"type":"string","format":"uri-reference"},"$comment":{"type":"string"},"title":{"type":"string"},"description":{"type":"string"},"default":true,"readOnly":{"type":"boolean","default":false},"examples":{"type":"array","items":true},"multipleOf":{"type":"number","exclusiveMinimum":0},"maximum":{"type":"number"},"exclusiveMaximum":{"type":"number"},"minimum":{"type":"number"},"exclusiveMinimum":{"type":"number"},"maxLength":{"$ref":"#/definitions/nonNegativeInteger"},"minLength":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"pattern":{"type":"string","format":"regex"},"additionalItems":{"$ref":"#"},"items":{"anyOf":[{"$ref":"#"},{"$ref":"#/definitions/schemaArray"}],"default":true},"maxItems":{"$ref":"#/definitions/nonNegativeInteger"},"minItems":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"uniqueItems":{"type":"boolean","default":false},"contains":{"$ref":"#"},"maxProperties":{"$ref":"#/definitions/nonNegativeInteger"},"minProperties":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"required":{"$ref":"#/definitions/stringArray"},"additionalProperties":{"$ref":"#"},"definitions":{"type":"object","additionalProperties":{"$ref":"#"},"default":{}},"properties":{"type":"object","additionalProperties":{"$ref":"#"},"default":{}},"patternProperties":{"type":"object","additionalProperties":{"$ref":"#"},"propertyNames":{"format":"regex"},"default":{}},"dependencies":{"type":"object","additionalProperties":{"anyOf":[{"$ref":"#"},{"$ref":"#/definitions/stringArray"}]}},"propertyNames":{"$ref":"#"},"const":true,"enum":{"type":"array","items":true,"minItems":1,"uniqueItems":true},"type":{"anyOf":[{"$ref":"#/definitions/simpleTypes"},{"type":"array","items":{"$ref":"#/definitions/simpleTypes"},"minItems":1,"uniqueItems":true}]},"format":{"type":"string"},"contentMediaType":{"type":"string"},"contentEncoding":{"type":"string"},"if":{"$ref":"#"},"then":{"$ref":"#"},"else":{"$ref":"#"},"allOf":{"$ref":"#/definitions/schemaArray"},"anyOf":{"$ref":"#/definitions/schemaArray"},"oneOf":{"$ref":"#/definitions/schemaArray"},"not":{"$ref":"#"}},"default":true}');

/***/ }),

/***/ 248:
/***/ ((module) => {

module.exports = JSON.parse('[{"name":"100 Mph","hex":"#c93f38"},{"name":"18th Century Green","hex":"#a59344"},{"name":"1975 Earth Red","hex":"#7b463b"},{"name":"1989 Miami Hotline","hex":"#dd3366"},{"name":"20000 Leagues Under the Sea","hex":"#191970"},{"name":"24 Carrot","hex":"#e56e24"},{"name":"24 Karat","hex":"#dfc685"},{"name":"3AM in Shibuya","hex":"#225577"},{"name":"3am Latte","hex":"#c0a98e"},{"name":"400XT Film","hex":"#d2d2c0"},{"name":"5-Masted Preußen","hex":"#9bafad"},{"name":"8 Bit Eggplant","hex":"#990066"},{"name":"90% Cocoa","hex":"#3d1c02"},{"name":"A Brand New Day","hex":"#ffaabb"},{"name":"A Certain Shade Of Green","hex":"#d1edee"},{"name":"A Dime a Dozen","hex":"#d3dde4"},{"name":"A Hint of Incremental Blue","hex":"#456789"},{"name":"À L\'Orange","hex":"#f2850d"},{"name":"A La Mode","hex":"#f6ecde"},{"name":"A Lot of Love","hex":"#ffbcc5"},{"name":"A Mann\'s Mint","hex":"#bcddb3"},{"name":"A Pair of Brown Eyes","hex":"#bfaf92"},{"name":"A Smell of Bakery","hex":"#f3e9d9"},{"name":"A State of Mint","hex":"#88ffcc"},{"name":"Aare River","hex":"#00b89f"},{"name":"Aare River Brienz","hex":"#05a3ad"},{"name":"Aarhusian Sky","hex":"#1150af"},{"name":"Abaddon Black","hex":"#231f20"},{"name":"Abaidh White","hex":"#f2f1e6"},{"name":"Abalone","hex":"#f8f3f6"},{"name":"Abalone Shell","hex":"#e1ded9"},{"name":"Abandoned Mansion","hex":"#94877e"},{"name":"Abandoned Playground","hex":"#746e6a"},{"name":"Abandoned Spaceship","hex":"#747a8a"},{"name":"Abbey","hex":"#4c4f56"},{"name":"Abbey Pink","hex":"#cd716b"},{"name":"Abbey Road","hex":"#a79f92"},{"name":"Abbey Stone","hex":"#aba798"},{"name":"Abbey White","hex":"#ece6d0"},{"name":"Abbot","hex":"#4d3c2d"},{"name":"Abduction","hex":"#166461"},{"name":"Âbi Blue","hex":"#5ba8ff"},{"name":"Abilene Lace","hex":"#eae3d2"},{"name":"Ablaze","hex":"#c04641"},{"name":"Abloom","hex":"#f1cbcd"},{"name":"Abomination","hex":"#77aa77"},{"name":"Abra Cadabra","hex":"#966165"},{"name":"Abra Goldenrod","hex":"#eec400"},{"name":"Absence of Light","hex":"#15151c"},{"name":"Absinthe Green","hex":"#76b583"},{"name":"Absinthe Turquoise","hex":"#008a60"},{"name":"Absolute Apricot","hex":"#ff9944"},{"name":"Absolute Zero","hex":"#0048ba"},{"name":"Abstract","hex":"#e4cb97"},{"name":"Abstract White","hex":"#ede9dd"},{"name":"Abundance","hex":"#629763"},{"name":"Abura Green","hex":"#a19361"},{"name":"Abyss","hex":"#8f9e9d"},{"name":"Abyssal","hex":"#404c57"},{"name":"Abyssal Anchorfish Blue","hex":"#1b2632"},{"name":"Abyssal Blue","hex":"#00035b"},{"name":"Abyssal Depths","hex":"#10246a"},{"name":"Abyssal Waters","hex":"#005765"},{"name":"Abysse","hex":"#3d5758"},{"name":"Abyssopelagic Water","hex":"#000033"},{"name":"Acacia","hex":"#dbcd64"},{"name":"Acacia Green","hex":"#486241"},{"name":"Acacia Haze","hex":"#969c92"},{"name":"Academic Blue","hex":"#2c3e56"},{"name":"Academy Purple","hex":"#525367"},{"name":"Acadia","hex":"#35312c"},{"name":"Acadia Bloom","hex":"#e5b7be"},{"name":"Acai","hex":"#48295b"},{"name":"Acai Berry","hex":"#42314b"},{"name":"Acai Juice","hex":"#942193"},{"name":"Acajou","hex":"#4c2f27"},{"name":"Acanthus","hex":"#9899a7"},{"name":"Acanthus Leaf","hex":"#90977a"},{"name":"Acapulco","hex":"#75aa94"},{"name":"Acapulco Aqua","hex":"#7fa8a7"},{"name":"Acapulco Cliffs","hex":"#4e9aa8"},{"name":"Acapulco Dive","hex":"#65a7dd"},{"name":"Acapulco Sun","hex":"#eb8a44"},{"name":"Accent Green Blue","hex":"#208468"},{"name":"Accent Orange","hex":"#e56d00"},{"name":"Accessible Beige","hex":"#d2c7b7"},{"name":"Accolade","hex":"#7c94b2"},{"name":"Accursed Black","hex":"#090807"},{"name":"Ace","hex":"#c7cce7"},{"name":"Aceituna Picante","hex":"#727a5f"},{"name":"Aceto Balsamico","hex":"#4e4f48"},{"name":"Acid","hex":"#00ff22"},{"name":"Acid Blond","hex":"#efedd7"},{"name":"Acid Candy","hex":"#a8c74d"},{"name":"Acid Drop","hex":"#11ff22"},{"name":"Acid Green","hex":"#8ffe09"},{"name":"Acid Lime","hex":"#b9df31"},{"name":"Acid Pool","hex":"#00ee22"},{"name":"Acid Pops","hex":"#33ee66"},{"name":"Acid Reflux","hex":"#30ff21"},{"name":"Acid Sleazebag","hex":"#4fc172"},{"name":"Acier","hex":"#9e9991"},{"name":"Acini di Pepe","hex":"#ffd8b1"},{"name":"Aconite Purple","hex":"#7249d6"},{"name":"Aconite Violet","hex":"#9c52f2"},{"name":"Acorn","hex":"#7f5e50"},{"name":"Acorn Nut","hex":"#d48948"},{"name":"Acorn Spice","hex":"#b87439"},{"name":"Acorn Squash","hex":"#eda740"},{"name":"Acoustic Brown","hex":"#766b69"},{"name":"Acoustic White","hex":"#efece1"},{"name":"Across the Bay","hex":"#b3e1e8"},{"name":"Actinic Light","hex":"#ff44ee"},{"name":"Action Green","hex":"#00504b"},{"name":"Active Green","hex":"#00a67e"},{"name":"Active Turquoise","hex":"#006f72"},{"name":"Active Volcano","hex":"#bb1133"},{"name":"Actor\'s Star","hex":"#a7a6a3"},{"name":"Adamantine Blue","hex":"#46adf9"},{"name":"Adamite Green","hex":"#3b845e"},{"name":"Adana Kebabı","hex":"#661111"},{"name":"Adaptive Shade","hex":"#867e70"},{"name":"Addo Skin","hex":"#585d58"},{"name":"Adeline","hex":"#ccb0b5"},{"name":"Adept","hex":"#293947"},{"name":"Adeptus Battlegrey","hex":"#7c8286"},{"name":"Adhesion","hex":"#9e9cab"},{"name":"Adirondack","hex":"#b0b9c1"},{"name":"Adirondack Blue","hex":"#74858f"},{"name":"Admiral Blue","hex":"#50647f"},{"name":"Admiralty","hex":"#404e61"},{"name":"Admiration","hex":"#f6f3d3"},{"name":"Adobe","hex":"#bd6c48"},{"name":"Adobe Avenue","hex":"#fb9587"},{"name":"Adobe Beige","hex":"#dcbfa6"},{"name":"Adobe Rose","hex":"#ba9f99"},{"name":"Adobe Sand","hex":"#e8dec5"},{"name":"Adobe South","hex":"#e5c1a7"},{"name":"Adobe Straw","hex":"#c3a998"},{"name":"Adobe White","hex":"#e6dbc4"},{"name":"Adolescent Rodent","hex":"#a99681"},{"name":"Adonis","hex":"#64b5bf"},{"name":"Adonis Rose Yellow","hex":"#efbf4d"},{"name":"Adora","hex":"#8d8dc9"},{"name":"Adorable","hex":"#e3beb0"},{"name":"Adriatic","hex":"#014a69"},{"name":"Adriatic Blue","hex":"#5c899b"},{"name":"Adriatic Haze","hex":"#96c6cd"},{"name":"Adriatic Mist","hex":"#d3ece4"},{"name":"Adriatic Sea","hex":"#016081"},{"name":"Adrift","hex":"#4b9099"},{"name":"Adrift on the Nile","hex":"#93b8e3"},{"name":"Advantageous","hex":"#20726a"},{"name":"Adventure","hex":"#34788c"},{"name":"Adventure Island Pink","hex":"#f87858"},{"name":"Adventure Isle","hex":"#6f9fb9"},{"name":"Adventure of the Seas","hex":"#3063af"},{"name":"Adventure Orange","hex":"#eda367"},{"name":"Adventurer","hex":"#72664f"},{"name":"Adventurine","hex":"#7cac88"},{"name":"Advertisement Green","hex":"#d8cb4b"},{"name":"Advertising Blue","hex":"#0081a8"},{"name":"Advertising Green","hex":"#53a079"},{"name":"Aebleskiver","hex":"#e6d3b6"},{"name":"Aegean Blue","hex":"#4f6d83"},{"name":"Aegean Green","hex":"#4c8c72"},{"name":"Aegean Mist","hex":"#9cbbe2"},{"name":"Aegean Sea","hex":"#508fa2"},{"name":"Aegean Sky","hex":"#e48b59"},{"name":"Aegean Splendor","hex":"#9ba0a4"},{"name":"Aerial View","hex":"#a0b2c8"},{"name":"Aero","hex":"#7cb9e8"},{"name":"Aero Blue","hex":"#c0e8d5"},{"name":"Aerobic Fix","hex":"#a2c348"},{"name":"Aeronautic","hex":"#2b3448"},{"name":"Aerospace Orange","hex":"#ff4f00"},{"name":"Aerostatics","hex":"#355376"},{"name":"Aesthetic White","hex":"#e3ddd3"},{"name":"Affair","hex":"#745085"},{"name":"Affen Turquoise","hex":"#aaffff"},{"name":"Affinity","hex":"#fed2a5"},{"name":"Afghan Carpet","hex":"#905e26"},{"name":"Afghan Hound","hex":"#e2d7b5"},{"name":"Afghan Sand","hex":"#d3a95c"},{"name":"Afloat","hex":"#78a3c2"},{"name":"African Bubinga","hex":"#c7927a"},{"name":"African Grey","hex":"#939899"},{"name":"African Mahogany","hex":"#cd4a4a"},{"name":"African Mud","hex":"#826c68"},{"name":"African Plain","hex":"#86714a"},{"name":"African Queen","hex":"#645e42"},{"name":"African Safari","hex":"#b16b40"},{"name":"African Sand","hex":"#ccaa88"},{"name":"African Violet","hex":"#b085b7"},{"name":"After Burn","hex":"#fd8b60"},{"name":"After Dark","hex":"#3c3535"},{"name":"After Dinner Mint","hex":"#e3f5e5"},{"name":"After Eight","hex":"#3d2e24"},{"name":"After Eight Filling","hex":"#d6eae8"},{"name":"After Midnight","hex":"#38393f"},{"name":"After Rain","hex":"#c1dbea"},{"name":"After Shock","hex":"#fec65f"},{"name":"After the Rain","hex":"#8bc4d1"},{"name":"After the Storm","hex":"#33616a"},{"name":"After Work Blue","hex":"#24246d"},{"name":"After-Party Pink","hex":"#c95efb"},{"name":"Aftercare","hex":"#85c0cd"},{"name":"Afterglow","hex":"#f2e3c5"},{"name":"Afterlife","hex":"#d91fff"},{"name":"Afternoon","hex":"#fbcb78"},{"name":"Afternoon Sky","hex":"#87ceeb"},{"name":"Afternoon Stroll","hex":"#d9c5a1"},{"name":"Afternoon Tea","hex":"#594e40"},{"name":"Agapanthus","hex":"#bbc5de"},{"name":"Agate Brown","hex":"#956a60"},{"name":"Agate Green","hex":"#52928d"},{"name":"Agate Grey","hex":"#acaa99"},{"name":"Agate Violet","hex":"#5a5b74"},{"name":"Agave","hex":"#879d99"},{"name":"Agave Frond","hex":"#5a6e6a"},{"name":"Agave Green","hex":"#70766e"},{"name":"Agave Plant","hex":"#879c67"},{"name":"Aged Antics","hex":"#886b2e"},{"name":"Aged Beech","hex":"#846262"},{"name":"Aged Beige","hex":"#d7cfc0"},{"name":"Aged Brandy","hex":"#87413f"},{"name":"Aged Chocolate","hex":"#5f4947"},{"name":"Aged Cotton","hex":"#e0dcda"},{"name":"Aged Eucalyptus","hex":"#898253"},{"name":"Aged Gouda","hex":"#dd9944"},{"name":"Aged Jade","hex":"#6c6956"},{"name":"Aged Merlot","hex":"#73343a"},{"name":"Aged Moustache Grey","hex":"#7e7e7e"},{"name":"Aged Mustard Green","hex":"#6e6e30"},{"name":"Aged Olive","hex":"#7e7666"},{"name":"Aged Papyrus","hex":"#ceb588"},{"name":"Aged Parchment","hex":"#e9ddca"},{"name":"Aged Pewter","hex":"#889999"},{"name":"Aged Pink","hex":"#c99f99"},{"name":"Aged Plastic Casing","hex":"#fffa86"},{"name":"Aged Purple","hex":"#a442a0"},{"name":"Aged Teak","hex":"#7a4134"},{"name":"Aged to Perfection","hex":"#a58ea9"},{"name":"Aged Whisky","hex":"#9d7147"},{"name":"Aged White","hex":"#e8decd"},{"name":"Aged Wine","hex":"#895460"},{"name":"Ageless","hex":"#ececdf"},{"name":"Ageless Beauty","hex":"#e7a995"},{"name":"Aggressive Baby Blue","hex":"#6fffff"},{"name":"Aggressive Salmon","hex":"#ff7799"},{"name":"Aging Barrel","hex":"#6a5b4e"},{"name":"Agrax Earthshade","hex":"#393121"},{"name":"Agreeable Grey","hex":"#d1cbc1"},{"name":"Agrellan Badland","hex":"#ffb347"},{"name":"Agrellan Earth","hex":"#a17c59"},{"name":"Agressive Aqua","hex":"#00fbff"},{"name":"Agrodolce","hex":"#f0e2d3"},{"name":"Agua Fría","hex":"#9fc5cc"},{"name":"Ahaetulla Prasina","hex":"#00fa92"},{"name":"Ahmar Red","hex":"#c22147"},{"name":"Ahoy","hex":"#2a3149"},{"name":"Ahoy! Blue","hex":"#0082a1"},{"name":"Ahriman Blue","hex":"#199ebd"},{"name":"Ai Indigo","hex":"#274447"},{"name":"Aida","hex":"#b4c8b6"},{"name":"Aijiro White","hex":"#ecf7f7"},{"name":"Aimee","hex":"#eee5e1"},{"name":"Aimiru Brown","hex":"#2e372e"},{"name":"Air Blue","hex":"#69a3c1"},{"name":"Air Castle","hex":"#d7d1e9"},{"name":"Air Force Blue","hex":"#5d8aa8"},{"name":"Air of Mint","hex":"#d8f2ee"},{"name":"Air Superiority Blue","hex":"#72a0c1"},{"name":"Air-Kiss","hex":"#f6dcd2"},{"name":"Airborne","hex":"#a2c2d0"},{"name":"Airbrushed Copper","hex":"#aa6c51"},{"name":"Aircraft Blue","hex":"#354f58"},{"name":"Aircraft Exterior Grey","hex":"#939498"},{"name":"Aircraft Green","hex":"#2a2c1f"},{"name":"Aircraft White","hex":"#edf2f8"},{"name":"Airflow","hex":"#d9e5e4"},{"name":"Airforce","hex":"#364d70"},{"name":"Airline Green","hex":"#8c9632"},{"name":"Airway","hex":"#aec1d4"},{"name":"Airy","hex":"#dae6e9"},{"name":"Airy Blue","hex":"#88ccee"},{"name":"Airy Green","hex":"#dbe0c4"},{"name":"Ajo Lily","hex":"#faecd9"},{"name":"Ajwain Green","hex":"#d3de7b"},{"name":"Akabeni","hex":"#c3272b"},{"name":"Akai Red","hex":"#bc012e"},{"name":"Akakō Red","hex":"#f07f5e"},{"name":"Akari Red","hex":"#c90b42"},{"name":"Akaroa","hex":"#beb29a"},{"name":"Ake Blood","hex":"#cf3a24"},{"name":"Akebi Purple","hex":"#983fb2"},{"name":"Akebono Dawn","hex":"#fa7b62"},{"name":"Akhdhar Green","hex":"#b0e313"},{"name":"Akihabara Arcade","hex":"#601ef9"},{"name":"Akira Red","hex":"#e12120"},{"name":"Akuma\'s Fury","hex":"#871646"},{"name":"Alabama Crimson","hex":"#a32638"},{"name":"Alabaster","hex":"#f3e7db"},{"name":"Alabaster Beauty","hex":"#e9e3d2"},{"name":"Alabaster Gleam","hex":"#f0debd"},{"name":"Alabaster White","hex":"#dfd4bf"},{"name":"Aladdin\'s Feather","hex":"#5500ff"},{"name":"Alaea","hex":"#81585b"},{"name":"Alaitoc Blue","hex":"#8e8c97"},{"name":"Alajuela Toad","hex":"#ffae52"},{"name":"Alameda Ochre","hex":"#ca9234"},{"name":"Alamosa Green","hex":"#939b71"},{"name":"Alarm","hex":"#ec0003"},{"name":"Alarming Slime","hex":"#2ce335"},{"name":"Alaska","hex":"#dadad1"},{"name":"Alaskan Blue","hex":"#61a4ce"},{"name":"Alaskan Cruise","hex":"#34466c"},{"name":"Alaskan Grey","hex":"#bcbebc"},{"name":"Alaskan Ice","hex":"#7e9ec2"},{"name":"Alaskan Mist","hex":"#ecf0e5"},{"name":"Alaskan Moss","hex":"#05472a"},{"name":"Alaskan Skies","hex":"#cddced"},{"name":"Alaskan Wind","hex":"#bae3eb"},{"name":"Albanian Red","hex":"#cc0001"},{"name":"Albeit","hex":"#38546e"},{"name":"Albert Green","hex":"#4f5845"},{"name":"Albescent White","hex":"#e1dacb"},{"name":"Albino","hex":"#fbeee5"},{"name":"Albuquerque","hex":"#cca47e"},{"name":"Alchemy","hex":"#e7cf8c"},{"name":"Aldabra","hex":"#aaa492"},{"name":"Alden Till","hex":"#7a4b49"},{"name":"Alert Tan","hex":"#954e2c"},{"name":"Alesan","hex":"#efc1a6"},{"name":"Aleutian","hex":"#9499af"},{"name":"Aleutian Isle","hex":"#4d7eaa"},{"name":"Alexandra Peach","hex":"#db9785"},{"name":"Alexandria","hex":"#ff8f73"},{"name":"Alexandria\'s Lighthouse","hex":"#fcefc1"},{"name":"Alexandrian Sky","hex":"#bcd9dc"},{"name":"Alexandrite","hex":"#598c74"},{"name":"Alexandrite Green","hex":"#767853"},{"name":"Alexis Blue","hex":"#416082"},{"name":"Alfajor Brown","hex":"#a55232"},{"name":"Alfalfa","hex":"#b3b299"},{"name":"Alfalfa Bug","hex":"#78ad6d"},{"name":"Alfalfa Extract","hex":"#546940"},{"name":"Alfonso Olive","hex":"#80365a"},{"name":"Alga Moss","hex":"#8da98d"},{"name":"Algae","hex":"#54ac68"},{"name":"Algae Green","hex":"#93dfb8"},{"name":"Algae Red","hex":"#983d53"},{"name":"Algal Fuel","hex":"#21c36f"},{"name":"Algen Gerne","hex":"#479784"},{"name":"Algerian Coral","hex":"#fc5a50"},{"name":"Algiers Blue","hex":"#008db0"},{"name":"Algodon Azul","hex":"#c1dbec"},{"name":"Alhambra","hex":"#00a094"},{"name":"Alhambra Cream","hex":"#f7f2e1"},{"name":"Alhambra Green","hex":"#00a465"},{"name":"Alibi","hex":"#d4cbc4"},{"name":"Alice Blue","hex":"#f0f8ff"},{"name":"Alice White","hex":"#c2ced2"},{"name":"Alien","hex":"#415764"},{"name":"Alien Abduction","hex":"#0cff0c"},{"name":"Alien Armpit","hex":"#84de02"},{"name":"Alien Breed","hex":"#b9cc81"},{"name":"Alien Parasite","hex":"#55ff33"},{"name":"Alien Purple","hex":"#490648"},{"name":"Alienated","hex":"#00cc55"},{"name":"Alienator Grey","hex":"#9790a4"},{"name":"Align","hex":"#00728d"},{"name":"Alizarin","hex":"#e34636"},{"name":"Alizarin Crimson","hex":"#e32636"},{"name":"All About Olive","hex":"#676c58"},{"name":"All Dressed Up","hex":"#e6999d"},{"name":"All Made Up","hex":"#efd7e7"},{"name":"All Nighter","hex":"#455454"},{"name":"All the Leaves Are Brown","hex":"#994411"},{"name":"All\'s Ace","hex":"#c68886"},{"name":"Allegiance","hex":"#5a6a8c"},{"name":"Allegory","hex":"#b4b2a9"},{"name":"Allegro","hex":"#b28959"},{"name":"Alley","hex":"#b8c4d9"},{"name":"Alley Cat","hex":"#656874"},{"name":"Alliance","hex":"#2b655f"},{"name":"Alligator","hex":"#886600"},{"name":"Alligator Egg","hex":"#eaeed7"},{"name":"Alligator Gladiator","hex":"#444411"},{"name":"Alligator Scales","hex":"#646048"},{"name":"Allison Lace","hex":"#f1ead4"},{"name":"Allium","hex":"#9569a3"},{"name":"Alloy","hex":"#908f92"},{"name":"Alloy Orange","hex":"#c46210"},{"name":"Allports","hex":"#1f6a7d"},{"name":"Allspice","hex":"#f8cdaa"},{"name":"Allspice Berry","hex":"#8e443d"},{"name":"Allura Red","hex":"#ed2e38"},{"name":"Allure","hex":"#7291b4"},{"name":"Alluring Blue","hex":"#9ec4cd"},{"name":"Alluring Gesture","hex":"#f8dbc2"},{"name":"Alluring Light","hex":"#fff7d8"},{"name":"Alluring Umber","hex":"#977b4d"},{"name":"Alluring White","hex":"#efe1d2"},{"name":"Alluvial Inca","hex":"#bb934b"},{"name":"Allyson","hex":"#cb738b"},{"name":"Almanac","hex":"#e8dec9"},{"name":"Almandine","hex":"#c2a37e"},{"name":"Almeja","hex":"#f5e0c9"},{"name":"Almendra Tostada","hex":"#e8d6bd"},{"name":"Almond","hex":"#eddcc8"},{"name":"Almond Beige","hex":"#dfd5ca"},{"name":"Almond Biscuit","hex":"#e9c9a9"},{"name":"Almond Blossom","hex":"#f2acb8"},{"name":"Almond Blossom Pink","hex":"#e0d2d1"},{"name":"Almond Brittle","hex":"#e5d3b9"},{"name":"Almond Buff","hex":"#ccb590"},{"name":"Almond Butter","hex":"#d8c6a8"},{"name":"Almond Cookie","hex":"#eec87c"},{"name":"Almond Cream","hex":"#f4c29f"},{"name":"Almond Frost","hex":"#9a8678"},{"name":"Almond Green","hex":"#595e4c"},{"name":"Almond Icing","hex":"#efe3d9"},{"name":"Almond Kiss","hex":"#f6e3d4"},{"name":"Almond Latte","hex":"#d6c0a4"},{"name":"Almond Milk","hex":"#d2c9b8"},{"name":"Almond Oil","hex":"#f4efc1"},{"name":"Almond Paste","hex":"#e5dbc5"},{"name":"Almond Roca","hex":"#f0e8e0"},{"name":"Almond Rose","hex":"#cc8888"},{"name":"Almond Silk","hex":"#e1cfb2"},{"name":"Almond Toast","hex":"#bf9e77"},{"name":"Almond Truffle","hex":"#7d665b"},{"name":"Almond Willow","hex":"#e6c9bc"},{"name":"Almond Wisp","hex":"#d6cab9"},{"name":"Almondine","hex":"#fedebc"},{"name":"Almost Aloe","hex":"#bfe5b1"},{"name":"Almost Apricot","hex":"#e0a787"},{"name":"Almost Aqua","hex":"#98ddc5"},{"name":"Almost Famous","hex":"#3a5457"},{"name":"Almost Mauve","hex":"#e5d9d6"},{"name":"Almost Pink","hex":"#f0e3da"},{"name":"Almost Plum","hex":"#beb0c2"},{"name":"Almost Royal","hex":"#6a2ded"},{"name":"Aloe","hex":"#817a60"},{"name":"Aloe Blossom","hex":"#c97863"},{"name":"Aloe Cream","hex":"#dbe5b9"},{"name":"Aloe Essence","hex":"#ecf1e2"},{"name":"Aloe Leaf","hex":"#61643f"},{"name":"Aloe Mist","hex":"#dcf2e3"},{"name":"Aloe Nectar","hex":"#dfe2c9"},{"name":"Aloe Plant","hex":"#b8ba87"},{"name":"Aloe Thorn","hex":"#888b73"},{"name":"Aloe Tip","hex":"#8a9480"},{"name":"Aloe Vera","hex":"#678779"},{"name":"Aloe Vera Green","hex":"#7e9b39"},{"name":"Aloe Vera Tea","hex":"#848b71"},{"name":"Aloe Wash","hex":"#d0d3b7"},{"name":"Aloeswood","hex":"#6a432d"},{"name":"Aloha","hex":"#1db394"},{"name":"Aloha Sunset","hex":"#e9aa91"},{"name":"Alone in the Dark","hex":"#000066"},{"name":"Aloof","hex":"#d4e2e6"},{"name":"Aloof Grey","hex":"#c9c9c0"},{"name":"Aloof Lama","hex":"#d6c5a0"},{"name":"Alpaca","hex":"#f7e5da"},{"name":"Alpaca Blanket","hex":"#ded7c5"},{"name":"Alpaca Wool","hex":"#f9ede2"},{"name":"Alpenglow","hex":"#f0beb8"},{"name":"Alpha Blue","hex":"#588bb4"},{"name":"Alpha Centauri","hex":"#4d5778"},{"name":"Alpha Gold","hex":"#ae8e5f"},{"name":"Alpha Male","hex":"#715a45"},{"name":"Alpha Tango","hex":"#628fb0"},{"name":"Alphabet Blue","hex":"#abcdef"},{"name":"Alpine","hex":"#ad8a3b"},{"name":"Alpine Air","hex":"#a9b4a9"},{"name":"Alpine Alabaster","hex":"#badbe6"},{"name":"Alpine Berry Yellow","hex":"#f7e0ba"},{"name":"Alpine Blue","hex":"#dbe4e5"},{"name":"Alpine Duck Grey","hex":"#40464d"},{"name":"Alpine Expedition","hex":"#99eeff"},{"name":"Alpine Frost","hex":"#e0ded2"},{"name":"Alpine Goat","hex":"#f1f2f8"},{"name":"Alpine Green","hex":"#005f50"},{"name":"Alpine Haze","hex":"#abbec0"},{"name":"Alpine Herbs","hex":"#449955"},{"name":"Alpine Lake Green","hex":"#4f603e"},{"name":"Alpine Landing","hex":"#117b87"},{"name":"Alpine Meadow","hex":"#6aae2e"},{"name":"Alpine Moon","hex":"#ded3e6"},{"name":"Alpine Morning Blue","hex":"#a6ccd8"},{"name":"Alpine Race","hex":"#234162"},{"name":"Alpine Salamander","hex":"#051009"},{"name":"Alpine Sky","hex":"#79b4ce"},{"name":"Alpine Summer","hex":"#a5a99a"},{"name":"Alpine Trail","hex":"#515a52"},{"name":"Alright Then I Became a Princess","hex":"#ffaaa5"},{"name":"Alsike Clover Red","hex":"#b1575f"},{"name":"Alsot Olive","hex":"#dfd5b1"},{"name":"Altar of Heaven","hex":"#4d4c80"},{"name":"Altdorf Guard Blue","hex":"#1f56a7"},{"name":"Altdorf Sky Blue","hex":"#00a1ac"},{"name":"Alter Ego","hex":"#69656d"},{"name":"Altered Pink","hex":"#efc7be"},{"name":"Alto","hex":"#cdc6c5"},{"name":"Alu Gobi","hex":"#ddbb00"},{"name":"Alucard\'s Night","hex":"#000055"},{"name":"Aluminium","hex":"#848789"},{"name":"Aluminium Powder","hex":"#a9a0a9"},{"name":"Aluminium Snow","hex":"#aeafb4"},{"name":"Aluminum","hex":"#968c7b"},{"name":"Aluminum Foil","hex":"#d2d9db"},{"name":"Aluminum Silver","hex":"#8c8d91"},{"name":"Aluminum Sky","hex":"#adafaf"},{"name":"Alverda","hex":"#a5c970"},{"name":"Always Almond","hex":"#ebe5d2"},{"name":"Always Apple","hex":"#a0a667"},{"name":"Always Blue","hex":"#a2bacb"},{"name":"Always Green Grass","hex":"#11aa00"},{"name":"Always Indigo","hex":"#66778c"},{"name":"Always Neutral","hex":"#dfd7cb"},{"name":"Always Rosey","hex":"#e79db3"},{"name":"Alyssa","hex":"#f4e2d6"},{"name":"Alyssum","hex":"#f2d5d7"},{"name":"Amalfi","hex":"#016e85"},{"name":"Amalfi Coast","hex":"#297cbf"},{"name":"Amalfitan Azure","hex":"#033b9a"},{"name":"Amaranth","hex":"#e86ead"},{"name":"Amaranth Blossom","hex":"#7b2331"},{"name":"Amaranth Deep Purple","hex":"#9f2b68"},{"name":"Amaranth Pink","hex":"#f19cbb"},{"name":"Amaranth Purple","hex":"#723f89"},{"name":"Amaranth Red","hex":"#d3212d"},{"name":"Amarantha Red","hex":"#cc3311"},{"name":"Amaranthine","hex":"#5f4053"},{"name":"Amaretto","hex":"#ab6f60"},{"name":"Amaretto Sour","hex":"#c09856"},{"name":"Amarillo Bebito","hex":"#fff1d4"},{"name":"Amarillo Yellow","hex":"#fbf1c3"},{"name":"Amarklor Violet","hex":"#551199"},{"name":"Amaryllis","hex":"#b85045"},{"name":"Amaya","hex":"#f2c1cb"},{"name":"Amazing Amethyst","hex":"#806568"},{"name":"Amazing Boulder","hex":"#a9a797"},{"name":"Amazing Grey","hex":"#beb5a9"},{"name":"Amazing Smoke","hex":"#6680bb"},{"name":"Amazon","hex":"#387b54"},{"name":"Amazon Breeze","hex":"#ebebd6"},{"name":"Amazon Depths","hex":"#505338"},{"name":"Amazon Foliage","hex":"#606553"},{"name":"Amazon Green","hex":"#786a4a"},{"name":"Amazon Jungle","hex":"#686747"},{"name":"Amazon Mist","hex":"#ececdc"},{"name":"Amazon Moss","hex":"#7e8c7a"},{"name":"Amazon Parrot","hex":"#80e45f"},{"name":"Amazon Queen","hex":"#948f54"},{"name":"Amazon River","hex":"#777462"},{"name":"Amazon River Dolphin","hex":"#e6b2b8"},{"name":"Amazon Stone","hex":"#7e7873"},{"name":"Amazon Vine","hex":"#abaa97"},{"name":"Amazonian","hex":"#aa6644"},{"name":"Amazonian Orchid","hex":"#a7819d"},{"name":"Amazonite","hex":"#00c4b0"},{"name":"Ambassador Blue","hex":"#0d2f5a"},{"name":"Amber","hex":"#ffbf00"},{"name":"Amber Autumn","hex":"#c69c6a"},{"name":"Amber Brew","hex":"#d7a361"},{"name":"Amber Brown","hex":"#b46a4d"},{"name":"Amber Dawn","hex":"#f6bc77"},{"name":"Amber Essence","hex":"#ba843c"},{"name":"Amber Glass","hex":"#c79958"},{"name":"Amber Glow","hex":"#f29a39"},{"name":"Amber Gold","hex":"#c19552"},{"name":"Amber Green","hex":"#ac8a41"},{"name":"Amber Grey","hex":"#d0a592"},{"name":"Amber Leaf","hex":"#ba9971"},{"name":"Amber Moon","hex":"#eed1a5"},{"name":"Amber Romance","hex":"#b18140"},{"name":"Amber Sun","hex":"#ff9988"},{"name":"Amber Tide","hex":"#ffafa3"},{"name":"Amber Wave","hex":"#d78b55"},{"name":"Amber Yellow","hex":"#fab75a"},{"name":"Amberglow","hex":"#dc793e"},{"name":"Amberized","hex":"#aa8559"},{"name":"Amberlight","hex":"#e2bea2"},{"name":"Ambience White","hex":"#e7e7e6"},{"name":"Ambient Glow","hex":"#f8ede0"},{"name":"Ambit","hex":"#97653f"},{"name":"Ambitious Amber","hex":"#f0cb97"},{"name":"Ambitious Rose","hex":"#e9687e"},{"name":"Ambrosia","hex":"#c6e1bc"},{"name":"Ambrosia Coffee Cake","hex":"#eee9d3"},{"name":"Ambrosia Ivory","hex":"#fff4eb"},{"name":"Ambrosia Salad","hex":"#f4ded3"},{"name":"Ambrosial Oceanside","hex":"#47ae9c"},{"name":"Ameixa","hex":"#6a5acd"},{"name":"Amelia","hex":"#beccc2"},{"name":"Amélie\'s Tutu","hex":"#fea7bd"},{"name":"America\'s Cup","hex":"#34546d"},{"name":"American Anthem","hex":"#7595ab"},{"name":"American Beauty","hex":"#a73340"},{"name":"American Blue","hex":"#3b3b6d"},{"name":"American Bronze","hex":"#391802"},{"name":"American Brown","hex":"#804040"},{"name":"American Gold","hex":"#d3af37"},{"name":"American Green","hex":"#34b334"},{"name":"American Mahogany","hex":"#52352f"},{"name":"American Milking Devon","hex":"#63403a"},{"name":"American Orange","hex":"#ff8b00"},{"name":"American Pink","hex":"#ff9899"},{"name":"American Purple","hex":"#431c53"},{"name":"American Red","hex":"#b32134"},{"name":"American River","hex":"#626e71"},{"name":"American Roast","hex":"#995544"},{"name":"American Rose","hex":"#ff033e"},{"name":"American Silver","hex":"#cfcfcf"},{"name":"American Violet","hex":"#551b8c"},{"name":"American Yellow","hex":"#f2b400"},{"name":"American Yorkshire","hex":"#efdcd4"},{"name":"Americana","hex":"#0477b4"},{"name":"Americano","hex":"#463732"},{"name":"Amethyst","hex":"#9966cc"},{"name":"Amethyst Cream","hex":"#eceaec"},{"name":"Amethyst Dark Violet","hex":"#4f3c52"},{"name":"Amethyst Ganzstar","hex":"#8f00ff"},{"name":"Amethyst Gem","hex":"#776985"},{"name":"Amethyst Grey","hex":"#9085c4"},{"name":"Amethyst Grey Violet","hex":"#9c89a1"},{"name":"Amethyst Haze","hex":"#a0a0aa"},{"name":"Amethyst Ice","hex":"#d0c9c6"},{"name":"Amethyst Light Violet","hex":"#cfc2d1"},{"name":"Amethyst Orchid","hex":"#926aa6"},{"name":"Amethyst Paint","hex":"#9c8aa4"},{"name":"Amethyst Phlox","hex":"#9b91a1"},{"name":"Amethyst Purple","hex":"#562f7e"},{"name":"Amethyst Show","hex":"#bd97cf"},{"name":"Amethyst Smoke","hex":"#95879c"},{"name":"Amethyst Tint","hex":"#cdc7d5"},{"name":"Ametrine Quartz","hex":"#ded1e0"},{"name":"Amfissa Olive","hex":"#783e48"},{"name":"Amiable Orange","hex":"#df965b"},{"name":"Amish Bread","hex":"#e6ddbe"},{"name":"Amish Green","hex":"#3a5f4e"},{"name":"Ammonite Fossil","hex":"#a58d6d"},{"name":"Amnesia Blue","hex":"#1560bd"},{"name":"Amnesiac White","hex":"#f8fbeb"},{"name":"Amok","hex":"#ddcc22"},{"name":"Amor","hex":"#ee3377"},{"name":"Amora Purple","hex":"#bb22aa"},{"name":"Amore","hex":"#ae2f48"},{"name":"Amorous","hex":"#967d96"},{"name":"Amorphous Rose","hex":"#b1a7b7"},{"name":"Amour","hex":"#ee5851"},{"name":"Amour Frais","hex":"#f5e6ea"},{"name":"Amourette","hex":"#c8c5d7"},{"name":"Amourette Eternelle","hex":"#e0dfe8"},{"name":"Amparo Blue","hex":"#556cb5"},{"name":"Amphibian","hex":"#264c47"},{"name":"Amphitrite","hex":"#384e47"},{"name":"Amphora","hex":"#9f8672"},{"name":"Amphystine","hex":"#3f425a"},{"name":"Amulet","hex":"#7d9d72"},{"name":"Amulet Gem","hex":"#01748e"},{"name":"Amygdala Purple","hex":"#69045f"},{"name":"Àn Zǐ Purple","hex":"#94568c"},{"name":"Anaheim Pepper","hex":"#00bb44"},{"name":"Anakiwa","hex":"#8cceea"},{"name":"Analytical Grey","hex":"#bfb6a7"},{"name":"Anarchist","hex":"#db304a"},{"name":"Anarchy","hex":"#de0300"},{"name":"Ancestral","hex":"#d0c1c3"},{"name":"Ancestral Gold","hex":"#ddcda6"},{"name":"Ancestral Water","hex":"#d0d0d0"},{"name":"Ancestry Violet","hex":"#9e90a7"},{"name":"Ancho Pepper","hex":"#7a5145"},{"name":"Anchor Grey","hex":"#596062"},{"name":"Anchor Point","hex":"#435d8b"},{"name":"Anchorman","hex":"#2c3641"},{"name":"Anchors Away","hex":"#9ebbcd"},{"name":"Anchors Aweigh","hex":"#2b3441"},{"name":"Anchovy","hex":"#756f6b"},{"name":"Ancient","hex":"#efeedc"},{"name":"Ancient Bamboo","hex":"#da6304"},{"name":"Ancient Bonsai","hex":"#73754c"},{"name":"Ancient Brandy","hex":"#aa6611"},{"name":"Ancient Bronze","hex":"#9c5221"},{"name":"Ancient Burgundy","hex":"#624147"},{"name":"Ancient Chest","hex":"#99522b"},{"name":"Ancient Copper","hex":"#9f543e"},{"name":"Ancient Doeskin","hex":"#dcc9a8"},{"name":"Ancient Earth","hex":"#746550"},{"name":"Ancient Fuchsia","hex":"#a44769"},{"name":"Ancient Ice","hex":"#73fdff"},{"name":"Ancient Inca","hex":"#e3af8e"},{"name":"Ancient Ivory","hex":"#f1e6d1"},{"name":"Ancient Kingdom","hex":"#d6d8cd"},{"name":"Ancient Lavastone","hex":"#483c32"},{"name":"Ancient Magenta","hex":"#953d55"},{"name":"Ancient Marble","hex":"#d1ccb9"},{"name":"Ancient Maze","hex":"#959651"},{"name":"Ancient Murasaki Purple","hex":"#895b8a"},{"name":"Ancient Olive","hex":"#6a5536"},{"name":"Ancient Pages","hex":"#ddd4ce"},{"name":"Ancient Pewter","hex":"#898d91"},{"name":"Ancient Pine","hex":"#444b43"},{"name":"Ancient Planks","hex":"#774411"},{"name":"Ancient Pottery","hex":"#a37d5e"},{"name":"Ancient Prunus","hex":"#5a3d3f"},{"name":"Ancient Red","hex":"#922a31"},{"name":"Ancient Root","hex":"#70553d"},{"name":"Ancient Royal Banner","hex":"#843f5b"},{"name":"Ancient Ruins","hex":"#e0cac0"},{"name":"Ancient Scroll","hex":"#f0e4d1"},{"name":"Ancient Shelter","hex":"#83696e"},{"name":"Ancient Spice","hex":"#765640"},{"name":"Ancient Stone","hex":"#ded8d4"},{"name":"Ancient Yellow","hex":"#eecd00"},{"name":"Andean Opal Green","hex":"#afcdc7"},{"name":"Andean Slate","hex":"#90b19d"},{"name":"Andes Ash","hex":"#c1a097"},{"name":"Andes Sky","hex":"#78d8d9"},{"name":"Andiron","hex":"#424036"},{"name":"Andorra","hex":"#633737"},{"name":"Andouille","hex":"#b58338"},{"name":"Andover Cream","hex":"#faf0d3"},{"name":"Andrea Blue","hex":"#4477dd"},{"name":"Android Green","hex":"#a4c639"},{"name":"Andromeda Blue","hex":"#abcdee"},{"name":"Anemone","hex":"#882d4c"},{"name":"Anemone White","hex":"#f9efe4"},{"name":"Anew Grey","hex":"#beb6ab"},{"name":"Angel Aura","hex":"#afa8ae"},{"name":"Angel Blue","hex":"#83c5cd"},{"name":"Angel Blush","hex":"#f7e3da"},{"name":"Angel Breath","hex":"#dcaf9f"},{"name":"Angel Face Rose","hex":"#fe83cc"},{"name":"Angel Falls","hex":"#a3bdd3"},{"name":"Angel Feather","hex":"#f4efee"},{"name":"Angel Finger","hex":"#b8acb4"},{"name":"Angel Food","hex":"#f0e8d9"},{"name":"Angel Food Cake","hex":"#d7a14f"},{"name":"Angel Green","hex":"#004225"},{"name":"Angel Hair Silver","hex":"#d2d6db"},{"name":"Angel Heart","hex":"#a17791"},{"name":"Angel in Blue Jeans","hex":"#bbc6d9"},{"name":"Angel Kiss","hex":"#cec7dc"},{"name":"Angel of Death Victorious","hex":"#c6f0e7"},{"name":"Angel Shark","hex":"#e19640"},{"name":"Angel Wing","hex":"#f3dfd7"},{"name":"Angel\'s Face","hex":"#eed4c8"},{"name":"Angel\'s Feather","hex":"#f3f1e6"},{"name":"Angel\'s Trumpet","hex":"#f6dd34"},{"name":"Angel\'s Whisper","hex":"#dbdfd4"},{"name":"Angela Bay","hex":"#a9c1e5"},{"name":"Angela Canyon","hex":"#c99997"},{"name":"Angelic","hex":"#f2dcd7"},{"name":"Angelic Blue","hex":"#bbc6d6"},{"name":"Angelic Choir","hex":"#e9d9dc"},{"name":"Angelic Descent","hex":"#eecc33"},{"name":"Angelic Eyes","hex":"#bbd1e8"},{"name":"Angelic Sent","hex":"#e3dfea"},{"name":"Angelic Starlet","hex":"#ebe9d8"},{"name":"Angelic White","hex":"#f4ede4"},{"name":"Angelic Yellow","hex":"#f4dfa7"},{"name":"Angelico","hex":"#eacfc2"},{"name":"Angélique Grey","hex":"#d8dee7"},{"name":"Anger","hex":"#dd0055"},{"name":"Angora","hex":"#dacab1"},{"name":"Angora Blue","hex":"#b9c6d8"},{"name":"Angora Goat","hex":"#ede7de"},{"name":"Angora Pink","hex":"#ebdfea"},{"name":"Angraecum Orchid","hex":"#f4f6ec"},{"name":"Angry Flamingo","hex":"#f04e45"},{"name":"Angry Gargoyle","hex":"#9799a6"},{"name":"Angry Ghost","hex":"#eebbbb"},{"name":"Angry Gremlin","hex":"#37503d"},{"name":"Angry Hornet","hex":"#ee9911"},{"name":"Angry Ocean","hex":"#4e6665"},{"name":"Angry Pasta","hex":"#ffcc55"},{"name":"Angry Tomato","hex":"#d82029"},{"name":"Aniline Mauve","hex":"#b9abad"},{"name":"Animal Blood","hex":"#a41313"},{"name":"Animal Cracker","hex":"#f4e6ce"},{"name":"Animal Kingdom","hex":"#bcc09e"},{"name":"Animated Coral","hex":"#ed9080"},{"name":"Anime","hex":"#ccc14d"},{"name":"Anime Blush","hex":"#ff7a83"},{"name":"Anise Biscotti","hex":"#c0baaf"},{"name":"Anise Flower","hex":"#f4e3b5"},{"name":"Anise Grey Yellow","hex":"#b0ac98"},{"name":"Aniseed","hex":"#cda741"},{"name":"Aniseed Leaf Green","hex":"#8cb684"},{"name":"Anita","hex":"#91a0b7"},{"name":"Anjou Pear","hex":"#cdca9f"},{"name":"Anna Banana","hex":"#f5d547"},{"name":"Annabel","hex":"#f7efcf"},{"name":"Annapolis Blue","hex":"#384a66"},{"name":"Annatto","hex":"#8c5341"},{"name":"Annis","hex":"#6b475d"},{"name":"Annular","hex":"#e17861"},{"name":"Anode","hex":"#89a4cd"},{"name":"Anon","hex":"#bdbfc8"},{"name":"Anonymous","hex":"#dadcd3"},{"name":"Another One Bites the Dust","hex":"#c7bba4"},{"name":"Ansel","hex":"#016884"},{"name":"Ant Red","hex":"#b05d4a"},{"name":"Antarctic Blue","hex":"#2b3f5c"},{"name":"Antarctic Circle","hex":"#0000bb"},{"name":"Antarctic Deep","hex":"#35383f"},{"name":"Antarctic Love","hex":"#eddee6"},{"name":"Antarctica","hex":"#b9b8b9"},{"name":"Antarctica Lake","hex":"#bfd2d0"},{"name":"Antelope","hex":"#b19664"},{"name":"Anthill","hex":"#7f684e"},{"name":"Anthracite","hex":"#28282d"},{"name":"Anthracite Blue","hex":"#3d475e"},{"name":"Anthracite Grey","hex":"#373f42"},{"name":"Anthracite Red","hex":"#73293b"},{"name":"Anti Rainbow Grey","hex":"#bebdbc"},{"name":"Anti-Flash White","hex":"#f2f3f4"},{"name":"Antigua","hex":"#256d73"},{"name":"Antigua Blue","hex":"#06b1c4"},{"name":"Antigua Sand","hex":"#83c2cd"},{"name":"Antigua Sunrise","hex":"#ffe7c8"},{"name":"Antilles Blue","hex":"#3b5e8d"},{"name":"Antilles Garden","hex":"#8aa277"},{"name":"Antimony","hex":"#c7c8c1"},{"name":"Antiquarian Brown","hex":"#946644"},{"name":"Antiquarian Gold","hex":"#ba8a45"},{"name":"Antiquate","hex":"#8d8aa0"},{"name":"Antique","hex":"#8b846d"},{"name":"Antique Bear","hex":"#9c867b"},{"name":"Antique Bourbon","hex":"#926b43"},{"name":"Antique Brass","hex":"#6c461f"},{"name":"Antique Bronze","hex":"#704a07"},{"name":"Antique Brown","hex":"#553f2d"},{"name":"Antique Cameo","hex":"#f0baa4"},{"name":"Antique Candle Light","hex":"#f4e1d6"},{"name":"Antique Chest","hex":"#a7856d"},{"name":"Antique China","hex":"#fdf6e7"},{"name":"Antique Coin","hex":"#b5b8a8"},{"name":"Antique Copper","hex":"#9e6649"},{"name":"Antique Coral","hex":"#ffc7b0"},{"name":"Antique Earth","hex":"#7e6c5f"},{"name":"Antique Fuchsia","hex":"#915c83"},{"name":"Antique Garnet","hex":"#8e5e5e"},{"name":"Antique Gold","hex":"#b59e5f"},{"name":"Antique Green","hex":"#2c6e62"},{"name":"Antique Grey","hex":"#69576d"},{"name":"Antique Heather","hex":"#cdbacb"},{"name":"Antique Honey","hex":"#b39355"},{"name":"Antique Hot Pink","hex":"#b07f9e"},{"name":"Antique Iron","hex":"#7b7062"},{"name":"Antique Ivory","hex":"#f9ecd3"},{"name":"Antique Kilim","hex":"#c5bba8"},{"name":"Antique Lace","hex":"#fdf2db"},{"name":"Antique Leather","hex":"#9e8e7e"},{"name":"Antique Linen","hex":"#faeedb"},{"name":"Antique Marble","hex":"#f1e9d7"},{"name":"Antique Mauve","hex":"#bbb0b1"},{"name":"Antique Moss","hex":"#7a973b"},{"name":"Antique Paper","hex":"#f4f0e8"},{"name":"Antique Parchment","hex":"#ead8c1"},{"name":"Antique Pearl","hex":"#ebd7cb"},{"name":"Antique Penny","hex":"#957747"},{"name":"Antique Petal","hex":"#e8e3e3"},{"name":"Antique Pink","hex":"#c27a74"},{"name":"Antique Port Wine","hex":"#98211a"},{"name":"Antique Red","hex":"#7d4f51"},{"name":"Antique Rose","hex":"#997165"},{"name":"Antique Rosewood","hex":"#72393f"},{"name":"Antique Ruby","hex":"#841b2d"},{"name":"Antique Silver","hex":"#918e8c"},{"name":"Antique Tin","hex":"#6e7173"},{"name":"Antique Treasure","hex":"#bb9973"},{"name":"Antique Turquoise","hex":"#004e4e"},{"name":"Antique Viola","hex":"#928ba6"},{"name":"Antique White","hex":"#ece6d5"},{"name":"Antique Wicker Basket","hex":"#f3d3a1"},{"name":"Antique Windmill","hex":"#b6a38d"},{"name":"Antiqued Aqua","hex":"#bdccc1"},{"name":"Antiquities","hex":"#8a6c57"},{"name":"Antiquity","hex":"#c1a87c"},{"name":"Antler","hex":"#957a76"},{"name":"Antler Moth","hex":"#864f3e"},{"name":"Antler Velvet","hex":"#c0ad96"},{"name":"Antoinette","hex":"#b09391"},{"name":"Antoinette Pink","hex":"#e7c2b4"},{"name":"Anubis Black","hex":"#312231"},{"name":"Anzac","hex":"#c68e3f"},{"name":"Ao","hex":"#00800c"},{"name":"Aoife\'s Green","hex":"#27b692"},{"name":"Aotake Bamboo","hex":"#006442"},{"name":"Apatite Blue","hex":"#31827b"},{"name":"Apatite Crystal Green","hex":"#bbff99"},{"name":"Apeland","hex":"#8a843b"},{"name":"Aphrodisiac","hex":"#e35a63"},{"name":"Aphrodite Aqua","hex":"#45e9c1"},{"name":"Aphrodite\'s Pearls","hex":"#eeffff"},{"name":"Aphroditean Fuchsia","hex":"#dd14ab"},{"name":"Apium","hex":"#b5d0a2"},{"name":"Apnea Dive","hex":"#284fbd"},{"name":"Apocalyptic Orange","hex":"#f4711e"},{"name":"Apocyan","hex":"#99ccff"},{"name":"Apollo Bay","hex":"#748697"},{"name":"Apollo Landing","hex":"#e5e5e1"},{"name":"Apollo\'s White","hex":"#ddffff"},{"name":"Appalachian Forest","hex":"#848b80"},{"name":"Appalachian Trail","hex":"#cfb989"},{"name":"Appaloosa Spots","hex":"#876e52"},{"name":"Apparition","hex":"#c2bca9"},{"name":"Appetite","hex":"#b1e5aa"},{"name":"Appetizing Asparagus","hex":"#66aa00"},{"name":"Applause Please","hex":"#858c9b"},{"name":"Apple Blossom","hex":"#ddbca0"},{"name":"Apple Bob","hex":"#d5e69d"},{"name":"Apple Brown Betty","hex":"#9c6757"},{"name":"Apple Butter","hex":"#8e5151"},{"name":"Apple Cherry","hex":"#f81404"},{"name":"Apple Cider","hex":"#da995f"},{"name":"Apple Cinnamon","hex":"#a67950"},{"name":"Apple Core","hex":"#f4eed8"},{"name":"Apple Cream","hex":"#b8d7a6"},{"name":"Apple Crisp","hex":"#e19c55"},{"name":"Apple Crunch","hex":"#fee5c9"},{"name":"Apple Cucumber","hex":"#dbdbbc"},{"name":"Apple Custard","hex":"#fddfae"},{"name":"Apple Day","hex":"#7e976d"},{"name":"Apple Flower","hex":"#edf4eb"},{"name":"Apple Fritter","hex":"#cc9350"},{"name":"Apple Green","hex":"#76cd26"},{"name":"Apple Herb Black","hex":"#4b4247"},{"name":"Apple Hill","hex":"#a69f8d"},{"name":"Apple Ice","hex":"#bdd0b1"},{"name":"Apple II Beige","hex":"#bfca87"},{"name":"Apple II Blue","hex":"#93d6bf"},{"name":"Apple II Chocolate","hex":"#da680e"},{"name":"Apple II Green","hex":"#04650d"},{"name":"Apple II Lime","hex":"#25c40d"},{"name":"Apple II Magenta","hex":"#dc41f1"},{"name":"Apple II Rose","hex":"#ac667b"},{"name":"Apple Infusion","hex":"#ddaabb"},{"name":"Apple Jack","hex":"#8b974e"},{"name":"Apple Martini","hex":"#f9fdd9"},{"name":"Apple Orchard","hex":"#93c96a"},{"name":"Apple Pie","hex":"#caab94"},{"name":"Apple Polish","hex":"#883e3f"},{"name":"Apple Sauce","hex":"#f4ebd2"},{"name":"Apple Seed","hex":"#a77c53"},{"name":"Apple Slice","hex":"#f1f0bf"},{"name":"Apple Turnover","hex":"#e8c194"},{"name":"Apple Valley","hex":"#ea8386"},{"name":"Apple Wine","hex":"#b59f62"},{"name":"Apple-A-Day","hex":"#903f45"},{"name":"Appleblossom","hex":"#dab5b4"},{"name":"Applegate","hex":"#8ac479"},{"name":"Applegate Park","hex":"#aead93"},{"name":"Applemint","hex":"#cdeacd"},{"name":"Applemint Soda","hex":"#f3f5e9"},{"name":"Applesauce","hex":"#f6d699"},{"name":"Applesauce Cake","hex":"#c2a377"},{"name":"Appletini","hex":"#929637"},{"name":"Appleton","hex":"#6eb478"},{"name":"Approaching Dusk","hex":"#8b97a5"},{"name":"Approval Green","hex":"#039487"},{"name":"Apricot","hex":"#ffb16d"},{"name":"Apricot Appeal","hex":"#fec382"},{"name":"Apricot Blush","hex":"#feaea5"},{"name":"Apricot Brandy","hex":"#bf6553"},{"name":"Apricot Brown","hex":"#cc7e5b"},{"name":"Apricot Buff","hex":"#cd7e4d"},{"name":"Apricot Butter","hex":"#ffc782"},{"name":"Apricot Chicken","hex":"#da8923"},{"name":"Apricot Cream","hex":"#f1bd89"},{"name":"Apricot Flower","hex":"#ffbb80"},{"name":"Apricot Foam","hex":"#eeded8"},{"name":"Apricot Fool","hex":"#ffd2a0"},{"name":"Apricot Freeze","hex":"#f3cfb7"},{"name":"Apricot Gelato","hex":"#f5d7af"},{"name":"Apricot Glazed Chicken","hex":"#eeaa22"},{"name":"Apricot Glow","hex":"#ffce79"},{"name":"Apricot Ice","hex":"#fff6e9"},{"name":"Apricot Ice Cream","hex":"#f8cc9c"},{"name":"Apricot Iced Tea","hex":"#fbbe99"},{"name":"Apricot Illusion","hex":"#e2c3a6"},{"name":"Apricot Jam","hex":"#eea771"},{"name":"Apricot Light","hex":"#ffca95"},{"name":"Apricot Lily","hex":"#fecfb5"},{"name":"Apricot Mix","hex":"#b47756"},{"name":"Apricot Mousse","hex":"#fcdfaf"},{"name":"Apricot Nectar","hex":"#ecaa79"},{"name":"Apricot Obsession","hex":"#f8c4b4"},{"name":"Apricot Orange","hex":"#c86b3c"},{"name":"Apricot Preserves","hex":"#eeb192"},{"name":"Apricot Red","hex":"#e8917d"},{"name":"Apricot Sherbet","hex":"#fbcd9f"},{"name":"Apricot Sorbet","hex":"#e8a760"},{"name":"Apricot Spring","hex":"#f1b393"},{"name":"Apricot Tan","hex":"#da8c53"},{"name":"Apricot Wash","hex":"#fba57d"},{"name":"Apricot White","hex":"#f7f0db"},{"name":"Apricot Yellow","hex":"#f7bd81"},{"name":"Apricotta","hex":"#d8a48f"},{"name":"April Blush","hex":"#f6d0d8"},{"name":"April Fool\'s Red","hex":"#1fb57a"},{"name":"April Green","hex":"#a9b062"},{"name":"April Hills","hex":"#909245"},{"name":"April Love","hex":"#8b3d2f"},{"name":"April Mist","hex":"#ccd9c9"},{"name":"April Showers","hex":"#dadeb5"},{"name":"April Sunshine","hex":"#fbe198"},{"name":"April Tears","hex":"#b4cbd4"},{"name":"April Wedding","hex":"#c5cfb1"},{"name":"April Winds","hex":"#d5e2e5"},{"name":"Aqua","hex":"#00ffff"},{"name":"Aqua Bay","hex":"#b5dfc9"},{"name":"Aqua Belt","hex":"#7acad0"},{"name":"Aqua Bloom","hex":"#96d3d8"},{"name":"Aqua Blue","hex":"#79b6bc"},{"name":"Aqua Breeze","hex":"#d8e8e4"},{"name":"Aqua Clear","hex":"#8bd0dd"},{"name":"Aqua Cyan","hex":"#01f1f1"},{"name":"Aqua Deep","hex":"#014b43"},{"name":"Aqua Dream","hex":"#b7c9b5"},{"name":"Aqua Eden","hex":"#85c7a6"},{"name":"Aqua Experience","hex":"#038e85"},{"name":"Aqua Fiesta","hex":"#96e2e1"},{"name":"Aqua Foam","hex":"#a1baaa"},{"name":"Aqua Forest","hex":"#5fa777"},{"name":"Aqua Fresco","hex":"#4a9fa3"},{"name":"Aqua Frost","hex":"#a9d1d7"},{"name":"Aqua Glass","hex":"#d2e8e0"},{"name":"Aqua Green","hex":"#12e193"},{"name":"Aqua Grey","hex":"#889fa5"},{"name":"Aqua Haze","hex":"#d9ddd5"},{"name":"Aqua Island","hex":"#a1dad7"},{"name":"Aqua Lake","hex":"#30949d"},{"name":"Aqua Mist","hex":"#a0c9cb"},{"name":"Aqua Nation","hex":"#08787f"},{"name":"Aqua Oasis","hex":"#bce8dd"},{"name":"Aqua Obscura","hex":"#05696b"},{"name":"Aqua Pura","hex":"#ddf2ee"},{"name":"Aqua Rapids","hex":"#63a39c"},{"name":"Aqua Revival","hex":"#539f91"},{"name":"Aqua Sea","hex":"#61a1a9"},{"name":"Aqua Sky","hex":"#70bbbf"},{"name":"Aqua Smoke","hex":"#8c9fa0"},{"name":"Aqua Sparkle","hex":"#d3e4e6"},{"name":"Aqua Splash","hex":"#85ced1"},{"name":"Aqua Spray","hex":"#a5dddb"},{"name":"Aqua Spring","hex":"#e8f3e8"},{"name":"Aqua Squeeze","hex":"#dbe4dc"},{"name":"Aqua Tint","hex":"#e5f1ee"},{"name":"Aqua Velvet","hex":"#00a29e"},{"name":"Aqua Verde","hex":"#56b3c3"},{"name":"Aqua Vitale","hex":"#7bbdc7"},{"name":"Aqua Waters","hex":"#00937d"},{"name":"Aqua Whisper","hex":"#bfdfdf"},{"name":"Aqua Wish","hex":"#a0e3d1"},{"name":"Aqua Zing","hex":"#7cd8d6"},{"name":"Aqua-Sphere","hex":"#9cb0b3"},{"name":"Aquacade","hex":"#e1f0ea"},{"name":"Aquadazzle","hex":"#006f49"},{"name":"Aquadulce","hex":"#7b9f82"},{"name":"Aquafir","hex":"#e3eced"},{"name":"Aqualogic","hex":"#57b7c5"},{"name":"Aquamarine","hex":"#2ee8bb"},{"name":"Aquamarine Blue","hex":"#71d9e2"},{"name":"Aquamarine Dream","hex":"#b3c4ba"},{"name":"Aquamarine Ocean","hex":"#82cdad"},{"name":"Aquamentus Green","hex":"#00a800"},{"name":"Aquarelle","hex":"#61aab1"},{"name":"Aquarelle Beige","hex":"#e8e0d5"},{"name":"Aquarelle Blue","hex":"#bfe0e4"},{"name":"Aquarelle Green","hex":"#e2f4e4"},{"name":"Aquarelle Lilac","hex":"#edc8ff"},{"name":"Aquarelle Mint","hex":"#dbf4d8"},{"name":"Aquarelle Orange","hex":"#fbe8e0"},{"name":"Aquarelle Pink","hex":"#fbe9de"},{"name":"Aquarelle Purple","hex":"#d8e1f1"},{"name":"Aquarelle Red","hex":"#fedddd"},{"name":"Aquarelle Sky","hex":"#bce4eb"},{"name":"Aquarelle Yellow","hex":"#f4eeda"},{"name":"Aquarium","hex":"#356b6f"},{"name":"Aquarium Blue","hex":"#66cdaa"},{"name":"Aquarium Diver","hex":"#0a98ac"},{"name":"Aquarius","hex":"#2db0ce"},{"name":"Aquarius Mood Indigo","hex":"#4d5af3"},{"name":"Aquarius Reef Base","hex":"#559999"},{"name":"Aquastone","hex":"#89c6b7"},{"name":"Aquatic","hex":"#99c1cc"},{"name":"Aquatic Cool","hex":"#41a0b4"},{"name":"Aquatic Edge","hex":"#bfd6d1"},{"name":"Aquatic Green","hex":"#49999a"},{"name":"Aquatint","hex":"#b8e7de"},{"name":"Aquatone","hex":"#a6b5a9"},{"name":"Aquaverde","hex":"#a3c0bd"},{"name":"Aqueduct","hex":"#60b3bc"},{"name":"Aquella","hex":"#59b6d9"},{"name":"Aqueous","hex":"#388d95"},{"name":"Aquifer","hex":"#e2eced"},{"name":"Aquitaine","hex":"#88abb4"},{"name":"Arabella","hex":"#82acc4"},{"name":"Arabesque","hex":"#cd5f42"},{"name":"Arabian Bake","hex":"#cd9945"},{"name":"Arabian Red","hex":"#a14c3f"},{"name":"Arabian Sands","hex":"#ddc6b1"},{"name":"Arabian Silk","hex":"#786e97"},{"name":"Arabian Spice","hex":"#934c36"},{"name":"Arabian Veil","hex":"#c9fffa"},{"name":"Arabic Coffee","hex":"#6f4d3f"},{"name":"Arabica Mint","hex":"#c0ffee"},{"name":"Arable Brown","hex":"#7a552e"},{"name":"Aragon","hex":"#b06455"},{"name":"Aragon Green","hex":"#47ba87"},{"name":"Aragonite","hex":"#e4e0d4"},{"name":"Aragonite Blue","hex":"#6a95b1"},{"name":"Aragonite Grey","hex":"#948e96"},{"name":"Aragonite White","hex":"#f3f1f3"},{"name":"Araigaki Orange","hex":"#ec8254"},{"name":"Arame Seaweed Green","hex":"#3f4635"},{"name":"Arancio","hex":"#ff7013"},{"name":"Arapawa","hex":"#274a5d"},{"name":"Arathi Highlands","hex":"#93a344"},{"name":"Araucana Egg","hex":"#add8e1"},{"name":"Arava","hex":"#a18d71"},{"name":"Arbol De Tamarindo","hex":"#cda182"},{"name":"Arbor Hollow","hex":"#c1c2b4"},{"name":"Arbor Vitae","hex":"#bbc3ad"},{"name":"Arboretum","hex":"#70ba9f"},{"name":"Arc Light","hex":"#ccddff"},{"name":"Arcade Fire","hex":"#ee3311"},{"name":"Arcade Glow","hex":"#0022cc"},{"name":"Arcade White","hex":"#edebe2"},{"name":"Arcadia","hex":"#00ac8d"},{"name":"Arcadian Green","hex":"#a3c893"},{"name":"Arcala Green","hex":"#3b6c3f"},{"name":"Arcane","hex":"#98687e"},{"name":"Arcane Red","hex":"#6a2f2f"},{"name":"Arcavia Red","hex":"#6a0002"},{"name":"Archaeological Site","hex":"#8e785c"},{"name":"Archeology","hex":"#6e6a5e"},{"name":"Architecture Blue","hex":"#7195a6"},{"name":"Architecture Grey","hex":"#6b6a69"},{"name":"Archivist","hex":"#9f8c73"},{"name":"Arctic","hex":"#648589"},{"name":"Arctic Air","hex":"#cbd8e5"},{"name":"Arctic Blue","hex":"#95d6dc"},{"name":"Arctic Cotton","hex":"#e6e3df"},{"name":"Arctic Daisy","hex":"#ebe4be"},{"name":"Arctic Dawn","hex":"#e3e5e8"},{"name":"Arctic Dusk","hex":"#816678"},{"name":"Arctic Feelings","hex":"#afbec1"},{"name":"Arctic Flow","hex":"#daeae4"},{"name":"Arctic Fox","hex":"#e7e7e2"},{"name":"Arctic Glow","hex":"#c9d1e9"},{"name":"Arctic Green","hex":"#45bcb3"},{"name":"Arctic Grey","hex":"#bbccdd"},{"name":"Arctic Ice","hex":"#b6bdd0"},{"name":"Arctic Lichen Green","hex":"#6f7872"},{"name":"Arctic Lime","hex":"#d0ff14"},{"name":"Arctic Nights","hex":"#345c61"},{"name":"Arctic Ocean","hex":"#66c3d0"},{"name":"Arctic Paradise","hex":"#b8dff8"},{"name":"Arctic Rain","hex":"#c7daed"},{"name":"Arctic Rose","hex":"#b7abb0"},{"name":"Arctic Shadow","hex":"#d9e5eb"},{"name":"Arctic Water","hex":"#00fcfc"},{"name":"Arctic White","hex":"#e9eae7"},{"name":"Ardcoat","hex":"#e2dedf"},{"name":"Ardent Coral","hex":"#e5756a"},{"name":"Ardósia","hex":"#232f2c"},{"name":"Ares Red","hex":"#dd2200"},{"name":"Ares Shadow","hex":"#62584c"},{"name":"Argan Oil","hex":"#9d6646"},{"name":"Argent","hex":"#888888"},{"name":"Argento","hex":"#cecac3"},{"name":"Argos","hex":"#bdbdb7"},{"name":"Argyle","hex":"#348a5d"},{"name":"Argyle Purple","hex":"#895c79"},{"name":"Argyle Rose","hex":"#c48677"},{"name":"Aria","hex":"#e3e4e2"},{"name":"Aria Ivory","hex":"#f9e8d8"},{"name":"Arid Landscape","hex":"#dcd6c6"},{"name":"Arid Plains","hex":"#b6b4a9"},{"name":"Ariel","hex":"#aed7ea"},{"name":"Ariel\'s Delight","hex":"#b2a5d3"},{"name":"Aries Hot Pink","hex":"#f887c7"},{"name":"Aristocrat Ivory","hex":"#faf0df"},{"name":"Aristocrat Peach","hex":"#ecceb9"},{"name":"Aristocratic Blue","hex":"#354655"},{"name":"Aristocratic Pink","hex":"#ddaacc"},{"name":"Aristocratic Velvet","hex":"#980b4a"},{"name":"Arizona","hex":"#eeb377"},{"name":"Arizona Clay","hex":"#ad735a"},{"name":"Arizona Stone","hex":"#00655a"},{"name":"Arizona Sunrise","hex":"#ebbcb9"},{"name":"Arizona Tan","hex":"#e5bc82"},{"name":"Arizona Tree Frog","hex":"#669264"},{"name":"Arizona White","hex":"#e8dac3"},{"name":"Armada","hex":"#536762"},{"name":"Armadillo","hex":"#484a46"},{"name":"Armadillo Egg","hex":"#7d4638"},{"name":"Armageddon Dunes","hex":"#926a25"},{"name":"Armageddon Dust","hex":"#d3a907"},{"name":"Armagnac","hex":"#ad916c"},{"name":"Armor","hex":"#74857f"},{"name":"Armor Wash","hex":"#030303"},{"name":"Armored Steel","hex":"#747769"},{"name":"Armory","hex":"#6a6b65"},{"name":"Army Canvas","hex":"#5b6f61"},{"name":"Army Golf","hex":"#6c7735"},{"name":"Army Green","hex":"#4b5320"},{"name":"Army Issue","hex":"#8a806b"},{"name":"Army Issue Green","hex":"#838254"},{"name":"Arnica","hex":"#bf8f37"},{"name":"Arnica Yellow","hex":"#e59b00"},{"name":"Aroma","hex":"#d3c1c5"},{"name":"Aroma Blue","hex":"#96d2d6"},{"name":"Aroma Garden","hex":"#a1c4a8"},{"name":"Aromango","hex":"#f9970c"},{"name":"Aromatic","hex":"#706986"},{"name":"Aromatic Breeze","hex":"#ffcecb"},{"name":"Aromatic Herbs","hex":"#98c945"},{"name":"Aromatic Lemon","hex":"#f2ff26"},{"name":"Arona","hex":"#879ba3"},{"name":"Around the Gills","hex":"#a1b670"},{"name":"Arousing Alligator","hex":"#776600"},{"name":"Arraign","hex":"#5c546e"},{"name":"Arresting Auburn","hex":"#5a3532"},{"name":"Arrow Creek","hex":"#927257"},{"name":"Arrow Quiver","hex":"#c7a998"},{"name":"Arrow Rock","hex":"#a28440"},{"name":"Arrow Shaft","hex":"#5c503a"},{"name":"Arrowhead","hex":"#514b40"},{"name":"Arrowhead Lake","hex":"#58728a"},{"name":"Arrowhead White","hex":"#f9eaeb"},{"name":"Arrowroot","hex":"#f8decf"},{"name":"Arrowroote","hex":"#e4decf"},{"name":"Arrowtown","hex":"#827a67"},{"name":"Arrowwood","hex":"#b3861e"},{"name":"Arsenic","hex":"#3b444b"},{"name":"Art and Craft","hex":"#896956"},{"name":"Art Deco Pink","hex":"#cdaca0"},{"name":"Art Deco Red","hex":"#623745"},{"name":"Art District","hex":"#94897c"},{"name":"Art House Pink","hex":"#c06f70"},{"name":"Art Nouveau Glass","hex":"#a29aa0"},{"name":"Art Nouveau Green","hex":"#9c932f"},{"name":"Art Nouveau Violet","hex":"#a08994"},{"name":"Artemesia Green","hex":"#65a98f"},{"name":"Artemis","hex":"#d2a96e"},{"name":"Artemis Silver","hex":"#ddddee"},{"name":"Artemisia","hex":"#e3ebea"},{"name":"Arterial Blood Red","hex":"#711518"},{"name":"Artesian Pool","hex":"#a6bee1"},{"name":"Artesian Water","hex":"#007db6"},{"name":"Artesian Well","hex":"#5eb2aa"},{"name":"Artful Aqua","hex":"#91b4b3"},{"name":"Artful Magenta","hex":"#80505d"},{"name":"Artful Pink","hex":"#cc6c82"},{"name":"Artful Red","hex":"#b30103"},{"name":"Artichoke","hex":"#8f9779"},{"name":"Artichoke Dip","hex":"#a19676"},{"name":"Artichoke Green","hex":"#517345"},{"name":"Artichoke Heart","hex":"#e4d588"},{"name":"Artichoke Mauve","hex":"#c19aa5"},{"name":"Artifact","hex":"#ca9d8d"},{"name":"Artifice","hex":"#e6e2d3"},{"name":"Artificial Strawberry","hex":"#ff43a4"},{"name":"Artificial Turf","hex":"#41b45c"},{"name":"Artillery","hex":"#746f67"},{"name":"Artisan","hex":"#8f5c45"},{"name":"Artisan Crafts","hex":"#b99779"},{"name":"Artisan Red","hex":"#ac5b50"},{"name":"Artisan Tan","hex":"#b09879"},{"name":"Artisan Tea","hex":"#dac2af"},{"name":"Artisan Tile","hex":"#845e40"},{"name":"Artisans Gold","hex":"#f2ab46"},{"name":"Artist Blue","hex":"#01343a"},{"name":"Artist\'s Canvas","hex":"#eee4d2"},{"name":"Artist\'s Charcoal","hex":"#37393e"},{"name":"Artist\'s Shadow","hex":"#a1969b"},{"name":"Artiste","hex":"#987387"},{"name":"Artistic License","hex":"#434053"},{"name":"Artistic Stone","hex":"#5c6b65"},{"name":"Artistic Taupe","hex":"#c3b1ac"},{"name":"Artistic Violet","hex":"#d0d2e9"},{"name":"Arts & Crafts Gold","hex":"#f5c68b"},{"name":"Arts and Crafts","hex":"#7d6549"},{"name":"Aruba Aqua","hex":"#d1ded3"},{"name":"Aruba Blue","hex":"#7dd4d6"},{"name":"Aruba Green","hex":"#54b490"},{"name":"Arugula","hex":"#75ad5b"},{"name":"Arylide Yellow","hex":"#e9d66b"},{"name":"Asagi Blue","hex":"#48929b"},{"name":"Asagi Koi","hex":"#455559"},{"name":"Asagi Yellow","hex":"#f7bb7d"},{"name":"Asfar Yellow","hex":"#fcef01"},{"name":"Ash","hex":"#bebaa7"},{"name":"Ash Blonde","hex":"#d7bea5"},{"name":"Ash Blue","hex":"#c0c6c9"},{"name":"Ash Brown","hex":"#98623c"},{"name":"Ash Cherry Blossom","hex":"#e8d3d1"},{"name":"Ash Gold","hex":"#8c6f54"},{"name":"Ash Grey","hex":"#c1b5a9"},{"name":"Ash Grove","hex":"#b9b3bf"},{"name":"Ash Hollow","hex":"#a88e8b"},{"name":"Ash in the Air","hex":"#d9dde5"},{"name":"Ash Mauve","hex":"#737486"},{"name":"Ash Pink","hex":"#998e91"},{"name":"Ash Plum","hex":"#e8d3c7"},{"name":"Ash Rose","hex":"#b5817d"},{"name":"Ash Tree","hex":"#aabb99"},{"name":"Ash Tree Bark","hex":"#cecfd6"},{"name":"Ash Violet","hex":"#9695a4"},{"name":"Ash White","hex":"#e9e4d4"},{"name":"Ash Yellow","hex":"#f0bd7e"},{"name":"Ashberry","hex":"#b495a4"},{"name":"Ashen","hex":"#c9bfb2"},{"name":"Ashen Brown","hex":"#994444"},{"name":"Ashen Plum","hex":"#9b9092"},{"name":"Ashen Tan","hex":"#d3cabf"},{"name":"Ashen Wind","hex":"#94a9b7"},{"name":"Ashenvale Nights","hex":"#104071"},{"name":"Asher Benjamin","hex":"#45575e"},{"name":"Ashes","hex":"#b8b5ad"},{"name":"Ashes to Ashes","hex":"#bbb3a2"},{"name":"Ashley Blue","hex":"#8398a9"},{"name":"Ashlin Grey","hex":"#d2d9da"},{"name":"Ashlite","hex":"#a7a49f"},{"name":"Ashton Blue","hex":"#4a79ba"},{"name":"Ashton Skies","hex":"#7b8eb0"},{"name":"Ashwood","hex":"#edd6ae"},{"name":"Asian Fusion","hex":"#ece0cd"},{"name":"Asian Ivory","hex":"#e8e0cd"},{"name":"Asian Jute","hex":"#d4b78f"},{"name":"Asian Pear","hex":"#ae9156"},{"name":"Asian Violet","hex":"#8b818c"},{"name":"Āsmānī Sky","hex":"#88ddbb"},{"name":"Aspara","hex":"#70b2cc"},{"name":"Asparagus","hex":"#77ab56"},{"name":"Asparagus Cream","hex":"#96af54"},{"name":"Asparagus Fern","hex":"#b9cb5a"},{"name":"Asparagus Green","hex":"#d2cbb4"},{"name":"Asparagus Sprig","hex":"#576f44"},{"name":"Asparagus Yellow","hex":"#dac98e"},{"name":"Aspen Aura","hex":"#83a494"},{"name":"Aspen Branch","hex":"#c6bcad"},{"name":"Aspen Gold","hex":"#ffd662"},{"name":"Aspen Green","hex":"#72926b"},{"name":"Aspen Hush","hex":"#6a8d88"},{"name":"Aspen Mist","hex":"#cfd7cb"},{"name":"Aspen Snow","hex":"#f0f0e7"},{"name":"Aspen Valley","hex":"#687f7a"},{"name":"Aspen Whisper","hex":"#edf1e3"},{"name":"Aspen Yellow","hex":"#f6df9f"},{"name":"Asphalt","hex":"#130a06"},{"name":"Asphalt Blue","hex":"#474c55"},{"name":"Asphalt Grey","hex":"#5e5e5d"},{"name":"Aspiration","hex":"#a08a80"},{"name":"Aspiring Blue","hex":"#a2c1c0"},{"name":"Assassin","hex":"#2d4f83"},{"name":"Assassin\'s Red","hex":"#f60206"},{"name":"Assateague Sand","hex":"#e1d0b2"},{"name":"Assault","hex":"#1c4374"},{"name":"Aster","hex":"#867ba9"},{"name":"Aster Flower Blue","hex":"#9bacd8"},{"name":"Aster Petal","hex":"#d4dae2"},{"name":"Aster Purple","hex":"#8881b0"},{"name":"Aster Violetta","hex":"#8f629a"},{"name":"Astilbe","hex":"#f091a9"},{"name":"Astorath Red","hex":"#dd482b"},{"name":"Astoria Grey","hex":"#7e7565"},{"name":"Astra","hex":"#edd5a6"},{"name":"Astral","hex":"#376f89"},{"name":"Astral Aura","hex":"#363151"},{"name":"Astral Spirit","hex":"#8ec2e7"},{"name":"Astro Arcade Green","hex":"#77ff77"},{"name":"Astro Bound","hex":"#899fb9"},{"name":"Astro Nautico","hex":"#5383c3"},{"name":"Astro Purple","hex":"#6d5acf"},{"name":"Astro Sunset","hex":"#937874"},{"name":"Astro Zinger","hex":"#797eb5"},{"name":"Astrogranite","hex":"#757679"},{"name":"Astrogranite Debris","hex":"#3b424c"},{"name":"Astrolabe Reef","hex":"#2d96ce"},{"name":"Astronaut","hex":"#445172"},{"name":"Astronaut Blue","hex":"#214559"},{"name":"Astronomer","hex":"#e8f2eb"},{"name":"Astronomical","hex":"#474b4a"},{"name":"Astronomicon Grey","hex":"#6b7c85"},{"name":"Astroscopus Grey","hex":"#afb4b6"},{"name":"Astroturf","hex":"#67a159"},{"name":"Asurmen Blue Wash","hex":"#273e51"},{"name":"Aswad Black","hex":"#17181c"},{"name":"At Ease","hex":"#e7eee1"},{"name":"At Ease Soldier","hex":"#9e9985"},{"name":"At The Beach","hex":"#e7d9b9"},{"name":"Atelier","hex":"#a3abb8"},{"name":"Ateneo Blue","hex":"#003a6c"},{"name":"Athena","hex":"#dcd7cc"},{"name":"Athena Blue","hex":"#66ddff"},{"name":"Athena Pink","hex":"#e9b4c3"},{"name":"Athenian Green","hex":"#92a18a"},{"name":"Athens","hex":"#3f74b1"},{"name":"Athens Grey","hex":"#dcdddd"},{"name":"Athonian Camoshade","hex":"#6d8e44"},{"name":"Aths Special","hex":"#d5cbb2"},{"name":"Atlantic Blue","hex":"#008997"},{"name":"Atlantic Breeze","hex":"#cbe1ee"},{"name":"Atlantic Charter","hex":"#2b2f41"},{"name":"Atlantic Deep","hex":"#294f58"},{"name":"Atlantic Depths","hex":"#001166"},{"name":"Atlantic Fig Snail","hex":"#d7ceb9"},{"name":"Atlantic Gull","hex":"#4b8eb0"},{"name":"Atlantic Mystique","hex":"#00629a"},{"name":"Atlantic Navy","hex":"#13336f"},{"name":"Atlantic Ocean","hex":"#a7d8e4"},{"name":"Atlantic Sand","hex":"#dcd5d2"},{"name":"Atlantic Shoreline","hex":"#708189"},{"name":"Atlantic Tide","hex":"#3e586e"},{"name":"Atlantic Tulip","hex":"#b598c3"},{"name":"Atlantic Wave","hex":"#3d797c"},{"name":"Atlantic Waves","hex":"#264243"},{"name":"Atlantis","hex":"#336172"},{"name":"Atlantis Myth","hex":"#006477"},{"name":"Atlas Cedar","hex":"#5ca0a7"},{"name":"Atlas Cedar Green","hex":"#667a6e"},{"name":"Atlas Red","hex":"#82193a"},{"name":"Atlas White","hex":"#ede5cf"},{"name":"Atmosphere","hex":"#0099dd"},{"name":"Atmospheric","hex":"#899697"},{"name":"Atmospheric Pressure","hex":"#c2d0e1"},{"name":"Atmospheric Soft Blue","hex":"#ace1f0"},{"name":"Atoll","hex":"#2b797a"},{"name":"Atoll Sand","hex":"#ffcf9e"},{"name":"Atom Blue","hex":"#8f9cac"},{"name":"Atomic","hex":"#3d4b52"},{"name":"Atomic Blue","hex":"#0097c3"},{"name":"Atomic Lime","hex":"#b9ff03"},{"name":"Atomic Orange","hex":"#f88605"},{"name":"Atomic Pink","hex":"#fb7efd"},{"name":"Atomic Tangerine","hex":"#ff9966"},{"name":"Atrium White","hex":"#f1eee4"},{"name":"Attar of Rose","hex":"#994240"},{"name":"Attica","hex":"#a1bca9"},{"name":"Attitude","hex":"#a48884"},{"name":"Attitude Grey","hex":"#7c7d75"},{"name":"Attorney","hex":"#3f4258"},{"name":"Au Chico","hex":"#9e6759"},{"name":"Au Gratin","hex":"#ff9d45"},{"name":"Au Natural","hex":"#e5e1ce"},{"name":"Au Naturel","hex":"#e8cac0"},{"name":"Auberge","hex":"#3f3130"},{"name":"Aubergine","hex":"#372528"},{"name":"Aubergine Flesh","hex":"#f2e4dd"},{"name":"Aubergine Green","hex":"#8b762c"},{"name":"Aubergine Grey","hex":"#6e5861"},{"name":"Aubergine Mauve","hex":"#3b2741"},{"name":"Aubergine Perl","hex":"#5500aa"},{"name":"Auburn","hex":"#712f2c"},{"name":"Auburn Glaze","hex":"#b58271"},{"name":"Auburn Lights","hex":"#78342f"},{"name":"Auburn Wave","hex":"#d8a394"},{"name":"Audition","hex":"#b5acb7"},{"name":"Audrey\'s Blush","hex":"#ae8087"},{"name":"Auger Shell","hex":"#9f9292"},{"name":"August Moon","hex":"#e6e1d6"},{"name":"August Morning","hex":"#ffd79d"},{"name":"Augustus Asparagus","hex":"#90aa0b"},{"name":"Aumbry","hex":"#7c7469"},{"name":"Aunt Violet","hex":"#7c0087"},{"name":"Aura","hex":"#b2a8a1"},{"name":"Aura Orange","hex":"#b42b26"},{"name":"Aura White","hex":"#dee2e4"},{"name":"Aureolin","hex":"#fdee00"},{"name":"Auric","hex":"#c48919"},{"name":"Auric Armour Gold","hex":"#e8bc6d"},{"name":"Aurichalcite","hex":"#32ffdc"},{"name":"Auricula Purple","hex":"#533552"},{"name":"AuroMetalSaurus","hex":"#6e7f80"},{"name":"Aurora","hex":"#ebd147"},{"name":"Aurora Brown","hex":"#6a4238"},{"name":"Aurora Green","hex":"#6adc99"},{"name":"Aurora Grey","hex":"#d3c5c4"},{"name":"Aurora Magenta","hex":"#963b60"},{"name":"Aurora Orange","hex":"#ec7042"},{"name":"Aurora Pink","hex":"#e881a6"},{"name":"Aurora Red","hex":"#c13435"},{"name":"Aurora Splendor","hex":"#595682"},{"name":"Austere","hex":"#726848"},{"name":"Austere Grey","hex":"#bebfb2"},{"name":"Australian Apricot","hex":"#f4c4a5"},{"name":"Australian Jade","hex":"#84a194"},{"name":"Australian Mint","hex":"#eff8aa"},{"name":"Australien","hex":"#cc9911"},{"name":"Australium Gold","hex":"#e7b53b"},{"name":"Austrian Ice","hex":"#dee6e7"},{"name":"Authentic Brown","hex":"#6b5446"},{"name":"Authentic Tan","hex":"#eaddc6"},{"name":"Automn Fox","hex":"#c38743"},{"name":"Autonomous","hex":"#c6c7c5"},{"name":"Autumn","hex":"#af865b"},{"name":"Autumn Air","hex":"#d2a888"},{"name":"Autumn Apple Yellow","hex":"#cda449"},{"name":"Autumn Arrival","hex":"#f9986f"},{"name":"Autumn Ashes","hex":"#816b68"},{"name":"Autumn Avenue","hex":"#e3ad59"},{"name":"Autumn Bark","hex":"#9d6f46"},{"name":"Autumn Blaze","hex":"#d9922e"},{"name":"Autumn Blonde","hex":"#eccca6"},{"name":"Autumn Bloom","hex":"#ffe0cb"},{"name":"Autumn Blush","hex":"#e4d1c0"},{"name":"Autumn Child","hex":"#fbe6c1"},{"name":"Autumn Crocodile","hex":"#447744"},{"name":"Autumn Fall","hex":"#67423b"},{"name":"Autumn Fern","hex":"#507b49"},{"name":"Autumn Fest","hex":"#be7d33"},{"name":"Autumn Festival","hex":"#a28b36"},{"name":"Autumn Fire","hex":"#c44e4f"},{"name":"Autumn Fog","hex":"#afb8ba"},{"name":"Autumn Glaze","hex":"#b3573f"},{"name":"Autumn Glimmer","hex":"#e9874e"},{"name":"Autumn Glory","hex":"#ff8812"},{"name":"Autumn Glow","hex":"#e5c382"},{"name":"Autumn Gold","hex":"#7d623c"},{"name":"Autumn Gourd","hex":"#e6ae76"},{"name":"Autumn Grey","hex":"#b2aba7"},{"name":"Autumn Haze","hex":"#d4c2b1"},{"name":"Autumn Hills","hex":"#784f50"},{"name":"Autumn Landscape","hex":"#e47227"},{"name":"Autumn Laurel","hex":"#9d8d66"},{"name":"Autumn Leaf","hex":"#b56a4c"},{"name":"Autumn Leaf Brown","hex":"#7a560e"},{"name":"Autumn Leaf Orange","hex":"#d07a04"},{"name":"Autumn Leaf Red","hex":"#623836"},{"name":"Autumn Leaves","hex":"#6e4440"},{"name":"Autumn Malt","hex":"#cea48e"},{"name":"Autumn Maple","hex":"#d26f16"},{"name":"Autumn Meadow","hex":"#acb78e"},{"name":"Autumn Mist","hex":"#f7b486"},{"name":"Autumn Night","hex":"#3b5861"},{"name":"Autumn Orange","hex":"#ee9950"},{"name":"Autumn Orchid","hex":"#9d9093"},{"name":"Autumn Pine Green","hex":"#158078"},{"name":"Autumn Red","hex":"#99451f"},{"name":"Autumn Ridge","hex":"#9b423f"},{"name":"Autumn Robin","hex":"#c2452d"},{"name":"Autumn Russet","hex":"#a4746e"},{"name":"Autumn Sage","hex":"#aea26e"},{"name":"Autumn Splendor","hex":"#fe9a50"},{"name":"Autumn Sunset","hex":"#f38554"},{"name":"Autumn Umber","hex":"#ae704f"},{"name":"Autumn White","hex":"#fae2cf"},{"name":"Autumn Wind","hex":"#fbd1b6"},{"name":"Autumn Wisteria","hex":"#c9a0dc"},{"name":"Autumn Yellow","hex":"#e99700"},{"name":"Autumn\'s Hill","hex":"#ba7a61"},{"name":"Autumnal","hex":"#ad5928"},{"name":"Avagddu Green","hex":"#106b21"},{"name":"Avalon","hex":"#799b96"},{"name":"Avant-Garde Pink","hex":"#ff77ee"},{"name":"Aventurine","hex":"#576e6a"},{"name":"Avenue Tan","hex":"#d2c2b0"},{"name":"Averland Sunset","hex":"#ffaa1d"},{"name":"Aviary Blue","hex":"#c6e3e8"},{"name":"Aviator","hex":"#7d6049"},{"name":"Avid Apricot","hex":"#f4c69f"},{"name":"Aviva","hex":"#c5b47f"},{"name":"Avocado","hex":"#568203"},{"name":"Avocado Cream","hex":"#b7bf6b"},{"name":"Avocado Dark Green","hex":"#3e4826"},{"name":"Avocado Green","hex":"#87a922"},{"name":"Avocado Pear","hex":"#555337"},{"name":"Avocado Peel","hex":"#39373b"},{"name":"Avocado Stone","hex":"#4e3e1f"},{"name":"Avocado Toast","hex":"#90b134"},{"name":"Avocado Whip","hex":"#cdd6b1"},{"name":"Avorio","hex":"#ccbdb4"},{"name":"Awaken","hex":"#a7a3bb"},{"name":"Awakened","hex":"#e3dae9"},{"name":"Awakening","hex":"#bb9e9b"},{"name":"Award Blue","hex":"#315886"},{"name":"Award Night","hex":"#54617d"},{"name":"Award Winning White","hex":"#fef0de"},{"name":"Awareness","hex":"#e3ebb1"},{"name":"Awesome Aura","hex":"#ccc1da"},{"name":"Awesome Violet","hex":"#a7b2d4"},{"name":"Awkward Purple","hex":"#d208cc"},{"name":"Awning Red","hex":"#90413e"},{"name":"Axe Handle","hex":"#6b4730"},{"name":"Axinite","hex":"#756050"},{"name":"Axis","hex":"#bab6cb"},{"name":"Axolotl","hex":"#fff0df"},{"name":"Ayahuasca Vine","hex":"#665500"},{"name":"Ayame Iris","hex":"#763568"},{"name":"Ayrshire","hex":"#a07254"},{"name":"Azalea","hex":"#d73b5d"},{"name":"Azalea Flower","hex":"#efc0cb"},{"name":"Azalea Leaf","hex":"#4a6871"},{"name":"Azalea Pink","hex":"#f9c0c4"},{"name":"Azeitona","hex":"#a5b546"},{"name":"Azores","hex":"#7c968b"},{"name":"Azores Blue","hex":"#0085a7"},{"name":"Azraq Blue","hex":"#4c6cb3"},{"name":"Azshara Vein","hex":"#b13916"},{"name":"Aztec","hex":"#293432"},{"name":"Aztec Aura","hex":"#ffefbc"},{"name":"Aztec Brick","hex":"#9e8352"},{"name":"Aztec Copper","hex":"#c46943"},{"name":"Aztec Glimmer","hex":"#e7b347"},{"name":"Aztec Gold","hex":"#c39953"},{"name":"Aztec Jade","hex":"#33bb88"},{"name":"Aztec Sky","hex":"#4db5d7"},{"name":"Aztec Temple","hex":"#84705b"},{"name":"Aztec Turquoise","hex":"#00d6e2"},{"name":"Aztec Warrior","hex":"#bb0066"},{"name":"Azuki Bean","hex":"#96514d"},{"name":"Azuki Red","hex":"#672422"},{"name":"Azul","hex":"#1d5dec"},{"name":"Azul Caribe","hex":"#0089c4"},{"name":"Azul Cielito Lindo","hex":"#c9e3eb"},{"name":"Azul Pavo Real","hex":"#537faf"},{"name":"Azul Petróleo","hex":"#36454f"},{"name":"Azul Primavera","hex":"#e2eff2"},{"name":"Azul Tequila","hex":"#c0cfc7"},{"name":"Azul Turquesa","hex":"#6abac4"},{"name":"Azulado","hex":"#211d49"},{"name":"Azure","hex":"#007fff"},{"name":"Azure Blue","hex":"#4d91c6"},{"name":"Azure Dragon","hex":"#053976"},{"name":"Azure Green Blue","hex":"#006c81"},{"name":"Azure Hint","hex":"#dddce1"},{"name":"Azure Lake","hex":"#7bbbc8"},{"name":"Azure Mist","hex":"#f0fff1"},{"name":"Azure Radiance","hex":"#007f1f"},{"name":"Azure Sky","hex":"#b0e0f6"},{"name":"Azure Tide","hex":"#2b9890"},{"name":"Azurean","hex":"#59bad9"},{"name":"Azureish White","hex":"#dbe9f4"},{"name":"Azuremyst Isle","hex":"#cc81f0"},{"name":"Azurite Water Green","hex":"#497f73"},{"name":"B\'dazzled Blue","hex":"#2e5894"},{"name":"Baal Red Wash","hex":"#610023"},{"name":"Baba Ganoush","hex":"#eebb88"},{"name":"Babbling Brook","hex":"#becfcd"},{"name":"Babbling Creek","hex":"#a7bad3"},{"name":"Babe","hex":"#dc7b7c"},{"name":"Babiana","hex":"#876fa3"},{"name":"Baby Aqua","hex":"#abccc3"},{"name":"Baby Artichoke","hex":"#e9e3ce"},{"name":"Baby Barn Owl","hex":"#c3c3b8"},{"name":"Baby Bear","hex":"#6f5944"},{"name":"Baby Berries","hex":"#9c4a62"},{"name":"Baby Blossom","hex":"#faefe9"},{"name":"Baby Blue","hex":"#a2cffe"},{"name":"Baby Blue Eyes","hex":"#a1caf1"},{"name":"Baby Bok Choy","hex":"#bbb98a"},{"name":"Baby Breath","hex":"#f0d0b0"},{"name":"Baby Bunting","hex":"#abcaea"},{"name":"Baby Burro","hex":"#8c665c"},{"name":"Baby Cake","hex":"#87bea3"},{"name":"Baby Chick","hex":"#ffeda2"},{"name":"Baby Fish Mouth","hex":"#f3acb9"},{"name":"Baby Frog","hex":"#c8ba63"},{"name":"Baby Girl","hex":"#ffdfe8"},{"name":"Baby Grass","hex":"#8abd7b"},{"name":"Baby Green","hex":"#8cff9e"},{"name":"Baby Jane","hex":"#d0a7a8"},{"name":"Baby Melon","hex":"#ffa468"},{"name":"Baby Motive","hex":"#8fcbdc"},{"name":"Baby Pink","hex":"#ffb7ce"},{"name":"Baby Powder","hex":"#fefefa"},{"name":"Baby Purple","hex":"#ca9bf7"},{"name":"Baby Seal","hex":"#a1a5a8"},{"name":"Baby Shoes","hex":"#005784"},{"name":"Baby Spinach","hex":"#89a882"},{"name":"Baby Sprout","hex":"#a78b81"},{"name":"Baby Steps","hex":"#f5c9da"},{"name":"Baby Talk Grey","hex":"#bababa"},{"name":"Baby Tears","hex":"#66b9d6"},{"name":"Baby Tone","hex":"#dcc2cb"},{"name":"Baby Tooth","hex":"#eeffdd"},{"name":"Baby Vegetable","hex":"#5d6942"},{"name":"Baby Whale","hex":"#4d5588"},{"name":"Baby\'s Blanket","hex":"#ffaec1"},{"name":"Baby\'s Booties","hex":"#e8c1c2"},{"name":"Baby\'s Breath","hex":"#d8e4e8"},{"name":"Babyccino","hex":"#eeccbb"},{"name":"Baca Berry","hex":"#945759"},{"name":"Bacchanalia Red","hex":"#8a3a3c"},{"name":"Bachelor Blue","hex":"#8faaca"},{"name":"Bachelor Button","hex":"#4abbd5"},{"name":"Bachimitsu Gold","hex":"#fddea5"},{"name":"Back In Black","hex":"#16141c"},{"name":"Back Stage","hex":"#6b625b"},{"name":"Back To Basics","hex":"#726747"},{"name":"Back to Nature","hex":"#bdb98f"},{"name":"Back to School","hex":"#c1853b"},{"name":"Backcountry","hex":"#7c725f"},{"name":"Backdrop","hex":"#a7a799"},{"name":"Backlight","hex":"#fcf0e5"},{"name":"Backwater","hex":"#687078"},{"name":"Backwoods","hex":"#4a6546"},{"name":"Backyard","hex":"#879877"},{"name":"Bacon Strips","hex":"#df3f32"},{"name":"Bad Hair Day","hex":"#f1c983"},{"name":"Bad Moon Yellow","hex":"#f2e5b4"},{"name":"Badab Black Wash","hex":"#0a0908"},{"name":"Badass Grass","hex":"#b4da55"},{"name":"Badlands","hex":"#b5695a"},{"name":"Badlands Orange","hex":"#ff6316"},{"name":"Badlands Sunset","hex":"#936a5b"},{"name":"Badshahi Brown","hex":"#d3a194"},{"name":"Bag of Gold","hex":"#e1bd88"},{"name":"Bagel","hex":"#f6cd9b"},{"name":"Bagpiper","hex":"#1c5544"},{"name":"Baguette","hex":"#b5936a"},{"name":"Bahama Blue","hex":"#25597f"},{"name":"Bahaman Bliss","hex":"#3fa49b"},{"name":"Baharroth Blue","hex":"#58c1cd"},{"name":"Bahia","hex":"#a9c01c"},{"name":"Bahia Grass","hex":"#c4c5ad"},{"name":"Bái Sè White","hex":"#ecefef"},{"name":"Baikō Brown","hex":"#887938"},{"name":"Bailey Bells","hex":"#8a8ec9"},{"name":"Bainganī","hex":"#8273fd"},{"name":"Baize","hex":"#4b5445"},{"name":"Baize Green","hex":"#c7cda8"},{"name":"Baja","hex":"#d2c1a8"},{"name":"Baja Blue","hex":"#66a6d9"},{"name":"Baja White","hex":"#fff8d1"},{"name":"Baked Apple","hex":"#b34646"},{"name":"Baked Bean","hex":"#b2754d"},{"name":"Baked Biscotti","hex":"#dad3cc"},{"name":"Baked Bread","hex":"#dacba9"},{"name":"Baked Brie","hex":"#ede9d7"},{"name":"Baked Clay","hex":"#a35445"},{"name":"Baked Cookie","hex":"#89674a"},{"name":"Baked Ham","hex":"#eec8bc"},{"name":"Baked Potato","hex":"#b69e87"},{"name":"Baked Salmon","hex":"#df9876"},{"name":"Baked Scone","hex":"#e5d3bc"},{"name":"Baked Sienna","hex":"#9b775e"},{"name":"Bakelite","hex":"#e6d4a5"},{"name":"Bakelite Gold","hex":"#d7995d"},{"name":"Bakelite Yellow","hex":"#c6b788"},{"name":"Baker Rose","hex":"#bf8284"},{"name":"Baker-Miller Pink","hex":"#ff92ae"},{"name":"Baker\'s Chocolate","hex":"#5c3317"},{"name":"Baker\'s Dream","hex":"#c98f70"},{"name":"Baker’s Bread","hex":"#d0b393"},{"name":"Bakery Box","hex":"#f0f4f2"},{"name":"Bakery Brown","hex":"#ab9078"},{"name":"Baklava","hex":"#efb435"},{"name":"Bakos Blue","hex":"#273f4b"},{"name":"Balance","hex":"#d1dbc2"},{"name":"Balance Green","hex":"#c3c5a7"},{"name":"Balanced","hex":"#d7d2d1"},{"name":"Balanced Beige","hex":"#c0b2a2"},{"name":"Balboa","hex":"#afd3da"},{"name":"Balcony Rose","hex":"#e2bcb8"},{"name":"Balcony Sunset","hex":"#d78e6b"},{"name":"Baleine Blue","hex":"#165a90"},{"name":"Bali Batik","hex":"#6f5937"},{"name":"Bali Bliss","hex":"#5e9ea0"},{"name":"Bali Deep","hex":"#8a8e93"},{"name":"Bali Hai","hex":"#849ca9"},{"name":"Bali Sand","hex":"#f6e8d5"},{"name":"Balinese Sunset","hex":"#f1a177"},{"name":"Ball Blue","hex":"#21abcd"},{"name":"Ball Gown","hex":"#525661"},{"name":"Ballad","hex":"#cab6c6"},{"name":"Ballad Blue","hex":"#c0ceda"},{"name":"Ballerina","hex":"#f2cfdc"},{"name":"Ballerina Beauty","hex":"#e8ded6"},{"name":"Ballerina Gown","hex":"#f9eaea"},{"name":"Ballerina Pink","hex":"#f7b6ba"},{"name":"Ballerina Silk","hex":"#f0dee0"},{"name":"Ballerina Tears","hex":"#f2bbb1"},{"name":"Ballerina Tutu","hex":"#c8647f"},{"name":"Ballet","hex":"#f7d5d4"},{"name":"Ballet Blue","hex":"#afc4d9"},{"name":"Ballet Cream","hex":"#fc8258"},{"name":"Ballet Rose","hex":"#d3adb1"},{"name":"Ballet Shoes","hex":"#edb9bd"},{"name":"Ballet Skirt","hex":"#ffc5b3"},{"name":"Ballet Slipper","hex":"#eacad0"},{"name":"Ballet Slippers","hex":"#fca2ad"},{"name":"Ballet White","hex":"#f2e7d8"},{"name":"Ballie Scott Sage","hex":"#b2b29c"},{"name":"Ballroom Blue","hex":"#a6b3c9"},{"name":"Ballyhoo","hex":"#58a83b"},{"name":"Balmy","hex":"#c5d8de"},{"name":"Balmy Palm Tree","hex":"#5c6f64"},{"name":"Balmy Seas","hex":"#b4dcd3"},{"name":"Balor Brown","hex":"#9c6b08"},{"name":"Balsa Stone","hex":"#cbbb92"},{"name":"Balsa Wood","hex":"#9a7550"},{"name":"Balsam","hex":"#bec4b7"},{"name":"Balsam Branch","hex":"#36574e"},{"name":"Balsam Brown","hex":"#cba874"},{"name":"Balsam Fir","hex":"#909e91"},{"name":"Balsam Green","hex":"#5e6e6d"},{"name":"Balsam of Peru","hex":"#120d07"},{"name":"Balsam Pear","hex":"#b19338"},{"name":"Balsamic Reduction","hex":"#434340"},{"name":"Balsamico","hex":"#130d07"},{"name":"Balthasar Gold","hex":"#a47552"},{"name":"Baltic","hex":"#279d9f"},{"name":"Baltic Amber","hex":"#fbb782"},{"name":"Baltic Blue","hex":"#6c969a"},{"name":"Baltic Bream","hex":"#9fbbda"},{"name":"Baltic Green","hex":"#3aa098"},{"name":"Baltic Prince","hex":"#135952"},{"name":"Baltic Sea","hex":"#3c3d3e"},{"name":"Baltic Trench","hex":"#125761"},{"name":"Baltic Turquoise","hex":"#00a49a"},{"name":"Bambino","hex":"#8edacc"},{"name":"Bamboo","hex":"#e3dec6"},{"name":"Bamboo Beige","hex":"#c1aba0"},{"name":"Bamboo Brown","hex":"#c87f00"},{"name":"Bamboo Charcoal","hex":"#454a48"},{"name":"Bamboo Forest","hex":"#b1a979"},{"name":"Bamboo Grass Green","hex":"#82994c"},{"name":"Bamboo Leaf","hex":"#99b243"},{"name":"Bamboo Mat","hex":"#e5da9f"},{"name":"Bamboo Screen","hex":"#bcab8c"},{"name":"Bamboo Shoot","hex":"#a3b6a4"},{"name":"Bamboo White","hex":"#c6cfad"},{"name":"Bamboo Yellow","hex":"#ae884b"},{"name":"Banafš Violet","hex":"#5a1991"},{"name":"Banafsaji Purple","hex":"#a50b5e"},{"name":"Banan-appeal","hex":"#faf3a6"},{"name":"Banana","hex":"#fffc79"},{"name":"Banana Ball","hex":"#efe073"},{"name":"Banana Bandanna","hex":"#f8f739"},{"name":"Banana Biscuit","hex":"#ffde7b"},{"name":"Banana Blossom","hex":"#933e49"},{"name":"Banana Boat","hex":"#fdc838"},{"name":"Banana Bombshell","hex":"#f7e82e"},{"name":"Banana Bread","hex":"#ffcf73"},{"name":"Banana Brick","hex":"#e8d82c"},{"name":"Banana Brûlée","hex":"#f7eab9"},{"name":"Banana Chalk","hex":"#d6d963"},{"name":"Banana Clan","hex":"#eedd00"},{"name":"Banana Cream","hex":"#fff49c"},{"name":"Banana Crepe","hex":"#e7d3ad"},{"name":"Banana Custard","hex":"#fcf3c5"},{"name":"Banana Farm","hex":"#ffdf38"},{"name":"Banana Flash","hex":"#eefe02"},{"name":"Banana Frappé","hex":"#ddd5b6"},{"name":"Banana Ice Cream","hex":"#f1d3b2"},{"name":"Banana King","hex":"#fffb08"},{"name":"Banana Leaf","hex":"#9d8f3a"},{"name":"Banana Mania","hex":"#fbe7b2"},{"name":"Banana Mash","hex":"#fafe4b"},{"name":"Banana Milk","hex":"#fff7ad"},{"name":"Banana Milkshake","hex":"#ede6cb"},{"name":"Banana Palm","hex":"#95a263"},{"name":"Banana Peel","hex":"#ffe774"},{"name":"Banana Pepper","hex":"#fdd630"},{"name":"Banana Pie","hex":"#f7efd7"},{"name":"Banana Powder","hex":"#d0c101"},{"name":"Banana Propaganda","hex":"#f3db00"},{"name":"Banana Pudding","hex":"#f4efc3"},{"name":"Banana Puree","hex":"#b29705"},{"name":"Banana Republic","hex":"#ffe292"},{"name":"Banana Sparkes","hex":"#f6f5d7"},{"name":"Banana Split","hex":"#f7eec8"},{"name":"Banana Yellow","hex":"#ffe135"},{"name":"Banana Yogurt","hex":"#fae7b5"},{"name":"Bananarama","hex":"#e4d466"},{"name":"Bananas Foster","hex":"#dbbe97"},{"name":"Bancha","hex":"#666a47"},{"name":"Bancroft Village","hex":"#816e54"},{"name":"Band-Aid","hex":"#d7a97c"},{"name":"Banded Tulip","hex":"#e0d3bd"},{"name":"Bandicoot","hex":"#878466"},{"name":"Baneblade Brown","hex":"#937f6d"},{"name":"Bang","hex":"#bc393b"},{"name":"Bangalore","hex":"#bbaa88"},{"name":"Bangladesh Green","hex":"#006a4f"},{"name":"Banh Bot Loc Dumpling","hex":"#d2b762"},{"name":"Banished Brown","hex":"#745e6f"},{"name":"Bank Blue","hex":"#3e4652"},{"name":"Bank Vault","hex":"#757374"},{"name":"Banksia","hex":"#a6b29a"},{"name":"Banksia Leaf","hex":"#4b5539"},{"name":"Banner Gold","hex":"#a28557"},{"name":"Bannister Brown","hex":"#806b5d"},{"name":"Bannister White","hex":"#e1e0d6"},{"name":"Banshee","hex":"#daf0e6"},{"name":"Bantam Egg","hex":"#af6c5d"},{"name":"Banyan Serenity","hex":"#98ab8c"},{"name":"Banyan Tree","hex":"#8d793e"},{"name":"Bara Red","hex":"#e9546b"},{"name":"Baragon Brown","hex":"#551100"},{"name":"Barbados","hex":"#3e6676"},{"name":"Barbados Bay","hex":"#006665"},{"name":"Barbados Beige","hex":"#b8a983"},{"name":"Barbados Blue","hex":"#2766ac"},{"name":"Barbados Cherry","hex":"#af0a30"},{"name":"Barbara","hex":"#ff0ff3"},{"name":"Barbarian","hex":"#f78c5a"},{"name":"Barbarian Leather","hex":"#a17308"},{"name":"Barbarossa","hex":"#a84734"},{"name":"Barbecue","hex":"#c26157"},{"name":"Barbera","hex":"#8b031c"},{"name":"Barberry","hex":"#ee1133"},{"name":"Barberry Bush","hex":"#d2c61f"},{"name":"Barberry Sand","hex":"#e1d4bc"},{"name":"Barberry Yellow","hex":"#f3bd32"},{"name":"Barbie Pink","hex":"#fe46a5"},{"name":"Barcelona Beige","hex":"#c4b39c"},{"name":"Barcelona Brown","hex":"#926a46"},{"name":"Barcelona Orange","hex":"#ff9500"},{"name":"Bare","hex":"#817e6d"},{"name":"Bare Beige","hex":"#e8d3c9"},{"name":"Bare Bone","hex":"#eeddcc"},{"name":"Bare Pink","hex":"#f2e1dd"},{"name":"Barely Aqua","hex":"#bae9e0"},{"name":"Barely Bloomed","hex":"#ddaadd"},{"name":"Barely Blue","hex":"#dde0df"},{"name":"Barely Brown","hex":"#dd6655"},{"name":"Barely Butter","hex":"#f8e9c2"},{"name":"Barely Mauve","hex":"#ccbdb9"},{"name":"Barely Peach","hex":"#ffe9c7"},{"name":"Barely Pear","hex":"#edebdb"},{"name":"Barely Pink","hex":"#f8d7dd"},{"name":"Barely Ripe Apricot","hex":"#ffe3cb"},{"name":"Barely Rose","hex":"#ede0e3"},{"name":"Barely White","hex":"#e1e3dd"},{"name":"Barf Green","hex":"#94ac02"},{"name":"Bargeboard Brown","hex":"#68534a"},{"name":"Barista","hex":"#bcafa2"},{"name":"Barite","hex":"#9e7b5c"},{"name":"Baritone","hex":"#708e95"},{"name":"Barium","hex":"#f4e1c5"},{"name":"Barium Green","hex":"#8fff9f"},{"name":"Bark","hex":"#5f5854"},{"name":"Bark Brown","hex":"#73532a"},{"name":"Bark Sawdust","hex":"#ab9004"},{"name":"Barking Prairie Dog","hex":"#c5b497"},{"name":"Barley","hex":"#d5b37e"},{"name":"Barley Corn","hex":"#b6935c"},{"name":"Barley Field","hex":"#c7bcae"},{"name":"Barley Groats","hex":"#fbf2db"},{"name":"Barley White","hex":"#f7e5b7"},{"name":"Barn Door","hex":"#8e5959"},{"name":"Barn Red","hex":"#8b4044"},{"name":"Barn Swallow","hex":"#4d332a"},{"name":"Barney","hex":"#ac1db8"},{"name":"Barney Purple","hex":"#a00498"},{"name":"Barnfloor","hex":"#9c9480"},{"name":"Barnwood","hex":"#554d44"},{"name":"Barnwood Ash","hex":"#87857e"},{"name":"Barnwood Grey","hex":"#9e9589"},{"name":"Barnyard Grass","hex":"#5dac51"},{"name":"Barolo","hex":"#71000e"},{"name":"Baroness","hex":"#a785a7"},{"name":"Baroness Mauve","hex":"#847098"},{"name":"Baronial Brown","hex":"#5a4840"},{"name":"Baroque","hex":"#ddaa22"},{"name":"Baroque Blue","hex":"#95b6b5"},{"name":"Baroque Chalk Soft Blue","hex":"#aecccb"},{"name":"Baroque Grey","hex":"#5f5d64"},{"name":"Baroque Red","hex":"#7b4f5d"},{"name":"Baroque Rose","hex":"#b35a66"},{"name":"Barossa","hex":"#452e39"},{"name":"Barrel","hex":"#f0b069"},{"name":"Barrel Aged","hex":"#8b6945"},{"name":"Barrel Stove","hex":"#8e7e67"},{"name":"Barren","hex":"#b9aba3"},{"name":"Barrett Quince","hex":"#f5d1b2"},{"name":"Barricade","hex":"#84623e"},{"name":"Barrier Reef","hex":"#009bb5"},{"name":"Barro Verde","hex":"#9f8e71"},{"name":"Basalt","hex":"#989998"},{"name":"Basalt Black","hex":"#4d423e"},{"name":"Base Camp","hex":"#575c3a"},{"name":"Base Sand","hex":"#bb9955"},{"name":"Baseball Base","hex":"#f4eadc"},{"name":"Bashful","hex":"#e3eded"},{"name":"Bashful Blue","hex":"#6994cf"},{"name":"Bashful Emu","hex":"#b2b0ac"},{"name":"Bashful Lilac","hex":"#d0d2e3"},{"name":"Bashful Pansy","hex":"#d9cde5"},{"name":"Bashful Rose","hex":"#b88686"},{"name":"Basic Coral","hex":"#dbc3b6"},{"name":"Basic Khaki","hex":"#c3b69f"},{"name":"Basil","hex":"#879f84"},{"name":"Basil Chiffonade","hex":"#828249"},{"name":"Basil Green","hex":"#54622e"},{"name":"Basil Icing","hex":"#e2e6db"},{"name":"Basil Mauve","hex":"#6c5472"},{"name":"Basil Pesto","hex":"#529d6e"},{"name":"Basil Smash","hex":"#b7e1a1"},{"name":"Basilica Blue","hex":"#4a9fa7"},{"name":"Basilisk","hex":"#9ab38d"},{"name":"Basilisk Lizard","hex":"#bcecac"},{"name":"Basin Blue","hex":"#b9dee4"},{"name":"Basket Beige","hex":"#c0a98b"},{"name":"Basket of Gold","hex":"#f4cc3c"},{"name":"Basketball","hex":"#ee6730"},{"name":"Basketry","hex":"#bda286"},{"name":"Basketweave Beige","hex":"#caad92"},{"name":"Basmati White","hex":"#ebe1c9"},{"name":"Basque Green","hex":"#5f6033"},{"name":"Bassinet","hex":"#d3c1cb"},{"name":"Basswood","hex":"#c9b196"},{"name":"Basswood Green","hex":"#839e83"},{"name":"Bastard-amber","hex":"#ffcc88"},{"name":"Bastille","hex":"#2c2c32"},{"name":"Bastion Grey","hex":"#4d4a4a"},{"name":"Bat Wing","hex":"#7e7466"},{"name":"Bat-Signal","hex":"#feff00"},{"name":"Bat\'s Blood Soup","hex":"#ee3366"},{"name":"Batch Blue","hex":"#87b2c9"},{"name":"Bateau","hex":"#1b7598"},{"name":"Bateau Brown","hex":"#7a5f5a"},{"name":"Bath","hex":"#d8e9db"},{"name":"Bath Bubbles","hex":"#e6f2ea"},{"name":"Bath Green","hex":"#0a696a"},{"name":"Bath Salt Green","hex":"#bbded7"},{"name":"Bath Turquoise","hex":"#62baa8"},{"name":"Bath Water","hex":"#88eeee"},{"name":"Bathe Blue","hex":"#c2e0e3"},{"name":"Bathing","hex":"#93c9d0"},{"name":"Batik Lilac","hex":"#7e738b"},{"name":"Batik Pink","hex":"#9c657e"},{"name":"Batman","hex":"#656e72"},{"name":"Batman\'s NES Cape","hex":"#940084"},{"name":"Baton","hex":"#866f5a"},{"name":"Baton Rouge","hex":"#973c6c"},{"name":"Bats Cloak","hex":"#1f1518"},{"name":"Battered Sausage","hex":"#ede2d4"},{"name":"Battery Charged Blue","hex":"#1dacd4"},{"name":"Battle Blue","hex":"#74828f"},{"name":"Battle Cat","hex":"#2b7414"},{"name":"Battle Dress","hex":"#7e8270"},{"name":"Battle Harbor","hex":"#9c9c82"},{"name":"Battleship","hex":"#9c9895"},{"name":"Battleship Green","hex":"#828f72"},{"name":"Battleship Grey","hex":"#6f7476"},{"name":"Battletoad","hex":"#11cc55"},{"name":"Batu Cave","hex":"#595438"},{"name":"Bauhaus","hex":"#3f4040"},{"name":"Bauhaus Blue","hex":"#006392"},{"name":"Bauhaus Buff","hex":"#cfb49e"},{"name":"Bauhaus Gold","hex":"#b0986f"},{"name":"Bauhaus Tan","hex":"#ccc4ae"},{"name":"Bavarian","hex":"#4d5e42"},{"name":"Bavarian Blue","hex":"#1c3382"},{"name":"Bavarian Cream","hex":"#fff9dd"},{"name":"Bavarian Gentian","hex":"#20006d"},{"name":"Bavarian Green","hex":"#749a54"},{"name":"Bavarian Sweet Mustard","hex":"#4d3113"},{"name":"Bay","hex":"#b3e2d3"},{"name":"Bay Area","hex":"#afa490"},{"name":"Bay Brown","hex":"#773300"},{"name":"Bay Fog","hex":"#9899b0"},{"name":"Bay Isle Pointe","hex":"#214048"},{"name":"Bay Leaf","hex":"#86793d"},{"name":"Bay of Hope","hex":"#bfc9d0"},{"name":"Bay of Many","hex":"#353e64"},{"name":"Bay Salt","hex":"#d2cdbc"},{"name":"Bay Scallop","hex":"#fbe6cd"},{"name":"Bay Site","hex":"#325f8a"},{"name":"Bay View","hex":"#6a819e"},{"name":"Bay Water","hex":"#aaad94"},{"name":"Bay Wharf","hex":"#747f89"},{"name":"Bay\'s Water","hex":"#7b9aad"},{"name":"Bayberry","hex":"#275a5d"},{"name":"Bayberry Frost","hex":"#d0d9c7"},{"name":"Bayberry Wax","hex":"#b6aa89"},{"name":"Bayern Blue","hex":"#0098d4"},{"name":"Bayou","hex":"#268483"},{"name":"Bayshore","hex":"#89cee0"},{"name":"Bayshore Blue","hex":"#8ea6ba"},{"name":"Bayside","hex":"#5fc9bf"},{"name":"Baywater Blue","hex":"#c9d8e4"},{"name":"Bazaar","hex":"#8f7777"},{"name":"Bazooka Pink","hex":"#ffa6c9"},{"name":"BBQ","hex":"#a35046"},{"name":"Be Daring","hex":"#ffc943"},{"name":"Be Mine","hex":"#f4e3e7"},{"name":"Be My Valentine","hex":"#ec9dc3"},{"name":"Be Spontaneous","hex":"#a5cb66"},{"name":"Be Yourself","hex":"#9b983d"},{"name":"Beach","hex":"#efe4bb"},{"name":"Beach Bag","hex":"#adb864"},{"name":"Beach Ball","hex":"#efc700"},{"name":"Beach Blue","hex":"#5f9ca2"},{"name":"Beach Boardwalk","hex":"#ceab90"},{"name":"Beach Cabana","hex":"#a69081"},{"name":"Beach Casuarina","hex":"#665a38"},{"name":"Beach Coast Buff","hex":"#caab84"},{"name":"Beach Cottage","hex":"#94adb0"},{"name":"Beach Dune","hex":"#c6bb9c"},{"name":"Beach Foam","hex":"#cde0e1"},{"name":"Beach Glass","hex":"#96dfce"},{"name":"Beach Grass","hex":"#dcddb8"},{"name":"Beach House","hex":"#edd481"},{"name":"Beach Lilac","hex":"#bda2c4"},{"name":"Beach Party","hex":"#fbd05c"},{"name":"Beach Sand","hex":"#fbb88b"},{"name":"Beach Towel","hex":"#fce3b3"},{"name":"Beach Trail","hex":"#fedeca"},{"name":"Beach Umbrella","hex":"#819aaa"},{"name":"Beach View","hex":"#4f7694"},{"name":"Beach White","hex":"#f6eed6"},{"name":"Beach Wind","hex":"#dce1e2"},{"name":"Beach Woods","hex":"#cac0b0"},{"name":"Beachcomber","hex":"#d8e3e5"},{"name":"Beachcombing","hex":"#e4c683"},{"name":"Beachside Drive","hex":"#acdbdb"},{"name":"Beachside Villa","hex":"#c3b296"},{"name":"Beachwalk","hex":"#d2b17a"},{"name":"Beachy Keen","hex":"#e6d0b6"},{"name":"Beacon Blue","hex":"#265c98"},{"name":"Beacon Yellow","hex":"#f2c98a"},{"name":"Beaded Blue","hex":"#494d8b"},{"name":"Beagle Brown","hex":"#8d6737"},{"name":"Beaming Blue","hex":"#33ffff"},{"name":"Beaming Sun","hex":"#fff8df"},{"name":"Bean","hex":"#4a1207"},{"name":"Bean Counter","hex":"#68755d"},{"name":"Bean Green","hex":"#685c27"},{"name":"Bean Pot","hex":"#8b6b51"},{"name":"Bean Shoot","hex":"#91923a"},{"name":"Bean Sprout","hex":"#f3f9e9"},{"name":"Bean White","hex":"#ebf0e4"},{"name":"Beanstalk","hex":"#31aa74"},{"name":"Bear","hex":"#766e65"},{"name":"Bear Brown","hex":"#44382b"},{"name":"Bear Claw","hex":"#ae6b52"},{"name":"Bear Creek","hex":"#836452"},{"name":"Bear Hug","hex":"#796359"},{"name":"Bear in Mind","hex":"#5b4a44"},{"name":"Bear Rug","hex":"#5a4943"},{"name":"Bearsuit","hex":"#7d756d"},{"name":"Beast Hide","hex":"#b08f69"},{"name":"Beastly Red","hex":"#680c08"},{"name":"Beasty Brown","hex":"#663300"},{"name":"Beat Around the Bush","hex":"#6e6a44"},{"name":"Beaten Copper","hex":"#73372d"},{"name":"Beaten Purple","hex":"#4e0550"},{"name":"Beaten Track","hex":"#d1be92"},{"name":"Beating Around the Bush","hex":"#448844"},{"name":"Beatnik","hex":"#5f8748"},{"name":"Beatrice","hex":"#bebad9"},{"name":"Beau Blue","hex":"#bcd4e6"},{"name":"Beau Monde","hex":"#7db39e"},{"name":"Beau Vert","hex":"#0c6064"},{"name":"Beaujolais","hex":"#80304c"},{"name":"Beaumont Brown","hex":"#92774c"},{"name":"Beauport Aubergine","hex":"#553f44"},{"name":"Beautiful Blue","hex":"#186db6"},{"name":"Beautiful Darkness","hex":"#686d70"},{"name":"Beautiful Dream","hex":"#b6c7e3"},{"name":"Beautiful Mint","hex":"#8da936"},{"name":"Beauty","hex":"#866b8d"},{"name":"Beauty and the Beach","hex":"#c99680"},{"name":"Beauty Bush","hex":"#ebb9b3"},{"name":"Beauty Patch","hex":"#834f44"},{"name":"Beauty Queen","hex":"#be5c87"},{"name":"Beauty Secret","hex":"#c79ea2"},{"name":"Beauty Spot","hex":"#604938"},{"name":"Beaver","hex":"#926f5b"},{"name":"Beaver Fur","hex":"#997867"},{"name":"Beaver Kit","hex":"#9f8170"},{"name":"Beaver Pelt","hex":"#60564c"},{"name":"Béchamel","hex":"#f4eee0"},{"name":"Becker Blue","hex":"#607879"},{"name":"Becker Gold","hex":"#7f7353"},{"name":"Beckett","hex":"#85a699"},{"name":"Becquerel","hex":"#4bec13"},{"name":"Bed of Roses","hex":"#b893ab"},{"name":"Bedazzled","hex":"#d3b9cc"},{"name":"Bedbox","hex":"#968775"},{"name":"Bedford Brown","hex":"#aa8880"},{"name":"Bedrock","hex":"#9e9d99"},{"name":"Bedtime Story","hex":"#e1b090"},{"name":"Bee","hex":"#f1ba55"},{"name":"Bee Cluster","hex":"#ffaa33"},{"name":"Bee Hall","hex":"#f2cc64"},{"name":"Bee Master","hex":"#735b3b"},{"name":"Bee Pollen","hex":"#ebca70"},{"name":"Bee Yellow","hex":"#feff32"},{"name":"Bee\'s Knees","hex":"#e8d9d2"},{"name":"Bee\'s Wax","hex":"#eabf86"},{"name":"Beech","hex":"#5b4f3b"},{"name":"Beech Brown","hex":"#574128"},{"name":"Beech Fern","hex":"#758067"},{"name":"Beech Nut","hex":"#d7b59a"},{"name":"Beechnut","hex":"#c2c18d"},{"name":"Beechwood","hex":"#6e5955"},{"name":"Beef Bourguignon","hex":"#b64701"},{"name":"Beef Hotpot","hex":"#a85d2e"},{"name":"Beef Jerky","hex":"#a25768"},{"name":"Beef Patties","hex":"#bb5533"},{"name":"Beehive","hex":"#e1b781"},{"name":"Beekeeper","hex":"#f6e491"},{"name":"Beer","hex":"#fcaa12"},{"name":"Beer Garden","hex":"#449933"},{"name":"Beer Glazed Bacon","hex":"#773311"},{"name":"Beeswax","hex":"#e9d7ab"},{"name":"Beeswax Candle","hex":"#bf7e41"},{"name":"Beeswing","hex":"#f5d297"},{"name":"Beet Red","hex":"#7e203f"},{"name":"Beetle","hex":"#55584c"},{"name":"Beetroot","hex":"#663f44"},{"name":"Beetroot Purple","hex":"#d33376"},{"name":"Beetroot Rice","hex":"#c58f9d"},{"name":"Beets","hex":"#736a86"},{"name":"Befitting","hex":"#96496d"},{"name":"Before the Storm","hex":"#4d6a77"},{"name":"Before Winter","hex":"#bd6f56"},{"name":"Beggar","hex":"#5a4d39"},{"name":"Begonia","hex":"#fa6e79"},{"name":"Begonia Pink","hex":"#ec9abe"},{"name":"Begonia Rose","hex":"#c3797f"},{"name":"Beguiling Blue","hex":"#5e6f8e"},{"name":"Beguiling Mauve","hex":"#afa7ac"},{"name":"Beige","hex":"#e6daa6"},{"name":"Beige Ganesh","hex":"#cfb095"},{"name":"Beige Green","hex":"#e0d8b0"},{"name":"Beige Intenso","hex":"#c5a88d"},{"name":"Beige Intuition","hex":"#987a5b"},{"name":"Beige Linen","hex":"#e2dac6"},{"name":"Beige Red","hex":"#de9408"},{"name":"Beige Royal","hex":"#cfc8b8"},{"name":"Beige Topaz","hex":"#ffc87c"},{"name":"Beijing Blue","hex":"#3e7daa"},{"name":"Beijing Moon","hex":"#a9a2a3"},{"name":"Bejewelled","hex":"#25a26f"},{"name":"Bel Air Blue","hex":"#819ac1"},{"name":"Bel Esprit","hex":"#9bbcc3"},{"name":"Belfast","hex":"#558d4f"},{"name":"Belgian Block","hex":"#9ba29e"},{"name":"Belgian Blonde","hex":"#f7efd0"},{"name":"Belgian Cream","hex":"#f9f1e2"},{"name":"Belgian Sweet","hex":"#8d7560"},{"name":"Belgian Waffle","hex":"#f3dfb6"},{"name":"Believable Buff","hex":"#dbc7a8"},{"name":"Belize","hex":"#7fd3d3"},{"name":"Belize Green","hex":"#b9c3b3"},{"name":"Bell Blue","hex":"#618b97"},{"name":"Bell Heather","hex":"#a475b1"},{"name":"Bell Tower","hex":"#dad0bb"},{"name":"Bella","hex":"#574057"},{"name":"Bella Green","hex":"#93c3b1"},{"name":"Bella Mia","hex":"#dac5bd"},{"name":"Bella Pink","hex":"#e08194"},{"name":"Bella Sera","hex":"#40465d"},{"name":"Bella Vista","hex":"#0b695b"},{"name":"Belladonna","hex":"#220011"},{"name":"Belladonna\'s Leaf","hex":"#adc3a7"},{"name":"Bellagio Fountains","hex":"#b7dff3"},{"name":"Belle of the Ball","hex":"#e3cbc0"},{"name":"Bellflower","hex":"#5d66aa"},{"name":"Bellflower Blue","hex":"#e1e9ef"},{"name":"Bellflower Violet","hex":"#b2a5b7"},{"name":"Bellini","hex":"#f4c9b1"},{"name":"Bellini Fizz","hex":"#f5c78e"},{"name":"Bells and Whistles Gold","hex":"#ede3a1"},{"name":"Belly Fire","hex":"#773b38"},{"name":"Belly Flop","hex":"#00817f"},{"name":"Belmont Green","hex":"#626a60"},{"name":"Beloved Pink","hex":"#e9d3d4"},{"name":"Beloved Sunflower","hex":"#ffba24"},{"name":"Below the Surface","hex":"#0a2f7c"},{"name":"Below Zero","hex":"#87cded"},{"name":"Beluga","hex":"#eff2f1"},{"name":"Belvedere Cream","hex":"#e3dbc3"},{"name":"Belyi White","hex":"#f0f1e1"},{"name":"Benevolence","hex":"#694977"},{"name":"Benevolent Pink","hex":"#dd1188"},{"name":"Bengal","hex":"#cc974d"},{"name":"Bengal Blue","hex":"#38738b"},{"name":"Bengal Grass","hex":"#8e773f"},{"name":"Bengala Red","hex":"#8f2e14"},{"name":"Bengara Red","hex":"#913225"},{"name":"Beni Shoga","hex":"#b85241"},{"name":"Benifuji","hex":"#bb7796"},{"name":"Benihi Red","hex":"#f35336"},{"name":"Benikakehana Purple","hex":"#5a4f74"},{"name":"Benikeshinezumi Purple","hex":"#44312e"},{"name":"Benimidori Purple","hex":"#78779b"},{"name":"Benitoite","hex":"#007baa"},{"name":"Beniukon Bronze","hex":"#fb8136"},{"name":"Benthic Black","hex":"#000011"},{"name":"Bento Box","hex":"#cc363c"},{"name":"Benzol Green","hex":"#00d973"},{"name":"Berber","hex":"#d8cfb6"},{"name":"Bergamot","hex":"#95c703"},{"name":"Bergamot Orange","hex":"#f59d59"},{"name":"Bering Sea","hex":"#4b596e"},{"name":"Bering Wave","hex":"#3d6d84"},{"name":"Berkeley Hills","hex":"#7e613f"},{"name":"Berkshire Lace","hex":"#f0e1cf"},{"name":"Berlin Blue","hex":"#5588cc"},{"name":"Bermuda","hex":"#1b7d8d"},{"name":"Bermuda Blue","hex":"#8cb1c2"},{"name":"Bermuda Grass","hex":"#a19f79"},{"name":"Bermuda Grey","hex":"#6b8ba2"},{"name":"Bermuda Onion","hex":"#9d5a8f"},{"name":"Bermuda Sand","hex":"#dacbbf"},{"name":"Bermuda Shell","hex":"#f9eee3"},{"name":"Bermuda Son","hex":"#f0e9be"},{"name":"Bermuda Triangle","hex":"#6f8c9f"},{"name":"Bermudagrass","hex":"#6bc271"},{"name":"Bermudan Blue","hex":"#386171"},{"name":"Bern Red","hex":"#e20909"},{"name":"Berries and Cream","hex":"#9e6a75"},{"name":"Berries n Cream","hex":"#f2b8ca"},{"name":"Berry","hex":"#990f4b"},{"name":"Berry Blackmail","hex":"#662277"},{"name":"Berry Bliss","hex":"#9e8295"},{"name":"Berry Blue","hex":"#32607a"},{"name":"Berry Blue Green","hex":"#264b56"},{"name":"Berry Blush","hex":"#b88591"},{"name":"Berry Boost","hex":"#bb5588"},{"name":"Berry Bright","hex":"#a08497"},{"name":"Berry Brown","hex":"#544f4c"},{"name":"Berry Burst","hex":"#ac72af"},{"name":"Berry Bush","hex":"#77424e"},{"name":"Berry Butter","hex":"#efcedc"},{"name":"Berry Chalk","hex":"#a6aebb"},{"name":"Berry Charm","hex":"#4f4763"},{"name":"Berry Cheesecake","hex":"#f8e3dd"},{"name":"Berry Chocolate","hex":"#3f000f"},{"name":"Berry Conserve","hex":"#765269"},{"name":"Berry Cream","hex":"#9a8ca2"},{"name":"Berry Crush","hex":"#aa6772"},{"name":"Berry Frappé","hex":"#b3a1c6"},{"name":"Berry Frost","hex":"#ebded7"},{"name":"Berry Good","hex":"#edc3c5"},{"name":"Berry Jam","hex":"#655883"},{"name":"Berry Light","hex":"#673b66"},{"name":"Berry Mix","hex":"#555a90"},{"name":"Berry Mojito","hex":"#b6caca"},{"name":"Berry Patch","hex":"#84395d"},{"name":"Berry Pie","hex":"#4f6d8e"},{"name":"Berry Popsicle","hex":"#d6a5cd"},{"name":"Berry Riche","hex":"#e5a2ab"},{"name":"Berry Rossi","hex":"#992244"},{"name":"Berry Smoothie","hex":"#895360"},{"name":"Berry Syrup","hex":"#64537c"},{"name":"Berry Wine","hex":"#624d55"},{"name":"Berrylicious","hex":"#d75e6c"},{"name":"Berta Blue","hex":"#45dcff"},{"name":"Beru","hex":"#bfe4d4"},{"name":"Berwick Berry","hex":"#7082a4"},{"name":"Beryl Black Green","hex":"#2b322d"},{"name":"Beryl Green","hex":"#bcbfa8"},{"name":"Beryl Pearl","hex":"#e2e3df"},{"name":"Beryl Red","hex":"#a16381"},{"name":"Beryllonite","hex":"#e9e5d7"},{"name":"Bespoke","hex":"#d4ba9d"},{"name":"Bessie","hex":"#685e5b"},{"name":"Best Beige","hex":"#c6b49c"},{"name":"Best Bronze","hex":"#5d513e"},{"name":"Best in Show","hex":"#b9b7bd"},{"name":"Best of Summer","hex":"#f7f2d9"},{"name":"Best of the Bunch","hex":"#bd5442"},{"name":"Bestial Blood","hex":"#cd343d"},{"name":"Bestial Brown","hex":"#6b3900"},{"name":"Bestial Red","hex":"#992211"},{"name":"Bestigor","hex":"#d38a57"},{"name":"Betalain Red","hex":"#7d655c"},{"name":"Betel Nut Dye","hex":"#352925"},{"name":"Bethany","hex":"#cadbbd"},{"name":"Bethlehem Red","hex":"#ee0022"},{"name":"Bethlehem Superstar","hex":"#eaeeda"},{"name":"Betsy","hex":"#73c9d9"},{"name":"Betta Fish","hex":"#3a6b66"},{"name":"Better Than Beige","hex":"#ebe2cb"},{"name":"Beurre Blanc","hex":"#ede1be"},{"name":"Beveled Glass","hex":"#7accb8"},{"name":"Beveled Grass","hex":"#75ac16"},{"name":"Bewitched","hex":"#6a393c"},{"name":"Bewitching","hex":"#75495e"},{"name":"Bewitching Blue","hex":"#bbd0e3"},{"name":"Beyond the Clouds","hex":"#aaeeff"},{"name":"Beyond the Pines","hex":"#688049"},{"name":"Beyond the Stars","hex":"#0a3251"},{"name":"Beyond the Wall","hex":"#d7e0eb"},{"name":"Bff","hex":"#dbb0d3"},{"name":"Bhūrā Brown","hex":"#947706"},{"name":"Białowieża Forest","hex":"#1c5022"},{"name":"Bianca","hex":"#f4efe0"},{"name":"Bianchi Green","hex":"#3dcfc2"},{"name":"Bicycle Yellow","hex":"#ffe58c"},{"name":"Bicyclette","hex":"#802c3a"},{"name":"Bidwell Blue","hex":"#a9b9b5"},{"name":"Bidwell Brown","hex":"#b19c8f"},{"name":"Biedermeier Blue","hex":"#507ca0"},{"name":"Biel-Tan Green","hex":"#1ba169"},{"name":"Bierwurst","hex":"#f0908d"},{"name":"Big Band","hex":"#afaba0"},{"name":"Big Bang Pink","hex":"#ff0099"},{"name":"Big Bus Yellow","hex":"#ffda8b"},{"name":"Big Chill","hex":"#7ecbe2"},{"name":"Big Cypress","hex":"#b98675"},{"name":"Big Daddy Blue","hex":"#5d6b75"},{"name":"Big Dip O’Ruby","hex":"#9c2542"},{"name":"Big Dipper","hex":"#41494b"},{"name":"Big Fish","hex":"#99a38e"},{"name":"Big Fish to Fry","hex":"#dadbe1"},{"name":"Big Foot Feet","hex":"#e88e5a"},{"name":"Big Horn Mountains","hex":"#b79e94"},{"name":"Big Ocean Wave","hex":"#34708f"},{"name":"Big Sky","hex":"#cde2de"},{"name":"Big Spender","hex":"#acddaf"},{"name":"Big Stone","hex":"#334046"},{"name":"Big Stone Beach","hex":"#886e54"},{"name":"Big Sur","hex":"#b3cadc"},{"name":"Big Sur Blue Jade","hex":"#3f6e8e"},{"name":"Big Surf","hex":"#96d0d1"},{"name":"Big Yellow Streak","hex":"#ffee22"},{"name":"Big Yellow Taxi","hex":"#ffff33"},{"name":"Bigfoot","hex":"#715145"},{"name":"Bighorn Sheep","hex":"#20120e"},{"name":"Bijou Blue","hex":"#4e5e7f"},{"name":"Bijou Red","hex":"#a33d3b"},{"name":"Bijoux Green","hex":"#676b55"},{"name":"Biking Red","hex":"#7b222a"},{"name":"Biking Trail","hex":"#c3c0b1"},{"name":"Bilbao","hex":"#3e8027"},{"name":"Bilberry","hex":"#71777e"},{"name":"Bile","hex":"#b5c306"},{"name":"Bilious Brown","hex":"#e39f08"},{"name":"Bilious Green","hex":"#a9d171"},{"name":"Billabong","hex":"#1b6f81"},{"name":"Billet","hex":"#ad7c35"},{"name":"Billiard","hex":"#00af9f"},{"name":"Billiard Ball","hex":"#276b40"},{"name":"Billiard Green","hex":"#305a4a"},{"name":"Billiard Room","hex":"#50846e"},{"name":"Billiard Table","hex":"#155843"},{"name":"Billiards Cloth","hex":"#01b44c"},{"name":"Billowing Clouds","hex":"#d8dee3"},{"name":"Billowing Sail","hex":"#d2e3e3"},{"name":"Billowing Smoke","hex":"#6e726a"},{"name":"Billowy","hex":"#c0c6bc"},{"name":"Billowy Breeze","hex":"#afc7cd"},{"name":"Billowy Clouds","hex":"#f6f0e9"},{"name":"Billowy Down","hex":"#eff0e9"},{"name":"Billycart Blue","hex":"#4c77a4"},{"name":"Biloba Flower","hex":"#ae99d2"},{"name":"Biloxi","hex":"#f4e4cd"},{"name":"Biloxi Blue","hex":"#0075b8"},{"name":"Biltmore Buff","hex":"#e3c9a1"},{"name":"Biltong","hex":"#410200"},{"name":"Bimini Blue","hex":"#007a91"},{"name":"Binary Star","hex":"#616767"},{"name":"Bindi Dot","hex":"#8b3439"},{"name":"Bindi Red","hex":"#b0003c"},{"name":"Bing Cherry Pie","hex":"#af4967"},{"name":"Binrouji Black","hex":"#433d3c"},{"name":"Bio Blue","hex":"#465f9e"},{"name":"Biogenic Sand","hex":"#ffefd5"},{"name":"Biohazard Suit","hex":"#fbfb4c"},{"name":"Biology Experiments","hex":"#91a135"},{"name":"Bioluminescence","hex":"#55eeff"},{"name":"Biopunk","hex":"#66ff55"},{"name":"BioShock","hex":"#889900"},{"name":"Biotic Grasp","hex":"#eeee44"},{"name":"Biotic Orb","hex":"#eedd55"},{"name":"Birch","hex":"#3f3726"},{"name":"Birch Beige","hex":"#d9c3a1"},{"name":"Birch Forest","hex":"#899a8b"},{"name":"Birch Leaf Green","hex":"#637e1d"},{"name":"Birch Strain","hex":"#dfb45f"},{"name":"Birch White","hex":"#f6eedf"},{"name":"Birchwood","hex":"#ccbeac"},{"name":"Birchy Woods","hex":"#806843"},{"name":"Bird Bath Blue","hex":"#cddfe7"},{"name":"Bird Blue","hex":"#7b929e"},{"name":"Bird Blue Grey","hex":"#7f92a0"},{"name":"Bird Flower","hex":"#d0c117"},{"name":"Bird Of Paradise","hex":"#0083a8"},{"name":"Bird\'s Child","hex":"#fff1cf"},{"name":"Bird\'s Egg Green","hex":"#aaccb9"},{"name":"Bird\'s Nest","hex":"#cfbb9b"},{"name":"Bird’s Eye","hex":"#b9030a"},{"name":"Birdhouse Brown","hex":"#6c483a"},{"name":"Birdie","hex":"#e9e424"},{"name":"Birdie Num Num","hex":"#89acda"},{"name":"Birdseed","hex":"#e2c28e"},{"name":"Birdseye","hex":"#ab823d"},{"name":"Birdseye Maple","hex":"#e4c495"},{"name":"Biro Blue","hex":"#2f3946"},{"name":"Birōdo Green","hex":"#224634"},{"name":"Birth of a Star","hex":"#fce9df"},{"name":"Birth of Venus","hex":"#f6ebc2"},{"name":"Birthday Cake","hex":"#e9d2cc"},{"name":"Birthday Candle","hex":"#cfa2ad"},{"name":"Birthday King","hex":"#9bdcb9"},{"name":"Birthday Suit","hex":"#e2c7b6"},{"name":"Birthstone","hex":"#79547a"},{"name":"Biscay","hex":"#2f3c53"},{"name":"Biscay Bay","hex":"#097988"},{"name":"Biscay Green","hex":"#55c6a9"},{"name":"Biscotti","hex":"#d8c3a7"},{"name":"Biscuit","hex":"#feedca"},{"name":"Biscuit Beige","hex":"#e6bfa6"},{"name":"Biscuit Cream","hex":"#f9ccb7"},{"name":"Biscuit Dough","hex":"#e8dbbd"},{"name":"Bishop Red","hex":"#c473a9"},{"name":"Bismarck","hex":"#486c7a"},{"name":"Bison","hex":"#6e4f3a"},{"name":"Bison Beige","hex":"#9f9180"},{"name":"Bison Brown","hex":"#584941"},{"name":"Bison Hide","hex":"#b5ac94"},{"name":"Bisque","hex":"#ffe4c4"},{"name":"Bisque Tan","hex":"#e5d2b0"},{"name":"Bistre","hex":"#3d2b1f"},{"name":"Bistre Brown","hex":"#967117"},{"name":"Bistro","hex":"#705950"},{"name":"Bistro Green","hex":"#395551"},{"name":"Bistro Pink","hex":"#e3b8b7"},{"name":"Bit of Berry","hex":"#dd5599"},{"name":"Bit of Blue","hex":"#d9e3e5"},{"name":"Bit of Heaven","hex":"#cad7de"},{"name":"Bit of Lime","hex":"#e1e5ac"},{"name":"Bit of Sugar","hex":"#f4f2ec"},{"name":"Bitcoin","hex":"#ffbb11"},{"name":"Bite My Tongue","hex":"#d47d72"},{"name":"Bite the Bullet","hex":"#ecebce"},{"name":"Bitter","hex":"#88896c"},{"name":"Bitter Briar","hex":"#8d7470"},{"name":"Bitter Chocolate","hex":"#4f2923"},{"name":"Bitter Clover Green","hex":"#769789"},{"name":"Bitter Dandelion","hex":"#6ecb3c"},{"name":"Bitter Lemon","hex":"#d2db32"},{"name":"Bitter Lime","hex":"#cfff00"},{"name":"Bitter Lime and Defeat","hex":"#31cd31"},{"name":"Bitter Liquorice","hex":"#262926"},{"name":"Bitter Melon","hex":"#cfd1b2"},{"name":"Bitter Orange","hex":"#d5762b"},{"name":"Bitter Sage","hex":"#97a18d"},{"name":"Bitter Violet","hex":"#856d9e"},{"name":"Bittersweet","hex":"#fea051"},{"name":"Bittersweet Chocolate","hex":"#4f2b17"},{"name":"Bittersweet Shimmer","hex":"#bf4f51"},{"name":"Bittersweet Stem","hex":"#cbb49a"},{"name":"Bizarre","hex":"#e7d2c8"},{"name":"Black","hex":"#000000"},{"name":"Black Bamboo","hex":"#5b5d53"},{"name":"Black Bay","hex":"#474a4e"},{"name":"Black Bean","hex":"#4e4b4a"},{"name":"Black Beauty","hex":"#23262b"},{"name":"Black Blueberry","hex":"#2f2f48"},{"name":"Black Boudoir","hex":"#454749"},{"name":"Black Box","hex":"#0f282f"},{"name":"Black Cat","hex":"#2e2f31"},{"name":"Black Chasm","hex":"#102c33"},{"name":"Black Cherry","hex":"#2c1620"},{"name":"Black Chestnut Oak","hex":"#252321"},{"name":"Black Chocolate","hex":"#441100"},{"name":"Black Coffee","hex":"#3e3231"},{"name":"Black Coral","hex":"#54626f"},{"name":"Black Dahlia","hex":"#4e434d"},{"name":"Black Diamond Apple","hex":"#8a779a"},{"name":"Black Dragon\'s Cauldron","hex":"#545562"},{"name":"Black Drop","hex":"#90abd9"},{"name":"Black Elder","hex":"#a66e7a"},{"name":"Black Elegance","hex":"#50484a"},{"name":"Black Emerald","hex":"#12221d"},{"name":"Black Evergreen","hex":"#45524f"},{"name":"Black Feather","hex":"#112222"},{"name":"Black Flame","hex":"#484b5a"},{"name":"Black Forest","hex":"#5e6354"},{"name":"Black Forest Blue","hex":"#29485a"},{"name":"Black Forest Green","hex":"#424740"},{"name":"Black Fox","hex":"#4f4842"},{"name":"Black Garnet","hex":"#4e4444"},{"name":"Black Glaze","hex":"#001111"},{"name":"Black Green","hex":"#384e49"},{"name":"Black Grey","hex":"#24272e"},{"name":"Black Halo","hex":"#201b20"},{"name":"Black Haze","hex":"#e0ded7"},{"name":"Black Headed Gull","hex":"#9c856c"},{"name":"Black Heath","hex":"#6d6150"},{"name":"Black Hills Gold","hex":"#c89180"},{"name":"Black Hole","hex":"#010203"},{"name":"Black Howl","hex":"#202030"},{"name":"Black Htun","hex":"#110033"},{"name":"Black Ice","hex":"#4d5051"},{"name":"Black Ink","hex":"#44413c"},{"name":"Black Iris","hex":"#2b3042"},{"name":"Black is Back","hex":"#0f1519"},{"name":"Black Is Beautiful","hex":"#552222"},{"name":"Black Jasmine Rice","hex":"#74563d"},{"name":"Black Kite","hex":"#351e1c"},{"name":"Black Knight","hex":"#010b13"},{"name":"Black Lacquer","hex":"#3f3e3e"},{"name":"Black Lead","hex":"#474c4d"},{"name":"Black Leather Jacket","hex":"#253529"},{"name":"Black Liquorice","hex":"#3a3b3b"},{"name":"Black Locust","hex":"#646763"},{"name":"Black Magic","hex":"#4f4554"},{"name":"Black Mana","hex":"#858585"},{"name":"Black Market","hex":"#222244"},{"name":"Black Marlin","hex":"#383740"},{"name":"Black Mesa","hex":"#222211"},{"name":"Black Metal","hex":"#060606"},{"name":"Black Mocha","hex":"#4b4743"},{"name":"Black Oak","hex":"#4e4f4e"},{"name":"Black of Night","hex":"#323639"},{"name":"Black Olive","hex":"#3b3c36"},{"name":"Black Onyx","hex":"#2a272c"},{"name":"Black Orchid","hex":"#525463"},{"name":"Black Out","hex":"#222222"},{"name":"Black Panther","hex":"#424242"},{"name":"Black Pearl","hex":"#1e272c"},{"name":"Black Pine Green","hex":"#33654a"},{"name":"Black Plum","hex":"#77606f"},{"name":"Black Pool","hex":"#4f5552"},{"name":"Black Powder","hex":"#34342c"},{"name":"Black Power","hex":"#654b37"},{"name":"Black Pudding","hex":"#a44a56"},{"name":"Black Queen","hex":"#694d27"},{"name":"Black Raspberry","hex":"#16110d"},{"name":"Black Ribbon","hex":"#484c51"},{"name":"Black River Falls","hex":"#343e54"},{"name":"Black Rock","hex":"#2c2d3c"},{"name":"Black Rooster","hex":"#331111"},{"name":"Black Rose","hex":"#532934"},{"name":"Black Russian","hex":"#24252b"},{"name":"Black Sabbath","hex":"#220022"},{"name":"Black Sable","hex":"#434b4d"},{"name":"Black Safflower","hex":"#302833"},{"name":"Black Sand","hex":"#5b4e4b"},{"name":"Black Sapphire","hex":"#434555"},{"name":"Black Shadows","hex":"#bfafb2"},{"name":"Black Sheep","hex":"#0f0d0d"},{"name":"Black Slug","hex":"#332211"},{"name":"Black Smoke","hex":"#3e3e3f"},{"name":"Black Soap","hex":"#19443c"},{"name":"Black Space","hex":"#545354"},{"name":"Black Spruce","hex":"#4c5752"},{"name":"Black Squeeze","hex":"#e5e6df"},{"name":"Black Stallion","hex":"#0e191c"},{"name":"Black Suede","hex":"#434342"},{"name":"Black Swan","hex":"#332200"},{"name":"Black Tie","hex":"#464647"},{"name":"Black Tortoise","hex":"#353235"},{"name":"Black Truffle","hex":"#463d3e"},{"name":"Black Turmeric","hex":"#2c4364"},{"name":"Black Velvet","hex":"#222233"},{"name":"Black Violet","hex":"#2b2c42"},{"name":"Black Walnut","hex":"#5e4f46"},{"name":"Black Wash","hex":"#0c0c0c"},{"name":"Black Water","hex":"#2e4846"},{"name":"Black White","hex":"#e5e4db"},{"name":"Blackadder","hex":"#292c2c"},{"name":"Blackberry","hex":"#43182f"},{"name":"Blackberry Black","hex":"#2e2848"},{"name":"Blackberry Burgundy","hex":"#4c3938"},{"name":"Blackberry Cobbler","hex":"#404d6a"},{"name":"Blackberry Cordial","hex":"#4f3357"},{"name":"Blackberry Cream","hex":"#d9d3da"},{"name":"Blackberry Deep Red","hex":"#633654"},{"name":"Blackberry Farm","hex":"#62506b"},{"name":"Blackberry Harvest","hex":"#504358"},{"name":"Blackberry Jam","hex":"#87657e"},{"name":"Blackberry Leaf Green","hex":"#507f6d"},{"name":"Blackberry Mocha","hex":"#a58885"},{"name":"Blackberry Pie","hex":"#64242e"},{"name":"Blackberry Sorbet","hex":"#c1a3b9"},{"name":"Blackberry Tart","hex":"#563342"},{"name":"Blackberry Tint","hex":"#8f5973"},{"name":"Blackberry Wine","hex":"#5c3c55"},{"name":"Blackberry Yogurt","hex":"#e5bddf"},{"name":"Blackbird","hex":"#3f444c"},{"name":"Blackbird\'s Egg","hex":"#fce7e4"},{"name":"Blackboard Green","hex":"#274c43"},{"name":"Blackcurrant","hex":"#2e183b"},{"name":"Blackcurrant Conserve","hex":"#52383d"},{"name":"Blackcurrant Elixir","hex":"#5c4f6a"},{"name":"Blackened Brown","hex":"#442200"},{"name":"Blackened Pearl","hex":"#504d53"},{"name":"Blackest Berry","hex":"#662266"},{"name":"Blackest Brown","hex":"#403330"},{"name":"Blackfire Earth","hex":"#7a5901"},{"name":"Blackheath","hex":"#49454b"},{"name":"Blackish Brown","hex":"#453b32"},{"name":"Blackish Green","hex":"#5d6161"},{"name":"Blackish Grey","hex":"#5b5c61"},{"name":"Blackjack","hex":"#51504d"},{"name":"Blacklist","hex":"#221133"},{"name":"Blackmail","hex":"#220066"},{"name":"Blackn\'t","hex":"#020f03"},{"name":"Blackout","hex":"#0e0702"},{"name":"Blacksmith Fire","hex":"#f7e856"},{"name":"Blackthorn Berry","hex":"#8470ff"},{"name":"Blackthorn Blue","hex":"#4c606b"},{"name":"Blackthorn Green","hex":"#739c69"},{"name":"Blackwater","hex":"#545663"},{"name":"Blackwater Park","hex":"#696268"},{"name":"Blackwood","hex":"#494e52"},{"name":"Blade Green","hex":"#6a9266"},{"name":"Bladed Grass","hex":"#758269"},{"name":"Bladerunner","hex":"#6a8561"},{"name":"Blair","hex":"#a1bde0"},{"name":"Blanc","hex":"#d9d0c2"},{"name":"Blanc Cassé","hex":"#f1eee2"},{"name":"Blanc De Blanc","hex":"#e4e7e4"},{"name":"Blanca Peak","hex":"#f8f9f4"},{"name":"Blanched","hex":"#f6dcd0"},{"name":"Blanched Almond","hex":"#ffebcd"},{"name":"Blanched Driftwood","hex":"#ccbeb6"},{"name":"Blanco","hex":"#ebeae5"},{"name":"Bland","hex":"#afa88b"},{"name":"Bland Celery","hex":"#74915f"},{"name":"Blank Canvas","hex":"#ffefd6"},{"name":"Blank Stare","hex":"#8b9cac"},{"name":"Blanka Green","hex":"#9cd33c"},{"name":"Blanket Brown","hex":"#9e8574"},{"name":"Blarney","hex":"#00c08e"},{"name":"Blarney Stone","hex":"#027944"},{"name":"Blasphemous Blue","hex":"#3356aa"},{"name":"Blast-Off Bronze","hex":"#a57164"},{"name":"Blasted Lands Rocks","hex":"#6c3550"},{"name":"Blaze","hex":"#fa8c4f"},{"name":"Blaze It Dark Magenta","hex":"#420420"},{"name":"Blaze Orange","hex":"#fe6700"},{"name":"Blazer","hex":"#b8524b"},{"name":"Blazing Autumn","hex":"#f3ad63"},{"name":"Blazing Bonfire","hex":"#ffa035"},{"name":"Blazing Dragonfruit","hex":"#ff0054"},{"name":"Blazing Orange","hex":"#ffa64f"},{"name":"Blazing Yellow","hex":"#fee715"},{"name":"Blazon Skies","hex":"#e35f1c"},{"name":"Bleach White","hex":"#ebe1ce"},{"name":"Bleached Almond","hex":"#f3ead5"},{"name":"Bleached Apricot","hex":"#fbcaad"},{"name":"Bleached Aqua","hex":"#bce3df"},{"name":"Bleached Bare","hex":"#d0c7c3"},{"name":"Bleached Bark","hex":"#8b7f78"},{"name":"Bleached Beige","hex":"#dfddd0"},{"name":"Bleached Bone","hex":"#efd9a8"},{"name":"Bleached Cedar","hex":"#2c2133"},{"name":"Bleached Coral","hex":"#ffd6d1"},{"name":"Bleached Denim","hex":"#6d76a1"},{"name":"Bleached Grey","hex":"#788878"},{"name":"Bleached Jade","hex":"#e2e6d1"},{"name":"Bleached Linen","hex":"#f3ece1"},{"name":"Bleached Maple","hex":"#c7a06c"},{"name":"Bleached Meadow","hex":"#eae5d5"},{"name":"Bleached Olive","hex":"#55bb88"},{"name":"Bleached Pebble","hex":"#d9d1ba"},{"name":"Bleached Sand","hex":"#d5c3aa"},{"name":"Bleached Shell","hex":"#f6e5da"},{"name":"Bleached Silk","hex":"#f3f3f2"},{"name":"Bleached Spruce","hex":"#bad7ae"},{"name":"Bleached Sunflower","hex":"#fbe8a8"},{"name":"Bleached Wheat","hex":"#ddd2a9"},{"name":"Bleached White","hex":"#dfe3e8"},{"name":"Bleaches","hex":"#c7c7c3"},{"name":"Bleeding Crimson","hex":"#9b1414"},{"name":"Bleeding Heart","hex":"#c02e4c"},{"name":"Blende Blue","hex":"#a9c4c4"},{"name":"Blended Fruit","hex":"#f8e3a4"},{"name":"Blended Light","hex":"#fffbe8"},{"name":"Blessed Blue","hex":"#4499cc"},{"name":"Bleu Ciel","hex":"#007ba1"},{"name":"Bleu De France","hex":"#318ce7"},{"name":"Bleu Nattier","hex":"#9cc2bf"},{"name":"Bleuchâtel Blue","hex":"#4488ff"},{"name":"Blind Date","hex":"#bcaea1"},{"name":"Blind Forest","hex":"#223300"},{"name":"Bling Bling","hex":"#eef0ce"},{"name":"Blinking Blue","hex":"#0033ff"},{"name":"Blinking Terminal","hex":"#66cc00"},{"name":"Bliss Blue","hex":"#7ac7e1"},{"name":"Blissful","hex":"#ddc4d4"},{"name":"Blissful Berry","hex":"#aa1188"},{"name":"Blissful Blue","hex":"#b2c8d8"},{"name":"Blissful Light","hex":"#e5d2dd"},{"name":"Blissful Meditation","hex":"#d5daee"},{"name":"Blissful Orange","hex":"#ffac39"},{"name":"Blissful Serenity","hex":"#eaeed8"},{"name":"Blissfully Mine","hex":"#dab6cd"},{"name":"Blister Pearl","hex":"#aaffee"},{"name":"Blistering Mars","hex":"#ff6c51"},{"name":"Blithe","hex":"#0099d1"},{"name":"Blithe Blue","hex":"#90bdbd"},{"name":"Blithe Mood","hex":"#c0c1b9"},{"name":"Blizzard","hex":"#e5ebed"},{"name":"Blizzard Blue","hex":"#a3e3ed"},{"name":"Blizzard Fog","hex":"#d6d8d1"},{"name":"Blizzy Blueberry","hex":"#1151b4"},{"name":"Blobfish","hex":"#ffc1cc"},{"name":"Blockchain Gold","hex":"#e8bc50"},{"name":"Bloedworst","hex":"#560319"},{"name":"Blond","hex":"#faf0be"},{"name":"Blonde","hex":"#dcbd92"},{"name":"Blonde Beauty","hex":"#f2efcd"},{"name":"Blonde Curl","hex":"#efe2c5"},{"name":"Blonde Girl","hex":"#edc558"},{"name":"Blonde Lace","hex":"#d6b194"},{"name":"Blonde Shell","hex":"#f6edcd"},{"name":"Blonde Wood","hex":"#ab7741"},{"name":"Blonde Wool","hex":"#e5d0b1"},{"name":"Blood","hex":"#770001"},{"name":"Blood Brother","hex":"#770011"},{"name":"Blood Burst","hex":"#ff474c"},{"name":"Blood Donor","hex":"#ea1822"},{"name":"Blood God","hex":"#67080b"},{"name":"Blood Kiss","hex":"#c30b0a"},{"name":"Blood Mahogany","hex":"#543839"},{"name":"Blood Moon","hex":"#d83432"},{"name":"Blood Omen","hex":"#8a0303"},{"name":"Blood Orange","hex":"#d1001c"},{"name":"Blood Orange Juice","hex":"#fe4b03"},{"name":"Blood Organ","hex":"#630f0f"},{"name":"Blood Pact","hex":"#771111"},{"name":"Blood Red","hex":"#980002"},{"name":"Blood Rose","hex":"#73404d"},{"name":"Blood Rush","hex":"#aa2222"},{"name":"Blood Thorn","hex":"#b03060"},{"name":"Bloodhound","hex":"#bb5511"},{"name":"Bloodletter","hex":"#e97451"},{"name":"Bloodline","hex":"#882200"},{"name":"Bloodmyst Isle","hex":"#f02723"},{"name":"Bloodstain","hex":"#772200"},{"name":"Bloodstone","hex":"#413431"},{"name":"Bloodthirsty","hex":"#880011"},{"name":"Bloodthirsty Beige","hex":"#f8d7d0"},{"name":"Bloodthirsty Lips","hex":"#c6101e"},{"name":"Bloodthirsty Vampire","hex":"#9b0503"},{"name":"Bloodthirsty Warlock","hex":"#ec1837"},{"name":"Bloodtracker Brown","hex":"#703f00"},{"name":"Bloody Mary","hex":"#ba0105"},{"name":"Bloody Periphylla","hex":"#aa1144"},{"name":"Bloody Pico-8","hex":"#ff004d"},{"name":"Bloody Red","hex":"#ca1f1b"},{"name":"Bloody Rust","hex":"#da2c43"},{"name":"Bloody Salmon","hex":"#cc4433"},{"name":"Bloom","hex":"#ffaf75"},{"name":"Blooming Aster","hex":"#d7e2ee"},{"name":"Blooming Dahlia","hex":"#e77f71"},{"name":"Blooming Lilac","hex":"#ba93af"},{"name":"Blooming Perfect","hex":"#d89696"},{"name":"Blooming Wisteria","hex":"#88777e"},{"name":"Bloomsberry","hex":"#a598c4"},{"name":"Blossom","hex":"#fee9d8"},{"name":"Blossom Blue","hex":"#aaccee"},{"name":"Blossom Mauve","hex":"#a3a7cc"},{"name":"Blossom Pink","hex":"#e6d5ce"},{"name":"Blossom Powder","hex":"#c3b3b9"},{"name":"Blossom Time","hex":"#e5d2c9"},{"name":"Blossom Tint","hex":"#fbd6ca"},{"name":"Blossom Tree","hex":"#ffc9db"},{"name":"Blossom White","hex":"#f2eee4"},{"name":"Blossom Yellow","hex":"#e1c77d"},{"name":"Blossoming Dynasty","hex":"#de5346"},{"name":"Blossoms in Spring","hex":"#e79acb"},{"name":"Blouson Blue","hex":"#67b7c6"},{"name":"Blowing Kisses","hex":"#f6dee0"},{"name":"Blowout","hex":"#658499"},{"name":"Blue","hex":"#0000ff"},{"name":"Blue Accolade","hex":"#25415d"},{"name":"Blue Agave","hex":"#b1c6c7"},{"name":"Blue Alps","hex":"#89a3ae"},{"name":"Blue Android Base","hex":"#5a79ba"},{"name":"Blue Angel","hex":"#0022dd"},{"name":"Blue Angels Yellow","hex":"#f8b800"},{"name":"Blue Angora","hex":"#a7cfcb"},{"name":"Blue Antarctic","hex":"#4b789b"},{"name":"Blue Anthracite","hex":"#555e64"},{"name":"Blue Arc","hex":"#0085a1"},{"name":"Blue Ash","hex":"#414654"},{"name":"Blue Ashes","hex":"#406482"},{"name":"Blue Aster","hex":"#007ec7"},{"name":"Blue Astro","hex":"#50a7d9"},{"name":"Blue Atoll","hex":"#00b3e1"},{"name":"Blue Aura","hex":"#6c7386"},{"name":"Blue Azure","hex":"#4682bf"},{"name":"Blue Ballad","hex":"#7498bd"},{"name":"Blue Ballerina","hex":"#b4c7db"},{"name":"Blue Ballet","hex":"#576b6b"},{"name":"Blue Bauble","hex":"#abdee3"},{"name":"Blue Bay","hex":"#619ad6"},{"name":"Blue Bayberry","hex":"#2d5360"},{"name":"Blue Bayou","hex":"#bec4d3"},{"name":"Blue Bazaar","hex":"#017cb8"},{"name":"Blue Beads","hex":"#5a809e"},{"name":"Blue Beauty","hex":"#7498bf"},{"name":"Blue Beetle","hex":"#220099"},{"name":"Blue Bell","hex":"#88afd3"},{"name":"Blue Beret","hex":"#40638e"},{"name":"Blue Beyond","hex":"#91b8d9"},{"name":"Blue Bikini","hex":"#00bbee"},{"name":"Blue Bird Day","hex":"#237fac"},{"name":"Blue Black Crayfish","hex":"#52593b"},{"name":"Blue Blood","hex":"#6b7f81"},{"name":"Blue Blouse","hex":"#94a4b9"},{"name":"Blue Blue","hex":"#2242c7"},{"name":"Blue Blush","hex":"#cbd1cf"},{"name":"Blue Boater","hex":"#6181a3"},{"name":"Blue Bobbin","hex":"#52b4ca"},{"name":"Blue Bolt","hex":"#00b9fb"},{"name":"Blue Bonnet","hex":"#335599"},{"name":"Blue Booties","hex":"#c8ddee"},{"name":"Blue Bottle","hex":"#394e65"},{"name":"Blue Bouquet","hex":"#0033ee"},{"name":"Blue Bows","hex":"#a4c3d7"},{"name":"Blue Brocade","hex":"#70b8d0"},{"name":"Blue Bubble","hex":"#a6d7eb"},{"name":"Blue Buzz","hex":"#a1a2bd"},{"name":"Blue By You","hex":"#a0b7ba"},{"name":"Blue Calico","hex":"#a5cde1"},{"name":"Blue Calypso","hex":"#55a7b6"},{"name":"Blue Cardinal Flower","hex":"#2f36ba"},{"name":"Blue Carpenter Bee","hex":"#9cd0e4"},{"name":"Blue Cascade","hex":"#7b9eb0"},{"name":"Blue Catch","hex":"#41788a"},{"name":"Blue Chaise","hex":"#4b8ca9"},{"name":"Blue Chalk","hex":"#94c0cc"},{"name":"Blue Chamber","hex":"#5671a7"},{"name":"Blue Chaos","hex":"#5599ff"},{"name":"Blue Charcoal","hex":"#262b2f"},{"name":"Blue Charm","hex":"#82c2db"},{"name":"Blue Chill","hex":"#408f90"},{"name":"Blue Chip","hex":"#1d5699"},{"name":"Blue Chrysocolla","hex":"#77b7d0"},{"name":"Blue Clay","hex":"#6b9194"},{"name":"Blue Click","hex":"#a7d8e8"},{"name":"Blue Cloud","hex":"#627188"},{"name":"Blue Cola","hex":"#0088dc"},{"name":"Blue Copper Ore","hex":"#4411dd"},{"name":"Blue Coral","hex":"#1d5a6e"},{"name":"Blue Crab Escape","hex":"#9ebdd6"},{"name":"Blue Cruise","hex":"#6591a8"},{"name":"Blue Crystal Landscape","hex":"#6febe3"},{"name":"Blue Cuddle","hex":"#7eb4d1"},{"name":"Blue Cue","hex":"#84a5dc"},{"name":"Blue Curacao","hex":"#32becc"},{"name":"Blue Cypress","hex":"#cbdbd7"},{"name":"Blue Dacnis","hex":"#44ddee"},{"name":"Blue Dahlia","hex":"#415e9c"},{"name":"Blue Dam","hex":"#a2c6d3"},{"name":"Blue Damselfly","hex":"#2fa1da"},{"name":"Blue Danube","hex":"#0094bb"},{"name":"Blue Darknut","hex":"#0078f8"},{"name":"Blue Dart","hex":"#518fd1"},{"name":"Blue Dart Frog","hex":"#3a7a9b"},{"name":"Blue Dazzle","hex":"#668db7"},{"name":"Blue Depression","hex":"#4428bc"},{"name":"Blue Depths","hex":"#2c3a64"},{"name":"Blue Diamond","hex":"#0b67be"},{"name":"Blue Dianne","hex":"#35514f"},{"name":"Blue Dolphin","hex":"#bcc5cf"},{"name":"Blue Dove","hex":"#76799e"},{"name":"Blue Dude","hex":"#4a5c94"},{"name":"Blue Dusk","hex":"#8c959d"},{"name":"Blue Earth","hex":"#375673"},{"name":"Blue Echo","hex":"#8dbbc9"},{"name":"Blue Edge","hex":"#035e7b"},{"name":"Blue Effervescence","hex":"#97d5ea"},{"name":"Blue Electress","hex":"#6d9fd1"},{"name":"Blue Elemental","hex":"#5588ee"},{"name":"Blue Emerald","hex":"#0f5a5e"},{"name":"Blue Emulsion","hex":"#d1edef"},{"name":"Blue Enchantment","hex":"#0d6376"},{"name":"Blue Estate","hex":"#384883"},{"name":"Blue et une Nuit","hex":"#0652ff"},{"name":"Blue Expanse","hex":"#253f74"},{"name":"Blue Exult","hex":"#2b2f43"},{"name":"Blue Eyed Boy","hex":"#87bde3"},{"name":"Blue Fantastic","hex":"#2c3b4d"},{"name":"Blue Feather","hex":"#aed9ec"},{"name":"Blue Fin","hex":"#577fae"},{"name":"Blue Fir","hex":"#51645f"},{"name":"Blue Fire","hex":"#00aadd"},{"name":"Blue Fjord","hex":"#628daa"},{"name":"Blue Flag","hex":"#3b506f"},{"name":"Blue Flame","hex":"#005e88"},{"name":"Blue Flax","hex":"#ddebed"},{"name":"Blue Flower","hex":"#c8d2cd"},{"name":"Blue Fog","hex":"#9babbb"},{"name":"Blue Fox","hex":"#acb0a9"},{"name":"Blue Frosting","hex":"#86d2c1"},{"name":"Blue Funk","hex":"#2d4470"},{"name":"Blue Garter","hex":"#a2b8ce"},{"name":"Blue Gem","hex":"#4b3c8e"},{"name":"Blue Genie","hex":"#6666ff"},{"name":"Blue Glass","hex":"#b8dcdc"},{"name":"Blue Glaze","hex":"#56597c"},{"name":"Blue Glint","hex":"#92c6d7"},{"name":"Blue Glow","hex":"#b2d4dd"},{"name":"Blue Gossamer","hex":"#cdd7df"},{"name":"Blue Gourami","hex":"#69a2d5"},{"name":"Blue Granite","hex":"#76798d"},{"name":"Blue Graphite","hex":"#3a383f"},{"name":"Blue Grass","hex":"#007a7c"},{"name":"Blue Green","hex":"#137e6d"},{"name":"Blue Green Gem","hex":"#7ccbc5"},{"name":"Blue Green Rules","hex":"#d8eeed"},{"name":"Blue Green Scene","hex":"#56b78f"},{"name":"Blue Grey","hex":"#758da3"},{"name":"Blue Grotto","hex":"#50a2ca"},{"name":"Blue Grouse","hex":"#9abcdc"},{"name":"Blue Haze","hex":"#bdbace"},{"name":"Blue Heath Butterfly","hex":"#5566ff"},{"name":"Blue Heather","hex":"#aebbc1"},{"name":"Blue Heaven","hex":"#5b7e98"},{"name":"Blue Heeler","hex":"#939cab"},{"name":"Blue Heist","hex":"#006384"},{"name":"Blue Hepatica","hex":"#6666ee"},{"name":"Blue Heron","hex":"#939ec5"},{"name":"Blue Highlight","hex":"#324a8b"},{"name":"Blue Hijab","hex":"#d0eefb"},{"name":"Blue Hill","hex":"#1e454d"},{"name":"Blue Horizon","hex":"#54698b"},{"name":"Blue Horror","hex":"#a2bad2"},{"name":"Blue Hosta","hex":"#2a6f73"},{"name":"Blue Hour","hex":"#0034ab"},{"name":"Blue Hue","hex":"#394d60"},{"name":"Blue Hyacinth","hex":"#8394c5"},{"name":"Blue Hydrangea","hex":"#bbc3dd"},{"name":"Blue Ice","hex":"#737d9d"},{"name":"Blue Iguana","hex":"#539ccc"},{"name":"Blue Indigo","hex":"#535a7c"},{"name":"Blue Insignia","hex":"#566977"},{"name":"Blue Intrigue","hex":"#7f809c"},{"name":"Blue Iolite","hex":"#587ebe"},{"name":"Blue Iris","hex":"#6264a6"},{"name":"Blue Island","hex":"#22aaaa"},{"name":"Blue Jacket","hex":"#597193"},{"name":"Blue Jasmine","hex":"#828596"},{"name":"Blue Jay","hex":"#5588dd"},{"name":"Blue Jeans","hex":"#5dadec"},{"name":"Blue Jewel","hex":"#465383"},{"name":"Blue Karma","hex":"#bce6e8"},{"name":"Blue Kelp","hex":"#1d7881"},{"name":"Blue Lagoon","hex":"#00626f"},{"name":"Blue Lava","hex":"#2e5169"},{"name":"Blue League","hex":"#006284"},{"name":"Blue Lechery","hex":"#779ecb"},{"name":"Blue Leviathan","hex":"#032a62"},{"name":"Blue Light","hex":"#acdfdd"},{"name":"Blue Limewash","hex":"#7fcce2"},{"name":"Blue Linen","hex":"#5a5e6a"},{"name":"Blue Lips","hex":"#a6bce2"},{"name":"Blue Lobelia","hex":"#28314d"},{"name":"Blue Lobster","hex":"#0055aa"},{"name":"Blue Loneliness","hex":"#486d83"},{"name":"Blue Lullaby","hex":"#c8d7d2"},{"name":"Blue Lust","hex":"#012389"},{"name":"Blue Luxury","hex":"#007593"},{"name":"Blue Magenta","hex":"#5f34e7"},{"name":"Blue Magenta Violet","hex":"#553592"},{"name":"Blue Mana","hex":"#68c2f5"},{"name":"Blue Marble","hex":"#6594bc"},{"name":"Blue Marguerite","hex":"#6a5bb1"},{"name":"Blue Martina","hex":"#1fcecb"},{"name":"Blue Martini","hex":"#52b4d3"},{"name":"Blue Me Away","hex":"#c9dce7"},{"name":"Blue Mediterranean","hex":"#1e7e9a"},{"name":"Blue Mercury","hex":"#67a6ac"},{"name":"Blue Meridian","hex":"#014c76"},{"name":"Blue Metal","hex":"#5a6370"},{"name":"Blue Mirage","hex":"#5c6d7c"},{"name":"Blue Mist","hex":"#5bacc3"},{"name":"Blue Monday","hex":"#637983"},{"name":"Blue Mood","hex":"#7a808d"},{"name":"Blue Moon","hex":"#3992a8"},{"name":"Blue Moon Bay","hex":"#588496"},{"name":"Blue Mosque","hex":"#21426b"},{"name":"Blue Mountain","hex":"#759dbe"},{"name":"Blue Nebula","hex":"#1199ff"},{"name":"Blue Nights","hex":"#414657"},{"name":"Blue Nile","hex":"#779fb9"},{"name":"Blue Nuance","hex":"#d2dde0"},{"name":"Blue Nude","hex":"#29518c"},{"name":"Blue Oar","hex":"#647e9c"},{"name":"Blue Oasis","hex":"#296d93"},{"name":"Blue Oblivion","hex":"#26428b"},{"name":"Blue Ocean","hex":"#00729e"},{"name":"Blue Odyssey","hex":"#4f6997"},{"name":"Blue Olympus","hex":"#015193"},{"name":"Blue Opal","hex":"#124168"},{"name":"Blue Overdose","hex":"#0020ef"},{"name":"Blue Oyster Cult","hex":"#5577ee"},{"name":"Blue Paisley","hex":"#2282a8"},{"name":"Blue Palisade","hex":"#01546d"},{"name":"Blue Paradise","hex":"#5095c3"},{"name":"Blue Parlor","hex":"#85abdb"},{"name":"Blue Party Parrot","hex":"#8080ff"},{"name":"Blue Pearl","hex":"#c5d9e3"},{"name":"Blue Pencil","hex":"#2200ff"},{"name":"Blue Perennial","hex":"#bcd7df"},{"name":"Blue Period","hex":"#075158"},{"name":"Blue Persia","hex":"#5b92ac"},{"name":"Blue Phlox","hex":"#d2e6e8"},{"name":"Blue Pink","hex":"#b5a3c5"},{"name":"Blue Planet","hex":"#545e6a"},{"name":"Blue Plate","hex":"#5b7a9c"},{"name":"Blue Plaza","hex":"#30363c"},{"name":"Blue Pointer","hex":"#95b9d6"},{"name":"Blue Pot","hex":"#a1b1c2"},{"name":"Blue Potato","hex":"#64617b"},{"name":"Blue Prince","hex":"#6a808f"},{"name":"Blue Promise","hex":"#729cc2"},{"name":"Blue Purple","hex":"#5729ce"},{"name":"Blue Quarry","hex":"#43505e"},{"name":"Blue Quartz","hex":"#335287"},{"name":"Blue Racer","hex":"#4ba4a9"},{"name":"Blue Radiance","hex":"#58cfd4"},{"name":"Blue Ranger","hex":"#00177d"},{"name":"Blue Raspberry","hex":"#0cbfe9"},{"name":"Blue Raspberry Seed","hex":"#3aa2c6"},{"name":"Blue Reflection","hex":"#ccd7e1"},{"name":"Blue Refrain","hex":"#b0d8e7"},{"name":"Blue Regal","hex":"#303048"},{"name":"Blue Regatta","hex":"#376298"},{"name":"Blue Regent","hex":"#285991"},{"name":"Blue Review","hex":"#4e5878"},{"name":"Blue Rhapsody","hex":"#3d4655"},{"name":"Blue Ribbon","hex":"#0066ff"},{"name":"Blue Ribbon Beauty","hex":"#3e6490"},{"name":"Blue Rice","hex":"#b3d9f3"},{"name":"Blue Rinse","hex":"#b7bdc6"},{"name":"Blue Romance","hex":"#d8f0d2"},{"name":"Blue Rose","hex":"#292d74"},{"name":"Blue Royale","hex":"#29217a"},{"name":"Blue Ruin","hex":"#0066dd"},{"name":"Blue Sabre","hex":"#575f6a"},{"name":"Blue Sage","hex":"#57747a"},{"name":"Blue Sail","hex":"#24549a"},{"name":"Blue Sapphire","hex":"#126180"},{"name":"Blue Sari","hex":"#666a76"},{"name":"Blue Sarong","hex":"#9ad6e8"},{"name":"Blue Sash","hex":"#494d58"},{"name":"Blue Satin","hex":"#9eb6d0"},{"name":"Blue Screen of Death","hex":"#0033bb"},{"name":"Blue Sentinel","hex":"#546e77"},{"name":"Blue Shade Wash","hex":"#293f54"},{"name":"Blue Shadow","hex":"#758ca4"},{"name":"Blue Shale","hex":"#b9cacc"},{"name":"Blue Shamrock","hex":"#bacbc4"},{"name":"Blue Shell","hex":"#9bb3bc"},{"name":"Blue Shimmer","hex":"#b3dae2"},{"name":"Blue Shoal","hex":"#6b8c93"},{"name":"Blue Shutters","hex":"#93bde7"},{"name":"Blue Silk","hex":"#d0dce8"},{"name":"Blue Skies Today","hex":"#95afdc"},{"name":"Blue Slate","hex":"#5a5f68"},{"name":"Blue Slushie","hex":"#008793"},{"name":"Blue Smart","hex":"#5786b4"},{"name":"Blue Smoke","hex":"#d7e0e2"},{"name":"Blue Sonki","hex":"#4a87cb"},{"name":"Blue Sou\'wester","hex":"#404956"},{"name":"Blue Sparkle","hex":"#0077ff"},{"name":"Blue Spell","hex":"#3b5c6c"},{"name":"Blue Splash","hex":"#2e85b1"},{"name":"Blue Spruce","hex":"#adc5c9"},{"name":"Blue Square","hex":"#508a9a"},{"name":"Blue Steel","hex":"#535a61"},{"name":"Blue Stone","hex":"#577284"},{"name":"Blue Streak","hex":"#2266bb"},{"name":"Blue Stream","hex":"#95cdd8"},{"name":"Blue Suede","hex":"#687b92"},{"name":"Blue Suede Shoes","hex":"#484b62"},{"name":"Blue Surf","hex":"#829d99"},{"name":"Blue Syzygy","hex":"#1b4556"},{"name":"Blue Tang","hex":"#2a4b6e"},{"name":"Blue Tapestry","hex":"#475c62"},{"name":"Blue Team Spirit","hex":"#5885a2"},{"name":"Blue Thistle","hex":"#adc0d6"},{"name":"Blue Tint","hex":"#9fd9d7"},{"name":"Blue Titmouse","hex":"#4466ff"},{"name":"Blue To You","hex":"#babfc5"},{"name":"Blue Tone Ink","hex":"#2b4057"},{"name":"Blue Topaz","hex":"#65aece"},{"name":"Blue Torus","hex":"#042993"},{"name":"Blue Tourmaline","hex":"#4997d0"},{"name":"Blue Tribute","hex":"#a9b8c8"},{"name":"Blue Triumph","hex":"#4376ab"},{"name":"Blue Trust","hex":"#120a8f"},{"name":"Blue Tulip","hex":"#5c4671"},{"name":"Blue Tuna","hex":"#6f95c1"},{"name":"Blue Turquoise","hex":"#50abae"},{"name":"Blue Vacation","hex":"#1e7eae"},{"name":"Blue Vault","hex":"#4e83bd"},{"name":"Blue Veil","hex":"#aecbe5"},{"name":"Blue Velvet","hex":"#0d6183"},{"name":"Blue Venus","hex":"#397c80"},{"name":"Blue Violet","hex":"#4e32b2"},{"name":"Blue Vortex","hex":"#3d4457"},{"name":"Blue Whale","hex":"#1e3442"},{"name":"Blue Willow","hex":"#a8bbba"},{"name":"Blue Wing Teal","hex":"#2e4556"},{"name":"Blue Winged Teal","hex":"#00827c"},{"name":"Blue With A Hint Of Purple","hex":"#533cc6"},{"name":"Blue Wonder","hex":"#404664"},{"name":"Blue Yonder","hex":"#5a77a8"},{"name":"Blue Zephyr","hex":"#5b6676"},{"name":"Blue Zodiac","hex":"#3c4354"},{"name":"Blue-Black","hex":"#24313d"},{"name":"Blue-Collar Worker","hex":"#005f7a"},{"name":"Blue-Eyed Boy","hex":"#2277cc"},{"name":"Bluealicious","hex":"#0000dd"},{"name":"Bluebeard","hex":"#abb5c4"},{"name":"Bluebell","hex":"#333399"},{"name":"Bluebell Frost","hex":"#9999cc"},{"name":"Blueberry","hex":"#464196"},{"name":"Blueberry Blush","hex":"#836268"},{"name":"Blueberry Buckle","hex":"#8c99b3"},{"name":"Blueberry Dream","hex":"#586e84"},{"name":"Blueberry Glaze","hex":"#cc66dd"},{"name":"Blueberry Lemonade","hex":"#d01343"},{"name":"Blueberry Mist","hex":"#cbccdf"},{"name":"Blueberry Muffin","hex":"#5588ab"},{"name":"Blueberry Patch","hex":"#627099"},{"name":"Blueberry Pie","hex":"#314d67"},{"name":"Blueberry Popover","hex":"#5488c0"},{"name":"Blueberry Soda","hex":"#8290a6"},{"name":"Blueberry Soft Blue","hex":"#5e96c3"},{"name":"Blueberry Tart","hex":"#3f4050"},{"name":"Blueberry Twist","hex":"#24547d"},{"name":"Blueberry Whip","hex":"#d1d4db"},{"name":"Bluebird","hex":"#00a9b8"},{"name":"Bluebird Feather","hex":"#6f9db3"},{"name":"Bluebird\'s Belly","hex":"#7395b8"},{"name":"Blueblood","hex":"#015086"},{"name":"Bluebonnet","hex":"#1c1cf0"},{"name":"Bluebonnet Frost","hex":"#4d6eb0"},{"name":"Bluebottle","hex":"#8ecfe8"},{"name":"Bluebound","hex":"#4f9297"},{"name":"Bluebrite","hex":"#6abcda"},{"name":"Bluejay","hex":"#188ab6"},{"name":"Blueprint","hex":"#35637c"},{"name":"Bluerocratic","hex":"#1f66ff"},{"name":"Blues","hex":"#296a9d"},{"name":"Blues White Shoes","hex":"#99badd"},{"name":"Bluestone Path","hex":"#6081a2"},{"name":"Bluesy Note","hex":"#7c9ab5"},{"name":"Bluetiful","hex":"#3c69e7"},{"name":"Bluette","hex":"#9ebed8"},{"name":"Bluewash","hex":"#e2e6e0"},{"name":"Bluey","hex":"#375978"},{"name":"Bluff Stone","hex":"#d2bd9e"},{"name":"Bluish","hex":"#2976bb"},{"name":"Bluish Black","hex":"#413f44"},{"name":"Bluish Green","hex":"#10a674"},{"name":"Bluish Grey","hex":"#748b97"},{"name":"Bluish Lilac Purple","hex":"#d0d5d3"},{"name":"Bluish Purple","hex":"#703be7"},{"name":"Bluish Purple Anemone","hex":"#6666bb"},{"name":"Bluish Water","hex":"#89cfdb"},{"name":"Blumine","hex":"#305c71"},{"name":"Blunt","hex":"#b5bbc7"},{"name":"Blunt Violet","hex":"#8d6c7a"},{"name":"Blurple","hex":"#5539cc"},{"name":"Blush","hex":"#f29e8e"},{"name":"Blush Beige","hex":"#edd5c7"},{"name":"Blush Bomb","hex":"#dd99aa"},{"name":"Blush d\'Amour","hex":"#de5d83"},{"name":"Blush Essence","hex":"#cc88dd"},{"name":"Blush Kiss","hex":"#eabcc0"},{"name":"Blush Mint","hex":"#d9e6e0"},{"name":"Blush Pink","hex":"#ff6fff"},{"name":"Blush Rush","hex":"#f0bcbe"},{"name":"Blush Sand","hex":"#e2e0d8"},{"name":"Blush Sky","hex":"#dee1ed"},{"name":"Blush Tint","hex":"#f4e1e6"},{"name":"Blushed Bombshell","hex":"#ee88cc"},{"name":"Blushed Cotton","hex":"#f0e0d2"},{"name":"Blushed Velvet","hex":"#dec5d3"},{"name":"Blushing","hex":"#f0d1c3"},{"name":"Blushing Apricot","hex":"#fbbca7"},{"name":"Blushing Bride","hex":"#eedad1"},{"name":"Blushing Bud","hex":"#dd9999"},{"name":"Blushing Cherub","hex":"#ffcdaf"},{"name":"Blushing Cinnamon","hex":"#ffbf99"},{"name":"Blushing Coconut","hex":"#ebd5ca"},{"name":"Blushing Peach","hex":"#ffd79f"},{"name":"Blushing Rose","hex":"#e09b81"},{"name":"Blushing Senorita","hex":"#f3cacb"},{"name":"Blushing Tulip","hex":"#e3a1b8"},{"name":"Bluster Blue","hex":"#4a5a6f"},{"name":"Blustering Blue","hex":"#4411ff"},{"name":"Blustery Day","hex":"#d6dfe7"},{"name":"Blustery Sky","hex":"#6f848c"},{"name":"Blustery Wind","hex":"#b6c5c1"},{"name":"Bnei Brak Bay","hex":"#1d5bd6"},{"name":"Boa","hex":"#7f7755"},{"name":"Board & Batten","hex":"#ede7d5"},{"name":"Boardman","hex":"#757760"},{"name":"Boat Anchor","hex":"#6c6b6a"},{"name":"Boat Blue","hex":"#2d5384"},{"name":"Boat House","hex":"#4e89be"},{"name":"Boat Orchid","hex":"#c0448f"},{"name":"Boathouse","hex":"#577190"},{"name":"Boating Green","hex":"#087170"},{"name":"Boatswain","hex":"#243256"},{"name":"Bobby Blue","hex":"#97c5da"},{"name":"Bobcat Whiskers","hex":"#eadfd0"},{"name":"Boboli Gardens","hex":"#22bb11"},{"name":"Bock","hex":"#5d341a"},{"name":"Bockwurst","hex":"#df8f67"},{"name":"Bodacious","hex":"#b2619d"},{"name":"Bodega Bay","hex":"#5e81c1"},{"name":"Bodhi Tree","hex":"#b09870"},{"name":"Boeing Blue","hex":"#3d4652"},{"name":"Boerewors","hex":"#973443"},{"name":"Bog","hex":"#bab796"},{"name":"Bogart","hex":"#8b8274"},{"name":"Bogey Green","hex":"#116f26"},{"name":"Bogong Moth","hex":"#663b3a"},{"name":"Bohemian Black","hex":"#3b373c"},{"name":"Bohemian Blue","hex":"#0000aa"},{"name":"Bohemian Jazz","hex":"#9d777c"},{"name":"Bohemianism","hex":"#b8b3c8"},{"name":"Boho","hex":"#7b684d"},{"name":"Boho Blush","hex":"#e58787"},{"name":"Boho Copper","hex":"#b96033"},{"name":"Boiling Acid","hex":"#00ee11"},{"name":"Boiling Magma","hex":"#ff3300"},{"name":"Boiling Mud","hex":"#a59c9b"},{"name":"Boiling Point","hex":"#d7e9e8"},{"name":"Bok Choy","hex":"#bccab3"},{"name":"Bokara Grey","hex":"#2a2725"},{"name":"Bold Avocado","hex":"#879550"},{"name":"Bold Bolection","hex":"#1d6575"},{"name":"Bold Brandy","hex":"#796660"},{"name":"Bold Brick","hex":"#8c5e55"},{"name":"Bold Eagle","hex":"#463d2f"},{"name":"Bold Gold","hex":"#ead56d"},{"name":"Bold Irish","hex":"#2a814d"},{"name":"Bold Sangria","hex":"#7a4549"},{"name":"Bole","hex":"#79443b"},{"name":"Bolero","hex":"#88464a"},{"name":"Bollywood","hex":"#debb32"},{"name":"Bollywood Gold","hex":"#fffbab"},{"name":"Bologna Sausage","hex":"#ffcfdc"},{"name":"Bolognese","hex":"#bb4400"},{"name":"Bolt from the Blue","hex":"#2277ff"},{"name":"Boltgun Metal","hex":"#393939"},{"name":"Bombay","hex":"#aeaead"},{"name":"Bombay Brown","hex":"#af6135"},{"name":"Bombay Pink","hex":"#c9736a"},{"name":"Bon Voyage","hex":"#8baeb2"},{"name":"Bona Fide","hex":"#304471"},{"name":"Bona Fide Beige","hex":"#cbb9ab"},{"name":"Bonaire","hex":"#e6e2d7"},{"name":"Bonanza","hex":"#523b2c"},{"name":"Bonbon Red","hex":"#8c4268"},{"name":"Bondi","hex":"#16698c"},{"name":"Bondi Blue","hex":"#0095b6"},{"name":"Bone","hex":"#e0d7c6"},{"name":"Bone Brown","hex":"#9d7446"},{"name":"Bone China","hex":"#f3edde"},{"name":"Bone Dust","hex":"#e7ece6"},{"name":"Bone Trace","hex":"#d7d0c0"},{"name":"Bone White","hex":"#f1e1b0"},{"name":"Bone-Chilling","hex":"#e1f2f0"},{"name":"Boneyard","hex":"#bb9977"},{"name":"Bonfire","hex":"#f78058"},{"name":"Bonfire Flame","hex":"#ce4e35"},{"name":"Bonfire Night","hex":"#de6a41"},{"name":"Bongo Drum","hex":"#d2c2b2"},{"name":"Bongo Skin","hex":"#dece96"},{"name":"Bonjour","hex":"#dfd7d2"},{"name":"Bonker Pink","hex":"#f54d79"},{"name":"Bonne Nuit","hex":"#3a4866"},{"name":"Bonnie Blue","hex":"#8dbbd1"},{"name":"Bonnie Cream","hex":"#fdefd2"},{"name":"Bonnie Dune Beach","hex":"#e4d1bc"},{"name":"Bonnie\'s Bench","hex":"#7c644a"},{"name":"Bonny Belle","hex":"#c58eab"},{"name":"Bonsai","hex":"#787b54"},{"name":"Bonsai Garden","hex":"#9e9e7c"},{"name":"Bonsai Pot","hex":"#b8b19a"},{"name":"Bonsai Tint","hex":"#c5d1b2"},{"name":"Bonsai Trunk","hex":"#6c6d62"},{"name":"Bonus Level","hex":"#ffa00a"},{"name":"Bonza Green","hex":"#5e6b44"},{"name":"Booger","hex":"#9bb53c"},{"name":"Booger Buster","hex":"#00ff77"},{"name":"Boogie Blast","hex":"#119944"},{"name":"Book Binder","hex":"#805d5b"},{"name":"Bookstone","hex":"#8c3432"},{"name":"Bookworm","hex":"#ebe3de"},{"name":"Boot Cut","hex":"#afc2cf"},{"name":"Boot Hill Ghost","hex":"#ddaf8e"},{"name":"Bootstrap Leather","hex":"#793721"},{"name":"Booty Bay","hex":"#7fc6be"},{"name":"Bora Bora Shore","hex":"#92d0d0"},{"name":"Borage","hex":"#507ea4"},{"name":"Borage Blue","hex":"#5566cc"},{"name":"Bordeaux","hex":"#7b002c"},{"name":"Bordeaux Hint","hex":"#efbcde"},{"name":"Bordeaux Leaf","hex":"#5c3944"},{"name":"Bordeaux Red","hex":"#6f2c4f"},{"name":"Borderline","hex":"#c69b58"},{"name":"Borderline Pink","hex":"#ee1166"},{"name":"Boreal","hex":"#717e73"},{"name":"Bored Accent Green","hex":"#dedd98"},{"name":"Boredom","hex":"#8c9c9c"},{"name":"Boredom Buster","hex":"#ff8e51"},{"name":"Borg Drone","hex":"#06470c"},{"name":"Borg Queen","hex":"#054907"},{"name":"Boring Green","hex":"#63b365"},{"name":"Borlotti Bean","hex":"#d9b1aa"},{"name":"Borscht","hex":"#8c2c24"},{"name":"Bosc Pear","hex":"#c09056"},{"name":"Bosco Blue","hex":"#76a0af"},{"name":"Boson Brown","hex":"#552c1c"},{"name":"Bōsōzoku Pink","hex":"#e7dbe1"},{"name":"Bosphorus","hex":"#008468"},{"name":"Bosporus","hex":"#015d75"},{"name":"Bossa Nova","hex":"#4c3d4e"},{"name":"Bossa Nova Blue","hex":"#767c9e"},{"name":"Boston Blue","hex":"#438eac"},{"name":"Boston Brick","hex":"#87544e"},{"name":"Boston Fern","hex":"#90966d"},{"name":"Boston University Red","hex":"#cc0002"},{"name":"Bōtan","hex":"#a2345c"},{"name":"Botanical","hex":"#4d6e2f"},{"name":"Botanical Beauty","hex":"#227700"},{"name":"Botanical Garden","hex":"#44aa11"},{"name":"Botanical Green","hex":"#77976e"},{"name":"Botanical Night","hex":"#12403c"},{"name":"Botanical Tint","hex":"#a7e6d4"},{"name":"Botticelli","hex":"#92acb4"},{"name":"Botticelli Angel","hex":"#fbdfd6"},{"name":"Bottle Glass","hex":"#238e50"},{"name":"Bottle Green","hex":"#006a4e"},{"name":"Bottlebrush Blossom","hex":"#e8edb0"},{"name":"Bottled Sea","hex":"#095baf"},{"name":"Bottled Ship","hex":"#9b6944"},{"name":"Bottom of my Heart","hex":"#cc0077"},{"name":"Boudin","hex":"#dab27d"},{"name":"Boudoir Blue","hex":"#7ea3d2"},{"name":"Bougainvillea","hex":"#9884b9"},{"name":"Boulder","hex":"#7c817c"},{"name":"Boulder Brown","hex":"#655e4e"},{"name":"Boulder Creek","hex":"#8c9496"},{"name":"Boulevardier","hex":"#d40701"},{"name":"Bouncy Ball Green","hex":"#49a462"},{"name":"Boundless","hex":"#5b6d84"},{"name":"Bouquet","hex":"#a78199"},{"name":"Bourbon","hex":"#af6c3e"},{"name":"Bourbon Peach","hex":"#ec842f"},{"name":"Bourbon Spice","hex":"#e6be8a"},{"name":"Bourbon Truffle","hex":"#6c5654"},{"name":"Bourgeois","hex":"#ee0066"},{"name":"Bournonite Green","hex":"#637a72"},{"name":"Boutique Beige","hex":"#e1cead"},{"name":"Bovine","hex":"#52585c"},{"name":"Bow Tie","hex":"#be2633"},{"name":"Bowen Blue","hex":"#126da8"},{"name":"Bowerbird Blue","hex":"#006585"},{"name":"Bowling Green","hex":"#bfdeaf"},{"name":"Bowman Beige","hex":"#d7bd92"},{"name":"Bowman Blue","hex":"#587176"},{"name":"Bowser Shell","hex":"#536b1f"},{"name":"Bowstring","hex":"#d6d1c8"},{"name":"Box Office","hex":"#898790"},{"name":"Boxcar","hex":"#873d30"},{"name":"Boxwood","hex":"#707b71"},{"name":"Boxwood Yellow","hex":"#efe4a5"},{"name":"Boy Blue","hex":"#8cacd6"},{"name":"Boy Red","hex":"#b3111d"},{"name":"Boycott","hex":"#635c53"},{"name":"Boynton Canyon","hex":"#9f4e3e"},{"name":"Boysenberry","hex":"#873260"},{"name":"Boysenberry Pink","hex":"#a1395d"},{"name":"Boysenberry Shadow","hex":"#f1f3f9"},{"name":"Boyzone","hex":"#2a96d5"},{"name":"Bracing Blue","hex":"#014182"},{"name":"Bracken","hex":"#5b3d27"},{"name":"Bracken Fern","hex":"#31453b"},{"name":"Bracken Green","hex":"#626f5d"},{"name":"Bradford Brown","hex":"#84726c"},{"name":"Braid","hex":"#77675b"},{"name":"Braided Mat","hex":"#e9b578"},{"name":"Braided Raffia","hex":"#e1d0af"},{"name":"Brain Freeze","hex":"#00eeff"},{"name":"Brain Pink","hex":"#f2aeb1"},{"name":"Brainstem Grey","hex":"#b5b5b5"},{"name":"Brainstorm","hex":"#d1d3c0"},{"name":"Brainstorm Bronze","hex":"#74685a"},{"name":"Braintree","hex":"#65635b"},{"name":"Brake Light Trails","hex":"#ee0033"},{"name":"Bramble Bush","hex":"#503629"},{"name":"Bramble Jam","hex":"#c71581"},{"name":"Brampton Grey","hex":"#9ba29d"},{"name":"Bran","hex":"#a9704c"},{"name":"Brandeis Blue","hex":"#0070ff"},{"name":"Brandied Apple","hex":"#a37c79"},{"name":"Brandied Apricot","hex":"#c27275"},{"name":"Brandied Melon","hex":"#cc7753"},{"name":"Brandied Pears","hex":"#eae2d1"},{"name":"Brandy","hex":"#dcb68a"},{"name":"Brandy Alexander","hex":"#f3e2dc"},{"name":"Brandy Bear","hex":"#aa5412"},{"name":"Brandy Brown","hex":"#73342a"},{"name":"Brandy Butter","hex":"#f3bb8f"},{"name":"Brandy Punch","hex":"#c07c40"},{"name":"Brandy Rose","hex":"#b6857a"},{"name":"Brandy Snaps","hex":"#b58e8b"},{"name":"Brandywine","hex":"#490206"},{"name":"Brandywine Raspberry","hex":"#5555aa"},{"name":"Brandywine Spritz","hex":"#e69dad"},{"name":"Brass","hex":"#b5a642"},{"name":"Brass Balls","hex":"#e7bd42"},{"name":"Brass Button","hex":"#927149"},{"name":"Brass Buttons","hex":"#dfac4c"},{"name":"Brass Knuckle","hex":"#b9a70f"},{"name":"Brass Mesh","hex":"#e1a84b"},{"name":"Brass Nail","hex":"#dbbd76"},{"name":"Brass Scorpion","hex":"#773b2e"},{"name":"Brass Trumpet","hex":"#d3b280"},{"name":"Brass Yellow","hex":"#b58735"},{"name":"Brassed Off","hex":"#cfa743"},{"name":"Brassica","hex":"#788879"},{"name":"Brasso","hex":"#f3bc6b"},{"name":"Brassy","hex":"#d5ab2c"},{"name":"Brassy Brass","hex":"#776022"},{"name":"Brassy Tint","hex":"#d8ab39"},{"name":"Brattle Spruce","hex":"#454743"},{"name":"Bratwurst","hex":"#582f2b"},{"name":"Braun","hex":"#897058"},{"name":"Bravado Red","hex":"#a0524e"},{"name":"Brave Orange","hex":"#ff631c"},{"name":"Brave Purple","hex":"#968db8"},{"name":"Bravo Blue","hex":"#d3e7e9"},{"name":"Brazen Brass","hex":"#7b6623"},{"name":"Brazen Orange","hex":"#ce7850"},{"name":"Brazil Nut","hex":"#856765"},{"name":"Brazilian Brown","hex":"#7f5131"},{"name":"Brazilian Citrine","hex":"#af915d"},{"name":"Brazilian Green","hex":"#296d23"},{"name":"Brazilian Sand","hex":"#d8c6b4"},{"name":"Brazilian Tan","hex":"#ddc5af"},{"name":"Brazilianite","hex":"#31d652"},{"name":"Bread \'n Butter","hex":"#ffd182"},{"name":"Bread and Butter","hex":"#faedd2"},{"name":"Bread Basket","hex":"#ab8659"},{"name":"Bread Crumb","hex":"#e4d4be"},{"name":"Bread Crust","hex":"#b78b43"},{"name":"Bread Flavour","hex":"#dcd6d2"},{"name":"Bread Pudding","hex":"#bfa270"},{"name":"Break of Day","hex":"#fffabd"},{"name":"Break the Ice","hex":"#b2e1ee"},{"name":"Breakaway","hex":"#cedac3"},{"name":"Breakaway Blue","hex":"#424d60"},{"name":"Breaker","hex":"#e5eded"},{"name":"Breaker Bay","hex":"#517b78"},{"name":"Breakfast Biscuit","hex":"#f6e3d3"},{"name":"Breakfast Blend","hex":"#6d5542"},{"name":"Breaking Wave","hex":"#00a0b0"},{"name":"Breaktime","hex":"#c4d9ce"},{"name":"Breakwater","hex":"#d1dee4"},{"name":"Breakwater White","hex":"#ebf1e9"},{"name":"Breakwaters","hex":"#d9e5e0"},{"name":"Breath of Fire","hex":"#ee0011"},{"name":"Breath of Fresh Air","hex":"#c7dbe4"},{"name":"Breath of Spring","hex":"#e9e1a7"},{"name":"Breath Of Spring","hex":"#dfeeda"},{"name":"Breathe","hex":"#d1d2b8"},{"name":"Breathless","hex":"#dfdae0"},{"name":"Breathtaking","hex":"#536193"},{"name":"Breathtaking Evening","hex":"#c3acb7"},{"name":"Breathtaking View","hex":"#809bac"},{"name":"Bredon Green","hex":"#5e9948"},{"name":"Breen","hex":"#795d34"},{"name":"Breeze","hex":"#c2dde6"},{"name":"Breeze in June","hex":"#c4dfe8"},{"name":"Breeze of Chilli","hex":"#f4706e"},{"name":"Breeze of Green","hex":"#cffdbc"},{"name":"Breezeway","hex":"#d6dbc0"},{"name":"Breezy","hex":"#aec9ea"},{"name":"Breezy Aqua","hex":"#d9e4de"},{"name":"Breezy Beige","hex":"#f7f2d7"},{"name":"Breezy Blue","hex":"#bad9e5"},{"name":"Breezy Touch","hex":"#c1d9e9"},{"name":"Breezy Violet","hex":"#cecedf"},{"name":"Breonne Blue","hex":"#2d567c"},{"name":"Bresaola","hex":"#a9203e"},{"name":"Brescian Blue","hex":"#0080ff"},{"name":"Bretzel Brown","hex":"#aa5555"},{"name":"Brevity Brown","hex":"#715243"},{"name":"Brewed Mustard","hex":"#e68364"},{"name":"Brewing Storm","hex":"#777788"},{"name":"Briar","hex":"#745443"},{"name":"Briar Rose","hex":"#c07281"},{"name":"Briar Wood","hex":"#695451"},{"name":"Brick","hex":"#a03623"},{"name":"Brick Brown","hex":"#77603f"},{"name":"Brick Dust","hex":"#ab685f"},{"name":"Brick Fence","hex":"#b38070"},{"name":"Brick Hearth","hex":"#956159"},{"name":"Brick Orange","hex":"#c14a09"},{"name":"Brick Path","hex":"#c2977c"},{"name":"Brick Paver","hex":"#93402f"},{"name":"Brick Red","hex":"#8f1402"},{"name":"Brick Yellow","hex":"#d2a161"},{"name":"Brick-A-Brack","hex":"#a75c3d"},{"name":"Brickhouse","hex":"#864a36"},{"name":"Bricks of Hope","hex":"#db5856"},{"name":"Bricktone","hex":"#825943"},{"name":"Brickwork Red","hex":"#986971"},{"name":"Bricky Brick","hex":"#b33a22"},{"name":"Bridal Blush","hex":"#e5d3cc"},{"name":"Bridal Bouquet","hex":"#ebbdb8"},{"name":"Bridal Heath","hex":"#f8ebdd"},{"name":"Bridal Rose","hex":"#d1949c"},{"name":"Bridal Veil","hex":"#e7e1de"},{"name":"Bride","hex":"#efe7eb"},{"name":"Bride\'s Blush","hex":"#f9e2e1"},{"name":"Bridesmaid","hex":"#fae6df"},{"name":"Bridge Troll Grey","hex":"#817f6e"},{"name":"Bridgeport","hex":"#004683"},{"name":"Bridgewater","hex":"#527065"},{"name":"Bridgewater Bay","hex":"#bcd7e2"},{"name":"Bridgewood","hex":"#575144"},{"name":"Bridle Leather","hex":"#8f7d70"},{"name":"Bridle Path","hex":"#a29682"},{"name":"Brierwood Green","hex":"#545e4f"},{"name":"Brig","hex":"#4fa1c0"},{"name":"Brig O\'Doon","hex":"#ddcfbf"},{"name":"Brigade","hex":"#365d73"},{"name":"Brigadier Blue","hex":"#0063a0"},{"name":"Bright Aqua","hex":"#0bf9ea"},{"name":"Bright Blue","hex":"#0165fc"},{"name":"Bright Blue Violet","hex":"#8a2be2"},{"name":"Bright Bluebell","hex":"#9da7cf"},{"name":"Bright Bluebonnet","hex":"#90b3c2"},{"name":"Bright Bronze","hex":"#a05822"},{"name":"Bright Brown","hex":"#533b32"},{"name":"Bright Bubble","hex":"#ffc42a"},{"name":"Bright Camouflage","hex":"#1cac78"},{"name":"Bright Cerulean","hex":"#1dacd6"},{"name":"Bright Chambray","hex":"#adbfc8"},{"name":"Bright Chartreuse","hex":"#dfff11"},{"name":"Bright Citrus","hex":"#ffc6a5"},{"name":"Bright Clove","hex":"#efcf9b"},{"name":"Bright Cobalt","hex":"#3c6098"},{"name":"Bright Cyan","hex":"#41fdfe"},{"name":"Bright Delight","hex":"#cd5b26"},{"name":"Bright Dusk","hex":"#eee9f9"},{"name":"Bright Ecru","hex":"#feffca"},{"name":"Bright Eggplant","hex":"#5a4e88"},{"name":"Bright Forest","hex":"#728a51"},{"name":"Bright Gold","hex":"#cf9f52"},{"name":"Bright Greek","hex":"#3844f4"},{"name":"Bright Green","hex":"#66ff00"},{"name":"Bright Grey","hex":"#ebecf0"},{"name":"Bright Halo","hex":"#ffd266"},{"name":"Bright Idea","hex":"#ecbe63"},{"name":"Bright Indigo","hex":"#6f00fe"},{"name":"Bright Khaki","hex":"#f1e78c"},{"name":"Bright Lady","hex":"#9f3645"},{"name":"Bright Laughter","hex":"#f0edd1"},{"name":"Bright Lavender","hex":"#bf94e4"},{"name":"Bright Lettuce","hex":"#8dce65"},{"name":"Bright Light Green","hex":"#2dfe54"},{"name":"Bright Lilac","hex":"#d891ef"},{"name":"Bright Lime","hex":"#87fd05"},{"name":"Bright Lime Green","hex":"#65fe08"},{"name":"Bright Loam","hex":"#c1b9aa"},{"name":"Bright Magenta","hex":"#ff08e8"},{"name":"Bright Manatee","hex":"#979aaa"},{"name":"Bright Mango","hex":"#ff8830"},{"name":"Bright Marigold","hex":"#eb7e00"},{"name":"Bright Maroon","hex":"#c32148"},{"name":"Bright Midnight","hex":"#011993"},{"name":"Bright Midnight Blue","hex":"#1a4876"},{"name":"Bright Mint","hex":"#98ff98"},{"name":"Bright Moon","hex":"#f6f1e5"},{"name":"Bright Nautilus","hex":"#225869"},{"name":"Bright Navy Blue","hex":"#1974d2"},{"name":"Bright Nori","hex":"#2d5e22"},{"name":"Bright Ocarina","hex":"#f0e8da"},{"name":"Bright Olive","hex":"#9cbb04"},{"name":"Bright Orange","hex":"#ff7034"},{"name":"Bright Pink","hex":"#fe01b1"},{"name":"Bright Purple","hex":"#be03fd"},{"name":"Bright Red","hex":"#ff000d"},{"name":"Bright Rose","hex":"#c51959"},{"name":"Bright Saffron","hex":"#ffcf09"},{"name":"Bright Sage","hex":"#d1ceb4"},{"name":"Bright Scarlet","hex":"#fc0e34"},{"name":"Bright Sea Green","hex":"#9fe2bf"},{"name":"Bright Sepia","hex":"#b1aa9c"},{"name":"Bright Sienna","hex":"#d68a59"},{"name":"Bright Sky Blue","hex":"#02ccfe"},{"name":"Bright Spark","hex":"#76c1e1"},{"name":"Bright Star","hex":"#dde2e6"},{"name":"Bright Sun","hex":"#ecbd2c"},{"name":"Bright Teal","hex":"#01f9c6"},{"name":"Bright Turquoise","hex":"#08e8de"},{"name":"Bright Ube","hex":"#d19fe8"},{"name":"Bright Umber","hex":"#826644"},{"name":"Bright Violet","hex":"#ad0afd"},{"name":"Bright White","hex":"#f6f2f1"},{"name":"Bright Winter Cloud","hex":"#f5efe8"},{"name":"Bright Yarrow","hex":"#face6d"},{"name":"Bright Yellow","hex":"#fffd01"},{"name":"Bright Yellow Green","hex":"#9dff00"},{"name":"Bright Zenith","hex":"#757cae"},{"name":"Brihaspati Orange","hex":"#e2681b"},{"name":"Brik Dough","hex":"#dab77f"},{"name":"Brilliance","hex":"#fdfdfd"},{"name":"Brilliant","hex":"#0094a7"},{"name":"Brilliant Azure","hex":"#3399ff"},{"name":"Brilliant Beige","hex":"#efc5b5"},{"name":"Brilliant Blue","hex":"#0075b3"},{"name":"Brilliant Carmine","hex":"#ad548f"},{"name":"Brilliant Gold","hex":"#f0dbaa"},{"name":"Brilliant Green","hex":"#88b407"},{"name":"Brilliant Impression","hex":"#efc600"},{"name":"Brilliant Lavender","hex":"#f4bbff"},{"name":"Brilliant Liquorice","hex":"#545454"},{"name":"Brilliant Rose","hex":"#fe54a3"},{"name":"Brilliant Sea","hex":"#009cb7"},{"name":"Brilliant Silver","hex":"#a9b0b4"},{"name":"Brilliant Turquoise","hex":"#00a68b"},{"name":"Brilliant White","hex":"#e8eefe"},{"name":"Brilliant Yellow","hex":"#e8e5d8"},{"name":"Brimstone","hex":"#ffbd2b"},{"name":"Brimstone Butterfly","hex":"#c2c190"},{"name":"Brindle","hex":"#82776b"},{"name":"Brink Pink","hex":"#fb607f"},{"name":"Briny","hex":"#08808e"},{"name":"Brioche","hex":"#dfcfc3"},{"name":"Briquette","hex":"#e15f65"},{"name":"Briquette Grey","hex":"#515051"},{"name":"Brisa De Mar","hex":"#d2e0ef"},{"name":"Brisk Blue","hex":"#6d829d"},{"name":"Brisket","hex":"#6e4534"},{"name":"Bristle Grass","hex":"#a28450"},{"name":"Bristol Beige","hex":"#93836f"},{"name":"Bristol Blue","hex":"#558f91"},{"name":"Bristol Green","hex":"#83a492"},{"name":"Britches","hex":"#a09073"},{"name":"Brite Gold","hex":"#fede8f"},{"name":"British Grey Mauve","hex":"#7d7081"},{"name":"British Khaki","hex":"#bcaf97"},{"name":"British Mauve","hex":"#35427b"},{"name":"British Phone Booth","hex":"#ff0015"},{"name":"British Racing Green","hex":"#05480d"},{"name":"British Rose","hex":"#f4c8db"},{"name":"British Shorthair","hex":"#5f6672"},{"name":"Brittany Blue","hex":"#4c7e86"},{"name":"Brittany\'s Bow","hex":"#f3d8e0"},{"name":"Brittlebush","hex":"#eaae47"},{"name":"Broad Bean","hex":"#94975d"},{"name":"Broad Daylight","hex":"#bbddff"},{"name":"Broadleaf Forest","hex":"#014421"},{"name":"Broadwater Blue","hex":"#034a71"},{"name":"Broadway","hex":"#434442"},{"name":"Broadway Lights","hex":"#fee07c"},{"name":"Brocade","hex":"#8c87c5"},{"name":"Brocade Violet","hex":"#7b4d6b"},{"name":"Broccoflower","hex":"#8fa277"},{"name":"Broccoli","hex":"#87b364"},{"name":"Broccoli Green","hex":"#4b5338"},{"name":"Broccoli Paradise","hex":"#008833"},{"name":"Brochantite Green","hex":"#486262"},{"name":"Broiled Flounder","hex":"#ffdd88"},{"name":"Broken Blue","hex":"#74bbfb"},{"name":"Broken Tube","hex":"#060310"},{"name":"Broken White","hex":"#eeebe3"},{"name":"Bronco","hex":"#a79781"},{"name":"Bronze","hex":"#a87900"},{"name":"Bronze Blue","hex":"#3a4856"},{"name":"Bronze Brown","hex":"#825e2f"},{"name":"Bronze Cup","hex":"#eb9552"},{"name":"Bronze Fig","hex":"#6e6654"},{"name":"Bronze Green","hex":"#8d8752"},{"name":"Bronze Icon","hex":"#585538"},{"name":"Bronze Leaf","hex":"#aa8031"},{"name":"Bronze Medal","hex":"#6d6240"},{"name":"Bronze Mist","hex":"#a37f44"},{"name":"Bronze Olive","hex":"#584c25"},{"name":"Bronze Sand","hex":"#e6be9c"},{"name":"Bronze Satin","hex":"#cc5533"},{"name":"Bronze Tone","hex":"#434c28"},{"name":"Bronze Treasure","hex":"#b08d57"},{"name":"Bronze Yellow","hex":"#737000"},{"name":"Bronzed","hex":"#dd6633"},{"name":"Bronzed Brass","hex":"#9b7e4e"},{"name":"Bronzed Orange","hex":"#d78a6c"},{"name":"Brood","hex":"#69605a"},{"name":"Brooding Storm","hex":"#5e6d6e"},{"name":"Brook Green","hex":"#afddcc"},{"name":"Brook Trout","hex":"#dacecd"},{"name":"Brooklet","hex":"#e7eeee"},{"name":"Brooklyn","hex":"#586766"},{"name":"Brookside","hex":"#5a7562"},{"name":"Brookview","hex":"#99b792"},{"name":"Broom","hex":"#eecc24"},{"name":"Broom Butterfly Blue","hex":"#6bb3db"},{"name":"Broomstick","hex":"#74462d"},{"name":"Brother Blue","hex":"#b0b7c6"},{"name":"Brown","hex":"#653700"},{"name":"Brown 383","hex":"#443724"},{"name":"Brown Alpaca","hex":"#b86d29"},{"name":"Brown Bag","hex":"#deac6e"},{"name":"Brown Bear","hex":"#4a3f37"},{"name":"Brown Beauty","hex":"#4a3832"},{"name":"Brown Beige","hex":"#cc8833"},{"name":"Brown Bramble","hex":"#53331e"},{"name":"Brown Branch","hex":"#b08f6a"},{"name":"Brown Bread","hex":"#d4c5a9"},{"name":"Brown Butter","hex":"#ac7c00"},{"name":"Brown Cerberus","hex":"#995555"},{"name":"Brown Chocolate","hex":"#5f1933"},{"name":"Brown Clay","hex":"#c37c59"},{"name":"Brown Coffee","hex":"#4a2c2a"},{"name":"Brown Derby","hex":"#594537"},{"name":"Brown Eyed Girl","hex":"#89491a"},{"name":"Brown Eyes","hex":"#9e6b4a"},{"name":"Brown Fox","hex":"#544a42"},{"name":"Brown Green","hex":"#706c11"},{"name":"Brown Grey","hex":"#8d8468"},{"name":"Brown Hare","hex":"#d3b793"},{"name":"Brown Knapweed","hex":"#f485ac"},{"name":"Brown Labrador","hex":"#97382c"},{"name":"Brown Magenta","hex":"#7b2039"},{"name":"Brown Moelleux","hex":"#662211"},{"name":"Brown Mouse","hex":"#d8cbb5"},{"name":"Brown Mustard","hex":"#dfac59"},{"name":"Brown Orange","hex":"#b96902"},{"name":"Brown Patina","hex":"#8a5640"},{"name":"Brown Pepper","hex":"#4e403b"},{"name":"Brown Pod","hex":"#3c241b"},{"name":"Brown Rabbit","hex":"#ae8e65"},{"name":"Brown Red","hex":"#922b05"},{"name":"Brown Rice","hex":"#dabd84"},{"name":"Brown Ridge","hex":"#735852"},{"name":"Brown Rose","hex":"#8d736c"},{"name":"Brown Rum","hex":"#bc9b4e"},{"name":"Brown Rust","hex":"#af593e"},{"name":"Brown Sand","hex":"#f7945f"},{"name":"Brown Stone","hex":"#5f3f3d"},{"name":"Brown Suede","hex":"#5b4f41"},{"name":"Brown Sugar","hex":"#ab764e"},{"name":"Brown Sugar Coating","hex":"#c8ae96"},{"name":"Brown Sugar Glaze","hex":"#cf7a4b"},{"name":"Brown Teepee","hex":"#bca792"},{"name":"Brown Thrush","hex":"#906151"},{"name":"Brown Tumbleweed","hex":"#37290e"},{"name":"Brown Velvet","hex":"#704e40"},{"name":"Brown Wood","hex":"#b4674d"},{"name":"Brown Yellow","hex":"#dd9966"},{"name":"Brown-Bag-It","hex":"#ddbda3"},{"name":"Browned Off","hex":"#bb4433"},{"name":"Brownie","hex":"#964b00"},{"name":"Brownish","hex":"#9c6d57"},{"name":"Brownish Black","hex":"#413936"},{"name":"Brownish Green","hex":"#6a6e09"},{"name":"Brownish Grey","hex":"#86775f"},{"name":"Brownish Orange","hex":"#cb7723"},{"name":"Brownish Pink","hex":"#c27e79"},{"name":"Brownish Purple","hex":"#76424e"},{"name":"Brownish Purple Red","hex":"#8d746f"},{"name":"Brownish Red","hex":"#9e3623"},{"name":"Brownish Yellow","hex":"#c9b003"},{"name":"Brownstone","hex":"#785441"},{"name":"Browse Brown","hex":"#6e615f"},{"name":"Bruin Spice","hex":"#d3b99b"},{"name":"Bruise","hex":"#7e4071"},{"name":"Bruised Bear","hex":"#5d3954"},{"name":"Bruised Burgundy","hex":"#5b4148"},{"name":"Bruised Plum","hex":"#3b1921"},{"name":"Brume","hex":"#c6c6c2"},{"name":"Brunette","hex":"#664238"},{"name":"Bruni Green","hex":"#829e2c"},{"name":"Brunneous","hex":"#5e4662"},{"name":"Brunnera Blue","hex":"#9ba9ca"},{"name":"Bruno Brown","hex":"#433430"},{"name":"Brunswick","hex":"#236649"},{"name":"Brunswick Green","hex":"#1b4d3e"},{"name":"Bruschetta","hex":"#b2654e"},{"name":"Bruschetta Tomato","hex":"#ff6347"},{"name":"Brush","hex":"#b99684"},{"name":"Brush Blue","hex":"#d4e1ed"},{"name":"Brushed Clay","hex":"#db9351"},{"name":"Brushed Metal","hex":"#c7c8c9"},{"name":"Brushed Nickel","hex":"#7d7a79"},{"name":"Brushstroke","hex":"#f1dfba"},{"name":"Brushwood","hex":"#8c5939"},{"name":"Brusque Brown","hex":"#cc6611"},{"name":"Brusque Pink","hex":"#ee00ff"},{"name":"Brussels","hex":"#6c7c6d"},{"name":"Brussels Sprout Green","hex":"#665e0d"},{"name":"Brutal Doom","hex":"#e61626"},{"name":"Brutal Pink","hex":"#ff00bb"},{"name":"Bryophyte","hex":"#a6bea6"},{"name":"Bryopsida Green","hex":"#9fe010"},{"name":"Bubbelgum Heart","hex":"#ffbadf"},{"name":"Bubble","hex":"#eaf5e7"},{"name":"Bubble Algae","hex":"#90e4c1"},{"name":"Bubble Bath","hex":"#e8e0e9"},{"name":"Bubble Bobble Green","hex":"#00b800"},{"name":"Bubble Bobble P2","hex":"#0084ff"},{"name":"Bubble Gum","hex":"#ff85ff"},{"name":"Bubble Shell","hex":"#d3a49a"},{"name":"Bubble Turquoise","hex":"#43817a"},{"name":"Bubblegum","hex":"#e76178"},{"name":"Bubblegum Baby Girl","hex":"#cc55ee"},{"name":"Bubblegum Crisis","hex":"#eeccee"},{"name":"Bubblegum Kisses","hex":"#f092d6"},{"name":"Bubblegum Pink","hex":"#f6b0ba"},{"name":"Bubbles","hex":"#e7feff"},{"name":"Bubbles in the Air","hex":"#d3e3e5"},{"name":"Bubbly Barracuda","hex":"#77ccff"},{"name":"Bubonic Brown","hex":"#c68400"},{"name":"Bucatini Noodle","hex":"#fdf5d7"},{"name":"Buccaneer","hex":"#6e5150"},{"name":"Buccaneer Blue","hex":"#035b8d"},{"name":"Büchel Cherry","hex":"#aa1111"},{"name":"Buckeye","hex":"#674834"},{"name":"Bucking Bronco","hex":"#996655"},{"name":"Buckingham Palace","hex":"#6b5140"},{"name":"Buckram Binding","hex":"#d9c3a6"},{"name":"Buckskin","hex":"#d4ba8c"},{"name":"Buckthorn Brown","hex":"#a76f1f"},{"name":"Buckwheat","hex":"#d4dcd6"},{"name":"Buckwheat Flour","hex":"#efe2cf"},{"name":"Buckwheat Groats","hex":"#e0d8a7"},{"name":"Buckwheat Mauve","hex":"#b9a4b0"},{"name":"Bucolic","hex":"#1b6634"},{"name":"Bucolic Blue","hex":"#98acb0"},{"name":"Bud","hex":"#a5a88f"},{"name":"Bud Green","hex":"#79b465"},{"name":"Bud\'s Sails","hex":"#e9e3d3"},{"name":"Budapest Brown","hex":"#553d3e"},{"name":"Budder Skin","hex":"#fce2c4"},{"name":"Buddha Gold","hex":"#bc9b1b"},{"name":"Buddha Green","hex":"#37b575"},{"name":"Buddha\'s Love Handles","hex":"#ffbb33"},{"name":"Budding Bloom","hex":"#deeabd"},{"name":"Budding Fern","hex":"#edecd4"},{"name":"Budding Leaf","hex":"#eef0d7"},{"name":"Budding Peach","hex":"#f3d4bf"},{"name":"Budgie Blue","hex":"#84c9e1"},{"name":"Budōnezumi Grape","hex":"#63424b"},{"name":"Buenos Aires","hex":"#f4dcc1"},{"name":"Buff","hex":"#f0dc82"},{"name":"Buff It","hex":"#d9cfbe"},{"name":"Buff Leather","hex":"#aa7733"},{"name":"Buff Orange","hex":"#ffbb7c"},{"name":"Buff Tone","hex":"#e8d0b9"},{"name":"Buff Yellow","hex":"#f0b967"},{"name":"Buffallo Sauce","hex":"#f25a1a"},{"name":"Buffalo Bill","hex":"#ae9274"},{"name":"Buffalo Dance","hex":"#695645"},{"name":"Buffalo Herd","hex":"#705046"},{"name":"Buffalo Hide","hex":"#bb9f6a"},{"name":"Buffalo Soldier","hex":"#95786c"},{"name":"Buffalo Trail","hex":"#e2ac78"},{"name":"Buffed Copper","hex":"#dd9475"},{"name":"Buffed Plum","hex":"#aeafb9"},{"name":"Buffhide","hex":"#a79c81"},{"name":"Buffy Citrine","hex":"#868929"},{"name":"Bugle Boy","hex":"#bb8f4f"},{"name":"Bugman\'s Glow","hex":"#cd5b45"},{"name":"Built on Sand","hex":"#e9e3da"},{"name":"Bulbasaur","hex":"#73a263"},{"name":"Bulfinch Blue","hex":"#94b1b6"},{"name":"Bulgarian Rose","hex":"#480607"},{"name":"Bull Kelp","hex":"#636153"},{"name":"Bull Ring","hex":"#6b605b"},{"name":"Bull Shot","hex":"#75442b"},{"name":"Bullet Hell","hex":"#faf1c8"},{"name":"Bullfighters Red","hex":"#cd4646"},{"name":"Bullfrog","hex":"#8a966a"},{"name":"Bulma Hair","hex":"#359e6b"},{"name":"Bulrush","hex":"#6d5837"},{"name":"Bumangués Blue","hex":"#0777bc"},{"name":"Bumble Baby","hex":"#f5f1de"},{"name":"Bumblebee","hex":"#ffc82a"},{"name":"Bunchberry","hex":"#674961"},{"name":"Bundaberg Sand","hex":"#ffc58a"},{"name":"Bundle of Wheat","hex":"#e5b584"},{"name":"Bungalow Beige","hex":"#cbbeaa"},{"name":"Bungalow Brown","hex":"#ad947b"},{"name":"Bungalow Gold","hex":"#ad8047"},{"name":"Bungalow Maple","hex":"#e4c590"},{"name":"Bungalow Taupe","hex":"#cebe9f"},{"name":"Bungee Cord","hex":"#696156"},{"name":"Bunglehouse Beige","hex":"#988f7b"},{"name":"Bunglehouse Blue","hex":"#46616e"},{"name":"Bunker","hex":"#292c2f"},{"name":"Bunni Brown","hex":"#6c4522"},{"name":"Bunny Cake","hex":"#f1b5cc"},{"name":"Bunny Fluff","hex":"#fb8da6"},{"name":"Bunny Hop","hex":"#f3ecea"},{"name":"Bunny Pink","hex":"#dec3c9"},{"name":"Bunny Soft","hex":"#d3bfc4"},{"name":"Bunny Tail","hex":"#ffe3f4"},{"name":"Bunny\'s Nose","hex":"#fad9dd"},{"name":"Bunting","hex":"#2b3449"},{"name":"Bunting Blue","hex":"#35537c"},{"name":"Buoyancy","hex":"#79b0b6"},{"name":"Buoyant","hex":"#65707e"},{"name":"Buoyant Blue","hex":"#84addb"},{"name":"Burdock","hex":"#717867"},{"name":"Bureaucracy","hex":"#746c8f"},{"name":"Burgundy","hex":"#900020"},{"name":"Burgundy Grey","hex":"#dadba0"},{"name":"Burgundy Snail","hex":"#7e7150"},{"name":"Burgundy Wine","hex":"#6c403e"},{"name":"Buried Gold","hex":"#dbbc4b"},{"name":"Buried Treasure","hex":"#d28b42"},{"name":"Burj Khalifa Fountain","hex":"#d4dee8"},{"name":"Burka Black","hex":"#353e4f"},{"name":"Burlap","hex":"#8b7753"},{"name":"Burlap Grey","hex":"#81717e"},{"name":"Burlat Red","hex":"#6e314f"},{"name":"Burled Redwood","hex":"#8f4c3a"},{"name":"Burley Wood","hex":"#695641"},{"name":"Burlwood","hex":"#a17874"},{"name":"Burlywood","hex":"#deb887"},{"name":"Burma Jade","hex":"#94b1a0"},{"name":"Burmese Gold","hex":"#bc8143"},{"name":"Burned Brown","hex":"#6f4b3e"},{"name":"Burnham","hex":"#234537"},{"name":"Burning Brier","hex":"#884736"},{"name":"Burning Bush","hex":"#a0403e"},{"name":"Burning Coals","hex":"#f79d72"},{"name":"Burning Fireflies","hex":"#ff1166"},{"name":"Burning Flame","hex":"#ffb162"},{"name":"Burning Gold","hex":"#ccaa77"},{"name":"Burning Idea","hex":"#8f8b72"},{"name":"Burning Orange","hex":"#ff7124"},{"name":"Burning Raspberry","hex":"#ff0599"},{"name":"Burning Sand","hex":"#d08363"},{"name":"Burning Steppes","hex":"#742100"},{"name":"Burning Tomato","hex":"#eb5030"},{"name":"Burning Trail","hex":"#ee9922"},{"name":"Burning Ultrablue","hex":"#150aec"},{"name":"Burnished Bark","hex":"#6a3d36"},{"name":"Burnished Brandy","hex":"#8b664e"},{"name":"Burnished Bronze","hex":"#9c7e40"},{"name":"Burnished Brown","hex":"#a17a74"},{"name":"Burnished Caramel","hex":"#be9167"},{"name":"Burnished Clay","hex":"#d2ccc4"},{"name":"Burnished Copper","hex":"#bb8833"},{"name":"Burnished Cream","hex":"#fce5bf"},{"name":"Burnished Gold","hex":"#aa9855"},{"name":"Burnished Lilac","hex":"#c5aeb1"},{"name":"Burnished Mahogany","hex":"#734842"},{"name":"Burnished Metal","hex":"#c8cbc8"},{"name":"Burnished Pewter","hex":"#716a62"},{"name":"Burnished Russet","hex":"#794029"},{"name":"Burns Cave","hex":"#7b5847"},{"name":"Burnside","hex":"#d0a664"},{"name":"Burnt Almond","hex":"#b0724a"},{"name":"Burnt Ash","hex":"#746572"},{"name":"Burnt Bagel","hex":"#9a4e12"},{"name":"Burnt Bamboo","hex":"#4d3b3c"},{"name":"Burnt Brick","hex":"#b45241"},{"name":"Burnt Butter","hex":"#a47c53"},{"name":"Burnt Caramel","hex":"#846242"},{"name":"Burnt Coffee","hex":"#271b10"},{"name":"Burnt Copper","hex":"#c56a39"},{"name":"Burnt Coral","hex":"#e57568"},{"name":"Burnt Crimson","hex":"#582124"},{"name":"Burnt Crust","hex":"#885533"},{"name":"Burnt Earth","hex":"#9d4531"},{"name":"Burnt Grape","hex":"#75625e"},{"name":"Burnt Henna","hex":"#8d4035"},{"name":"Burnt Maroon","hex":"#420303"},{"name":"Burnt Ochre","hex":"#bb4f35"},{"name":"Burnt Olive","hex":"#736f54"},{"name":"Burnt Orange","hex":"#cc5500"},{"name":"Burnt Pumpkin","hex":"#ca955c"},{"name":"Burnt Red","hex":"#9f2305"},{"name":"Burnt Russet","hex":"#853c47"},{"name":"Burnt Sienna","hex":"#a93400"},{"name":"Burnt Terra","hex":"#82634e"},{"name":"Burnt Tile","hex":"#774645"},{"name":"Burnt Toffee","hex":"#ab7e5e"},{"name":"Burnt Umber","hex":"#8a3324"},{"name":"Burnt Yellow","hex":"#d5ab09"},{"name":"Burple","hex":"#6832e3"},{"name":"Burrito","hex":"#eed7c1"},{"name":"Burro","hex":"#947764"},{"name":"Burst of Gold","hex":"#deb368"},{"name":"Burst of Lime","hex":"#acd243"},{"name":"Bursting Lemon","hex":"#fce282"},{"name":"Burtuqali Orange","hex":"#ff6700"},{"name":"Bush","hex":"#0d2e1c"},{"name":"Bush Buck","hex":"#a28d82"},{"name":"Bush Viper","hex":"#a0bcd0"},{"name":"Bushland Grey","hex":"#7f7b73"},{"name":"Bussell Lace","hex":"#e5a1a0"},{"name":"Buster","hex":"#3e4b69"},{"name":"Busty Blue","hex":"#3300cc"},{"name":"Busy Bee","hex":"#f4ff00"},{"name":"Butcher Paper","hex":"#b69983"},{"name":"Butter","hex":"#ffff81"},{"name":"Butter Base","hex":"#c28a35"},{"name":"Butter Bronze","hex":"#c88849"},{"name":"Butter Cake","hex":"#fdff52"},{"name":"Butter Caramel","hex":"#a67a4c"},{"name":"Butter Cookie","hex":"#f0e4b2"},{"name":"Butter Cream","hex":"#efaf42"},{"name":"Butter Creme","hex":"#fee5ba"},{"name":"Butter Cupcake","hex":"#ffdd99"},{"name":"Butter Fingers","hex":"#fce9ad"},{"name":"Butter Fudge","hex":"#aa6600"},{"name":"Butter Honey","hex":"#f5e5ab"},{"name":"Butter Icing","hex":"#f5e5da"},{"name":"Butter Lettuce","hex":"#cfe7cb"},{"name":"Butter Muffin","hex":"#f6dfb2"},{"name":"Butter Nut","hex":"#cba578"},{"name":"Butter Ridge","hex":"#f9e097"},{"name":"Butter Rum","hex":"#c38650"},{"name":"Butter Tart","hex":"#fee99f"},{"name":"Butter Up","hex":"#f4e0bb"},{"name":"Butter White","hex":"#fddebd"},{"name":"Butter Yellow","hex":"#fffd74"},{"name":"Butterball","hex":"#fff4c4"},{"name":"Butterbeer","hex":"#af7934"},{"name":"Butterblond","hex":"#f1c766"},{"name":"Butterbrot","hex":"#c5ae7c"},{"name":"Buttercream","hex":"#efe0cd"},{"name":"Buttercream Frosting","hex":"#f5edd7"},{"name":"Buttercup","hex":"#da9429"},{"name":"Buttercup Yellow","hex":"#e3c2a3"},{"name":"Buttered Popcorn","hex":"#fff0a4"},{"name":"Buttered Rum","hex":"#9d702e"},{"name":"Buttered Up","hex":"#f7f0d2"},{"name":"Butterfield","hex":"#f7be5b"},{"name":"Butterfly","hex":"#cadea5"},{"name":"Butterfly Blue","hex":"#2099bb"},{"name":"Butterfly Bush","hex":"#68578c"},{"name":"Butterfly Garden","hex":"#908aba"},{"name":"Butterfly Green","hex":"#0b6863"},{"name":"Butterfly Kisses","hex":"#f0dedc"},{"name":"Butterfly Wing","hex":"#f8cfb4"},{"name":"Buttermelon","hex":"#fff7db"},{"name":"Buttermilk","hex":"#fffee4"},{"name":"Butternut","hex":"#ffa177"},{"name":"Butternut Pizazz","hex":"#e59752"},{"name":"Butternut Squash","hex":"#fc7604"},{"name":"Butternut Wood","hex":"#7e6f59"},{"name":"Butterscotch","hex":"#fdb147"},{"name":"Butterscotch Amber","hex":"#d3b090"},{"name":"Butterscotch Bliss","hex":"#d7ad62"},{"name":"Butterscotch Cake","hex":"#f1c882"},{"name":"Butterscotch Glaze","hex":"#c48446"},{"name":"Butterscotch Mousse","hex":"#a97d54"},{"name":"Butterscotch Ripple","hex":"#b08843"},{"name":"Butterscotch Sundae","hex":"#dbb486"},{"name":"Butterscotch Syrup","hex":"#d9a05f"},{"name":"Butterum","hex":"#c68f65"},{"name":"Buttery","hex":"#ffc283"},{"name":"Buttery Croissant","hex":"#f6e19c"},{"name":"Buttery Leather","hex":"#d4b185"},{"name":"Buttery Salmon","hex":"#ffb19a"},{"name":"Buttery White","hex":"#f1ebda"},{"name":"Button Blue","hex":"#24a0ed"},{"name":"Button Eyes","hex":"#4f3a32"},{"name":"Button Mushroom","hex":"#ece6c8"},{"name":"Buzz","hex":"#f0c641"},{"name":"Buzz-In","hex":"#ffd756"},{"name":"Buzzard","hex":"#5f563f"},{"name":"Buzzards Bay","hex":"#017a79"},{"name":"By Gum","hex":"#816a38"},{"name":"By the Bayou","hex":"#007b90"},{"name":"By The Sea","hex":"#8d999e"},{"name":"Byakuroku Green","hex":"#a5ba93"},{"name":"Bygone","hex":"#918e8a"},{"name":"Bypass","hex":"#b6c4d2"},{"name":"Byron Place","hex":"#31667d"},{"name":"Byte Blue","hex":"#c5dce0"},{"name":"Byzantine","hex":"#bd33a4"},{"name":"Byzantine Blue","hex":"#006c6e"},{"name":"Byzantine Night Blue","hex":"#6a79f7"},{"name":"Byzantium","hex":"#702963"},{"name":"C-3PO","hex":"#c33140"},{"name":"C\'est La Vie","hex":"#83bce5"},{"name":"C64 Blue","hex":"#003aff"},{"name":"C64 NTSC","hex":"#4e7fff"},{"name":"C64 Purple","hex":"#6f6ed1"},{"name":"Cab Sav","hex":"#4a2e32"},{"name":"Cabal","hex":"#7f6473"},{"name":"Cabana Bay","hex":"#8ec1c0"},{"name":"Cabana Blue","hex":"#5b9099"},{"name":"Cabana Melon","hex":"#c88567"},{"name":"Cabaret","hex":"#cd526c"},{"name":"Cabaret Charm","hex":"#7c8ea6"},{"name":"Cabbage","hex":"#87d7be"},{"name":"Cabbage Blossom Violet","hex":"#724c7b"},{"name":"Cabbage Green","hex":"#807553"},{"name":"Cabbage Leaf","hex":"#dfe8d0"},{"name":"Cabbage Patch","hex":"#93c460"},{"name":"Cabbage Pont","hex":"#4c5544"},{"name":"Cabbage Rose","hex":"#c59f91"},{"name":"Cabernet","hex":"#8e5b68"},{"name":"Cabernet Craving","hex":"#6d3445"},{"name":"Cabin Fever","hex":"#5e5349"},{"name":"Cabin in the Woods","hex":"#5d4d47"},{"name":"Cabo","hex":"#cec0aa"},{"name":"Caboose","hex":"#a8a4a1"},{"name":"Cacao","hex":"#6b5848"},{"name":"Cacao Nibs","hex":"#80442f"},{"name":"Cachet Cream","hex":"#f3d9ba"},{"name":"Cacodemon Red","hex":"#9f0000"},{"name":"Cactus","hex":"#5b6f55"},{"name":"Cactus Blooms","hex":"#f6c79d"},{"name":"Cactus Blossom","hex":"#d8e5dd"},{"name":"Cactus Flower","hex":"#af416b"},{"name":"Cactus Garden","hex":"#7b8370"},{"name":"Cactus Green","hex":"#56603d"},{"name":"Cactus Hill","hex":"#b1a386"},{"name":"Cactus Sand","hex":"#9c9369"},{"name":"Cactus Spike","hex":"#c1e0a3"},{"name":"Cactus Valley","hex":"#88976b"},{"name":"Cactus Water","hex":"#d0f7e4"},{"name":"Cadaverous","hex":"#009977"},{"name":"Caddies Silk","hex":"#3e354d"},{"name":"Cadet","hex":"#536872"},{"name":"Cadet Blue","hex":"#5f9ea0"},{"name":"Cadet Grey","hex":"#91a3b0"},{"name":"Cadian","hex":"#90766e"},{"name":"Cadillac","hex":"#984961"},{"name":"Cadillac Coupe","hex":"#c0362c"},{"name":"Cadmium Blue","hex":"#0a1195"},{"name":"Cadmium Green","hex":"#006b3c"},{"name":"Cadmium Orange","hex":"#ed872d"},{"name":"Cadmium Purple","hex":"#b60c26"},{"name":"Cadmium Red","hex":"#e30022"},{"name":"Cadmium Violet","hex":"#7f3e98"},{"name":"Cadmium Yellow","hex":"#fff600"},{"name":"Caduceus Gold","hex":"#ffee66"},{"name":"Caduceus Staff","hex":"#eedd22"},{"name":"Caen Stone","hex":"#ecd0b1"},{"name":"Café","hex":"#986860"},{"name":"Café au Lait","hex":"#a57c5b"},{"name":"Café Crème","hex":"#c79685"},{"name":"Café de Paris","hex":"#889944"},{"name":"Cafe Expreso","hex":"#5e4c48"},{"name":"Cafe Latte","hex":"#d6c6b4"},{"name":"Café Noir","hex":"#4b3621"},{"name":"Cafe Ole","hex":"#9a7f79"},{"name":"Cafe Pink","hex":"#ecc1c2"},{"name":"Café Renversé","hex":"#ae8774"},{"name":"Cafe Royale","hex":"#6a4928"},{"name":"Caffeinated Cinnamon","hex":"#885511"},{"name":"Caffeine","hex":"#8a796a"},{"name":"Caicos Turquoise","hex":"#26b7b5"},{"name":"Cairns","hex":"#0a6b92"},{"name":"Cajeta","hex":"#c46d29"},{"name":"Cajun Brown","hex":"#5f3e41"},{"name":"Cajun Red","hex":"#a45a4a"},{"name":"Cajun Spice","hex":"#c3705f"},{"name":"Cake Batter","hex":"#f0eddb"},{"name":"Cake Crumbs","hex":"#e8d4bb"},{"name":"Cake Dough","hex":"#fce0a8"},{"name":"Cake Frosting","hex":"#f9dfe5"},{"name":"Cake Pop Pink","hex":"#f6cac3"},{"name":"Cake Spice","hex":"#d6a672"},{"name":"Cakepop Sorbet","hex":"#f8c649"},{"name":"Cal Poly Pomona Green","hex":"#1e4d2b"},{"name":"Cala Benirrás Blue","hex":"#0ac2c2"},{"name":"Calabash","hex":"#f8eb97"},{"name":"Calabash Clash","hex":"#728478"},{"name":"Calabrese","hex":"#f4a6a3"},{"name":"Calamansi","hex":"#fcffa4"},{"name":"Calamansi Green","hex":"#c4cc7a"},{"name":"Calamine BLue","hex":"#80ffcc"},{"name":"Calc Sinter","hex":"#e7e1dd"},{"name":"Calcareous Sinter","hex":"#ddeeff"},{"name":"Calcite Blue","hex":"#94b2b2"},{"name":"Calcite Grey Green","hex":"#52605f"},{"name":"Calcium","hex":"#f2f4e8"},{"name":"Calcium Rock","hex":"#eee9d9"},{"name":"Calculus","hex":"#a1ccb1"},{"name":"Caledor Sky","hex":"#31639c"},{"name":"Calfskin","hex":"#c1a188"},{"name":"Calgar Blue","hex":"#0485d1"},{"name":"Caliban Green","hex":"#005726"},{"name":"Calico","hex":"#d5b185"},{"name":"Calico Cat","hex":"#c48e36"},{"name":"Calico Dress","hex":"#3d4e67"},{"name":"Calico Rock","hex":"#9c9584"},{"name":"Calico Rose","hex":"#e5c1b3"},{"name":"Caliente","hex":"#95594a"},{"name":"California","hex":"#e98c3a"},{"name":"California Chamois","hex":"#e6b76c"},{"name":"California Coral","hex":"#e3aa94"},{"name":"California Dreamin\'","hex":"#93807f"},{"name":"California Dreaming","hex":"#dec569"},{"name":"California Girl","hex":"#fca716"},{"name":"California Gold Rush","hex":"#95743f"},{"name":"California Lilac","hex":"#bbc5e2"},{"name":"California Peach","hex":"#fcbe6a"},{"name":"California Poppy","hex":"#a83c3f"},{"name":"California Roll","hex":"#a09574"},{"name":"California Sagebrush","hex":"#959988"},{"name":"California Stucco","hex":"#c5ad9a"},{"name":"California Sunset","hex":"#ca1850"},{"name":"California Wine","hex":"#ca4b65"},{"name":"Call It a Night","hex":"#42364c"},{"name":"Calla","hex":"#f2dfb5"},{"name":"Calla Green","hex":"#747d3b"},{"name":"Calla Lily","hex":"#e4eaed"},{"name":"Calligraphy","hex":"#59636a"},{"name":"Calliope","hex":"#c89a8d"},{"name":"Calliste Green","hex":"#798052"},{"name":"Callisto","hex":"#cacfd3"},{"name":"Calm","hex":"#dfe9e6"},{"name":"Calm Air","hex":"#eed2ae"},{"name":"Calm Balm","hex":"#5e9d47"},{"name":"Calm Breeze","hex":"#e9ece4"},{"name":"Calm Day","hex":"#7caacf"},{"name":"Calm Interlude","hex":"#a7b0d5"},{"name":"Calm Iridescence","hex":"#dee2eb"},{"name":"Calm Thoughts","hex":"#e5ede2"},{"name":"Calm Tint","hex":"#eae3e9"},{"name":"Calm Water","hex":"#cdd9e8"},{"name":"Calm Waters","hex":"#e7fafa"},{"name":"Calming Effect","hex":"#cfd3a2"},{"name":"Calming Retreat","hex":"#eee0d1"},{"name":"Calming Silver Lavender","hex":"#b2a2c1"},{"name":"Calming Space","hex":"#aab7c1"},{"name":"Calmness","hex":"#68a895"},{"name":"Calthan Brown","hex":"#6d5044"},{"name":"Calypso","hex":"#3d7188"},{"name":"Calypso Berry","hex":"#c53a4b"},{"name":"Calypso Blue","hex":"#347d8b"},{"name":"Calypso Coral","hex":"#ec4a61"},{"name":"Calypso Green","hex":"#2e5f60"},{"name":"Calypso Orchid","hex":"#d978f0"},{"name":"Calypso Red","hex":"#de6b66"},{"name":"Camaron Pink","hex":"#fe828c"},{"name":"Camarone","hex":"#206937"},{"name":"Cambridge Blue","hex":"#a3c1ad"},{"name":"Cambridge Leather","hex":"#8c633c"},{"name":"Camel","hex":"#c69f59"},{"name":"Camel Brown","hex":"#a56639"},{"name":"Camel Cardinal","hex":"#cc9944"},{"name":"Camel Coat","hex":"#c5b39a"},{"name":"Camel Cord","hex":"#e0cb82"},{"name":"Camel Fur","hex":"#bb6600"},{"name":"Camel Hair","hex":"#dbb8a4"},{"name":"Camel Hair Coat","hex":"#f5b784"},{"name":"Camel Hide","hex":"#c1aa91"},{"name":"Camel Red","hex":"#e5743b"},{"name":"Camel Spider","hex":"#af8751"},{"name":"Camel Toe","hex":"#ac8a2a"},{"name":"Camel Train","hex":"#baae9d"},{"name":"Camel\'s Hump","hex":"#817667"},{"name":"Camelback","hex":"#c5aa85"},{"name":"Camelback Mountain","hex":"#d3b587"},{"name":"Cameleer","hex":"#e2af60"},{"name":"Camellia","hex":"#f6685a"},{"name":"Camellia Pink","hex":"#cd739d"},{"name":"Camellia Rose","hex":"#e94e6d"},{"name":"Camelot","hex":"#803a4b"},{"name":"Camembert","hex":"#fbf3df"},{"name":"Cameo","hex":"#f2debc"},{"name":"Cameo Appearance","hex":"#dfc1c3"},{"name":"Cameo Blue","hex":"#7097a2"},{"name":"Cameo Brown","hex":"#be847d"},{"name":"Cameo Cream","hex":"#f3e2c3"},{"name":"Cameo Green","hex":"#dce6e5"},{"name":"Cameo Peach","hex":"#ebcfc9"},{"name":"Cameo Pink","hex":"#efbbcc"},{"name":"Cameo Role","hex":"#ddcaaf"},{"name":"Cameo Rose","hex":"#f7dfd7"},{"name":"Cameo Stone","hex":"#ebdfd8"},{"name":"Cameroon Green","hex":"#60746d"},{"name":"Camisole","hex":"#fcd9c7"},{"name":"Camo","hex":"#7f8f4e"},{"name":"Camo Beige","hex":"#8c8475"},{"name":"Camo Clay","hex":"#747f71"},{"name":"Camo Green","hex":"#a5a542"},{"name":"Camouflage","hex":"#3c3910"},{"name":"Camouflage Green","hex":"#4b6113"},{"name":"Camouflage Olive","hex":"#a28f5c"},{"name":"Campanelle Noodle","hex":"#fcf7db"},{"name":"Campanula","hex":"#3473b7"},{"name":"Campánula","hex":"#3272af"},{"name":"Campanula Purple","hex":"#6c6d94"},{"name":"Campfire","hex":"#ce5f38"},{"name":"Campfire Ash","hex":"#ddd9ce"},{"name":"Campfire Blaze","hex":"#b67656"},{"name":"Campfire Smoke","hex":"#d5d1cb"},{"name":"Campground","hex":"#d0a569"},{"name":"Camping Tent","hex":"#b6afa0"},{"name":"Camping Trip","hex":"#67786e"},{"name":"Can Can","hex":"#d08a9b"},{"name":"Canada Goose Eggs","hex":"#eae2dd"},{"name":"Canadian Lake","hex":"#8f9aa4"},{"name":"Canadian Maple","hex":"#cab266"},{"name":"Canadian Pancake","hex":"#edd8c3"},{"name":"Canadian Pine","hex":"#2e7b52"},{"name":"Canadian Tuxedo","hex":"#579aca"},{"name":"Canadian Voodoo Grey","hex":"#b8b7a3"},{"name":"Canal Blue","hex":"#9cc2c5"},{"name":"Canal Street","hex":"#969281"},{"name":"Canaletto","hex":"#818c72"},{"name":"Canary","hex":"#fdff63"},{"name":"Canary Diamond","hex":"#ffce52"},{"name":"Canary Feather","hex":"#efde75"},{"name":"Canary Grass","hex":"#d0cca9"},{"name":"Canary Green","hex":"#ccd6bc"},{"name":"Canary Island","hex":"#e9d4a9"},{"name":"Canary Wharf","hex":"#91a1b5"},{"name":"Canary Yellow","hex":"#ffdf01"},{"name":"Cancer Seagreen Scarab","hex":"#27a0a8"},{"name":"Cancun Sand","hex":"#fbedd7"},{"name":"Candela","hex":"#bac4d5"},{"name":"Candelabra","hex":"#e1c161"},{"name":"Candid Blue","hex":"#6cc3e0"},{"name":"Candidate","hex":"#c3bc90"},{"name":"Candied Apple","hex":"#b95b6d"},{"name":"Candied Blueberry","hex":"#331166"},{"name":"Candied Ginger","hex":"#bfa387"},{"name":"Candied Snow","hex":"#d8fff3"},{"name":"Candied Yam","hex":"#f4935b"},{"name":"Candied Yams","hex":"#f9a765"},{"name":"Candle Bark","hex":"#c3bdaa"},{"name":"Candle Flame","hex":"#fff4a1"},{"name":"Candle Glow","hex":"#ffe8c3"},{"name":"Candle in the Wind","hex":"#f9ebbf"},{"name":"Candle Light","hex":"#ddc1a6"},{"name":"Candle Wax","hex":"#f2eacf"},{"name":"Candle Yellow","hex":"#e09b6e"},{"name":"Candlelight","hex":"#fcd917"},{"name":"Candlelight Dinner","hex":"#ceb3be"},{"name":"Candlelight Ivory","hex":"#fcf4e2"},{"name":"Candlelight Peach","hex":"#f8a39d"},{"name":"Candlelight Yellow","hex":"#f7f0c7"},{"name":"Candlelit Beige","hex":"#f1ede0"},{"name":"Candlestick Point","hex":"#fff1d5"},{"name":"Candlewick","hex":"#f2ebd3"},{"name":"Candy","hex":"#ff9b87"},{"name":"Candy Apple Red","hex":"#ff0800"},{"name":"Candy Bar","hex":"#ffb7d5"},{"name":"Candy Cane","hex":"#f7bfc2"},{"name":"Candy Coated","hex":"#ef9faa"},{"name":"Candy Corn","hex":"#fcfc5d"},{"name":"Candy Dreams","hex":"#e9aef2"},{"name":"Candy Drop","hex":"#c25d6a"},{"name":"Candy Floss","hex":"#e8a7e2"},{"name":"Candy Floss Cupcake","hex":"#fff0de"},{"name":"Candy Grape Fizz","hex":"#7755ee"},{"name":"Candy Grass","hex":"#33aa00"},{"name":"Candy Green","hex":"#33cc00"},{"name":"Candy Heart Pink","hex":"#f5a2a1"},{"name":"Candy Mix","hex":"#f3dfe3"},{"name":"Candy Pink","hex":"#ff63e9"},{"name":"Candy Tuft","hex":"#f1d7e4"},{"name":"Candy Violet","hex":"#895d8b"},{"name":"Candyman","hex":"#ff9e76"},{"name":"Candytuft","hex":"#edc9d8"},{"name":"Cane Sugar","hex":"#e3b982"},{"name":"Cane Sugar Glaze","hex":"#ddbb99"},{"name":"Cane Toad","hex":"#977042"},{"name":"Caneel Bay","hex":"#009bb3"},{"name":"Canewood","hex":"#d7b69a"},{"name":"Cannery Park","hex":"#bcb09e"},{"name":"Cannoli Cream","hex":"#edecdb"},{"name":"Cannon Ball","hex":"#484335"},{"name":"Cannon Barrel","hex":"#3c4142"},{"name":"Cannon Black","hex":"#251706"},{"name":"Cannon Grey","hex":"#646c64"},{"name":"Cannon Pink","hex":"#8e5164"},{"name":"Canoe","hex":"#ddc49e"},{"name":"Canoe Blue","hex":"#1d5671"},{"name":"Canola Oil","hex":"#f7eb7a"},{"name":"Canopy","hex":"#728f02"},{"name":"Cantaloupe","hex":"#ffd479"},{"name":"Cantaloupe Slice","hex":"#feb079"},{"name":"Cantankerous Coyote","hex":"#ac8d74"},{"name":"Cantankerous Hippo","hex":"#96887f"},{"name":"Canteen","hex":"#5e5347"},{"name":"Canter Peach","hex":"#f6d3bb"},{"name":"Cantera","hex":"#cec5af"},{"name":"Canterbury Bells","hex":"#b9c3e6"},{"name":"Canterbury Cathedral","hex":"#b2ab94"},{"name":"Canton","hex":"#649c97"},{"name":"Canton Jade","hex":"#bae7c7"},{"name":"Canvas","hex":"#bb8855"},{"name":"Canvas Cloth","hex":"#e6dfd2"},{"name":"Canvas Luggage","hex":"#e2d7c6"},{"name":"Canvas Satchel","hex":"#ccb88d"},{"name":"Canvas Tan","hex":"#ddd6c6"},{"name":"Canyon Blue","hex":"#607b8e"},{"name":"Canyon Clay","hex":"#cb7d6f"},{"name":"Canyon Cliffs","hex":"#ece3d1"},{"name":"Canyon Cloud","hex":"#aeafbb"},{"name":"Canyon Dusk","hex":"#ddc3b7"},{"name":"Canyon Echo","hex":"#e5e1cc"},{"name":"Canyon Falls","hex":"#97987f"},{"name":"Canyon Iris","hex":"#49548f"},{"name":"Canyon Mist","hex":"#a7a4c0"},{"name":"Canyon Peach","hex":"#eedacb"},{"name":"Canyon Rose","hex":"#b47571"},{"name":"Canyon Sand","hex":"#f2d6aa"},{"name":"Canyon Stone","hex":"#93625b"},{"name":"Canyon Sunset","hex":"#dd8869"},{"name":"Canyon Trail","hex":"#d6b8a9"},{"name":"Canyon Verde","hex":"#8a7e5c"},{"name":"Canyon View","hex":"#c3b39f"},{"name":"Canyon Wall","hex":"#a14935"},{"name":"Canyon Wind","hex":"#e3e5df"},{"name":"Canyonville","hex":"#f5ded1"},{"name":"Cǎo Lǜ Grass","hex":"#1fa774"},{"name":"Cape Cod","hex":"#4e5552"},{"name":"Cape Cod Bay","hex":"#557080"},{"name":"Cape Cod Blue","hex":"#91a2a6"},{"name":"Cape Honey","hex":"#fee0a5"},{"name":"Cape Hope","hex":"#d8d6d7"},{"name":"Cape Jasmine","hex":"#ffb95a"},{"name":"Cape Lee","hex":"#50818b"},{"name":"Cape Palliser","hex":"#75482f"},{"name":"Cape Pond","hex":"#0092ad"},{"name":"Cape Storm","hex":"#3c4754"},{"name":"Cape Verde","hex":"#01554f"},{"name":"Capella","hex":"#d9ced2"},{"name":"Caper","hex":"#afc182"},{"name":"Caper Green","hex":"#847640"},{"name":"Capercaillie Mauve","hex":"#78728c"},{"name":"Capers","hex":"#897a3e"},{"name":"Capetown Cream","hex":"#fcebce"},{"name":"Capital Blue","hex":"#1a4157"},{"name":"Capital Grains","hex":"#dbd0a8"},{"name":"Capital Yellow","hex":"#e6ba45"},{"name":"Capitalino Cactus","hex":"#008f4c"},{"name":"Capocollo","hex":"#d9544d"},{"name":"Caponata","hex":"#822a10"},{"name":"Cappuccino","hex":"#704a3a"},{"name":"Cappuccino Bombe","hex":"#b4897d"},{"name":"Cappuccino Cosmico","hex":"#e1ddcd"},{"name":"Cappuccino Froth","hex":"#c8b089"},{"name":"Capri","hex":"#00bfff"},{"name":"Capri Breeze","hex":"#0089a8"},{"name":"Capri Cream","hex":"#f1f0d6"},{"name":"Capri Fashion Pink","hex":"#ac839c"},{"name":"Capri Isle","hex":"#4f5855"},{"name":"Capri Water Blue","hex":"#abe2d6"},{"name":"Capricious Purple","hex":"#bb00dd"},{"name":"Capricorn Golden Key","hex":"#fecb51"},{"name":"Caps","hex":"#7e7a75"},{"name":"Capsella","hex":"#6d8a74"},{"name":"Capsicum Red","hex":"#76392e"},{"name":"Capstan","hex":"#007eb0"},{"name":"Captain Blue","hex":"#005171"},{"name":"Captain Kirk","hex":"#9b870c"},{"name":"Captain Nemo","hex":"#828080"},{"name":"Captains Blue","hex":"#557088"},{"name":"Captivated","hex":"#947cae"},{"name":"Captivating","hex":"#d8cace"},{"name":"Captivating Cream","hex":"#f4d9b1"},{"name":"Captive","hex":"#005b6a"},{"name":"Capture","hex":"#2cbaa3"},{"name":"Capulet Olive","hex":"#6e6d4a"},{"name":"Caput Mortuum","hex":"#592720"},{"name":"Caput Mortuum Grey Red","hex":"#6f585b"},{"name":"Carafe","hex":"#5d473a"},{"name":"Caraïbe","hex":"#795f4d"},{"name":"Carambar","hex":"#552233"},{"name":"Carambola","hex":"#efebd1"},{"name":"Caramel","hex":"#af6f09"},{"name":"Caramel Apple","hex":"#b87a59"},{"name":"Caramel Bar","hex":"#cc8654"},{"name":"Caramel Brown","hex":"#b18775"},{"name":"Caramel Cafe","hex":"#864c24"},{"name":"Caramel Café","hex":"#8e5626"},{"name":"Caramel Candy","hex":"#b3715d"},{"name":"Caramel Cloud","hex":"#d4af85"},{"name":"Caramel Coating","hex":"#bb7711"},{"name":"Caramel Cream","hex":"#f4b58f"},{"name":"Caramel Crumb","hex":"#c39355"},{"name":"Caramel Cupcake","hex":"#b98c5d"},{"name":"Caramel Dream","hex":"#b8623b"},{"name":"Caramel Finish","hex":"#ffd59a"},{"name":"Caramel Gold","hex":"#b1936d"},{"name":"Caramel Ice","hex":"#eec9aa"},{"name":"Caramel Infused","hex":"#cc7755"},{"name":"Caramel Kiss","hex":"#b08a61"},{"name":"Caramel Latte","hex":"#8c6342"},{"name":"Caramel Macchiato","hex":"#c58d4b"},{"name":"Caramel Milk","hex":"#ddc283"},{"name":"Caramel Mousse","hex":"#e5caa4"},{"name":"Caramel Powder","hex":"#eebb99"},{"name":"Caramel Sauce","hex":"#b3804d"},{"name":"Caramel Sundae","hex":"#a9876a"},{"name":"Caramel Swirl","hex":"#8f6a4f"},{"name":"Caramelize","hex":"#d58a37"},{"name":"Caramelized","hex":"#ba947f"},{"name":"Caramelized Orange","hex":"#ef924a"},{"name":"Caramelized Pears","hex":"#e7d5ad"},{"name":"Caramelized Pecan","hex":"#a17b4d"},{"name":"Caramelized Walnut","hex":"#6e564a"},{"name":"Caramelo Dulce","hex":"#d69e6b"},{"name":"Caraquenian Crimson","hex":"#9c0013"},{"name":"Caravel Brown","hex":"#8c6e54"},{"name":"Caraway","hex":"#a19473"},{"name":"Caraway Brown","hex":"#6d563c"},{"name":"Caraway Seeds","hex":"#dfd5bb"},{"name":"Carbide","hex":"#316382"},{"name":"Carbon","hex":"#333333"},{"name":"Carbon Blue","hex":"#373c4f"},{"name":"Carbon Copy","hex":"#545554"},{"name":"Carbon Dating","hex":"#565b58"},{"name":"Carbon Fiber","hex":"#2e2e2e"},{"name":"Carbon Footprint","hex":"#7b808b"},{"name":"Card Table Green","hex":"#00512c"},{"name":"Cardamom","hex":"#aaaa77"},{"name":"Cardamom Fragrance","hex":"#d7e2bc"},{"name":"Cardamom Green","hex":"#989057"},{"name":"Cardamom Spice","hex":"#837165"},{"name":"Cardboard","hex":"#c19a6c"},{"name":"Carded Wool","hex":"#e4ddce"},{"name":"Cardin Green","hex":"#1b3427"},{"name":"Cardinal","hex":"#c41e3a"},{"name":"Cardinal Mauve","hex":"#2c284c"},{"name":"Cardinal Pink","hex":"#8c055e"},{"name":"Cardinal Rage","hex":"#d10929"},{"name":"Cardinal Red","hex":"#9b365e"},{"name":"Cardoon","hex":"#9aae8c"},{"name":"Cardueline Finch","hex":"#957b38"},{"name":"Carefree","hex":"#dce9e9"},{"name":"Carefree Sky","hex":"#a6cdde"},{"name":"Careys Pink","hex":"#c99aa0"},{"name":"Cargo","hex":"#8f755b"},{"name":"Cargo Green","hex":"#c8c5a7"},{"name":"Cargo Pants","hex":"#cdc4ae"},{"name":"Cargo River","hex":"#cfcdbb"},{"name":"Caribbean","hex":"#caf0e5"},{"name":"Caribbean Blue","hex":"#1ac1dd"},{"name":"Caribbean Coast","hex":"#93c5dd"},{"name":"Caribbean Coral","hex":"#c07761"},{"name":"Caribbean Cruise","hex":"#3f9da9"},{"name":"Caribbean Current","hex":"#006e6e"},{"name":"Caribbean Dream","hex":"#007180"},{"name":"Caribbean Green","hex":"#00cc99"},{"name":"Caribbean Mist","hex":"#cadeea"},{"name":"Caribbean Pleasure","hex":"#d5dcce"},{"name":"Caribbean Sea","hex":"#0087a7"},{"name":"Caribbean Sky","hex":"#819ecb"},{"name":"Caribbean Splash","hex":"#00697c"},{"name":"Caribbean Sunrise","hex":"#f5daaa"},{"name":"Caribbean Swim","hex":"#126366"},{"name":"Caribbean Turquoise","hex":"#009d94"},{"name":"Caribe","hex":"#147d87"},{"name":"Caribou","hex":"#816c5e"},{"name":"Caribou Herd","hex":"#cda563"},{"name":"Carissima","hex":"#e68095"},{"name":"Carla","hex":"#f5f9cb"},{"name":"Carley\'s Rose","hex":"#a87376"},{"name":"Carlisle","hex":"#45867c"},{"name":"Carmel","hex":"#915f3d"},{"name":"Carmel Mission","hex":"#927f76"},{"name":"Carmel Woods","hex":"#8d6b3b"},{"name":"Carmelite","hex":"#b98970"},{"name":"Carmelito","hex":"#bb534c"},{"name":"Carmen","hex":"#7c383f"},{"name":"Carmen Miranda","hex":"#903e2f"},{"name":"Carmine","hex":"#d60036"},{"name":"Carmine Carnation","hex":"#ad4b53"},{"name":"Carmine Pink","hex":"#eb4c42"},{"name":"Carmine Red","hex":"#ff0038"},{"name":"Carmine Rose","hex":"#e35b8f"},{"name":"Carmoisine","hex":"#b31c45"},{"name":"Carnaby Tan","hex":"#5b3a24"},{"name":"Carnage Red","hex":"#940008"},{"name":"Carnal Brown","hex":"#bb8866"},{"name":"Carnal Pink","hex":"#ef9cb5"},{"name":"Carnation","hex":"#fd798f"},{"name":"Carnation Bloom","hex":"#f9c0be"},{"name":"Carnation Bouquet","hex":"#f5c0d0"},{"name":"Carnation Coral","hex":"#edb9ad"},{"name":"Carnation Festival","hex":"#915870"},{"name":"Carnation Pink","hex":"#ff7fa7"},{"name":"Carnation Rose","hex":"#ce94c2"},{"name":"Carnelian","hex":"#b31b1b"},{"name":"Carnival","hex":"#eb882c"},{"name":"Carnival Night","hex":"#006e7a"},{"name":"Carnivore","hex":"#991111"},{"name":"Caro","hex":"#ffcac3"},{"name":"Carob Brown","hex":"#885c4e"},{"name":"Carob Chip","hex":"#5a484b"},{"name":"Carol","hex":"#338dae"},{"name":"Carol\'s Purr","hex":"#77a135"},{"name":"Carolina","hex":"#cbefcb"},{"name":"Carolina Blue","hex":"#8ab8fe"},{"name":"Carolina Green","hex":"#008b6d"},{"name":"Carolina Parakeet","hex":"#d8df80"},{"name":"Carolina Reaper","hex":"#ff1500"},{"name":"Carona","hex":"#fba52e"},{"name":"Carotene","hex":"#fdb793"},{"name":"Carousel Pink","hex":"#f8dbe0"},{"name":"Carpaccio","hex":"#e34234"},{"name":"Carpe Diem","hex":"#905755"},{"name":"Carpet Moss","hex":"#00aa33"},{"name":"Carrageen Moss","hex":"#905d36"},{"name":"Carrara","hex":"#eeebe4"},{"name":"Carrara Marble","hex":"#e8e7d7"},{"name":"Carriage","hex":"#6c6358"},{"name":"Carriage Door","hex":"#958d79"},{"name":"Carriage Green","hex":"#254d48"},{"name":"Carriage Red","hex":"#8c403d"},{"name":"Carriage Ride","hex":"#8a8dc4"},{"name":"Carriage Stone","hex":"#7e7265"},{"name":"Carriage Yellow","hex":"#ffb756"},{"name":"Carrier Pigeon Blue","hex":"#889398"},{"name":"Carroburg Crimson","hex":"#a82a70"},{"name":"Carrot","hex":"#fd6f3b"},{"name":"Carrot Cake","hex":"#bf6f31"},{"name":"Carrot Curl","hex":"#fe7a04"},{"name":"Carrot Flower","hex":"#cbd3c1"},{"name":"Carrot Lava","hex":"#fc5a1f"},{"name":"Carrot Orange","hex":"#ed9121"},{"name":"Carrot Stick","hex":"#df7836"},{"name":"Carte Blanche","hex":"#eeeeff"},{"name":"Carter\'s Scroll","hex":"#405978"},{"name":"Carton","hex":"#bb9e7e"},{"name":"Cartoon Violence","hex":"#d01722"},{"name":"Cartwheel","hex":"#665537"},{"name":"Carved Wood","hex":"#937a62"},{"name":"Carving Party","hex":"#f0c39f"},{"name":"Casa Blanca","hex":"#f4ecd8"},{"name":"Casa De Oro","hex":"#cf6837"},{"name":"Casa del Mar","hex":"#cacfe6"},{"name":"Casa Talec","hex":"#c49ca5"},{"name":"Casa Verde","hex":"#abb790"},{"name":"Casablanca","hex":"#f0b253"},{"name":"Casal","hex":"#3f545a"},{"name":"Casandora Yellow","hex":"#fece5a"},{"name":"Casandra","hex":"#7c4549"},{"name":"Cascade","hex":"#d4ede6"},{"name":"Cascade Beige","hex":"#e7dbca"},{"name":"Cascade Green","hex":"#a1c2b9"},{"name":"Cascade Tour","hex":"#697f8e"},{"name":"Cascade Twilight","hex":"#234893"},{"name":"Cascade White","hex":"#ecf2ec"},{"name":"Cascades","hex":"#273e3e"},{"name":"Cascading White","hex":"#f7f5f6"},{"name":"Cascara","hex":"#ee4433"},{"name":"Cashew","hex":"#a47149"},{"name":"Cashew Cheese","hex":"#fcf9bd"},{"name":"Cashew Nut","hex":"#edccb3"},{"name":"Cashmere","hex":"#d1b399"},{"name":"Cashmere Blue","hex":"#a5b8d0"},{"name":"Cashmere Clay","hex":"#cda291"},{"name":"Cashmere Rose","hex":"#cb8097"},{"name":"Cashmere Sweater","hex":"#fef2d2"},{"name":"Casino Lights","hex":"#f9f2b3"},{"name":"Casket","hex":"#a49186"},{"name":"Casper","hex":"#aab5b8"},{"name":"Caspian Sea","hex":"#4f6f91"},{"name":"Caspian Tide","hex":"#aec7db"},{"name":"Cassandra\'s Curse","hex":"#bb7700"},{"name":"Cassava Cake","hex":"#e7c084"},{"name":"Cassia Buds","hex":"#e0cdda"},{"name":"Cassiopeia","hex":"#aed0c9"},{"name":"Cassiterite Brown","hex":"#623c1f"},{"name":"Cast Iron","hex":"#64645a"},{"name":"Castaway","hex":"#6dbac0"},{"name":"Castaway Beach","hex":"#d0c19f"},{"name":"Castaway Cove","hex":"#7a9291"},{"name":"Castaway Lagoon","hex":"#607374"},{"name":"Castellan Green","hex":"#455440"},{"name":"Castellina","hex":"#a27040"},{"name":"Castelvetrano Olive","hex":"#677727"},{"name":"Caster Sugar","hex":"#ffffe8"},{"name":"Castilian Pink","hex":"#d4b3aa"},{"name":"Casting Sea","hex":"#4586c7"},{"name":"Casting Shadow","hex":"#9da7a0"},{"name":"Castle Beige","hex":"#e0d5ca"},{"name":"Castle Hill","hex":"#95827b"},{"name":"Castle In The Clouds","hex":"#efdcca"},{"name":"Castle in the Sky","hex":"#d1eaed"},{"name":"Castle Mist","hex":"#bdaeb7"},{"name":"Castle Moat","hex":"#8b6b47"},{"name":"Castle Path","hex":"#c5baaa"},{"name":"Castle Ridge","hex":"#eadec7"},{"name":"Castle Stone","hex":"#525746"},{"name":"Castle Wall","hex":"#c2bba2"},{"name":"Castlegate","hex":"#a0a5a5"},{"name":"Castlerock","hex":"#5f5e62"},{"name":"Castleton Green","hex":"#00564f"},{"name":"Castlevania Heart","hex":"#a80020"},{"name":"Castor Grey","hex":"#676a64"},{"name":"Castro","hex":"#44232f"},{"name":"Casual Blue","hex":"#498090"},{"name":"Casual Day","hex":"#95bac2"},{"name":"Casual Elegance","hex":"#dfd5c8"},{"name":"Casual Grey","hex":"#a09d98"},{"name":"Casual Khaki","hex":"#d3c5af"},{"name":"Casual Water","hex":"#8fabd6"},{"name":"Cat Person","hex":"#636d70"},{"name":"Cat\'s Cream","hex":"#e7e7e3"},{"name":"Cat\'s Eye Marble","hex":"#d6a75d"},{"name":"Cat\'s Purr","hex":"#0071a0"},{"name":"Catachan Green","hex":"#475742"},{"name":"Catacomb Bone","hex":"#e2dccc"},{"name":"Catacomb Walls","hex":"#dbd7d0"},{"name":"Catalan","hex":"#429395"},{"name":"Catalina","hex":"#72a49f"},{"name":"Catalina Blue","hex":"#062a78"},{"name":"Catalina Coast","hex":"#5c7884"},{"name":"Catalina Green","hex":"#859475"},{"name":"Catalina Tile","hex":"#efac73"},{"name":"Catarina Green","hex":"#90c4b4"},{"name":"Catawba","hex":"#703642"},{"name":"Catawba Grape","hex":"#634049"},{"name":"Catch The Wave","hex":"#b5dcd8"},{"name":"Caterpillar","hex":"#66a545"},{"name":"Caterpillar Green","hex":"#146b47"},{"name":"Catfish","hex":"#657d82"},{"name":"Cathay Spice","hex":"#9d632d"},{"name":"Cathedral","hex":"#acaaa7"},{"name":"Cathedral Glass","hex":"#7a999c"},{"name":"Cathedral Grey","hex":"#aba9a7"},{"name":"Cathedral Stone","hex":"#80796e"},{"name":"Cathode Green","hex":"#00ff55"},{"name":"Catkin Yellow","hex":"#cca800"},{"name":"Catmint","hex":"#c9a8ce"},{"name":"Catnip","hex":"#80aa95"},{"name":"Catnip Wood","hex":"#6f6066"},{"name":"Catskill Brown","hex":"#595452"},{"name":"Catskill White","hex":"#e0e4dc"},{"name":"Cattail Brown","hex":"#917546"},{"name":"Cattail Red","hex":"#b64925"},{"name":"Catwalk","hex":"#4a4649"},{"name":"Caught Red-Handed","hex":"#be4236"},{"name":"Caulerpa Lentillifera","hex":"#599c99"},{"name":"Cauliflower","hex":"#ebe5d0"},{"name":"Cauliflower Cream","hex":"#f2e4c7"},{"name":"Causeway","hex":"#6f788f"},{"name":"Caustic Green","hex":"#11dd00"},{"name":"Cautious Blue","hex":"#d5dde5"},{"name":"Cautious Grey","hex":"#dfd8d9"},{"name":"Cautious Jade","hex":"#dae4de"},{"name":"Cavalry","hex":"#3f4c5a"},{"name":"Cavalry Brown","hex":"#990003"},{"name":"Cavan","hex":"#dce2ce"},{"name":"Cave Lake","hex":"#52b7c6"},{"name":"Cave of the Winds","hex":"#86736e"},{"name":"Cave Painting","hex":"#aa1100"},{"name":"Cave Pearl","hex":"#d6e5e2"},{"name":"Caveman","hex":"#625c58"},{"name":"Cavendish","hex":"#fed200"},{"name":"Cavern Clay","hex":"#b69981"},{"name":"Cavern Echo","hex":"#cec3b3"},{"name":"Cavern Moss","hex":"#92987d"},{"name":"Cavern Pink","hex":"#e0b8b1"},{"name":"Cavern Sand","hex":"#947054"},{"name":"Cavernous","hex":"#515252"},{"name":"Caviar","hex":"#2b2c30"},{"name":"Caviar Black","hex":"#533e39"},{"name":"Caviar Couture","hex":"#772244"},{"name":"Cavolo Nero","hex":"#72939e"},{"name":"Cay","hex":"#a6d0d6"},{"name":"Cayenne","hex":"#941100"},{"name":"Cayman Bay","hex":"#52798d"},{"name":"Cayman Green","hex":"#495a44"},{"name":"Ce Soir","hex":"#9271a7"},{"name":"Cedar","hex":"#463430"},{"name":"Cedar Chest","hex":"#c95a49"},{"name":"Cedar Forest","hex":"#788078"},{"name":"Cedar Glen","hex":"#686647"},{"name":"Cedar Green","hex":"#69743e"},{"name":"Cedar Grove","hex":"#bf6955"},{"name":"Cedar Mill","hex":"#b7bcad"},{"name":"Cedar Plank","hex":"#8b786f"},{"name":"Cedar Plank Salmon","hex":"#a96a50"},{"name":"Cedar Ridge","hex":"#9b6663"},{"name":"Cedar Staff","hex":"#91493e"},{"name":"Cedar Wood","hex":"#a97367"},{"name":"Cedar Wood Finish","hex":"#711a00"},{"name":"Cedarville","hex":"#dda896"},{"name":"Ceil","hex":"#92a1cf"},{"name":"Ceiling Bright White","hex":"#e9ebe7"},{"name":"Celadon","hex":"#ace1af"},{"name":"Celadon Blue","hex":"#007ba7"},{"name":"Celadon Glaze","hex":"#ccd4cb"},{"name":"Celadon Green","hex":"#2f847c"},{"name":"Celadon Porcelain","hex":"#7ebea5"},{"name":"Celadon Sorbet","hex":"#b1dac6"},{"name":"Celadon Tint","hex":"#c6cab8"},{"name":"Celandine","hex":"#ebe667"},{"name":"Celandine Green","hex":"#b8bfaf"},{"name":"Celeb City","hex":"#9d86ad"},{"name":"Celebration","hex":"#e6c17a"},{"name":"Celebration Blue","hex":"#008bc4"},{"name":"Celery","hex":"#b4c04c"},{"name":"Celery Bunch","hex":"#d4e0b3"},{"name":"Celery Green","hex":"#c5cc7b"},{"name":"Celery Ice","hex":"#eaebd1"},{"name":"Celery Mousse","hex":"#c1fd95"},{"name":"Celery Powder","hex":"#c5bda5"},{"name":"Celery Root","hex":"#d4e4ba"},{"name":"Celery Satin","hex":"#d0d8be"},{"name":"Celery Scepter","hex":"#e1df9a"},{"name":"Celery Sprig","hex":"#9ed686"},{"name":"Celery Stick","hex":"#caedd0"},{"name":"Celery Victor","hex":"#cceec2"},{"name":"Celery White","hex":"#dbd9cd"},{"name":"Celeste","hex":"#b2ffff"},{"name":"Celeste Blue","hex":"#406374"},{"name":"Celestial","hex":"#007894"},{"name":"Celestial Alien","hex":"#11cc00"},{"name":"Celestial Blue","hex":"#2c4d69"},{"name":"Celestial Cathedral","hex":"#daeaf6"},{"name":"Celestial Coral","hex":"#dd4455"},{"name":"Celestial Dragon","hex":"#992266"},{"name":"Celestial Glow","hex":"#eaebe9"},{"name":"Celestial Green","hex":"#2ddfc1"},{"name":"Celestial Horizon","hex":"#7c94b3"},{"name":"Celestial Indigo","hex":"#091f92"},{"name":"Celestial Light","hex":"#c7dae8"},{"name":"Celestial Moon","hex":"#e3d4b9"},{"name":"Celestial Pink","hex":"#9c004a"},{"name":"Celestial Plum","hex":"#3c7ac2"},{"name":"Celestine","hex":"#85c1c4"},{"name":"Celestine Spring","hex":"#24a4c8"},{"name":"Celestra Grey","hex":"#99a7ab"},{"name":"Celestyn","hex":"#b5c7d2"},{"name":"Celine","hex":"#826167"},{"name":"Cellar Door","hex":"#75553f"},{"name":"Cellini Gold","hex":"#ddb582"},{"name":"Cello","hex":"#3a4e5f"},{"name":"Celluloid","hex":"#515153"},{"name":"Celosia Orange","hex":"#e76a35"},{"name":"Celtic","hex":"#2b3f36"},{"name":"Celtic Blue","hex":"#246bce"},{"name":"Celtic Clover","hex":"#006940"},{"name":"Celtic Green","hex":"#1f6954"},{"name":"Celtic Grey","hex":"#c5d4ce"},{"name":"Celtic Linen","hex":"#f5e5ce"},{"name":"Celtic Queen","hex":"#00886b"},{"name":"Celtic Rush","hex":"#2e4c5b"},{"name":"Celtic Spring","hex":"#aadeb2"},{"name":"Celuce","hex":"#8bab68"},{"name":"Cembra Blossom","hex":"#725671"},{"name":"Cement","hex":"#a5a391"},{"name":"Cement Feet","hex":"#7b737b"},{"name":"Cement Greige","hex":"#b5aba4"},{"name":"Cemetery Ash","hex":"#c0c7d0"},{"name":"Cendre Blue","hex":"#3e7fa5"},{"name":"Census","hex":"#327a68"},{"name":"Centaur","hex":"#90673f"},{"name":"Centaur Brown","hex":"#8b6a4f"},{"name":"Centennial Rose","hex":"#b3a7a6"},{"name":"Centeōtl Yellow","hex":"#f7e077"},{"name":"Center Earth","hex":"#685549"},{"name":"Center Ridge","hex":"#817a69"},{"name":"Center Stage","hex":"#ffc100"},{"name":"Centipede Brown","hex":"#6d2400"},{"name":"Centra","hex":"#c08f45"},{"name":"Centre Stage","hex":"#c8c7cb"},{"name":"Century\'s Last Sunset","hex":"#9c7b87"},{"name":"Ceramic","hex":"#fcfff9"},{"name":"Ceramic Beige","hex":"#edd1ac"},{"name":"Ceramic Blue Turquoise","hex":"#16a29a"},{"name":"Ceramic Brown","hex":"#a05843"},{"name":"Ceramic Glaze","hex":"#e8a784"},{"name":"Ceramic Green","hex":"#3bb773"},{"name":"Ceramic Pot","hex":"#908268"},{"name":"Ceramite White","hex":"#fefee0"},{"name":"Cereal Flake","hex":"#efd7ab"},{"name":"Cerebellum Grey","hex":"#cccbcd"},{"name":"Cerebral Grey","hex":"#cccccc"},{"name":"Ceremonial Gold","hex":"#d69e59"},{"name":"Ceremonial Grey","hex":"#91998e"},{"name":"Ceremonial Purple","hex":"#2a2756"},{"name":"Cerignola Olive","hex":"#997b00"},{"name":"Cerise","hex":"#ad134e"},{"name":"Cerise Pink","hex":"#ec3b83"},{"name":"Cerise Red","hex":"#de3163"},{"name":"Certain Peach","hex":"#f2bda2"},{"name":"Cerulean","hex":"#55aaee"},{"name":"Cerulean Blue","hex":"#2a52be"},{"name":"Cerulean Frost","hex":"#6d9bc3"},{"name":"Cerulean Tint","hex":"#acbfcd"},{"name":"Cetacean Blue","hex":"#001440"},{"name":"Ceylanite","hex":"#33431e"},{"name":"Ceylon Cream","hex":"#f3e9d6"},{"name":"Ceylon Yellow","hex":"#d4ae40"},{"name":"Ceylonese","hex":"#756858"},{"name":"CG Blue","hex":"#007aa5"},{"name":"CG Red","hex":"#e03c31"},{"name":"CGA Blue","hex":"#56ffff"},{"name":"CGA Pink","hex":"#fc0fc0"},{"name":"Chá Lǜ Green","hex":"#77926f"},{"name":"Chaat Masala","hex":"#ec7d2c"},{"name":"Chablis","hex":"#fde9e0"},{"name":"Chafed Wheat","hex":"#f6e0cf"},{"name":"Chagall Green","hex":"#008b62"},{"name":"Chai","hex":"#ebcfae"},{"name":"Chai Latte","hex":"#f9cba0"},{"name":"Chai Spice","hex":"#bd7c4f"},{"name":"Chai Tea","hex":"#a97b2d"},{"name":"Chai Tea Latte","hex":"#efd7b3"},{"name":"Chain Gang Grey","hex":"#708090"},{"name":"Chain Mail","hex":"#81777f"},{"name":"Chain Reaction","hex":"#a4a6a4"},{"name":"Chaise Mauve","hex":"#c1b2b3"},{"name":"Chakra","hex":"#8b5e8f"},{"name":"Chalcedony","hex":"#dddd99"},{"name":"Chalcedony Green","hex":"#4b6057"},{"name":"Chalcedony Violet","hex":"#6770ae"},{"name":"Chalet","hex":"#c29867"},{"name":"Chalet Green","hex":"#5a6e41"},{"name":"Chalk","hex":"#edeae5"},{"name":"Chalk Beige","hex":"#d6c5b4"},{"name":"Chalk Blue","hex":"#ccdad7"},{"name":"Chalk Dust","hex":"#eaebe6"},{"name":"Chalk Pink","hex":"#e6c5c8"},{"name":"Chalk Violet","hex":"#8f7da5"},{"name":"Chalkware","hex":"#e0ceb7"},{"name":"Chalky","hex":"#dfc281"},{"name":"Chalky Blue White","hex":"#d0ebf1"},{"name":"Challah Bread","hex":"#cd7a50"},{"name":"Chambray","hex":"#475877"},{"name":"Chambray Blue","hex":"#93aece"},{"name":"Chameleon","hex":"#cedaac"},{"name":"Chameleon Tango","hex":"#c0c2a0"},{"name":"Chamois","hex":"#e8cd9a"},{"name":"Chamois Cloth","hex":"#f0e1d0"},{"name":"Chamois Leather","hex":"#ad8867"},{"name":"Chamois Tan","hex":"#b3a385"},{"name":"Chamois Yellow","hex":"#986e19"},{"name":"Chamoisee","hex":"#a0785a"},{"name":"Chamomile","hex":"#e4c697"},{"name":"Chamomile Tea","hex":"#dac395"},{"name":"Champagne","hex":"#e9d2ac"},{"name":"Champagne Beige","hex":"#d4c49e"},{"name":"Champagne Bliss","hex":"#f0e1c5"},{"name":"Champagne Bubbles","hex":"#ddcead"},{"name":"Champagne Burst","hex":"#f1e4cb"},{"name":"Champagne Cocktail","hex":"#e3d7ae"},{"name":"Champagne Elegance","hex":"#ebd3e4"},{"name":"Champagne Flute","hex":"#f6ece2"},{"name":"Champagne Gold","hex":"#e8d6b3"},{"name":"Champagne Grape","hex":"#c5b067"},{"name":"Champagne Ice","hex":"#f3e5dd"},{"name":"Champagne Peach","hex":"#faddc4"},{"name":"Champagne Pink","hex":"#f0dccb"},{"name":"Champagne Rose","hex":"#e3d6cc"},{"name":"Champagne Wishes","hex":"#efd4ae"},{"name":"Champignon","hex":"#949089"},{"name":"Champion","hex":"#7b5986"},{"name":"Champion Blue","hex":"#606788"},{"name":"Champlain Blue","hex":"#435572"},{"name":"Chance of Rain","hex":"#a0a6a9"},{"name":"Chandra Cream","hex":"#ecba5d"},{"name":"Changeling Pink","hex":"#f4afcd"},{"name":"Channel","hex":"#f1c3c2"},{"name":"Channel Marker Green","hex":"#04d8b2"},{"name":"Chanoyu","hex":"#eee8d2"},{"name":"Chanterelle","hex":"#daa520"},{"name":"Chanterelle Sauce","hex":"#a28776"},{"name":"Chanterelles","hex":"#ffc66e"},{"name":"Chanticleer","hex":"#870000"},{"name":"Chantilly","hex":"#edb8c7"},{"name":"Chantilly Lace","hex":"#f1e2de"},{"name":"Chaos Black","hex":"#0f0f0f"},{"name":"Chaotic Red","hex":"#740600"},{"name":"Chaotic Roses","hex":"#bb2266"},{"name":"Chaparral","hex":"#e5d0b0"},{"name":"Chapeau Violet","hex":"#dee5ec"},{"name":"Chapel Blue","hex":"#b0d2e7"},{"name":"Chapel Wall","hex":"#ede2ac"},{"name":"Chaps","hex":"#644b41"},{"name":"Chapter","hex":"#9f9369"},{"name":"Charade","hex":"#394043"},{"name":"Charadon Granite","hex":"#504d4c"},{"name":"Charcoal","hex":"#343837"},{"name":"Charcoal Blue","hex":"#67778a"},{"name":"Charcoal Briquette","hex":"#5d625c"},{"name":"Charcoal Dust","hex":"#595758"},{"name":"Charcoal Grey","hex":"#6e6969"},{"name":"Charcoal Light","hex":"#726e68"},{"name":"Charcoal Plum","hex":"#6a6a6f"},{"name":"Charcoal Sketch","hex":"#5d5b56"},{"name":"Charcoal Smoke","hex":"#474f43"},{"name":"Charcoal Smudge","hex":"#60605e"},{"name":"Charcoal Tint","hex":"#949d8d"},{"name":"Chard","hex":"#48553f"},{"name":"Chardon","hex":"#f8eadf"},{"name":"Chardonnay","hex":"#efe8bc"},{"name":"Charisma","hex":"#632a60"},{"name":"Charismatic","hex":"#e7c180"},{"name":"Charismatic Red","hex":"#ee2244"},{"name":"Charismatic Sky","hex":"#9ac1dc"},{"name":"Charleston Cherry","hex":"#9f414b"},{"name":"Charleston Chocolate","hex":"#c09278"},{"name":"Charleston Green","hex":"#232b2b"},{"name":"Charlie Brown","hex":"#995500"},{"name":"Charlie Horse","hex":"#948263"},{"name":"Charlock","hex":"#e2e483"},{"name":"Charlotte","hex":"#a4dce6"},{"name":"Charm","hex":"#d0748b"},{"name":"Charm Pink","hex":"#e68fac"},{"name":"Charmed Chalice","hex":"#a1a1a0"},{"name":"Charmed Green","hex":"#007f3a"},{"name":"Charming Cherry","hex":"#ff90a2"},{"name":"Charming Green","hex":"#d4e092"},{"name":"Charming Nature","hex":"#11bb44"},{"name":"Charming Peach","hex":"#f5ad75"},{"name":"Charming Pink","hex":"#edd3d2"},{"name":"Charming Violet","hex":"#8c7281"},{"name":"Charoite Violet","hex":"#6a577f"},{"name":"Charolais Cattle","hex":"#f1ebea"},{"name":"Charon","hex":"#a1a29c"},{"name":"Charred Brown","hex":"#3e0007"},{"name":"Charred Chocolate","hex":"#553b3d"},{"name":"Charred Clay","hex":"#885132"},{"name":"Charred Hickory","hex":"#5b4e4a"},{"name":"Charted","hex":"#b2cce1"},{"name":"Charter","hex":"#69b2cf"},{"name":"Charter Blue","hex":"#546e91"},{"name":"Chartreuse","hex":"#c1f80a"},{"name":"Chartreuse Frost","hex":"#e4dcc6"},{"name":"Chartreuse Shot","hex":"#dad000"},{"name":"Charybdis","hex":"#16a3cb"},{"name":"Chasm","hex":"#876044"},{"name":"Chasm Green","hex":"#63b521"},{"name":"Chaste Blossoms","hex":"#9944ee"},{"name":"Chat Orange","hex":"#f79a3e"},{"name":"Chateau","hex":"#b5a28a"},{"name":"Chateau Brown","hex":"#5b4b44"},{"name":"Chateau de Chillon","hex":"#a2aab3"},{"name":"Chateau Green","hex":"#419f59"},{"name":"Chateau Grey","hex":"#bbb1a8"},{"name":"Chateau Rose","hex":"#dba3ce"},{"name":"Chatelle","hex":"#b3abb6"},{"name":"Chathams Blue","hex":"#2c5971"},{"name":"Chatroom","hex":"#b0ab9c"},{"name":"Chatty Cricket","hex":"#89b386"},{"name":"Chatura Beige","hex":"#a09287"},{"name":"Chayote","hex":"#c7e2c6"},{"name":"Che Guevara Red","hex":"#ed214d"},{"name":"Cheater","hex":"#eeb15d"},{"name":"Cheddar","hex":"#ee9a09"},{"name":"Cheddar Biscuit","hex":"#d2ad87"},{"name":"Cheddar Cheese","hex":"#f0843a"},{"name":"Cheddar Chunk","hex":"#f9c982"},{"name":"Cheddar Corn","hex":"#f5d4b5"},{"name":"Cheddar Pink Mauve","hex":"#b67daf"},{"name":"Cheek Red","hex":"#a55a55"},{"name":"Cheeky Chestnut","hex":"#7b4d3a"},{"name":"Cheerful Heart","hex":"#dcc7c0"},{"name":"Cheerful Hue","hex":"#ffe195"},{"name":"Cheerful Tangerine","hex":"#fda471"},{"name":"Cheerful Whisper","hex":"#d3d7e7"},{"name":"Cheerful Wine","hex":"#7e4258"},{"name":"Cheerful Yellow","hex":"#ffc723"},{"name":"Cheerly Kiwi","hex":"#bccb08"},{"name":"Cheers!","hex":"#c09962"},{"name":"Cheery","hex":"#f08a88"},{"name":"Cheese","hex":"#ffa600"},{"name":"Cheese It Up","hex":"#fdde45"},{"name":"Cheese Please","hex":"#ff9613"},{"name":"Cheese Powder","hex":"#ffe4be"},{"name":"Cheese Puff","hex":"#ffb96f"},{"name":"Cheesecake","hex":"#fffcda"},{"name":"Cheesus","hex":"#ffcc77"},{"name":"Cheesy Cheetah","hex":"#eeb033"},{"name":"Cheesy Frittata","hex":"#f0e093"},{"name":"Cheesy Grin","hex":"#fae195"},{"name":"Chef\'s Hat","hex":"#f3f4f5"},{"name":"Chef\'s Kiss","hex":"#cc3b3b"},{"name":"Chefchaouen Blue","hex":"#a3d1e8"},{"name":"Chelsea Cucumber","hex":"#88a95b"},{"name":"Chelsea Garden","hex":"#546d66"},{"name":"Chelsea Gem","hex":"#95532f"},{"name":"Chelsea Grey","hex":"#b6b7b0"},{"name":"Chelsea Mauve","hex":"#beac9f"},{"name":"Chéng Hóng Sè Orange","hex":"#f94009"},{"name":"Chenille","hex":"#a6cd91"},{"name":"Chenille Spread","hex":"#f1e7d6"},{"name":"Chenille White","hex":"#f9efe2"},{"name":"Chenin","hex":"#dec371"},{"name":"Cherenkov Radiation","hex":"#22bbff"},{"name":"Cherish Cream","hex":"#f4e3cb"},{"name":"Cherish is the Word","hex":"#e6e4da"},{"name":"Cherish the Moment","hex":"#ccacd7"},{"name":"Cherished","hex":"#ba97b1"},{"name":"Cherished One","hex":"#fc9293"},{"name":"Chernobog","hex":"#ac0132"},{"name":"Chernobog Breath","hex":"#e3dcda"},{"name":"Cherokee","hex":"#f5cd82"},{"name":"Cherokee Dignity","hex":"#dd7722"},{"name":"Cherokee Red","hex":"#824e4a"},{"name":"Cherries Jubilee","hex":"#a22452"},{"name":"Cherry","hex":"#cf0234"},{"name":"Cherry Bark","hex":"#908279"},{"name":"Cherry Berry","hex":"#9f4d65"},{"name":"Cherry Black","hex":"#422329"},{"name":"Cherry Blink","hex":"#ad5344"},{"name":"Cherry Blossom","hex":"#f5c1d5"},{"name":"Cherry Blossom Pink","hex":"#ffb7c5"},{"name":"Cherry Blush","hex":"#ffc9dd"},{"name":"Cherry Bomb","hex":"#b73d3f"},{"name":"Cherry Brandy","hex":"#e26b81"},{"name":"Cherry Chip","hex":"#ffbbb4"},{"name":"Cherry Cobbler","hex":"#883f41"},{"name":"Cherry Cocoa","hex":"#8e5e65"},{"name":"Cherry Cola","hex":"#894c3b"},{"name":"Cherry Cordial","hex":"#ebbed3"},{"name":"Cherry Fizz","hex":"#bd6973"},{"name":"Cherry Flower","hex":"#fbdae8"},{"name":"Cherry Foam","hex":"#f392a0"},{"name":"Cherry Fruit","hex":"#cb6276"},{"name":"Cherry Hill","hex":"#cc5160"},{"name":"Cherry Ice","hex":"#dd98a6"},{"name":"Cherry Juice","hex":"#bd9095"},{"name":"Cherry Juice Red","hex":"#6c2c45"},{"name":"Cherry Kiss","hex":"#a32e39"},{"name":"Cherry Lolly","hex":"#c8385a"},{"name":"Cherry Mahogany","hex":"#6a332d"},{"name":"Cherry On Top","hex":"#ac495c"},{"name":"Cherry Paddle Pop","hex":"#fe314b"},{"name":"Cherry Pearl","hex":"#f9e7f4"},{"name":"Cherry Picking","hex":"#620b15"},{"name":"Cherry Pie","hex":"#bd2c22"},{"name":"Cherry Pink","hex":"#c7607b"},{"name":"Cherry Plum","hex":"#a10047"},{"name":"Cherry Race","hex":"#a64137"},{"name":"Cherry Red","hex":"#f7022a"},{"name":"Cherry Sangria","hex":"#c92435"},{"name":"Cherry Shine","hex":"#d81d26"},{"name":"Cherry Soda","hex":"#ff0044"},{"name":"Cherry Tart","hex":"#933d3e"},{"name":"Cherry Tomato","hex":"#f2013f"},{"name":"Cherry Tree","hex":"#dfb7b4"},{"name":"Cherry Velvet","hex":"#e10646"},{"name":"Cherry Wine","hex":"#b04556"},{"name":"Cherryade","hex":"#b22743"},{"name":"Cherrystone","hex":"#f79890"},{"name":"Cherrywood","hex":"#651a14"},{"name":"Chert","hex":"#848182"},{"name":"Cherub","hex":"#f5d7dc"},{"name":"Cherubic","hex":"#ffe6f1"},{"name":"Chervil Leaves","hex":"#abbd90"},{"name":"Chess Ivory","hex":"#ffe9c5"},{"name":"Chester Brown","hex":"#876b4b"},{"name":"Chestnut","hex":"#742802"},{"name":"Chestnut Bisque","hex":"#c19c86"},{"name":"Chestnut Brown","hex":"#6d1008"},{"name":"Chestnut Butter","hex":"#bca486"},{"name":"Chestnut Chest","hex":"#8e5637"},{"name":"Chestnut Gold","hex":"#ab8508"},{"name":"Chestnut Green","hex":"#2a4f21"},{"name":"Chestnut Leather","hex":"#60281e"},{"name":"Chestnut Peel","hex":"#6d3c32"},{"name":"Chestnut Plum","hex":"#852e19"},{"name":"Chestnut Red","hex":"#6c333f"},{"name":"Chestnut Rose","hex":"#cd5252"},{"name":"Chestnut Shell","hex":"#adff2f"},{"name":"Chestnut Stallion","hex":"#995d3b"},{"name":"Chestnut White","hex":"#eaf1e6"},{"name":"Chesty Bond","hex":"#516fa0"},{"name":"Chetwode Blue","hex":"#666fb4"},{"name":"Cheviot","hex":"#f6f2e8"},{"name":"Chewing Gum","hex":"#e6b0af"},{"name":"Chewing Gum Pink","hex":"#e292b6"},{"name":"Chewy Caramel","hex":"#977043"},{"name":"Cheyenne Rock","hex":"#9f918a"},{"name":"Chi-Gong","hex":"#d52b2d"},{"name":"Chianti","hex":"#734342"},{"name":"Chic Brick","hex":"#a4725a"},{"name":"Chic Green","hex":"#d8ebd6"},{"name":"Chic Grey","hex":"#cfccc5"},{"name":"Chic Magnet","hex":"#ede1c8"},{"name":"Chic Peach","hex":"#f0d1c8"},{"name":"Chic Shade","hex":"#7c9270"},{"name":"Chic Taupe","hex":"#aa9788"},{"name":"Chicago","hex":"#5b5d56"},{"name":"Chicago Blue","hex":"#b6dbe9"},{"name":"Chicago Fog","hex":"#cac2bd"},{"name":"Chicago Skyline","hex":"#96adba"},{"name":"Chicha Morada","hex":"#7e6072"},{"name":"Chick Flick","hex":"#bf7d80"},{"name":"Chickadee","hex":"#ffcf65"},{"name":"Chicken Comb","hex":"#dd2222"},{"name":"Chicken Masala","hex":"#cc8822"},{"name":"Chickery Chick","hex":"#fbe98e"},{"name":"Chickpea","hex":"#efe7df"},{"name":"Chickweed","hex":"#d9dfe3"},{"name":"Chicon","hex":"#d9eeb4"},{"name":"Chicory","hex":"#a78658"},{"name":"Chicory Coffee","hex":"#4d3730"},{"name":"Chicory Flower","hex":"#66789a"},{"name":"Chicory Green","hex":"#bbab75"},{"name":"Chicory Root","hex":"#5f423f"},{"name":"Chieftain","hex":"#6a5637"},{"name":"Chiffon","hex":"#f0f5bb"},{"name":"Chifle Yellow","hex":"#dbc963"},{"name":"Child of Heaven","hex":"#eae5c5"},{"name":"Child of Light","hex":"#f0f4f8"},{"name":"Child of the Moon","hex":"#c68d37"},{"name":"Child of the Night","hex":"#220077"},{"name":"Child\'s Play","hex":"#e7bcd4"},{"name":"Childhood Crush","hex":"#e26d68"},{"name":"Childish Wonder","hex":"#a5a8d6"},{"name":"Childlike","hex":"#e8c0cf"},{"name":"Children\'s Soft Blue","hex":"#a1ced7"},{"name":"Chilean Fire","hex":"#d05e34"},{"name":"Chilean Heath","hex":"#f9f7de"},{"name":"Chili","hex":"#be4b41"},{"name":"Chili Con Carne","hex":"#985e2b"},{"name":"Chili Crab","hex":"#e93a0e"},{"name":"Chili Dip","hex":"#f0b692"},{"name":"Chili Green","hex":"#8d7040"},{"name":"Chili Oil","hex":"#9d453c"},{"name":"Chili Pepper","hex":"#ac1e3a"},{"name":"Chili Sauce","hex":"#bc4e40"},{"name":"Chili Soda","hex":"#ca7c74"},{"name":"Chill in the Air","hex":"#d1d5e7"},{"name":"Chill of the Night","hex":"#256d8d"},{"name":"Chilled Chilly","hex":"#ec4236"},{"name":"Chilled Cucumber","hex":"#cbcdb2"},{"name":"Chilled Lemonade","hex":"#ffe696"},{"name":"Chilled Mint","hex":"#e4efde"},{"name":"Chilled Wine","hex":"#6d4052"},{"name":"Chilli Black Red","hex":"#4b1c35"},{"name":"Chilli Cashew","hex":"#cc5544"},{"name":"Chilly Blue","hex":"#8aaec3"},{"name":"Chilly Spice","hex":"#fd9989"},{"name":"Chilly White","hex":"#e5f1ed"},{"name":"Chimayo Red","hex":"#b16355"},{"name":"Chimera","hex":"#74626d"},{"name":"Chimera Brown","hex":"#c89b75"},{"name":"Chimes","hex":"#c7ca86"},{"name":"Chimney","hex":"#4a5257"},{"name":"Chimney Sweep","hex":"#272f38"},{"name":"Chin-Chin Cherry","hex":"#dd3355"},{"name":"China Aster","hex":"#444c60"},{"name":"China Blue","hex":"#5a6c80"},{"name":"China Cinnamon","hex":"#8a7054"},{"name":"China Clay","hex":"#718b9a"},{"name":"China Cup","hex":"#f8f0e5"},{"name":"China Doll","hex":"#f3e4d5"},{"name":"China Green Blue","hex":"#3a6468"},{"name":"China Ivory","hex":"#fbf3d3"},{"name":"China Light Green","hex":"#bcc9c7"},{"name":"China Pattern","hex":"#3d5c77"},{"name":"China Pink","hex":"#df6ea1"},{"name":"China Red","hex":"#ad2b10"},{"name":"China Rose","hex":"#a8516e"},{"name":"China Seas","hex":"#034f7c"},{"name":"China Silk","hex":"#e3d1cc"},{"name":"China White","hex":"#eae6d9"},{"name":"Chinaberry","hex":"#464960"},{"name":"Chinaberry Bloom","hex":"#d6c2d2"},{"name":"Chinchilla","hex":"#9c8e7b"},{"name":"Chinchilla Chenille","hex":"#d0bba7"},{"name":"Chinchilla Grey","hex":"#7f746e"},{"name":"Chinese Bellflower","hex":"#4d5aaf"},{"name":"Chinese Black","hex":"#111100"},{"name":"Chinese Blue","hex":"#365194"},{"name":"Chinese Bronze","hex":"#cd8032"},{"name":"Chinese Brown","hex":"#ab381f"},{"name":"Chinese Cherry","hex":"#f1d7cb"},{"name":"Chinese Dragon","hex":"#cb5251"},{"name":"Chinese Garden","hex":"#006967"},{"name":"Chinese Gold","hex":"#ddaa00"},{"name":"Chinese Goldfish","hex":"#f34723"},{"name":"Chinese Green","hex":"#d0db61"},{"name":"Chinese Hamster","hex":"#ebdbca"},{"name":"Chinese Ibis Brown","hex":"#e09e87"},{"name":"Chinese Ink","hex":"#3f312b"},{"name":"Chinese Jade","hex":"#cbd1ba"},{"name":"Chinese Lacquer","hex":"#60c7c2"},{"name":"Chinese Lantern","hex":"#f09056"},{"name":"Chinese Leaf","hex":"#ccd6b0"},{"name":"Chinese Money Plant","hex":"#a4be5c"},{"name":"Chinese New Year","hex":"#ff3366"},{"name":"Chinese Night","hex":"#aa381e"},{"name":"Chinese Orange","hex":"#f37042"},{"name":"Chinese Pink","hex":"#de70a1"},{"name":"Chinese Porcelain","hex":"#3a5f7d"},{"name":"Chinese Purple","hex":"#720b98"},{"name":"Chinese Red","hex":"#cd071e"},{"name":"Chinese Safflower","hex":"#b94047"},{"name":"Chinese Silver","hex":"#dddcef"},{"name":"Chinese Tea Green","hex":"#acad98"},{"name":"Chinese Tzu","hex":"#8fbfbd"},{"name":"Chinese Violet","hex":"#92698f"},{"name":"Chinese White","hex":"#e2e5de"},{"name":"Chino","hex":"#b8ad8a"},{"name":"Chino Green","hex":"#d1bf93"},{"name":"Chino’s","hex":"#dbd2bb"},{"name":"Chinois Green","hex":"#7c8c87"},{"name":"Chinook","hex":"#9dd3a8"},{"name":"Chinook Salmon","hex":"#c8987e"},{"name":"Chinotto","hex":"#554747"},{"name":"Chintz","hex":"#d5c7b9"},{"name":"Chintz Rose","hex":"#ecbcb6"},{"name":"Chipmunk","hex":"#cfa14a"},{"name":"Chipolata","hex":"#aa4433"},{"name":"Chipotle Paste","hex":"#683e3b"},{"name":"Chips Provencale","hex":"#ddd618"},{"name":"Chitin Green","hex":"#026b67"},{"name":"Chivalrous","hex":"#aeb2c0"},{"name":"Chivalrous Fox","hex":"#c7662a"},{"name":"Chivalrous Walrus","hex":"#816558"},{"name":"Chivalry Copper","hex":"#bf784e"},{"name":"Chive","hex":"#4d5637"},{"name":"Chive Bloom","hex":"#4f3650"},{"name":"Chive Blossom","hex":"#86619f"},{"name":"Chive Flower","hex":"#a193bf"},{"name":"Chlorella Green","hex":"#56ae57"},{"name":"Chloride","hex":"#93d8c2"},{"name":"Chlorite","hex":"#5e8e82"},{"name":"Chlorophyll","hex":"#44891a"},{"name":"Chlorophyll Cream","hex":"#b3d6c3"},{"name":"Chlorophyll Green","hex":"#4aff00"},{"name":"Chlorosis","hex":"#75876e"},{"name":"Choco Biscuit","hex":"#b4835b"},{"name":"Choco Chic","hex":"#993311"},{"name":"Choco Death","hex":"#63493e"},{"name":"Choco Loco","hex":"#7d5f53"},{"name":"Chocobo Feather","hex":"#f9bc08"},{"name":"Chocoholic","hex":"#993300"},{"name":"Chocolate","hex":"#d2691e"},{"name":"Chocolate Bar","hex":"#773333"},{"name":"Chocolate Bells","hex":"#775130"},{"name":"Chocolate Bhut Jolokia","hex":"#782a2e"},{"name":"Chocolate Bliss","hex":"#7f6054"},{"name":"Chocolate Brown","hex":"#411900"},{"name":"Chocolate Caliente","hex":"#765841"},{"name":"Chocolate Castle","hex":"#452207"},{"name":"Chocolate Chiffon","hex":"#928178"},{"name":"Chocolate Chili","hex":"#ab4231"},{"name":"Chocolate Chip","hex":"#6e5f52"},{"name":"Chocolate Chunk","hex":"#6b574a"},{"name":"Chocolate Coco","hex":"#644d42"},{"name":"Chocolate Cosmos","hex":"#58111a"},{"name":"Chocolate Covered","hex":"#8b4121"},{"name":"Chocolate Cupcake","hex":"#605647"},{"name":"Chocolate Curl","hex":"#916d5e"},{"name":"Chocolate Delight","hex":"#96786d"},{"name":"Chocolate Eclair","hex":"#674848"},{"name":"Chocolate Escape","hex":"#623d2e"},{"name":"Chocolate Explosion","hex":"#8e473b"},{"name":"Chocolate Fantasies","hex":"#5c3612"},{"name":"Chocolate Fondant","hex":"#603932"},{"name":"Chocolate Fondue","hex":"#9a3001"},{"name":"Chocolate Fountain","hex":"#9e5b40"},{"name":"Chocolate Froth","hex":"#ded5c8"},{"name":"Chocolate Hazelnut","hex":"#742719"},{"name":"Chocolate Heart","hex":"#8f786c"},{"name":"Chocolate Kiss","hex":"#3c1421"},{"name":"Chocolate Lab","hex":"#66433b"},{"name":"Chocolate Lust","hex":"#993322"},{"name":"Chocolate Magma","hex":"#7a463a"},{"name":"Chocolate Melange","hex":"#331100"},{"name":"Chocolate Milk","hex":"#976f4c"},{"name":"Chocolate Moment","hex":"#998069"},{"name":"Chocolate Oatmeal Cookie","hex":"#bb5544"},{"name":"Chocolate Pancakes","hex":"#884400"},{"name":"Chocolate Plum","hex":"#3f2f31"},{"name":"Chocolate Powder","hex":"#a58c7b"},{"name":"Chocolate Praline","hex":"#66424d"},{"name":"Chocolate Pretzel","hex":"#60504b"},{"name":"Chocolate Pudding","hex":"#6f6665"},{"name":"Chocolate Rain","hex":"#714f29"},{"name":"Chocolate Red","hex":"#4d3635"},{"name":"Chocolate Ripple","hex":"#76604e"},{"name":"Chocolate Rush","hex":"#4e1b0b"},{"name":"Chocolate Soul","hex":"#5c4945"},{"name":"Chocolate Sparkle","hex":"#8c6c6f"},{"name":"Chocolate Sprinkle","hex":"#6f4e43"},{"name":"Chocolate Stain","hex":"#84563c"},{"name":"Chocolate Swirl","hex":"#68574b"},{"name":"Chocolate Temptation","hex":"#956e5f"},{"name":"Chocolate Therapy","hex":"#5f4940"},{"name":"Chocolate Torte","hex":"#403534"},{"name":"Chocolate Truffle","hex":"#612e32"},{"name":"Chocolate Velvet","hex":"#7f7453"},{"name":"Chocolaty","hex":"#937979"},{"name":"Choice Cream","hex":"#f2e1d1"},{"name":"Chōjicha Brown","hex":"#8f583c"},{"name":"Chokecherry","hex":"#92000a"},{"name":"Choo Choo","hex":"#867578"},{"name":"Chopped Chive","hex":"#336b4b"},{"name":"Chopped Dill","hex":"#b6c2a1"},{"name":"Chopsticks","hex":"#e0d1b8"},{"name":"Choral Singer","hex":"#b77795"},{"name":"Chorizo","hex":"#aa0011"},{"name":"Chōshun Red","hex":"#b95754"},{"name":"Choux à la Crème","hex":"#ebcf7d"},{"name":"Chowder Bowl","hex":"#e5d2b2"},{"name":"Christalle","hex":"#382161"},{"name":"Christi","hex":"#71a91d"},{"name":"Christina Brown","hex":"#009094"},{"name":"Christmas Blue","hex":"#2a8fbd"},{"name":"Christmas Brown","hex":"#5d2b2c"},{"name":"Christmas Gold","hex":"#caa906"},{"name":"Christmas Green","hex":"#3c8d0d"},{"name":"Christmas Holly","hex":"#68846a"},{"name":"Christmas Ivy","hex":"#477266"},{"name":"Christmas Orange","hex":"#d56c2b"},{"name":"Christmas Ornament","hex":"#6e5a49"},{"name":"Christmas Pink","hex":"#e34285"},{"name":"Christmas Purple","hex":"#4d084b"},{"name":"Christmas Red","hex":"#b01b2e"},{"name":"Christmas Rose","hex":"#ffddbb"},{"name":"Christmas Silver","hex":"#e1dfe0"},{"name":"Christobel","hex":"#d4c5ba"},{"name":"Christy\'s Smile","hex":"#f6bbca"},{"name":"Chromaphobic Black","hex":"#292929"},{"name":"Chrome Aluminum","hex":"#a8a9ad"},{"name":"Chrome Chalice","hex":"#cdc8d2"},{"name":"Chrome Green","hex":"#e7eddd"},{"name":"Chrome White","hex":"#cac7b7"},{"name":"Chrome Yellow","hex":"#ffa700"},{"name":"Chromis Damsel Blue","hex":"#82cafc"},{"name":"Chromophobia Green","hex":"#06b48b"},{"name":"Chronicle","hex":"#3e4265"},{"name":"Chronus Blue","hex":"#72a8d1"},{"name":"Chrysanthemum","hex":"#c35458"},{"name":"Chrysanthemum Leaf","hex":"#9db8ab"},{"name":"Chrysocolla Dark Green","hex":"#004f39"},{"name":"Chrysocolla Green","hex":"#378661"},{"name":"Chrysocolla Medium Green","hex":"#006b57"},{"name":"Chrysolite","hex":"#8e9849"},{"name":"Chrysomela Goettingensis","hex":"#39334a"},{"name":"Chrysopal Light Green","hex":"#8fb2a3"},{"name":"Chrysoprase","hex":"#adba98"},{"name":"Chubby Chocolate","hex":"#613521"},{"name":"Chubby Kiss","hex":"#b43548"},{"name":"Chuckles","hex":"#bf413a"},{"name":"Chuff Blue","hex":"#91c1c6"},{"name":"Chun-Li Blue","hex":"#1559db"},{"name":"Chunky Bee","hex":"#ffc84b"},{"name":"Chupacabra Grey","hex":"#cfcdcf"},{"name":"Church Blue","hex":"#3d4161"},{"name":"Church Mouse","hex":"#b3b5af"},{"name":"Churchill","hex":"#4d4d58"},{"name":"Chutney","hex":"#9f5e4e"},{"name":"Chutney Brown","hex":"#a97765"},{"name":"Chyornyi Black","hex":"#0f0809"},{"name":"Cider Mill","hex":"#938a43"},{"name":"Cider Pear Green","hex":"#8a946f"},{"name":"Cider Spice","hex":"#ae8167"},{"name":"Cider Toddy","hex":"#b98033"},{"name":"Cider Yellow","hex":"#e7d6af"},{"name":"Cielo","hex":"#a5cee8"},{"name":"Cigar","hex":"#7d4e38"},{"name":"Cigar Box","hex":"#9c7351"},{"name":"Cigar Smoke","hex":"#78857a"},{"name":"Cigarette Glow","hex":"#ee5500"},{"name":"Cilantro","hex":"#4a5c52"},{"name":"Cilantro Cream","hex":"#cecbae"},{"name":"Cimarron","hex":"#6b3d38"},{"name":"Cinder","hex":"#242a2e"},{"name":"Cinder Fox","hex":"#7c787b"},{"name":"Cinderella","hex":"#fbd7cc"},{"name":"Cinderella Pink","hex":"#ffc6c4"},{"name":"Cinema Screen","hex":"#95878e"},{"name":"Cinereous","hex":"#98817b"},{"name":"Cinnabar","hex":"#730113"},{"name":"Cinnabark","hex":"#634d45"},{"name":"Cinnamon","hex":"#d26911"},{"name":"Cinnamon Brandy","hex":"#cf8d6c"},{"name":"Cinnamon Brown","hex":"#9e6a19"},{"name":"Cinnamon Buff","hex":"#ffbf6e"},{"name":"Cinnamon Bun","hex":"#ac4f06"},{"name":"Cinnamon Cake","hex":"#e8ddcf"},{"name":"Cinnamon Candle","hex":"#b15d63"},{"name":"Cinnamon Cherry","hex":"#794344"},{"name":"Cinnamon Cocoa","hex":"#d1a79c"},{"name":"Cinnamon Crumble","hex":"#705742"},{"name":"Cinnamon Crunch","hex":"#a37d5a"},{"name":"Cinnamon Diamonds","hex":"#a97673"},{"name":"Cinnamon Frost","hex":"#d3b191"},{"name":"Cinnamon Ice","hex":"#dbbba7"},{"name":"Cinnamon Milk","hex":"#ebdab5"},{"name":"Cinnamon Roast","hex":"#bb9988"},{"name":"Cinnamon Roll","hex":"#c0737a"},{"name":"Cinnamon Rufous","hex":"#c2612c"},{"name":"Cinnamon Sand","hex":"#b78153"},{"name":"Cinnamon Satin","hex":"#cd607e"},{"name":"Cinnamon Spice","hex":"#935f43"},{"name":"Cinnamon Stick","hex":"#b05127"},{"name":"Cinnamon Stone","hex":"#c9543a"},{"name":"Cinnamon Tea","hex":"#dec0ad"},{"name":"Cinnamon Toast","hex":"#8d7d77"},{"name":"Cinnamon Twist","hex":"#9f7250"},{"name":"Cinnamon Whip","hex":"#dab2a4"},{"name":"Cinnapink","hex":"#a6646f"},{"name":"Cinque Foil","hex":"#ffff88"},{"name":"Cioccolato","hex":"#5d3b2e"},{"name":"Cipher","hex":"#aa7691"},{"name":"Cipollino","hex":"#c8cec3"},{"name":"Circumorbital Ring","hex":"#6258c4"},{"name":"Circus","hex":"#fc5e30"},{"name":"Circus Peanut","hex":"#ad835c"},{"name":"Circus Red","hex":"#954a4c"},{"name":"Cirrus Blue","hex":"#d6e4e1"},{"name":"Cistern","hex":"#a9b0b6"},{"name":"Citadel","hex":"#6a7f8b"},{"name":"Citadel Blue","hex":"#9eabad"},{"name":"Citra","hex":"#f6b906"},{"name":"Citrine","hex":"#e4d00a"},{"name":"Citrine Brown","hex":"#933709"},{"name":"Citrine White","hex":"#faf7d6"},{"name":"Citrino","hex":"#e9e89b"},{"name":"Citron","hex":"#d5c757"},{"name":"Citron Goby","hex":"#deff00"},{"name":"Citronella","hex":"#66bb77"},{"name":"Citronelle","hex":"#b8af23"},{"name":"Citronette","hex":"#c4aa27"},{"name":"Citronite","hex":"#dbb239"},{"name":"Citronne","hex":"#cd9c2b"},{"name":"Citrus","hex":"#9fb70a"},{"name":"Citrus Blast","hex":"#e1793a"},{"name":"Citrus Butter","hex":"#e4de8e"},{"name":"Citrus Delight","hex":"#d0d557"},{"name":"Citrus Hill","hex":"#f9a78d"},{"name":"Citrus Honey","hex":"#f6b96b"},{"name":"Citrus Leaf","hex":"#b3d157"},{"name":"Citrus Lime","hex":"#c3dc68"},{"name":"Citrus Mist","hex":"#f7edde"},{"name":"Citrus Notes","hex":"#d26643"},{"name":"Citrus Peel","hex":"#b7bb6b"},{"name":"Citrus Punch","hex":"#fdea83"},{"name":"Citrus Rind","hex":"#ede0ae"},{"name":"Citrus Sachet","hex":"#f2c6a7"},{"name":"Citrus Spice","hex":"#e2cd52"},{"name":"Citrus Splash","hex":"#ffc400"},{"name":"Citrus Sugar","hex":"#e6d943"},{"name":"Citrus Yellow","hex":"#d7c275"},{"name":"Citrus Zest","hex":"#edc85a"},{"name":"City Bench","hex":"#675c49"},{"name":"City Brume","hex":"#e0e0dc"},{"name":"City Dweller","hex":"#c0b9ac"},{"name":"City Hunter Blue","hex":"#0022aa"},{"name":"City Lights","hex":"#dfe6ea"},{"name":"City Loft","hex":"#a79b8a"},{"name":"City of Bridges","hex":"#b3ada4"},{"name":"City of Diamonds","hex":"#fae6cb"},{"name":"City of Pink Angels","hex":"#e6b4a6"},{"name":"City Rain","hex":"#525c61"},{"name":"City Roast","hex":"#663333"},{"name":"City Street","hex":"#bab2ab"},{"name":"City Sunrise","hex":"#d1a67d"},{"name":"City Tower","hex":"#aeaba5"},{"name":"Cityscape","hex":"#dae3e7"},{"name":"Civara","hex":"#c56138"},{"name":"Clair De Lune","hex":"#dbe9df"},{"name":"Clairvoyance","hex":"#838493"},{"name":"Clairvoyant","hex":"#480656"},{"name":"Clam","hex":"#dad1c0"},{"name":"Clam Chowder","hex":"#f4d9af"},{"name":"Clam Shell","hex":"#d2b3a9"},{"name":"Clam Up","hex":"#ebdbc1"},{"name":"Clambake","hex":"#e0d1bb"},{"name":"Clamshell","hex":"#edd0b6"},{"name":"Claret","hex":"#680018"},{"name":"Claret Red","hex":"#c84c61"},{"name":"Clarified Butter","hex":"#e69c23"},{"name":"Clarified Orange","hex":"#fea15b"},{"name":"Clarinet","hex":"#002255"},{"name":"Clarity","hex":"#eaf0e0"},{"name":"Clary","hex":"#684976"},{"name":"Clary Sage","hex":"#c7c0ce"},{"name":"Classic","hex":"#bbaaa1"},{"name":"Classic Avocado","hex":"#6e7042"},{"name":"Classic Berry","hex":"#7c5261"},{"name":"Classic Blue","hex":"#0f4e81"},{"name":"Classic Bouquet","hex":"#a38bbf"},{"name":"Classic Bronze","hex":"#6d624e"},{"name":"Classic Brown","hex":"#6a493d"},{"name":"Classic Calm","hex":"#6b8885"},{"name":"Classic Chalk","hex":"#f4f4f0"},{"name":"Classic Cherry","hex":"#974146"},{"name":"Classic Cloud","hex":"#9197a3"},{"name":"Classic Cool","hex":"#b7b2ac"},{"name":"Classic French Grey","hex":"#888782"},{"name":"Classic Gold","hex":"#c9a367"},{"name":"Classic Green","hex":"#3eb753"},{"name":"Classic Grey","hex":"#a39d93"},{"name":"Classic Ivory","hex":"#f2e0c3"},{"name":"Classic Light Buff","hex":"#f0eadc"},{"name":"Classic Olive","hex":"#685e3f"},{"name":"Classic Rose","hex":"#fbcce7"},{"name":"Classic Sand","hex":"#d6bcaa"},{"name":"Classic Silver","hex":"#b9b9b4"},{"name":"Classic Taupe","hex":"#d3bca4"},{"name":"Classic Terra","hex":"#e4ceae"},{"name":"Classic Waltz","hex":"#71588d"},{"name":"Classical Gold","hex":"#ebb875"},{"name":"Classical White","hex":"#ece1cb"},{"name":"Classical Yellow","hex":"#f8d492"},{"name":"Classy","hex":"#aeacad"},{"name":"Classy Mauve","hex":"#bb99aa"},{"name":"Classy Plum","hex":"#887e82"},{"name":"Classy Red","hex":"#911f21"},{"name":"Clay","hex":"#b66a50"},{"name":"Clay Ash","hex":"#bdc8b3"},{"name":"Clay Bake","hex":"#e1c68f"},{"name":"Clay Bath","hex":"#8a7d69"},{"name":"Clay Beige","hex":"#d5d1c3"},{"name":"Clay Brown","hex":"#b2713d"},{"name":"Clay Court","hex":"#a9765d"},{"name":"Clay Creek","hex":"#897e59"},{"name":"Clay Dust","hex":"#f8dca3"},{"name":"Clay Fire","hex":"#d8a686"},{"name":"Clay Ground","hex":"#bd856c"},{"name":"Clay Marble","hex":"#a68779"},{"name":"Clay Mug","hex":"#d37959"},{"name":"Clay Ochre","hex":"#ae895d"},{"name":"Clay Pebble","hex":"#bdb298"},{"name":"Clay Pipe","hex":"#d9c8b7"},{"name":"Clay Play","hex":"#774433"},{"name":"Clay Pot","hex":"#c3663f"},{"name":"Clay Red","hex":"#af604d"},{"name":"Clay Ridge","hex":"#956a66"},{"name":"Clay Slate Wacke","hex":"#cdcace"},{"name":"Clay Terrace","hex":"#d4823c"},{"name":"Clayton","hex":"#83756c"},{"name":"Claytone","hex":"#969283"},{"name":"Clean Air","hex":"#d8ddb6"},{"name":"Clean Canvas","hex":"#f6e9d3"},{"name":"Clean Green","hex":"#8fe0c6"},{"name":"Clean N Crisp","hex":"#d0e798"},{"name":"Clean Pool","hex":"#4ec0ed"},{"name":"Clean Slate","hex":"#577396"},{"name":"Clear Aqua","hex":"#c4eae0"},{"name":"Clear Blue","hex":"#247afd"},{"name":"Clear Brook","hex":"#60949b"},{"name":"Clear Calamine","hex":"#f6e6e4"},{"name":"Clear Camouflage Green","hex":"#dae8e1"},{"name":"Clear Chill","hex":"#1e90ff"},{"name":"Clear Cinnamon","hex":"#dfdbd8"},{"name":"Clear Concrete","hex":"#bab6b2"},{"name":"Clear Day","hex":"#dfefea"},{"name":"Clear Green","hex":"#12732b"},{"name":"Clear Lake Trail","hex":"#a3bbda"},{"name":"Clear Mauve","hex":"#766cb0"},{"name":"Clear Moon","hex":"#faf6ea"},{"name":"Clear Night Sky","hex":"#214f86"},{"name":"Clear Orange","hex":"#ee8800"},{"name":"Clear Plum","hex":"#64005e"},{"name":"Clear Pond","hex":"#b4cccb"},{"name":"Clear Purple","hex":"#412a7a"},{"name":"Clear Red","hex":"#ce261c"},{"name":"Clear Sand","hex":"#eae7da"},{"name":"Clear Skies","hex":"#e8f7fd"},{"name":"Clear Sky","hex":"#8eccfe"},{"name":"Clear Stone","hex":"#e0ddd3"},{"name":"Clear Turquoise","hex":"#008a81"},{"name":"Clear View","hex":"#e2eae7"},{"name":"Clear Viridian","hex":"#367588"},{"name":"Clear Vision","hex":"#e7f0f7"},{"name":"Clear Vista","hex":"#a3bec4"},{"name":"Clear Water","hex":"#aad5db"},{"name":"Clear Weather","hex":"#66bbdd"},{"name":"Clear Yellow","hex":"#f1f1e6"},{"name":"Clearly Aqua","hex":"#c4dbcb"},{"name":"Clearview","hex":"#fbfbe5"},{"name":"Clematis","hex":"#7e6596"},{"name":"Clematis Blue","hex":"#3c3d8a"},{"name":"Clematis Green","hex":"#98b652"},{"name":"Clematis Magenta","hex":"#e05aec"},{"name":"Clementine","hex":"#e96e00"},{"name":"Clementine Earring","hex":"#ff9d0a"},{"name":"Clementine Jelly","hex":"#ffad01"},{"name":"Cleo\'s Bath","hex":"#00507f"},{"name":"Cleopatra","hex":"#007590"},{"name":"Cleopatra\'s Gown","hex":"#795088"},{"name":"Clerestory","hex":"#f4e6e0"},{"name":"Clichy White","hex":"#f6ebee"},{"name":"Cliff Blue","hex":"#5d8fbd"},{"name":"Cliff Brown","hex":"#d0ab8c"},{"name":"Cliff Ridge","hex":"#c5ae80"},{"name":"Cliff Rock","hex":"#b19475"},{"name":"Cliff Swallow","hex":"#ecddd4"},{"name":"Cliff\'s View","hex":"#ddc5aa"},{"name":"Cliffside Park","hex":"#6f8165"},{"name":"Climate Change","hex":"#e5e1cd"},{"name":"Climate Control","hex":"#466082"},{"name":"Climbing Ivy","hex":"#58714a"},{"name":"Clinical Soft Blue","hex":"#b2cfd3"},{"name":"Clinker","hex":"#463623"},{"name":"Clinker Red","hex":"#663145"},{"name":"Clipped Grass","hex":"#a1b841"},{"name":"Clippership Twill","hex":"#a6937d"},{"name":"Cloak and Dagger","hex":"#550055"},{"name":"Cloak Grey","hex":"#605e63"},{"name":"Clock Chimes Thirteen","hex":"#002211"},{"name":"Clockworks","hex":"#72573d"},{"name":"Cloisonne","hex":"#0075af"},{"name":"Cloisonné","hex":"#0773af"},{"name":"Cloisonne Blue","hex":"#84a1ad"},{"name":"Cloisonne Gold","hex":"#a58235"},{"name":"Cloistered Garden","hex":"#99b090"},{"name":"Clooney","hex":"#5f6c84"},{"name":"Close Knit","hex":"#d5d6cf"},{"name":"Closed Shutter","hex":"#25252c"},{"name":"Clotted Cream","hex":"#f3efcd"},{"name":"Clotted Red","hex":"#991115"},{"name":"Cloud","hex":"#e4f0ef"},{"name":"Cloud Abyss","hex":"#dfe7eb"},{"name":"Cloud Blue","hex":"#a2b6b9"},{"name":"Cloud Break","hex":"#f6f1fe"},{"name":"Cloud Burst","hex":"#899c96"},{"name":"Cloud Cover","hex":"#adb5bc"},{"name":"Cloud Cream","hex":"#ded1b3"},{"name":"Cloud Dancer","hex":"#f0eee9"},{"name":"Cloud Grey","hex":"#b8a9af"},{"name":"Cloud Nine","hex":"#e9e0db"},{"name":"Cloud Number Nine","hex":"#f9cec6"},{"name":"Cloud Over London","hex":"#c2bcb1"},{"name":"Cloud Pink","hex":"#f5d1c8"},{"name":"Cloud White","hex":"#f2f2ed"},{"name":"Cloudberry","hex":"#ffa168"},{"name":"Cloudburst","hex":"#7b7777"},{"name":"Clouded Blue","hex":"#1f75fe"},{"name":"Clouded Sky","hex":"#7d93a2"},{"name":"Clouded Vision","hex":"#d1d0d1"},{"name":"Cloudless","hex":"#d6eafc"},{"name":"Cloudless Day","hex":"#9ab1bf"},{"name":"Cloudy","hex":"#d8d7d3"},{"name":"Cloudy Blue","hex":"#acc2d9"},{"name":"Cloudy Camouflage","hex":"#177245"},{"name":"Cloudy Carrot","hex":"#ffa812"},{"name":"Cloudy Cinnamon","hex":"#87715f"},{"name":"Cloudy Day","hex":"#dfe6da"},{"name":"Cloudy Desert","hex":"#b0a99f"},{"name":"Cloudy Grey","hex":"#ece3e1"},{"name":"Cloudy Plum","hex":"#9d7aac"},{"name":"Cloudy Sea","hex":"#6699aa"},{"name":"Cloudy Sky","hex":"#c2d5da"},{"name":"Cloudy Today","hex":"#a6a096"},{"name":"Cloudy Valley","hex":"#b1c6d6"},{"name":"Cloudy Viridian","hex":"#4b5f56"},{"name":"Clove","hex":"#876155"},{"name":"Clove Brown","hex":"#766051"},{"name":"Clove Dye","hex":"#a96232"},{"name":"Clove Yellow Brown","hex":"#523f21"},{"name":"Clovedust","hex":"#b0705d"},{"name":"Clover","hex":"#008f00"},{"name":"Clover Brook","hex":"#1c6a53"},{"name":"Clover Green","hex":"#006c44"},{"name":"Clover Honey","hex":"#f0e2bc"},{"name":"Clover Mist","hex":"#6fc288"},{"name":"Clover Patch","hex":"#4a9d5b"},{"name":"Clover Pink","hex":"#cd9bc4"},{"name":"Clown Green","hex":"#c4d056"},{"name":"Clown Nose","hex":"#e94257"},{"name":"Club Cruise","hex":"#8bc3e1"},{"name":"Club Grey","hex":"#464159"},{"name":"Club Mauve","hex":"#834370"},{"name":"Club Moss","hex":"#6b977a"},{"name":"Club Navy","hex":"#3e4a54"},{"name":"Club Soda","hex":"#e2edeb"},{"name":"Club-Mate","hex":"#f8de7e"},{"name":"Cluedo Night","hex":"#2b245a"},{"name":"Clumsy Caramel","hex":"#d3b683"},{"name":"Clytemnestra","hex":"#e8e2e0"},{"name":"Co Pilot","hex":"#4978a9"},{"name":"CO₂","hex":"#cadfec"},{"name":"Coach Green","hex":"#003527"},{"name":"Coal Mine","hex":"#54555d"},{"name":"Coal Miner","hex":"#777872"},{"name":"Coalmine","hex":"#220033"},{"name":"Coarse Wool","hex":"#181b26"},{"name":"Coast Cream","hex":"#f6e6db"},{"name":"Coastal Beige","hex":"#f0ebd9"},{"name":"Coastal Breeze","hex":"#e0f6fb"},{"name":"Coastal Calm","hex":"#538f94"},{"name":"Coastal Crush","hex":"#b4c0af"},{"name":"Coastal Fjord","hex":"#505d7e"},{"name":"Coastal Foam","hex":"#b0e5c9"},{"name":"Coastal Fog","hex":"#e5e8e4"},{"name":"Coastal Fringe","hex":"#80b9c0"},{"name":"Coastal Jetty","hex":"#006e7f"},{"name":"Coastal Mist","hex":"#d2e8ec"},{"name":"Coastal Plain","hex":"#9fa694"},{"name":"Coastal Sand","hex":"#c9a985"},{"name":"Coastal Storm","hex":"#7d807b"},{"name":"Coastal Surf","hex":"#2d4982"},{"name":"Coastal Trim","hex":"#bdffca"},{"name":"Coastal Vista","hex":"#8293a0"},{"name":"Coastal Waters","hex":"#7db7db"},{"name":"Coastline Blue","hex":"#4398bc"},{"name":"Coastline Trail","hex":"#6e6c5b"},{"name":"Coated","hex":"#2e2f30"},{"name":"Cobalite","hex":"#9999ff"},{"name":"Cobalt","hex":"#030aa7"},{"name":"Cobalt Flame","hex":"#4e719d"},{"name":"Cobalt Glaze","hex":"#0072b5"},{"name":"Cobalt Green","hex":"#94ff94"},{"name":"Cobalt Night","hex":"#353739"},{"name":"Cobalt Stone","hex":"#0264ae"},{"name":"Cobble Brown","hex":"#7a6455"},{"name":"Cobbler","hex":"#c4ab7d"},{"name":"Cobblestone","hex":"#a89a8e"},{"name":"Cobblestone Path","hex":"#9e8779"},{"name":"Cobblestone Street","hex":"#cfc7b9"},{"name":"Cobra Leather","hex":"#b08e08"},{"name":"Cobre","hex":"#996515"},{"name":"Cobrizo","hex":"#b56d5d"},{"name":"Coca Mocha","hex":"#bd9d95"},{"name":"Cochin Chicken","hex":"#f8b862"},{"name":"Cochineal Red","hex":"#9d2933"},{"name":"Cochise","hex":"#ddcdb3"},{"name":"Cochonnet","hex":"#ff88bb"},{"name":"Cockatoo","hex":"#58c8b6"},{"name":"Cockatrice Brown","hex":"#a46422"},{"name":"Cockleshell","hex":"#e3c6af"},{"name":"Cockscomb Red","hex":"#bc5378"},{"name":"Cocktail Blue","hex":"#5a7aa2"},{"name":"Cocktail Green","hex":"#8eb826"},{"name":"Cocktail Hour","hex":"#fd9a52"},{"name":"Cocktail Olive","hex":"#9fa36c"},{"name":"Cocktail Onion","hex":"#dce2ad"},{"name":"Coco","hex":"#d1bba1"},{"name":"Coco Malt","hex":"#e4dcc9"},{"name":"Coco Muck","hex":"#994a25"},{"name":"Coco Rum","hex":"#9b7757"},{"name":"Coco-Lemon Tart","hex":"#eedd88"},{"name":"Cocoa","hex":"#875f42"},{"name":"Cocoa Bean","hex":"#4f3835"},{"name":"Cocoa Berry","hex":"#a08882"},{"name":"Cocoa Brown","hex":"#35281e"},{"name":"Cocoa Butter","hex":"#f5f4c1"},{"name":"Cocoa Craving","hex":"#b9a39a"},{"name":"Cocoa Cream","hex":"#dbc8b6"},{"name":"Cocoa Cupcake","hex":"#967859"},{"name":"Cocoa Delight","hex":"#8d725a"},{"name":"Cocoa Froth","hex":"#c4ad96"},{"name":"Cocoa Milk","hex":"#7d675d"},{"name":"Cocoa Nib","hex":"#bc9f7e"},{"name":"Cocoa Nutmeg","hex":"#a8816f"},{"name":"Cocoa Parfait","hex":"#dfcec2"},{"name":"Cocoa Pecan","hex":"#967b5d"},{"name":"Cocoa Powder","hex":"#766a5f"},{"name":"Cocoa Shell","hex":"#7e6657"},{"name":"Cocoa Whip","hex":"#a08e7e"},{"name":"Cocobolo","hex":"#784848"},{"name":"Cocoloco","hex":"#aa8f7a"},{"name":"Coconut","hex":"#965a3e"},{"name":"Coconut Agony","hex":"#ebe8e7"},{"name":"Coconut Aroma","hex":"#eeeedd"},{"name":"Coconut Butter","hex":"#f2efe1"},{"name":"Coconut Cream","hex":"#e1dabb"},{"name":"Coconut Crumble","hex":"#e2cea6"},{"name":"Coconut Grove","hex":"#676d43"},{"name":"Coconut Husk","hex":"#7d6044"},{"name":"Coconut Ice","hex":"#ddd4c7"},{"name":"Coconut Macaroon","hex":"#dacac0"},{"name":"Coconut Milk","hex":"#eeebe2"},{"name":"Coconut Pulp","hex":"#fbf9e1"},{"name":"Coconut Shell","hex":"#917a56"},{"name":"Coconut Twist","hex":"#f7f1e1"},{"name":"Coconut White","hex":"#e9edf6"},{"name":"Cocoon","hex":"#dedbcc"},{"name":"Cod Grey","hex":"#2d3032"},{"name":"Codex Grey","hex":"#9c9c9c"},{"name":"Codium Fragile","hex":"#524b2a"},{"name":"Codman Claret","hex":"#8c4040"},{"name":"Coelia Greenshade","hex":"#0e7f78"},{"name":"Coelin Blue","hex":"#497d93"},{"name":"Coffee","hex":"#6f4e37"},{"name":"Coffee Addiction","hex":"#883300"},{"name":"Coffee Adept","hex":"#775511"},{"name":"Coffee Bag","hex":"#dbd6d3"},{"name":"Coffee Bar","hex":"#825c43"},{"name":"Coffee Bean","hex":"#362d26"},{"name":"Coffee Beans","hex":"#6e544b"},{"name":"Coffee Brick","hex":"#6f0c0d"},{"name":"Coffee Clay","hex":"#b7997c"},{"name":"Coffee Cream","hex":"#fff2d7"},{"name":"Coffee Custard","hex":"#ab9b9c"},{"name":"Coffee Diva","hex":"#bea88d"},{"name":"Coffee House","hex":"#6c5b4d"},{"name":"Coffee Kiss","hex":"#b19576"},{"name":"Coffee Liqueur","hex":"#6a513b"},{"name":"Coffee Liqueúr","hex":"#71533f"},{"name":"Coffee Rose","hex":"#a9898d"},{"name":"Coffee Shop","hex":"#725042"},{"name":"Coffee With Cream","hex":"#a68966"},{"name":"Cognac","hex":"#d48c46"},{"name":"Cognac Brown","hex":"#b98563"},{"name":"Cognac Tint","hex":"#a17b49"},{"name":"Cogswell Cedar","hex":"#90534a"},{"name":"Coin Purse","hex":"#e0d5e3"},{"name":"Coin Slot","hex":"#ff4411"},{"name":"Coincidence","hex":"#c7de88"},{"name":"Cola","hex":"#3c2f23"},{"name":"Cola Bubble","hex":"#3c3024"},{"name":"Cold Air Turquoise","hex":"#c1dcdb"},{"name":"Cold and Dark","hex":"#154250"},{"name":"Cold Blooded","hex":"#bbeeee"},{"name":"Cold Blue","hex":"#88dddd"},{"name":"Cold Brew Coffee","hex":"#785736"},{"name":"Cold Canada","hex":"#dbfffe"},{"name":"Cold Current","hex":"#234272"},{"name":"Cold Foam","hex":"#efece3"},{"name":"Cold Front Green","hex":"#85b3b2"},{"name":"Cold Green","hex":"#008b3c"},{"name":"Cold Grey","hex":"#9f9f9f"},{"name":"Cold Heights","hex":"#22ddee"},{"name":"Cold Light","hex":"#dde3e6"},{"name":"Cold Light of Day","hex":"#00eeee"},{"name":"Cold Lips","hex":"#9ba0ef"},{"name":"Cold Morning","hex":"#e6e5e4"},{"name":"Cold North","hex":"#559c9b"},{"name":"Cold Pack","hex":"#0033dd"},{"name":"Cold Pilsner","hex":"#d09351"},{"name":"Cold Pink","hex":"#bca5ad"},{"name":"Cold Press Coffee","hex":"#6c2e09"},{"name":"Cold Purple","hex":"#9d8abf"},{"name":"Cold Sea Currents","hex":"#32545e"},{"name":"Cold Shoulder","hex":"#d4e0ef"},{"name":"Cold Snow","hex":"#fff7fd"},{"name":"Cold Soft Blue","hex":"#d9e7e6"},{"name":"Cold Spring","hex":"#88bb66"},{"name":"Cold Steel","hex":"#262335"},{"name":"Cold Trade Winds","hex":"#7e8692"},{"name":"Cold Turbulence","hex":"#cfe1ef"},{"name":"Cold Turkey","hex":"#cab5b2"},{"name":"Cold Turquoise","hex":"#a5d0cb"},{"name":"Cold Water","hex":"#d9dfe0"},{"name":"Cold Waterlogged Lab Coat","hex":"#839fa3"},{"name":"Cold Wave","hex":"#c2e2e3"},{"name":"Cold Well Water","hex":"#c1e2e3"},{"name":"Cold White","hex":"#edfcfb"},{"name":"Cold Wind","hex":"#e1e3e4"},{"name":"Cold Winter\'s Morn","hex":"#b4bcd1"},{"name":"Coliseum Marble","hex":"#cec8b6"},{"name":"Collard Green","hex":"#536861"},{"name":"Collectible","hex":"#9b8467"},{"name":"Colleen Green","hex":"#ebecda"},{"name":"Collensia","hex":"#bdb7cd"},{"name":"Cologne","hex":"#75bfd2"},{"name":"Colombo Red Mauve","hex":"#ba7ab3"},{"name":"Colonel Mustard","hex":"#b68238"},{"name":"Colonial Aqua","hex":"#a1bdbf"},{"name":"Colonial Blue","hex":"#306a78"},{"name":"Colonial Brick","hex":"#ad6961"},{"name":"Colonial Revival Green Stone","hex":"#a39b7e"},{"name":"Colonial Revival Grey","hex":"#b4b9b9"},{"name":"Colonial Revival Sea Green","hex":"#aebea6"},{"name":"Colonial Revival Stone","hex":"#a7947c"},{"name":"Colonial Revival Tan","hex":"#d3b699"},{"name":"Colonial Rose","hex":"#e7b6bc"},{"name":"Colonial White","hex":"#ffedbc"},{"name":"Colonial Yellow","hex":"#efc488"},{"name":"Colonnade Grey","hex":"#b2b1ad"},{"name":"Colonnade Stone","hex":"#c6c0b6"},{"name":"Colony","hex":"#67a195"},{"name":"Colony Blue","hex":"#65769a"},{"name":"Colony Buff","hex":"#ddc6ab"},{"name":"Color Blind","hex":"#c6d2de"},{"name":"Color Me Green","hex":"#7cb77b"},{"name":"Colorado Bronze","hex":"#ee7766"},{"name":"Colorado Dawn","hex":"#e09cab"},{"name":"Colorado Peach","hex":"#e6994c"},{"name":"Colorado Peak","hex":"#9c9ba7"},{"name":"Colorado Springs","hex":"#88aac4"},{"name":"Colorado Trail","hex":"#b49375"},{"name":"Colorful Leaves","hex":"#aa5c43"},{"name":"Colossus","hex":"#625c91"},{"name":"Columbia","hex":"#009792"},{"name":"Columbia Blue","hex":"#9bddff"},{"name":"Columbian Gold","hex":"#beb861"},{"name":"Columbine","hex":"#f5dae3"},{"name":"Columbo\'s Coat","hex":"#d0cbce"},{"name":"Columbus","hex":"#5f758f"},{"name":"Column Of Oak Green","hex":"#006f37"},{"name":"Colusa Wetlands","hex":"#7f725c"},{"name":"Combed Cotton","hex":"#f4f0de"},{"name":"Come Sail Away","hex":"#5c92c5"},{"name":"Comet","hex":"#636373"},{"name":"Comfort","hex":"#e3ceb8"},{"name":"Comfort Grey","hex":"#bec3bb"},{"name":"Comforting","hex":"#d7c0ab"},{"name":"Comforting Cherry","hex":"#cc1144"},{"name":"Comforting Green","hex":"#d5e0cf"},{"name":"Comforting Grey","hex":"#c5c3b4"},{"name":"Comfrey","hex":"#64856b"},{"name":"Comfy Beige","hex":"#e3d2b6"},{"name":"Comical Coral","hex":"#f3d1c8"},{"name":"Coming up Roses","hex":"#de7485"},{"name":"Commandes","hex":"#0b597c"},{"name":"Commercial White","hex":"#edece6"},{"name":"Commodore","hex":"#25476a"},{"name":"Common Chalcedony","hex":"#c8ad7f"},{"name":"Common Chestnut","hex":"#cd5c5c"},{"name":"Common Dandelion","hex":"#fed85d"},{"name":"Common Feldspar","hex":"#858f94"},{"name":"Common Jasper","hex":"#946943"},{"name":"Common Teal","hex":"#009193"},{"name":"Communist","hex":"#cc0000"},{"name":"Community","hex":"#d0b997"},{"name":"Como","hex":"#4c785c"},{"name":"Compact Disc Grey","hex":"#cdcdcd"},{"name":"Compass","hex":"#8a877b"},{"name":"Compass Blue","hex":"#35475b"},{"name":"Compatible Cream","hex":"#e8c89e"},{"name":"Complex Grey","hex":"#847975"},{"name":"Compliment","hex":"#9e91ae"},{"name":"Composed","hex":"#bbc8b2"},{"name":"Composer\'s Magic","hex":"#7a6e7e"},{"name":"Composite Artefact Green","hex":"#55cc00"},{"name":"Concealed Green","hex":"#263130"},{"name":"Concealment","hex":"#405852"},{"name":"Concept Beige","hex":"#d5bda3"},{"name":"Conceptual","hex":"#7ac34f"},{"name":"Concerto","hex":"#9e6b75"},{"name":"Conch","hex":"#a0b1ae"},{"name":"Conch Pink","hex":"#dba496"},{"name":"Conch Shell","hex":"#fc8f9b"},{"name":"Conclave","hex":"#abb9d7"},{"name":"Concord","hex":"#827f79"},{"name":"Concord Buff","hex":"#e2ceb0"},{"name":"Concord Grape","hex":"#855983"},{"name":"Concord Jam","hex":"#695a82"},{"name":"Concrete","hex":"#d2d1cd"},{"name":"Concrete Jungle","hex":"#999988"},{"name":"Concrete Landscape","hex":"#5c606e"},{"name":"Concrete Sidewalk","hex":"#8d8a81"},{"name":"Condiment","hex":"#b98142"},{"name":"Conditioner","hex":"#ffffcc"},{"name":"Cone Green Blue","hex":"#4a6169"},{"name":"Coney Island","hex":"#6d7e7d"},{"name":"Confection","hex":"#f4ecda"},{"name":"Confectionary","hex":"#d4b4d5"},{"name":"Confetti","hex":"#ddcb46"},{"name":"Confidence","hex":"#a98a6b"},{"name":"Confident White","hex":"#e4dfce"},{"name":"Confident Yellow","hex":"#ffcc13"},{"name":"Cōng Lǜ Green","hex":"#01c08d"},{"name":"Congo","hex":"#e8c3be"},{"name":"Congo Brown","hex":"#654d49"},{"name":"Congo Capture","hex":"#776959"},{"name":"Congo Green","hex":"#00a483"},{"name":"Congo Pink","hex":"#f98379"},{"name":"Congress Blue","hex":"#02478e"},{"name":"Congressional Navy","hex":"#100438"},{"name":"Conifer","hex":"#b1dd52"},{"name":"Conifer Blossom","hex":"#ffdd49"},{"name":"Conifer Cone","hex":"#885555"},{"name":"Conifer Green","hex":"#747767"},{"name":"Conker","hex":"#b94e41"},{"name":"Conker Brown","hex":"#552200"},{"name":"Connaisseur","hex":"#654e44"},{"name":"Connect Red","hex":"#eb6651"},{"name":"Connected Grey","hex":"#898473"},{"name":"Connecticut Lilac","hex":"#ccbbee"},{"name":"Connor\'s Lakefront","hex":"#175a6c"},{"name":"Cono De Vainilla","hex":"#f2d9b8"},{"name":"Conservation","hex":"#796e54"},{"name":"Conservative Grey","hex":"#d1d0c6"},{"name":"Conspiracy Velvet","hex":"#57465d"},{"name":"Constant Coral","hex":"#cd8e7f"},{"name":"Constellation","hex":"#bccedb"},{"name":"Constellation Blue","hex":"#3c4670"},{"name":"Construction Zone","hex":"#ee8442"},{"name":"Consumed by Fire","hex":"#f5811a"},{"name":"Conte Crayon","hex":"#bb4745"},{"name":"Contemplation","hex":"#bec6bb"},{"name":"Contemplative","hex":"#70766a"},{"name":"Contented","hex":"#bdc0b3"},{"name":"Contessa","hex":"#c16f68"},{"name":"Continental Waters","hex":"#98c6cb"},{"name":"Contrail","hex":"#dedeff"},{"name":"Contrasting Yellow","hex":"#f2c200"},{"name":"Convivial Yellow","hex":"#e9d6b0"},{"name":"Cook\'s Bay","hex":"#014e83"},{"name":"Cookie","hex":"#ffe2b7"},{"name":"Cookie Crumb","hex":"#b19778"},{"name":"Cookie Crust","hex":"#e3b258"},{"name":"Cookie Dough","hex":"#ab7100"},{"name":"Cookies And Cream","hex":"#eee0b1"},{"name":"Cool","hex":"#96b3b3"},{"name":"Cool Air of Debonair","hex":"#28394d"},{"name":"Cool Aloe","hex":"#a9d99c"},{"name":"Cool as a Cucumber","hex":"#c6d86b"},{"name":"Cool Ashes","hex":"#929291"},{"name":"Cool Avocado","hex":"#c4b47d"},{"name":"Cool Balaclavas Are Forever","hex":"#18233d"},{"name":"Cool Beige","hex":"#c6b5a7"},{"name":"Cool Black","hex":"#002e63"},{"name":"Cool Blue","hex":"#4984b8"},{"name":"Cool Camel","hex":"#ae996b"},{"name":"Cool Camo","hex":"#827566"},{"name":"Cool Cantaloupe","hex":"#f1d3ca"},{"name":"Cool Charcoal","hex":"#807b76"},{"name":"Cool Clay","hex":"#ba947b"},{"name":"Cool Concrete","hex":"#d9d0c1"},{"name":"Cool Copper","hex":"#ad8458"},{"name":"Cool Crayon","hex":"#b0e6e3"},{"name":"Cool Cream","hex":"#fbe5d9"},{"name":"Cool Cream Spirit","hex":"#b88035"},{"name":"Cool Current","hex":"#283c44"},{"name":"Cool December","hex":"#fdfbf8"},{"name":"Cool Dive","hex":"#00606f"},{"name":"Cool Dusk","hex":"#7b9dad"},{"name":"Cool Elegance","hex":"#cfcfd0"},{"name":"Cool Frost","hex":"#e7e6ed"},{"name":"Cool Granite","hex":"#abaca8"},{"name":"Cool Green","hex":"#33b864"},{"name":"Cool Grey","hex":"#8c93ad"},{"name":"Cool Icicle","hex":"#e1eee6"},{"name":"Cool Jazz","hex":"#bee7e0"},{"name":"Cool Lava","hex":"#e97c6b"},{"name":"Cool Lavender","hex":"#b3a6a5"},{"name":"Cool Melon","hex":"#ebd1cd"},{"name":"Cool Operator\'s Overalls","hex":"#384248"},{"name":"Cool Pink","hex":"#e5ccd1"},{"name":"Cool Purple","hex":"#aa23ff"},{"name":"Cool Quiet","hex":"#cbb5c6"},{"name":"Cool Reflection","hex":"#eaf0eb"},{"name":"Cool Sky","hex":"#cfe0e4"},{"name":"Cool Slate","hex":"#d0ccc5"},{"name":"Cool Spring","hex":"#bbd9c3"},{"name":"Cool Touch","hex":"#7295c9"},{"name":"Cool Water Lake","hex":"#9bd9e5"},{"name":"Cool Waters","hex":"#487678"},{"name":"Cool White","hex":"#dae6e2"},{"name":"Cool Yellow","hex":"#eaefce"},{"name":"Coolbox Ice Turquoise","hex":"#499c9d"},{"name":"Cooled Blue","hex":"#75b9ae"},{"name":"Cooled Cream","hex":"#fadc97"},{"name":"Cooler Than Ever","hex":"#77bbff"},{"name":"Cooling Trend","hex":"#e6e2e4"},{"name":"Copacabana","hex":"#006c8d"},{"name":"Copacabana Sand","hex":"#e5d68e"},{"name":"Copen Blue","hex":"#57748d"},{"name":"Copenhagen","hex":"#adc8c0"},{"name":"Copenhagen Blue","hex":"#21638b"},{"name":"Copious Caramel","hex":"#d0851d"},{"name":"Copper","hex":"#b87333"},{"name":"Copper Beech","hex":"#b1715a"},{"name":"Copper Blush","hex":"#e8c1ab"},{"name":"Copper Brown","hex":"#9a6051"},{"name":"Copper Canyon","hex":"#77422c"},{"name":"Copper Coin","hex":"#da8a67"},{"name":"Copper Cove","hex":"#d89166"},{"name":"Copper Creek","hex":"#a35d31"},{"name":"Copper Harbor","hex":"#d57e52"},{"name":"Copper Hopper","hex":"#bf4000"},{"name":"Copper Lake","hex":"#c09078"},{"name":"Copper Mine","hex":"#b2764c"},{"name":"Copper Mineral Green","hex":"#398174"},{"name":"Copper Mining","hex":"#945c54"},{"name":"Copper Moon","hex":"#c29978"},{"name":"Copper Mountain","hex":"#ab714a"},{"name":"Copper Patina","hex":"#9db4a0"},{"name":"Copper Penny","hex":"#ad6f69"},{"name":"Copper Pink","hex":"#946877"},{"name":"Copper Pipe","hex":"#da8f67"},{"name":"Copper Pot","hex":"#936647"},{"name":"Copper Pyrite Green","hex":"#3e4939"},{"name":"Copper Red","hex":"#cb6d51"},{"name":"Copper River","hex":"#f7a270"},{"name":"Copper Roof Green","hex":"#6f978e"},{"name":"Copper Rose","hex":"#996666"},{"name":"Copper Rust","hex":"#95524c"},{"name":"Copper Tan","hex":"#dc8c5d"},{"name":"Copper Trail","hex":"#c18978"},{"name":"Copper Turquoise","hex":"#38887f"},{"name":"Copper Wire","hex":"#db8b67"},{"name":"Copper-Metal Red","hex":"#ad6342"},{"name":"Copperfield","hex":"#da8a88"},{"name":"Copperhead","hex":"#d68755"},{"name":"Copperleaf","hex":"#cf8874"},{"name":"Coppersmith","hex":"#d98a3f"},{"name":"Coppery Orange","hex":"#7f4330"},{"name":"Copra","hex":"#654636"},{"name":"Coquelicot","hex":"#ff3800"},{"name":"Coquette","hex":"#e5dcdc"},{"name":"Coquina","hex":"#9d8d8e"},{"name":"Coquina Shell","hex":"#bb9a88"},{"name":"Cor-de-pele","hex":"#f4c2c2"},{"name":"Coral","hex":"#ff7f50"},{"name":"Coral Almond","hex":"#e29d94"},{"name":"Coral Atoll","hex":"#dc938d"},{"name":"Coral Bay","hex":"#ddb8a3"},{"name":"Coral Beach","hex":"#ffbbaa"},{"name":"Coral Bead","hex":"#ef9a93"},{"name":"Coral Bells","hex":"#fbc5bb"},{"name":"Coral Bisque","hex":"#f7c6b1"},{"name":"Coral Blossom","hex":"#f7bea2"},{"name":"Coral Blush","hex":"#e5a090"},{"name":"Coral Burst","hex":"#dd5544"},{"name":"Coral Candy","hex":"#f5d0c9"},{"name":"Coral Clay","hex":"#c2b1a1"},{"name":"Coral Cloud","hex":"#dc958d"},{"name":"Coral Coast","hex":"#068e9e"},{"name":"Coral Commander","hex":"#ee6666"},{"name":"Coral Confection","hex":"#fccca7"},{"name":"Coral Corn Snake","hex":"#e9adca"},{"name":"Coral Cove","hex":"#dda69f"},{"name":"Coral Cream","hex":"#ead6ce"},{"name":"Coral Dune","hex":"#fcd5c5"},{"name":"Coral Dusk","hex":"#ffb48a"},{"name":"Coral Dust","hex":"#edaa86"},{"name":"Coral Expression","hex":"#d76a69"},{"name":"Coral Fountain","hex":"#e3a9a2"},{"name":"Coral Garden","hex":"#cf8179"},{"name":"Coral Gold","hex":"#cf714a"},{"name":"Coral Green","hex":"#abe2cf"},{"name":"Coral Haze","hex":"#e28980"},{"name":"Coral Kiss","hex":"#ffddc7"},{"name":"Coral Mantle","hex":"#fcd6cb"},{"name":"Coral Orange","hex":"#e4694c"},{"name":"Coral Pink","hex":"#f88379"},{"name":"Coral Quartz","hex":"#f7685f"},{"name":"Coral Red","hex":"#ff4040"},{"name":"Coral Reef","hex":"#c7bca2"},{"name":"Coral Rose","hex":"#f3774d"},{"name":"Coral Sand","hex":"#ca884e"},{"name":"Coral Serenade","hex":"#f9a48e"},{"name":"Coral Silk","hex":"#f2a37d"},{"name":"Coral Springs","hex":"#abd1af"},{"name":"Coral Stone","hex":"#ddc3b6"},{"name":"Coral Trails","hex":"#ff8b87"},{"name":"Coral Tree","hex":"#ab6e67"},{"name":"Coralette","hex":"#f08674"},{"name":"Coralistic","hex":"#ff917a"},{"name":"Coralite","hex":"#dd675a"},{"name":"Corallite","hex":"#f0dfcd"},{"name":"Corally","hex":"#fea89f"},{"name":"Corazon","hex":"#9d6663"},{"name":"Corbeau","hex":"#111122"},{"name":"Cordial","hex":"#864c52"},{"name":"Cordite","hex":"#616665"},{"name":"Cordon Bleu Crust","hex":"#ebe0c8"},{"name":"Cordova Burgundy","hex":"#7c3744"},{"name":"Cordovan","hex":"#893f45"},{"name":"Cordovan Leather","hex":"#57443d"},{"name":"Corduroy","hex":"#404d49"},{"name":"Cordwood","hex":"#594035"},{"name":"Corfu Shallows","hex":"#008e8d"},{"name":"Corfu Sky","hex":"#8993c3"},{"name":"Corfu Waters","hex":"#008aad"},{"name":"Coriander","hex":"#bbb58d"},{"name":"Coriander Ochre","hex":"#7e7463"},{"name":"Coriander Powder","hex":"#ba9c75"},{"name":"Coriander Seed","hex":"#bdaa6f"},{"name":"Corinthian Column","hex":"#dedecf"},{"name":"Corinthian Pillar","hex":"#e1d1b1"},{"name":"Corinthian Pink","hex":"#ffa6d9"},{"name":"Cork","hex":"#5a4c42"},{"name":"Cork Bark","hex":"#7e6b43"},{"name":"Cork Brown","hex":"#cc8855"},{"name":"Cork Wedge","hex":"#c1a98a"},{"name":"Cork Wood","hex":"#cc7744"},{"name":"Corkboard","hex":"#9d805d"},{"name":"Corkscrew Willow","hex":"#d1b9ab"},{"name":"Cormorant","hex":"#437064"},{"name":"Corn","hex":"#fbec5d"},{"name":"Corn Bread","hex":"#eec657"},{"name":"Corn Chowder","hex":"#e1c595"},{"name":"Corn Field","hex":"#f8f3c4"},{"name":"Corn Harvest","hex":"#8d702a"},{"name":"Corn Husk","hex":"#f2d6ae"},{"name":"Corn Husk Green","hex":"#cecd95"},{"name":"Corn Kernel","hex":"#ffcba4"},{"name":"Corn Maze","hex":"#deaa6e"},{"name":"Corn Poppy Cherry","hex":"#ee4411"},{"name":"Corn Snake","hex":"#ab6134"},{"name":"Corn Stalk","hex":"#fcdba6"},{"name":"Cornell Red","hex":"#b31b11"},{"name":"Cornerstone","hex":"#e3d7bb"},{"name":"Cornflake","hex":"#f0e68c"},{"name":"Cornflower","hex":"#5170d7"},{"name":"Cornflower Blue","hex":"#6c91c5"},{"name":"Cornflower Lilac","hex":"#ffb0ac"},{"name":"Cornmeal","hex":"#ffd691"},{"name":"Cornmeal Beige","hex":"#ebd5c5"},{"name":"Cornsilk","hex":"#fff8dc"},{"name":"Cornsilk Yellow","hex":"#f4c96c"},{"name":"Cornstalk","hex":"#a9947a"},{"name":"Cornucopia","hex":"#ed9b44"},{"name":"Cornus Green","hex":"#908c53"},{"name":"Cornwall Slate","hex":"#949488"},{"name":"Corona","hex":"#ffb437"},{"name":"Coronado Dunes","hex":"#d5a68d"},{"name":"Coronado Moss","hex":"#9ba591"},{"name":"Coronation","hex":"#edecec"},{"name":"Coronation Blue","hex":"#59529c"},{"name":"Coronet Blue","hex":"#59728e"},{"name":"Corporate Green","hex":"#78a486"},{"name":"Corral","hex":"#61513d"},{"name":"Corral Brown","hex":"#937360"},{"name":"Corralize","hex":"#f18a76"},{"name":"Corrosion Green","hex":"#4da48b"},{"name":"Corrosion Red","hex":"#772f21"},{"name":"Corrosive Green","hex":"#54d905"},{"name":"Corsair","hex":"#18576c"},{"name":"Corsican","hex":"#85ac9d"},{"name":"Corsican Blue","hex":"#646093"},{"name":"Corsican Purple","hex":"#7a85af"},{"name":"Cortex","hex":"#a99592"},{"name":"Cortez Chocolate","hex":"#a4896a"},{"name":"Corundum Blue","hex":"#4a6267"},{"name":"Corundum Red","hex":"#95687d"},{"name":"Corvette","hex":"#e9ba81"},{"name":"Corydalis Blue","hex":"#a2c7d7"},{"name":"Cos","hex":"#a4c48e"},{"name":"Cosmetic Blush","hex":"#f6e7e2"},{"name":"Cosmetic Mauve","hex":"#d3bed5"},{"name":"Cosmetic Peach","hex":"#f3c1ab"},{"name":"Cosmetic Red","hex":"#a56078"},{"name":"Cosmic","hex":"#b8b9cb"},{"name":"Cosmic Aura","hex":"#cfb3a6"},{"name":"Cosmic Bit Flip","hex":"#001000"},{"name":"Cosmic Blue","hex":"#93c3cb"},{"name":"Cosmic Cobalt","hex":"#2e2d88"},{"name":"Cosmic Coral","hex":"#e77e6c"},{"name":"Cosmic Dust","hex":"#dce2e5"},{"name":"Cosmic Energy","hex":"#9392ab"},{"name":"Cosmic Explorer","hex":"#551155"},{"name":"Cosmic Green","hex":"#30a877"},{"name":"Cosmic Heart","hex":"#9601f4"},{"name":"Cosmic Latte","hex":"#fff8e7"},{"name":"Cosmic Quest","hex":"#9ea19f"},{"name":"Cosmic Ray","hex":"#cadada"},{"name":"Cosmic Red","hex":"#da244b"},{"name":"Cosmic Sky","hex":"#aaaac4"},{"name":"Cosmic Void","hex":"#090533"},{"name":"Cosmo Purple","hex":"#a09bc6"},{"name":"Cosmopolitan","hex":"#528bab"},{"name":"Cosmos","hex":"#fcd5cf"},{"name":"Cosmos Blue","hex":"#003249"},{"name":"Cossack Dancer","hex":"#4d8aa1"},{"name":"Cossack Green","hex":"#328e13"},{"name":"Costa Del Sol","hex":"#625d2a"},{"name":"Costa Rica Blue","hex":"#77bce2"},{"name":"Costa Rican Palm","hex":"#c44041"},{"name":"Costume Blue","hex":"#6477a0"},{"name":"Cote D\'Azur","hex":"#017c85"},{"name":"Cotinga Purple","hex":"#340059"},{"name":"Cotswold Dill","hex":"#dbcdad"},{"name":"Cottage Blue","hex":"#789ec5"},{"name":"Cottage Cream","hex":"#eddbbd"},{"name":"Cottage Green","hex":"#dcecdc"},{"name":"Cottage Hill","hex":"#acb397"},{"name":"Cottage Rose","hex":"#d9a89a"},{"name":"Cottage Spice","hex":"#a85846"},{"name":"Cottage Walk","hex":"#a08e77"},{"name":"Cottage White","hex":"#f7efdd"},{"name":"Cottagecore Sunset","hex":"#ffdad9"},{"name":"Cottingley Fairies","hex":"#eddbd7"},{"name":"Cotton","hex":"#eeebe1"},{"name":"Cotton & Flax","hex":"#dcc6ba"},{"name":"Cotton Ball","hex":"#f2f7fd"},{"name":"Cotton Blossom","hex":"#f5f1e4"},{"name":"Cotton Boll","hex":"#e7effb"},{"name":"Cotton Candy","hex":"#ffbcd9"},{"name":"Cotton Candy Aesthetic","hex":"#f5bcde"},{"name":"Cotton Candy Explosions","hex":"#dd22ff"},{"name":"Cotton Candy Grape","hex":"#dec74b"},{"name":"Cotton Cardigan","hex":"#7596b8"},{"name":"Cotton Cloth","hex":"#faf4d4"},{"name":"Cotton Club","hex":"#f3e4d3"},{"name":"Cotton Denim","hex":"#91abbe"},{"name":"Cotton Down","hex":"#f0ead8"},{"name":"Cotton Fiber","hex":"#dad0bd"},{"name":"Cotton Field","hex":"#f2f0e8"},{"name":"Cotton Flannel","hex":"#9090a2"},{"name":"Cotton Floss","hex":"#f8f0c7"},{"name":"Cotton Fluff","hex":"#f9f4e5"},{"name":"Cotton Grey","hex":"#d1ccc3"},{"name":"Cotton Indigo","hex":"#066976"},{"name":"Cotton Knit","hex":"#e5dfd2"},{"name":"Cotton Muslin","hex":"#eed09c"},{"name":"Cotton Puff","hex":"#ffffe7"},{"name":"Cotton Ridge","hex":"#f1ebdb"},{"name":"Cotton Seed","hex":"#bfbaaf"},{"name":"Cotton Sheets","hex":"#f7ebdd"},{"name":"Cotton Tail","hex":"#fff8d7"},{"name":"Cotton Tuft","hex":"#e5e1d5"},{"name":"Cotton Whisper","hex":"#faf1df"},{"name":"Cotton White","hex":"#e4e3d8"},{"name":"Cotton Wool Blue","hex":"#83abd2"},{"name":"Cottonseed","hex":"#f5e6c7"},{"name":"Cougar","hex":"#9a7f78"},{"name":"Count\'s Wardrobe","hex":"#772277"},{"name":"Country Air","hex":"#9fb6c6"},{"name":"Country Beige","hex":"#eae1cb"},{"name":"Country Blue","hex":"#717f9b"},{"name":"Country Breeze","hex":"#e0d9d5"},{"name":"Country Charm","hex":"#c7c0a7"},{"name":"Country Club","hex":"#948675"},{"name":"Country Cork","hex":"#b8a584"},{"name":"Country Cottage","hex":"#d9c1b7"},{"name":"Country Dairy","hex":"#f1e9d2"},{"name":"Country Dweller","hex":"#b0967c"},{"name":"Country House Green","hex":"#414634"},{"name":"Country Lake","hex":"#5d7a85"},{"name":"Country Lane","hex":"#fcead1"},{"name":"Country Lane Red","hex":"#894340"},{"name":"Country Linens","hex":"#d7c2a6"},{"name":"Country Meadow","hex":"#1a5a4e"},{"name":"Country Mist","hex":"#dfebe2"},{"name":"Country Rubble","hex":"#d0bca2"},{"name":"Country Sky","hex":"#49545a"},{"name":"Country Sleigh","hex":"#7e4337"},{"name":"Country Squire","hex":"#124a42"},{"name":"Country Summer","hex":"#fffbd7"},{"name":"Country Tweed","hex":"#837b68"},{"name":"Country Weekend","hex":"#88c096"},{"name":"Countryside","hex":"#a4a404"},{"name":"County Green","hex":"#1b4b35"},{"name":"Courgette Yellow","hex":"#daa135"},{"name":"Court Green","hex":"#b9b7a0"},{"name":"Court Jester","hex":"#926d9d"},{"name":"Court-Bouillon","hex":"#cecb97"},{"name":"Courteous","hex":"#d2d3de"},{"name":"Courtly Purple","hex":"#bbafc1"},{"name":"Courtyard","hex":"#c8bda4"},{"name":"Courtyard Blue","hex":"#718084"},{"name":"Courtyard Green","hex":"#978d71"},{"name":"Couscous","hex":"#ffe29b"},{"name":"Cousteau","hex":"#55a9d6"},{"name":"Covent Garden","hex":"#86b097"},{"name":"Cover of Night","hex":"#494e4f"},{"name":"Covered Bridge","hex":"#6a3c3b"},{"name":"Covered in Platinum","hex":"#b9baba"},{"name":"Covered Wagon","hex":"#726449"},{"name":"Covert Green","hex":"#80765f"},{"name":"Coverts Wood Pigeon","hex":"#d4cdd2"},{"name":"Coveted Blue","hex":"#9bbdb2"},{"name":"Coveted Gem","hex":"#b6b3bf"},{"name":"Cow\'s Milk","hex":"#f1ede5"},{"name":"Cowardly Custard","hex":"#fbf1c0"},{"name":"Cowbell","hex":"#ffe481"},{"name":"Cowboy","hex":"#443736"},{"name":"Cowboy Boots","hex":"#695239"},{"name":"Cowboy Hat","hex":"#b27d50"},{"name":"Cowboy Trails","hex":"#8d6b4b"},{"name":"Cowgirl Blue","hex":"#6a87ab"},{"name":"Cowgirl Boots","hex":"#9e7c60"},{"name":"Cowhide","hex":"#92484a"},{"name":"Cowpeas","hex":"#661100"},{"name":"Coy","hex":"#fff4f3"},{"name":"Coy Pink","hex":"#f9dad8"},{"name":"Coyote","hex":"#dc9b68"},{"name":"Coyote Brown","hex":"#81613c"},{"name":"Coyote Tracks","hex":"#b08f7f"},{"name":"Cozumel","hex":"#0aafa4"},{"name":"Cozy Blanket","hex":"#c3a598"},{"name":"Cozy Cocoa","hex":"#aa8f7d"},{"name":"Cozy Cottage","hex":"#f2ddd8"},{"name":"Cozy Cover","hex":"#e4c38f"},{"name":"Cozy Cream","hex":"#e0dbc7"},{"name":"Cozy Nook","hex":"#fba765"},{"name":"Cozy Summer Sunset","hex":"#eb9f9f"},{"name":"Cozy Wool","hex":"#d1b99b"},{"name":"Crab Bisque","hex":"#f0b599"},{"name":"Crab Curry","hex":"#d94b28"},{"name":"Crab Nebula","hex":"#004455"},{"name":"Crab-Apple","hex":"#f0e681"},{"name":"Crabapple","hex":"#87382f"},{"name":"Crabby Apple","hex":"#753531"},{"name":"Crack Willow","hex":"#b0a470"},{"name":"Cracked Earth","hex":"#c5b1a0"},{"name":"Cracked Pepper","hex":"#4f5152"},{"name":"Cracked Slate","hex":"#69656a"},{"name":"Cracked Wheat","hex":"#f4dfbd"},{"name":"Cracker Bitz","hex":"#d1b088"},{"name":"Cracker Crumbs","hex":"#d3b9b0"},{"name":"Crackled","hex":"#f2e7d1"},{"name":"Crackled Leather","hex":"#a27c4f"},{"name":"Crackling Lake","hex":"#b3c5cc"},{"name":"Cradle Pillow","hex":"#f1d3d9"},{"name":"Cradle Pink","hex":"#eac9d5"},{"name":"Craft","hex":"#293b4a"},{"name":"Craft Brown","hex":"#b7a083"},{"name":"Craft Juggler","hex":"#e3c8aa"},{"name":"Craft Paper","hex":"#8a6645"},{"name":"Craftsman Blue","hex":"#008193"},{"name":"Craftsman Brown","hex":"#ae9278"},{"name":"Craftsman Gold","hex":"#d3b78b"},{"name":"Crail","hex":"#a65648"},{"name":"Cranach Blue","hex":"#2b8288"},{"name":"Cranapple","hex":"#db8079"},{"name":"Cranapple Cream","hex":"#e6c4c5"},{"name":"Cranberry","hex":"#9e003a"},{"name":"Cranberry Blue","hex":"#7494b1"},{"name":"Cranberry Jam","hex":"#a34f55"},{"name":"Cranberry Pie","hex":"#c27277"},{"name":"Cranberry Red","hex":"#7e5350"},{"name":"Cranberry Sauce","hex":"#a53756"},{"name":"Cranberry Splash","hex":"#da5265"},{"name":"Cranberry Tart","hex":"#893e40"},{"name":"Cranberry Whip","hex":"#8e4541"},{"name":"Cranberry Zing","hex":"#944944"},{"name":"Cranbrook","hex":"#a65570"},{"name":"Crantini","hex":"#954c52"},{"name":"Crash Dummy","hex":"#eeee66"},{"name":"Crash Pink","hex":"#cc88ff"},{"name":"Crashing Waves","hex":"#3e6f87"},{"name":"Crater Brown","hex":"#4d3e3c"},{"name":"Crater Crawler","hex":"#c8ced6"},{"name":"Crater Lake","hex":"#63797e"},{"name":"Cray","hex":"#bc763c"},{"name":"Crayola Green","hex":"#1dac78"},{"name":"Crayola Orange","hex":"#fe7438"},{"name":"Crazy","hex":"#e5cb3f"},{"name":"Crazy Ex","hex":"#cc1177"},{"name":"Crazy Eyes","hex":"#5eb68d"},{"name":"Crazy Horse","hex":"#a57648"},{"name":"Crazy Pink","hex":"#f970ac"},{"name":"Cream","hex":"#ffffc2"},{"name":"Cream and Butter","hex":"#feeea5"},{"name":"Cream and Sugar","hex":"#ddcfb9"},{"name":"Cream Blush","hex":"#f8c49a"},{"name":"Cream Cake","hex":"#e3d0ad"},{"name":"Cream Can","hex":"#eec051"},{"name":"Cream Cheese Avocado","hex":"#d7d3a6"},{"name":"Cream Cheese Frosting","hex":"#f4efe2"},{"name":"Cream Clear","hex":"#f1f3da"},{"name":"Cream Custard","hex":"#f2d7b0"},{"name":"Cream Filling","hex":"#f5f1da"},{"name":"Cream Gold","hex":"#dcc356"},{"name":"Cream of Mushroom","hex":"#ebd1be"},{"name":"Cream Pink","hex":"#f6e4d9"},{"name":"Cream Puff","hex":"#ffbb99"},{"name":"Cream Rose","hex":"#f7e4df"},{"name":"Cream Silk","hex":"#eee3c6"},{"name":"Cream Snap","hex":"#eccba0"},{"name":"Cream Tan","hex":"#e4c7b8"},{"name":"Cream Violet","hex":"#a9aabd"},{"name":"Cream Washed","hex":"#f2e0c5"},{"name":"Cream Wave","hex":"#e8dbc5"},{"name":"Cream White","hex":"#f2eee2"},{"name":"Cream Yellow","hex":"#f3daa7"},{"name":"Creamed Avocado","hex":"#70804d"},{"name":"Creamed Butter","hex":"#fffcd3"},{"name":"Creamed Caramel","hex":"#b79c94"},{"name":"Creamed Muscat","hex":"#8b6962"},{"name":"Creamed Raspberry","hex":"#bd6883"},{"name":"Creamery","hex":"#edd2b7"},{"name":"Creamy","hex":"#efe8db"},{"name":"Creamy Apricot","hex":"#ffe8bd"},{"name":"Creamy Avocado","hex":"#d8f19c"},{"name":"Creamy Axolotl","hex":"#ffdae8"},{"name":"Creamy Beige","hex":"#fde1c5"},{"name":"Creamy Berry","hex":"#debccd"},{"name":"Creamy Cameo","hex":"#f9eedc"},{"name":"Creamy Cappuccino","hex":"#dbccb5"},{"name":"Creamy Caramel","hex":"#b3956c"},{"name":"Creamy Chenille","hex":"#e1cfaf"},{"name":"Creamy Cloud Dreams","hex":"#fff5e0"},{"name":"Creamy Coral","hex":"#dd7788"},{"name":"Creamy Corn","hex":"#fff2c2"},{"name":"Creamy Custard","hex":"#f9e7bf"},{"name":"Creamy Freesia","hex":"#ebd0db"},{"name":"Creamy Garlic","hex":"#ecefe3"},{"name":"Creamy Gelato","hex":"#f0e2c5"},{"name":"Creamy Ivory","hex":"#eeddaa"},{"name":"Creamy Lemon","hex":"#fff0b2"},{"name":"Creamy Mauve","hex":"#dccad8"},{"name":"Creamy Mint","hex":"#aaffaa"},{"name":"Creamy Mushroom","hex":"#cabdae"},{"name":"Creamy Nougat","hex":"#d4b88f"},{"name":"Creamy Orange","hex":"#fce9d1"},{"name":"Creamy Orange Blush","hex":"#fe9c7b"},{"name":"Creamy Peach","hex":"#f4a384"},{"name":"Creamy Spinach","hex":"#b2bfa6"},{"name":"Creamy Strawberry","hex":"#fcd2df"},{"name":"Creamy Sunshine Pastel","hex":"#fffbb0"},{"name":"Creamy Sweet Corn","hex":"#f7c34c"},{"name":"Creamy White","hex":"#f0e9d6"},{"name":"Crease","hex":"#7a6d44"},{"name":"Create","hex":"#c9cabf"},{"name":"Credo","hex":"#dcba42"},{"name":"Creed","hex":"#c1a44a"},{"name":"Creek Bay","hex":"#ab9d89"},{"name":"Creek Bend","hex":"#928c87"},{"name":"Creek Pebble","hex":"#dbd7d9"},{"name":"Creeping Bellflower","hex":"#b48ac2"},{"name":"Crema","hex":"#c16104"},{"name":"Crème","hex":"#ffffb6"},{"name":"Creme Angels","hex":"#f8ede2"},{"name":"Crème Brûlée","hex":"#ffe39b"},{"name":"Crème de Caramel","hex":"#d4b38f"},{"name":"Crème de la Crème","hex":"#f3e7b4"},{"name":"Crème de Menthe","hex":"#f1fde9"},{"name":"Crème de Pêche","hex":"#fdf5e0"},{"name":"Crème Fraîche","hex":"#eceee6"},{"name":"Crème Vanille","hex":"#f1f0e0"},{"name":"Cremini","hex":"#cfa33b"},{"name":"Creole","hex":"#393227"},{"name":"Creole Cottage","hex":"#e7b89a"},{"name":"Creole Pink","hex":"#f5d6cc"},{"name":"Creole Sauce","hex":"#ee8833"},{"name":"Crepe","hex":"#d4bc94"},{"name":"Crepe Myrtle","hex":"#e399ca"},{"name":"Crêpe Papier","hex":"#dbd7c4"},{"name":"Crepe Silk White","hex":"#f0eee3"},{"name":"Crescendo","hex":"#e3df84"},{"name":"Crescent Cream","hex":"#edd1b1"},{"name":"Crescent Moon","hex":"#f1e9cf"},{"name":"Cress Green","hex":"#bca949"},{"name":"Cress Vinaigrette","hex":"#bcb58a"},{"name":"Cressida","hex":"#8aae7c"},{"name":"Crestline","hex":"#b4bcbf"},{"name":"Cretan Green","hex":"#598784"},{"name":"Crete","hex":"#77712b"},{"name":"Crete Shore","hex":"#96908b"},{"name":"Crewel Tan","hex":"#cbb99b"},{"name":"Cria Wool","hex":"#e4d5bc"},{"name":"Cricket","hex":"#a6a081"},{"name":"Cricket Chirping","hex":"#c7c10c"},{"name":"Cricket Field","hex":"#c3d29c"},{"name":"Cricket Green","hex":"#6a7b6b"},{"name":"Cricket\'s Cross","hex":"#908a78"},{"name":"Crimini Mushroom","hex":"#e2cdb1"},{"name":"Crimson","hex":"#8c000f"},{"name":"Crimson Blaze","hex":"#ad3d1e"},{"name":"Crimson Boy","hex":"#b44933"},{"name":"Crimson Cloud","hex":"#c32f40"},{"name":"Crimson Glory","hex":"#be0032"},{"name":"Crimson Red","hex":"#980001"},{"name":"Crimson Silk","hex":"#b5413b"},{"name":"Crimson Strawberry","hex":"#9f2d47"},{"name":"Crimson Sunset","hex":"#c01b0c"},{"name":"Crimson Sword","hex":"#b53111"},{"name":"Crimson Velvet Sunset","hex":"#b52604"},{"name":"Crimson Warrior","hex":"#b35138"},{"name":"Crisis Red","hex":"#bb2222"},{"name":"Crisp","hex":"#eaebaf"},{"name":"Crisp Candlelight","hex":"#f4ebd0"},{"name":"Crisp Capsicum","hex":"#5d6e3b"},{"name":"Crisp Celery","hex":"#cdcca6"},{"name":"Crisp Cyan","hex":"#22ffff"},{"name":"Crisp Green","hex":"#abc43a"},{"name":"Crisp Lettuce","hex":"#4f9785"},{"name":"Crisp Linen","hex":"#e7e1d3"},{"name":"Crisp Muslin","hex":"#e9e2d7"},{"name":"Crisp Wonton","hex":"#f3dcc6"},{"name":"Crispa","hex":"#e7dfc1"},{"name":"Crisps","hex":"#e2bd67"},{"name":"Crispy Chicken Skin","hex":"#ddaa44"},{"name":"Crispy Crust","hex":"#ebe0cf"},{"name":"Crispy Gingersnap","hex":"#bb7838"},{"name":"Crispy Gold","hex":"#c49832"},{"name":"Crispy Samosa","hex":"#ffbb66"},{"name":"Crocker Grove","hex":"#b1a685"},{"name":"Crockery","hex":"#a49887"},{"name":"Crocodile","hex":"#706950"},{"name":"Crocodile Eye","hex":"#777722"},{"name":"Crocodile Green","hex":"#b7ac87"},{"name":"Crocodile Smile","hex":"#898e58"},{"name":"Crocodile Tears","hex":"#d6d69b"},{"name":"Crocodile Tooth","hex":"#d1ccc2"},{"name":"Crocus","hex":"#c071a8"},{"name":"Crocus Petal","hex":"#b99bc5"},{"name":"Crocus Tint","hex":"#fdf1c7"},{"name":"Croissant","hex":"#c4ab86"},{"name":"Croissant Crumbs","hex":"#f8efd8"},{"name":"Cronut","hex":"#d69f60"},{"name":"Crooked River","hex":"#797869"},{"name":"Crop Circle","hex":"#e9bf63"},{"name":"Cropper Blue","hex":"#5c7b97"},{"name":"Croque Monsieur","hex":"#ac9877"},{"name":"Croquet Blue","hex":"#4971ad"},{"name":"Cross My Heart","hex":"#ad2a2d"},{"name":"Crossbow","hex":"#60543f"},{"name":"Crossed Fingers","hex":"#ddb596"},{"name":"Crossroads","hex":"#edd2a3"},{"name":"Crow","hex":"#180614"},{"name":"Crow Black","hex":"#263145"},{"name":"Crow Black Blue","hex":"#112f4b"},{"name":"Crowberry","hex":"#220055"},{"name":"Crowberry Blue","hex":"#003447"},{"name":"Crowd Pleaser","hex":"#5b4459"},{"name":"Crown Blue","hex":"#484e68"},{"name":"Crown Gold","hex":"#b48c60"},{"name":"Crown Jewel","hex":"#4f325e"},{"name":"Crown Jewels","hex":"#946dad"},{"name":"Crown of Liechtenstein","hex":"#d8b411"},{"name":"Crown of Thorns","hex":"#763c33"},{"name":"Crown Point Cream","hex":"#fff0c1"},{"name":"Crowned One","hex":"#d4b597"},{"name":"Crowning","hex":"#5a4f6c"},{"name":"Crowshead","hex":"#1c1208"},{"name":"Crucified Red","hex":"#cc0044"},{"name":"Crude Banana","hex":"#21c40e"},{"name":"Cruel Jewel","hex":"#ee2288"},{"name":"Cruel Ruby","hex":"#dd3344"},{"name":"Cruel Sea","hex":"#213638"},{"name":"Cruise","hex":"#b4e2d5"},{"name":"Cruising","hex":"#018498"},{"name":"Crumble Topping","hex":"#efcea0"},{"name":"Crumbling Statue","hex":"#cabfb4"},{"name":"Crumbly Lipstick","hex":"#ee66bb"},{"name":"Crunch","hex":"#f2b95f"},{"name":"Crunchy Carrot","hex":"#ea5013"},{"name":"Crusade King","hex":"#dbc364"},{"name":"Crushed Almond","hex":"#d4cac5"},{"name":"Crushed Berries","hex":"#d15b9b"},{"name":"Crushed Berry","hex":"#83515b"},{"name":"Crushed Cashew","hex":"#ffedd5"},{"name":"Crushed Cinnamon","hex":"#b7735e"},{"name":"Crushed Clay","hex":"#ae7f71"},{"name":"Crushed Grape","hex":"#835a88"},{"name":"Crushed Ice","hex":"#c4fff7"},{"name":"Crushed Limestone","hex":"#d6ddd3"},{"name":"Crushed Orange","hex":"#e37730"},{"name":"Crushed Oregano","hex":"#635d46"},{"name":"Crushed Peony","hex":"#e4ddd8"},{"name":"Crushed Pineapple","hex":"#efcc44"},{"name":"Crushed Raspberry","hex":"#b06880"},{"name":"Crushed Silk","hex":"#d8cfbe"},{"name":"Crushed Stone","hex":"#bcaa9f"},{"name":"Crushed Velvet","hex":"#445397"},{"name":"Crushed Violets","hex":"#673c4c"},{"name":"Crusoe","hex":"#165b31"},{"name":"Crust","hex":"#898076"},{"name":"Crusta","hex":"#f38653"},{"name":"Crustose Lichen","hex":"#c04e01"},{"name":"Cry Baby Blue","hex":"#c3d4e7"},{"name":"Cry Me a River","hex":"#427898"},{"name":"Cry of a Rose","hex":"#b23c5d"},{"name":"Cryo Freeze","hex":"#ddece0"},{"name":"Crypt","hex":"#373b40"},{"name":"Cryptic Light","hex":"#6d434e"},{"name":"Crypto Gold","hex":"#ffe314"},{"name":"Crystal","hex":"#a7d8de"},{"name":"Crystal Apple","hex":"#cee9a0"},{"name":"Crystal Ball","hex":"#365955"},{"name":"Crystal Bay","hex":"#dbe2e7"},{"name":"Crystal Bell","hex":"#efeeef"},{"name":"Crystal Blue","hex":"#68a0b0"},{"name":"Crystal Brooke","hex":"#e4e6dc"},{"name":"Crystal Clear","hex":"#f4e9ea"},{"name":"Crystal Cut","hex":"#f8f4ed"},{"name":"Crystal Dark Red","hex":"#6d2c32"},{"name":"Crystal Falls","hex":"#e1e6f2"},{"name":"Crystal Gem","hex":"#79d0a7"},{"name":"Crystal Glass","hex":"#ddffee"},{"name":"Crystal Glass Green","hex":"#b1e2cb"},{"name":"Crystal Green","hex":"#a4d579"},{"name":"Crystal Grey","hex":"#cfc1b8"},{"name":"Crystal Haze","hex":"#e7e2d6"},{"name":"Crystal Lake","hex":"#88b5c4"},{"name":"Crystal Oasis","hex":"#afc7bf"},{"name":"Crystal Palace","hex":"#d3cfab"},{"name":"Crystal Pink","hex":"#e8c3bf"},{"name":"Crystal Rapids","hex":"#b2e4d0"},{"name":"Crystal River","hex":"#b1e2ee"},{"name":"Crystal Rose","hex":"#fdc3c6"},{"name":"Crystal Salt White","hex":"#d9e5dd"},{"name":"Crystal Seas","hex":"#5dafce"},{"name":"Crystal Teal","hex":"#006e81"},{"name":"Crystal Waters","hex":"#b4cedf"},{"name":"Crystal Yellow","hex":"#e4d99f"},{"name":"Crystalline","hex":"#e9e3de"},{"name":"Crystalline Falls","hex":"#d9e6e2"},{"name":"Crystalline Pink","hex":"#debbbf"},{"name":"Crystallize","hex":"#ecdfdf"},{"name":"Crystalsong Blue","hex":"#4fb3b3"},{"name":"Cub","hex":"#6e5c4b"},{"name":"Cub Scout","hex":"#4e6341"},{"name":"Cuba Brown","hex":"#623d3d"},{"name":"Cuba Libre","hex":"#73383c"},{"name":"Cuban Cigar","hex":"#927247"},{"name":"Cuban Rhythm","hex":"#9b555d"},{"name":"Cuban Sand","hex":"#bc9b83"},{"name":"Cucumber","hex":"#006400"},{"name":"Cucumber Bomber","hex":"#bbdd11"},{"name":"Cucumber Cream","hex":"#e4ebb1"},{"name":"Cucumber Crush","hex":"#a2ac86"},{"name":"Cucumber Green","hex":"#466353"},{"name":"Cucumber Ice","hex":"#cdd79d"},{"name":"Cucumber Milk","hex":"#c2f177"},{"name":"Cucuzza Verde","hex":"#9ba373"},{"name":"Cuddle","hex":"#bccae8"},{"name":"Cuddlepot","hex":"#ad8068"},{"name":"Cuddly Yarn","hex":"#fffce4"},{"name":"Culinary Blue","hex":"#7bb6c1"},{"name":"Culpeo","hex":"#e69b3a"},{"name":"Cultist Robe","hex":"#331233"},{"name":"Cultured","hex":"#f6f4f5"},{"name":"Cultured Pearl","hex":"#e5dcd6"},{"name":"Cultured Rose","hex":"#e5867b"},{"name":"Cumberland Fog","hex":"#dadbdf"},{"name":"Cumberland Grey","hex":"#68655d"},{"name":"Cumberland Sausage","hex":"#e5dfdc"},{"name":"Cumin","hex":"#a58459"},{"name":"Cumin Ochre","hex":"#a06600"},{"name":"Cummings Oak","hex":"#695a45"},{"name":"Cumquat Cream","hex":"#f19b7d"},{"name":"Cumulus","hex":"#f3f3e6"},{"name":"Cumulus Cloud","hex":"#b0c6df"},{"name":"Cup Noodles","hex":"#fedd7d"},{"name":"Cup of Cocoa","hex":"#baa087"},{"name":"Cup of Tea","hex":"#caae7b"},{"name":"Cupcake","hex":"#8a6e53"},{"name":"Cupcake Pink","hex":"#f6d8d2"},{"name":"Cupcake Rose","hex":"#e6c7b7"},{"name":"Cupid","hex":"#f5b2c5"},{"name":"Cupid Arrow","hex":"#f5e2e2"},{"name":"Cupid\'s Arrow","hex":"#ee6b8b"},{"name":"Cupid\'s Eye","hex":"#ff22dd"},{"name":"Cupid\'s Revenge","hex":"#eedcdf"},{"name":"Cupola Yellow","hex":"#dcbc8e"},{"name":"Cuppa Coffee","hex":"#b09f8f"},{"name":"Curaçao Blue","hex":"#008894"},{"name":"Curated Lilac","hex":"#a6a6b6"},{"name":"Curated White","hex":"#eae1ce"},{"name":"Curd","hex":"#f8e1ba"},{"name":"Curds & Whey","hex":"#b59c76"},{"name":"Curds and Whey","hex":"#bca483"},{"name":"Cure All","hex":"#aa6988"},{"name":"Cured Eggplant","hex":"#380835"},{"name":"Curio","hex":"#d3d8d2"},{"name":"Curio Brown","hex":"#988977"},{"name":"Curious","hex":"#d9e49e"},{"name":"Curious Blue","hex":"#3d85b8"},{"name":"Curious Chipmunk","hex":"#dabfa4"},{"name":"Curious Collection","hex":"#d2bb98"},{"name":"Curlew","hex":"#766859"},{"name":"Curly Maple","hex":"#d8c8be"},{"name":"Curly Willow","hex":"#b1a387"},{"name":"Currant Jam","hex":"#884a50"},{"name":"Currant Violet","hex":"#553e51"},{"name":"Curry","hex":"#d6a332"},{"name":"Curry Brown","hex":"#845038"},{"name":"Curry Bubbles","hex":"#f5b700"},{"name":"Curry Powder","hex":"#cc6600"},{"name":"Curry Sauce","hex":"#be9e6f"},{"name":"Currywurst","hex":"#ddaa33"},{"name":"Cursed Black","hex":"#131313"},{"name":"Curtain Call","hex":"#70666a"},{"name":"Curtsy","hex":"#ffd6b8"},{"name":"Cushion Bush","hex":"#c1c8af"},{"name":"Custard","hex":"#fffd78"},{"name":"Custard Cream","hex":"#fbefd0"},{"name":"Custard Powder","hex":"#f8dcaa"},{"name":"Custard Puff","hex":"#fceeae"},{"name":"Customs Green","hex":"#003839"},{"name":"Cut Heather","hex":"#9e909e"},{"name":"Cut of Mustard","hex":"#bc914d"},{"name":"Cut the Mustard","hex":"#ba7f38"},{"name":"Cut Velvet","hex":"#b391c8"},{"name":"Cute Crab","hex":"#dd4444"},{"name":"Cute Little Pink","hex":"#f4e2e1"},{"name":"Cute Pixie","hex":"#8d8d40"},{"name":"Cuticle Pink","hex":"#e3a49a"},{"name":"Cutlery Polish","hex":"#f4dda5"},{"name":"Cuttlefish","hex":"#7fbbc2"},{"name":"Cutty Sark","hex":"#5c8173"},{"name":"Cyan","hex":"#0ff0fe"},{"name":"Cyan Azure","hex":"#4e82b4"},{"name":"Cyan Blue","hex":"#14a3c7"},{"name":"Cyan Cobalt Blue","hex":"#28589c"},{"name":"Cyan Cornflower Blue","hex":"#188bc2"},{"name":"Cyan Sky","hex":"#00b5b8"},{"name":"Cyanara","hex":"#779080"},{"name":"Cyanite","hex":"#00b7eb"},{"name":"Cyber Grape","hex":"#58427c"},{"name":"Cyber Lavender","hex":"#e6e6fa"},{"name":"Cyber Neon Green","hex":"#00ff26"},{"name":"Cyber Yellow","hex":"#ffd400"},{"name":"Cyberpink","hex":"#ff2077"},{"name":"Cyberspace","hex":"#44484d"},{"name":"Cyclamen","hex":"#d687ba"},{"name":"Cyclamen Red","hex":"#a7598d"},{"name":"Cymophane Yellow","hex":"#f3e4a7"},{"name":"Cynical Black","hex":"#171717"},{"name":"Cypress","hex":"#585d40"},{"name":"Cypress Bark Red","hex":"#6f3028"},{"name":"Cypress Garden","hex":"#667c71"},{"name":"Cypress Green","hex":"#9e8f57"},{"name":"Cypress Grey Blue","hex":"#6a7786"},{"name":"Cypress Vine","hex":"#5e6552"},{"name":"Cyprus","hex":"#0f4645"},{"name":"Cyprus Green","hex":"#699a88"},{"name":"Cyprus Spring","hex":"#acb7b0"},{"name":"Cyrus Grass","hex":"#cfc5a7"},{"name":"Czarina","hex":"#775859"},{"name":"Czech Bakery","hex":"#dec9a9"},{"name":"D. Darx Blue","hex":"#030764"},{"name":"Da Blues","hex":"#516172"},{"name":"Daah-Ling","hex":"#aa6179"},{"name":"Dachshund","hex":"#7e553e"},{"name":"Dad\'s Coupe","hex":"#2f484e"},{"name":"Daddy-O","hex":"#b0af8a"},{"name":"Daemonette Hide","hex":"#696684"},{"name":"Daffodil","hex":"#ffff31"},{"name":"Daffodil Yellow","hex":"#ffe285"},{"name":"Dagger Moth","hex":"#e8e1d5"},{"name":"Dahlia","hex":"#8b4189"},{"name":"Dahlia Delight","hex":"#f8bbd3"},{"name":"Dahlia Matte Red","hex":"#765067"},{"name":"Dahlia Mauve","hex":"#b05988"},{"name":"Dahlia Purple","hex":"#8774b0"},{"name":"Daikon White","hex":"#d4d4c4"},{"name":"Daintree","hex":"#012731"},{"name":"Dainty Apricot","hex":"#fdc592"},{"name":"Dainty Debutante","hex":"#f4bdb3"},{"name":"Dainty Flower","hex":"#e9dfe5"},{"name":"Dainty Lace","hex":"#decfbb"},{"name":"Dainty Peach","hex":"#ffcdb9"},{"name":"Dainty Pink","hex":"#ecbcce"},{"name":"Daiquiri Green","hex":"#c6d26e"},{"name":"Dairy Cream","hex":"#edd2a4"},{"name":"Dairy Made","hex":"#f0b33c"},{"name":"Daisy","hex":"#fed340"},{"name":"Daisy Bush","hex":"#5b3e90"},{"name":"Daisy Chain","hex":"#fff09b"},{"name":"Daisy Desi","hex":"#fcdf8a"},{"name":"Daisy Field","hex":"#f4f3e8"},{"name":"Daisy Leaf","hex":"#55643b"},{"name":"Daisy White","hex":"#f8f3e3"},{"name":"Dakota Wheat","hex":"#e1bd8e"},{"name":"Dallas","hex":"#664a2d"},{"name":"Dallas Dust","hex":"#ece0d6"},{"name":"Dallol Yellow","hex":"#fddc00"},{"name":"Dalmatian Sage","hex":"#97a3da"},{"name":"Daly Waters","hex":"#afdadf"},{"name":"Damascene","hex":"#996d32"},{"name":"Damask","hex":"#fcf2df"},{"name":"Dame Dignity","hex":"#999ba8"},{"name":"Damp Basement","hex":"#5f6171"},{"name":"Damsel","hex":"#c69eae"},{"name":"Damson","hex":"#854c65"},{"name":"Damson Mauve","hex":"#583563"},{"name":"Damson Plum","hex":"#dda0dd"},{"name":"Dana","hex":"#576780"},{"name":"Dance Studio","hex":"#064d83"},{"name":"Dancer","hex":"#dc9399"},{"name":"Dancing Butterfly","hex":"#fcf3c6"},{"name":"Dancing Crocodiles","hex":"#254a47"},{"name":"Dancing Daisy","hex":"#efc857"},{"name":"Dancing Dogs","hex":"#6e493d"},{"name":"Dancing Dolphin","hex":"#c4baa1"},{"name":"Dancing Dragonfly","hex":"#006658"},{"name":"Dancing Green","hex":"#c5cd8f"},{"name":"Dancing in the Rain","hex":"#abc5d6"},{"name":"Dancing in the Spring","hex":"#7b7289"},{"name":"Dancing Jewel","hex":"#429b77"},{"name":"Dancing Kite","hex":"#c8cc9e"},{"name":"Dancing Mist","hex":"#bfc8d8"},{"name":"Dancing Sea","hex":"#1c4d8f"},{"name":"Dancing Wand","hex":"#c8a4bd"},{"name":"Dancing-Lady Orchid","hex":"#dfff00"},{"name":"Dandelion","hex":"#fedf08"},{"name":"Dandelion Floatie","hex":"#eae8ec"},{"name":"Dandelion Tea","hex":"#f7eac1"},{"name":"Dandelion Tincture","hex":"#f0e130"},{"name":"Dandelion Whisper","hex":"#fff0b5"},{"name":"Dandelion Wine","hex":"#fcf2b9"},{"name":"Dandelion Wish","hex":"#e3bb65"},{"name":"Dandelion Yellow","hex":"#fcd93b"},{"name":"Dandy Lion","hex":"#facc51"},{"name":"Danger","hex":"#ff0e0e"},{"name":"Danger Ridge","hex":"#595539"},{"name":"Dangerous Affair","hex":"#d00220"},{"name":"Dangerous Robot","hex":"#cbc5c6"},{"name":"Dangerously Elegant","hex":"#616b89"},{"name":"Dangerously Green","hex":"#16f12d"},{"name":"Dangerously Red","hex":"#d84139"},{"name":"Daniel Boone","hex":"#5e4235"},{"name":"Danish Pine","hex":"#ba9967"},{"name":"Dante Peak","hex":"#b4d5d5"},{"name":"Danube","hex":"#5b89c0"},{"name":"Daphne","hex":"#116db1"},{"name":"Daphne Rose","hex":"#c37cb3"},{"name":"Dapper","hex":"#715b49"},{"name":"Dapper Dingo","hex":"#e2c299"},{"name":"Dapper Greyhound","hex":"#697078"},{"name":"Dapper Tan","hex":"#947f65"},{"name":"Dapple Grey","hex":"#959486"},{"name":"Dappled Daydream","hex":"#c5cc9f"},{"name":"Dappled Sunlight","hex":"#f2e3c9"},{"name":"Dard Hunter Green","hex":"#3a4a3f"},{"name":"Daredevil","hex":"#ab4343"},{"name":"Daring","hex":"#df644e"},{"name":"Daring Deception","hex":"#f0dfe0"},{"name":"Daring Indigo","hex":"#374874"},{"name":"Dark","hex":"#1b2431"},{"name":"Dark & Stormy","hex":"#353f51"},{"name":"Dark Ages","hex":"#9698a3"},{"name":"Dark as Night","hex":"#495252"},{"name":"Dark Ash","hex":"#6a6d6d"},{"name":"Dark Berry","hex":"#5c464a"},{"name":"Dark Blackberry","hex":"#533958"},{"name":"Dark Blond","hex":"#a68a6e"},{"name":"Dark Blue","hex":"#315b7d"},{"name":"Dark Brazilian Topaz","hex":"#92462f"},{"name":"Dark Burgundy Wine","hex":"#4b4146"},{"name":"Dark Catacombs","hex":"#513116"},{"name":"Dark Cavern","hex":"#55504d"},{"name":"Dark Charcoal","hex":"#333232"},{"name":"Dark Cherry Mocha","hex":"#774d41"},{"name":"Dark Chocolate","hex":"#624a49"},{"name":"Dark Citron","hex":"#aabb00"},{"name":"Dark Clove","hex":"#4c3d31"},{"name":"Dark Cobalt Blue","hex":"#33578a"},{"name":"Dark Crimson","hex":"#843c41"},{"name":"Dark Crypt","hex":"#3f4551"},{"name":"Dark Cyan","hex":"#008b8b"},{"name":"Dark Danger","hex":"#2f1212"},{"name":"Dark Denim","hex":"#005588"},{"name":"Dark Denim Blue","hex":"#00334f"},{"name":"Dark Drama","hex":"#5a3939"},{"name":"Dark Dreams","hex":"#332266"},{"name":"Dark Earth","hex":"#884455"},{"name":"Dark Ebony","hex":"#3d2004"},{"name":"Dark Eclipse","hex":"#112244"},{"name":"Dark Elf","hex":"#3b3f42"},{"name":"Dark Emerald","hex":"#00834e"},{"name":"Dark Energy","hex":"#503d4d"},{"name":"Dark Engine","hex":"#3e3f41"},{"name":"Dark Envy","hex":"#a4a582"},{"name":"Dark Everglade","hex":"#3e554f"},{"name":"Dark Fern","hex":"#0a480d"},{"name":"Dark Fig Violet","hex":"#573b4c"},{"name":"Dark Forest","hex":"#556962"},{"name":"Dark Galaxy","hex":"#0018a8"},{"name":"Dark Granite","hex":"#4f443f"},{"name":"Dark Green","hex":"#033500"},{"name":"Dark Grey","hex":"#363737"},{"name":"Dark Grey Mauve","hex":"#4e4459"},{"name":"Dark Horizon","hex":"#666699"},{"name":"Dark Humor","hex":"#661122"},{"name":"Dark Imperial Blue","hex":"#00416a"},{"name":"Dark Iris","hex":"#4d5a7e"},{"name":"Dark Ivy","hex":"#66856f"},{"name":"Dark Jade","hex":"#5c8774"},{"name":"Dark Jungle","hex":"#0b3021"},{"name":"Dark Knight","hex":"#151931"},{"name":"Dark Lagoon","hex":"#6a7f7d"},{"name":"Dark Lavender","hex":"#856798"},{"name":"Dark Lemon Lime","hex":"#8bbe1b"},{"name":"Dark Lilac","hex":"#9c6da5"},{"name":"Dark Lime","hex":"#84b701"},{"name":"Dark Lime Green","hex":"#7ebd01"},{"name":"Dark Limestone","hex":"#989a98"},{"name":"Dark LUA Console","hex":"#5f574f"},{"name":"Dark Magenta","hex":"#8b008b"},{"name":"Dark Mahogany","hex":"#482029"},{"name":"Dark Marmalade","hex":"#994939"},{"name":"Dark Maroon","hex":"#3c0008"},{"name":"Dark Matter","hex":"#110101"},{"name":"Dark Midnight Blue","hex":"#003377"},{"name":"Dark Mineral","hex":"#515763"},{"name":"Dark Mountain Meadow","hex":"#1ab385"},{"name":"Dark Navy","hex":"#40495b"},{"name":"Dark Night","hex":"#404b57"},{"name":"Dark Olive","hex":"#373e02"},{"name":"Dark Olive Green","hex":"#454636"},{"name":"Dark Olive Paste","hex":"#6e5160"},{"name":"Dark Onyx","hex":"#2e2d30"},{"name":"Dark Orange","hex":"#c65102"},{"name":"Dark Orchestra","hex":"#251b19"},{"name":"Dark Pansy","hex":"#653d7c"},{"name":"Dark Periwinkle","hex":"#665fd1"},{"name":"Dark Pewter","hex":"#606865"},{"name":"Dark Pine Green","hex":"#193232"},{"name":"Dark Pink","hex":"#cb416b"},{"name":"Dark Potion","hex":"#603e53"},{"name":"Dark Prince","hex":"#6b6c89"},{"name":"Dark Princess Pink","hex":"#d9308a"},{"name":"Dark Puce","hex":"#4f3a3c"},{"name":"Dark Purple","hex":"#35063e"},{"name":"Dark Purple Grey","hex":"#6e576b"},{"name":"Dark Rainforest","hex":"#505838"},{"name":"Dark Raspberry","hex":"#872657"},{"name":"Dark Reaper","hex":"#3b5150"},{"name":"Dark Red","hex":"#840000"},{"name":"Dark Red Brown","hex":"#4a2125"},{"name":"Dark Rift","hex":"#060b14"},{"name":"Dark River","hex":"#3e4445"},{"name":"Dark Roast","hex":"#4a2d2f"},{"name":"Dark Room","hex":"#626d7b"},{"name":"Dark Rose","hex":"#b5485d"},{"name":"Dark Royalty","hex":"#02066f"},{"name":"Dark Rum","hex":"#45362b"},{"name":"Dark Sage","hex":"#6d765b"},{"name":"Dark Sakura","hex":"#a2646f"},{"name":"Dark Salmon","hex":"#c85a53"},{"name":"Dark Salmon Injustice","hex":"#e8957a"},{"name":"Dark Sanctuary","hex":"#3f012c"},{"name":"Dark Sand","hex":"#a88f59"},{"name":"Dark Sapphire","hex":"#082567"},{"name":"Dark Sea","hex":"#4c5560"},{"name":"Dark Seagreen","hex":"#666655"},{"name":"Dark Seashore Night","hex":"#113691"},{"name":"Dark Secret","hex":"#3e5361"},{"name":"Dark Serpent","hex":"#113311"},{"name":"Dark Shadow","hex":"#4a4b4d"},{"name":"Dark Shadows","hex":"#5b595d"},{"name":"Dark Shamrock","hex":"#33cc99"},{"name":"Dark Side","hex":"#004444"},{"name":"Dark Side of the Moon","hex":"#070d0d"},{"name":"Dark Sienna","hex":"#3c1414"},{"name":"Dark Sky","hex":"#909989"},{"name":"Dark Slate","hex":"#465352"},{"name":"Dark Slate Blue","hex":"#214761"},{"name":"Dark Slate Grey","hex":"#2f4f4f"},{"name":"Dark Slimelime","hex":"#66aa11"},{"name":"Dark Soft Violet","hex":"#4d52de"},{"name":"Dark Sorrel","hex":"#587a65"},{"name":"Dark Soul","hex":"#112255"},{"name":"Dark Souls","hex":"#a3a3a2"},{"name":"Dark Space","hex":"#414a4c"},{"name":"Dark Spell","hex":"#303b4c"},{"name":"Dark Sting","hex":"#7e736d"},{"name":"Dark Storm Cloud","hex":"#819094"},{"name":"Dark Strawberry","hex":"#80444c"},{"name":"Dark Summoning","hex":"#383839"},{"name":"Dark Taupe","hex":"#483c3c"},{"name":"Dark Tavern","hex":"#634e43"},{"name":"Dark Teal","hex":"#014d4e"},{"name":"Dark Tone Ink","hex":"#121212"},{"name":"Dark Topaz","hex":"#817c87"},{"name":"Dark Truffle","hex":"#594d46"},{"name":"Dark Turquoise","hex":"#045c5a"},{"name":"Dark Tyrian Blue","hex":"#0d2b52"},{"name":"Dark Umber","hex":"#932904"},{"name":"Dark Veil","hex":"#141311"},{"name":"Dark Violet","hex":"#34013f"},{"name":"Dark Void","hex":"#151517"},{"name":"Dark Walnut","hex":"#56443e"},{"name":"Dark Wood","hex":"#855e42"},{"name":"Dark Wood Grain","hex":"#4f301f"},{"name":"Dark Yellow","hex":"#e7bf8e"},{"name":"Darkest Dungeon","hex":"#660011"},{"name":"Darkest Forest","hex":"#223311"},{"name":"Darkest Grape","hex":"#625768"},{"name":"Darkest Navy","hex":"#43455e"},{"name":"Darkest Spruce","hex":"#303f3d"},{"name":"Darkness","hex":"#16160e"},{"name":"Darkness Green","hex":"#3a4645"},{"name":"Darkout","hex":"#2d1608"},{"name":"Darkroom","hex":"#443e40"},{"name":"Darkshore","hex":"#464964"},{"name":"Darlak","hex":"#4f4969"},{"name":"Darling Bud","hex":"#ff88ff"},{"name":"Darling Clementine","hex":"#d29f7a"},{"name":"Darling Lilac","hex":"#c9acd6"},{"name":"Darth Torus","hex":"#1d045d"},{"name":"Darth Vader","hex":"#27252a"},{"name":"Dartmoor Mist","hex":"#cddce3"},{"name":"Dartmouth Green","hex":"#00703c"},{"name":"Dash of Curry","hex":"#ca6e5f"},{"name":"Dash of Oregano","hex":"#928459"},{"name":"Dashing","hex":"#eaebe8"},{"name":"Date Fruit Brown","hex":"#af642b"},{"name":"DaVanzo Beige","hex":"#ccac86"},{"name":"DaVanzo Green","hex":"#58936d"},{"name":"Davao Green","hex":"#b1d27b"},{"name":"Dave\'s Den","hex":"#c3bfae"},{"name":"Davy\'s Grey","hex":"#535554"},{"name":"Dawn","hex":"#9f9d91"},{"name":"Dawn Blue","hex":"#cacccb"},{"name":"Dawn Departs","hex":"#ccffff"},{"name":"Dawn Grey","hex":"#6d7273"},{"name":"Dawn Light","hex":"#fadfa9"},{"name":"Dawn of the Fairies","hex":"#770044"},{"name":"Dawn Pink","hex":"#e6d6cd"},{"name":"Dawnstone","hex":"#70756e"},{"name":"Day At The Zoo","hex":"#ffa373"},{"name":"Day Dreamer","hex":"#d9cdc4"},{"name":"Day Glow","hex":"#eadd82"},{"name":"Day Glow Orange","hex":"#eb5c34"},{"name":"Day Lily","hex":"#fff9ec"},{"name":"Day On Mercury","hex":"#d5d2d1"},{"name":"Day Spa","hex":"#eaefed"},{"name":"Daybreak","hex":"#7e7597"},{"name":"Daybreak Sun","hex":"#f7eecb"},{"name":"Daydream","hex":"#e3ebae"},{"name":"Daydreaming","hex":"#f4f0e1"},{"name":"Dayflower","hex":"#38a1db"},{"name":"Dayflower Blue","hex":"#758cbf"},{"name":"Daylight Jungle","hex":"#546c52"},{"name":"Daylight Lilac","hex":"#a385b3"},{"name":"Daylily Yellow","hex":"#f8f0d2"},{"name":"Daystar","hex":"#fff8da"},{"name":"Dazzle","hex":"#5287b9"},{"name":"Dazzle and Delight","hex":"#d99b7b"},{"name":"Dazzle Me","hex":"#edebea"},{"name":"Dazzling Blue","hex":"#3850a0"},{"name":"Dazzling Red","hex":"#d82c0d"},{"name":"De York","hex":"#85ca87"},{"name":"Dead 99","hex":"#99dead"},{"name":"Dead Blue Eyes","hex":"#0055cc"},{"name":"Dead Forest","hex":"#434b4f"},{"name":"Dead Grass","hex":"#e4dc8a"},{"name":"Dead Lake","hex":"#2e5a88"},{"name":"Dead Nettle White","hex":"#d2dad0"},{"name":"Dead Pixel","hex":"#3b3a3a"},{"name":"Dead Sea","hex":"#77eeee"},{"name":"Dead Sea Mud","hex":"#3a403b"},{"name":"Deadlock","hex":"#8f666a"},{"name":"Deadly Depths","hex":"#111144"},{"name":"Deadly Yellow","hex":"#dead00"},{"name":"Deadsy","hex":"#c2a84b"},{"name":"Deadwind Pass","hex":"#596d7f"},{"name":"Dear Darling","hex":"#a30112"},{"name":"Dear Reader","hex":"#f5f3e6"},{"name":"Death by Chocolate","hex":"#60443f"},{"name":"Death Cap","hex":"#e7d9db"},{"name":"Death Guard","hex":"#9eb37b"},{"name":"Death of a Star","hex":"#e760d2"},{"name":"Death Valley Beige","hex":"#ddbb88"},{"name":"Deathclaw Brown","hex":"#b36853"},{"name":"Deathworld Forest","hex":"#5c6730"},{"name":"Deauville Mauve","hex":"#af9294"},{"name":"Debian Red","hex":"#d70a53"},{"name":"Debonair","hex":"#90a0a6"},{"name":"Debonaire","hex":"#cbd0dd"},{"name":"Debrito","hex":"#ee7744"},{"name":"Debutante","hex":"#ed7468"},{"name":"Debutante Ball","hex":"#6e8dbb"},{"name":"Decadence","hex":"#73667b"},{"name":"Decadent Chocolate","hex":"#513233"},{"name":"Decadial Pink","hex":"#decade"},{"name":"Decanter","hex":"#ada3bb"},{"name":"Decanting","hex":"#bfa1ad"},{"name":"Decaying Leave","hex":"#d57835"},{"name":"December Dawn","hex":"#dfe2ea"},{"name":"December Eve","hex":"#415064"},{"name":"December Forest","hex":"#e0e8db"},{"name":"December Rain","hex":"#d6dddc"},{"name":"December Sky","hex":"#d5d7d9"},{"name":"Decency","hex":"#bfb5ca"},{"name":"Dechala Lilac","hex":"#b69fcc"},{"name":"Dechant Pear Yellow","hex":"#d79e62"},{"name":"Decisive Yellow","hex":"#fdcc4e"},{"name":"Deck Crew","hex":"#5e7cac"},{"name":"Deco","hex":"#cccf82"},{"name":"Deco Grey","hex":"#89978e"},{"name":"Deco Pink","hex":"#f6c2cc"},{"name":"Deco Red","hex":"#824942"},{"name":"Deco Rose","hex":"#9e6370"},{"name":"Deco Shell","hex":"#f9d5c9"},{"name":"Deco-Rate","hex":"#8fcbc0"},{"name":"Deconstruction","hex":"#7b736b"},{"name":"Décor White","hex":"#f2e5cf"},{"name":"Decor Yellow","hex":"#f6bb00"},{"name":"Decoration Blue","hex":"#3f74a3"},{"name":"Decorative Iris","hex":"#817181"},{"name":"Decorator White","hex":"#f6f4ec"},{"name":"Decore Splash","hex":"#00829e"},{"name":"Decorous Amber","hex":"#ac7559"},{"name":"Decorum","hex":"#b39aa0"},{"name":"Decreasing Brown","hex":"#987654"},{"name":"Dedication","hex":"#fee2c8"},{"name":"Deduction","hex":"#d4cb83"},{"name":"Deep Amethyst","hex":"#5b3082"},{"name":"Deep Aquamarine","hex":"#78dbe2"},{"name":"Deep Atlantic Blue","hex":"#004f57"},{"name":"Deep Aubergine","hex":"#5c4a4d"},{"name":"Deep Azure","hex":"#3e5580"},{"name":"Deep Bamboo Yellow","hex":"#d99f50"},{"name":"Deep Bloom","hex":"#c57776"},{"name":"Deep Blue","hex":"#040273"},{"name":"Deep Blue Sea","hex":"#1a5d72"},{"name":"Deep Blush","hex":"#e36f8a"},{"name":"Deep Bottlebrush","hex":"#5e675a"},{"name":"Deep Breath","hex":"#27275f"},{"name":"Deep Bronze","hex":"#51412d"},{"name":"Deep Brown","hex":"#342a2a"},{"name":"Deep Carmine","hex":"#744456"},{"name":"Deep Cerulean","hex":"#007bbb"},{"name":"Deep Champagne","hex":"#fad6c5"},{"name":"Deep Cherrywood","hex":"#6b473d"},{"name":"Deep Chestnut","hex":"#b94e48"},{"name":"Deep Claret","hex":"#771133"},{"name":"Deep Cobalt","hex":"#424769"},{"name":"Deep Commitment to Purple","hex":"#7d4071"},{"name":"Deep Coral","hex":"#da7c55"},{"name":"Deep Cove","hex":"#051040"},{"name":"Deep Current","hex":"#007381"},{"name":"Deep Daichi Black","hex":"#322d2d"},{"name":"Deep Daigi White","hex":"#e9e7e6"},{"name":"Deep Daijin Blue","hex":"#3311aa"},{"name":"Deep Dairei Red","hex":"#7c2229"},{"name":"Deep Daishin Yellow","hex":"#f0ca00"},{"name":"Deep Daitoku Purple","hex":"#661177"},{"name":"Deep Denim","hex":"#6688ff"},{"name":"Deep Depths","hex":"#545648"},{"name":"Deep Dive","hex":"#2e5467"},{"name":"Deep Diving","hex":"#5e97a9"},{"name":"Deep Dungeon","hex":"#553d3a"},{"name":"Deep Earth","hex":"#4d4b4b"},{"name":"Deep Emerald","hex":"#556551"},{"name":"Deep Evergreen","hex":"#4c574b"},{"name":"Deep Exquisite","hex":"#614454"},{"name":"Deep Fir","hex":"#193925"},{"name":"Deep Fire","hex":"#bf5c42"},{"name":"Deep Forest","hex":"#3c463e"},{"name":"Deep Forest Brown","hex":"#393437"},{"name":"Deep Forestial Escapade","hex":"#335500"},{"name":"Deep Fried","hex":"#f0b054"},{"name":"Deep Fried Sun Rays","hex":"#f6c75e"},{"name":"Deep Galaxy","hex":"#414048"},{"name":"Deep Garnet","hex":"#5f4246"},{"name":"Deep Grass Green","hex":"#5a9274"},{"name":"Deep Green","hex":"#02590f"},{"name":"Deep Greige","hex":"#726a6e"},{"name":"Deep Indigo","hex":"#4c567a"},{"name":"Deep into the Jungle","hex":"#004b49"},{"name":"Deep into the Wood","hex":"#306030"},{"name":"Deep Jungle","hex":"#3f564a"},{"name":"Deep Koamaru","hex":"#343467"},{"name":"Deep Lagoon","hex":"#005a6f"},{"name":"Deep Lake","hex":"#006c70"},{"name":"Deep Larkspur","hex":"#687189"},{"name":"Deep Lavender","hex":"#565a7d"},{"name":"Deep Lichen Green","hex":"#747962"},{"name":"Deep Loch","hex":"#2e5767"},{"name":"Deep Magenta","hex":"#a0025c"},{"name":"Deep Mahogany","hex":"#634743"},{"name":"Deep Marine","hex":"#2e6469"},{"name":"Deep Maroon","hex":"#623f45"},{"name":"Deep Marsh","hex":"#938565"},{"name":"Deep Merlot","hex":"#574958"},{"name":"Deep Mint","hex":"#55aa66"},{"name":"Deep Mooring","hex":"#3d4c46"},{"name":"Deep Mulberry","hex":"#544954"},{"name":"Deep Mystery","hex":"#494c59"},{"name":"Deep Night","hex":"#494c55"},{"name":"Deep Ocean","hex":"#2a4b5f"},{"name":"Deep Orange","hex":"#dc4d01"},{"name":"Deep Orange-coloured Brown","hex":"#864735"},{"name":"Deep Orchid","hex":"#525476"},{"name":"Deep Pacific","hex":"#006e62"},{"name":"Deep Peacock Blue","hex":"#009286"},{"name":"Deep Periwinkle","hex":"#7c83bc"},{"name":"Deep Pine","hex":"#557138"},{"name":"Deep Plum","hex":"#4a2a59"},{"name":"Deep Pond","hex":"#014420"},{"name":"Deep Purple","hex":"#36013f"},{"name":"Deep Red","hex":"#9a0200"},{"name":"Deep Reddish Orange","hex":"#bb603c"},{"name":"Deep Reservoir","hex":"#424f5f"},{"name":"Deep Rhubarb","hex":"#7f5153"},{"name":"Deep Rift","hex":"#4c6a68"},{"name":"Deep River","hex":"#0079b3"},{"name":"Deep Royal","hex":"#364c68"},{"name":"Deep Saffron","hex":"#ff9932"},{"name":"Deep Sanction","hex":"#195155"},{"name":"Deep Sapphire","hex":"#082466"},{"name":"Deep Sea","hex":"#167e65"},{"name":"Deep Sea Base","hex":"#2c2c57"},{"name":"Deep Sea Blue","hex":"#2a4b5a"},{"name":"Deep Sea Coral","hex":"#d86157"},{"name":"Deep Sea Dive","hex":"#376167"},{"name":"Deep Sea Diver","hex":"#255c61"},{"name":"Deep Sea Dolphin","hex":"#6a6873"},{"name":"Deep Sea Dream","hex":"#002d69"},{"name":"Deep Sea Exploration","hex":"#2000b1"},{"name":"Deep Sea Green","hex":"#095859"},{"name":"Deep Sea Grey","hex":"#879294"},{"name":"Deep Sea Nightmare","hex":"#002366"},{"name":"Deep Sea Shadow","hex":"#4f5a4c"},{"name":"Deep Sea Turtle","hex":"#5e5749"},{"name":"Deep Seagrass","hex":"#959889"},{"name":"Deep Seaweed","hex":"#37412a"},{"name":"Deep Serenity","hex":"#7f6968"},{"name":"Deep Shadow","hex":"#514a3d"},{"name":"Deep Shale","hex":"#737c84"},{"name":"Deep Sky Blue","hex":"#0d75f8"},{"name":"Deep Slate Green","hex":"#0f261f"},{"name":"Deep Slate Olive","hex":"#172713"},{"name":"Deep Smoke Signal","hex":"#7d8392"},{"name":"Deep South","hex":"#b4989f"},{"name":"Deep Space","hex":"#3f4143"},{"name":"Deep Space Rodeo","hex":"#332277"},{"name":"Deep Space Royal","hex":"#223382"},{"name":"Deep Space Sparkle","hex":"#4a646c"},{"name":"Deep Tan","hex":"#726751"},{"name":"Deep Taupe","hex":"#7b6660"},{"name":"Deep Teal","hex":"#00555a"},{"name":"Deep Terra Cotta","hex":"#8b483d"},{"name":"Deep Turquoise","hex":"#01b0bd"},{"name":"Deep Ultramarine","hex":"#404f95"},{"name":"Deep Umber","hex":"#694d3d"},{"name":"Deep Velvet","hex":"#313248"},{"name":"Deep Violet","hex":"#330066"},{"name":"Deep Viridian","hex":"#4b6443"},{"name":"Deep Walnut","hex":"#615d58"},{"name":"Deep Water","hex":"#2a6fa1"},{"name":"Deep Well","hex":"#33313b"},{"name":"Deep Wisteria","hex":"#444172"},{"name":"Deepest Fig","hex":"#454669"},{"name":"Deepest Mauve","hex":"#6d595a"},{"name":"Deepest Sea","hex":"#444d56"},{"name":"Deepest Water","hex":"#466174"},{"name":"Deeply Embarrassed","hex":"#ecb2b3"},{"name":"Deepsea Kraken","hex":"#082599"},{"name":"Deer","hex":"#ba8759"},{"name":"Deer God","hex":"#96847a"},{"name":"Deer Leather","hex":"#ac7434"},{"name":"Deer Run","hex":"#b2a69a"},{"name":"Deer Tracks","hex":"#a1614c"},{"name":"Deer Trail","hex":"#6a634c"},{"name":"Deer Valley","hex":"#c7a485"},{"name":"Defenestration","hex":"#c6d5e4"},{"name":"Defense Matrix","hex":"#88ffee"},{"name":"Degas Pink","hex":"#b37e8c"},{"name":"Déjà Vu","hex":"#bed1cc"},{"name":"Del Rio","hex":"#b5998e"},{"name":"Del Sol Maize","hex":"#dabf92"},{"name":"Delaunay Green","hex":"#aab350"},{"name":"Delaware Blue Hen","hex":"#76a09e"},{"name":"Delayed Yellow","hex":"#fdf901"},{"name":"Delectable","hex":"#9a92a7"},{"name":"Delft","hex":"#3d5e8c"},{"name":"Delft Blue","hex":"#3311ee"},{"name":"Delhi Dance Pink","hex":"#fdc1c5"},{"name":"Delhi Spice","hex":"#a36a6d"},{"name":"Deli Yellow","hex":"#e8b523"},{"name":"Delicacy","hex":"#f5e3e2"},{"name":"Delicacy White","hex":"#ebe2e5"},{"name":"Delicate Ballet Blue","hex":"#c2d1e2"},{"name":"Delicate Bloom","hex":"#dbbfce"},{"name":"Delicate Blue","hex":"#bcdfe8"},{"name":"Delicate Blue Mist","hex":"#bed7f0"},{"name":"Delicate Blush","hex":"#efd7d1"},{"name":"Delicate Brown","hex":"#a78c8b"},{"name":"Delicate Cloud","hex":"#dddfe8"},{"name":"Delicate Daisy","hex":"#e9edc0"},{"name":"Delicate Dawn","hex":"#fed9bc"},{"name":"Delicate Girl Blue","hex":"#6ab2ca"},{"name":"Delicate Green","hex":"#93b0a9"},{"name":"Delicate Honeysweet","hex":"#bcab99"},{"name":"Delicate Ice","hex":"#b7d2e3"},{"name":"Delicate Lace","hex":"#f3e6d4"},{"name":"Delicate Lemon","hex":"#eedd77"},{"name":"Delicate Lilac","hex":"#b6aed6"},{"name":"Delicate Lilac Crystal","hex":"#d7d2e2"},{"name":"Delicate Mauve","hex":"#c5b5ca"},{"name":"Delicate Mint","hex":"#ddf3e6"},{"name":"Delicate Mist","hex":"#e1ebe5"},{"name":"Delicate Pink","hex":"#e4cfd3"},{"name":"Delicate Prunus","hex":"#a95c68"},{"name":"Delicate Rose","hex":"#f7e0d6"},{"name":"Delicate Sapling","hex":"#d7f3dd"},{"name":"Delicate Seashell","hex":"#ffefdd"},{"name":"Delicate Snow Goose","hex":"#d1e2d8"},{"name":"Delicate Sweet Apricot","hex":"#fdcdbd"},{"name":"Delicate Truffle","hex":"#aa9c8b"},{"name":"Delicate Turquoise","hex":"#c0dfe2"},{"name":"Delicate Viola","hex":"#d7d6dc"},{"name":"Delicate Violet","hex":"#8c8da8"},{"name":"Delicate White","hex":"#f1f2ee"},{"name":"Délicieux au Chocolat","hex":"#412010"},{"name":"Delicioso","hex":"#483b36"},{"name":"Delicious","hex":"#585e46"},{"name":"Delicious Berry","hex":"#654254"},{"name":"Delicious Dill","hex":"#77cc00"},{"name":"Delicious Mandarin","hex":"#ffaa11"},{"name":"Delicious Melon","hex":"#ffd7b0"},{"name":"Delighted Chimp","hex":"#2e212d"},{"name":"Delightful","hex":"#d2b6be"},{"name":"Delightful Camouflage","hex":"#a5a943"},{"name":"Delightful Dandelion","hex":"#eeee33"},{"name":"Delightful Green","hex":"#00ee00"},{"name":"Delightful Pastry","hex":"#f9e7c8"},{"name":"Delightful Peach","hex":"#ffebd1"},{"name":"Delirious Donkey","hex":"#ddcccc"},{"name":"Dell","hex":"#486531"},{"name":"Della Robbia Blue","hex":"#7a9dcb"},{"name":"Delltone","hex":"#8ec39e"},{"name":"Delos Blue","hex":"#169ec0"},{"name":"Delphinium Blue","hex":"#6198ae"},{"name":"Delta","hex":"#999b95"},{"name":"Delta Break","hex":"#979147"},{"name":"Delta Green","hex":"#2d4a4c"},{"name":"Delta Mint","hex":"#c5e6cf"},{"name":"Delta Waters","hex":"#c4c2ab"},{"name":"Deluge","hex":"#0077aa"},{"name":"Delusional Dragonfly","hex":"#66bbcc"},{"name":"Deluxe Days","hex":"#8bc7e6"},{"name":"Demerara Sugar","hex":"#e1b270"},{"name":"Demeter","hex":"#ecda9e"},{"name":"Demeter Green","hex":"#02cc02"},{"name":"Demitasse","hex":"#493c31"},{"name":"Democrat","hex":"#00aef3"},{"name":"Demon","hex":"#7a0006"},{"name":"Demon Princess","hex":"#d2144b"},{"name":"Demonic","hex":"#bb2233"},{"name":"Demonic Kiss","hex":"#d02b48"},{"name":"Demonic Presence","hex":"#7c0a02"},{"name":"Demonic Purple","hex":"#d725de"},{"name":"Demonic Yellow","hex":"#ffe700"},{"name":"Demure","hex":"#e8d4d5"},{"name":"Demure Pink","hex":"#f7d2c4"},{"name":"Denali Green","hex":"#7d775d"},{"name":"Denim","hex":"#2243b6"},{"name":"Denim Blue","hex":"#2f6479"},{"name":"Denim Drift","hex":"#7c8d96"},{"name":"Denim Light","hex":"#b8cad5"},{"name":"Denim Tradition","hex":"#7f97b5"},{"name":"Dense Shrub","hex":"#636d65"},{"name":"Densetsu Green","hex":"#889911"},{"name":"Dent Corn","hex":"#f2b717"},{"name":"Dentist Green","hex":"#99d590"},{"name":"Denver River","hex":"#7795c1"},{"name":"Dépaysement","hex":"#e7d8c7"},{"name":"Depth Charge","hex":"#355859"},{"name":"Depths of Night","hex":"#2c319b"},{"name":"Derby","hex":"#f9e4c6"},{"name":"Derby Brown","hex":"#8a7265"},{"name":"Derby Green","hex":"#599c89"},{"name":"Derbyshire","hex":"#245e36"},{"name":"Derry Coast Sunrise","hex":"#f9e1cf"},{"name":"Desaturated Cyan","hex":"#669999"},{"name":"Descent to the Catacombs","hex":"#445155"},{"name":"Desert","hex":"#ccad60"},{"name":"Desert Bud","hex":"#c28996"},{"name":"Desert Cactus","hex":"#afca9d"},{"name":"Desert Camel","hex":"#c2ae88"},{"name":"Desert Canyon","hex":"#80474e"},{"name":"Desert Caravan","hex":"#d3a169"},{"name":"Desert Chaparral","hex":"#727a60"},{"name":"Desert Clay","hex":"#9e6e43"},{"name":"Desert Convoy","hex":"#f7d497"},{"name":"Desert Coral","hex":"#d16459"},{"name":"Desert Cover","hex":"#d0c8a9"},{"name":"Desert Dawn","hex":"#eddbe8"},{"name":"Desert Dessert","hex":"#ffba6b"},{"name":"Desert Dune","hex":"#b5ab9c"},{"name":"Desert Dusk","hex":"#ad9a91"},{"name":"Desert Dust","hex":"#e2bb8a"},{"name":"Desert Echo","hex":"#b6a29d"},{"name":"Desert Field","hex":"#efcdb8"},{"name":"Desert Floor","hex":"#c6b183"},{"name":"Desert Flower","hex":"#ff8d82"},{"name":"Desert Grey","hex":"#b8a487"},{"name":"Desert Hot Springs","hex":"#c4c8aa"},{"name":"Desert Iguana","hex":"#f3f2e1"},{"name":"Desert Khaki","hex":"#d6cdb7"},{"name":"Desert Lights","hex":"#bd9c9d"},{"name":"Desert Lily","hex":"#fef5db"},{"name":"Desert Locust","hex":"#a9a450"},{"name":"Desert Mauve","hex":"#e8d2d6"},{"name":"Desert Mesa","hex":"#efcfbc"},{"name":"Desert Mirage","hex":"#b9e0cf"},{"name":"Desert Mist","hex":"#deb181"},{"name":"Desert Morning","hex":"#d0bbb0"},{"name":"Desert Moss","hex":"#bea166"},{"name":"Desert Mountain","hex":"#e9dbd2"},{"name":"Desert Night","hex":"#5f727a"},{"name":"Desert Palm","hex":"#675239"},{"name":"Desert Panzer","hex":"#c0cabc"},{"name":"Desert Pear","hex":"#aaae9a"},{"name":"Desert Pebble","hex":"#cab698"},{"name":"Desert Plain","hex":"#e5ddc9"},{"name":"Desert Powder","hex":"#fbefda"},{"name":"Desert Red","hex":"#b3837f"},{"name":"Desert Riverbed","hex":"#d5a884"},{"name":"Desert Rock","hex":"#d5c6bd"},{"name":"Desert Rose","hex":"#cd616b"},{"name":"Desert Sage","hex":"#90926f"},{"name":"Desert Sand","hex":"#edc9af"},{"name":"Desert Sandstorm","hex":"#b9a795"},{"name":"Desert Shadow","hex":"#403c39"},{"name":"Desert Shadows","hex":"#9f927a"},{"name":"Desert Smog","hex":"#e9e4cf"},{"name":"Desert Soil","hex":"#a15f3b"},{"name":"Desert Spice","hex":"#c66b30"},{"name":"Desert Springs","hex":"#dcddcb"},{"name":"Desert Star","hex":"#f9f0e1"},{"name":"Desert Storm","hex":"#ede7e0"},{"name":"Desert Suede","hex":"#d5c7b3"},{"name":"Desert Sun","hex":"#bb7326"},{"name":"Desert Sunrise","hex":"#fcb58d"},{"name":"Desert Tan","hex":"#a38c6c"},{"name":"Desert Taupe","hex":"#7f7166"},{"name":"Desert Temple","hex":"#ddcc99"},{"name":"Desert Willow","hex":"#89734b"},{"name":"Desert Wind","hex":"#e5d295"},{"name":"Desert Yellow","hex":"#a29259"},{"name":"Deserted Beach","hex":"#e7dbbf"},{"name":"Deserted Island","hex":"#857c64"},{"name":"Deserted Path","hex":"#e7bf7b"},{"name":"Design Delight","hex":"#a47bac"},{"name":"Designer Cream Yellow","hex":"#efe5bb"},{"name":"Designer Pink","hex":"#e1bcd8"},{"name":"Designer White","hex":"#e7ded1"},{"name":"Desirable","hex":"#a93435"},{"name":"Desire","hex":"#ea3c53"},{"name":"Desire Pink","hex":"#eec5d2"},{"name":"Desired Dawn","hex":"#d8d7d9"},{"name":"Desireé","hex":"#c4adb8"},{"name":"Desolace Dew","hex":"#b5c1a9"},{"name":"Desolate Field","hex":"#d3cbc6"},{"name":"Dessert Cream","hex":"#f6e4d0"},{"name":"Destiny","hex":"#cfc9c6"},{"name":"Destroyer Grey","hex":"#98968d"},{"name":"Destroying Angels","hex":"#e9e9e1"},{"name":"Detailed Devil","hex":"#ff3355"},{"name":"Detective Coat","hex":"#8b8685"},{"name":"Detective Thriller","hex":"#393c40"},{"name":"Determined Orange","hex":"#c56639"},{"name":"Detroit","hex":"#bdd0d1"},{"name":"Deutzia White","hex":"#f7fcfe"},{"name":"Device Green","hex":"#006b4d"},{"name":"Devil Blue","hex":"#277594"},{"name":"Devil\'s Advocate","hex":"#ff3344"},{"name":"Devil\'s Flower Mantis","hex":"#8f9805"},{"name":"Devil\'s Grass","hex":"#44aa55"},{"name":"Devil\'s Lip","hex":"#662a2c"},{"name":"Devil\'s Plum","hex":"#423450"},{"name":"Devil’s Butterfly","hex":"#bb4422"},{"name":"Deviled Egg","hex":"#fdd77a"},{"name":"Deviled Eggs","hex":"#fecd82"},{"name":"Devilish","hex":"#dd3322"},{"name":"Devilish Diva","hex":"#ce7790"},{"name":"Devlan Mud","hex":"#5a573f"},{"name":"Devlan Mud Wash","hex":"#3c3523"},{"name":"Devon Rex","hex":"#717e6f"},{"name":"Devonshire","hex":"#f5efe7"},{"name":"Dew","hex":"#e7f2e9"},{"name":"Dew Drop","hex":"#e8eee5"},{"name":"Dew Green","hex":"#97b391"},{"name":"Dew Not Disturb","hex":"#cee3dc"},{"name":"Dew Pointe","hex":"#d7ede8"},{"name":"Dewberry","hex":"#8b5987"},{"name":"Dewdrop","hex":"#dde4e3"},{"name":"Dewkissed Rain","hex":"#b0b8aa"},{"name":"Dewkist","hex":"#c4d1c2"},{"name":"Dewmist Delight","hex":"#dceedb"},{"name":"Dewpoint","hex":"#b2ced2"},{"name":"Dewy","hex":"#d6e1d8"},{"name":"Dexter","hex":"#6bb1b4"},{"name":"Dhalsim\'s Yoga Flame","hex":"#fae432"},{"name":"Dhurrie Beige","hex":"#cabaa8"},{"name":"Dhūsar Grey","hex":"#aaaaaa"},{"name":"Di Sierra","hex":"#db995e"},{"name":"Diablo Red","hex":"#cd0d01"},{"name":"Diamine Green","hex":"#1b8e13"},{"name":"Diamond","hex":"#faf7e2"},{"name":"Diamond Black","hex":"#2b303e"},{"name":"Diamond Blue","hex":"#cfe4ee"},{"name":"Diamond Cut","hex":"#e9e9f0"},{"name":"Diamond Dust","hex":"#f8f5e5"},{"name":"Diamond Grey","hex":"#3e474b"},{"name":"Diamond Ice","hex":"#eee3cc"},{"name":"Diamond League","hex":"#d0eff3"},{"name":"Diamond Light","hex":"#dfe7ec"},{"name":"Diamond Soft Blue","hex":"#bcdaec"},{"name":"Diamond Stud","hex":"#dcdbdc"},{"name":"Diamond White","hex":"#e2eff3"},{"name":"Diamonds In The Sky","hex":"#e5e2e1"},{"name":"Diamonds Therapy","hex":"#e9e8e0"},{"name":"Diantha","hex":"#fcf6dc"},{"name":"Dianthus Mauve","hex":"#8d6d89"},{"name":"Diaphanous","hex":"#d0cad7"},{"name":"Dickie Bird","hex":"#60b8be"},{"name":"Diesel","hex":"#322c2b"},{"name":"Different Gold","hex":"#bc934d"},{"name":"Diffused Light","hex":"#ebe5d5"},{"name":"Diffused Orchid","hex":"#93739e"},{"name":"Dig It","hex":"#8e6e57"},{"name":"Digger\'s Gold","hex":"#a37336"},{"name":"Digital","hex":"#636365"},{"name":"Digital Garage","hex":"#b7b3a4"},{"name":"Digital Violets","hex":"#aa00ff"},{"name":"Digital Yellow","hex":"#ffeb7e"},{"name":"Dignified","hex":"#3b695f"},{"name":"Dignified Purple","hex":"#716264"},{"name":"Dignity Blue","hex":"#094c73"},{"name":"Diisha Green","hex":"#007044"},{"name":"Dijon","hex":"#a18251"},{"name":"Dijon Mustard","hex":"#e2ca73"},{"name":"Dijonnaise","hex":"#9b8f55"},{"name":"Dill","hex":"#6f7755"},{"name":"Dill Grass","hex":"#a2a57b"},{"name":"Dill Green","hex":"#b6ac4b"},{"name":"Dill Pickle","hex":"#67744a"},{"name":"Dill Powder","hex":"#9da073"},{"name":"Dill Seed","hex":"#b3b295"},{"name":"Dillard\'s Blue","hex":"#d6e9e4"},{"name":"Dilly Blue","hex":"#35495a"},{"name":"Dilly Dally","hex":"#f6db5d"},{"name":"Diluno Red","hex":"#f46860"},{"name":"Diluted Blue","hex":"#b8def2"},{"name":"Diluted Green","hex":"#ddeae0"},{"name":"Diluted Lilac","hex":"#dadfea"},{"name":"Diluted Lime","hex":"#e8efdb"},{"name":"Diluted Mint","hex":"#daf4ea"},{"name":"Diluted Orange","hex":"#fbe8e2"},{"name":"Diluted Pink","hex":"#e9dfe8"},{"name":"Diluted Red","hex":"#e8dde2"},{"name":"Dim","hex":"#c8c2be"},{"name":"Dim Grey","hex":"#696969"},{"name":"Diminished Blue","hex":"#bce1eb"},{"name":"Diminished Brown","hex":"#e7ded7"},{"name":"Diminished Green","hex":"#e3e6d6"},{"name":"Diminished Lime","hex":"#edf5dd"},{"name":"Diminished Mint","hex":"#e9f3dd"},{"name":"Diminished Orange","hex":"#fae9e1"},{"name":"Diminished Pink","hex":"#f1e5e0"},{"name":"Diminished Red","hex":"#e8d8da"},{"name":"Diminished Sky","hex":"#d3f2ed"},{"name":"Diminishing Green","hex":"#062e03"},{"name":"Diminutive Pink","hex":"#f1dede"},{"name":"Dimple","hex":"#e9808b"},{"name":"Dingley","hex":"#607c47"},{"name":"Dingy Dungeon","hex":"#c53151"},{"name":"Dingy Sticky Note","hex":"#e6f2a2"},{"name":"Dinner Mint","hex":"#e8f3e4"},{"name":"Dinosaur","hex":"#7f997d"},{"name":"Dinosaur Bone","hex":"#827563"},{"name":"Dinosaur Egg","hex":"#cabaa9"},{"name":"Diopside Blue","hex":"#8391a0"},{"name":"Dioptase Green","hex":"#439e8d"},{"name":"Diorite","hex":"#9dbfb1"},{"name":"Diplomatic","hex":"#3a445d"},{"name":"Dipped in Cloudy Dreams","hex":"#e9eeee"},{"name":"Dipped in Cream","hex":"#fcf6eb"},{"name":"Dire Wolf","hex":"#282828"},{"name":"Direct Green","hex":"#3f8a24"},{"name":"Directoire Blue","hex":"#0061a8"},{"name":"Diroset","hex":"#5acaa4"},{"name":"Dirt","hex":"#9b7653"},{"name":"Dirt Brown","hex":"#836539"},{"name":"Dirt Track","hex":"#bb6644"},{"name":"Dirt Yellow","hex":"#926e2e"},{"name":"Dirty Blonde","hex":"#dfc393"},{"name":"Dirty Blue","hex":"#3f829d"},{"name":"Dirty Brown","hex":"#b5651e"},{"name":"Dirty Green","hex":"#667e2c"},{"name":"Dirty Leather","hex":"#430005"},{"name":"Dirty Martini","hex":"#ddd0b6"},{"name":"Dirty Orange","hex":"#c87606"},{"name":"Dirty Pink","hex":"#ca7b80"},{"name":"Dirty Purple","hex":"#734a65"},{"name":"Dirty Snow","hex":"#cdced5"},{"name":"Dirty White","hex":"#e8e4c9"},{"name":"Dirty Yellow","hex":"#cdc50a"},{"name":"Disappearing Island","hex":"#bbdee5"},{"name":"Disappearing Memories","hex":"#eae3e0"},{"name":"Disappearing Purple","hex":"#3f313a"},{"name":"Disarm","hex":"#006e9d"},{"name":"Disc Jockey","hex":"#47c6ac"},{"name":"Disco","hex":"#892d4f"},{"name":"Disco Ball","hex":"#d4d4d4"},{"name":"Discover","hex":"#bdb0a0"},{"name":"Discover Deco","hex":"#4a934e"},{"name":"Discovery Bay","hex":"#276878"},{"name":"Discreet Orange","hex":"#ffad98"},{"name":"Discreet Romance","hex":"#f5e5e1"},{"name":"Discreet White","hex":"#dfdcdb"},{"name":"Discrete Pink","hex":"#ebdbdd"},{"name":"Discretion","hex":"#9f6f62"},{"name":"Disembark","hex":"#5bb4d7"},{"name":"Disguise","hex":"#b7b698"},{"name":"Dishy Coral","hex":"#ed9190"},{"name":"Dissolved Denim","hex":"#e2ecf2"},{"name":"Distance","hex":"#566a73"},{"name":"Distant Blue","hex":"#2c66a0"},{"name":"Distant Cloud","hex":"#e5eae6"},{"name":"Distant Flare","hex":"#ead1da"},{"name":"Distant Haze","hex":"#dfe4da"},{"name":"Distant Homeworld","hex":"#acdcee"},{"name":"Distant Horizon","hex":"#f1f8fa"},{"name":"Distant Land","hex":"#a68a71"},{"name":"Distant Landscape","hex":"#e1efdd"},{"name":"Distant Searchlight","hex":"#f2f3ce"},{"name":"Distant Shore","hex":"#c2d8e3"},{"name":"Distant Sky","hex":"#6f8daf"},{"name":"Distant Star","hex":"#bac1c3"},{"name":"Distant Tan","hex":"#cfbda5"},{"name":"Distant Thunder","hex":"#7f8688"},{"name":"Distant Valley","hex":"#c2b79a"},{"name":"Distant Wind Chime","hex":"#eaeff2"},{"name":"Distilled Moss","hex":"#ccffcc"},{"name":"Distilled Rose","hex":"#ffbbff"},{"name":"Distilled Venom","hex":"#c7fdb5"},{"name":"Distilled Watermelon","hex":"#ede3e0"},{"name":"Distinct Purple","hex":"#a294c9"},{"name":"Distinctive Lack of Hue","hex":"#141513"},{"name":"Distressed White","hex":"#f1e6cb"},{"name":"Dithered Amber","hex":"#feb308"},{"name":"Dithered Sky","hex":"#bcdfff"},{"name":"Diva","hex":"#c9a0ff"},{"name":"Diva Blue","hex":"#0079c1"},{"name":"Diva Girl","hex":"#e1cbda"},{"name":"Diva Glam","hex":"#b24e76"},{"name":"Diva Mecha","hex":"#ee99ee"},{"name":"Diva Pink","hex":"#fa427e"},{"name":"Diva Rouge","hex":"#e8b9a5"},{"name":"Diva Violet","hex":"#5077ba"},{"name":"Dive In","hex":"#3c4d85"},{"name":"Diver Lady","hex":"#27546e"},{"name":"Diver\'s Eden","hex":"#3a797e"},{"name":"Diverse Beige","hex":"#c2b4a7"},{"name":"Diversion","hex":"#a99a89"},{"name":"Divine","hex":"#9a7aa0"},{"name":"Divine Dove","hex":"#eeddee"},{"name":"Divine Inspiration","hex":"#d8e2e1"},{"name":"Divine Pleasure","hex":"#f4efe1"},{"name":"Divine Purple","hex":"#69005f"},{"name":"Divine White","hex":"#e6dccd"},{"name":"Divine Wine","hex":"#583e3e"},{"name":"Dixie","hex":"#cd8431"},{"name":"Dizzy Days","hex":"#d14e2f"},{"name":"Do Not Disturb","hex":"#99a456"},{"name":"Dobunezumi Brown","hex":"#4b3c39"},{"name":"Dockside","hex":"#95aed0"},{"name":"Dockside Blue","hex":"#a0b3bc"},{"name":"Dockside Red","hex":"#813533"},{"name":"Doctor","hex":"#f9f9f9"},{"name":"Dodge Pole","hex":"#a37355"},{"name":"Dodger Blue","hex":"#3e82fc"},{"name":"DodgeRoll Gold","hex":"#f79a12"},{"name":"Dodie Yellow","hex":"#fef65b"},{"name":"Doe","hex":"#b68761"},{"name":"Doeskin","hex":"#fff2e4"},{"name":"Doeskin Grey","hex":"#ccc3ba"},{"name":"Dogwood","hex":"#faeae2"},{"name":"Dogwood Bloom","hex":"#c58f94"},{"name":"Dogwood Rose","hex":"#d71868"},{"name":"Dolce Pink","hex":"#f0d9e0"},{"name":"Doll House","hex":"#facfc1"},{"name":"Dollar","hex":"#7d8774"},{"name":"Dollar Bill","hex":"#85bb65"},{"name":"Dollie","hex":"#f590a0"},{"name":"Dollop of Cream","hex":"#f8ebd4"},{"name":"Dolly","hex":"#f5f171"},{"name":"Dolly Cheek","hex":"#fcc9b6"},{"name":"Dolomite Crystal","hex":"#fee8f5"},{"name":"Dolomite Red","hex":"#c5769b"},{"name":"Dolphin","hex":"#86c4da"},{"name":"Dolphin Blue","hex":"#7d9da9"},{"name":"Dolphin Daze","hex":"#659fb5"},{"name":"Dolphin Dream","hex":"#6b6f78"},{"name":"Dolphin Fin","hex":"#cccac1"},{"name":"Dolphin Grey","hex":"#9a9997"},{"name":"Dolphin Tales","hex":"#c7c7c2"},{"name":"Domain","hex":"#9c9c6e"},{"name":"Dominant Grey","hex":"#5a5651"},{"name":"Domino","hex":"#6c5b4c"},{"name":"Don Juan","hex":"#5a4f51"},{"name":"Don\'t Be Shy","hex":"#ed2c1a"},{"name":"Donegal Green","hex":"#115500"},{"name":"Donegal Tweed","hex":"#c19964"},{"name":"Döner Kebab","hex":"#bb7766"},{"name":"Donkey Brown","hex":"#816e5c"},{"name":"Donkey Kong","hex":"#ab4210"},{"name":"Donnegal","hex":"#8caea3"},{"name":"Doodle","hex":"#fbdca8"},{"name":"Doombull Brown","hex":"#7c1e08"},{"name":"Dorado","hex":"#6e5f56"},{"name":"Dorian Grey","hex":"#aca79e"},{"name":"Doric White","hex":"#d5cfbd"},{"name":"Dormer Brown","hex":"#ad947c"},{"name":"Dormitory","hex":"#5d71a9"},{"name":"Dorn Yellow","hex":"#fff200"},{"name":"Dorset Naga","hex":"#9d2c31"},{"name":"Dotted Dove","hex":"#6c6868"},{"name":"Dòu Lǜ Green","hex":"#009276"},{"name":"Dòu Shā Sè Red","hex":"#a52939"},{"name":"Double Chocolate","hex":"#6f5245"},{"name":"Double Click","hex":"#d0d2d1"},{"name":"Double Colonial White","hex":"#e4cf99"},{"name":"Double Cream","hex":"#f2d9a3"},{"name":"Double Dragon","hex":"#fca044"},{"name":"Double Duty","hex":"#686858"},{"name":"Double Espresso","hex":"#54423e"},{"name":"Double Fudge","hex":"#6d544b"},{"name":"Double Jeopardy","hex":"#4d786c"},{"name":"Double Latte","hex":"#a78c71"},{"name":"Double Pearl Lusta","hex":"#e9dcbe"},{"name":"Double Spanish White","hex":"#d2c3a3"},{"name":"Dough Yellow","hex":"#f6d0b6"},{"name":"Doughnut","hex":"#eda057"},{"name":"Douglas Fir Green","hex":"#6f9881"},{"name":"Douro","hex":"#555500"},{"name":"Dove","hex":"#b3ada7"},{"name":"Dove Feather","hex":"#755d5b"},{"name":"Dove Grey","hex":"#6d6c6c"},{"name":"Dove Tail","hex":"#91b0c5"},{"name":"Dove White","hex":"#e6e2d8"},{"name":"Dove Wing","hex":"#d7d9d5"},{"name":"Dove\'s Wing","hex":"#f4f2ea"},{"name":"Dover Cliffs","hex":"#f0e9d8"},{"name":"Dover Grey","hex":"#848585"},{"name":"Dover Plains","hex":"#ccaf92"},{"name":"Dover Straits","hex":"#326ab1"},{"name":"Dover White","hex":"#f1ebdd"},{"name":"Dovetail","hex":"#908a83"},{"name":"Dowager","hex":"#838c82"},{"name":"Down Dog","hex":"#baafb9"},{"name":"Down Feathers","hex":"#fff9e7"},{"name":"Down Home","hex":"#cbc0ba"},{"name":"Down on the Sunflower Valley","hex":"#ffdf2b"},{"name":"Down Pour","hex":"#43718b"},{"name":"Down-to-Earth","hex":"#5c6242"},{"name":"Downing Earth","hex":"#887b67"},{"name":"Downing Sand","hex":"#cbbca5"},{"name":"Downing Slate","hex":"#777f86"},{"name":"Downing Stone","hex":"#a6a397"},{"name":"Downing Straw","hex":"#caab7d"},{"name":"Downing to Earth","hex":"#635a4f"},{"name":"Download Progress","hex":"#58d332"},{"name":"Downpour","hex":"#9b9ea2"},{"name":"Downriver","hex":"#092256"},{"name":"Downtown Benny Brown","hex":"#7d6a58"},{"name":"Downtown Grey","hex":"#adaaa2"},{"name":"Downwell","hex":"#001100"},{"name":"Downy","hex":"#6fd2be"},{"name":"Downy Feather","hex":"#feaa66"},{"name":"Downy Fluff","hex":"#ede9e4"},{"name":"Dozen Roses","hex":"#803f3f"},{"name":"Dr Who","hex":"#78587d"},{"name":"Dr. White","hex":"#fafafa"},{"name":"Drab","hex":"#828344"},{"name":"Drab Green","hex":"#749551"},{"name":"Drably Olive","hex":"#808101"},{"name":"Dracula Orchid","hex":"#2c3539"},{"name":"Dragon Ball","hex":"#ff9922"},{"name":"Dragon Bay","hex":"#5da99f"},{"name":"Dragon Fire","hex":"#fc4a14"},{"name":"Dragon Fruit","hex":"#d75969"},{"name":"Dragon Red","hex":"#9e0200"},{"name":"Dragon Scale","hex":"#00a877"},{"name":"Dragon\'s Blood","hex":"#b84048"},{"name":"Dragon\'s Breath","hex":"#d41003"},{"name":"Dragon\'s Fire","hex":"#9c2d5d"},{"name":"Dragon\'s Gold","hex":"#e7e04e"},{"name":"Dragonfly","hex":"#314a76"},{"name":"Dragonfly Blue","hex":"#45abca"},{"name":"Dragonlord Purple","hex":"#6241c7"},{"name":"Dragons Lair","hex":"#d50c15"},{"name":"Drake Tooth","hex":"#bbb0a4"},{"name":"Drake’s Neck","hex":"#31668a"},{"name":"Drakenhof Nightshade","hex":"#1f5da0"},{"name":"Drama Queen","hex":"#a37298"},{"name":"Drama Violet","hex":"#b883b0"},{"name":"Dramatic Blue","hex":"#240093"},{"name":"Dramatical Red","hex":"#991100"},{"name":"Dramatist","hex":"#4b4775"},{"name":"Draw Your Sword","hex":"#6c7179"},{"name":"Dream Blue","hex":"#d7e6ee"},{"name":"Dream Catcher","hex":"#e5ebea"},{"name":"Dream Dust","hex":"#ebe2e8"},{"name":"Dream Green","hex":"#35836a"},{"name":"Dream of Spring","hex":"#f7cf26"},{"name":"Dream Seascape","hex":"#d5dec3"},{"name":"Dream Setting","hex":"#ff77bb"},{"name":"Dream State","hex":"#efdde1"},{"name":"Dream Sunset","hex":"#9b868d"},{"name":"Dream Vapor","hex":"#cc99ee"},{"name":"Dreamcatcher","hex":"#a5b2a9"},{"name":"Dreaming Blue","hex":"#8ac2d6"},{"name":"Dreaming of the Day","hex":"#abc1bd"},{"name":"Dreamland","hex":"#b5b1bf"},{"name":"Dreamless Sleep","hex":"#111111"},{"name":"Dreams of Peach","hex":"#ffd29d"},{"name":"Dreamscape Grey","hex":"#c6c5c5"},{"name":"Dreamsicle","hex":"#f5d5c2"},{"name":"Dreamweaver","hex":"#ccc6d7"},{"name":"Dreamy Candy Forest","hex":"#b195e4"},{"name":"Dreamy Cloud","hex":"#e5e6eb"},{"name":"Dreamy Heaven","hex":"#594158"},{"name":"Dreamy Memory","hex":"#e8c3d9"},{"name":"Dreamy Pink","hex":"#dfabcd"},{"name":"Dreamy Sunset","hex":"#ffad61"},{"name":"Dreamy White","hex":"#e3d8d5"},{"name":"Drenched Rain","hex":"#c1d1e2"},{"name":"Dresden Blue","hex":"#0086bb"},{"name":"Dresden Doll","hex":"#8ca8c6"},{"name":"Dresden Dream","hex":"#8ea7b9"},{"name":"Dress Blues","hex":"#2a3244"},{"name":"Dress Pink","hex":"#f4ebef"},{"name":"Dress Up","hex":"#fac7bf"},{"name":"Dressed to Impress","hex":"#714640"},{"name":"Dressy Rose","hex":"#b89d9a"},{"name":"Dreyfus","hex":"#b2aba1"},{"name":"Dried Basil","hex":"#898973"},{"name":"Dried Blood","hex":"#4b0101"},{"name":"Dried Caspia","hex":"#b6bf7f"},{"name":"Dried Chamomile","hex":"#d1b375"},{"name":"Dried Chervil","hex":"#b5bda3"},{"name":"Dried Chive","hex":"#7b7d69"},{"name":"Dried Coconut","hex":"#ebe7d9"},{"name":"Dried Dates","hex":"#4a423a"},{"name":"Dried Edamame","hex":"#b19f80"},{"name":"Dried Flower Purple","hex":"#752653"},{"name":"Dried Goldenrod","hex":"#e2a829"},{"name":"Dried Grass","hex":"#aca08d"},{"name":"Dried Herb","hex":"#847a59"},{"name":"Dried Lavender","hex":"#ebe9ec"},{"name":"Dried Lavender Flowers","hex":"#77747f"},{"name":"Dried Leaf","hex":"#5c5043"},{"name":"Dried Lilac","hex":"#bbbbff"},{"name":"Dried Magenta","hex":"#ff40ff"},{"name":"Dried Moss","hex":"#c6ad6f"},{"name":"Dried Mustard","hex":"#804a00"},{"name":"Dried Palm","hex":"#e1dbac"},{"name":"Dried Pipe Clay","hex":"#d8d6cc"},{"name":"Dried Plantain","hex":"#e5cea9"},{"name":"Dried Plum","hex":"#683332"},{"name":"Dried Saffron","hex":"#c33e29"},{"name":"Dried Thyme","hex":"#bbbca1"},{"name":"Dried Tobacco","hex":"#a0883b"},{"name":"Dried Tomatoes","hex":"#ab6057"},{"name":"Drift of Mist","hex":"#dcd8d0"},{"name":"Drift on the Sea","hex":"#87cefa"},{"name":"Drifting","hex":"#beb4a8"},{"name":"Drifting Cloud","hex":"#dbe0e1"},{"name":"Drifting Downstream","hex":"#61736f"},{"name":"Drifting Dream","hex":"#ccbbe3"},{"name":"Drifting Sand","hex":"#a89f93"},{"name":"Drifting Tide","hex":"#dfefeb"},{"name":"Driftwood","hex":"#a67a45"},{"name":"Drip","hex":"#a6ccd6"},{"name":"Drip Coffee","hex":"#7a280a"},{"name":"Dripping Ice","hex":"#d2dfed"},{"name":"Dripping Wisteria","hex":"#bb99bb"},{"name":"Drippy Honey","hex":"#eebb22"},{"name":"Drisheen","hex":"#a24857"},{"name":"Drive-In Cherry","hex":"#a62e30"},{"name":"Drizzle","hex":"#a0af9d"},{"name":"Droëwors","hex":"#523839"},{"name":"Dromedary","hex":"#e3c295"},{"name":"Dromedary Camel","hex":"#caad87"},{"name":"Drop Green","hex":"#69bd5a"},{"name":"Drop of Lemon","hex":"#fcf1bd"},{"name":"Droplet","hex":"#aaddff"},{"name":"Dropped Brick","hex":"#bb3300"},{"name":"Drops of Honey","hex":"#d4ae76"},{"name":"Drought","hex":"#d5d1cc"},{"name":"Drover","hex":"#fbeb9b"},{"name":"Drowsy Lavender","hex":"#d4dbe1"},{"name":"Druchii Violet","hex":"#842994"},{"name":"Druid Green","hex":"#427131"},{"name":"Drum Solo","hex":"#a66e4b"},{"name":"Drunk-Tank Pink","hex":"#dd11dd"},{"name":"Drunken Dragonfly","hex":"#33dd88"},{"name":"Drunken Flamingo","hex":"#ff55cc"},{"name":"Dry Bone","hex":"#eadfce"},{"name":"Dry Brown","hex":"#968374"},{"name":"Dry Catmint","hex":"#b9bdae"},{"name":"Dry Clay","hex":"#bd5c00"},{"name":"Dry Creek","hex":"#d8c7b6"},{"name":"Dry Dock","hex":"#817665"},{"name":"Dry Dune","hex":"#efdfcf"},{"name":"Dry Grass","hex":"#9ea26b"},{"name":"Dry Hemlock","hex":"#909373"},{"name":"Dry Highlighter Green","hex":"#2ba727"},{"name":"Dry Lichen","hex":"#c7d9cc"},{"name":"Dry Moss","hex":"#769958"},{"name":"Dry Mud","hex":"#777672"},{"name":"Dry Pasture","hex":"#948971"},{"name":"Dry Peach","hex":"#de7e5d"},{"name":"Dry Riverbed","hex":"#d2c5ae"},{"name":"Dry Rose","hex":"#c22f4d"},{"name":"Dry Sage","hex":"#8c8b76"},{"name":"Dry Sand","hex":"#eae4d6"},{"name":"Dry Sea Grass","hex":"#ccb27a"},{"name":"Dry Season","hex":"#d4cecd"},{"name":"Dry Seedlings","hex":"#c7dc68"},{"name":"Dry Starfish","hex":"#b09a77"},{"name":"Dryad Bark","hex":"#33312d"},{"name":"Drying Grass Green","hex":"#7bb369"},{"name":"Dubarry","hex":"#f25f66"},{"name":"Dubbin","hex":"#ae8b64"},{"name":"Dublin","hex":"#73be6e"},{"name":"Dublin Jack","hex":"#6fab92"},{"name":"Dubloon","hex":"#d5b688"},{"name":"Dubonnet","hex":"#5b2c31"},{"name":"Dubuffet Green","hex":"#6f7766"},{"name":"Ducal","hex":"#763d35"},{"name":"Ducal Pink","hex":"#ce9096"},{"name":"Ducati","hex":"#16a0a6"},{"name":"Duchamp Light Green","hex":"#d1dbc7"},{"name":"Duchess Lilac","hex":"#9b909d"},{"name":"Duchess Rose","hex":"#f7aa97"},{"name":"Duck Butter","hex":"#ddc75b"},{"name":"Duck Egg Blue","hex":"#c3fbf4"},{"name":"Duck Egg Cream","hex":"#c8e3d2"},{"name":"Duck Green","hex":"#53665c"},{"name":"Duck Hunt","hex":"#005800"},{"name":"Duck Sauce","hex":"#cc9922"},{"name":"Duck Tail","hex":"#e9d6b1"},{"name":"Duck Willow","hex":"#6a695a"},{"name":"Duck\'s Egg Blue","hex":"#ccdfe8"},{"name":"Duckie Yellow","hex":"#ffff11"},{"name":"Duckling","hex":"#fcb057"},{"name":"Duckling Fluff","hex":"#fafc5d"},{"name":"Duct Tape Grey","hex":"#aeacac"},{"name":"Duffel Bag","hex":"#464e3f"},{"name":"Dugong","hex":"#71706e"},{"name":"Duke Blue","hex":"#00009c"},{"name":"Dulce de Leche","hex":"#d6851f"},{"name":"Dulcet","hex":"#9ad4d8"},{"name":"Dulcet Pink","hex":"#f0e2e4"},{"name":"Dulcet Violet","hex":"#59394c"},{"name":"Dull","hex":"#727171"},{"name":"Dull Apricot","hex":"#d09c97"},{"name":"Dull Blue","hex":"#49759c"},{"name":"Dull Brown","hex":"#876e4b"},{"name":"Dull Desert","hex":"#dcd6d3"},{"name":"Dull Dusky Pink","hex":"#8f6d73"},{"name":"Dull Gold","hex":"#8a6f48"},{"name":"Dull Green","hex":"#74a662"},{"name":"Dull Lavender","hex":"#a899e6"},{"name":"Dull Light Yellow","hex":"#e5d9b4"},{"name":"Dull Magenta","hex":"#8d4856"},{"name":"Dull Mauve","hex":"#7d7485"},{"name":"Dull Olive","hex":"#7a7564"},{"name":"Dull Orange","hex":"#d8863b"},{"name":"Dull Pink","hex":"#d5869d"},{"name":"Dull Purple","hex":"#84597e"},{"name":"Dull Red","hex":"#bb3f3f"},{"name":"Dull Sage","hex":"#dbd4ab"},{"name":"Dull Teal","hex":"#5f9e8f"},{"name":"Dull Turquoise","hex":"#557d73"},{"name":"Dull Violet","hex":"#803790"},{"name":"Dull Yellow","hex":"#eedc5b"},{"name":"Dumpling","hex":"#f7ddaa"},{"name":"Dun Morogh Blue","hex":"#80b4dc"},{"name":"Dune","hex":"#d5c0a1"},{"name":"Dune Beige","hex":"#c3a491"},{"name":"Dune Drift","hex":"#b88d70"},{"name":"Dune Grass","hex":"#cbc5b1"},{"name":"Dune King","hex":"#e9aa71"},{"name":"Dune Shadow","hex":"#867665"},{"name":"Dunes Manor","hex":"#514f4a"},{"name":"Dungeon Keeper","hex":"#ef3038"},{"name":"Dunnock Egg","hex":"#d9ece6"},{"name":"Duomo","hex":"#6e6064"},{"name":"Dupain","hex":"#58a0bc"},{"name":"Duqqa Brown","hex":"#442211"},{"name":"Durango Blue","hex":"#566777"},{"name":"Durango Dust","hex":"#fbe3a1"},{"name":"Durazno Maduro","hex":"#ffb978"},{"name":"Durazno Palido","hex":"#ffd8bb"},{"name":"Durban Sky","hex":"#5d8a9b"},{"name":"Durian","hex":"#b07939"},{"name":"Durian Smell","hex":"#e5e0db"},{"name":"Durian White","hex":"#e6d0ab"},{"name":"Durian Yellow","hex":"#e1bd27"},{"name":"Durotar Fire","hex":"#f06126"},{"name":"Dusk","hex":"#4e5481"},{"name":"Dusk Blue","hex":"#719bbb"},{"name":"Dusk Green","hex":"#6e7a77"},{"name":"Dusk Mauve","hex":"#545883"},{"name":"Dusk Orange","hex":"#fe4c40"},{"name":"Dusk Wine","hex":"#9a7483"},{"name":"Duskwood","hex":"#123d55"},{"name":"Dusky","hex":"#c3aba8"},{"name":"Dusky Alpine Blue","hex":"#296767"},{"name":"Dusky Brown","hex":"#774400"},{"name":"Dusky Citron","hex":"#e1c779"},{"name":"Dusky Cyclamen","hex":"#7d6d70"},{"name":"Dusky Damask","hex":"#b98478"},{"name":"Dusky Dawn","hex":"#e5e1de"},{"name":"Dusky Grape","hex":"#877f95"},{"name":"Dusky Green","hex":"#7a705b"},{"name":"Dusky Grouse","hex":"#8e969e"},{"name":"Dusky Haze","hex":"#a77572"},{"name":"Dusky Lilac","hex":"#d6cbda"},{"name":"Dusky Mood","hex":"#979ba8"},{"name":"Dusky Moon","hex":"#edecd7"},{"name":"Dusky Orchid","hex":"#a07a89"},{"name":"Dusky Pink","hex":"#cc7a8b"},{"name":"Dusky Purple","hex":"#895b7b"},{"name":"Dusky Rose","hex":"#ba6873"},{"name":"Dusky Taupe","hex":"#c9bdb7"},{"name":"Dusky Violet","hex":"#d0bfbe"},{"name":"Dusky Yellow","hex":"#ffff05"},{"name":"Dust","hex":"#b2996e"},{"name":"Dust Bowl","hex":"#e2d8d3"},{"name":"Dust Green","hex":"#c6c8be"},{"name":"Dust of the Moon","hex":"#cfc9df"},{"name":"Dust Storm","hex":"#e7d3b7"},{"name":"Dust to Dust","hex":"#bbbcbc"},{"name":"Dustblu","hex":"#959ba0"},{"name":"Dusted Clay","hex":"#cc7357"},{"name":"Dusted Olive","hex":"#bea775"},{"name":"Dusted Peri","hex":"#696ba0"},{"name":"Dusted Truffle","hex":"#9c8373"},{"name":"Dusting Powder","hex":"#e7ece8"},{"name":"Dustwallow Marsh","hex":"#685243"},{"name":"Dusty Aqua","hex":"#bddaca"},{"name":"Dusty Attic","hex":"#bfb6a3"},{"name":"Dusty Blue","hex":"#8093a4"},{"name":"Dusty Boots","hex":"#f3c090"},{"name":"Dusty Canyon","hex":"#9a7e68"},{"name":"Dusty Cedar","hex":"#dd9592"},{"name":"Dusty Chestnut","hex":"#847163"},{"name":"Dusty Chimney","hex":"#888899"},{"name":"Dusty Coral","hex":"#d29b83"},{"name":"Dusty Dream","hex":"#97a2a0"},{"name":"Dusty Duchess","hex":"#b18377"},{"name":"Dusty Gold","hex":"#d7b999"},{"name":"Dusty Green","hex":"#76a973"},{"name":"Dusty Grey","hex":"#cdccd0"},{"name":"Dusty Heather","hex":"#8990a3"},{"name":"Dusty Ivory","hex":"#f1ddbe"},{"name":"Dusty Jade Green","hex":"#71af98"},{"name":"Dusty Lavender","hex":"#ac86a8"},{"name":"Dusty Lilac","hex":"#d3cacd"},{"name":"Dusty Mountain","hex":"#716d63"},{"name":"Dusty Olive","hex":"#676658"},{"name":"Dusty Orange","hex":"#e16d4f"},{"name":"Dusty Path","hex":"#8c7763"},{"name":"Dusty Pink","hex":"#d58a94"},{"name":"Dusty Plum","hex":"#d7d0e1"},{"name":"Dusty Purple","hex":"#825f87"},{"name":"Dusty Red","hex":"#b9484e"},{"name":"Dusty Rose","hex":"#b56f76"},{"name":"Dusty Rosewood","hex":"#c0aa9f"},{"name":"Dusty Sand","hex":"#bdbaae"},{"name":"Dusty Sky","hex":"#95a3a6"},{"name":"Dusty Teal","hex":"#4c9085"},{"name":"Dusty Trail","hex":"#c9bba3"},{"name":"Dusty Trail Rider","hex":"#c3b9a6"},{"name":"Dusty Turquoise","hex":"#598a8f"},{"name":"Dusty Warrior","hex":"#bab7b3"},{"name":"Dusty Yellow","hex":"#cfc88f"},{"name":"Dutch Blue","hex":"#4e6594"},{"name":"Dutch Cocoa","hex":"#8c706a"},{"name":"Dutch Jug","hex":"#a5abb6"},{"name":"Dutch Orange","hex":"#dfa837"},{"name":"Dutch Tile Blue","hex":"#9aabab"},{"name":"Dutch White","hex":"#f0dfbb"},{"name":"Dutchess Dawn","hex":"#c9a7ac"},{"name":"Duvall","hex":"#0f8b8e"},{"name":"Dwarf Fortress","hex":"#1d0200"},{"name":"Dwarf Pony","hex":"#af7b57"},{"name":"Dwarf Rabbit","hex":"#c8ac89"},{"name":"Dwarf Spruce","hex":"#71847d"},{"name":"Dwarven Bronze","hex":"#bf652e"},{"name":"Dwarven Peaches","hex":"#ffa07a"},{"name":"Dwindling Damon","hex":"#efdfe7"},{"name":"Dwindling Dandelion","hex":"#f9e9d7"},{"name":"Dwindling Denim","hex":"#cce1ee"},{"name":"Dyer\'s Woad","hex":"#7b99b0"},{"name":"Dying Light","hex":"#364141"},{"name":"Dying Moss","hex":"#669c7d"},{"name":"Dying Storm Blue","hex":"#111166"},{"name":"Dynamic","hex":"#6d5160"},{"name":"Dynamic Black","hex":"#1f1c1d"},{"name":"Dynamic Blue","hex":"#0192c6"},{"name":"Dynamic Green","hex":"#a7e142"},{"name":"Dynamic Magenta","hex":"#8a547f"},{"name":"Dynamic Yellow","hex":"#ffe36d"},{"name":"Dynamite","hex":"#ff4422"},{"name":"Dynamite Red","hex":"#dd3311"},{"name":"Dynamo","hex":"#953d68"},{"name":"Dynasty Celadon","hex":"#c7cbbe"},{"name":"Dynasty Green","hex":"#00988e"},{"name":"E. Honda Beige","hex":"#f8d77f"},{"name":"Eagle","hex":"#a26c36"},{"name":"Eagle Eye","hex":"#736665"},{"name":"Eagle Ridge","hex":"#7d776c"},{"name":"Eagle Rock","hex":"#5c5242"},{"name":"Eagle\'s Meadow","hex":"#8d7d68"},{"name":"Eagle\'s View","hex":"#d4cbcc"},{"name":"Eagles Nest","hex":"#8a693f"},{"name":"Eaglet Beige","hex":"#e9d9c0"},{"name":"Eames for Blue","hex":"#466b82"},{"name":"Earhart Emerald","hex":"#416659"},{"name":"Earl Green","hex":"#747a64"},{"name":"Earl Grey","hex":"#a6978a"},{"name":"Earls Green","hex":"#b8a722"},{"name":"Early Blossom","hex":"#ffe5ed"},{"name":"Early Crocus","hex":"#eae7e7"},{"name":"Early Dawn","hex":"#797287"},{"name":"Early Dew","hex":"#44aa00"},{"name":"Early Dog Violet","hex":"#d3d6e9"},{"name":"Early Evening","hex":"#cac7bf"},{"name":"Early Forget-Me-Not","hex":"#bae5ee"},{"name":"Early Frost","hex":"#dae3e9"},{"name":"Early Harvest","hex":"#b9be82"},{"name":"Early July","hex":"#a5ddea"},{"name":"Early June","hex":"#b1d2df"},{"name":"Early September","hex":"#adcddc"},{"name":"Early Snow","hex":"#fdf3e4"},{"name":"Early Spring","hex":"#96bc4a"},{"name":"Early Spring Night","hex":"#3c3fb1"},{"name":"Early Sunset","hex":"#f3e3d8"},{"name":"Earth","hex":"#a2653e"},{"name":"Earth Black","hex":"#49433b"},{"name":"Earth Brown","hex":"#4f1507"},{"name":"Earth Brown Violet","hex":"#705364"},{"name":"Earth Chi","hex":"#c7af88"},{"name":"Earth Chicory","hex":"#664b40"},{"name":"Earth Crust","hex":"#8c4f42"},{"name":"Earth Eclipse","hex":"#71bab4"},{"name":"Earth Fired Red","hex":"#785240"},{"name":"Earth Green","hex":"#545f5b"},{"name":"Earth Happiness","hex":"#e3edc8"},{"name":"Earth Red","hex":"#a3485b"},{"name":"Earth Rose","hex":"#b57770"},{"name":"Earth Tone","hex":"#a06e57"},{"name":"Earth Warming","hex":"#bf9f91"},{"name":"Earth Yellow","hex":"#e1a95f"},{"name":"Earthbound","hex":"#a48a80"},{"name":"Earthen Cheer","hex":"#667971"},{"name":"Earthen Jug","hex":"#a85e39"},{"name":"Earthenware","hex":"#a89373"},{"name":"Earthling","hex":"#ded6c7"},{"name":"Earthly Delight","hex":"#ab8a68"},{"name":"Earthly Pleasure","hex":"#693c3b"},{"name":"Earthly Pleasures","hex":"#9f8863"},{"name":"Earthnut","hex":"#9d8675"},{"name":"Earthtone","hex":"#5d3a1a"},{"name":"Earthworm","hex":"#c3816e"},{"name":"Earthy Cane","hex":"#c5b28b"},{"name":"Earthy Khaki Green","hex":"#666600"},{"name":"Earthy Ocher","hex":"#b89e78"},{"name":"Earthy Ochre","hex":"#beae88"},{"name":"Eased Pink","hex":"#fae3e3"},{"name":"Easily Suede","hex":"#b29d8a"},{"name":"East Aurora","hex":"#878b46"},{"name":"East Bay","hex":"#47526e"},{"name":"East Cape","hex":"#b0eee2"},{"name":"East Side","hex":"#aa8cbc"},{"name":"Easter Bunny","hex":"#ebe5eb"},{"name":"Easter Egg","hex":"#8e97c7"},{"name":"Easter Green","hex":"#8cfd7e"},{"name":"Easter Orchid","hex":"#e6e1e2"},{"name":"Easter Purple","hex":"#c071fe"},{"name":"Easter Rabbit","hex":"#c7bfc3"},{"name":"Eastern Amber","hex":"#ebb67e"},{"name":"Eastern Bamboo","hex":"#5e5d3d"},{"name":"Eastern Blue","hex":"#00879f"},{"name":"Eastern Bluebird","hex":"#748695"},{"name":"Eastern Breeze","hex":"#dae0e6"},{"name":"Eastern Gold","hex":"#b89b6c"},{"name":"Eastern Sky","hex":"#8fc1d2"},{"name":"Eastern Spice","hex":"#dba87f"},{"name":"Eastern Wind","hex":"#ede6d5"},{"name":"Eastern Wolf","hex":"#dbd7d2"},{"name":"Eastlake","hex":"#7c6042"},{"name":"Eastlake Gold","hex":"#c28e61"},{"name":"Eastlake Lavender","hex":"#887d79"},{"name":"Eastlake Olive","hex":"#a9a482"},{"name":"Easy","hex":"#beb394"},{"name":"Easy Breezy Blue","hex":"#9eb1ae"},{"name":"Easy Green","hex":"#9fb289"},{"name":"Easy On The Eyes","hex":"#f9ecb6"},{"name":"Eat Your Greens","hex":"#696845"},{"name":"Eat Your Peas","hex":"#80987a"},{"name":"Eaton Gold","hex":"#bb9f60"},{"name":"Eau de Rose","hex":"#e4bbd1"},{"name":"Eaves","hex":"#cecdad"},{"name":"Ebb","hex":"#e6d8d4"},{"name":"Ebb Tide","hex":"#7893a0"},{"name":"Ebbing Tide","hex":"#688d8a"},{"name":"Ebbtide","hex":"#84b4be"},{"name":"Ebi Brown","hex":"#773c30"},{"name":"Ebicha Brown","hex":"#5e2824"},{"name":"Ebizome Purple","hex":"#6d2b50"},{"name":"Ebony","hex":"#313337"},{"name":"Ebony Clay","hex":"#323438"},{"name":"Ebony Lips","hex":"#b06a40"},{"name":"Ebony Wood","hex":"#2c3227"},{"name":"Eburnean","hex":"#ffffee"},{"name":"Eccentric Magenta","hex":"#b576a7"},{"name":"Eccentricity","hex":"#968a9f"},{"name":"Echelon Ecru","hex":"#e7d8be"},{"name":"Echinoderm","hex":"#ffa565"},{"name":"Echinoidea Thorns","hex":"#ffa756"},{"name":"Echo","hex":"#d7e7e0"},{"name":"Echo Blue","hex":"#a4afcd"},{"name":"Echo Iris","hex":"#b6dff4"},{"name":"Echo Isles Water","hex":"#95b5db"},{"name":"Echo Mist","hex":"#d8dfdf"},{"name":"Echo One","hex":"#629da6"},{"name":"Echo Park","hex":"#758883"},{"name":"Echo Valley","hex":"#e6e2d6"},{"name":"Echoes of Love","hex":"#eededd"},{"name":"Éclair au Chocolat","hex":"#7e4930"},{"name":"Eclectic","hex":"#aaafbd"},{"name":"Eclectic Plum","hex":"#8c6e67"},{"name":"Eclectic Purple","hex":"#483e45"},{"name":"Eclipse","hex":"#3f3939"},{"name":"Eclipse Blue","hex":"#456074"},{"name":"Eco Green","hex":"#a89768"},{"name":"Ecological","hex":"#677f70"},{"name":"Ecru","hex":"#c2b280"},{"name":"Ecru Ochre","hex":"#a48d83"},{"name":"Ecru Olive","hex":"#a08942"},{"name":"Ecru Wealth","hex":"#d5cdb4"},{"name":"Ecru White","hex":"#d6d1c0"},{"name":"Ecstasy","hex":"#c96138"},{"name":"Ecstatic Red","hex":"#aa1122"},{"name":"Ecuadorian Banana","hex":"#ffff7e"},{"name":"Edamame","hex":"#9ca389"},{"name":"Edelweiss","hex":"#eee8d9"},{"name":"Eden","hex":"#266255"},{"name":"Eden Prairie","hex":"#95863c"},{"name":"Edge of Black","hex":"#54585e"},{"name":"Edge of Space","hex":"#330044"},{"name":"Edge of the Galaxy","hex":"#303d3c"},{"name":"Edgewater","hex":"#c1d8c5"},{"name":"Edgy Gold","hex":"#b1975f"},{"name":"Edgy Red","hex":"#ba3d3c"},{"name":"Edocha","hex":"#a13d2d"},{"name":"Edward","hex":"#5e7e7d"},{"name":"Edwardian Lace","hex":"#f6ede0"},{"name":"Eerie Black","hex":"#1b1b1b"},{"name":"Eerie Glow","hex":"#a9d6ba"},{"name":"Effervescent","hex":"#fbf4d1"},{"name":"Effervescent Blue","hex":"#00315a"},{"name":"Effervescent Lime","hex":"#98da2c"},{"name":"EGA Green","hex":"#01ff07"},{"name":"Egg Blue","hex":"#c1e7eb"},{"name":"Egg Cream","hex":"#ffd98c"},{"name":"Egg Liqueur","hex":"#dccaa8"},{"name":"Egg Noodle","hex":"#f1e3bd"},{"name":"Egg Sour","hex":"#f9e4c5"},{"name":"Egg Toast","hex":"#f2c911"},{"name":"Egg Wash","hex":"#e2e1c8"},{"name":"Egg White","hex":"#ffefc1"},{"name":"Egg Yolk","hex":"#ffce81"},{"name":"Egg Yolk Sunrise","hex":"#ffdb0b"},{"name":"Eggnog","hex":"#fdea9f"},{"name":"Eggplant","hex":"#430541"},{"name":"Eggplant Ash","hex":"#656579"},{"name":"Eggplant Tint","hex":"#531b93"},{"name":"Eggshell","hex":"#f0ead6"},{"name":"Eggshell Blue","hex":"#a3ccc9"},{"name":"Eggshell Cream","hex":"#f5eedb"},{"name":"Eggshell Paper","hex":"#e2be9f"},{"name":"Eggshell Pongee","hex":"#bea582"},{"name":"Eggshell White","hex":"#f3e4dc"},{"name":"Eggwhite","hex":"#f3e5d2"},{"name":"Egret","hex":"#f4ece1"},{"name":"Egret White","hex":"#dfd9cf"},{"name":"Egyptian Blue","hex":"#1034a6"},{"name":"Egyptian Enamel","hex":"#005c69"},{"name":"Egyptian Gold","hex":"#efa84c"},{"name":"Egyptian Green","hex":"#08847c"},{"name":"Egyptian Jasper","hex":"#7a4b3a"},{"name":"Egyptian Javelin","hex":"#febcad"},{"name":"Egyptian Nile","hex":"#70775c"},{"name":"Egyptian Pyramid","hex":"#c19a7d"},{"name":"Egyptian Red","hex":"#983f4a"},{"name":"Egyptian Sand","hex":"#beac90"},{"name":"Egyptian Teal","hex":"#008c8d"},{"name":"Egyptian Temple","hex":"#d6b378"},{"name":"Egyptian Violet","hex":"#3d496d"},{"name":"Egyptian White","hex":"#e5f1ec"},{"name":"Eider White","hex":"#e1ded7"},{"name":"Eiderdown","hex":"#e6dbc6"},{"name":"Eiffel Tower","hex":"#998e83"},{"name":"Eigengrau","hex":"#16161d"},{"name":"Eiger Nordwand","hex":"#7799bb"},{"name":"Eight Ball","hex":"#03050a"},{"name":"Eine kleine Nachtmusik","hex":"#552299"},{"name":"Eire","hex":"#d2be9d"},{"name":"El Capitan","hex":"#b7a696"},{"name":"El Caramelo","hex":"#946e48"},{"name":"El Niño","hex":"#d0cacd"},{"name":"El Paso","hex":"#39392c"},{"name":"El Salva","hex":"#8f4e45"},{"name":"Elastic Pink","hex":"#eca6ca"},{"name":"Elation","hex":"#dfdce5"},{"name":"Eldar","hex":"#ecc083"},{"name":"Elden Ring Orange","hex":"#ed8a09"},{"name":"Elder Creek","hex":"#afa892"},{"name":"Elderberry","hex":"#2e2249"},{"name":"Elderberry Black","hex":"#1e323b"},{"name":"Elderberry Grey","hex":"#aea8b0"},{"name":"Elderberry White","hex":"#eae5cf"},{"name":"Elderflower","hex":"#fbf9e8"},{"name":"Eleanor Ann","hex":"#40373e"},{"name":"Election Night","hex":"#110320"},{"name":"Electra","hex":"#55b492"},{"name":"Electric Arc","hex":"#f7f7cb"},{"name":"Electric Banana","hex":"#fbff00"},{"name":"Electric Blue","hex":"#7df9ff"},{"name":"Electric Brown","hex":"#b56257"},{"name":"Electric Crimson","hex":"#ff003f"},{"name":"Electric Cyan","hex":"#0ff0fc"},{"name":"Electric Eel","hex":"#88bbee"},{"name":"Electric Energy","hex":"#c9e423"},{"name":"Electric Flamingo","hex":"#fc74fd"},{"name":"Electric Glow","hex":"#ffd100"},{"name":"Electric Green","hex":"#21fc0d"},{"name":"Electric Indigo","hex":"#6600ff"},{"name":"Electric Laser Lime","hex":"#26ff2a"},{"name":"Electric Lavender","hex":"#f4bfff"},{"name":"Electric Leaf","hex":"#89dd01"},{"name":"Electric Lemonade","hex":"#5cdcf1"},{"name":"Electric Lime","hex":"#ccff00"},{"name":"Electric Orange","hex":"#ff3503"},{"name":"Electric Pickle","hex":"#00ff04"},{"name":"Electric Pink","hex":"#ff0490"},{"name":"Electric Purple","hex":"#bf00ff"},{"name":"Electric Red","hex":"#e60000"},{"name":"Electric Sheep","hex":"#55ffff"},{"name":"Electric Slide","hex":"#9db0b9"},{"name":"Electric Ultramarine","hex":"#3f00ff"},{"name":"Electric Violet","hex":"#8f00f1"},{"name":"Electric Yellow","hex":"#fffc00"},{"name":"Electrify","hex":"#5665a0"},{"name":"Electrifying Kiss","hex":"#d41c4e"},{"name":"Electromagnetic","hex":"#2e3840"},{"name":"Electron Blue","hex":"#0881d1"},{"name":"Electronic","hex":"#556d88"},{"name":"Electrum","hex":"#e7c697"},{"name":"Elegant Ice","hex":"#c4b9b7"},{"name":"Elegant Ivory","hex":"#f1e6d6"},{"name":"Elegant Light Rose","hex":"#fdcaca"},{"name":"Elegant Midnight","hex":"#5500bb"},{"name":"Elegant Navy","hex":"#48516a"},{"name":"Elegant Purple Gown","hex":"#552367"},{"name":"Elegant White","hex":"#f5f0e1"},{"name":"Elemental","hex":"#d0d3d3"},{"name":"Elemental Green","hex":"#969783"},{"name":"Elemental Grey","hex":"#a0a09f"},{"name":"Elemental Tan","hex":"#cab79c"},{"name":"Elephant","hex":"#817162"},{"name":"Elephant Cub","hex":"#9e958d"},{"name":"Elephant Ear","hex":"#988f85"},{"name":"Elephant Grey","hex":"#95918c"},{"name":"Elephant in the Room","hex":"#a8a9a8"},{"name":"Elephant Skin","hex":"#88817a"},{"name":"Elevated","hex":"#b3c3d4"},{"name":"Elf Cream","hex":"#f7c985"},{"name":"Elf Green","hex":"#1b8a6b"},{"name":"Elf Shoe","hex":"#68b082"},{"name":"Elf Slippers","hex":"#a6a865"},{"name":"Elfin Games","hex":"#9dd196"},{"name":"Elfin Herb","hex":"#cab4d4"},{"name":"Elfin Magic","hex":"#eddbe9"},{"name":"Elfin Yellow","hex":"#ebe885"},{"name":"Elise","hex":"#d8d7b9"},{"name":"Elite Blue","hex":"#1b3053"},{"name":"Elite Green","hex":"#133700"},{"name":"Elite Pink","hex":"#bb8da8"},{"name":"Elite Teal","hex":"#133337"},{"name":"Elite Wisteria","hex":"#987fa9"},{"name":"Elizabeth Blue","hex":"#a1b8d2"},{"name":"Elizabeth Rose","hex":"#fadfd2"},{"name":"Elk Horn","hex":"#e9e2d3"},{"name":"Elk Skin","hex":"#eae6dc"},{"name":"Elkhound","hex":"#897269"},{"name":"Ellen","hex":"#e2c8b7"},{"name":"Ellie Grey","hex":"#aaa9a4"},{"name":"Ellis Mist","hex":"#778070"},{"name":"Elm","hex":"#297b76"},{"name":"Elm Brown Red","hex":"#b25b09"},{"name":"Elm Green","hex":"#577657"},{"name":"Elmer\'s Echo","hex":"#264066"},{"name":"Elmwood","hex":"#8c7c61"},{"name":"Elote","hex":"#ffe8ab"},{"name":"Elusion","hex":"#d2cfcc"},{"name":"Elusive","hex":"#fed7cf"},{"name":"Elusive Blue","hex":"#dde4e8"},{"name":"Elusive Dawn","hex":"#d5bfad"},{"name":"Elusive Dream","hex":"#cdbfc6"},{"name":"Elusive Mauve","hex":"#dec4d2"},{"name":"Elusive Violet","hex":"#d4c0c5"},{"name":"Elusive White","hex":"#e8e3d6"},{"name":"Elven Beige","hex":"#f7cf8a"},{"name":"Elven Olympics","hex":"#6ca024"},{"name":"Elwynn Forest Olive","hex":"#7a8716"},{"name":"Elysia Chlorotica","hex":"#9aae07"},{"name":"Elysian Green","hex":"#a5b145"},{"name":"Elysium Gold","hex":"#ce9500"},{"name":"Emanation","hex":"#b4a3bb"},{"name":"Embarcadero","hex":"#5d4643"},{"name":"Embarrassed","hex":"#ee7799"},{"name":"Embarrassed Frog","hex":"#996611"},{"name":"Embarrassment","hex":"#ff7777"},{"name":"Embellished Blue","hex":"#8bc7c8"},{"name":"Embellishment","hex":"#cbdee2"},{"name":"Ember Red","hex":"#792445"},{"name":"Emberglow","hex":"#ea6759"},{"name":"Embrace","hex":"#e8b8a7"},{"name":"Embracing","hex":"#246453"},{"name":"Embroidered Silk","hex":"#b8dca7"},{"name":"Embroidery","hex":"#d4bebf"},{"name":"Emerald","hex":"#028f1e"},{"name":"Emerald Bliss","hex":"#4cbdac"},{"name":"Emerald City","hex":"#6a7e5f"},{"name":"Emerald Clear Green","hex":"#4f8129"},{"name":"Emerald Coast","hex":"#009185"},{"name":"Emerald Cory","hex":"#52c170"},{"name":"Emerald Dream","hex":"#007a5e"},{"name":"Emerald Forest","hex":"#224347"},{"name":"Emerald Glitter","hex":"#66bb00"},{"name":"Emerald Green","hex":"#046307"},{"name":"Emerald Ice Palace","hex":"#2af589"},{"name":"Emerald Isle","hex":"#019157"},{"name":"Emerald Lake","hex":"#069261"},{"name":"Emerald Light Green","hex":"#00a267"},{"name":"Emerald Pool","hex":"#155e60"},{"name":"Emerald Rain","hex":"#80c872"},{"name":"Emerald Reflection","hex":"#50c878"},{"name":"Emerald Ring","hex":"#578758"},{"name":"Emerald Shimmer","hex":"#78944a"},{"name":"Emerald Spring","hex":"#095155"},{"name":"Emerald Starling","hex":"#11bb11"},{"name":"Emerald Stone","hex":"#016360"},{"name":"Emerald Succulent","hex":"#55aaaa"},{"name":"Emerald Wave","hex":"#4fb3a9"},{"name":"Emerald-Crested Manakin","hex":"#5c6b8f"},{"name":"Emergency","hex":"#911911"},{"name":"Emergency Zone","hex":"#e36940"},{"name":"Emerging Leaf","hex":"#e1e1cf"},{"name":"Emerging Taupe","hex":"#b8a196"},{"name":"Emerson","hex":"#3e6058"},{"name":"Emilie\'s Dream","hex":"#eccee5"},{"name":"Emily","hex":"#abd1e1"},{"name":"Emily Ann Tan","hex":"#d5c7b6"},{"name":"Eminence","hex":"#6e3974"},{"name":"Eminent Bronze","hex":"#7a6841"},{"name":"Emoji Yellow","hex":"#ffde34"},{"name":"Emotional","hex":"#c65f47"},{"name":"Emotive Ring","hex":"#856d70"},{"name":"Emperador","hex":"#79573a"},{"name":"Emperor","hex":"#50494a"},{"name":"Emperor Cherry Red","hex":"#ac2c32"},{"name":"Emperor Jade","hex":"#007b75"},{"name":"Emperor Jewel","hex":"#715a8d"},{"name":"Emperor\'s Children","hex":"#f0a0b6"},{"name":"Emperor\'s Gold","hex":"#b0976d"},{"name":"Emperor\'s Robe","hex":"#99959d"},{"name":"Emperor\'s Silk","hex":"#00816a"},{"name":"Emperors Children","hex":"#b94278"},{"name":"Empire Blue","hex":"#6193b4"},{"name":"Empire Gold","hex":"#c19f6e"},{"name":"Empire Porcelain","hex":"#e0dbd3"},{"name":"Empire Ranch","hex":"#93826a"},{"name":"Empire Rose","hex":"#e7c5c1"},{"name":"Empire State Grey","hex":"#d9dbdf"},{"name":"Empire Violet","hex":"#9264a2"},{"name":"Empire Yellow","hex":"#f7d000"},{"name":"Empower","hex":"#b54644"},{"name":"Empress","hex":"#7c7173"},{"name":"Empress Envy","hex":"#2a9ca0"},{"name":"Empress Lila","hex":"#c7deed"},{"name":"Empress Teal","hex":"#10605a"},{"name":"Emptiness","hex":"#fcfdfc"},{"name":"Emu","hex":"#756e6d"},{"name":"Emu Egg","hex":"#3d8481"},{"name":"En Plein Air","hex":"#d0c5be"},{"name":"Enamel Antique Green","hex":"#427f85"},{"name":"Enamel Blue","hex":"#00758e"},{"name":"Enamel Green","hex":"#bacca8"},{"name":"Enamelled Dragon","hex":"#54c589"},{"name":"Enamelled Jewel","hex":"#045c61"},{"name":"Enamored","hex":"#c67d84"},{"name":"Encaje Aperlado","hex":"#f7ebd6"},{"name":"Encarnado","hex":"#fd0202"},{"name":"Enchant","hex":"#d1c6d2"},{"name":"Enchanted","hex":"#c9e2cf"},{"name":"Enchanted Blue","hex":"#047495"},{"name":"Enchanted Eve","hex":"#79837f"},{"name":"Enchanted Evening","hex":"#d3e9ec"},{"name":"Enchanted Lavender","hex":"#bfa3d9"},{"name":"Enchanted Meadow","hex":"#b1d4b7"},{"name":"Enchanted Silver","hex":"#b5b5bd"},{"name":"Enchanted Wells","hex":"#26ad8d"},{"name":"Enchanted Wood","hex":"#94895f"},{"name":"Enchanting","hex":"#82badf"},{"name":"Enchanting Ginger","hex":"#ac7435"},{"name":"Enchanting Ivy","hex":"#315955"},{"name":"Enchanting Sapphire","hex":"#276dd6"},{"name":"Enchanting Sky","hex":"#7886aa"},{"name":"Enchantress","hex":"#5d3a47"},{"name":"Encore","hex":"#6d7383"},{"name":"Encore Teal","hex":"#30525b"},{"name":"Encounter","hex":"#ff9552"},{"name":"End of Summer","hex":"#cc8f15"},{"name":"End of the Rainbow","hex":"#d2eed6"},{"name":"Endearment","hex":"#ffd8a1"},{"name":"Endeavour","hex":"#29598b"},{"name":"Ending Autumn","hex":"#8b6f64"},{"name":"Ending Dawn","hex":"#fcc9b9"},{"name":"Ending Navy Blue","hex":"#1c305c"},{"name":"Endive","hex":"#cee1c8"},{"name":"Endless","hex":"#5b976a"},{"name":"Endless Galaxy","hex":"#000044"},{"name":"Endless Horizon","hex":"#b1dbf5"},{"name":"Endless Possibilities","hex":"#e0413a"},{"name":"Endless River","hex":"#567aad"},{"name":"Endless Sea","hex":"#32586e"},{"name":"Endless Silk","hex":"#ddddbb"},{"name":"Endless Sky","hex":"#cae3ea"},{"name":"Endless Slumber","hex":"#b1aab3"},{"name":"Endless Summer","hex":"#f7cf00"},{"name":"Endo","hex":"#5da464"},{"name":"Enduring","hex":"#586683"},{"name":"Enduring Bronze","hex":"#554c3e"},{"name":"Enduring Ice","hex":"#ebe8db"},{"name":"Energetic Orange","hex":"#d85739"},{"name":"Energetic Pink","hex":"#f3c6cc"},{"name":"Energic Eggplant","hex":"#b300b3"},{"name":"Energise","hex":"#7cca6b"},{"name":"Energized","hex":"#d2d25a"},{"name":"Energos","hex":"#c0e740"},{"name":"Energy Green","hex":"#1ca350"},{"name":"Energy Orange","hex":"#ff9532"},{"name":"Energy Peak","hex":"#bb5f60"},{"name":"Energy Yellow","hex":"#f5d752"},{"name":"Enfield Brown","hex":"#a73211"},{"name":"Engagement Silver","hex":"#c2c6c0"},{"name":"English Bartlett","hex":"#a17548"},{"name":"English Breakfast","hex":"#441111"},{"name":"English Channel","hex":"#4e6173"},{"name":"English Channel Fog","hex":"#cbd3e6"},{"name":"English Coral","hex":"#c64a55"},{"name":"English Custard","hex":"#e2b66c"},{"name":"English Daisy","hex":"#ffca46"},{"name":"English Forest","hex":"#606256"},{"name":"English Green","hex":"#1b4d3f"},{"name":"English Holly","hex":"#274234"},{"name":"English Hollyhock","hex":"#b5c9d3"},{"name":"English Ivy","hex":"#689063"},{"name":"English Lavender","hex":"#9d7bb0"},{"name":"English Manor","hex":"#7181a4"},{"name":"English Meadow","hex":"#028a52"},{"name":"English Red","hex":"#ab4b52"},{"name":"English River","hex":"#3c768a"},{"name":"English Rose","hex":"#f4c6c3"},{"name":"English Rose Bud","hex":"#e9c9cb"},{"name":"English Saddle","hex":"#8e6947"},{"name":"English Scone","hex":"#e9cfbb"},{"name":"English Vermillion","hex":"#cc474b"},{"name":"English Violet","hex":"#563d5d"},{"name":"English Walnut","hex":"#3e2b23"},{"name":"Engulfed in Light","hex":"#f5f3e9"},{"name":"Enhance","hex":"#d2a5be"},{"name":"Enigma","hex":"#bdbf35"},{"name":"Enigmatic","hex":"#7e7275"},{"name":"Enjoy","hex":"#ead4c4"},{"name":"Enjoyable Yellow","hex":"#f5d6a9"},{"name":"Enlightened Lime","hex":"#e3ead6"},{"name":"Enoki","hex":"#f8faee"},{"name":"Enokitake Mushroom","hex":"#ffeedd"},{"name":"Enough Is Enough","hex":"#898c4a"},{"name":"Enraged","hex":"#ee0044"},{"name":"Enshūcha Red","hex":"#cb6649"},{"name":"Ensign Blue","hex":"#3c4f6e"},{"name":"Entan Red","hex":"#ec6d51"},{"name":"Enterprise","hex":"#65788c"},{"name":"Enthroned Above","hex":"#ac92b0"},{"name":"Enthusiasm","hex":"#00ffaa"},{"name":"Enticing Red","hex":"#b74e4f"},{"name":"Entrada Sandstone","hex":"#d5b498"},{"name":"Entrapment","hex":"#005961"},{"name":"Enviable","hex":"#53983c"},{"name":"Envious Pastel","hex":"#ddf3c2"},{"name":"Environmental","hex":"#b1b5a0"},{"name":"Environmental Green","hex":"#006c4b"},{"name":"Environmental Study","hex":"#88bb00"},{"name":"Envisage","hex":"#96bfb7"},{"name":"Envy","hex":"#8ba58f"},{"name":"Eon","hex":"#d4d3c9"},{"name":"Eosin Pink","hex":"#ff5ec4"},{"name":"Ephemera","hex":"#7a6270"},{"name":"Ephemeral Blue","hex":"#cbd4df"},{"name":"Ephemeral Fog","hex":"#d6ced3"},{"name":"Ephemeral Mist","hex":"#c7cdd3"},{"name":"Ephemeral Peach","hex":"#fce2d4"},{"name":"Ephemeral Red","hex":"#e4cfd7"},{"name":"Ephren Blue","hex":"#1164b4"},{"name":"Epic Blue","hex":"#0066ee"},{"name":"Epicurean Orange","hex":"#ea6a0a"},{"name":"Epidote Olvene Ore","hex":"#ab924b"},{"name":"Epimetheus","hex":"#4bb2d5"},{"name":"Epink","hex":"#dd33ff"},{"name":"Epiphany","hex":"#dbc1de"},{"name":"Epsom","hex":"#829161"},{"name":"Equanimity","hex":"#83a9b3"},{"name":"Equator","hex":"#dab160"},{"name":"Equator Glow","hex":"#ffe6a0"},{"name":"Equatorial","hex":"#ffce84"},{"name":"Equatorial Forest","hex":"#70855e"},{"name":"Equestrian","hex":"#bea781"},{"name":"Equestrian Green","hex":"#54654f"},{"name":"Equestrian Leather","hex":"#5b5652"},{"name":"Equestrienne","hex":"#a07569"},{"name":"Equilibrium","hex":"#a49f9f"},{"name":"Equinox","hex":"#62696b"},{"name":"Era","hex":"#d7e3e5"},{"name":"Erebus Blue","hex":"#060030"},{"name":"Ermine","hex":"#836b4f"},{"name":"Eros Pink","hex":"#c84f68"},{"name":"Erosion","hex":"#ddd1bf"},{"name":"Errigal White","hex":"#f2f2f4"},{"name":"Erythrosine","hex":"#fc7ab0"},{"name":"Escalante","hex":"#a95f5c"},{"name":"Escalope","hex":"#cc8866"},{"name":"Escapade Gold","hex":"#b89b59"},{"name":"Escape from Columbia","hex":"#d2e2ef"},{"name":"Escape Grey","hex":"#abac9f"},{"name":"Escargot","hex":"#fff1d8"},{"name":"Escarpment","hex":"#d5b79b"},{"name":"Eshin Grey","hex":"#4a4f52"},{"name":"Esmeralda","hex":"#45be76"},{"name":"Esoteric","hex":"#c4b5a4"},{"name":"Esoteric Touch Green","hex":"#abedc9"},{"name":"Espalier","hex":"#2f5f3a"},{"name":"Esper\'s Fungus Green","hex":"#80f9ad"},{"name":"Esplanade","hex":"#d5bda4"},{"name":"Espresso","hex":"#4e312d"},{"name":"Espresso Bar","hex":"#5b3f34"},{"name":"Espresso Beans","hex":"#4c443e"},{"name":"Espresso Crema","hex":"#d09c43"},{"name":"Espresso Macchiato","hex":"#4f4744"},{"name":"Espresso Martini","hex":"#8c3a00"},{"name":"Esprit","hex":"#bebd99"},{"name":"Esprit Peach","hex":"#ffc49d"},{"name":"Essence of Violet","hex":"#efedee"},{"name":"Essential Brown","hex":"#7d6848"},{"name":"Essential Grey","hex":"#bcb8b6"},{"name":"Essential Teal","hex":"#007377"},{"name":"Essentially Bright","hex":"#ffde9f"},{"name":"Essex Blue","hex":"#b0ccda"},{"name":"Establish Mint","hex":"#e2eddd"},{"name":"Estate Blue","hex":"#243b5c"},{"name":"Estate Limestone","hex":"#dccdb4"},{"name":"Estate Vineyard","hex":"#68454b"},{"name":"Estate Violet","hex":"#c3c1d2"},{"name":"Estragon","hex":"#a5af76"},{"name":"Estroruby","hex":"#9b101f"},{"name":"Estuary Blue","hex":"#70a5b7"},{"name":"Etcetera","hex":"#e1c6d4"},{"name":"Etched Glass","hex":"#dde2e2"},{"name":"Eternal Cherry","hex":"#dd0044"},{"name":"Eternal Elegance","hex":"#b3c3dd"},{"name":"Eternal Flame","hex":"#a13f49"},{"name":"Eternal Summer","hex":"#f7e504"},{"name":"Eternal White","hex":"#faf3dc"},{"name":"Eternal Winter","hex":"#9cfaff"},{"name":"Eternity","hex":"#2d2f28"},{"name":"Ether","hex":"#98b2b4"},{"name":"Etherea","hex":"#a3928c"},{"name":"Ethereal","hex":"#f9eecb"},{"name":"Ethereal Blue","hex":"#5ca6ce"},{"name":"Ethereal Green","hex":"#f0e8c6"},{"name":"Ethereal Mood","hex":"#cce7eb"},{"name":"Ethereal White","hex":"#e6f1f1"},{"name":"Ethereal Woods","hex":"#3e5e4e"},{"name":"Etherium Blue","hex":"#b9c4de"},{"name":"Ethiopia","hex":"#968777"},{"name":"Ethiopian Wolf","hex":"#985629"},{"name":"Etiquette","hex":"#e2d0d6"},{"name":"Eton Blue","hex":"#96c8a2"},{"name":"Etruscan","hex":"#9b583c"},{"name":"Etruscan Red","hex":"#c9303e"},{"name":"Etude Lilac","hex":"#d5d2d7"},{"name":"Étude Naturelle","hex":"#55bb11"},{"name":"Eucalipto","hex":"#4bc3a8"},{"name":"Eucalyptus","hex":"#329760"},{"name":"Eucalyptus Green","hex":"#1e675a"},{"name":"Eucalyptus Leaf","hex":"#bad2b8"},{"name":"Eucalyptus Wreath","hex":"#88927e"},{"name":"Eugenia","hex":"#f2e8d4"},{"name":"Eugenia Red","hex":"#ed3d66"},{"name":"Eunry","hex":"#cda59c"},{"name":"Eupatorium Purple","hex":"#bf36e0"},{"name":"Euphoria","hex":"#eebbff"},{"name":"Euphoric Lilac","hex":"#dac7da"},{"name":"Euphoric Magenta","hex":"#7f576d"},{"name":"Euro Linen","hex":"#f2e8db"},{"name":"Eurolinen","hex":"#eee2d3"},{"name":"Europe Blue","hex":"#006796"},{"name":"European Pine","hex":"#756556"},{"name":"Eva Green","hex":"#36ff9a"},{"name":"Evaporation","hex":"#d1d5d3"},{"name":"Even Evan","hex":"#998371"},{"name":"Even Growth","hex":"#b2aa7a"},{"name":"Evening Blue","hex":"#2b2b41"},{"name":"Evening Blush","hex":"#c49087"},{"name":"Evening Canyon","hex":"#454341"},{"name":"Evening Cityscape","hex":"#4b535c"},{"name":"Evening Crimson","hex":"#8e6b76"},{"name":"Evening Dove","hex":"#c2bead"},{"name":"Evening Dress","hex":"#d1a19b"},{"name":"Evening East","hex":"#585e6a"},{"name":"Evening Emerald","hex":"#56736f"},{"name":"Evening Fizz","hex":"#4d4970"},{"name":"Evening Fog","hex":"#8c9997"},{"name":"Evening Glory","hex":"#3a4a62"},{"name":"Evening Glow","hex":"#fdd792"},{"name":"Evening Green","hex":"#7c7a3a"},{"name":"Evening Haze","hex":"#b7b2c2"},{"name":"Evening Hush","hex":"#7b8ca8"},{"name":"Evening in Paris","hex":"#938f9f"},{"name":"Evening Lagoon","hex":"#5868ae"},{"name":"Evening Lavender","hex":"#4d4469"},{"name":"Evening Mauve","hex":"#463f67"},{"name":"Evening Mist","hex":"#e3e9e8"},{"name":"Evening Over the Ocean","hex":"#434d66"},{"name":"Evening Pink","hex":"#a7879a"},{"name":"Evening Primrose","hex":"#c2d61d"},{"name":"Evening Sand","hex":"#ddb3ab"},{"name":"Evening Sea","hex":"#26604f"},{"name":"Evening Shadow","hex":"#a1838b"},{"name":"Evening Slipper","hex":"#a99ec1"},{"name":"Evening Star","hex":"#ffd160"},{"name":"Evening Storm","hex":"#465058"},{"name":"Evening Sunset","hex":"#edb06d"},{"name":"Evening Symphony","hex":"#51637b"},{"name":"Evening White","hex":"#d8dbd7"},{"name":"Eventide","hex":"#656470"},{"name":"Everblooming","hex":"#f0c8b6"},{"name":"Everest","hex":"#a0e3e0"},{"name":"Everglade","hex":"#264334"},{"name":"Everglade Mist","hex":"#b7d7de"},{"name":"Evergreen","hex":"#125b49"},{"name":"Evergreen Bough","hex":"#535c55"},{"name":"Evergreen Boughs","hex":"#50594f"},{"name":"Evergreen Field","hex":"#47534f"},{"name":"Evergreen Fog","hex":"#95978a"},{"name":"Evergreen Forest","hex":"#0e695f"},{"name":"Evergreen Trail","hex":"#6f7568"},{"name":"Evergreens","hex":"#405840"},{"name":"Everlasting","hex":"#a1bed9"},{"name":"Everlasting Ice","hex":"#f6fdfa"},{"name":"Everlasting Sage","hex":"#949587"},{"name":"Evermore","hex":"#463e3b"},{"name":"Eversong Orange","hex":"#ffa62d"},{"name":"Everyday White","hex":"#e4dcd4"},{"name":"Everything\'s Rosy","hex":"#d8aca0"},{"name":"Evil Centipede","hex":"#aa2211"},{"name":"Evil Cigar","hex":"#522000"},{"name":"Evil Curse","hex":"#884488"},{"name":"Evil Eye","hex":"#1100cc"},{"name":"Evil Forces","hex":"#770022"},{"name":"Evil Sunz Scarlet","hex":"#c2191f"},{"name":"Evil-Lyn","hex":"#fed903"},{"name":"Evocative Blue","hex":"#9dbcc7"},{"name":"Evolution","hex":"#704a3d"},{"name":"Evora","hex":"#538b89"},{"name":"Ewa","hex":"#454042"},{"name":"Exaggerated Blush","hex":"#b55067"},{"name":"Excalibur","hex":"#676168"},{"name":"Excellence","hex":"#22606e"},{"name":"Excelsior","hex":"#908b85"},{"name":"Exciting Orange","hex":"#f0b07a"},{"name":"Exclusive Elixir","hex":"#f9f1dd"},{"name":"Exclusive Green","hex":"#38493e"},{"name":"Exclusive Ivory","hex":"#e2d8c3"},{"name":"Exclusive Plum","hex":"#736f78"},{"name":"Exclusive Violet","hex":"#b9adbb"},{"name":"Exclusively","hex":"#6b515f"},{"name":"Exclusively Yours","hex":"#f2aeb8"},{"name":"Executive Course","hex":"#8f8a70"},{"name":"Exhale","hex":"#d2cec4"},{"name":"Existential Angst","hex":"#0a0a0a"},{"name":"Exit Light","hex":"#55bb33"},{"name":"Exodus Fruit","hex":"#6264dc"},{"name":"Exotic Bloom","hex":"#ac6292"},{"name":"Exotic Blossom","hex":"#fd9d43"},{"name":"Exotic Eggplant","hex":"#705660"},{"name":"Exotic Escape","hex":"#96d9df"},{"name":"Exotic Evening","hex":"#58516e"},{"name":"Exotic Flower","hex":"#ffa24c"},{"name":"Exotic Flowers","hex":"#833f51"},{"name":"Exotic Honey","hex":"#c47f33"},{"name":"Exotic Incense","hex":"#b86f73"},{"name":"Exotic Life","hex":"#ae7543"},{"name":"Exotic Lilac","hex":"#d198b5"},{"name":"Exotic Liras","hex":"#de0c62"},{"name":"Exotic Orange","hex":"#f84f1d"},{"name":"Exotic Orchid","hex":"#75566c"},{"name":"Exotic Palm","hex":"#909969"},{"name":"Exotic Purple","hex":"#6a5078"},{"name":"Exotic Violet","hex":"#e1a0cf"},{"name":"Exotica","hex":"#938586"},{"name":"Expanse","hex":"#777e65"},{"name":"Expedition","hex":"#af9c76"},{"name":"Expedition Khaki","hex":"#dbbf90"},{"name":"Experience","hex":"#64acb5"},{"name":"Exploding Star","hex":"#fed83a"},{"name":"Exploration Green","hex":"#55a860"},{"name":"Explore Blue","hex":"#30aabc"},{"name":"Explorer Blue","hex":"#57a3b3"},{"name":"Explorer Khaki","hex":"#b6ac95"},{"name":"Explorer of the Galaxies","hex":"#3a1f76"},{"name":"Exploring Khaki","hex":"#aa9a79"},{"name":"Explosive Grey","hex":"#c4c4c4"},{"name":"Explosive Purple","hex":"#cc11bb"},{"name":"Express Blue","hex":"#395a73"},{"name":"Expressionism","hex":"#39497b"},{"name":"Expressionism Green","hex":"#52bc9a"},{"name":"Expressive Plum","hex":"#695c62"},{"name":"Exquisite","hex":"#c8a3bb"},{"name":"Exquisite Eggplant","hex":"#330033"},{"name":"Exquisite Emerald","hex":"#338860"},{"name":"Exquisite Turquoise","hex":"#11ccbb"},{"name":"Extinct","hex":"#9490b2"},{"name":"Extinct Volcano","hex":"#4a4f5a"},{"name":"Extra Fuchsia","hex":"#ef347c"},{"name":"Extra Life","hex":"#6ab417"},{"name":"Extra Mile","hex":"#91916d"},{"name":"Extra White","hex":"#eeefea"},{"name":"Extraordinaire","hex":"#bda6c5"},{"name":"Extraordinary Abundance of Tinge","hex":"#e6e6e6"},{"name":"Extravagance","hex":"#4e4850"},{"name":"Extravehicular Activity","hex":"#0011aa"},{"name":"Extraviolet","hex":"#661188"},{"name":"Extreme Lavender","hex":"#dfc5d5"},{"name":"Extreme Yellow","hex":"#ffb729"},{"name":"Exuberance","hex":"#d45b00"},{"name":"Exuberant Orange","hex":"#f0622f"},{"name":"Exuberant Pink","hex":"#b54d7f"},{"name":"Eye Blue","hex":"#1e80c7"},{"name":"Eye Catching","hex":"#ddb835"},{"name":"Eye Grey","hex":"#607b7b"},{"name":"Eye Of Newt","hex":"#ae3d3b"},{"name":"Eye of the Storm","hex":"#d9e3d9"},{"name":"Eye Patch","hex":"#232121"},{"name":"Eye Popping Cherry","hex":"#bb0077"},{"name":"Eyeball","hex":"#fffbf8"},{"name":"Eyefull","hex":"#8db6b7"},{"name":"Eyelash Camel","hex":"#553300"},{"name":"Eyelash Viper","hex":"#f4c54b"},{"name":"Eyelids","hex":"#440000"},{"name":"Eyeshadow","hex":"#d9d9ea"},{"name":"Eyeshadow Blue","hex":"#6b94c5"},{"name":"Eyeshadow Turquoise","hex":"#008980"},{"name":"Eyeshadow Viola","hex":"#ada6c2"},{"name":"Eyre","hex":"#8f9482"},{"name":"Fabric of Love","hex":"#aa1177"},{"name":"Fabric of Space","hex":"#341758"},{"name":"Fabulous Fantasy","hex":"#ba90ad"},{"name":"Fabulous Fawn","hex":"#e5c1a3"},{"name":"Fabulous Find","hex":"#abe3c9"},{"name":"Fabulous Forties","hex":"#ddcdab"},{"name":"Fabulous Frog","hex":"#88cc00"},{"name":"Fabulous Fuchsia","hex":"#ee1188"},{"name":"Fabulous Grape","hex":"#9083a5"},{"name":"Façade","hex":"#b6a591"},{"name":"Facemark","hex":"#f7cf89"},{"name":"Fade to Black","hex":"#676965"},{"name":"Faded Blue","hex":"#658cbb"},{"name":"Faded Denim","hex":"#7689a2"},{"name":"Faded Firebrick","hex":"#e5d9dc"},{"name":"Faded Flaxflower","hex":"#9eb4c0"},{"name":"Faded Forest","hex":"#e3e2d7"},{"name":"Faded Fuchsia","hex":"#ede2ee"},{"name":"Faded Green","hex":"#7bb274"},{"name":"Faded Grey","hex":"#eae8e4"},{"name":"Faded Jade","hex":"#427977"},{"name":"Faded Jeans","hex":"#5dbdcb"},{"name":"Faded Khaki","hex":"#a5975b"},{"name":"Faded Letter","hex":"#bfac86"},{"name":"Faded Light","hex":"#f5e4de"},{"name":"Faded Lilac","hex":"#92a2bb"},{"name":"Faded Orange","hex":"#f0944d"},{"name":"Faded Orchid","hex":"#887383"},{"name":"Faded Pink","hex":"#de9dac"},{"name":"Faded Poster","hex":"#80dbeb"},{"name":"Faded Purple","hex":"#916e99"},{"name":"Faded Red","hex":"#d3494e"},{"name":"Faded Rose","hex":"#bf6464"},{"name":"Faded Sea","hex":"#8d9cae"},{"name":"Faded Shells","hex":"#ebdcd7"},{"name":"Faded Sunlight","hex":"#fdcf6a"},{"name":"Faded Violet","hex":"#ddbedd"},{"name":"Faded Yellow","hex":"#feff7f"},{"name":"Fading Ember","hex":"#df691e"},{"name":"Fading Fog","hex":"#e8e4e0"},{"name":"Fading Horizon","hex":"#442266"},{"name":"Fading Love","hex":"#c973a2"},{"name":"Fading Night","hex":"#3377cc"},{"name":"Fading Parchment","hex":"#ece6dc"},{"name":"Fading Rose","hex":"#fad0d1"},{"name":"Fading Sunset","hex":"#b3b3c2"},{"name":"Fading Torch","hex":"#f69a54"},{"name":"Fahrenheit","hex":"#fbd2bb"},{"name":"Faience","hex":"#2a6d8b"},{"name":"Faience Green","hex":"#81762b"},{"name":"Fail Whale","hex":"#99ccee"},{"name":"Faint Clover","hex":"#b2eed3"},{"name":"Faint Coral","hex":"#eeded5"},{"name":"Faint Fawn","hex":"#e2c59c"},{"name":"Faint Fern","hex":"#dadbe0"},{"name":"Faint Fuchsia","hex":"#e6deea"},{"name":"Faint Gold","hex":"#b59410"},{"name":"Faint Green","hex":"#a58b2c"},{"name":"Faint Peach","hex":"#f5ddc5"},{"name":"Fainting Light","hex":"#1f2847"},{"name":"Fair Aqua","hex":"#b4e1d8"},{"name":"Fair Green","hex":"#92af88"},{"name":"Fair Ivory","hex":"#fce7cf"},{"name":"Fair Maiden","hex":"#f1e7dc"},{"name":"Fair Orchid","hex":"#bda7be"},{"name":"Fair Pink","hex":"#f3e5dc"},{"name":"Fair Spring","hex":"#93977f"},{"name":"Fair Winds","hex":"#f3e6d6"},{"name":"Fairbank Green","hex":"#9d9c7e"},{"name":"Fairest Jade","hex":"#d3dfd1"},{"name":"Fairfax Brown","hex":"#61463a"},{"name":"Fairfax Grey","hex":"#c9d3d7"},{"name":"Fairstar","hex":"#6ba5a9"},{"name":"Fairview Taupe","hex":"#dac7c4"},{"name":"Fairway","hex":"#477050"},{"name":"Fairway Green","hex":"#26623f"},{"name":"Fairway Mist","hex":"#cde8b6"},{"name":"Fairy Bubblegum Cloud","hex":"#ffebfe"},{"name":"Fairy Dust","hex":"#ffe8f4"},{"name":"Fairy Floss","hex":"#ebc9c6"},{"name":"Fairy Pink","hex":"#eed3cb"},{"name":"Fairy Princess","hex":"#f6dbdd"},{"name":"Fairy Salt","hex":"#ffe0f5"},{"name":"Fairy Sparkles","hex":"#b0e0f7"},{"name":"Fairy Tail","hex":"#ecdde5"},{"name":"Fairy Tale","hex":"#efb4ca"},{"name":"Fairy Tale Blue","hex":"#3e9abd"},{"name":"Fairy Tale Dream","hex":"#facfcc"},{"name":"Fairy Tale Green","hex":"#88cc55"},{"name":"Fairy Wand","hex":"#aea4c1"},{"name":"Fairy White","hex":"#ded4d8"},{"name":"Fairy Wings","hex":"#ffebf2"},{"name":"Fairy Wren","hex":"#8a6fa9"},{"name":"Fairy-Nuff","hex":"#e2d7da"},{"name":"Faith","hex":"#d5ebac"},{"name":"Fake Blonde","hex":"#efe6c1"},{"name":"Fake Crush","hex":"#c88088"},{"name":"Fake Jade","hex":"#13eac9"},{"name":"Fake Love","hex":"#cc77ee"},{"name":"Falafel","hex":"#aa7711"},{"name":"Falcon","hex":"#6e5a5b"},{"name":"Falcon Grey","hex":"#898887"},{"name":"Falcon Turquoise","hex":"#007062"},{"name":"Falcon Wing","hex":"#76595e"},{"name":"Falkland","hex":"#a5bebd"},{"name":"Fall Canyon","hex":"#c69896"},{"name":"Fall Chill","hex":"#e1dddb"},{"name":"Fall Foliage","hex":"#c28359"},{"name":"Fall Gold","hex":"#ffbc35"},{"name":"Fall Green","hex":"#ecfcbd"},{"name":"Fall Harvest","hex":"#a78a59"},{"name":"Fall Heliotrope","hex":"#a49491"},{"name":"Fall in Season","hex":"#7f6144"},{"name":"Fall Leaf","hex":"#e5b7a5"},{"name":"Fall Leaves","hex":"#c17a3c"},{"name":"Fall Mood","hex":"#c2ac9b"},{"name":"Fall River","hex":"#f59344"},{"name":"Fall Straw","hex":"#fee3c5"},{"name":"Fallen Blossoms","hex":"#edb2c4"},{"name":"Fallen Leaves","hex":"#917347"},{"name":"Fallen Petals","hex":"#f2e0da"},{"name":"Fallen Rock","hex":"#8b8072"},{"name":"Falling Leaves","hex":"#a55a3b"},{"name":"Falling Snow","hex":"#f0f1e7"},{"name":"Falling Star","hex":"#cad5c8"},{"name":"Falling Tears","hex":"#c2d7df"},{"name":"Fallout Green","hex":"#b6c121"},{"name":"Fallout Grey","hex":"#889977"},{"name":"Fallow","hex":"#c19a51"},{"name":"Fallow Deer","hex":"#9f8d57"},{"name":"False Cypress","hex":"#939b88"},{"name":"False Morel","hex":"#784d4c"},{"name":"False Puce","hex":"#a57e52"},{"name":"Falu Red","hex":"#801818"},{"name":"Fame Orange","hex":"#db9c7b"},{"name":"Familiar Beige","hex":"#cab3a0"},{"name":"Family Tree","hex":"#a7b191"},{"name":"Fanatic Fuchsia","hex":"#ee1199"},{"name":"Fancy Flamingo","hex":"#ffb1b0"},{"name":"Fancy Flirt","hex":"#b4b780"},{"name":"Fancy Fuchsia","hex":"#ff0088"},{"name":"Fancy Pants","hex":"#f3dae1"},{"name":"Fancy Pink","hex":"#f6e9e8"},{"name":"Fancy Red Wine","hex":"#b40441"},{"name":"Fandangle","hex":"#e4de65"},{"name":"Fandango","hex":"#b53389"},{"name":"Fandango Pink","hex":"#e04f80"},{"name":"Faneuil Brick","hex":"#bb7b6d"},{"name":"Fanfare","hex":"#008384"},{"name":"Fangtooth Fish","hex":"#bbaa97"},{"name":"Fanlight","hex":"#f2eeaf"},{"name":"Fantan","hex":"#9f7e53"},{"name":"Fantasia","hex":"#73788b"},{"name":"Fantastic Pink","hex":"#e6c8c9"},{"name":"Fantasy","hex":"#f2e6dd"},{"name":"Fantasy Console Sky","hex":"#29adff"},{"name":"Fantasy Grey","hex":"#8591a2"},{"name":"Fantasy Romance","hex":"#e83a72"},{"name":"Far Away Grey","hex":"#2d383a"},{"name":"Faraway Blue","hex":"#e5eeee"},{"name":"Faraway Sky","hex":"#8980c1"},{"name":"Farfalle Noodle","hex":"#e5d4c9"},{"name":"Farina","hex":"#dfc38d"},{"name":"Farm Fresh","hex":"#8e9b88"},{"name":"Farm House","hex":"#efe8d7"},{"name":"Farm Straw","hex":"#d5b54c"},{"name":"Farmer\'s Market","hex":"#8f917c"},{"name":"Farmers Green","hex":"#96a69f"},{"name":"Farmers Milk","hex":"#eee3d6"},{"name":"Farmhouse Ochre","hex":"#bd8339"},{"name":"Farmhouse Red","hex":"#a34b41"},{"name":"Farmyard","hex":"#a6917d"},{"name":"Farrago","hex":"#456f6e"},{"name":"Farro","hex":"#c1a485"},{"name":"Farsighted","hex":"#e5e3ef"},{"name":"Fashion Blue","hex":"#006b64"},{"name":"Fashion Fuchsia","hex":"#f400a1"},{"name":"Fashion Green","hex":"#b3d26d"},{"name":"Fashion Grey","hex":"#a29c94"},{"name":"Fashion Mauve","hex":"#b5a8a8"},{"name":"Fashion Week","hex":"#998988"},{"name":"Fashion Yellow","hex":"#edc537"},{"name":"Fashionable Grey","hex":"#bdb8b8"},{"name":"Fashionably Plum","hex":"#b28ca9"},{"name":"Fashionista","hex":"#66616f"},{"name":"Fast as the Wind","hex":"#c7cbc8"},{"name":"Fast Velvet","hex":"#8b94c7"},{"name":"Fat Gold","hex":"#e6bc00"},{"name":"Fat Smooch","hex":"#c1537d"},{"name":"Fat Tuesday","hex":"#352235"},{"name":"Fatal Fields","hex":"#008822"},{"name":"Fatal Fury","hex":"#da321c"},{"name":"Fatback","hex":"#fff7ed"},{"name":"Fate","hex":"#6ba0bf"},{"name":"Fatty Fuchsia","hex":"#ee0077"},{"name":"Fatty Sashimi","hex":"#eec4b4"},{"name":"Fauna","hex":"#c59daa"},{"name":"Favored One","hex":"#fae6cc"},{"name":"Favorite Fudge","hex":"#877252"},{"name":"Favorite Jeans","hex":"#8aa3b1"},{"name":"Favorite Lavender","hex":"#d3a5d6"},{"name":"Favorite Tan","hex":"#c1ae91"},{"name":"Favourite Ale","hex":"#9d723e"},{"name":"Favourite Lady","hex":"#e3c5d6"},{"name":"Fawn","hex":"#cfaf7b"},{"name":"Fawn Brindle","hex":"#a7a094"},{"name":"Fawn Brown","hex":"#71452a"},{"name":"Feasty Fuchsia","hex":"#ee0088"},{"name":"Feather","hex":"#dad9ce"},{"name":"Feather Boa","hex":"#f1c9cd"},{"name":"Feather Falls","hex":"#606972"},{"name":"Feather Fern","hex":"#d5dcd0"},{"name":"Feather Gold","hex":"#edd382"},{"name":"Feather Green","hex":"#a3d0b6"},{"name":"Feather Grey","hex":"#b8ad9e"},{"name":"Feather Plume","hex":"#ffdcb2"},{"name":"Feather Soft Blue","hex":"#a2aebf"},{"name":"Feather Star","hex":"#59a1ef"},{"name":"Feather Stone","hex":"#e3ded2"},{"name":"Feather White","hex":"#e7eae5"},{"name":"Featherbed","hex":"#afcbe5"},{"name":"Featherstone","hex":"#cdc7bb"},{"name":"Feathery Blue","hex":"#abc2c7"},{"name":"Feathery Lilac","hex":"#ece7ed"},{"name":"February Frost","hex":"#e0dee3"},{"name":"Federal Blue","hex":"#43628b"},{"name":"Federal Fund","hex":"#30594b"},{"name":"Federation Brown","hex":"#634041"},{"name":"Federation of Love","hex":"#b71010"},{"name":"Fedora","hex":"#625665"},{"name":"Feeling Lucky","hex":"#aed3c7"},{"name":"Fēi Hóng Scarlet","hex":"#fe420f"},{"name":"Feijoa","hex":"#a5d785"},{"name":"Feijoa Flower","hex":"#edf2c3"},{"name":"Feldgrau","hex":"#4d5d53"},{"name":"Feldspar","hex":"#d19275"},{"name":"Feldspar Grey","hex":"#bca885"},{"name":"Feldspar Silver","hex":"#a0ada9"},{"name":"Felicia","hex":"#917292"},{"name":"Felicity","hex":"#e5e4df"},{"name":"Felix","hex":"#00608f"},{"name":"Felt","hex":"#247345"},{"name":"Felt Green","hex":"#6fc391"},{"name":"Felted Wool","hex":"#979083"},{"name":"Felwood Leaves","hex":"#2bc51b"},{"name":"Feminin Nightshade","hex":"#4f4352"},{"name":"Feminine Fancy","hex":"#c4a8cf"},{"name":"Femininity","hex":"#c7c2ce"},{"name":"Feminism","hex":"#9d5783"},{"name":"Femme Fatale","hex":"#948593"},{"name":"Fěn Hóng Pink","hex":"#ff6cb5"},{"name":"Fence Green","hex":"#09332c"},{"name":"Feng Shui","hex":"#d7d9c2"},{"name":"Fenland","hex":"#ac9d83"},{"name":"Fennec Fox","hex":"#dad7c8"},{"name":"Fennel","hex":"#8fce9b"},{"name":"Fennel Bulb","hex":"#ddeebb"},{"name":"Fennel Fiasco","hex":"#00aa44"},{"name":"Fennel Fiesta","hex":"#00bb77"},{"name":"Fennel Flower","hex":"#77aaff"},{"name":"Fennel Seed","hex":"#8f7f50"},{"name":"Fennel Stem","hex":"#b1b6a3"},{"name":"Fennel Tea","hex":"#d2f4dd"},{"name":"Fennelly","hex":"#9a9e80"},{"name":"Fenrisian Grey","hex":"#cedee7"},{"name":"Fenugreek","hex":"#bd8965"},{"name":"Feralas Lime","hex":"#8de07c"},{"name":"Fern","hex":"#548d44"},{"name":"Fern Canopy","hex":"#758a5f"},{"name":"Fern Flower","hex":"#576a7d"},{"name":"Fern Frond","hex":"#657220"},{"name":"Fern Green","hex":"#009b54"},{"name":"Fern Grotto","hex":"#536943"},{"name":"Fern Grove","hex":"#837b53"},{"name":"Fern Gully","hex":"#595646"},{"name":"Fern Leaf","hex":"#99a787"},{"name":"Fern Shade","hex":"#797447"},{"name":"Ferntastic","hex":"#71ab62"},{"name":"Ferocious","hex":"#e2261f"},{"name":"Ferocious Flamingo","hex":"#ee00cc"},{"name":"Ferocious Fox","hex":"#e25d1b"},{"name":"Ferocious Fuchsia","hex":"#aa00cc"},{"name":"Ferra","hex":"#876a68"},{"name":"Ferrari Red","hex":"#ff2800"},{"name":"Ferris Wheel","hex":"#ad7d76"},{"name":"Ferrous","hex":"#cc926c"},{"name":"Ferry","hex":"#383e44"},{"name":"Fertile Green","hex":"#8b8757"},{"name":"Fertile Soil","hex":"#8e603c"},{"name":"Fertility Green","hex":"#66fc00"},{"name":"Fervent Brass","hex":"#bc9042"},{"name":"Fervent Green","hex":"#469f4e"},{"name":"Fescue","hex":"#a1cda6"},{"name":"Festering Brown","hex":"#cb8e00"},{"name":"Festival","hex":"#eacc4a"},{"name":"Festival De Verano","hex":"#b5e1db"},{"name":"Festival Fuchsia","hex":"#aa2f78"},{"name":"Festival Green","hex":"#6ea43c"},{"name":"Festival Orange","hex":"#de5e3f"},{"name":"Festive Bordeaux","hex":"#6e0f12"},{"name":"Festive Fennec","hex":"#ff5566"},{"name":"Festive Ferret","hex":"#dfdfe5"},{"name":"Festive Green","hex":"#008c6c"},{"name":"Festoon Aqua","hex":"#a0bbb8"},{"name":"Feta","hex":"#dbe0d0"},{"name":"Fetched Stick","hex":"#86725f"},{"name":"Fever","hex":"#ea4c4c"},{"name":"Fever Dream","hex":"#dd5577"},{"name":"Feverish","hex":"#dd6677"},{"name":"Feverish Passion","hex":"#de4d7b"},{"name":"Feverish Pink","hex":"#cb3e50"},{"name":"Fibonacci Blue","hex":"#112358"},{"name":"Fibre Moss","hex":"#bec0af"},{"name":"Ficus","hex":"#3b593a"},{"name":"Ficus Elastica","hex":"#006131"},{"name":"Fiddle-Leaf Fig","hex":"#a6c875"},{"name":"Fiddlehead Fern","hex":"#c8c387"},{"name":"Fiddler","hex":"#5a9589"},{"name":"Fiddlesticks","hex":"#bb9fb1"},{"name":"Field Blue","hex":"#4477aa"},{"name":"Field Day","hex":"#c5e6a4"},{"name":"Field Drab","hex":"#6c541e"},{"name":"Field Frost","hex":"#cee9e8"},{"name":"Field Green","hex":"#60b922"},{"name":"Field Khaki","hex":"#b1a891"},{"name":"Field Maple","hex":"#80884e"},{"name":"Field of Wheat","hex":"#deb699"},{"name":"Field Poppy","hex":"#d86f3c"},{"name":"Fieldstone","hex":"#807e77"},{"name":"Fierce Mantis","hex":"#7fc15c"},{"name":"Fierce Red","hex":"#cc0021"},{"name":"Fiery Brown","hex":"#5d3831"},{"name":"Fiery Coral","hex":"#e26058"},{"name":"Fiery Flamingo","hex":"#f96d7b"},{"name":"Fiery Fuchsia","hex":"#b7386e"},{"name":"Fiery Glow","hex":"#f0531c"},{"name":"Fiery Orange","hex":"#b1592f"},{"name":"Fiery Red","hex":"#dd1e2e"},{"name":"Fiery Rose","hex":"#ff5470"},{"name":"Fiery Salmon","hex":"#f76564"},{"name":"Fiery Topaz","hex":"#b74537"},{"name":"Fiesta","hex":"#edd8d2"},{"name":"Fiesta Blue","hex":"#6fc0b1"},{"name":"Fiesta Pink","hex":"#d47194"},{"name":"Fiesta Rojo","hex":"#b67c80"},{"name":"Fife","hex":"#a9a5c2"},{"name":"Fifth Olive-Nue","hex":"#8e8779"},{"name":"Fiftieth Shade of Grey","hex":"#505050"},{"name":"Fig","hex":"#5a3140"},{"name":"Fig Balsamic","hex":"#550022"},{"name":"Fig Branches","hex":"#7a634d"},{"name":"Fig Cluster","hex":"#784a65"},{"name":"Fig Fruit Mauve","hex":"#a98691"},{"name":"Fig Leaf","hex":"#556b2f"},{"name":"Fig Mustard Yellow","hex":"#bb8610"},{"name":"Fig Preserves","hex":"#a7989e"},{"name":"Fig Tree","hex":"#605f4b"},{"name":"Fight the Sunrise","hex":"#ff99aa"},{"name":"Figue","hex":"#9469a2"},{"name":"Figue Pulp","hex":"#962c54"},{"name":"Figure Stone","hex":"#eedac3"},{"name":"Figurine","hex":"#e4d5c0"},{"name":"Fiji","hex":"#00aaac"},{"name":"Fiji Coral","hex":"#6b5f68"},{"name":"Fiji Green","hex":"#636f22"},{"name":"Fiji Palm","hex":"#528d3c"},{"name":"Fiji Sands","hex":"#d8caa9"},{"name":"Filigree","hex":"#dfe7e8"},{"name":"Filigree Green","hex":"#a5af89"},{"name":"Film Fest","hex":"#93877c"},{"name":"Film Noir","hex":"#473933"},{"name":"Filmy Green","hex":"#d1d3c7"},{"name":"Filtered Forest","hex":"#b7e1d2"},{"name":"Filtered Light","hex":"#b1b2c4"},{"name":"Filtered Moon","hex":"#ecca9a"},{"name":"Filtered Rays","hex":"#d0b064"},{"name":"Filthy Brown","hex":"#e8aa08"},{"name":"Final Departure","hex":"#f1f5db"},{"name":"Final Straw","hex":"#d0bf9e"},{"name":"Finch","hex":"#75785a"},{"name":"Fine Alabaster","hex":"#ecd3cb"},{"name":"Fine Blue","hex":"#b6e1e1"},{"name":"Fine Burgundy","hex":"#815158"},{"name":"Fine Gold","hex":"#daa826"},{"name":"Fine Grain","hex":"#d8cfc1"},{"name":"Fine Greige","hex":"#b5a998"},{"name":"Fine Linen","hex":"#faf5c3"},{"name":"Fine Pine","hex":"#008800"},{"name":"Fine Porcelain","hex":"#faf0e1"},{"name":"Fine Purple","hex":"#5e548d"},{"name":"Fine Sand","hex":"#f1d5ae"},{"name":"Fine Tuned Blue","hex":"#84989e"},{"name":"Fine White","hex":"#faede1"},{"name":"Fine White Sand","hex":"#e4d4c0"},{"name":"Fine Wine","hex":"#744e5b"},{"name":"Finesse","hex":"#96a8c8"},{"name":"Finest Blush","hex":"#dd8888"},{"name":"Finest Silk","hex":"#f1e5d7"},{"name":"Finger Banana","hex":"#e1c12f"},{"name":"Fingerpaint","hex":"#8a7e61"},{"name":"Fingerprint","hex":"#555356"},{"name":"Finishing Touch","hex":"#cbbfb3"},{"name":"Finlandia","hex":"#61755b"},{"name":"Finn","hex":"#694554"},{"name":"Finnegan","hex":"#425357"},{"name":"Finnish Fiord","hex":"#5db0be"},{"name":"Fioletowy Beige","hex":"#fffce3"},{"name":"Fioletowy Purple","hex":"#fc44a3"},{"name":"Fiord","hex":"#4b5a62"},{"name":"Fiorito","hex":"#bfbfaf"},{"name":"Fir","hex":"#3d7965"},{"name":"Fir Blue","hex":"#46807b"},{"name":"Fir Green","hex":"#67592a"},{"name":"Fir Spruce Green","hex":"#6d7969"},{"name":"Fire","hex":"#8f3f2a"},{"name":"Fire Ant","hex":"#be6400"},{"name":"Fire Axe Red","hex":"#ce1620"},{"name":"Fire Bolt","hex":"#cc4411"},{"name":"Fire Bush","hex":"#e09842"},{"name":"Fire Chalk","hex":"#d2806c"},{"name":"Fire Chi","hex":"#92353a"},{"name":"Fire Coral","hex":"#e3b46f"},{"name":"Fire Dance","hex":"#e3d590"},{"name":"Fire Dragon Bright","hex":"#f97306"},{"name":"Fire Dust","hex":"#b98d68"},{"name":"Fire Engine","hex":"#fe0002"},{"name":"Fire Flower","hex":"#f68f37"},{"name":"Fire Hydrant","hex":"#ff0d00"},{"name":"Fire Island","hex":"#d95137"},{"name":"Fire Lord","hex":"#bb7733"},{"name":"Fire Mist","hex":"#fbd9c4"},{"name":"Fire Opal","hex":"#fd3c06"},{"name":"Fire Orange","hex":"#ff8e57"},{"name":"Fire Roasted","hex":"#79483e"},{"name":"Fire Yellow","hex":"#ffb70b"},{"name":"Fireball","hex":"#ce2029"},{"name":"Firebird Tail Lights","hex":"#dd5522"},{"name":"Firebrick","hex":"#b22222"},{"name":"Firebug","hex":"#cd5c51"},{"name":"Firecracker","hex":"#f2643a"},{"name":"Firecracker Salmon","hex":"#f36363"},{"name":"Fired Brick","hex":"#793030"},{"name":"Fired Clay","hex":"#884444"},{"name":"Fired Up","hex":"#d37a38"},{"name":"Fireflies","hex":"#f6daa7"},{"name":"Firefly","hex":"#314643"},{"name":"Firefly Glow","hex":"#fff3a1"},{"name":"Fireglow","hex":"#d65e40"},{"name":"Firelight","hex":"#f9d97b"},{"name":"Firenze","hex":"#bc7256"},{"name":"Fireplace Glow","hex":"#d08b73"},{"name":"Fireplace Kitten","hex":"#c5c9c7"},{"name":"Fireplace Mantel","hex":"#847c70"},{"name":"Fireside","hex":"#6e4a44"},{"name":"Firewatch","hex":"#ee8866"},{"name":"Fireweed","hex":"#b38491"},{"name":"Fireworks","hex":"#44363d"},{"name":"Firm Green","hex":"#47654a"},{"name":"Firm Pink","hex":"#da93c1"},{"name":"Firmament Blue","hex":"#11353f"},{"name":"First Blush","hex":"#f4edec"},{"name":"First Colors of Spring","hex":"#dbe64c"},{"name":"First Crush","hex":"#f6e2ea"},{"name":"First Date","hex":"#f5b1a2"},{"name":"First Daughter","hex":"#f7d2d8"},{"name":"First Day of School","hex":"#fadba0"},{"name":"First Day of Summer","hex":"#f1e798"},{"name":"First Frost","hex":"#cfe5f0"},{"name":"First Impression","hex":"#f4e5e7"},{"name":"First Lady","hex":"#c47967"},{"name":"First Landing","hex":"#59a6cf"},{"name":"First Light","hex":"#d9e6ee"},{"name":"First Lilac","hex":"#e7d6ed"},{"name":"First Love","hex":"#cf758a"},{"name":"First of July","hex":"#bce6ef"},{"name":"First Peach","hex":"#f4cac6"},{"name":"First Plum","hex":"#b87592"},{"name":"First Post","hex":"#2fbda1"},{"name":"First Rain","hex":"#bdd8ec"},{"name":"First Shade of Blue","hex":"#cbe1f2"},{"name":"First Snow","hex":"#e8eff8"},{"name":"First Star","hex":"#dad9d4"},{"name":"First Timer Green","hex":"#00e8d8"},{"name":"First Tulip","hex":"#ffe79c"},{"name":"First Waltz","hex":"#d5bcb2"},{"name":"Fischer Blue","hex":"#32a0b1"},{"name":"Fish Bone","hex":"#e4d9c5"},{"name":"Fish Boy","hex":"#11dddd"},{"name":"Fish Camp Woods","hex":"#7a9682"},{"name":"Fish Ceviche","hex":"#e1e1d5"},{"name":"Fish Finger","hex":"#eecc55"},{"name":"Fish Net Blue","hex":"#1e446e"},{"name":"Fish Pond","hex":"#86c8ed"},{"name":"Fisher King","hex":"#5182b9"},{"name":"Fisherman Knit","hex":"#d1c9be"},{"name":"Fishy House","hex":"#1ba590"},{"name":"Fist of the North Star","hex":"#225599"},{"name":"Fistfull of Green","hex":"#a2a415"},{"name":"Fitness Blue","hex":"#5bb9d2"},{"name":"Fitzgerald Smoke","hex":"#b3b6b0"},{"name":"Five Star","hex":"#ffaa4a"},{"name":"Fizz","hex":"#b1dbaa"},{"name":"Fizzing Whizbees","hex":"#ddbcbc"},{"name":"Fizzle","hex":"#d8e4de"},{"name":"Fizzy Peach","hex":"#f7bc5c"},{"name":"Fjord","hex":"#616242"},{"name":"Fjord Blue","hex":"#007290"},{"name":"Fjord Green","hex":"#005043"},{"name":"Flag Green","hex":"#717c00"},{"name":"Flagstaff Green","hex":"#b3bfb0"},{"name":"Flagstone","hex":"#acadad"},{"name":"Flagstone Quartzite","hex":"#9a9e88"},{"name":"Flamboyant","hex":"#f73d37"},{"name":"Flamboyant Flamingo","hex":"#f74480"},{"name":"Flamboyant Plum","hex":"#694e52"},{"name":"Flamboyant Teal","hex":"#129c8b"},{"name":"Flambrosia","hex":"#e7a500"},{"name":"Flame","hex":"#e25822"},{"name":"Flame Angelfish","hex":"#fd4c29"},{"name":"Flame Hawkfish","hex":"#960018"},{"name":"Flame of Prometheus","hex":"#db3c02"},{"name":"Flame Orange","hex":"#fb8b23"},{"name":"Flame Pea","hex":"#be5c48"},{"name":"Flame Red","hex":"#86282e"},{"name":"Flame Scarlet","hex":"#d62235"},{"name":"Flame Seal","hex":"#f4e25a"},{"name":"Flame Stitch","hex":"#d65d45"},{"name":"Flame Yellow","hex":"#ffcf49"},{"name":"Flamenco","hex":"#ea8645"},{"name":"Flaming Cauldron","hex":"#f6a374"},{"name":"Flaming Cherry","hex":"#d4202a"},{"name":"Flaming Flamingo","hex":"#dd55ff"},{"name":"Flaming Hot Flamingoes","hex":"#ff005d"},{"name":"Flaming June","hex":"#eebb66"},{"name":"Flaming Orange","hex":"#ee6633"},{"name":"Flaming Torch","hex":"#d2864e"},{"name":"Flamingo","hex":"#e1634f"},{"name":"Flamingo Diva","hex":"#ff44dd"},{"name":"Flamingo Dream","hex":"#ee888b"},{"name":"Flamingo Feather","hex":"#f8bdd9"},{"name":"Flamingo Fury","hex":"#df01f0"},{"name":"Flamingo Peach","hex":"#f6e2d8"},{"name":"Flamingo Pink","hex":"#fc8eac"},{"name":"Flamingo Queen","hex":"#cc33ff"},{"name":"Flamingo Red","hex":"#ef8e87"},{"name":"Flan","hex":"#f6e3b4"},{"name":"Flannel","hex":"#9e917c"},{"name":"Flannel Grey","hex":"#aeadac"},{"name":"Flannel Pajamas","hex":"#8b8d98"},{"name":"Flapper Dance","hex":"#495762"},{"name":"Flare","hex":"#fcaf52"},{"name":"Flare Gun","hex":"#ff4519"},{"name":"Flash Gitz Yellow","hex":"#fffb05"},{"name":"Flash in the Pan","hex":"#ff9977"},{"name":"Flash of Orange","hex":"#ffaa00"},{"name":"Flashlight","hex":"#f9eed6"},{"name":"Flashman","hex":"#7cbd85"},{"name":"Flashpoint","hex":"#f9f2d1"},{"name":"Flashy Sapphire","hex":"#2c538a"},{"name":"Flat Aluminum","hex":"#c3c6cd"},{"name":"Flat Beige","hex":"#f7d48f"},{"name":"Flat Blue","hex":"#3c73a8"},{"name":"Flat Brown","hex":"#754600"},{"name":"Flat Earth","hex":"#aa5533"},{"name":"Flat Green","hex":"#699d4c"},{"name":"Flat Yellow","hex":"#fff005"},{"name":"Flattered Flamingo","hex":"#ee6655"},{"name":"Flattering Peach","hex":"#f4d3b3"},{"name":"Flattery","hex":"#6b4424"},{"name":"Flatty Yellow","hex":"#fce300"},{"name":"Flavescent","hex":"#f7e98e"},{"name":"Flavoparmelia Caperata","hex":"#8fb67b"},{"name":"Flawed White","hex":"#fffbfc"},{"name":"Flax","hex":"#eedc82"},{"name":"Flax Beige","hex":"#d4c3b3"},{"name":"Flax Bloom","hex":"#d2d8f4"},{"name":"Flax Fiber","hex":"#e0d68e"},{"name":"Flax Fibre Grey","hex":"#b7a99a"},{"name":"Flax Flower","hex":"#5577aa"},{"name":"Flax Flower Blue","hex":"#4499dd"},{"name":"Flax Smoke","hex":"#7b8265"},{"name":"Flax Straw","hex":"#cbaa7d"},{"name":"Flax-Flower Blue","hex":"#6f88af"},{"name":"Flaxen","hex":"#fbecc9"},{"name":"Flaxen Fair","hex":"#e3ddbd"},{"name":"Flaxen Field","hex":"#bba684"},{"name":"Flaxseed","hex":"#f7e6c6"},{"name":"Flayed One","hex":"#fcfcde"},{"name":"Fleck","hex":"#97bbe1"},{"name":"Fleeting Green","hex":"#d8e2d8"},{"name":"Flemish Blue","hex":"#add0e0"},{"name":"Flesh Fly","hex":"#894585"},{"name":"Fleur de Sel","hex":"#dcddd8"},{"name":"Fleur de Sel Caramel","hex":"#da8704"},{"name":"Fleur-De-Lis","hex":"#b090c7"},{"name":"Flexible Grey","hex":"#b1a3a1"},{"name":"Flickering Firefly","hex":"#f8f6e6"},{"name":"Flickering Flame","hex":"#aa6e49"},{"name":"Flickering Gold","hex":"#c6a668"},{"name":"Flickering Light","hex":"#fff1dc"},{"name":"Flickering Sea","hex":"#5566ee"},{"name":"Flickery C64","hex":"#4f81ff"},{"name":"Flickery CRT Green","hex":"#90f215"},{"name":"Flickr Blue","hex":"#216bd6"},{"name":"Flickr Pink","hex":"#fb0081"},{"name":"Flier Lie","hex":"#cdb891"},{"name":"Flight of Fancy","hex":"#91786b"},{"name":"Flight Time","hex":"#a3b8ce"},{"name":"Flinders Green","hex":"#6d7058"},{"name":"Fling Green","hex":"#8ecfd0"},{"name":"Flint","hex":"#716e61"},{"name":"Flint Corn Red","hex":"#d9623b"},{"name":"Flint Grey","hex":"#a09c98"},{"name":"Flint Purple","hex":"#42424d"},{"name":"Flint Rock","hex":"#989493"},{"name":"Flint Shard","hex":"#8f9395"},{"name":"Flint Smoke","hex":"#a8b2b1"},{"name":"Flintstone","hex":"#677283"},{"name":"Flintstone Blue","hex":"#434252"},{"name":"Flip","hex":"#45747e"},{"name":"Flip a Coin","hex":"#ccddcc"},{"name":"Flip-Flop","hex":"#f2c4a7"},{"name":"Flipper","hex":"#7f726b"},{"name":"Flirt","hex":"#7a2e4d"},{"name":"Flirt Alert","hex":"#be3c37"},{"name":"Flirtatious","hex":"#ffd637"},{"name":"Flirtatious Flamingo","hex":"#cc22ff"},{"name":"Flirtatious Indigo Tea","hex":"#473f2d"},{"name":"Flirty Pink","hex":"#9e88b1"},{"name":"Flirty Rose","hex":"#d65e93"},{"name":"Flirty Salmon","hex":"#fa7069"},{"name":"Floating Blue","hex":"#b0c9cd"},{"name":"Floating Feather","hex":"#e9d8c2"},{"name":"Floating Island","hex":"#ece5cf"},{"name":"Floating Lily","hex":"#edebce"},{"name":"Floating Lily Pad","hex":"#ccc7a1"},{"name":"Flood","hex":"#6677bb"},{"name":"Flood Mud","hex":"#877966"},{"name":"Flood Out","hex":"#579dab"},{"name":"Floppy Disk","hex":"#110044"},{"name":"Flor Lila","hex":"#e0e0eb"},{"name":"Flora","hex":"#73fa79"},{"name":"Flora Green","hex":"#91ad8a"},{"name":"Floral Arrangement","hex":"#c6ac9f"},{"name":"Floral Bluff","hex":"#e7cfb9"},{"name":"Floral Bouquet","hex":"#bacb7c"},{"name":"Floral Leaf","hex":"#ffb94e"},{"name":"Floral Linen","hex":"#f5e2de"},{"name":"Floral Note","hex":"#cdcfdb"},{"name":"Floral Scent","hex":"#eeede9"},{"name":"Floral Tapestry","hex":"#c39191"},{"name":"Floral White","hex":"#fffaf0"},{"name":"Florence","hex":"#96b576"},{"name":"Florence Brown","hex":"#835740"},{"name":"Florence Red","hex":"#753f38"},{"name":"Florentine Brown","hex":"#7a5544"},{"name":"Florentine Clay","hex":"#c1937a"},{"name":"Florentine Lapis","hex":"#1c5798"},{"name":"Florida Grey","hex":"#bea4a2"},{"name":"Florida Keys","hex":"#56beab"},{"name":"Florida Mango","hex":"#ed9f6c"},{"name":"Florida Sunrise","hex":"#f7aa6f"},{"name":"Florida Turquoise","hex":"#6bb8b1"},{"name":"Florida Waters","hex":"#2a4983"},{"name":"Florida\'s Alligator","hex":"#664422"},{"name":"Floriography","hex":"#a54049"},{"name":"Floss","hex":"#d7b3b9"},{"name":"Flotation","hex":"#7bb0ba"},{"name":"Flounce","hex":"#4a8791"},{"name":"Flour Sack","hex":"#b9b297"},{"name":"Flourish","hex":"#ebdc9c"},{"name":"Flower Bulb","hex":"#d9e8c9"},{"name":"Flower Centre","hex":"#fde6c6"},{"name":"Flower Field","hex":"#d9a96f"},{"name":"Flower Girl","hex":"#f498ad"},{"name":"Flower Girl Dress","hex":"#ede7e6"},{"name":"Flower Hat Jellyfish","hex":"#f9d593"},{"name":"Flower of Oahu","hex":"#f5dfc5"},{"name":"Flower Pot","hex":"#8f4438"},{"name":"Flower Spell","hex":"#ffc9d7"},{"name":"Flower Stem","hex":"#b5d5b0"},{"name":"Flower Wood","hex":"#988378"},{"name":"Flowerbed","hex":"#ffebda"},{"name":"Flowerhorn Cichlid Red","hex":"#f62e52"},{"name":"Flowering Cactus","hex":"#a2d4bd"},{"name":"Flowering Chestnut","hex":"#875657"},{"name":"Flowering Raspberry","hex":"#a16c94"},{"name":"Flowering Reed","hex":"#e1d8b8"},{"name":"Flowerpot","hex":"#d8b0a0"},{"name":"Flowers of May","hex":"#e3d7e3"},{"name":"Flowery","hex":"#e4dcbf"},{"name":"Flowey Yellow","hex":"#fff953"},{"name":"Flowing Breeze","hex":"#b9c6cb"},{"name":"Flowing River","hex":"#335e6f"},{"name":"Fluffy Duckling","hex":"#fcdf39"},{"name":"Fluffy Pink","hex":"#f7d6cb"},{"name":"Fluid Blue","hex":"#c5d6eb"},{"name":"Fluor Spar","hex":"#a77d35"},{"name":"Fluorescence","hex":"#89d178"},{"name":"Fluorescent Fire","hex":"#984427"},{"name":"Fluorescent Green","hex":"#08ff08"},{"name":"Fluorescent Lime","hex":"#bdc233"},{"name":"Fluorescent Orange","hex":"#ffcf00"},{"name":"Fluorescent Pink","hex":"#fe1493"},{"name":"Fluorescent Red","hex":"#ff5555"},{"name":"Fluorescent Red Orange","hex":"#fc8427"},{"name":"Fluorescent Turquoise","hex":"#00fdff"},{"name":"Fluorescent Yellow","hex":"#ccff02"},{"name":"Fluorite Blue","hex":"#b4ccc2"},{"name":"Fluorite Green","hex":"#699158"},{"name":"Fluro Green","hex":"#0aff02"},{"name":"Flurries","hex":"#f2ede3"},{"name":"Flush Mahogany","hex":"#ca2425"},{"name":"Flush Orange","hex":"#ff6f01"},{"name":"Flush Pink","hex":"#f8cbc4"},{"name":"Flushed","hex":"#dd5555"},{"name":"Fly a Kite","hex":"#c8daf5"},{"name":"Fly Agaric","hex":"#ff2052"},{"name":"Fly Away","hex":"#85b3f3"},{"name":"Fly by Night","hex":"#1c1e4d"},{"name":"Fly the Green","hex":"#218d4b"},{"name":"Fly-by-Night","hex":"#495a67"},{"name":"Flying Carpet","hex":"#787489"},{"name":"Flying Fish","hex":"#5376ab"},{"name":"Flying Fish Blue","hex":"#024aca"},{"name":"Flyway","hex":"#5db3d4"},{"name":"Foam","hex":"#d0eae8"},{"name":"Foam Green","hex":"#90fda9"},{"name":"Foaming Surf","hex":"#90d1dd"},{"name":"Foamy Lime","hex":"#dce2be"},{"name":"Foamy Milk","hex":"#f7f4f7"},{"name":"Foamy Surf","hex":"#b3d4df"},{"name":"Focus","hex":"#e5e0d2"},{"name":"Focus on Light","hex":"#fef9d3"},{"name":"Focus Point","hex":"#91c3bd"},{"name":"Fog","hex":"#d6d7d2"},{"name":"Fog Beacon","hex":"#d8d6d1"},{"name":"Fog Green","hex":"#c2cbb4"},{"name":"Fog of War","hex":"#112233"},{"name":"Fog Syringa","hex":"#c4bad2"},{"name":"Fog White","hex":"#f1efe4"},{"name":"Foggy Amethyst","hex":"#57317e"},{"name":"Foggy Blue","hex":"#99aebb"},{"name":"Foggy Bog","hex":"#7f8e1d"},{"name":"Foggy Day","hex":"#e7e3db"},{"name":"Foggy Dew","hex":"#d1d5d0"},{"name":"Foggy Grey","hex":"#a7a69d"},{"name":"Foggy Heath","hex":"#e2c9ff"},{"name":"Foggy London","hex":"#5c5658"},{"name":"Foggy Love","hex":"#d5c7e8"},{"name":"Foggy Mist","hex":"#c8d1cc"},{"name":"Foggy Morn","hex":"#cad0ce"},{"name":"Foggy Night","hex":"#40494e"},{"name":"Foggy Pith","hex":"#fbf6ef"},{"name":"Foggy Plateau","hex":"#cfcbe5"},{"name":"Foggy Quartz","hex":"#bfa2a1"},{"name":"Foggy Sunrise","hex":"#a79c8e"},{"name":"Foghorn","hex":"#909fb2"},{"name":"Fogtown","hex":"#eef0e7"},{"name":"Foil","hex":"#c0c3c4"},{"name":"Foille","hex":"#b0b99c"},{"name":"Foliage","hex":"#95b388"},{"name":"Foliage Green","hex":"#3e6f58"},{"name":"Folk Guitar","hex":"#7a634f"},{"name":"Folk Song","hex":"#65a19f"},{"name":"Folk Tale","hex":"#b2e1bc"},{"name":"Folk Tales","hex":"#a5c1b6"},{"name":"Folklore","hex":"#684141"},{"name":"Folkstone","hex":"#6d6562"},{"name":"Folkstone Grey","hex":"#626879"},{"name":"Folksy Gold","hex":"#d69969"},{"name":"Follow the Leader","hex":"#f7e5d0"},{"name":"Folly","hex":"#fd004d"},{"name":"Fond de Teint","hex":"#ffaaaa"},{"name":"Fond Memory","hex":"#c8bcb7"},{"name":"Fondant","hex":"#f4e2cf"},{"name":"Fondue","hex":"#fdf5c4"},{"name":"Fondue Fudge","hex":"#6d4b3f"},{"name":"Fool\'s Gold","hex":"#cad175"},{"name":"Football","hex":"#825736"},{"name":"Football Field","hex":"#7eaf34"},{"name":"Foothill Drive","hex":"#cab48e"},{"name":"Foothills","hex":"#e1cfa5"},{"name":"Footie Pajamas","hex":"#e6cee6"},{"name":"For the Love of Hue","hex":"#457e87"},{"name":"Forbidden Blackberry","hex":"#323f75"},{"name":"Forbidden Forest","hex":"#215354"},{"name":"Forbidden Fruit","hex":"#fe7b7c"},{"name":"Forbidden Red","hex":"#8a4646"},{"name":"Forbidden Thrill","hex":"#856363"},{"name":"Force of Nature","hex":"#d5ce69"},{"name":"Forceful Orange","hex":"#f29312"},{"name":"Foresight","hex":"#94a8d3"},{"name":"Forest","hex":"#0b5509"},{"name":"Forest Berry","hex":"#956378"},{"name":"Forest Biome","hex":"#1d5952"},{"name":"Forest Blues","hex":"#0d4462"},{"name":"Forest Bound","hex":"#738f50"},{"name":"Forest Canopy","hex":"#969582"},{"name":"Forest Edge","hex":"#627b72"},{"name":"Forest Empress","hex":"#3d7016"},{"name":"Forest Fern","hex":"#63b76c"},{"name":"Forest Floor","hex":"#555142"},{"name":"Forest Floor Khaki","hex":"#78766d"},{"name":"Forest Found","hex":"#e1dfbb"},{"name":"Forest Frolic","hex":"#88bb95"},{"name":"Forest Fruit Pink","hex":"#68393b"},{"name":"Forest Fruit Red","hex":"#6e2759"},{"name":"Forest Green","hex":"#154406"},{"name":"Forest Greenery","hex":"#3e645b"},{"name":"Forest Lichen","hex":"#9aa22b"},{"name":"Forest Maid","hex":"#52b963"},{"name":"Forest Moss","hex":"#858f83"},{"name":"Forest Night","hex":"#434237"},{"name":"Forest Path","hex":"#708d6c"},{"name":"Forest Rain","hex":"#216957"},{"name":"Forest Ride","hex":"#006800"},{"name":"Forest Ridge","hex":"#555d46"},{"name":"Forest Sand","hex":"#c8caa4"},{"name":"Forest Shade","hex":"#91ac80"},{"name":"Forest Spirit","hex":"#667028"},{"name":"Forest Splendor","hex":"#016e61"},{"name":"Forest Tapestry","hex":"#a4ba8a"},{"name":"Forest Tent","hex":"#bba748"},{"name":"Forester","hex":"#9aa77c"},{"name":"Forestial","hex":"#007733"},{"name":"Forestial Outpost","hex":"#556611"},{"name":"Forestry","hex":"#2f441f"},{"name":"Forestwood","hex":"#4d5346"},{"name":"Forever Blue","hex":"#899bb8"},{"name":"Forever Denim","hex":"#778590"},{"name":"Forever Fairytale","hex":"#d2bbb2"},{"name":"Forever Faithful","hex":"#efe6e1"},{"name":"Forever Green","hex":"#aab4a7"},{"name":"Forever Lilac","hex":"#afa5c7"},{"name":"Forged Iron","hex":"#555257"},{"name":"Forged Steel","hex":"#5b5b59"},{"name":"Forget-Me-Not","hex":"#0087bd"},{"name":"Forget-Me-Not Blue","hex":"#358094"},{"name":"Forgive Quickly","hex":"#e1e1be"},{"name":"Forgiven Sin","hex":"#ff1199"},{"name":"Forgotten Blue","hex":"#c0e5ec"},{"name":"Forgotten Gold","hex":"#c7b89f"},{"name":"Forgotten Mosque","hex":"#e2d9db"},{"name":"Forgotten Pink","hex":"#ffd9d6"},{"name":"Forgotten Purple","hex":"#9878f8"},{"name":"Forgotten Sandstone","hex":"#afa696"},{"name":"Forgotten Sunset","hex":"#fdd5b1"},{"name":"Formal Affair","hex":"#848391"},{"name":"Formal Garden","hex":"#3a984d"},{"name":"Formal Grey","hex":"#97969a"},{"name":"Formal Maroon","hex":"#70474b"},{"name":"Forrester","hex":"#4e5b52"},{"name":"Forsythia","hex":"#ffc801"},{"name":"Forsythia Blossom","hex":"#f6d76e"},{"name":"Forsythia Bud","hex":"#bbcc55"},{"name":"Fortitude","hex":"#c6c5c1"},{"name":"Fortress","hex":"#bea58e"},{"name":"Fortress Grey","hex":"#b8b8b8"},{"name":"Fortune","hex":"#9f97a3"},{"name":"Fortune Cookie","hex":"#e0c5a1"},{"name":"Fortune Red","hex":"#b0534d"},{"name":"Fortune\'s Prize","hex":"#daa994"},{"name":"Forward Fuchsia","hex":"#92345b"},{"name":"Fossil","hex":"#867367"},{"name":"Fossil Butte","hex":"#a78f65"},{"name":"Fossil Green","hex":"#6c6a43"},{"name":"Fossil Sand","hex":"#d2c8bb"},{"name":"Fossil Stone","hex":"#e3ddcc"},{"name":"Fossil Tan","hex":"#d1af90"},{"name":"Fossilized","hex":"#b6b8b0"},{"name":"Fossilized Leaf","hex":"#756a43"},{"name":"Foul Green","hex":"#85c7a1"},{"name":"Foundation","hex":"#f8e8c5"},{"name":"Foundation White","hex":"#efeeff"},{"name":"Fountain","hex":"#56b5ca"},{"name":"Fountain Blue","hex":"#65adb2"},{"name":"Fountain City","hex":"#9cd4cf"},{"name":"Fountain Frolic","hex":"#e4e4c5"},{"name":"Fountain Spout","hex":"#cdebec"},{"name":"Fountains of Budapest","hex":"#b9def0"},{"name":"Four Leaf Clover","hex":"#738f5d"},{"name":"Fox","hex":"#ca4e33"},{"name":"Fox Hill","hex":"#c8aa92"},{"name":"Fox Tails","hex":"#dd8800"},{"name":"Foxen","hex":"#bf8e7f"},{"name":"Foxfire Brown","hex":"#9f6949"},{"name":"Foxflower Viola","hex":"#a2acc5"},{"name":"Foxglove","hex":"#b57c8c"},{"name":"Foxgloves","hex":"#c6c0ca"},{"name":"Foxhall Green","hex":"#454b40"},{"name":"Foxtail","hex":"#bc896e"},{"name":"Foxy","hex":"#a85e53"},{"name":"Foxy Fuchsia","hex":"#9f00c5"},{"name":"Foxy Lady","hex":"#d5a6ad"},{"name":"Foxy Pink","hex":"#db95ab"},{"name":"Fozzie Bear","hex":"#70625c"},{"name":"Fragile","hex":"#bbb8d0"},{"name":"Fragile Beauty","hex":"#e7d7c6"},{"name":"Fragile Fern","hex":"#eff2db"},{"name":"Fragrant Cherry","hex":"#8e545c"},{"name":"Fragrant Cloves","hex":"#ac5e3a"},{"name":"Fragrant Jasmine","hex":"#fbf6e7"},{"name":"Fragrant Lilac","hex":"#caa7bb"},{"name":"Fragrant Satchel","hex":"#a99fba"},{"name":"Fragrant Snowbell","hex":"#d5c5d4"},{"name":"Fragrant Wand","hex":"#adb1c1"},{"name":"Frail Fuchsia","hex":"#ee88ee"},{"name":"Framboise","hex":"#e40058"},{"name":"Frangipane","hex":"#f4d5b2"},{"name":"Frangipani","hex":"#ffd7a0"},{"name":"Frank Blue","hex":"#225288"},{"name":"Frank Lloyd White","hex":"#efebdb"},{"name":"Frankenstein","hex":"#7ba05b"},{"name":"Frankly Earnest","hex":"#e2dbca"},{"name":"Frappé","hex":"#ceae99"},{"name":"Frappé au Chocolat","hex":"#9a6840"},{"name":"Freckles","hex":"#d78775"},{"name":"Free Green","hex":"#74a690"},{"name":"Free Reign","hex":"#d1cdca"},{"name":"Free Speech Aquamarine","hex":"#029d74"},{"name":"Free Speech Blue","hex":"#4156c5"},{"name":"Free Speech Green","hex":"#09f911"},{"name":"Free Speech Magenta","hex":"#e35bd8"},{"name":"Free Speech Red","hex":"#c00000"},{"name":"Free Spirit","hex":"#deeeed"},{"name":"Freedom","hex":"#3b5e68"},{"name":"Freedom Found","hex":"#657682"},{"name":"Freefall","hex":"#565266"},{"name":"Freesia","hex":"#f3c12c"},{"name":"Freesia Purple","hex":"#b3b0d4"},{"name":"Freeze Up","hex":"#dee9f4"},{"name":"Freezing Vapor","hex":"#d4e9f5"},{"name":"Freezy Breezy","hex":"#99eeee"},{"name":"Freezy Wind","hex":"#99ffdd"},{"name":"Freinacht Black","hex":"#232f36"},{"name":"French 75","hex":"#f9f3d5"},{"name":"French Beige","hex":"#a67b50"},{"name":"French Bistre","hex":"#856d4d"},{"name":"French Blue","hex":"#0072bb"},{"name":"French Bustle","hex":"#f2d5d4"},{"name":"French Castle","hex":"#cdc0b7"},{"name":"French Colony","hex":"#90a1aa"},{"name":"French Court","hex":"#6a8ea2"},{"name":"French Creme","hex":"#f2e6cf"},{"name":"French Diamond","hex":"#597191"},{"name":"French Fry","hex":"#ebc263"},{"name":"French Fuchsia","hex":"#fd3f92"},{"name":"French Grey","hex":"#bfbdc1"},{"name":"French Grey Linen","hex":"#cac8b6"},{"name":"French Heirloom","hex":"#e9e2e0"},{"name":"French Lavender","hex":"#dfc9d1"},{"name":"French Lilac","hex":"#deb7d9"},{"name":"French Lilac Blue","hex":"#adbae3"},{"name":"French Lime","hex":"#c0ff00"},{"name":"French Limestone","hex":"#c9d6c2"},{"name":"French Manicure","hex":"#fee6dc"},{"name":"French Market","hex":"#a2c7a3"},{"name":"French Marron","hex":"#ad747d"},{"name":"French Mauve","hex":"#d473d4"},{"name":"French Mirage Blue","hex":"#446688"},{"name":"French Moire","hex":"#9fbbc3"},{"name":"French Oak","hex":"#bb9e7c"},{"name":"French Pale Gold","hex":"#d4ab60"},{"name":"French Parsley","hex":"#9ea07d"},{"name":"French Pass","hex":"#a4d2e0"},{"name":"French Pastry","hex":"#c4aa92"},{"name":"French Pear","hex":"#9e9f7d"},{"name":"French Pink","hex":"#fd6c9e"},{"name":"French Plum","hex":"#811453"},{"name":"French Porcelain","hex":"#f6f4f6"},{"name":"French Porcelain Clay","hex":"#faf1d7"},{"name":"French Puce","hex":"#4e1609"},{"name":"French Raspberry","hex":"#c72c48"},{"name":"French Roast","hex":"#644c48"},{"name":"French Rose","hex":"#f64a8a"},{"name":"French Shutter","hex":"#bab6a0"},{"name":"French Silk","hex":"#c0c6d2"},{"name":"French Silver","hex":"#b8bcbc"},{"name":"French Sky Blue","hex":"#77b5fe"},{"name":"French Tarragon","hex":"#667255"},{"name":"French Taupe","hex":"#d3c2bf"},{"name":"French Toast","hex":"#dd8822"},{"name":"French Truffle","hex":"#896d61"},{"name":"French Vanilla","hex":"#efe1a7"},{"name":"French Vanilla Sorbet","hex":"#fbe8ce"},{"name":"French Violet","hex":"#8806ce"},{"name":"French White","hex":"#f1e7db"},{"name":"French Wine","hex":"#ac1e44"},{"name":"French Winery","hex":"#991133"},{"name":"Frenzied Red","hex":"#814a5c"},{"name":"Frenzy","hex":"#feb101"},{"name":"Fresco","hex":"#f4dbd9"},{"name":"Fresco Blue","hex":"#034c67"},{"name":"Fresco Cream","hex":"#fcc9a6"},{"name":"Fresco Green","hex":"#7bd9ad"},{"name":"Fresh Acorn","hex":"#d2693e"},{"name":"Fresh Air","hex":"#a6e7ff"},{"name":"Fresh Apple","hex":"#97a346"},{"name":"Fresh Apricot","hex":"#ffd7a5"},{"name":"Fresh Artichoke","hex":"#7c8447"},{"name":"Fresh Auburn","hex":"#a52a24"},{"name":"Fresh Baked Bread","hex":"#f8d7be"},{"name":"Fresh Basil","hex":"#5c5f4b"},{"name":"Fresh Blue","hex":"#8bd6e2"},{"name":"Fresh Blue of Bel Air","hex":"#069af3"},{"name":"Fresh Breeze","hex":"#beeddc"},{"name":"Fresh Brew","hex":"#b8aa7d"},{"name":"Fresh Cantaloupe","hex":"#ff9c68"},{"name":"Fresh Cedar","hex":"#a77f74"},{"name":"Fresh Cinnamon","hex":"#995511"},{"name":"Fresh Clay","hex":"#be8035"},{"name":"Fresh Cream","hex":"#fcf7e0"},{"name":"Fresh Croissant","hex":"#cc9f76"},{"name":"Fresh Cut","hex":"#f2003c"},{"name":"Fresh Cut Grass","hex":"#91cb7d"},{"name":"Fresh Day","hex":"#dfe9e5"},{"name":"Fresh Dew","hex":"#f0f4e5"},{"name":"Fresh Dough","hex":"#f2ebe6"},{"name":"Fresh Eggplant","hex":"#4f467e"},{"name":"Fresh Eggs","hex":"#faf4ce"},{"name":"Fresh Eucalyptus","hex":"#adbcb4"},{"name":"Fresh Frappé","hex":"#dbe69d"},{"name":"Fresh Gingerbread","hex":"#d3691f"},{"name":"Fresh Granny Smith","hex":"#7ff217"},{"name":"Fresh Green","hex":"#69d84f"},{"name":"Fresh Greens","hex":"#3fad71"},{"name":"Fresh Grown","hex":"#f0f7c4"},{"name":"Fresh Guacamole","hex":"#a2b07e"},{"name":"Fresh Gum","hex":"#ffaadd"},{"name":"Fresh Heather","hex":"#d1c1dd"},{"name":"Fresh Herb","hex":"#77913b"},{"name":"Fresh Herbs","hex":"#3a5f49"},{"name":"Fresh Honeydew","hex":"#f6efc5"},{"name":"Fresh Ivy Green","hex":"#006a5b"},{"name":"Fresh Lavender","hex":"#8e90b4"},{"name":"Fresh Lawn","hex":"#88aa00"},{"name":"Fresh Leaf","hex":"#93ef10"},{"name":"Fresh Lemonade","hex":"#ece678"},{"name":"Fresh Lettuce","hex":"#b2d58c"},{"name":"Fresh Lime","hex":"#d8f1cb"},{"name":"Fresh Linen","hex":"#ebe8da"},{"name":"Fresh Mint","hex":"#2a5443"},{"name":"Fresh Nectar","hex":"#daa674"},{"name":"Fresh Neon Pink","hex":"#ff11ff"},{"name":"Fresh Olive","hex":"#a69e73"},{"name":"Fresh on the Market","hex":"#faa9bb"},{"name":"Fresh Onion","hex":"#5b8930"},{"name":"Fresh Oregano","hex":"#4faa6c"},{"name":"Fresh Peaches","hex":"#f6b98a"},{"name":"Fresh Pesto","hex":"#a0bd14"},{"name":"Fresh Piglet","hex":"#fddde6"},{"name":"Fresh Pine","hex":"#4f5b49"},{"name":"Fresh Pineapple","hex":"#f3d64f"},{"name":"Fresh Pink","hex":"#e19091"},{"name":"Fresh Pink Lemonade","hex":"#d2adb5"},{"name":"Fresh Popcorn","hex":"#f4f3e9"},{"name":"Fresh Praline","hex":"#e7bb95"},{"name":"Fresh Salmon","hex":"#ff7356"},{"name":"Fresh Sawdust","hex":"#c8a278"},{"name":"Fresh Scent","hex":"#f1c11c"},{"name":"Fresh Snow","hex":"#f6efe1"},{"name":"Fresh Sod","hex":"#91a085"},{"name":"Fresh Soft Blue","hex":"#6ab9bb"},{"name":"Fresh Sprout","hex":"#c7c176"},{"name":"Fresh Squeezed","hex":"#ffad00"},{"name":"Fresh Start","hex":"#cfd4a4"},{"name":"Fresh Straw","hex":"#eecc66"},{"name":"Fresh Take","hex":"#505b93"},{"name":"Fresh Thyme","hex":"#aebda8"},{"name":"Fresh Tone","hex":"#b2c7c0"},{"name":"Fresh Turquoise","hex":"#40e0d0"},{"name":"Fresh Up","hex":"#dfebb1"},{"name":"Fresh Water","hex":"#c6e3f7"},{"name":"Fresh Watermelon","hex":"#df9689"},{"name":"Fresh Willow","hex":"#e1d9aa"},{"name":"Fresh Wood Ashes","hex":"#eae6cc"},{"name":"Fresh Yellow","hex":"#f7e190"},{"name":"Fresh Zest","hex":"#f5e9cf"},{"name":"Freshly Baked","hex":"#e9c180"},{"name":"Freshly Purpleized","hex":"#5c5083"},{"name":"Freshly Roasted Coffee","hex":"#663322"},{"name":"Freshman","hex":"#e6f2c4"},{"name":"Freshmint","hex":"#d9f4ea"},{"name":"Freshwater","hex":"#4da6b2"},{"name":"Freshwater Marsh","hex":"#535644"},{"name":"Fretwire","hex":"#b2a490"},{"name":"Friar Brown","hex":"#754e3e"},{"name":"Friar Grey","hex":"#807e79"},{"name":"Friar Tuck","hex":"#ddb994"},{"name":"Friar\'s Brown","hex":"#5e5241"},{"name":"Fricassée","hex":"#ffe6c2"},{"name":"Fried Egg","hex":"#ffe464"},{"name":"Friendly Basilisk","hex":"#e2f5e1"},{"name":"Friendly Frost","hex":"#bffbff"},{"name":"Friendly Homestead","hex":"#c8a992"},{"name":"Friendly Yellow","hex":"#f5e0b1"},{"name":"Friends","hex":"#e8c5c1"},{"name":"Friendship","hex":"#fed8c2"},{"name":"Fright Night","hex":"#004499"},{"name":"Frijid Pink","hex":"#ee77ff"},{"name":"Frilled Shark","hex":"#939fa9"},{"name":"Frills","hex":"#8fa6c1"},{"name":"Fringy Flower","hex":"#b4e1bb"},{"name":"Frisky","hex":"#ccdda1"},{"name":"Frisky Blue","hex":"#7bb1c9"},{"name":"Frittata","hex":"#feebc8"},{"name":"Frivolous Folly","hex":"#cfd2c7"},{"name":"Frog","hex":"#58bc08"},{"name":"Frog Green","hex":"#00693c"},{"name":"Frog Hollow","hex":"#7da270"},{"name":"Frog on a Log","hex":"#8fb943"},{"name":"Frog Pond","hex":"#73b683"},{"name":"Frog Prince","hex":"#bbd75a"},{"name":"Frog\'s Legs","hex":"#8c8449"},{"name":"Frogger","hex":"#8cd612"},{"name":"Froggy Pond","hex":"#7fba9e"},{"name":"Frolic","hex":"#f9e7e1"},{"name":"Froly","hex":"#e56d75"},{"name":"Frond","hex":"#7b7f56"},{"name":"Front Porch","hex":"#cdccc5"},{"name":"Frontier","hex":"#314a49"},{"name":"Frontier Brown","hex":"#9a8172"},{"name":"Frontier Fort","hex":"#c3b19f"},{"name":"Frontier Land","hex":"#bca59a"},{"name":"Frontier Shadow","hex":"#655a4a"},{"name":"Frontier Shingle","hex":"#7b5f46"},{"name":"Frost","hex":"#e1e4c5"},{"name":"Frost Bite","hex":"#f6f0e5"},{"name":"Frost Blue","hex":"#5d9aa6"},{"name":"Frost Fairy","hex":"#bbcfef"},{"name":"Frost Grey","hex":"#7f7d7e"},{"name":"Frost Gum","hex":"#8ecb9e"},{"name":"Frost Wind","hex":"#daebef"},{"name":"Frostbite","hex":"#acfffc"},{"name":"Frosted Almond","hex":"#d2c2ac"},{"name":"Frosted Blueberries","hex":"#0055dd"},{"name":"Frosted Cocoa","hex":"#a89c91"},{"name":"Frosted Emerald","hex":"#78b185"},{"name":"Frosted Fern","hex":"#a7a796"},{"name":"Frosted Garden","hex":"#e2f7d9"},{"name":"Frosted Glass","hex":"#eaf0f0"},{"name":"Frosted Grape","hex":"#d4c4d2"},{"name":"Frosted Hills","hex":"#aaeeaa"},{"name":"Frosted Iris","hex":"#b1b9d9"},{"name":"Frosted Jade","hex":"#c2d1c4"},{"name":"Frosted Juniper","hex":"#f0f4eb"},{"name":"Frosted Lemon","hex":"#ffedc7"},{"name":"Frosted Lilac","hex":"#d3d1dc"},{"name":"Frosted Mint","hex":"#e2f2e4"},{"name":"Frosted Mint Hills","hex":"#ccffc2"},{"name":"Frosted Plains","hex":"#e0ffdf"},{"name":"Frosted Pomegranate","hex":"#ad3d46"},{"name":"Frosted Sage","hex":"#c6d1c4"},{"name":"Frosted Silver","hex":"#c5c9c5"},{"name":"Frosted Sugar","hex":"#d5bcc2"},{"name":"Frosted Toffee","hex":"#f1dbbf"},{"name":"Frosted Tulip","hex":"#f6d8d7"},{"name":"Frostee","hex":"#dbe5d2"},{"name":"Frosting Cream","hex":"#fffbee"},{"name":"Frostini","hex":"#dbf2d9"},{"name":"Frostproof","hex":"#d1f0f6"},{"name":"Frostwork","hex":"#eff1e3"},{"name":"Frosty Dawn","hex":"#cbe9c9"},{"name":"Frosty Day","hex":"#ccebf5"},{"name":"Frosty Fog","hex":"#dee1e9"},{"name":"Frosty Glade","hex":"#a0c0bf"},{"name":"Frosty Green","hex":"#a3b5a6"},{"name":"Frosty Mint","hex":"#e2f7f1"},{"name":"Frosty Morning","hex":"#efe8e8"},{"name":"Frosty Nightfall","hex":"#9497b3"},{"name":"Frosty Pine","hex":"#c7cfbe"},{"name":"Frosty Soft Blue","hex":"#b4e0de"},{"name":"Frosty Spruce","hex":"#578270"},{"name":"Frosty White","hex":"#ddddd6"},{"name":"Frosty White Blue","hex":"#cce9e4"},{"name":"Froth","hex":"#c6b8ae"},{"name":"Frothy Milk","hex":"#faede6"},{"name":"Frothy Surf","hex":"#e7ebe6"},{"name":"Frozen Banana","hex":"#fbf5d6"},{"name":"Frozen Blue","hex":"#a5c5d9"},{"name":"Frozen Boubble","hex":"#00eedd"},{"name":"Frozen Civilization","hex":"#e1f5e5"},{"name":"Frozen Custard","hex":"#fbeabd"},{"name":"Frozen Dew","hex":"#d1caa4"},{"name":"Frozen Edamame","hex":"#9ca48a"},{"name":"Frozen Forest","hex":"#cfe8b6"},{"name":"Frozen Frappé","hex":"#ddc5d2"},{"name":"Frozen Fruit","hex":"#e1ca99"},{"name":"Frozen Grass","hex":"#deeadc"},{"name":"Frozen Lake","hex":"#7b9cb3"},{"name":"Frozen Landscape","hex":"#aee4ff"},{"name":"Frozen Mammoth","hex":"#dfd9da"},{"name":"Frozen Margarita","hex":"#dbe2cc"},{"name":"Frozen Mint","hex":"#d8e8e6"},{"name":"Frozen Moss Green","hex":"#addfad"},{"name":"Frozen Pea","hex":"#c4ead5"},{"name":"Frozen Periwinkle","hex":"#c9d1ef"},{"name":"Frozen Pond","hex":"#a5b4ae"},{"name":"Frozen Salmon","hex":"#fea993"},{"name":"Frozen State","hex":"#26f7fd"},{"name":"Frozen Statues","hex":"#e1dee5"},{"name":"Frozen Stream","hex":"#30555d"},{"name":"Frozen Tomato","hex":"#dd5533"},{"name":"Frozen Tundra","hex":"#a3bfcb"},{"name":"Frozen Turquoise","hex":"#53f6ff"},{"name":"Frozen Veins","hex":"#ecb3be"},{"name":"Frozen Wave","hex":"#56acca"},{"name":"Frozen Whisper","hex":"#8bbbdb"},{"name":"Frugal","hex":"#a5d7b2"},{"name":"Fruit Bowl","hex":"#fdc9d0"},{"name":"Fruit Cocktail","hex":"#d08995"},{"name":"Fruit Dove","hex":"#ca4f70"},{"name":"Fruit of Passion","hex":"#946985"},{"name":"Fruit Red","hex":"#fa8970"},{"name":"Fruit Salad","hex":"#4ba351"},{"name":"Fruit Shake","hex":"#f39d8d"},{"name":"Fruit Yard","hex":"#604241"},{"name":"Fruit Yellow","hex":"#eac064"},{"name":"Fruitful Orchard","hex":"#773b3e"},{"name":"Fruitless Fig Tree","hex":"#448822"},{"name":"Fruity Licious","hex":"#f69092"},{"name":"Fuchsia","hex":"#ed0dd9"},{"name":"Fuchsia Berries","hex":"#333322"},{"name":"Fuchsia Blue","hex":"#7a58c1"},{"name":"Fuchsia Blush","hex":"#e47cb8"},{"name":"Fuchsia Felicity","hex":"#f44772"},{"name":"Fuchsia Fever","hex":"#ff5599"},{"name":"Fuchsia Flair","hex":"#bb22bb"},{"name":"Fuchsia Flash","hex":"#dd55cc"},{"name":"Fuchsia Flock","hex":"#ab446b"},{"name":"Fuchsia Flourish","hex":"#bb2299"},{"name":"Fúchsia Intenso","hex":"#d800cc"},{"name":"Fuchsia Kiss","hex":"#cb6e98"},{"name":"Fuchsia Nebula","hex":"#7722aa"},{"name":"Fuchsia Pheromone","hex":"#9f4cb7"},{"name":"Fuchsia Pink","hex":"#ff77ff"},{"name":"Fuchsia Purple","hex":"#d33479"},{"name":"Fuchsia Red","hex":"#b73879"},{"name":"Fuchsia Rose","hex":"#c74375"},{"name":"Fuchsia Tint","hex":"#c255c1"},{"name":"Fuchsite","hex":"#c3d9ce"},{"name":"Fuchsite Green","hex":"#5b7e70"},{"name":"Fudge","hex":"#583d43"},{"name":"Fudge Bar","hex":"#997964"},{"name":"Fudge Brownie","hex":"#572b16"},{"name":"Fudge Truffle","hex":"#604a3f"},{"name":"Fudgesicle","hex":"#ac6239"},{"name":"Fuegan Orange","hex":"#c77e4d"},{"name":"Fuego","hex":"#ee5533"},{"name":"Fuego Nuevo","hex":"#ee6622"},{"name":"Fuego Verde","hex":"#c2d62e"},{"name":"Fuel Town","hex":"#596472"},{"name":"Fuel Yellow","hex":"#d19033"},{"name":"Fugitive Flamingo","hex":"#ee66aa"},{"name":"Fuji Peak","hex":"#f6eee2"},{"name":"Fuji Purple","hex":"#89729e"},{"name":"Fuji Snow","hex":"#f1efe8"},{"name":"Fujinezumi","hex":"#766980"},{"name":"Fulgrim Pink","hex":"#f5b3ce"},{"name":"Fulgurite Copper","hex":"#e6b77e"},{"name":"Full Bloom","hex":"#fbcdc3"},{"name":"Full City Roast","hex":"#662222"},{"name":"Full Cream","hex":"#fae4ce"},{"name":"Full Glass","hex":"#916b77"},{"name":"Full Moon","hex":"#f4f3e0"},{"name":"Full Moon Grey","hex":"#cfeae9"},{"name":"Full Of Life","hex":"#de5f2f"},{"name":"Full Swing Indigo","hex":"#320094"},{"name":"Full Yellow","hex":"#f9bc4f"},{"name":"Fully Purple","hex":"#514c7e"},{"name":"Fulvous","hex":"#e48400"},{"name":"Fun and Games","hex":"#33789c"},{"name":"Fun Blue","hex":"#335083"},{"name":"Fun Green","hex":"#15633d"},{"name":"Fun Yellow","hex":"#f7e594"},{"name":"Funchal Yellow","hex":"#b6884d"},{"name":"Functional Blue","hex":"#3f6086"},{"name":"Functional Grey","hex":"#aba39a"},{"name":"Fundy Bay","hex":"#cdd2c9"},{"name":"Fungal Hallucinations","hex":"#cc00dd"},{"name":"Fungi","hex":"#8f8177"},{"name":"Funhouse","hex":"#f3d9dc"},{"name":"Funk","hex":"#3ea380"},{"name":"Funki Porcini","hex":"#ee9999"},{"name":"Funkie Friday","hex":"#4a3c4a"},{"name":"Funky Frog","hex":"#98bd3c"},{"name":"Funky Yellow","hex":"#edd26f"},{"name":"Funnel Cloud","hex":"#113366"},{"name":"Funny Face","hex":"#edc8ce"},{"name":"Furious Fox","hex":"#e35519"},{"name":"Furious Frog","hex":"#55ee00"},{"name":"Furious Fuchsia","hex":"#ee2277"},{"name":"Furious Red","hex":"#ff1100"},{"name":"Furious Tiger","hex":"#ea5814"},{"name":"Furious Tomato","hex":"#c30a12"},{"name":"Furnace","hex":"#dd4124"},{"name":"Furry Lady","hex":"#f5efeb"},{"name":"Furry Lion","hex":"#f09338"},{"name":"Fury","hex":"#ff0011"},{"name":"Fuscia Fizz","hex":"#b56e91"},{"name":"Fuscous Grey","hex":"#54534d"},{"name":"Fusilli","hex":"#f1e8d6"},{"name":"Fusion","hex":"#b0ae26"},{"name":"Fusion Coral","hex":"#ff8576"},{"name":"Fusion Red","hex":"#ff6163"},{"name":"Fussy Pink","hex":"#e6a3b9"},{"name":"Futaai Indigo","hex":"#614e6e"},{"name":"Futon","hex":"#edf6db"},{"name":"Future","hex":"#15abbe"},{"name":"Future Hair","hex":"#20b562"},{"name":"Future Vision","hex":"#bcb6bc"},{"name":"Futuristic","hex":"#998da8"},{"name":"Fuzzy Duckling","hex":"#ffea70"},{"name":"Fuzzy Navel","hex":"#ffd69f"},{"name":"Fuzzy Peach","hex":"#ffbb8f"},{"name":"Fuzzy Sheep","hex":"#f0e9d1"},{"name":"Fuzzy Unicorn","hex":"#eae3db"},{"name":"Fuzzy Wuzzy","hex":"#cc6666"},{"name":"Fuzzy Wuzzy Brown","hex":"#c45655"},{"name":"Fynbos Leaf","hex":"#aeb1ac"},{"name":"G.I.","hex":"#96834a"},{"name":"Gable Green","hex":"#2c4641"},{"name":"Gaboon Viper","hex":"#8c6450"},{"name":"Gabriel\'s Light","hex":"#dacca8"},{"name":"Gabriel\'s Torch","hex":"#f8e6c6"},{"name":"Gadabout","hex":"#ffc4ae"},{"name":"Gaelic Garden","hex":"#a5b3ab"},{"name":"Gaharā Lāl","hex":"#ac0c20"},{"name":"Gaia","hex":"#d3bc9e"},{"name":"Gaia Stone","hex":"#a4be8d"},{"name":"Gaiety","hex":"#f4e4e5"},{"name":"Gainsboro","hex":"#dcdcdc"},{"name":"Gala Ball","hex":"#785d7a"},{"name":"Gala Pink","hex":"#b04b63"},{"name":"Galactic Civilization","hex":"#442288"},{"name":"Galactic Cruise","hex":"#111188"},{"name":"Galactic Emerald","hex":"#0afa1e"},{"name":"Galactic Federation","hex":"#330077"},{"name":"Galactic Highway","hex":"#3311bb"},{"name":"Galactic Mediator","hex":"#e0dfdb"},{"name":"Galactic Purple","hex":"#472e97"},{"name":"Galactic Tint","hex":"#c0c4c6"},{"name":"Galactic Wonder","hex":"#442255"},{"name":"Galactica","hex":"#c4dde2"},{"name":"Galago","hex":"#95a69f"},{"name":"Galah","hex":"#d28083"},{"name":"Galapagos","hex":"#085f6d"},{"name":"Galapagos Green","hex":"#29685f"},{"name":"Galaxea","hex":"#2e305e"},{"name":"Galaxy","hex":"#4f4a52"},{"name":"Galaxy Blue","hex":"#2d5284"},{"name":"Galaxy Express","hex":"#444499"},{"name":"Galaxy Green","hex":"#79afad"},{"name":"Gale Force","hex":"#35454e"},{"name":"Gale of the Wind","hex":"#007844"},{"name":"Galena","hex":"#64776e"},{"name":"Galenite Blue","hex":"#374b52"},{"name":"Galia Melon","hex":"#8a8342"},{"name":"Gallant Gold","hex":"#a4763c"},{"name":"Gallant Green","hex":"#99aa66"},{"name":"Galleon Blue","hex":"#3f95bf"},{"name":"Galleria Blue","hex":"#8fa4ac"},{"name":"Gallery","hex":"#dcd7d1"},{"name":"Gallery Blue","hex":"#9bbce4"},{"name":"Gallery Green","hex":"#88a385"},{"name":"Gallery Grey","hex":"#c5c2be"},{"name":"Gallery Red","hex":"#935a59"},{"name":"Gallery Taupe","hex":"#d0c5b8"},{"name":"Gallery White","hex":"#eaebe4"},{"name":"Galley Gold","hex":"#d5aa5e"},{"name":"Galliano","hex":"#d8a723"},{"name":"Gallstone Yellow","hex":"#a36629"},{"name":"Galveston Tan","hex":"#e8c8b8"},{"name":"Galway","hex":"#c4ddbb"},{"name":"Galway Bay","hex":"#95a7a4"},{"name":"Gamboge","hex":"#e49b0f"},{"name":"Gamboge Brown","hex":"#996600"},{"name":"Gamboge Yellow","hex":"#e6d058"},{"name":"Gambol Gold","hex":"#e1b047"},{"name":"Game Over","hex":"#7e8181"},{"name":"Gameboy Contrast","hex":"#0f380f"},{"name":"Gameboy Light","hex":"#9bbc0f"},{"name":"Gameboy Screen","hex":"#8bac0f"},{"name":"Gameboy Shade","hex":"#306230"},{"name":"Gamin","hex":"#bfd1af"},{"name":"Gǎn Lǎn Huáng Olive","hex":"#c9ff27"},{"name":"Gǎn Lǎn Lǜ Green","hex":"#658b38"},{"name":"Ganache","hex":"#372b2c"},{"name":"Gangsters Gold","hex":"#ffdd22"},{"name":"Ganon Blue","hex":"#a4e4fc"},{"name":"Ganymede","hex":"#8b7d82"},{"name":"Garbanzo Bean","hex":"#f1d5a5"},{"name":"Garbanzo Paste","hex":"#eec684"},{"name":"Garden","hex":"#9fac98"},{"name":"Garden Aroma","hex":"#9c6989"},{"name":"Garden Bower","hex":"#778679"},{"name":"Garden Club","hex":"#60784f"},{"name":"Garden Country","hex":"#d5c5a8"},{"name":"Garden Cucumber","hex":"#506a48"},{"name":"Garden Dawn","hex":"#f1f8ec"},{"name":"Garden Fairy","hex":"#ccd4ec"},{"name":"Garden Flower","hex":"#a892a8"},{"name":"Garden Fountain","hex":"#729588"},{"name":"Garden Gate","hex":"#dadcc1"},{"name":"Garden Gazebo","hex":"#abc0bb"},{"name":"Garden Glade","hex":"#d9d7a1"},{"name":"Garden Glory","hex":"#ffc1d0"},{"name":"Garden Glow","hex":"#7dcc98"},{"name":"Garden Gnome Red","hex":"#9b2002"},{"name":"Garden Goddess","hex":"#99cea0"},{"name":"Garden Green","hex":"#4e6539"},{"name":"Garden Greenery","hex":"#658369"},{"name":"Garden Grove","hex":"#5e7f57"},{"name":"Garden Hedge","hex":"#6f7d6d"},{"name":"Garden Lattice","hex":"#e1d4b4"},{"name":"Garden Leek","hex":"#d7deac"},{"name":"Garden Lettuce Green","hex":"#87762b"},{"name":"Garden Medley","hex":"#28a873"},{"name":"Garden of Eden","hex":"#7fa771"},{"name":"Garden of Paradise","hex":"#8a8d66"},{"name":"Garden Pansy","hex":"#a890b8"},{"name":"Garden Party","hex":"#e3a4b8"},{"name":"Garden Path","hex":"#424330"},{"name":"Garden Pebble","hex":"#e4e4d5"},{"name":"Garden Picket","hex":"#e4d195"},{"name":"Garden Plum","hex":"#9d8292"},{"name":"Garden Pond","hex":"#afc09e"},{"name":"Garden Promenade","hex":"#a4a99b"},{"name":"Garden Room","hex":"#accfa9"},{"name":"Garden Rose White","hex":"#f7ead4"},{"name":"Garden Salt Green","hex":"#a18b62"},{"name":"Garden Seat","hex":"#ebe6c7"},{"name":"Garden Shadow","hex":"#334400"},{"name":"Garden Shed","hex":"#d6efda"},{"name":"Garden Snail","hex":"#cdb1ab"},{"name":"Garden Spot","hex":"#b1ca95"},{"name":"Garden Sprout","hex":"#ab863a"},{"name":"Garden Statue","hex":"#bfd4c4"},{"name":"Garden Stroll","hex":"#7dc683"},{"name":"Garden Swing","hex":"#8cbd97"},{"name":"Garden Topiary","hex":"#3e524b"},{"name":"Garden Twilight","hex":"#a3bbb3"},{"name":"Garden Variety","hex":"#66bb8d"},{"name":"Garden View","hex":"#89b89a"},{"name":"Garden Violets","hex":"#827799"},{"name":"Garden Vista","hex":"#9fb1ab"},{"name":"Garden Wall","hex":"#aea492"},{"name":"Garden Weed","hex":"#786e38"},{"name":"Gardener Green","hex":"#5e602a"},{"name":"Gardener\'s Soil","hex":"#5c534d"},{"name":"Gardenia","hex":"#f1e8df"},{"name":"Gardening","hex":"#acba8d"},{"name":"Gardens Sericourt","hex":"#337700"},{"name":"Garfield","hex":"#a75429"},{"name":"Gargantua","hex":"#eeee55"},{"name":"Gargoyle","hex":"#abb39e"},{"name":"Gargoyle Gas","hex":"#ffdf46"},{"name":"Garish Blue","hex":"#00a4b1"},{"name":"Garish Green","hex":"#51bf8a"},{"name":"Garland","hex":"#69887b"},{"name":"Garlic Beige","hex":"#b0aaa1"},{"name":"Garlic Butter","hex":"#eddf5e"},{"name":"Garlic Clove","hex":"#e2d7c1"},{"name":"Garlic Head","hex":"#eceacf"},{"name":"Garlic Pesto","hex":"#bfcf00"},{"name":"Garlic Suede","hex":"#cdd2bc"},{"name":"Garlic Toast","hex":"#dddd88"},{"name":"Garnet","hex":"#733635"},{"name":"Garnet Black Green","hex":"#354a41"},{"name":"Garnet Evening","hex":"#763b42"},{"name":"Garnet Rose","hex":"#b04d5d"},{"name":"Garnet Sand","hex":"#cc7446"},{"name":"Garnet Shadow","hex":"#c89095"},{"name":"Garnet Stone Blue","hex":"#384866"},{"name":"Garnish","hex":"#1e9752"},{"name":"Garret Brown","hex":"#756861"},{"name":"Garrison Grey","hex":"#7b8588"},{"name":"Garuda Gold","hex":"#ffbb31"},{"name":"Gas Giant","hex":"#98dcff"},{"name":"Gaslight","hex":"#feffea"},{"name":"Gates of Gold","hex":"#d2935d"},{"name":"Gateway Grey","hex":"#a0a09c"},{"name":"Gateway Pillar","hex":"#b2ac9c"},{"name":"Gathering Field","hex":"#ab8f55"},{"name":"Gathering Place","hex":"#ad9466"},{"name":"Gatsby Brick","hex":"#8e3b2f"},{"name":"Gatsby Glitter","hex":"#eed683"},{"name":"Gauntlet Grey","hex":"#78736e"},{"name":"Gauss Blaster Green","hex":"#84c3aa"},{"name":"Gauzy White","hex":"#e3dbd4"},{"name":"Gazebo Green","hex":"#76826c"},{"name":"Gazebo Grey","hex":"#d1d0cb"},{"name":"Gazelle","hex":"#947e68"},{"name":"Gazpacho","hex":"#c23b22"},{"name":"Gecko","hex":"#9d913c"},{"name":"Gecko\'s Dream","hex":"#669900"},{"name":"Geddy Green","hex":"#aac69a"},{"name":"Gédéon Brown","hex":"#7f4c00"},{"name":"Gedney Green","hex":"#40534e"},{"name":"Geebung","hex":"#c5832e"},{"name":"Gehenna\'s Gold","hex":"#dba674"},{"name":"Geisha Pink","hex":"#dd44ff"},{"name":"Gellibrand","hex":"#b5acb2"},{"name":"Gem","hex":"#4d5b8a"},{"name":"Gem Silica","hex":"#73c4a4"},{"name":"Gem Turquoise","hex":"#53c2c3"},{"name":"Gemini","hex":"#b4d6cb"},{"name":"Gemini Mustard Momento","hex":"#fca750"},{"name":"Gemstone Blue","hex":"#004f6d"},{"name":"Gemstone Green","hex":"#4b6331"},{"name":"Generic Viridian","hex":"#007f66"},{"name":"Genestealer Purple","hex":"#7761ab"},{"name":"Genetic Code","hex":"#18515d"},{"name":"Geneva Green","hex":"#1f7f76"},{"name":"Geneva Morn","hex":"#bab7b8"},{"name":"Genever Green","hex":"#33673f"},{"name":"Genevieve","hex":"#bcc4e0"},{"name":"Gengiana","hex":"#5f4871"},{"name":"Genie","hex":"#3e4364"},{"name":"Genoa","hex":"#31796d"},{"name":"Genoa Lemon","hex":"#fde910"},{"name":"Genteel Blue","hex":"#698eb3"},{"name":"Genteel Lavender","hex":"#e2e6ec"},{"name":"Gentian","hex":"#9079ad"},{"name":"Gentian Blue","hex":"#312297"},{"name":"Gentian Flower","hex":"#3366ff"},{"name":"Gentian Violet","hex":"#57487f"},{"name":"Gentle Aquamarine","hex":"#97cbd2"},{"name":"Gentle Blue","hex":"#cdd2de"},{"name":"Gentle Calm","hex":"#c4cebf"},{"name":"Gentle Caress","hex":"#fcd7ba"},{"name":"Gentle Cold","hex":"#c3ece9"},{"name":"Gentle Dill","hex":"#c3cc6e"},{"name":"Gentle Doe","hex":"#e8b793"},{"name":"Gentle Frost","hex":"#dce0cd"},{"name":"Gentle Giant","hex":"#b3ebe0"},{"name":"Gentle Glow","hex":"#f6e5b9"},{"name":"Gentle Grape","hex":"#908a9b"},{"name":"Gentle Landscape","hex":"#a5ce8f"},{"name":"Gentle Mauve","hex":"#958c9e"},{"name":"Gentle Rain","hex":"#cbc9c5"},{"name":"Gentle Sea","hex":"#b0c8d0"},{"name":"Gentle Sky","hex":"#99bdd2"},{"name":"Gentle Touch","hex":"#e3d5b8"},{"name":"Gentle Wind","hex":"#abd0ea"},{"name":"Gentle Yellow","hex":"#fff5be"},{"name":"Gentleman\'s Suit","hex":"#c1becd"},{"name":"Gentleman\'s Whiskey","hex":"#ca882c"},{"name":"Gentlemann\'s Business Pants","hex":"#f1e68c"},{"name":"Geode","hex":"#4b3f69"},{"name":"Georgia Clay","hex":"#b06144"},{"name":"Georgia On My Mind","hex":"#fdd4c5"},{"name":"Georgia Peach","hex":"#f97272"},{"name":"Georgian Bay","hex":"#22657f"},{"name":"Georgian Leather","hex":"#cf875e"},{"name":"Georgian Pink","hex":"#c6b8b4"},{"name":"Georgian Revival Blue","hex":"#5b8d9f"},{"name":"Georgian Yellow","hex":"#d1974c"},{"name":"Geraldine","hex":"#e77b75"},{"name":"Geranium","hex":"#dc465d"},{"name":"Geranium Bud","hex":"#cfa1c7"},{"name":"Geranium Leaf","hex":"#90ac74"},{"name":"Geranium Pink","hex":"#f6909d"},{"name":"Geranium Red","hex":"#d76968"},{"name":"Gerbera Red","hex":"#f6611a"},{"name":"German Camouflage Beige","hex":"#9b8c7b"},{"name":"German Grey","hex":"#53504e"},{"name":"German Hop","hex":"#89ac27"},{"name":"German Liquorice","hex":"#2e3749"},{"name":"German Mustard","hex":"#cd7a00"},{"name":"Germander Speedwell","hex":"#0094c8"},{"name":"Germania","hex":"#ddc47e"},{"name":"Get Up and Go","hex":"#1a9d49"},{"name":"Getaway","hex":"#ac9b7b"},{"name":"Getting Wet","hex":"#c3dae3"},{"name":"Gettysburg Grey","hex":"#c7c1b7"},{"name":"Geyser","hex":"#c4d7cf"},{"name":"Geyser Basin","hex":"#e3cab5"},{"name":"Geyser Pool","hex":"#a9dce2"},{"name":"Geyser Steam","hex":"#cbd0cf"},{"name":"Ghee Yellow","hex":"#d8bc23"},{"name":"Ghost","hex":"#c0bfc7"},{"name":"Ghost Grey","hex":"#9c9b98"},{"name":"Ghost Pepper","hex":"#c10102"},{"name":"Ghost Ship","hex":"#887b6e"},{"name":"Ghost Town","hex":"#beb6a8"},{"name":"Ghost Whisperer","hex":"#cbd1d0"},{"name":"Ghost White","hex":"#f8f8ff"},{"name":"Ghost Writer","hex":"#bcb7ad"},{"name":"Ghosted","hex":"#e2e0dc"},{"name":"Ghosting","hex":"#cac6ba"},{"name":"Ghostlands Coal","hex":"#113c42"},{"name":"Ghostly","hex":"#a7a09f"},{"name":"Ghostly Green","hex":"#d9d7b8"},{"name":"Ghostly Grey","hex":"#ccccd3"},{"name":"Ghostly Purple","hex":"#7b5d92"},{"name":"Ghostly Tuna","hex":"#e2e6ef"},{"name":"Ghostwaver","hex":"#e2dbdb"},{"name":"Ghoul","hex":"#667744"},{"name":"Giallo","hex":"#f1d236"},{"name":"Giant Cactus Green","hex":"#88763f"},{"name":"Giant Onion","hex":"#665d9e"},{"name":"Giant\'s Club","hex":"#b05c52"},{"name":"Giants Orange","hex":"#fe5a1d"},{"name":"Gibraltar","hex":"#626970"},{"name":"Gibraltar Grey","hex":"#6f6a68"},{"name":"Gibraltar Sea","hex":"#133a54"},{"name":"Gift of the Sea","hex":"#9fc0ce"},{"name":"Gigas","hex":"#564786"},{"name":"Giggle","hex":"#eff0d3"},{"name":"Gilded","hex":"#f4db4f"},{"name":"Gilded Beige","hex":"#b39f8d"},{"name":"Gilded Glamour","hex":"#956841"},{"name":"Gilded Gold","hex":"#b58037"},{"name":"Gilded Leaves","hex":"#eba13c"},{"name":"Gilded Pear","hex":"#c09e6c"},{"name":"Gilneas Grey","hex":"#6c8396"},{"name":"Gimblet","hex":"#b9ad61"},{"name":"Gin","hex":"#d9dfcd"},{"name":"Gin Fizz","hex":"#f8eaca"},{"name":"Gin Still","hex":"#ba8e5a"},{"name":"Gin Tonic","hex":"#ecebe5"},{"name":"Ginger","hex":"#b06500"},{"name":"Ginger Ale","hex":"#c9a86a"},{"name":"Ginger Ale Fizz","hex":"#f5dfbc"},{"name":"Ginger Beer","hex":"#c27f38"},{"name":"Ginger Cream","hex":"#efe0d7"},{"name":"Ginger Crisp","hex":"#ce915a"},{"name":"Ginger Crunch","hex":"#ceaa64"},{"name":"Ginger Dough","hex":"#b06d3b"},{"name":"Ginger Dy","hex":"#97653c"},{"name":"Ginger Flower","hex":"#cf524e"},{"name":"Ginger Gold","hex":"#996251"},{"name":"Ginger Grey Yellow","hex":"#b8a899"},{"name":"Ginger Jar","hex":"#c6a05e"},{"name":"Ginger Lemon Cake","hex":"#f1e991"},{"name":"Ginger Lemon Tea","hex":"#ffffaa"},{"name":"Ginger Milk","hex":"#f7a454"},{"name":"Ginger Peach","hex":"#f9d09f"},{"name":"Ginger Pie","hex":"#9a7d61"},{"name":"Ginger Root","hex":"#c17444"},{"name":"Ginger Root Peel","hex":"#f0c48c"},{"name":"Ginger Rose","hex":"#be8774"},{"name":"Ginger Scent","hex":"#cb8f7b"},{"name":"Ginger Shortbread","hex":"#e3cec6"},{"name":"Ginger Snap","hex":"#8c7266"},{"name":"Ginger Spice","hex":"#b65d48"},{"name":"Ginger Sugar","hex":"#dddace"},{"name":"Ginger Tea","hex":"#b19d77"},{"name":"Ginger Whisper","hex":"#cc8877"},{"name":"Gingerbread","hex":"#8c4a2f"},{"name":"Gingerbread Crumble","hex":"#9c5e33"},{"name":"Gingerbread House","hex":"#ca994e"},{"name":"Gingerbread Latte","hex":"#b39479"},{"name":"Gingerline","hex":"#ffdd11"},{"name":"Gingersnap","hex":"#c79e73"},{"name":"Gingery","hex":"#b06c3e"},{"name":"Gingko","hex":"#a3c899"},{"name":"Gingko Leaf","hex":"#b3a156"},{"name":"Gingko Tree","hex":"#918260"},{"name":"Ginkgo Green","hex":"#a5aca4"},{"name":"Ginnezumi","hex":"#97867c"},{"name":"Ginninderra","hex":"#b3d5c0"},{"name":"Ginseng","hex":"#f3e9bd"},{"name":"Ginseng Root","hex":"#e6cdb5"},{"name":"Ginshu","hex":"#bc2d29"},{"name":"Gio Ponti Green","hex":"#b3ceab"},{"name":"Giraffe","hex":"#fefe33"},{"name":"Girl Power","hex":"#d39bcb"},{"name":"Girl Talk","hex":"#e4c7c8"},{"name":"Girlie","hex":"#ffd3cf"},{"name":"Girls in Blue","hex":"#5a82ac"},{"name":"Girls Night Out","hex":"#ff69b4"},{"name":"Girly Nursery","hex":"#f6e6e5"},{"name":"Give Me Your Love","hex":"#ee88ff"},{"name":"Givry","hex":"#ebd4ae"},{"name":"Gizmo","hex":"#d4a1b5"},{"name":"Glacial","hex":"#d1dad7"},{"name":"Glacial Green","hex":"#6fb7a8"},{"name":"Glacial Ice","hex":"#eae9e7"},{"name":"Glacial Stream","hex":"#bcd8e2"},{"name":"Glacial Tint","hex":"#eaf2ed"},{"name":"Glacial Water Green","hex":"#c9ead4"},{"name":"Glacier","hex":"#78b1bf"},{"name":"Glacier Bay","hex":"#def2ee"},{"name":"Glacier Blue","hex":"#a9c1c0"},{"name":"Glacier Green","hex":"#3e9eac"},{"name":"Glacier Grey","hex":"#bbbcbd"},{"name":"Glacier Ivy","hex":"#eaf3e6"},{"name":"Glacier Lake","hex":"#62b4c0"},{"name":"Glacier Pearl","hex":"#d1d2dc"},{"name":"Glacier Point","hex":"#b3d8e5"},{"name":"Glacier Valley","hex":"#e2e3d7"},{"name":"Glad Yellow","hex":"#f5e1ac"},{"name":"Glade","hex":"#9ca687"},{"name":"Glade Green","hex":"#5f8151"},{"name":"Gladeye","hex":"#7a8ca6"},{"name":"Gladiator Grey","hex":"#6e6c5e"},{"name":"Gladiator Leather","hex":"#a95c3e"},{"name":"Gladiola","hex":"#d54f43"},{"name":"Gladiola Blue","hex":"#6370b6"},{"name":"Gladiola Violet","hex":"#6e5178"},{"name":"Glam","hex":"#cf748c"},{"name":"Glamorgan Sausage","hex":"#dacba7"},{"name":"Glamorous","hex":"#b74e64"},{"name":"Glamorous White","hex":"#f0eae0"},{"name":"Glamour","hex":"#db9da7"},{"name":"Glamour Green","hex":"#007488"},{"name":"Glamour Pink","hex":"#ff1dcd"},{"name":"Glamour White","hex":"#fffcec"},{"name":"Glasgow Fog","hex":"#bdb8ae"},{"name":"Glass Bead","hex":"#c7bec4"},{"name":"Glass Bottle","hex":"#93ba59"},{"name":"Glass Bull","hex":"#880000"},{"name":"Glass Green","hex":"#dcdfb0"},{"name":"Glass Jar Blue","hex":"#20b2aa"},{"name":"Glass Of Milk","hex":"#fcf3dd"},{"name":"Glass Sand","hex":"#cdb69b"},{"name":"Glass Sapphire","hex":"#587b9b"},{"name":"Glass Sea","hex":"#095d75"},{"name":"Glass Tile","hex":"#cdd0c0"},{"name":"Glass Violet","hex":"#b7a2cc"},{"name":"Glassine","hex":"#d7e2e5"},{"name":"Glassmith","hex":"#46b5c0"},{"name":"Glassware","hex":"#d1d9da"},{"name":"Glaucous","hex":"#6082b6"},{"name":"Glaucous Green","hex":"#b3e8c2"},{"name":"Glaze White","hex":"#eae1df"},{"name":"Glazed Carrot","hex":"#e9692c"},{"name":"Glazed Chestnut","hex":"#967217"},{"name":"Glazed Ginger","hex":"#a15c30"},{"name":"Glazed Granite","hex":"#5b5e61"},{"name":"Glazed Pears","hex":"#efe3d2"},{"name":"Glazed Pecan","hex":"#d19564"},{"name":"Glazed Persimmon","hex":"#d34e36"},{"name":"Glazed Pot","hex":"#ad7356"},{"name":"Glazed Raspberry","hex":"#a44b62"},{"name":"Glazed Ringlet","hex":"#89626d"},{"name":"Glazed Sugar","hex":"#ffdccc"},{"name":"Gleam","hex":"#b9cba3"},{"name":"Gleaming Shells","hex":"#f8ded1"},{"name":"Gleeful","hex":"#9dbb7d"},{"name":"Glen","hex":"#4aac72"},{"name":"Glen Falls","hex":"#acb8c1"},{"name":"Glendale","hex":"#a1bb8b"},{"name":"Glenwood Green","hex":"#a7d3b7"},{"name":"Glide Time","hex":"#5d6f80"},{"name":"Glimmer","hex":"#e1e8e3"},{"name":"Glimpse","hex":"#4fb9ce"},{"name":"Glimpse into Space","hex":"#121210"},{"name":"Glimpse of Pink","hex":"#fff3f4"},{"name":"Glimpse of Void","hex":"#335588"},{"name":"Glisten Green","hex":"#f2efdc"},{"name":"Glisten Yellow","hex":"#f5e6ac"},{"name":"Glistening","hex":"#eed288"},{"name":"Glistening Dawn","hex":"#f6ba25"},{"name":"Glistening Grey","hex":"#b1b3be"},{"name":"Glitch","hex":"#2c5463"},{"name":"Glitchy Shader Blue","hex":"#99ffff"},{"name":"Glitter","hex":"#e6e8fa"},{"name":"Glitter is not Gold","hex":"#fedc57"},{"name":"Glitter Lake","hex":"#44bbff"},{"name":"Glitter Shower","hex":"#88ffff"},{"name":"Glitter Yellow","hex":"#f8d75a"},{"name":"Glitterati","hex":"#944a63"},{"name":"Glittering Gemstone","hex":"#dec0e2"},{"name":"Glittering Sun","hex":"#d3ad77"},{"name":"Glittery Glow","hex":"#eeeddb"},{"name":"Glittery Yellow","hex":"#f9eecd"},{"name":"Glitz and Glamour","hex":"#965f73"},{"name":"Glitzy Gold","hex":"#d6a02b"},{"name":"Glitzy Red","hex":"#af413b"},{"name":"Global Green","hex":"#696e51"},{"name":"Global Warming","hex":"#f1d7d3"},{"name":"Globe Artichoke","hex":"#5f6c3c"},{"name":"Globe Thistle","hex":"#2e0329"},{"name":"Globe Thistle Grey Rose","hex":"#998d8d"},{"name":"Gloomy Blue","hex":"#3c416a"},{"name":"Gloomy Purple","hex":"#8756e4"},{"name":"Gloomy Sea","hex":"#4a657a"},{"name":"Glorious Gold","hex":"#cba956"},{"name":"Glorious Green Glitter","hex":"#aaee11"},{"name":"Glorious Sunset","hex":"#f88517"},{"name":"Glossy Black","hex":"#110011"},{"name":"Glossy Gold","hex":"#ffdd77"},{"name":"Glossy Grape","hex":"#ab92b3"},{"name":"Glossy Kiss","hex":"#eee3de"},{"name":"Glossy Olive","hex":"#636340"},{"name":"Glow","hex":"#f9f2da"},{"name":"Glow in the Dark","hex":"#befdb7"},{"name":"Glow Pink","hex":"#d8979e"},{"name":"Glow Worm","hex":"#bed565"},{"name":"Glowing Brake Disc","hex":"#ee4444"},{"name":"Glowing Coals","hex":"#bc4d39"},{"name":"Glowing Firelight","hex":"#af5941"},{"name":"Glowing Lantern","hex":"#fbb736"},{"name":"Glowing Meteor","hex":"#ee4400"},{"name":"Glowing Scarlet","hex":"#bd4649"},{"name":"Glowlight","hex":"#fff6b9"},{"name":"Gloxinia","hex":"#693162"},{"name":"Gluon Grey","hex":"#1a1b1c"},{"name":"Gluten","hex":"#ddcc66"},{"name":"Gnarls Green","hex":"#00754b"},{"name":"Gnocchi Beige","hex":"#ffeebb"},{"name":"Gnome","hex":"#81a19b"},{"name":"Gnome Green","hex":"#adc484"},{"name":"Gnu Tan","hex":"#b09f84"},{"name":"Go Alpha","hex":"#007f87"},{"name":"Go Bananas","hex":"#f7ca50"},{"name":"Go Ben","hex":"#786e4c"},{"name":"Go Go Glow","hex":"#fcecd5"},{"name":"Go Go Green","hex":"#008a7d"},{"name":"Go Go Lime","hex":"#c6be6b"},{"name":"Go Go Mango","hex":"#feb87e"},{"name":"Go Go Pink","hex":"#fdd8d4"},{"name":"Go Green!","hex":"#00ab66"},{"name":"Go To Grey","hex":"#dcd8d7"},{"name":"Goat","hex":"#a89a91"},{"name":"Gobelin Mauve","hex":"#5e5a6a"},{"name":"Gobi Beige","hex":"#ebdace"},{"name":"Gobi Desert","hex":"#cdbba2"},{"name":"Gobi Sand","hex":"#d4aa6f"},{"name":"Gobi Tan","hex":"#bba587"},{"name":"Goblin","hex":"#34533d"},{"name":"Goblin Blue","hex":"#5f7278"},{"name":"Goblin Eyes","hex":"#eb8931"},{"name":"Goblin Green","hex":"#76ff7a"},{"name":"Goblin Warboss","hex":"#4efd54"},{"name":"Gobo Brown","hex":"#635147"},{"name":"Gochujang Red","hex":"#770000"},{"name":"God of Nights","hex":"#550066"},{"name":"God of Rain","hex":"#4466cc"},{"name":"God-Given","hex":"#faf4e0"},{"name":"God’s Own Junkyard Pink","hex":"#f56991"},{"name":"Goddess","hex":"#d0e1e8"},{"name":"Goddess of Dawn","hex":"#904c6f"},{"name":"Godzilla","hex":"#3c4d03"},{"name":"Gogo Blue","hex":"#0087a1"},{"name":"Going Grey","hex":"#83807a"},{"name":"Going Rouge","hex":"#ab858f"},{"name":"Goji Berry","hex":"#cc142f"},{"name":"Goku Orange","hex":"#f0833a"},{"name":"Gold","hex":"#ffd700"},{"name":"Gold Abundance","hex":"#f3bc00"},{"name":"Gold Black","hex":"#2a2424"},{"name":"Gold Buff","hex":"#ecc481"},{"name":"Gold Bullion","hex":"#eedd99"},{"name":"Gold Buttercup","hex":"#ffe8bb"},{"name":"Gold Canyon","hex":"#ae9769"},{"name":"Gold Coast","hex":"#c78538"},{"name":"Gold Crest","hex":"#df9938"},{"name":"Gold Deposit","hex":"#e0ce57"},{"name":"Gold Digger","hex":"#d1b075"},{"name":"Gold Drop","hex":"#d56c30"},{"name":"Gold Dust","hex":"#a4803f"},{"name":"Gold Earth","hex":"#db9663"},{"name":"Gold Estate","hex":"#977a41"},{"name":"Gold Finch","hex":"#bc9f60"},{"name":"Gold Flame","hex":"#b44f22"},{"name":"Gold Foil","hex":"#d99f4d"},{"name":"Gold Fusion","hex":"#eb9600"},{"name":"Gold Gleam","hex":"#cfb352"},{"name":"Gold Grillz","hex":"#ece086"},{"name":"Gold Hearted","hex":"#e6c28c"},{"name":"Gold Leaf","hex":"#edbb26"},{"name":"Gold Metal","hex":"#b17743"},{"name":"Gold of Midas","hex":"#ffeac7"},{"name":"Gold Orange","hex":"#db7210"},{"name":"Gold Ore","hex":"#ecbc14"},{"name":"Gold Pheasant","hex":"#c6795f"},{"name":"Gold Plate","hex":"#e6bd8f"},{"name":"Gold Plated","hex":"#b0834f"},{"name":"Gold Ransom","hex":"#b39260"},{"name":"Gold Red","hex":"#eb5406"},{"name":"Gold Rush","hex":"#c4a777"},{"name":"Gold Sand","hex":"#f7e5a9"},{"name":"Gold Season","hex":"#b19971"},{"name":"Gold Sparkle","hex":"#786b3d"},{"name":"Gold Spell","hex":"#c19d61"},{"name":"Gold Spike","hex":"#907047"},{"name":"Gold Strand","hex":"#f3dfa6"},{"name":"Gold Taffeta","hex":"#bb9a39"},{"name":"Gold Tangiers","hex":"#9e865e"},{"name":"Gold Thread","hex":"#fee8b0"},{"name":"Gold Tint","hex":"#dec283"},{"name":"Gold Tips","hex":"#e2b227"},{"name":"Gold Tooth","hex":"#dbb40c"},{"name":"Gold Torch","hex":"#bd955e"},{"name":"Gold Tweed","hex":"#c9ab73"},{"name":"Gold Varnish Brown","hex":"#b95e33"},{"name":"Gold Vein","hex":"#d6b956"},{"name":"Gold Vessel","hex":"#eaba8a"},{"name":"Gold Wash","hex":"#d4c19e"},{"name":"Gold Winged","hex":"#e6d682"},{"name":"Gold\'s Great Touch","hex":"#ffc265"},{"name":"Goldbrown","hex":"#9c8a53"},{"name":"Golden","hex":"#f5bf03"},{"name":"Golden Age","hex":"#ceab77"},{"name":"Golden Age Gilt","hex":"#cea644"},{"name":"Golden Appeal","hex":"#e6be59"},{"name":"Golden Apples","hex":"#f3d74f"},{"name":"Golden Apricot","hex":"#dba950"},{"name":"Golden Aura","hex":"#d29e68"},{"name":"Golden Aurelia","hex":"#ffee77"},{"name":"Golden Banner","hex":"#fcc62a"},{"name":"Golden Bear","hex":"#ba985f"},{"name":"Golden Beige","hex":"#cea277"},{"name":"Golden Bell","hex":"#ca8136"},{"name":"Golden Beryl Yellow","hex":"#d9a400"},{"name":"Golden Blond","hex":"#ccaa55"},{"name":"Golden Blonde","hex":"#efe17e"},{"name":"Golden Blood","hex":"#ff1155"},{"name":"Golden Boy","hex":"#ffdd44"},{"name":"Golden Brown","hex":"#b27a01"},{"name":"Golden Buddha Belly","hex":"#ffcc22"},{"name":"Golden Buff","hex":"#f8e6c8"},{"name":"Golden Cadillac","hex":"#ac864b"},{"name":"Golden Cartridge","hex":"#bdb76b"},{"name":"Golden Chalice","hex":"#e7c068"},{"name":"Golden Chandelier","hex":"#dddd11"},{"name":"Golden Chime","hex":"#eeb574"},{"name":"Golden Churro","hex":"#f4ce74"},{"name":"Golden City Moon","hex":"#ecc799"},{"name":"Golden Coin","hex":"#fcd975"},{"name":"Golden Corn","hex":"#f0b672"},{"name":"Golden Cream","hex":"#f7b768"},{"name":"Golden Crescent","hex":"#ecc909"},{"name":"Golden Crest","hex":"#f6ca69"},{"name":"Golden Crested Wren","hex":"#ccddbb"},{"name":"Golden Cricket","hex":"#d7b056"},{"name":"Golden Delicious","hex":"#d2d88f"},{"name":"Golden Dream","hex":"#f1cc2b"},{"name":"Golden Ecru","hex":"#d8c39f"},{"name":"Golden Egg","hex":"#b29155"},{"name":"Golden Elm","hex":"#bdd5b1"},{"name":"Golden Field","hex":"#c39e44"},{"name":"Golden Fizz","hex":"#ebde31"},{"name":"Golden Fleece","hex":"#edd9aa"},{"name":"Golden Fog","hex":"#f0ead2"},{"name":"Golden Foil","hex":"#cccc00"},{"name":"Golden Foliage","hex":"#bdd043"},{"name":"Golden Fragrance","hex":"#eeee99"},{"name":"Golden Frame","hex":"#e2b31b"},{"name":"Golden Freesia","hex":"#876f4d"},{"name":"Golden Gate","hex":"#d9c09c"},{"name":"Golden Gate Bridge","hex":"#c0362d"},{"name":"Golden Ginkgo","hex":"#f9f525"},{"name":"Golden Glam","hex":"#eebb44"},{"name":"Golden Glitter","hex":"#fbe573"},{"name":"Golden Glitter Storm","hex":"#ead771"},{"name":"Golden Glove","hex":"#9e7551"},{"name":"Golden Glow","hex":"#f9d77e"},{"name":"Golden Grain","hex":"#c59137"},{"name":"Golden Granola","hex":"#b8996b"},{"name":"Golden Grass","hex":"#daa631"},{"name":"Golden Green","hex":"#bdb369"},{"name":"Golden Griffon","hex":"#a99058"},{"name":"Golden Guernsey","hex":"#e1c3bb"},{"name":"Golden Gun","hex":"#dddd00"},{"name":"Golden Hamster","hex":"#da9e38"},{"name":"Golden Handshake","hex":"#ffcc44"},{"name":"Golden Harmony","hex":"#9f8046"},{"name":"Golden Harvest","hex":"#cccc11"},{"name":"Golden Haystack","hex":"#eddfc1"},{"name":"Golden Haze","hex":"#fcd896"},{"name":"Golden Hermes","hex":"#ffffbb"},{"name":"Golden Hind","hex":"#a37111"},{"name":"Golden History","hex":"#bb993a"},{"name":"Golden Hominy","hex":"#edc283"},{"name":"Golden Honey Suckle","hex":"#ffdb29"},{"name":"Golden Hop","hex":"#cfdd7b"},{"name":"Golden Hour","hex":"#f1b457"},{"name":"Golden Impression","hex":"#ffefcb"},{"name":"Golden Key","hex":"#dd9911"},{"name":"Golden Kingdom","hex":"#e0c84b"},{"name":"Golden Kiwi","hex":"#f2cf34"},{"name":"Golden Koi","hex":"#eaa34b"},{"name":"Golden Lake","hex":"#d8c7a2"},{"name":"Golden Leaf","hex":"#c48b42"},{"name":"Golden Lime","hex":"#928d35"},{"name":"Golden Lion","hex":"#f3ca6c"},{"name":"Golden Lion Tamarin","hex":"#ca602a"},{"name":"Golden Lock","hex":"#f5bc1d"},{"name":"Golden Lotus","hex":"#e9dbc4"},{"name":"Golden Marguerite","hex":"#fdcc37"},{"name":"Golden Mary","hex":"#f0be3a"},{"name":"Golden Mist","hex":"#d4c990"},{"name":"Golden Moray Eel","hex":"#ffcf60"},{"name":"Golden Mushroom","hex":"#f4e8d1"},{"name":"Golden Nectar","hex":"#ffda68"},{"name":"Golden Nugget","hex":"#d78e48"},{"name":"Golden Oak","hex":"#a96a28"},{"name":"Golden Oat Coloured","hex":"#ecbe91"},{"name":"Golden Ochre","hex":"#c56f3b"},{"name":"Golden Olive","hex":"#ab9c40"},{"name":"Golden Opportunity","hex":"#f7c070"},{"name":"Golden Orange","hex":"#d7942d"},{"name":"Golden Palm","hex":"#a58705"},{"name":"Golden Passionfruit","hex":"#b4bb31"},{"name":"Golden Pastel","hex":"#f4d9b9"},{"name":"Golden Patina","hex":"#e4aa76"},{"name":"Golden Period","hex":"#fedb2d"},{"name":"Golden Pheasant","hex":"#cf9632"},{"name":"Golden Pilsner","hex":"#956f3f"},{"name":"Golden Plumeria","hex":"#fbd073"},{"name":"Golden Pop","hex":"#ebcebd"},{"name":"Golden Poppy","hex":"#fcc200"},{"name":"Golden Promise","hex":"#ffc64d"},{"name":"Golden Pumpkin","hex":"#ca884b"},{"name":"Golden Quartz Ochre","hex":"#aa8a58"},{"name":"Golden Rain Yellow","hex":"#ffb657"},{"name":"Golden Raspberry","hex":"#f8d878"},{"name":"Golden Rays","hex":"#f6da74"},{"name":"Golden Relic","hex":"#e8ce49"},{"name":"Golden Retriever","hex":"#eedec7"},{"name":"Golden Rice","hex":"#e3d474"},{"name":"Golden Rod","hex":"#e1ae20"},{"name":"Golden Rule","hex":"#daae49"},{"name":"Golden Sage","hex":"#b09d73"},{"name":"Golden Samovar","hex":"#dfaf2b"},{"name":"Golden Sand","hex":"#eace6a"},{"name":"Golden Scarab","hex":"#eddb8e"},{"name":"Golden Schnitzel","hex":"#ddbb11"},{"name":"Golden Slumber","hex":"#b98841"},{"name":"Golden Snitch","hex":"#f1e346"},{"name":"Golden Spell","hex":"#fecc36"},{"name":"Golden Spice","hex":"#c6973f"},{"name":"Golden Sprinkles","hex":"#f6d263"},{"name":"Golden Staff","hex":"#f7eb83"},{"name":"Golden Straw","hex":"#f5edae"},{"name":"Golden Summer","hex":"#816945"},{"name":"Golden Syrup","hex":"#ebd8b3"},{"name":"Golden Tainoi","hex":"#ffc152"},{"name":"Golden Talisman","hex":"#e9c89b"},{"name":"Golden Thistle Yellow","hex":"#caa375"},{"name":"Golden Thread","hex":"#e8c47a"},{"name":"Golden Wash","hex":"#fffec6"},{"name":"Golden Weave","hex":"#eadcc0"},{"name":"Golden Week","hex":"#ecd251"},{"name":"Golden West","hex":"#e9ca94"},{"name":"Golden Yarrow","hex":"#e2c74f"},{"name":"Golden Yellow","hex":"#ffdf00"},{"name":"Goldenrod","hex":"#fdcb18"},{"name":"Goldenrod Field","hex":"#f0b053"},{"name":"Goldenrod Tea","hex":"#a17841"},{"name":"Goldenrod Yellow","hex":"#ffce8f"},{"name":"Goldfinch","hex":"#f8e462"},{"name":"Goldfinger","hex":"#eebb11"},{"name":"Goldfish","hex":"#f2ad62"},{"name":"Goldie","hex":"#c89d3f"},{"name":"Goldie Oldie","hex":"#baad75"},{"name":"Goldilocks","hex":"#fff39a"},{"name":"Goldsmith","hex":"#eeb550"},{"name":"Goldvreneli 1882","hex":"#e7de54"},{"name":"Golem","hex":"#836e59"},{"name":"Golf Blazer","hex":"#53a391"},{"name":"Golf Course","hex":"#5a9e4b"},{"name":"Golf Day","hex":"#5a8b3f"},{"name":"Golf Green","hex":"#009b75"},{"name":"Golfer Green","hex":"#5e6841"},{"name":"Golgfag Brown","hex":"#d77e70"},{"name":"Goluboy Blue","hex":"#8bb9dd"},{"name":"Gomashio Yellow","hex":"#cc9933"},{"name":"Gondola","hex":"#373332"},{"name":"Gondolier","hex":"#5db1c5"},{"name":"Gone Giddy","hex":"#d9c737"},{"name":"Gonzo Violet","hex":"#5d06e9"},{"name":"Good as Gold","hex":"#d3ba75"},{"name":"Good Graces","hex":"#f3f0d6"},{"name":"Good Karma","hex":"#333c76"},{"name":"Good Life","hex":"#c49e69"},{"name":"Good Luck","hex":"#499674"},{"name":"Good Luck Charm","hex":"#86c994"},{"name":"Good Morning","hex":"#fcfcda"},{"name":"Good Morning Akihabara","hex":"#f4ead5"},{"name":"Good Night!","hex":"#46565f"},{"name":"Good Samaritan","hex":"#3f6782"},{"name":"Good-Looking","hex":"#edd2a7"},{"name":"Goodbye Kiss","hex":"#d9cac3"},{"name":"Goody Gumdrop","hex":"#ccd87a"},{"name":"Goody Two Shoes","hex":"#c2ba8e"},{"name":"Goose Bill","hex":"#ffba80"},{"name":"Goose Down","hex":"#f4e7df"},{"name":"Goose Pond Green","hex":"#629b92"},{"name":"Goose Wing Grey","hex":"#a89dac"},{"name":"Gooseberry","hex":"#a23f5d"},{"name":"Gooseberry Fool","hex":"#acb75f"},{"name":"Gooseberry Yellow","hex":"#c7a94a"},{"name":"Gorā White","hex":"#f0f0e0"},{"name":"Gordal Olive","hex":"#bf852b"},{"name":"Gordons Green","hex":"#29332b"},{"name":"Gorgeous Green","hex":"#287c37"},{"name":"Gorgeous Hydrangea","hex":"#a495cb"},{"name":"Gorgeous White","hex":"#e7dbd3"},{"name":"Gorgonzola Blue","hex":"#4455cc"},{"name":"Gorse","hex":"#fde336"},{"name":"Gorse Yellow Orange","hex":"#e99a3c"},{"name":"Gorthor Brown","hex":"#654741"},{"name":"Gory Movie","hex":"#b42435"},{"name":"Gory Red","hex":"#a30800"},{"name":"Goshawk Grey","hex":"#444444"},{"name":"Gosling","hex":"#857668"},{"name":"Gossamer","hex":"#399f86"},{"name":"Gossamer Green","hex":"#b2cfbe"},{"name":"Gossamer Pink","hex":"#fac8c3"},{"name":"Gossamer Veil","hex":"#d3cec4"},{"name":"Gossamer Wings","hex":"#e8eee9"},{"name":"Gossip","hex":"#9fd385"},{"name":"Gotham","hex":"#807872"},{"name":"Gotham Grey","hex":"#8a9192"},{"name":"Gothic","hex":"#698890"},{"name":"Gothic Amethyst","hex":"#a38b93"},{"name":"Gothic Gold","hex":"#bb852f"},{"name":"Gothic Grape","hex":"#473951"},{"name":"Gothic Olive","hex":"#857555"},{"name":"Gothic Purple","hex":"#92838a"},{"name":"Gothic Revival Green","hex":"#a0a160"},{"name":"Gothic Spire","hex":"#7c6b6f"},{"name":"Gotta Have It","hex":"#d0c2b4"},{"name":"Gouda Gold","hex":"#eecc11"},{"name":"Goulash","hex":"#8d6449"},{"name":"Gould Blue","hex":"#7d9ea2"},{"name":"Gould Gold","hex":"#bc9d70"},{"name":"Gourmet Honey","hex":"#e3cba8"},{"name":"Gourmet Mushroom","hex":"#968d8c"},{"name":"Government Green","hex":"#32493e"},{"name":"Governor Bay","hex":"#51559b"},{"name":"Graceful","hex":"#a8c0ce"},{"name":"Graceful Ballerina","hex":"#dd897c"},{"name":"Graceful Flower","hex":"#bddfb2"},{"name":"Graceful Garden","hex":"#cba9d0"},{"name":"Graceful Gazelle","hex":"#a78a50"},{"name":"Graceful Green","hex":"#acb7a8"},{"name":"Graceful Grey","hex":"#beb6ac"},{"name":"Graceful Mint","hex":"#daeed5"},{"name":"Graceland Grass","hex":"#546c46"},{"name":"Gracilis","hex":"#c4d5cb"},{"name":"Gracious","hex":"#f8edd7"},{"name":"Gracious Glow","hex":"#bab078"},{"name":"Gracious Rose","hex":"#e3b7b1"},{"name":"Graham Cracker","hex":"#c0a480"},{"name":"Graham Crust","hex":"#806240"},{"name":"Grain Brown","hex":"#cab8a2"},{"name":"Grain Mill","hex":"#d8c095"},{"name":"Grain of Rice","hex":"#dfd2c0"},{"name":"Grain of Salt","hex":"#d8dbe1"},{"name":"Grain White","hex":"#efe3d8"},{"name":"Grainfield","hex":"#b79e66"},{"name":"Gram\'s Hair","hex":"#f5f6f7"},{"name":"Gramp\'s Tea Cup","hex":"#e9dec8"},{"name":"Gramps Shoehorn","hex":"#a3896c"},{"name":"Gran Torino Red","hex":"#ee3300"},{"name":"Granada Sky","hex":"#5d81bb"},{"name":"Granary Gold","hex":"#e99f4c"},{"name":"Grand Avenue","hex":"#665a48"},{"name":"Grand Bleu","hex":"#015482"},{"name":"Grand Canal","hex":"#3c797d"},{"name":"Grand Casino Gold","hex":"#edcd62"},{"name":"Grand Duke","hex":"#cb5c45"},{"name":"Grand Grape","hex":"#645764"},{"name":"Grand Gusto","hex":"#86bb9d"},{"name":"Grand Heron","hex":"#ecece1"},{"name":"Grand Piano","hex":"#d8d0bd"},{"name":"Grand Plum","hex":"#6c5657"},{"name":"Grand Poobah","hex":"#864764"},{"name":"Grand Purple","hex":"#534778"},{"name":"Grand Rapids","hex":"#38707e"},{"name":"Grand Soiree","hex":"#d9c2a8"},{"name":"Grand Sunset","hex":"#c38d87"},{"name":"Grand Valley","hex":"#8dc07c"},{"name":"Grandeur Plum","hex":"#92576f"},{"name":"Grandiflora Rose","hex":"#e0ebaf"},{"name":"Grandiose","hex":"#caa84c"},{"name":"Grandis","hex":"#ffcd73"},{"name":"Grandma\'s Cameo","hex":"#f7e7dd"},{"name":"Grandma\'s Pink Tiles","hex":"#e0b8c0"},{"name":"Grandview","hex":"#6b927f"},{"name":"Grange Hall","hex":"#857767"},{"name":"Granita","hex":"#b62758"},{"name":"Granite","hex":"#746a5e"},{"name":"Granite Black","hex":"#313238"},{"name":"Granite Boulder","hex":"#816f6b"},{"name":"Granite Brown","hex":"#3d2d24"},{"name":"Granite Canyon","hex":"#6c6f78"},{"name":"Granite Dust","hex":"#d7cec4"},{"name":"Granite Falls","hex":"#638496"},{"name":"Granite Green","hex":"#8b8265"},{"name":"Granite Grey","hex":"#6b6869"},{"name":"Granite Peak","hex":"#606b75"},{"name":"Granitine","hex":"#c5c4c1"},{"name":"Granivorous","hex":"#d0b690"},{"name":"Granny Apple","hex":"#c5e7cd"},{"name":"Granny Smith","hex":"#7b948c"},{"name":"Granny Smith Apple","hex":"#9de093"},{"name":"Granola","hex":"#f5ce9f"},{"name":"Granrojo Jellyfish","hex":"#9e6858"},{"name":"Grant Drab","hex":"#8f8461"},{"name":"Grant Grey","hex":"#918f8a"},{"name":"Grant Village","hex":"#6c90b2"},{"name":"Grant Wood Ivy","hex":"#a8b989"},{"name":"Granular Limestone","hex":"#e3e0da"},{"name":"Granulated Sugar","hex":"#fffdf2"},{"name":"Grape","hex":"#6c3461"},{"name":"Grape Arbor","hex":"#a598c7"},{"name":"Grape Blue","hex":"#24486c"},{"name":"Grape Candy","hex":"#905284"},{"name":"Grape Cassata","hex":"#dfe384"},{"name":"Grape Compote","hex":"#725f7f"},{"name":"Grape Creme","hex":"#bebbbb"},{"name":"Grape Expectations","hex":"#6a587e"},{"name":"Grape Fizz","hex":"#64435f"},{"name":"Grape Gatsby","hex":"#a19abd"},{"name":"Grape Glimmer","hex":"#dccae0"},{"name":"Grape Green","hex":"#a8e4a0"},{"name":"Grape Grey","hex":"#6d6166"},{"name":"Grape Harvest","hex":"#807697"},{"name":"Grape Haze","hex":"#606a88"},{"name":"Grape Hyacinth","hex":"#5533cc"},{"name":"Grape Illusion","hex":"#b4a6d5"},{"name":"Grape Ivy","hex":"#979ac4"},{"name":"Grape Jam","hex":"#7f779a"},{"name":"Grape Jelly","hex":"#7e667f"},{"name":"Grape Juice","hex":"#772f6c"},{"name":"Grape Kiss","hex":"#82476f"},{"name":"Grape Lavender","hex":"#c2c4d4"},{"name":"Grape Leaf","hex":"#5a5749"},{"name":"Grape Leaves","hex":"#576049"},{"name":"Grape Mist","hex":"#c5c0c9"},{"name":"Grape Nectar","hex":"#8d5c75"},{"name":"Grape Oil Green","hex":"#d3d9ce"},{"name":"Grape Parfait","hex":"#8677a9"},{"name":"Grape Popsicle","hex":"#60406d"},{"name":"Grape Purple","hex":"#5d1451"},{"name":"Grape Riot","hex":"#9b4682"},{"name":"Grape Royale","hex":"#522f57"},{"name":"Grape Shake","hex":"#886971"},{"name":"Grape Smoke","hex":"#b69abc"},{"name":"Grape Soda","hex":"#ae94a6"},{"name":"Grape Taffy","hex":"#f4daf1"},{"name":"Grape Vine","hex":"#797f5a"},{"name":"Grape Wine","hex":"#64344b"},{"name":"Grape\'s Treasure","hex":"#beaecf"},{"name":"Grapeade","hex":"#aa9fb2"},{"name":"Grapefruit","hex":"#fd5956"},{"name":"Grapefruit Juice","hex":"#ee6d8a"},{"name":"Grapefruit Pulp","hex":"#fe6f5e"},{"name":"Grapefruit Yellow","hex":"#dfa01a"},{"name":"Grapemist","hex":"#8398ca"},{"name":"Grapes of Italy","hex":"#714a8b"},{"name":"Grapes of Wrath","hex":"#58424c"},{"name":"Grapeshot","hex":"#71384b"},{"name":"Grapest","hex":"#880066"},{"name":"Grapevine","hex":"#b194a6"},{"name":"Grapevine Canyon","hex":"#62534f"},{"name":"Grapewood","hex":"#4c475e"},{"name":"Graphic Charcoal","hex":"#5c5e5f"},{"name":"Graphic Grape","hex":"#824e78"},{"name":"Graphical 80\'s Sky","hex":"#0000fc"},{"name":"Graphite","hex":"#383428"},{"name":"Graphite Black","hex":"#262a2b"},{"name":"Graphite Black Green","hex":"#32494b"},{"name":"Graphite Grey Green","hex":"#7c7666"},{"name":"Grapple","hex":"#92786a"},{"name":"Grapy","hex":"#786e70"},{"name":"Grasping Grass","hex":"#92b300"},{"name":"Grass","hex":"#5cac2d"},{"name":"Grass Blade","hex":"#636f46"},{"name":"Grass Cloth","hex":"#b8b97e"},{"name":"Grass Court","hex":"#088d46"},{"name":"Grass Daisy","hex":"#ceb02a"},{"name":"Grass Green","hex":"#3f9b0b"},{"name":"Grass Pink Orchid","hex":"#ca84fc"},{"name":"Grass Root","hex":"#c3c175"},{"name":"Grass Sands","hex":"#a1afa0"},{"name":"Grass Skirt","hex":"#e2dac2"},{"name":"Grass Stain Green","hex":"#c0fb2d"},{"name":"Grass Valley","hex":"#f4f7ee"},{"name":"Grasshopper","hex":"#77824a"},{"name":"Grasshopper Wing","hex":"#87866f"},{"name":"Grassland","hex":"#c1bca7"},{"name":"Grasslands","hex":"#407548"},{"name":"Grassroots","hex":"#d8c475"},{"name":"Grassy Field","hex":"#5c7d47"},{"name":"Grassy Glade","hex":"#d8ddca"},{"name":"Grassy Green","hex":"#419c03"},{"name":"Grassy Meadow","hex":"#76a55b"},{"name":"Grassy Ochre","hex":"#b8a336"},{"name":"Grassy Savannah","hex":"#9b9279"},{"name":"Grated Beet","hex":"#a60e46"},{"name":"Gratefully Grass","hex":"#71714e"},{"name":"Gratifying Green","hex":"#dae2cd"},{"name":"Gratin Dauphinois","hex":"#e0d2a9"},{"name":"Gratitude","hex":"#e0ead7"},{"name":"Grauzone","hex":"#85a3b2"},{"name":"Gravel","hex":"#4a4b46"},{"name":"Gravel Dust","hex":"#bab9a9"},{"name":"Gravel Fint","hex":"#bbbbbb"},{"name":"Gravel Grey Blue","hex":"#637a82"},{"name":"Gravelle","hex":"#938576"},{"name":"Gravelstone","hex":"#d3c7b8"},{"name":"Graveyard Earth","hex":"#68553a"},{"name":"Gravlax","hex":"#ec834f"},{"name":"Grayve-Yard","hex":"#a1a19f"},{"name":"Greasy Green Beans","hex":"#a2b35a"},{"name":"Greasy Greens","hex":"#117755"},{"name":"Greasy Grey","hex":"#838583"},{"name":"Great Basin","hex":"#576e8b"},{"name":"Great Blue Heron","hex":"#d5e0ee"},{"name":"Great Coat Grey","hex":"#7f8488"},{"name":"Great Dane","hex":"#d1a369"},{"name":"Great Falls","hex":"#9fa6b3"},{"name":"Great Fennel Flower","hex":"#719ba2"},{"name":"Great Frontier","hex":"#908675"},{"name":"Great Grape","hex":"#6b6d85"},{"name":"Great Graphite","hex":"#a5a6a1"},{"name":"Great Green","hex":"#abb486"},{"name":"Great Joy","hex":"#d8e6cb"},{"name":"Great Serpent","hex":"#4a72a3"},{"name":"Great Tit Eggs","hex":"#e9e2db"},{"name":"Great Void","hex":"#3b5760"},{"name":"Great White","hex":"#bdbdc6"},{"name":"Grecian Gold","hex":"#9e7e54"},{"name":"Grecian Isle","hex":"#00a49b"},{"name":"Grecian Ivory","hex":"#d6cfbe"},{"name":"Greedo Green","hex":"#00aa66"},{"name":"Greedy Gecko","hex":"#aa9922"},{"name":"Greedy Gold","hex":"#c4ce3b"},{"name":"Greedy Green","hex":"#d1ffbd"},{"name":"Greek Aubergine","hex":"#3d0734"},{"name":"Greek Blue","hex":"#009fbd"},{"name":"Greek Flag Blue","hex":"#0d5eaf"},{"name":"Greek Garden","hex":"#8cce86"},{"name":"Greek Goddess","hex":"#ede9ef"},{"name":"Greek Isles","hex":"#bbdcf0"},{"name":"Greek Lavender","hex":"#9b8fb0"},{"name":"Greek Olive","hex":"#a08650"},{"name":"Greek Sea","hex":"#72a7e1"},{"name":"Greek Villa","hex":"#f0ece2"},{"name":"Green","hex":"#00ff00"},{"name":"Green 383","hex":"#3e3d29"},{"name":"Green Acres","hex":"#53a144"},{"name":"Green Adirondack","hex":"#688878"},{"name":"Green Agate","hex":"#3f6253"},{"name":"Green Alabaster","hex":"#c8ccba"},{"name":"Green Amazons","hex":"#98a893"},{"name":"Green Andara","hex":"#afc1a3"},{"name":"Green Apple","hex":"#5edc1f"},{"name":"Green Apple Martini","hex":"#d2c785"},{"name":"Green Aqua","hex":"#d0e8db"},{"name":"Green Ash","hex":"#95d6a1"},{"name":"Green Balloon","hex":"#80c4a9"},{"name":"Green Balsam","hex":"#a0ac9e"},{"name":"Green Banana","hex":"#a8b453"},{"name":"Green Bank","hex":"#79b088"},{"name":"Green Bark","hex":"#a9c4a6"},{"name":"Green Bay","hex":"#7e9285"},{"name":"Green Bayou","hex":"#566e57"},{"name":"Green Bean Casserole","hex":"#b0a36e"},{"name":"Green Bell Pepper","hex":"#228800"},{"name":"Green Belt","hex":"#2d7f6c"},{"name":"Green Beret","hex":"#516a62"},{"name":"Green Blob","hex":"#22dd00"},{"name":"Green Blue","hex":"#42b395"},{"name":"Green Blue Slate","hex":"#358082"},{"name":"Green Bonnet","hex":"#8bb490"},{"name":"Green Bottle","hex":"#446a4b"},{"name":"Green Brocade","hex":"#daf1e0"},{"name":"Green Brown","hex":"#696006"},{"name":"Green Buoy","hex":"#32a7b5"},{"name":"Green Bush","hex":"#7f8866"},{"name":"Green Cacophony","hex":"#bbee11"},{"name":"Green Cape","hex":"#89ce01"},{"name":"Green Cast","hex":"#919365"},{"name":"Green Caterpillar","hex":"#98be3c"},{"name":"Green Chalk","hex":"#bcdf8a"},{"name":"Green Charm","hex":"#e7dda7"},{"name":"Green Clay","hex":"#889988"},{"name":"Green Coconut","hex":"#868e65"},{"name":"Green Column","hex":"#465149"},{"name":"Green Commando","hex":"#828039"},{"name":"Green Cow","hex":"#beef69"},{"name":"Green Crush","hex":"#62ae9e"},{"name":"Green Cyan","hex":"#009966"},{"name":"Green Darner Tail","hex":"#75bbfd"},{"name":"Green Day","hex":"#bbee88"},{"name":"Green Daze","hex":"#8bd3c6"},{"name":"Green Dragon","hex":"#006c67"},{"name":"Green Dragon Spring","hex":"#c1cab0"},{"name":"Green Dynasty","hex":"#728942"},{"name":"Green Eggs","hex":"#e3ecc5"},{"name":"Green Eggs and Ham","hex":"#7cb68e"},{"name":"Green Elisabeth Ⅱ","hex":"#bbcc11"},{"name":"Green Elliott","hex":"#00bb66"},{"name":"Green Emulsion","hex":"#daeae2"},{"name":"Green Energy","hex":"#80905f"},{"name":"Green Envy","hex":"#77aa00"},{"name":"Green Epiphany","hex":"#7efbb3"},{"name":"Green Essence","hex":"#e9eac8"},{"name":"Green Eyes","hex":"#7d956d"},{"name":"Green Fatigue","hex":"#605e4f"},{"name":"Green Fiasco","hex":"#aaee00"},{"name":"Green Field","hex":"#88aa77"},{"name":"Green Fig","hex":"#b3a476"},{"name":"Green Fingers","hex":"#297e6b"},{"name":"Green Flash","hex":"#79c753"},{"name":"Green Flavor","hex":"#bbaa22"},{"name":"Green Fluorite","hex":"#55bbaa"},{"name":"Green Fog","hex":"#989a87"},{"name":"Green Frost","hex":"#d0d6bf"},{"name":"Green Frosting","hex":"#d8f1eb"},{"name":"Green Gables","hex":"#364847"},{"name":"Green Gamora","hex":"#11bb00"},{"name":"Green Gardens","hex":"#009911"},{"name":"Green Garlands","hex":"#008176"},{"name":"Green Garter","hex":"#61ba85"},{"name":"Green Gas","hex":"#00ff99"},{"name":"Green Gate","hex":"#676957"},{"name":"Green Gaze","hex":"#c7c3a8"},{"name":"Green Gecko","hex":"#cdd47f"},{"name":"Green Glacier","hex":"#e7f0c2"},{"name":"Green Glaze","hex":"#eaf1e4"},{"name":"Green Glimmer","hex":"#00bb00"},{"name":"Green Glimpse","hex":"#e7eae3"},{"name":"Green Glint","hex":"#dcf1c7"},{"name":"Green Glitter","hex":"#dde26a"},{"name":"Green Globe","hex":"#79aa87"},{"name":"Green Gloss","hex":"#00955e"},{"name":"Green Glow","hex":"#acc65d"},{"name":"Green Glutton","hex":"#007722"},{"name":"Green Goanna","hex":"#505a39"},{"name":"Green Goblin","hex":"#11bb33"},{"name":"Green Goddess","hex":"#76ad83"},{"name":"Green Gold","hex":"#c5b088"},{"name":"Green Gone Wild","hex":"#73a236"},{"name":"Green Gooseberry","hex":"#b0dfa4"},{"name":"Green Goth Eyeshadow","hex":"#588266"},{"name":"Green Granite","hex":"#7c9793"},{"name":"Green Grapple","hex":"#3db9b2"},{"name":"Green Grass","hex":"#39854a"},{"name":"Green Grey","hex":"#7ea07a"},{"name":"Green Grey Mist","hex":"#afa984"},{"name":"Green Gum","hex":"#95e3c0"},{"name":"Green Haze","hex":"#01a368"},{"name":"Green Herb","hex":"#a4c08a"},{"name":"Green High","hex":"#66cc22"},{"name":"Green Hills","hex":"#007800"},{"name":"Green Hornet","hex":"#6a9d5d"},{"name":"Green Hour","hex":"#587d79"},{"name":"Green Iced Tea","hex":"#e8e8d4"},{"name":"Green Illude","hex":"#6e6f56"},{"name":"Green Incandescence","hex":"#c4fe82"},{"name":"Green Ink","hex":"#11887b"},{"name":"Green Jeans","hex":"#7a796e"},{"name":"Green Jelly","hex":"#349b82"},{"name":"Green Jewel","hex":"#95dabd"},{"name":"Green Juice","hex":"#3bde39"},{"name":"Green Katamari","hex":"#53fe5c"},{"name":"Green Kelp","hex":"#393d2a"},{"name":"Green Knoll","hex":"#647f4a"},{"name":"Green Lacewing","hex":"#8ad370"},{"name":"Green Lane","hex":"#cad6c4"},{"name":"Green Lantern","hex":"#9cd03b"},{"name":"Green Lapis","hex":"#008684"},{"name":"Green Leaf","hex":"#526b2d"},{"name":"Green Lentils","hex":"#9c9463"},{"name":"Green Lily","hex":"#c1cec1"},{"name":"Green Lizard","hex":"#a7f432"},{"name":"Green Mallard","hex":"#455f5f"},{"name":"Green Mana","hex":"#26b467"},{"name":"Green Masquerade","hex":"#8dbc8a"},{"name":"Green McQuarrie","hex":"#555d50"},{"name":"Green Me","hex":"#b2b55f"},{"name":"Green Meets Blue","hex":"#8ea8a0"},{"name":"Green Mesh","hex":"#d7d7ad"},{"name":"Green Milieu","hex":"#8a9992"},{"name":"Green Minions","hex":"#99dd00"},{"name":"Green Mirror","hex":"#d7e2d5"},{"name":"Green Mist","hex":"#bfc298"},{"name":"Green Moblin","hex":"#008888"},{"name":"Green Moonstone","hex":"#33565e"},{"name":"Green Moray","hex":"#3a7968"},{"name":"Green Moss","hex":"#887e48"},{"name":"Green Myth","hex":"#c5e1c3"},{"name":"Green Neon","hex":"#b2ac31"},{"name":"Green not Found","hex":"#404404"},{"name":"Green Oasis","hex":"#b0b454"},{"name":"Green Oblivion","hex":"#005249"},{"name":"Green Ochre","hex":"#9f8f55"},{"name":"Green of Bhabua","hex":"#cdfa56"},{"name":"Green Olive","hex":"#8d8b55"},{"name":"Green Olive Pit","hex":"#bdaa89"},{"name":"Green Onion","hex":"#c1e089"},{"name":"Green Onyx","hex":"#989a82"},{"name":"Green Papaya","hex":"#e5ce77"},{"name":"Green Parakeet","hex":"#7bd5bf"},{"name":"Green Parlor","hex":"#cfddb9"},{"name":"Green Patina","hex":"#66d0c0"},{"name":"Green Paw Paw","hex":"#0d6349"},{"name":"Green Pea","hex":"#266242"},{"name":"Green Pear","hex":"#79be58"},{"name":"Green People","hex":"#388004"},{"name":"Green Pepper","hex":"#97bc62"},{"name":"Green Peridot","hex":"#a7c668"},{"name":"Green Pigment","hex":"#00a550"},{"name":"Green Plaza","hex":"#98a76e"},{"name":"Green Power","hex":"#e2e1c6"},{"name":"Green Priestess","hex":"#11dd55"},{"name":"Green Relict","hex":"#7b8762"},{"name":"Green Revolution","hex":"#009944"},{"name":"Green Room","hex":"#80aea4"},{"name":"Green Savage","hex":"#888866"},{"name":"Green Scene","hex":"#858365"},{"name":"Green Screen","hex":"#22ff00"},{"name":"Green Seduction","hex":"#44aa33"},{"name":"Green Serpent","hex":"#77bb00"},{"name":"Green Serum","hex":"#99dd22"},{"name":"Green Shade Wash","hex":"#45523a"},{"name":"Green Sheen","hex":"#d7c94a"},{"name":"Green Shimmer","hex":"#ccfd7f"},{"name":"Green Silk","hex":"#a2c2b0"},{"name":"Green Sky","hex":"#859d66"},{"name":"Green Sleeves","hex":"#a19675"},{"name":"Green Smoke","hex":"#9ca664"},{"name":"Green Snow","hex":"#9eb788"},{"name":"Green Song","hex":"#d1e9c4"},{"name":"Green Spool","hex":"#006474"},{"name":"Green Spring","hex":"#a9af99"},{"name":"Green Spruce","hex":"#589f7e"},{"name":"Green Stain","hex":"#2b553e"},{"name":"Green Suede","hex":"#73884d"},{"name":"Green Sulphur","hex":"#9e8528"},{"name":"Green Symphony","hex":"#66aa22"},{"name":"Green Tea","hex":"#b5b68f"},{"name":"Green Tea Candy","hex":"#65ab7c"},{"name":"Green Tea Ice Cream","hex":"#93b13d"},{"name":"Green Tea Leaf","hex":"#939a89"},{"name":"Green Tea Mochi","hex":"#90a96e"},{"name":"Green Teal","hex":"#0cb577"},{"name":"Green Tease","hex":"#e3ede0"},{"name":"Green Thumb","hex":"#779900"},{"name":"Green Tilberi","hex":"#d5e0d0"},{"name":"Green Tint","hex":"#c5ccc0"},{"name":"Green Tone Ink","hex":"#47553c"},{"name":"Green Tourmaline","hex":"#5eab81"},{"name":"Green Trance","hex":"#a0d9a3"},{"name":"Green Trellis","hex":"#99a798"},{"name":"Green Turquoise","hex":"#679591"},{"name":"Green Valley","hex":"#51755b"},{"name":"Green Veil","hex":"#e0f1c4"},{"name":"Green Velour","hex":"#25b68b"},{"name":"Green Velvet","hex":"#127453"},{"name":"Green Venom","hex":"#b8f818"},{"name":"Green Vibes","hex":"#d4e7c3"},{"name":"Green Vogue","hex":"#23414e"},{"name":"Green Wash","hex":"#c6ddcd"},{"name":"Green Waterloo","hex":"#2c2d24"},{"name":"Green Wave","hex":"#c3dcd5"},{"name":"Green Weed","hex":"#548f6f"},{"name":"Green Whisper","hex":"#e3eee3"},{"name":"Green White","hex":"#deddcb"},{"name":"Green With Envy","hex":"#22bb33"},{"name":"Green Woodpecker Olive","hex":"#7d7853"},{"name":"Green Wrasse","hex":"#13da25"},{"name":"Green Yellow","hex":"#c6f808"},{"name":"Greenalicious","hex":"#00dd00"},{"name":"Greenbelt","hex":"#447d5f"},{"name":"Greenblack","hex":"#373a3a"},{"name":"Greenbriar","hex":"#245d3f"},{"name":"Greenbrier","hex":"#4b9b69"},{"name":"Greenday","hex":"#99ff00"},{"name":"Greene & Greene","hex":"#445544"},{"name":"Greenella","hex":"#60857a"},{"name":"Greener Grass","hex":"#2f8351"},{"name":"Greener Pastures","hex":"#495a4c"},{"name":"Greenery","hex":"#80a546"},{"name":"Greenette","hex":"#daecc5"},{"name":"Greenfield","hex":"#60724f"},{"name":"Greenfinch","hex":"#bda928"},{"name":"Greengage","hex":"#84be84"},{"name":"Greengrass","hex":"#72a355"},{"name":"Greenhorn","hex":"#b2cc9a"},{"name":"Greenhouse","hex":"#3e6334"},{"name":"Greenhouse Glass","hex":"#d7e7cd"},{"name":"Greening","hex":"#dfe4d5"},{"name":"Greenish","hex":"#40a368"},{"name":"Greenish Beige","hex":"#c9d179"},{"name":"Greenish Black","hex":"#454445"},{"name":"Greenish Blue","hex":"#0b8b87"},{"name":"Greenish Brown","hex":"#696112"},{"name":"Greenish Cyan","hex":"#2afeb7"},{"name":"Greenish Grey","hex":"#96ae8d"},{"name":"Greenish Grey Bark","hex":"#66675a"},{"name":"Greenish Tan","hex":"#bccb7a"},{"name":"Greenish Teal","hex":"#32bf84"},{"name":"Greenish Turquoise","hex":"#00fbb0"},{"name":"Greenish White","hex":"#d1f1de"},{"name":"Greenish Yellow","hex":"#cdfd02"},{"name":"Greenivorous","hex":"#cae03b"},{"name":"Greenlake","hex":"#008c7d"},{"name":"Greenland","hex":"#737d6a"},{"name":"Greenland Blue","hex":"#367f9a"},{"name":"Greenland Green","hex":"#22acae"},{"name":"Greenland Ice","hex":"#b9d7d6"},{"name":"Greens","hex":"#016844"},{"name":"Greensleeves","hex":"#39766c"},{"name":"Greenway","hex":"#419a7d"},{"name":"Greenwich","hex":"#475b49"},{"name":"Greenwich Village","hex":"#afbfbe"},{"name":"Greenwood","hex":"#bcbaab"},{"name":"Greeny Glaze","hex":"#067376"},{"name":"Gregorio Garden","hex":"#cbc8dd"},{"name":"Greige","hex":"#b0a999"},{"name":"Greige Violet","hex":"#9c8c9a"},{"name":"Gremlin","hex":"#a79954"},{"name":"Gremolata","hex":"#527e6d"},{"name":"Grenache","hex":"#8e6268"},{"name":"Grenade","hex":"#c32149"},{"name":"Grenadier","hex":"#c14d36"},{"name":"Grenadine","hex":"#ac545e"},{"name":"Grenadine Pink","hex":"#ff616b"},{"name":"Gretchin Green","hex":"#5d6732"},{"name":"Gretna Green","hex":"#596442"},{"name":"Grey","hex":"#808080"},{"name":"Grey Agate","hex":"#a8b1c0"},{"name":"Grey Aqua","hex":"#88b69f"},{"name":"Grey Area","hex":"#8f9394"},{"name":"Grey Ashlar","hex":"#c4c5ba"},{"name":"Grey Asparagus","hex":"#465945"},{"name":"Grey Blue","hex":"#77a1b5"},{"name":"Grey Blueberry","hex":"#6c8096"},{"name":"Grey Brown","hex":"#7f7053"},{"name":"Grey By Me","hex":"#a1988b"},{"name":"Grey Carmine","hex":"#7a5063"},{"name":"Grey Chateau","hex":"#9fa3a7"},{"name":"Grey Cloth","hex":"#ccc9c5"},{"name":"Grey Cloud","hex":"#747880"},{"name":"Grey Clouds","hex":"#b7b7b2"},{"name":"Grey Dawn","hex":"#bbc1cc"},{"name":"Grey Dolphin","hex":"#c8c7c5"},{"name":"Grey Dusk","hex":"#897f98"},{"name":"Grey Flanks","hex":"#a2998f"},{"name":"Grey Flannel","hex":"#8d9a9e"},{"name":"Grey Frost","hex":"#b8bfc2"},{"name":"Grey Ghost","hex":"#dddcda"},{"name":"Grey Glimpse","hex":"#e0e4e2"},{"name":"Grey Gloss","hex":"#a3a29b"},{"name":"Grey Grain","hex":"#a9bdbf"},{"name":"Grey Green","hex":"#86a17d"},{"name":"Grey Heather","hex":"#868790"},{"name":"Grey Heron","hex":"#89928a"},{"name":"Grey Jade","hex":"#b9bbad"},{"name":"Grey Lilac","hex":"#d4cacd"},{"name":"Grey Linnet Egg","hex":"#f2e8d7"},{"name":"Grey Locks","hex":"#72695e"},{"name":"Grey Marble","hex":"#b9b4b1"},{"name":"Grey Matter","hex":"#c87f89"},{"name":"Grey Matters","hex":"#a7a8a2"},{"name":"Grey Mauve","hex":"#cab8ab"},{"name":"Grey Mist","hex":"#96acab"},{"name":"Grey Monument","hex":"#707c78"},{"name":"Grey Morn","hex":"#cabeb5"},{"name":"Grey Morning","hex":"#9eb0aa"},{"name":"Grey Nickel","hex":"#c3c3bd"},{"name":"Grey Nurse","hex":"#d1d3cc"},{"name":"Grey of Darkness","hex":"#a2a2a2"},{"name":"Grey Olive","hex":"#a19a7f"},{"name":"Grey Owl","hex":"#776f67"},{"name":"Grey Pearl","hex":"#ced0cf"},{"name":"Grey Pearl Sand","hex":"#b0b7be"},{"name":"Grey Pebble","hex":"#cfcac1"},{"name":"Grey Pepper","hex":"#84827d"},{"name":"Grey Pink","hex":"#c3909b"},{"name":"Grey Pinstripe","hex":"#4e4e52"},{"name":"Grey Placidity","hex":"#dddde2"},{"name":"Grey Porcelain","hex":"#86837a"},{"name":"Grey Purple","hex":"#826d8c"},{"name":"Grey Ridge","hex":"#847986"},{"name":"Grey River Rock","hex":"#99a1a1"},{"name":"Grey Roads","hex":"#c3c0bb"},{"name":"Grey Rose","hex":"#c6b6b2"},{"name":"Grey Russian","hex":"#8e9598"},{"name":"Grey Sand","hex":"#e5caaf"},{"name":"Grey Scape","hex":"#b8b0af"},{"name":"Grey Screen","hex":"#c6caca"},{"name":"Grey Shadows","hex":"#c2bdba"},{"name":"Grey Sheep","hex":"#baaaaa"},{"name":"Grey Shimmer","hex":"#d6d9d8"},{"name":"Grey Shingle","hex":"#949392"},{"name":"Grey Spell","hex":"#c8c7c2"},{"name":"Grey Squirrel","hex":"#989081"},{"name":"Grey Suit","hex":"#807a77"},{"name":"Grey Summit","hex":"#959491"},{"name":"Grey Teal","hex":"#5e9b8a"},{"name":"Grey Timber Wolf","hex":"#acaeb1"},{"name":"Grey Tote","hex":"#81807d"},{"name":"Grey Tweed","hex":"#b0bab5"},{"name":"Grey Violet","hex":"#9b8e8e"},{"name":"Grey Web","hex":"#616669"},{"name":"Grey Werewolf","hex":"#625f5c"},{"name":"Grey Whisper","hex":"#e6e4e4"},{"name":"Grey White","hex":"#d7d5cb"},{"name":"Grey Wolf","hex":"#9ca0a6"},{"name":"Grey Wonder","hex":"#e5e8e6"},{"name":"Grey Wool","hex":"#a9bbbc"},{"name":"Grey-Headed Woodpecker Green","hex":"#98916c"},{"name":"Greybeard","hex":"#d4d0c5"},{"name":"Greyed Jade","hex":"#92b8a0"},{"name":"Greyhound","hex":"#b2aca2"},{"name":"Greyish","hex":"#cfcac7"},{"name":"Greyish Beige","hex":"#a8a495"},{"name":"Greyish Black","hex":"#555152"},{"name":"Greyish Blue","hex":"#5e819d"},{"name":"Greyish Brown","hex":"#7a6a4f"},{"name":"Greyish Green","hex":"#82a67d"},{"name":"Greyish Lavender","hex":"#b8b8ff"},{"name":"Greyish Pink","hex":"#c88d94"},{"name":"Greyish Purple","hex":"#887191"},{"name":"Greyish Teal","hex":"#719f91"},{"name":"Greyish White","hex":"#d6dee9"},{"name":"Greyish Yellow","hex":"#877254"},{"name":"Greylac","hex":"#948c8d"},{"name":"Greys Harbor","hex":"#596368"},{"name":"Greystoke","hex":"#85837e"},{"name":"Greystone","hex":"#b7b9b5"},{"name":"Greywacke","hex":"#aaccbb"},{"name":"Greywood","hex":"#9d9586"},{"name":"Grieving Daylily","hex":"#c3571d"},{"name":"Griffin","hex":"#838585"},{"name":"Griffon Brown","hex":"#70393f"},{"name":"Grill Master","hex":"#863b2c"},{"name":"Grilled","hex":"#633f2e"},{"name":"Grilled Cheese","hex":"#ffc85f"},{"name":"Grilled Tomato","hex":"#af3519"},{"name":"Grim Grey","hex":"#e3dcd6"},{"name":"Grim Pink","hex":"#deadaf"},{"name":"Grim Purple","hex":"#441188"},{"name":"Grim Reaper","hex":"#0f1039"},{"name":"Grim White","hex":"#f6f1f4"},{"name":"Grimace","hex":"#50314c"},{"name":"Grime","hex":"#565143"},{"name":"Gris","hex":"#a5a9a8"},{"name":"Gris Morado","hex":"#8f8a91"},{"name":"Gris Náutico","hex":"#bcc7cb"},{"name":"Gris Volcanico","hex":"#797371"},{"name":"Grisaille","hex":"#91979f"},{"name":"Gristmill","hex":"#a29371"},{"name":"Grizzle Grey","hex":"#636562"},{"name":"Grizzly","hex":"#885818"},{"name":"Grog Yellow","hex":"#937043"},{"name":"Groovy","hex":"#de6491"},{"name":"Groovy Giraffe","hex":"#eeaa11"},{"name":"Groovy Lemon Pie","hex":"#d6be01"},{"name":"Gropius Grey","hex":"#63615d"},{"name":"Gross Green","hex":"#a0bf16"},{"name":"Grotesque Green","hex":"#64e986"},{"name":"Grouchy Badger","hex":"#6f675c"},{"name":"Ground Bean","hex":"#604e42"},{"name":"Ground Coffee","hex":"#63554b"},{"name":"Ground Cover","hex":"#a8bf8b"},{"name":"Ground Cumin","hex":"#8a6c42"},{"name":"Ground Earth","hex":"#7f5f00"},{"name":"Ground Fog","hex":"#cfcbc4"},{"name":"Ground Ginger","hex":"#d9ca9f"},{"name":"Ground Nutmeg","hex":"#a05a3b"},{"name":"Ground Pepper","hex":"#766551"},{"name":"Groundcover","hex":"#64634d"},{"name":"Grounded","hex":"#d18c62"},{"name":"Groundwater","hex":"#1100aa"},{"name":"Growing Nature","hex":"#88cc11"},{"name":"Growing Season","hex":"#c3cdb0"},{"name":"Growth","hex":"#6ca178"},{"name":"Grubby Red","hex":"#811412"},{"name":"Grubenwald","hex":"#4a5b51"},{"name":"Grullo","hex":"#a99a86"},{"name":"Grunervetliner","hex":"#c0cf3f"},{"name":"Gruyère Cheese","hex":"#f5deb3"},{"name":"Gryphonne Sepia Wash","hex":"#883f11"},{"name":"Gǔ Tóng Hēi Copper","hex":"#634950"},{"name":"Guacamole","hex":"#95986b"},{"name":"Guardian Angel","hex":"#e4e1ea"},{"name":"Guardian of Gardens","hex":"#88aa22"},{"name":"Guardsman Red","hex":"#952e31"},{"name":"Guava","hex":"#ff982e"},{"name":"Guava Green","hex":"#a18d0d"},{"name":"Guava Jam","hex":"#e08771"},{"name":"Guava Jelly","hex":"#ee9685"},{"name":"Guava Juice","hex":"#f4b694"},{"name":"Guerrilla Forest","hex":"#142d25"},{"name":"Guesthouse","hex":"#e3e0d2"},{"name":"Guide Pink","hex":"#eb4962"},{"name":"Guiding Star","hex":"#fee9da"},{"name":"Guild Grey","hex":"#d2d1cb"},{"name":"Guilliman Blue","hex":"#6495ed"},{"name":"Guinea Pig","hex":"#987652"},{"name":"Guinea Pig White","hex":"#e8e4d6"},{"name":"Guinean Green","hex":"#4a8140"},{"name":"Guitar","hex":"#6b4c37"},{"name":"Gulab Brown","hex":"#8b2e19"},{"name":"Gulābī Pink","hex":"#c772c0"},{"name":"Gulf Blue","hex":"#343f5c"},{"name":"Gulf Breeze","hex":"#ddded3"},{"name":"Gulf Harbour","hex":"#225e64"},{"name":"Gulf Stream","hex":"#74b2a8"},{"name":"Gulf Waters","hex":"#2da6bf"},{"name":"Gulf Weed","hex":"#686e43"},{"name":"Gulf Wind","hex":"#bcc9cd"},{"name":"Gulf Winds","hex":"#93b2b2"},{"name":"Gulfstream","hex":"#01858b"},{"name":"Gulfweed","hex":"#329643"},{"name":"Gull","hex":"#918c8f"},{"name":"Gull Feather","hex":"#c2c2bc"},{"name":"Gull Grey","hex":"#a4adb0"},{"name":"Gull Wing","hex":"#abaea9"},{"name":"Gully","hex":"#777661"},{"name":"Gully Green","hex":"#4b6e3b"},{"name":"Gum Leaf","hex":"#acc9b2"},{"name":"Gumball","hex":"#e7b2d0"},{"name":"Gumbo","hex":"#718f8a"},{"name":"Gumdrop","hex":"#de96c1"},{"name":"Gumdrop Green","hex":"#2ea785"},{"name":"Gumdrops","hex":"#ffc69d"},{"name":"Gummy Dolphins","hex":"#06a9ca"},{"name":"Gun Barrel","hex":"#979d9a"},{"name":"Gun Corps Brown","hex":"#6b593c"},{"name":"Gun Powder","hex":"#484753"},{"name":"Gundaroo Green","hex":"#959984"},{"name":"Gunjō Blue","hex":"#5d8cae"},{"name":"Gunmetal","hex":"#536267"},{"name":"Gunmetal Beige","hex":"#908982"},{"name":"Gunmetal Green","hex":"#777648"},{"name":"Gunmetal Grey","hex":"#808c8c"},{"name":"Gunny Sack","hex":"#dcd3bc"},{"name":"Guns N\' Roses","hex":"#ff0077"},{"name":"Gunsmith","hex":"#818070"},{"name":"Gunsmoke","hex":"#7a7c76"},{"name":"Guo Tie Dumpling","hex":"#bd7e08"},{"name":"Guppie Green","hex":"#00ff7f"},{"name":"Guppy Violet","hex":"#ae5883"},{"name":"Gurkha","hex":"#989171"},{"name":"Gustav","hex":"#a49691"},{"name":"Gusto Gold","hex":"#f8ac1d"},{"name":"Gutsy Grape","hex":"#705284"},{"name":"Guy","hex":"#897a68"},{"name":"Gyoza Dumpling","hex":"#dfb46f"},{"name":"Gypsum","hex":"#eeede4"},{"name":"Gypsum Rose","hex":"#e2c4af"},{"name":"Gypsum Sand","hex":"#d6cfbf"},{"name":"Gypsy","hex":"#e59368"},{"name":"Gypsy Canvas","hex":"#b7a467"},{"name":"Gypsy Caravan","hex":"#d1c8d7"},{"name":"Gypsy Dancer","hex":"#c07c7b"},{"name":"Gypsy Jewels","hex":"#613a57"},{"name":"Gypsy Magic","hex":"#917d82"},{"name":"Gypsy Red","hex":"#b6363b"},{"name":"Gypsy\'s Gown","hex":"#a698a8"},{"name":"H₂O","hex":"#bfe1e6"},{"name":"Habañero","hex":"#f98513"},{"name":"Habañero Chile","hex":"#b8473d"},{"name":"Habañero Gold","hex":"#fecf3c"},{"name":"Habitat","hex":"#897d6d"},{"name":"Hacienda","hex":"#9e8022"},{"name":"Hacienda Blue","hex":"#0087a8"},{"name":"Hacienda Tile","hex":"#b86d64"},{"name":"Hacienda White","hex":"#f0ede7"},{"name":"Haddock\'s Sweater","hex":"#277aba"},{"name":"Hadfield Blue","hex":"#1177ff"},{"name":"Hadopelagic Water","hex":"#000022"},{"name":"Haggis","hex":"#c3c7b2"},{"name":"Hailey Blue","hex":"#2c75ff"},{"name":"Hailstorm","hex":"#d0d1e1"},{"name":"Hailstorm Grey","hex":"#bdbeb9"},{"name":"Haint Blue","hex":"#c1d8d9"},{"name":"Hair Brown","hex":"#8b7859"},{"name":"Hair Ribbon","hex":"#939cc9"},{"name":"Hairy Brown","hex":"#734a12"},{"name":"Hairy Heath","hex":"#633528"},{"name":"Haiti","hex":"#2c2a35"},{"name":"Haitian Flower","hex":"#97495a"},{"name":"Hakusai Green","hex":"#88b378"},{"name":"Halakā Pīlā","hex":"#f0e483"},{"name":"Halation","hex":"#d1d1ce"},{"name":"Halayà Úbe","hex":"#663854"},{"name":"Halcyon Green","hex":"#9baaa2"},{"name":"Half Baked","hex":"#558f93"},{"name":"Half Colonial White","hex":"#f2e5bf"},{"name":"Half Dutch White","hex":"#fbf0d6"},{"name":"Half Moon Bay Blush","hex":"#cda894"},{"name":"Half Orc Highlight","hex":"#976f3c"},{"name":"Half Pearl Lusta","hex":"#f1ead7"},{"name":"Half Sea Fog","hex":"#a9b8bb"},{"name":"Half Spanish White","hex":"#e6dbc7"},{"name":"Half-Caff","hex":"#604c3d"},{"name":"Half-Smoke","hex":"#ee8855"},{"name":"Halite Blue","hex":"#09324a"},{"name":"Hallowed Hush","hex":"#e2ebe5"},{"name":"Halloween","hex":"#fe653c"},{"name":"Halloween Party","hex":"#eb6123"},{"name":"Halloween Punch","hex":"#dd2211"},{"name":"Halo","hex":"#e2c392"},{"name":"Halogen Blue","hex":"#b0bad5"},{"name":"Halt and Catch Fire","hex":"#ff6633"},{"name":"Halt Red","hex":"#ff004f"},{"name":"Hamburger","hex":"#a34e25"},{"name":"Hamilton Blue","hex":"#8a99a4"},{"name":"Hammam Blue","hex":"#65dcd6"},{"name":"Hammered Copper","hex":"#834831"},{"name":"Hammered Gold","hex":"#cb9d5e"},{"name":"Hammered Pewter","hex":"#7e7567"},{"name":"Hammered Silver","hex":"#978a7f"},{"name":"Hammerhead Shark","hex":"#4e7496"},{"name":"Hammock","hex":"#6d8687"},{"name":"Hampton","hex":"#e8d4a2"},{"name":"Hampton Beach","hex":"#9d603b"},{"name":"Hampton Green","hex":"#4f604f"},{"name":"Hampton Surf","hex":"#597681"},{"name":"Hamster Fur","hex":"#a6814c"},{"name":"Hamster Habitat","hex":"#c4d6af"},{"name":"Hamtaro Brown","hex":"#b07426"},{"name":"Han Blue","hex":"#446ccf"},{"name":"Han Purple","hex":"#5218fa"},{"name":"Hanaasagi Blue","hex":"#1d697c"},{"name":"Hanada Blue","hex":"#044f67"},{"name":"Hanami Pink","hex":"#f2abe1"},{"name":"Hancock","hex":"#4d6968"},{"name":"Hand Sanitizer","hex":"#ceecee"},{"name":"Handmade","hex":"#7f735f"},{"name":"Handmade Linen","hex":"#ddd6b7"},{"name":"Handmade Red","hex":"#a87678"},{"name":"Handsome Hue","hex":"#5286ba"},{"name":"Handwoven","hex":"#bfa984"},{"name":"Hanging Gardens of Babylon","hex":"#11aa44"},{"name":"Hanging Moss","hex":"#5c7f76"},{"name":"Hannover Hills","hex":"#685d4a"},{"name":"Hanover","hex":"#dac5b1"},{"name":"Hanover Brick","hex":"#885d53"},{"name":"Hanover Pewter","hex":"#848472"},{"name":"Hansa Yellow","hex":"#e9d66c"},{"name":"Hanuman Green","hex":"#55ffaa"},{"name":"Hanyauku","hex":"#e3d6c7"},{"name":"Happy","hex":"#f8d664"},{"name":"Happy Camper","hex":"#6b8350"},{"name":"Happy Cement","hex":"#979ea1"},{"name":"Happy Cricket","hex":"#72a86a"},{"name":"Happy Days","hex":"#506e82"},{"name":"Happy Daze","hex":"#f7cf1b"},{"name":"Happy Face","hex":"#ffd10b"},{"name":"Happy Hearts","hex":"#d46362"},{"name":"Happy Hippo","hex":"#818581"},{"name":"Happy Piglets","hex":"#f6cbca"},{"name":"Happy Prawn","hex":"#ffbe98"},{"name":"Happy Skeleton","hex":"#faeed7"},{"name":"Happy Thoughts","hex":"#d1dfeb"},{"name":"Happy Trails","hex":"#b67a63"},{"name":"Happy Tune","hex":"#96b957"},{"name":"Happy Yipee","hex":"#ffc217"},{"name":"Hapsburg Court","hex":"#e2d4d6"},{"name":"Harā Green","hex":"#55aa55"},{"name":"Harajuku Girl","hex":"#504a6f"},{"name":"Harbor","hex":"#5b909a"},{"name":"Harbor Blue","hex":"#556699"},{"name":"Harbor Mist","hex":"#88aaaa"},{"name":"Harbour","hex":"#495867"},{"name":"Harbour Afternoon","hex":"#e0e9f3"},{"name":"Harbour Blue","hex":"#417491"},{"name":"Harbour Fog","hex":"#afb1b4"},{"name":"Harbour Grey","hex":"#a8c0bb"},{"name":"Harbour Light","hex":"#d7e0e7"},{"name":"Harbour Mist","hex":"#dae1e3"},{"name":"Harbour Mist Grey","hex":"#778071"},{"name":"Harbour Rat","hex":"#757d75"},{"name":"Harbour Sky","hex":"#7eb6d0"},{"name":"Harbourmaster","hex":"#4e536b"},{"name":"Hard Candy","hex":"#ffbbbb"},{"name":"Hard Coal","hex":"#656464"},{"name":"Hardware","hex":"#8b8372"},{"name":"Harem Silk","hex":"#006383"},{"name":"Haricot","hex":"#bccf8f"},{"name":"Harissa Red","hex":"#a52a2a"},{"name":"Harlequin","hex":"#3fff00"},{"name":"Harlequin Green","hex":"#46cb18"},{"name":"Harley Davidson Orange","hex":"#c93413"},{"name":"Harley Hair Purple","hex":"#8547b5"},{"name":"Harlock\'s Cape","hex":"#bb0000"},{"name":"Harmonic Tan","hex":"#c1b287"},{"name":"Harmonious","hex":"#afc195"},{"name":"Harmonious Gold","hex":"#eacfa3"},{"name":"Harmonious Rose","hex":"#f29cb7"},{"name":"Harold","hex":"#6d6353"},{"name":"Harp","hex":"#cbcec0"},{"name":"Harpoon","hex":"#283b4c"},{"name":"Harpy Brown","hex":"#493c2b"},{"name":"Harrison Grey","hex":"#989b9e"},{"name":"Harrison Rust","hex":"#9a5f3f"},{"name":"Harrow Gate","hex":"#dbd4c7"},{"name":"Harrow\'s Gate","hex":"#7e8e90"},{"name":"Harvard Crimson","hex":"#c90016"},{"name":"Harvest","hex":"#eacb9d"},{"name":"Harvest at Dusk","hex":"#cb862c"},{"name":"Harvest Blessing","hex":"#ba8e4e"},{"name":"Harvest Brown","hex":"#b9a589"},{"name":"Harvest Dance","hex":"#a5997c"},{"name":"Harvest Eve Gold","hex":"#da9100"},{"name":"Harvest Gold","hex":"#eab76a"},{"name":"Harvest Haze","hex":"#de6931"},{"name":"Harvest Home","hex":"#cbae84"},{"name":"Harvest Night","hex":"#554488"},{"name":"Harvest Oak","hex":"#65564f"},{"name":"Harvest Pumpkin","hex":"#cd632a"},{"name":"Harvest Time","hex":"#cf875f"},{"name":"Harvest Wreath","hex":"#f7d7c4"},{"name":"Harvester","hex":"#edc38e"},{"name":"Hashibami Brown","hex":"#bfa46f"},{"name":"Hashita Purple","hex":"#8d608c"},{"name":"Hashut Copper","hex":"#c9643b"},{"name":"Hassan II Mosque","hex":"#009e6d"},{"name":"Hat Box Brown","hex":"#8f775d"},{"name":"Hatching Chameleon","hex":"#cfebde"},{"name":"Hatoba Pigeon","hex":"#95859c"},{"name":"Hatoba-Nezumi Grey","hex":"#9e8b8e"},{"name":"Hatteras Grey","hex":"#929e9d"},{"name":"Haunted Candelabra","hex":"#57446a"},{"name":"Haunted Dreams","hex":"#333355"},{"name":"Haunted Forest","hex":"#032e0e"},{"name":"Haunted Hills","hex":"#003311"},{"name":"Haunted Purple","hex":"#991177"},{"name":"Haunting Hue","hex":"#d3e0ec"},{"name":"Haunting Melody","hex":"#824855"},{"name":"Haute Couture","hex":"#a0252a"},{"name":"Haute Pink","hex":"#d899b1"},{"name":"Haute Red","hex":"#aa1829"},{"name":"Havana","hex":"#3b2b2c"},{"name":"Havana Blue","hex":"#a5dbe5"},{"name":"Havana Cigar","hex":"#af884a"},{"name":"Havana Coffee","hex":"#554941"},{"name":"Havana Cream","hex":"#f9e5c2"},{"name":"Havasu","hex":"#007993"},{"name":"Havasupai Falls","hex":"#0fafc6"},{"name":"Havelock Blue","hex":"#5784c1"},{"name":"Haven","hex":"#a3b48c"},{"name":"Hawaii Morning","hex":"#00bbff"},{"name":"Hawaiian Breeze","hex":"#75c7e0"},{"name":"Hawaiian Cinder","hex":"#6f4542"},{"name":"Hawaiian Coconut","hex":"#99522c"},{"name":"Hawaiian Cream","hex":"#fae8b8"},{"name":"Hawaiian Ocean","hex":"#008db9"},{"name":"Hawaiian Passion","hex":"#ffa03e"},{"name":"Hawaiian Pineapple","hex":"#fdd773"},{"name":"Hawaiian Raspberry","hex":"#ff0051"},{"name":"Hawaiian Shell","hex":"#f3dbd9"},{"name":"Hawaiian Sky","hex":"#83a2bd"},{"name":"Hawaiian Sunset","hex":"#c06714"},{"name":"Hawaiian Surf","hex":"#008dbb"},{"name":"Hawaiian Vacation","hex":"#77cabd"},{"name":"Hawk Grey","hex":"#77757d"},{"name":"Hawk Turquoise","hex":"#00756a"},{"name":"Hawk’s Eye","hex":"#34363a"},{"name":"Hawkbit","hex":"#fddb6d"},{"name":"Hawker\'s Gold","hex":"#f4c26c"},{"name":"Hawkes Blue","hex":"#d2daed"},{"name":"Hawkesbury","hex":"#729183"},{"name":"Hawthorn Berry","hex":"#cc1111"},{"name":"Hawthorn Blossom","hex":"#eeffaa"},{"name":"Hawthorn Rose","hex":"#884c5e"},{"name":"Hawthorne","hex":"#ced7c1"},{"name":"Hay","hex":"#d3caa3"},{"name":"Hay Day","hex":"#dacd81"},{"name":"Hay Wain","hex":"#cdad59"},{"name":"Hay Yellow","hex":"#c2a770"},{"name":"Hayden Valley","hex":"#5f5d50"},{"name":"Hayloft","hex":"#cdba96"},{"name":"Hayride","hex":"#d4ac99"},{"name":"Haystack","hex":"#f1e3c7"},{"name":"Haystacks","hex":"#cfac47"},{"name":"Haze","hex":"#c8c2c6"},{"name":"Haze Blue","hex":"#b7c0be"},{"name":"Hazed Nuts","hex":"#c39e6d"},{"name":"Hazel","hex":"#a36b4b"},{"name":"Hazel Blush","hex":"#eae2de"},{"name":"Hazel Gaze","hex":"#b8bfb1"},{"name":"Hazel Woods","hex":"#4a564d"},{"name":"Hazelnut","hex":"#a8715a"},{"name":"Hazelnut Chocolate","hex":"#7b3f00"},{"name":"Hazelnut Coffee","hex":"#d28a47"},{"name":"Hazelnut Cream","hex":"#e6dfcf"},{"name":"Hazelnut Milk","hex":"#eeaa77"},{"name":"Hazelnut Turkish Delight","hex":"#fce974"},{"name":"Hazelwood","hex":"#fff3d5"},{"name":"Hazy Blue","hex":"#bcc8cc"},{"name":"Hazy Day","hex":"#f2cc99"},{"name":"Hazy Daze","hex":"#a5b8c5"},{"name":"Hazy Grove","hex":"#f2f1dc"},{"name":"Hazy Mauve","hex":"#c8c6ce"},{"name":"Hazy Moon","hex":"#f1dca1"},{"name":"Hazy Rose","hex":"#b39897"},{"name":"Hazy Skies","hex":"#adbbc4"},{"name":"Hazy Sky","hex":"#b7bdd6"},{"name":"Hazy Taupe","hex":"#d5c3b5"},{"name":"Hazy Trail","hex":"#dcdace"},{"name":"He Loves Me","hex":"#e1dbe3"},{"name":"Hè Sè Brown","hex":"#7f5e00"},{"name":"Head in the Clouds","hex":"#d1dde1"},{"name":"Head in the Sand","hex":"#ebe2de"},{"name":"Head Over Heels","hex":"#605972"},{"name":"Healing Aloe","hex":"#b9cab3"},{"name":"Healing Plant","hex":"#6c7d42"},{"name":"Healing Retreat","hex":"#bac2aa"},{"name":"Healing Springs","hex":"#e1e2c2"},{"name":"Heart Gold","hex":"#808000"},{"name":"Heart of Gold","hex":"#9d7f4c"},{"name":"Heart of Ice","hex":"#f7fcff"},{"name":"Heart of Palm","hex":"#d2cfa6"},{"name":"Heart Potion","hex":"#a97fb1"},{"name":"Heart Stone","hex":"#ede3df"},{"name":"Heart Throb","hex":"#cb3d3c"},{"name":"Heart to Heart","hex":"#d4a9c3"},{"name":"Heart\'s Content","hex":"#e2b5bd"},{"name":"Heart\'s Desire","hex":"#ac3e5f"},{"name":"Heartbeat","hex":"#aa0000"},{"name":"Heartbreaker","hex":"#cc76a3"},{"name":"Heartfelt","hex":"#ffadc9"},{"name":"Hearth","hex":"#e1cca6"},{"name":"Hearth Gold","hex":"#a17135"},{"name":"Hearthstone","hex":"#c7beb2"},{"name":"Heartless","hex":"#623b70"},{"name":"Hearts of Palm","hex":"#cfc291"},{"name":"Heartthrob","hex":"#a82e33"},{"name":"Heartwarming","hex":"#bf1818"},{"name":"Heartwood","hex":"#6f4232"},{"name":"Hearty Hosta","hex":"#96bf83"},{"name":"Hearty Orange","hex":"#b44b34"},{"name":"Heat of Summer","hex":"#e98d5b"},{"name":"Heat Signature","hex":"#e3000e"},{"name":"Heat Wave","hex":"#ff7a00"},{"name":"Heath","hex":"#4f2a2c"},{"name":"Heath Green","hex":"#9acda9"},{"name":"Heath Grey","hex":"#c9cbc2"},{"name":"Heath Spotted Orchid","hex":"#9f5f9f"},{"name":"Heather","hex":"#a484ac"},{"name":"Heather Berry","hex":"#e75480"},{"name":"Heather Feather","hex":"#c3adc5"},{"name":"Heather Field","hex":"#909095"},{"name":"Heather Grey","hex":"#9c9da4"},{"name":"Heather Hill","hex":"#bbb0bb"},{"name":"Heather Moor","hex":"#998e8f"},{"name":"Heather Plume","hex":"#a39699"},{"name":"Heather Red Grey","hex":"#988e94"},{"name":"Heather Rose","hex":"#a76372"},{"name":"Heather Sachet","hex":"#7b7173"},{"name":"Heather Violet","hex":"#b18398"},{"name":"Heathered Grey","hex":"#b6b095"},{"name":"Heating Lamp","hex":"#ee4422"},{"name":"Heatstroke","hex":"#ff7788"},{"name":"Heaven","hex":"#b4ced5"},{"name":"Heaven Gates","hex":"#c7f1ff"},{"name":"Heaven Sent","hex":"#eee1eb"},{"name":"Heaven Sent Storm","hex":"#cad6de"},{"name":"Heavenly","hex":"#7eb2c5"},{"name":"Heavenly Aromas","hex":"#eedfd5"},{"name":"Heavenly Blue","hex":"#a3bbcd"},{"name":"Heavenly Cocoa","hex":"#bea79d"},{"name":"Heavenly Garden","hex":"#93a394"},{"name":"Heavenly Haze","hex":"#d8d5e3"},{"name":"Heavenly Pink","hex":"#f4dede"},{"name":"Heavenly Sky","hex":"#6b90b3"},{"name":"Heavenly Song","hex":"#fbd9c6"},{"name":"Heavenly White","hex":"#ebe8e6"},{"name":"Heavy Black Green","hex":"#3a514d"},{"name":"Heavy Blue","hex":"#2c5674"},{"name":"Heavy Blue Grey","hex":"#9fabaf"},{"name":"Heavy Brown","hex":"#73624a"},{"name":"Heavy Charcoal","hex":"#565350"},{"name":"Heavy Cream","hex":"#e8ddc6"},{"name":"Heavy Gluten","hex":"#ddccaa"},{"name":"Heavy Goldbrown","hex":"#baab74"},{"name":"Heavy Green","hex":"#49583e"},{"name":"Heavy Grey","hex":"#82868a"},{"name":"Heavy Hammock","hex":"#beb9a2"},{"name":"Heavy Heart","hex":"#771122"},{"name":"Heavy Khaki","hex":"#5e6a34"},{"name":"Heavy Metal","hex":"#46473e"},{"name":"Heavy Metal Armor","hex":"#888a8e"},{"name":"Heavy Ochre","hex":"#9b753d"},{"name":"Heavy Orange","hex":"#ee4328"},{"name":"Heavy Rain","hex":"#898a86"},{"name":"Heavy Red","hex":"#9e1212"},{"name":"Heavy Siena","hex":"#735848"},{"name":"Heavy Sugar","hex":"#eff5f1"},{"name":"Heavy Violet","hex":"#4f566c"},{"name":"Heavy Warm Grey","hex":"#bdb3a7"},{"name":"Hectorite","hex":"#f0e4d2"},{"name":"Hedge Garden","hex":"#00aa11"},{"name":"Hedge Green","hex":"#768a75"},{"name":"Hedgehog Cactus Yellow Green","hex":"#c4aa5e"},{"name":"Hedgehog Mushroom","hex":"#faf0da"},{"name":"Hēi Sè Black","hex":"#142030"},{"name":"Heidelberg Red","hex":"#960117"},{"name":"Heifer","hex":"#c3bdb1"},{"name":"Heirloom","hex":"#b67b71"},{"name":"Heirloom Apricot","hex":"#f4bea6"},{"name":"Heirloom Hydrangea","hex":"#327ccb"},{"name":"Heirloom Lace","hex":"#f5e6d6"},{"name":"Heirloom Lilac","hex":"#9d96b2"},{"name":"Heirloom Orchid","hex":"#ae9999"},{"name":"Heirloom Quilt","hex":"#ab979a"},{"name":"Heirloom Rose","hex":"#d182a0"},{"name":"Heirloom Shade","hex":"#dcd8d4"},{"name":"Heirloom Silver","hex":"#b5b6ad"},{"name":"Heirloom Tomato","hex":"#833633"},{"name":"Heisenberg Blue","hex":"#70d4fb"},{"name":"Helen of Troy","hex":"#c3b89f"},{"name":"Helena Rose","hex":"#d28b72"},{"name":"Heliotrope","hex":"#d94ff5"},{"name":"Heliotrope Grey","hex":"#ab98a9"},{"name":"Heliotrope Magenta","hex":"#aa00bb"},{"name":"Heliotropic Mauve","hex":"#9187bd"},{"name":"Helium","hex":"#eae5d8"},{"name":"Hell Rider","hex":"#c40700"},{"name":"Hellebore","hex":"#646944"},{"name":"Hellion Green","hex":"#87c5ae"},{"name":"Hello Darkness My Old Friend","hex":"#802280"},{"name":"Hello Fall","hex":"#995533"},{"name":"Hello Spring","hex":"#44dd66"},{"name":"Hello Summer","hex":"#55bbff"},{"name":"Hello Winter","hex":"#99ffee"},{"name":"Hello Yellow","hex":"#ffe59d"},{"name":"Helvetia Red","hex":"#f00000"},{"name":"Hematite","hex":"#5f615f"},{"name":"Hematitic Sand","hex":"#dc8c59"},{"name":"Hemisphere","hex":"#5285a4"},{"name":"Hemlock","hex":"#69684b"},{"name":"Hemlock Bud","hex":"#eceedf"},{"name":"Hemoglobin Red","hex":"#c61a1b"},{"name":"Hemp","hex":"#987d73"},{"name":"Hemp Fabric","hex":"#b5ad88"},{"name":"Hemp Rope","hex":"#b9a379"},{"name":"Hemp Tea","hex":"#b5b35c"},{"name":"Hen of the Woods","hex":"#eed9c4"},{"name":"Henna","hex":"#864941"},{"name":"Henna Red","hex":"#6e3530"},{"name":"Henna Shade","hex":"#b3675d"},{"name":"Hep Green","hex":"#c4b146"},{"name":"Hepatica","hex":"#fbe5ea"},{"name":"Hephaestus","hex":"#e1d4b6"},{"name":"Hephaestus Gold","hex":"#ff9911"},{"name":"Her Fierceness","hex":"#6f123c"},{"name":"Her Highness","hex":"#432e6f"},{"name":"Her Majesty","hex":"#f9a4a4"},{"name":"Her Velour","hex":"#bb5f62"},{"name":"Hera Blue","hex":"#7777ee"},{"name":"Herald of Spring","hex":"#a46366"},{"name":"Herald\'s Trumpet","hex":"#ce9f2f"},{"name":"Heraldic","hex":"#444161"},{"name":"Herare White","hex":"#e7e0d3"},{"name":"Herb","hex":"#708452"},{"name":"Herb Blend","hex":"#4b856c"},{"name":"Herb Cornucopia","hex":"#6e7357"},{"name":"Herb Garden","hex":"#e9f3e1"},{"name":"Herb Robert","hex":"#dda0df"},{"name":"Herbal","hex":"#29ab87"},{"name":"Herbal Garden","hex":"#9cad60"},{"name":"Herbal Green","hex":"#c9b23d"},{"name":"Herbal Mist","hex":"#d2e6d3"},{"name":"Herbal Scent","hex":"#8e9b7c"},{"name":"Herbal Tea","hex":"#f9fee9"},{"name":"Herbal Vapors","hex":"#ddffcc"},{"name":"Herbal Wash","hex":"#a49b82"},{"name":"Herbalist","hex":"#969e86"},{"name":"Herbalist\'s Garden","hex":"#119900"},{"name":"Herbery Honey","hex":"#eeee22"},{"name":"Herbes","hex":"#a9a487"},{"name":"Herbivore","hex":"#88ee77"},{"name":"Here Comes the Sun","hex":"#fcdf63"},{"name":"Hereford Bull","hex":"#5f3b36"},{"name":"Hereford Cow Brown","hex":"#6c2e1f"},{"name":"Heritage","hex":"#b0bacc"},{"name":"Heritage Blue","hex":"#5296b7"},{"name":"Heritage Oak","hex":"#5c453d"},{"name":"Heritage Park","hex":"#69756c"},{"name":"Heritage Taffeta","hex":"#956f7b"},{"name":"Hermosa","hex":"#9a8ec1"},{"name":"Hermosa Pink","hex":"#ffb3f0"},{"name":"Hero","hex":"#005d6a"},{"name":"Heroic Blue","hex":"#1166ff"},{"name":"Heroic Heron","hex":"#cbd5e9"},{"name":"Heroic Red","hex":"#d1191c"},{"name":"Heron","hex":"#6a6887"},{"name":"Heron Plume","hex":"#e5e1d8"},{"name":"Herring Silver","hex":"#c6c8cf"},{"name":"Hesperide Apple Gold","hex":"#ffe296"},{"name":"Hestia Red","hex":"#ee2200"},{"name":"Hexed Lichen","hex":"#6e0060"},{"name":"Hexos Palesun","hex":"#fbff0a"},{"name":"Hey Blue!","hex":"#16f8ff"},{"name":"Hi Def Lime","hex":"#bbb465"},{"name":"Hibernate","hex":"#aca69f"},{"name":"Hibernation","hex":"#6f5166"},{"name":"Hibiscus","hex":"#b6316c"},{"name":"Hibiscus Delight","hex":"#fe9773"},{"name":"Hibiscus Flower","hex":"#bc555e"},{"name":"Hibiscus Leaf","hex":"#6e826e"},{"name":"Hibiscus Petal","hex":"#edaaac"},{"name":"Hibiscus Pop","hex":"#dd77dd"},{"name":"Hibiscus Punch","hex":"#5c3d45"},{"name":"Hibiscus Red","hex":"#a33737"},{"name":"Hickory","hex":"#b7a28e"},{"name":"Hickory Branch","hex":"#ab8274"},{"name":"Hickory Cliff","hex":"#7c6e6d"},{"name":"Hickory Grove","hex":"#655341"},{"name":"Hickory Nut","hex":"#78614c"},{"name":"Hickory Plank","hex":"#614539"},{"name":"Hickory Stick","hex":"#997772"},{"name":"Hickory Tint","hex":"#bc916f"},{"name":"Hidcote","hex":"#9c949b"},{"name":"Hidden Cottage","hex":"#8d7f64"},{"name":"Hidden Cove","hex":"#cec6bd"},{"name":"Hidden Creek","hex":"#d5dae0"},{"name":"Hidden Depths","hex":"#305451"},{"name":"Hidden Diary","hex":"#ede4cc"},{"name":"Hidden Forest","hex":"#4f5a51"},{"name":"Hidden Glade","hex":"#98ad8e"},{"name":"Hidden Harbor","hex":"#60737d"},{"name":"Hidden Hills","hex":"#c5d2b1"},{"name":"Hidden Jade","hex":"#ebf1e2"},{"name":"Hidden Mask","hex":"#96748a"},{"name":"Hidden Meadow","hex":"#bbcc5a"},{"name":"Hidden Morel","hex":"#aa7c4c"},{"name":"Hidden Paradise","hex":"#5e8b3d"},{"name":"Hidden Passage","hex":"#3c3005"},{"name":"Hidden Path","hex":"#e4d5b9"},{"name":"Hidden Peak","hex":"#727d7f"},{"name":"Hidden Sapphire","hex":"#445771"},{"name":"Hidden Sea Glass","hex":"#6fd1c9"},{"name":"Hidden Springs","hex":"#1b8cb6"},{"name":"Hidden Trail","hex":"#5f5b4d"},{"name":"Hidden Treasure","hex":"#a59074"},{"name":"Hidden Tribe","hex":"#bb9900"},{"name":"Hidden Valley","hex":"#689938"},{"name":"Hidden Waters","hex":"#225258"},{"name":"Hideaway","hex":"#c8c0aa"},{"name":"Hideout","hex":"#5386b7"},{"name":"Hierba Santa","hex":"#77a373"},{"name":"High Altar","hex":"#334f7b"},{"name":"High Blue","hex":"#4ca8e0"},{"name":"High Chaparral","hex":"#75603d"},{"name":"High Dive","hex":"#59b9cc"},{"name":"High Drama","hex":"#9a3843"},{"name":"High Elf Blue","hex":"#8cbed6"},{"name":"High Forest Green","hex":"#665d25"},{"name":"High Grass","hex":"#bbdd00"},{"name":"High Hopes","hex":"#deeaaa"},{"name":"High Maintenance","hex":"#d88cb5"},{"name":"High Noon","hex":"#cfb999"},{"name":"High Note","hex":"#867a88"},{"name":"High Plateau","hex":"#e4b37a"},{"name":"High Point","hex":"#bcd8d2"},{"name":"High Priest","hex":"#643949"},{"name":"High Profile","hex":"#005a85"},{"name":"High Rank","hex":"#645453"},{"name":"High Reflective White","hex":"#f7f7f1"},{"name":"High Rise","hex":"#aeb2b5"},{"name":"High Risk Red","hex":"#c71f2d"},{"name":"High Salute","hex":"#445056"},{"name":"High Seas","hex":"#7dabd8"},{"name":"High Sierra","hex":"#cedee2"},{"name":"High Society","hex":"#cab7c0"},{"name":"High Strung","hex":"#ac9825"},{"name":"High Style","hex":"#a8b1d7"},{"name":"High Style Beige","hex":"#e4d7c3"},{"name":"High Tea","hex":"#7f6f57"},{"name":"High Tea Green","hex":"#567063"},{"name":"High Tide","hex":"#85a6c8"},{"name":"High Voltage","hex":"#eeff11"},{"name":"Highball","hex":"#928c3c"},{"name":"Highland","hex":"#7a9461"},{"name":"Highland Green","hex":"#305144"},{"name":"Highland Ridge","hex":"#8f714b"},{"name":"Highland Thistle","hex":"#b9a1ae"},{"name":"Highlander","hex":"#3a533d"},{"name":"Highlands","hex":"#449084"},{"name":"Highlands Moss","hex":"#445500"},{"name":"Highlands Twilight","hex":"#484a80"},{"name":"Highlight","hex":"#eef0de"},{"name":"Highlight Gold","hex":"#dfc16d"},{"name":"Highlighter","hex":"#ffe536"},{"name":"Highlighter Blue","hex":"#3aafdc"},{"name":"Highlighter Green","hex":"#1bfc06"},{"name":"Highlighter Lavender","hex":"#85569c"},{"name":"Highlighter Lilac","hex":"#d72e83"},{"name":"Highlighter Orange","hex":"#f39539"},{"name":"Highlighter Pink","hex":"#ea5a79"},{"name":"Highlighter Red","hex":"#e94f58"},{"name":"Highlighter Turquoise","hex":"#009e6c"},{"name":"Highlighter Yellow","hex":"#f1e740"},{"name":"Highway","hex":"#bdb388"},{"name":"Highway to Hell","hex":"#cd1102"},{"name":"Hihada Brown","hex":"#752e23"},{"name":"Hiker\'s Delight","hex":"#d2b395"},{"name":"Hiking","hex":"#9d9866"},{"name":"Hiking Boots","hex":"#5e5440"},{"name":"Hiking Trail","hex":"#a99170"},{"name":"Hill Giant","hex":"#e0eedf"},{"name":"Hill Lands","hex":"#8dc248"},{"name":"Hillary","hex":"#a7a07e"},{"name":"Hills of Ireland","hex":"#417b42"},{"name":"Hillsbrad Grass","hex":"#7fa91f"},{"name":"Hillside Green","hex":"#8f9783"},{"name":"Hillside Grove","hex":"#80bf69"},{"name":"Hillside View","hex":"#8da090"},{"name":"Hilltop","hex":"#587366"},{"name":"Hilo Bay","hex":"#768aa1"},{"name":"Himalaya","hex":"#736330"},{"name":"Himalaya Blue","hex":"#aecde0"},{"name":"Himalaya Peaks","hex":"#e2eaf0"},{"name":"Himalaya Sky","hex":"#7695c2"},{"name":"Himalaya White Blue","hex":"#b9dee9"},{"name":"Himalayan Balsam","hex":"#ff99cc"},{"name":"Himalayan Mist","hex":"#e1f0ed"},{"name":"Himalayan Poppy","hex":"#bec6d6"},{"name":"Himalayan Salt","hex":"#c07765"},{"name":"Himawari Yellow","hex":"#fcc800"},{"name":"Hindsight","hex":"#bdc9e3"},{"name":"Hindu Lotus","hex":"#ee4d83"},{"name":"Hinoki","hex":"#f8ddb7"},{"name":"Hinomaru Red","hex":"#bc002d"},{"name":"Hint of Blue","hex":"#cee1f2"},{"name":"Hint of Green","hex":"#dfeade"},{"name":"Hint of Honey","hex":"#ffd66d"},{"name":"Hint of Mauve","hex":"#e1dbd5"},{"name":"Hint of Mint","hex":"#dff1d6"},{"name":"Hint of Orange","hex":"#f8e6d9"},{"name":"Hint of Pink","hex":"#f1e4e1"},{"name":"Hint of Red","hex":"#f6dfe0"},{"name":"Hint of Vanilla","hex":"#eee8dc"},{"name":"Hint of Violet","hex":"#d2d5e1"},{"name":"Hint of Yellow","hex":"#faf1cd"},{"name":"Hinterland","hex":"#616c51"},{"name":"Hinterlands Green","hex":"#304112"},{"name":"Hinting Blue","hex":"#ced9dd"},{"name":"Hip Hop","hex":"#e4e8a7"},{"name":"Hip Waders","hex":"#746a51"},{"name":"Hippie Blue","hex":"#49889a"},{"name":"Hippie Green","hex":"#608a5a"},{"name":"Hippie Pink","hex":"#ab495c"},{"name":"Hippie Trail","hex":"#c6aa2b"},{"name":"Hippogriff Brown","hex":"#5c3c0d"},{"name":"Hippolyta","hex":"#cfc294"},{"name":"Hippy","hex":"#eae583"},{"name":"Hipster","hex":"#f2f1d9"},{"name":"Hipster Hippo","hex":"#bfb3ab"},{"name":"Hipster Salmon","hex":"#fd7c6e"},{"name":"Hipsterfication","hex":"#88513e"},{"name":"Hiroshima Aquamarine","hex":"#7fffd4"},{"name":"His Eyes","hex":"#9bb9e1"},{"name":"Hisoku Blue","hex":"#abced8"},{"name":"Historic Cream","hex":"#fdf3e3"},{"name":"Historic Shade","hex":"#ada791"},{"name":"Historic Town","hex":"#a18a64"},{"name":"Historic White","hex":"#ebe6d7"},{"name":"Historical Grey","hex":"#a7a699"},{"name":"Historical Ruins","hex":"#bfb9a7"},{"name":"Hisui Kingfisher","hex":"#38b48b"},{"name":"Hit Grey","hex":"#a1adb5"},{"name":"Hit Pink","hex":"#fda470"},{"name":"Hitchcock Milk","hex":"#eeffa9"},{"name":"Hitching Post","hex":"#c48d69"},{"name":"Hitsujiyama Pink","hex":"#ee66ff"},{"name":"Hive","hex":"#ffff77"},{"name":"Hoarfrost","hex":"#dbecfb"},{"name":"Hobgoblin","hex":"#01ad8f"},{"name":"Hockham Green","hex":"#59685f"},{"name":"Hoeth Blue","hex":"#57a9d4"},{"name":"Hog Bristle","hex":"#dcd1bb"},{"name":"Hog-Maw","hex":"#fbe8e4"},{"name":"Hog\'s Pudding","hex":"#dad5c7"},{"name":"Hokey Pokey","hex":"#bb8e34"},{"name":"Hoki","hex":"#647d86"},{"name":"Hokkaido Lavender","hex":"#7736d9"},{"name":"Holbein Blue Grey","hex":"#547d86"},{"name":"Hold Your Horses","hex":"#705446"},{"name":"Hole In One","hex":"#4aae97"},{"name":"Holenso","hex":"#598069"},{"name":"Holiday","hex":"#81c3b4"},{"name":"Holiday Blue","hex":"#32bcd1"},{"name":"Holiday Camp","hex":"#6d9e7a"},{"name":"Holiday Road","hex":"#b1d1e2"},{"name":"Holiday Turquoise","hex":"#8ac6bd"},{"name":"Holiday Waffle","hex":"#b78846"},{"name":"Holland Red","hex":"#cb4543"},{"name":"Holland Tile","hex":"#dd9789"},{"name":"Holland Tulip","hex":"#f89851"},{"name":"Hollandaise","hex":"#ffee44"},{"name":"Hollow Brown","hex":"#ac8e84"},{"name":"Hollow Knight","hex":"#330055"},{"name":"Holly","hex":"#25342b"},{"name":"Holly Berry","hex":"#b44e5d"},{"name":"Holly Bush","hex":"#355d51"},{"name":"Holly Fern","hex":"#8cb299"},{"name":"Holly Glen","hex":"#a2b7b5"},{"name":"Holly Green","hex":"#0f9d76"},{"name":"Holly Jolly Christmas","hex":"#b50729"},{"name":"Holly Leaf","hex":"#2e5a50"},{"name":"Hollyhock","hex":"#913881"},{"name":"Hollyhock Bloom","hex":"#b7737d"},{"name":"Hollyhock Blossom Pink","hex":"#bd79a5"},{"name":"Hollyhock Pink","hex":"#c2a1b5"},{"name":"Hollywood","hex":"#c7af4a"},{"name":"Hollywood Asparagus","hex":"#dee7d4"},{"name":"Hollywood Cerise","hex":"#f400a0"},{"name":"Hollywood Golden Age","hex":"#ecd8b1"},{"name":"Hollywood Starlet","hex":"#f2d082"},{"name":"Holy Cannoli","hex":"#db783e"},{"name":"Holy Crow","hex":"#332f2c"},{"name":"Holy Ghost","hex":"#efe9e6"},{"name":"Holy Grail","hex":"#e8d720"},{"name":"Holy Water","hex":"#466e77"},{"name":"Holy White","hex":"#f5f5dc"},{"name":"Homburg Grey","hex":"#666d69"},{"name":"Home Body","hex":"#f3d2b2"},{"name":"Home Brew","hex":"#897b66"},{"name":"Home Plate","hex":"#f7eedb"},{"name":"Home Song","hex":"#f2eec7"},{"name":"Home Sweet Home","hex":"#9b7e65"},{"name":"Homebush","hex":"#726e69"},{"name":"Homegrown","hex":"#63884a"},{"name":"Homeland","hex":"#b18d75"},{"name":"Homeopathic","hex":"#5f7c47"},{"name":"Homeopathic Blue","hex":"#dbe7e3"},{"name":"Homeopathic Green","hex":"#e1ebd8"},{"name":"Homeopathic Lavender","hex":"#e5e0ec"},{"name":"Homeopathic Lilac","hex":"#e1e0eb"},{"name":"Homeopathic Lime","hex":"#e9f6e2"},{"name":"Homeopathic Mint","hex":"#e5ead8"},{"name":"Homeopathic Orange","hex":"#f2e6e1"},{"name":"Homeopathic Red","hex":"#ecdbe0"},{"name":"Homeopathic Rose","hex":"#e8dbdd"},{"name":"Homeopathic Yellow","hex":"#ede7d7"},{"name":"Homestead","hex":"#ac8674"},{"name":"Homestead Brown","hex":"#6f5f52"},{"name":"Homestead Red","hex":"#986e6e"},{"name":"Homeworld","hex":"#2299dd"},{"name":"Homey Cream","hex":"#f0d8af"},{"name":"Honed Soapstone","hex":"#9d9887"},{"name":"Honed Steel","hex":"#867c83"},{"name":"Honest","hex":"#9bb8e2"},{"name":"Honest Blue","hex":"#5a839e"},{"name":"Honesty","hex":"#dfebe9"},{"name":"Honey","hex":"#ae8934"},{"name":"Honey and Cream","hex":"#f1ddad"},{"name":"Honey and Thyme","hex":"#aaaa00"},{"name":"Honey Baked Ham","hex":"#ffaa99"},{"name":"Honey Bear","hex":"#e8c281"},{"name":"Honey Bee","hex":"#fcdfa4"},{"name":"Honey Beehive","hex":"#d39f5f"},{"name":"Honey Bees","hex":"#fbd682"},{"name":"Honey Beige","hex":"#f3e2c6"},{"name":"Honey Bird","hex":"#ffd28d"},{"name":"Honey Blush","hex":"#f5cf9b"},{"name":"Honey Bunny","hex":"#dbb881"},{"name":"Honey Butter","hex":"#f5d29b"},{"name":"Honey Carrot Cake","hex":"#ff9955"},{"name":"Honey Chili","hex":"#883344"},{"name":"Honey Cream","hex":"#fae8ca"},{"name":"Honey Crisp","hex":"#e9c160"},{"name":"Honey Crusted Chicken","hex":"#ffbb55"},{"name":"Honey Do","hex":"#ededc7"},{"name":"Honey Flower","hex":"#5c3c6d"},{"name":"Honey Fungus","hex":"#d18e54"},{"name":"Honey Garlic Beef","hex":"#884422"},{"name":"Honey Ginger","hex":"#ba6219"},{"name":"Honey Glaze","hex":"#ffd775"},{"name":"Honey Glow","hex":"#e8b447"},{"name":"Honey Gold","hex":"#e1b67c"},{"name":"Honey Graham","hex":"#bc886a"},{"name":"Honey Grove","hex":"#dcb149"},{"name":"Honey Haven","hex":"#bc9263"},{"name":"Honey Lime Chicken","hex":"#ddccbb"},{"name":"Honey Locust","hex":"#ffc367"},{"name":"Honey Maple","hex":"#a46d5c"},{"name":"Honey Mist","hex":"#e5d9b2"},{"name":"Honey Moth","hex":"#fbeccc"},{"name":"Honey Mustard","hex":"#b28c4b"},{"name":"Honey N Cream","hex":"#f1dcb7"},{"name":"Honey Nectar","hex":"#f1dda2"},{"name":"Honey Nougat","hex":"#e0bb96"},{"name":"Honey Oat Bread","hex":"#faeed9"},{"name":"Honey Peach","hex":"#dbbf9a"},{"name":"Honey Pink","hex":"#cc99aa"},{"name":"Honey Pot","hex":"#ffc863"},{"name":"Honey Robber","hex":"#dfbb86"},{"name":"Honey Tea","hex":"#d8be89"},{"name":"Honey Teriyaki","hex":"#ee6611"},{"name":"Honey Tone","hex":"#f8dc9b"},{"name":"Honey Wax","hex":"#ffaa22"},{"name":"Honey Yellow","hex":"#ca9456"},{"name":"Honey Yellow Green","hex":"#937016"},{"name":"Honey Yogurt Popsicles","hex":"#f3f0d9"},{"name":"Honeycomb","hex":"#ddaa11"},{"name":"Honeycomb Yellow","hex":"#de9c52"},{"name":"Honeydew","hex":"#f0fff0"},{"name":"Honeydew Melon","hex":"#e6eccc"},{"name":"Honeydew Peel","hex":"#d4fb79"},{"name":"Honeydew Sand","hex":"#eece8d"},{"name":"Honeymoon","hex":"#d7bb80"},{"name":"Honeypot","hex":"#f6deb3"},{"name":"Honeysuckle","hex":"#e8ed69"},{"name":"Honeysuckle Blast","hex":"#b3833f"},{"name":"Honeysuckle Vine","hex":"#fbf1c8"},{"name":"Honeysuckle White","hex":"#f8ecd3"},{"name":"Honeysweet","hex":"#e9cfc8"},{"name":"Hóng Bǎo Shū Red","hex":"#e02006"},{"name":"Hong Kong Mist","hex":"#948e90"},{"name":"Hong Kong Skyline","hex":"#676e7a"},{"name":"Hong Kong Taxi","hex":"#a8102a"},{"name":"Hóng Lóu Mèng Red","hex":"#cf3f4f"},{"name":"Hóng Sè Red","hex":"#ff0809"},{"name":"Hóng Zōng Brown","hex":"#564a33"},{"name":"Honied White","hex":"#fcefd1"},{"name":"Honky Tonk Blue","hex":"#446a8d"},{"name":"Honolulu","hex":"#96cbf1"},{"name":"Honolulu Blue","hex":"#007fbf"},{"name":"Honorable Blue","hex":"#164576"},{"name":"Hooked Mimosa","hex":"#ffc9c4"},{"name":"Hooker\'s Green","hex":"#49796b"},{"name":"Hooloovoo Blue","hex":"#4455ff"},{"name":"Hopbush","hex":"#cd6d93"},{"name":"Hope","hex":"#e581a0"},{"name":"Hope Chest","hex":"#875942"},{"name":"Hopeful","hex":"#f2d4e2"},{"name":"Hopeful Blue","hex":"#a2b9bf"},{"name":"Hopeful Dream","hex":"#95a9cd"},{"name":"Hopi Blue Corn","hex":"#174871"},{"name":"Hopi Moccasin","hex":"#ffe4b5"},{"name":"Hopsack","hex":"#9e8163"},{"name":"Hopscotch","hex":"#afbb42"},{"name":"Horchata","hex":"#f2e9d9"},{"name":"Horenso Green","hex":"#789b73"},{"name":"Horizon","hex":"#648894"},{"name":"Horizon Blue","hex":"#289dbe"},{"name":"Horizon Glow","hex":"#ad7171"},{"name":"Horizon Grey","hex":"#9ca9aa"},{"name":"Horizon Haze","hex":"#80c1e2"},{"name":"Horizon Island","hex":"#cdd4c6"},{"name":"Horizon Sky","hex":"#c2c3d3"},{"name":"Hormagaunt Purple","hex":"#51576f"},{"name":"Horn of Plenty","hex":"#bba46d"},{"name":"Hornblende","hex":"#332222"},{"name":"Hornblende Green","hex":"#234e4d"},{"name":"Horned Frog","hex":"#c2ae87"},{"name":"Horned Lizard","hex":"#e8ead5"},{"name":"Hornet Nest","hex":"#d5dfd3"},{"name":"Hornet Sting","hex":"#ff0033"},{"name":"Hornet Yellow","hex":"#a67c08"},{"name":"Horror Snob","hex":"#d34d4d"},{"name":"Horse Liver","hex":"#543d37"},{"name":"Horseradish","hex":"#e6dfc4"},{"name":"Horseradish Cream","hex":"#eeeadd"},{"name":"Horseradish Yellow","hex":"#ffdea9"},{"name":"Horses Neck","hex":"#6d562c"},{"name":"Horsetail","hex":"#3d5d42"},{"name":"Hortensia","hex":"#61435b"},{"name":"Hosanna","hex":"#dbb8bf"},{"name":"Hospital Green","hex":"#9be5aa"},{"name":"Hosta Flower","hex":"#dcdde7"},{"name":"Hostaleaf","hex":"#475a56"},{"name":"Hot","hex":"#ac4362"},{"name":"Hot and Spicy","hex":"#b35547"},{"name":"Hot Aquarelle Pink","hex":"#ffb3de"},{"name":"Hot Beach","hex":"#fff6d9"},{"name":"Hot Bolognese","hex":"#cc5511"},{"name":"Hot Brown","hex":"#984218"},{"name":"Hot Butter","hex":"#e69d00"},{"name":"Hot Cacao","hex":"#a5694f"},{"name":"Hot Calypso","hex":"#fa8d7c"},{"name":"Hot Caramel","hex":"#cc6e3b"},{"name":"Hot Chili","hex":"#ad756b"},{"name":"Hot Chilli","hex":"#b7513a"},{"name":"Hot Chocolate","hex":"#683939"},{"name":"Hot Cinnamon","hex":"#d1691c"},{"name":"Hot Cocoa","hex":"#806257"},{"name":"Hot Coral","hex":"#f35b53"},{"name":"Hot Cuba","hex":"#bb0033"},{"name":"Hot Curry","hex":"#815b28"},{"name":"Hot Desert","hex":"#eae4da"},{"name":"Hot Dog Relish","hex":"#717c3e"},{"name":"Hot Embers","hex":"#f55931"},{"name":"Hot Fever","hex":"#d40301"},{"name":"Hot Flamin Chilli","hex":"#dd180e"},{"name":"Hot Flamingo","hex":"#b35966"},{"name":"Hot Fudge","hex":"#5e2912"},{"name":"Hot Ginger","hex":"#a36736"},{"name":"Hot Gossip","hex":"#e07c89"},{"name":"Hot Green","hex":"#25ff29"},{"name":"Hot Hazel","hex":"#dd6622"},{"name":"Hot Hibiscus","hex":"#bb2244"},{"name":"Hot Jazz","hex":"#bc3033"},{"name":"Hot Lava","hex":"#aa0033"},{"name":"Hot Lips","hex":"#c9312b"},{"name":"Hot Magenta","hex":"#ff00cc"},{"name":"Hot Mustard","hex":"#735c12"},{"name":"Hot Orange","hex":"#f4893d"},{"name":"Hot Pepper Green","hex":"#598039"},{"name":"Hot Pink","hex":"#ff028d"},{"name":"Hot Purple","hex":"#cb00f5"},{"name":"Hot Sand","hex":"#ccaa00"},{"name":"Hot Sauce","hex":"#ab4f41"},{"name":"Hot Sauna","hex":"#3f3f75"},{"name":"Hot Shot","hex":"#ec4f28"},{"name":"Hot Spice","hex":"#cc2211"},{"name":"Hot Spot","hex":"#ffe597"},{"name":"Hot Stone","hex":"#aba89e"},{"name":"Hot Sun","hex":"#f9b82b"},{"name":"Hot Tamale","hex":"#a24a3f"},{"name":"Hot Toddy","hex":"#a7752c"},{"name":"Hothouse Orchid","hex":"#755468"},{"name":"Hotot Bunny","hex":"#f1f3f2"},{"name":"Hotspot","hex":"#ff4433"},{"name":"Hotter Butter","hex":"#e68a00"},{"name":"Hotter Than Hell","hex":"#ff4455"},{"name":"Hottest Of Pinks","hex":"#ff80ff"},{"name":"Hourglass","hex":"#e5e0d5"},{"name":"House Martin Eggs","hex":"#e2e0db"},{"name":"House Sparrow\'s Egg","hex":"#d6d9dd"},{"name":"House Stark Grey","hex":"#4d495b"},{"name":"Houseplant","hex":"#58713f"},{"name":"How Handsome","hex":"#a0aeb8"},{"name":"How Now","hex":"#886150"},{"name":"Howdy Neighbor","hex":"#f9e4c8"},{"name":"Howdy Partner","hex":"#c6a698"},{"name":"Howling Coyote","hex":"#9c7f5a"},{"name":"Howling Pink","hex":"#e50752"},{"name":"Hú Lán Blue","hex":"#1dacd1"},{"name":"Huáng Dì Yellow","hex":"#f8ff73"},{"name":"Huáng Jīn Zhōu Gold","hex":"#fada6a"},{"name":"Huáng Sè Yellow","hex":"#f0f20c"},{"name":"Hubbard Squash","hex":"#e9bf8c"},{"name":"Hubert\'s Truck Green","hex":"#559933"},{"name":"Huckleberry","hex":"#5b4349"},{"name":"Huckleberry Brown","hex":"#71563b"},{"name":"Hudson","hex":"#eadbd2"},{"name":"Hudson Bee","hex":"#fdef02"},{"name":"Huelveño Horizon","hex":"#17a9e5"},{"name":"Hugh\'s Hue","hex":"#9fa09f"},{"name":"Hugo","hex":"#e6cfcc"},{"name":"Hūi Sè Grey","hex":"#c1c6d3"},{"name":"Hula Girl","hex":"#929264"},{"name":"Hulett Ore","hex":"#726f6c"},{"name":"Hulk","hex":"#008000"},{"name":"Hull Red","hex":"#4d140b"},{"name":"Humble Blush","hex":"#e3cdc2"},{"name":"Humble Gold","hex":"#edc796"},{"name":"Humble Hippo","hex":"#aaaa99"},{"name":"Humboldt Redwoods","hex":"#1f6357"},{"name":"Humid Cave","hex":"#c9ccd2"},{"name":"Hummingbird","hex":"#ceefe4"},{"name":"Hummingbird Green","hex":"#5b724a"},{"name":"Hummus","hex":"#eecc99"},{"name":"Humorous Green","hex":"#c6b836"},{"name":"Humpback Whale","hex":"#473b3b"},{"name":"Humus","hex":"#b7a793"},{"name":"Hundred Waters","hex":"#b2b7d1"},{"name":"Hungry Red","hex":"#f0000d"},{"name":"Hunky Hummingbird","hex":"#bb11ff"},{"name":"Hunt Club","hex":"#2a4f43"},{"name":"Hunt Club Brown","hex":"#938370"},{"name":"Hunter","hex":"#33534b"},{"name":"Hunter Green","hex":"#0b4008"},{"name":"Hunter\'s Hollow","hex":"#989a8d"},{"name":"Hunter\'s Orange","hex":"#db472c"},{"name":"Huntington Garden","hex":"#96a782"},{"name":"Huntington Woods","hex":"#46554c"},{"name":"Hurricane","hex":"#8b7e77"},{"name":"Hurricane Green Blue","hex":"#254d54"},{"name":"Hurricane Haze","hex":"#bdbbad"},{"name":"Hurricane Mist","hex":"#ebeee8"},{"name":"Hush","hex":"#c4bdba"},{"name":"Hush Grey","hex":"#e1ded8"},{"name":"Hush Pink","hex":"#f8e9e2"},{"name":"Hush Puppy","hex":"#e4b095"},{"name":"Hush White","hex":"#e5dad4"},{"name":"Hush-A-Bye","hex":"#5397b7"},{"name":"Hushed Auburn","hex":"#a8857a"},{"name":"Hushed Green","hex":"#c8e0db"},{"name":"Hushed Lilac","hex":"#6e8fb4"},{"name":"Hushed Violet","hex":"#cdbbb9"},{"name":"Hushed White","hex":"#f1f2e4"},{"name":"Husk","hex":"#b2994b"},{"name":"Husky","hex":"#e0ebfa"},{"name":"Husky Orange","hex":"#bb613e"},{"name":"Hutchins Plaza","hex":"#ae957c"},{"name":"Hyacinth","hex":"#936ca7"},{"name":"Hyacinth Arbor","hex":"#6c6783"},{"name":"Hyacinth Dream","hex":"#807388"},{"name":"Hyacinth Ice","hex":"#c8c8d2"},{"name":"Hyacinth Mauve","hex":"#6f729f"},{"name":"Hyacinth Red","hex":"#a75536"},{"name":"Hyacinth Tint","hex":"#b9c4d3"},{"name":"Hyacinth Violet","hex":"#9b4d93"},{"name":"Hyacinth White Soft Blue","hex":"#c1c7d7"},{"name":"Hybrid","hex":"#d0cda9"},{"name":"Hydra","hex":"#006995"},{"name":"Hydra Turquoise","hex":"#007a73"},{"name":"Hydrangea","hex":"#768dc6"},{"name":"Hydrangea Blossom","hex":"#a6aebe"},{"name":"Hydrangea Bouquet","hex":"#caa6a9"},{"name":"Hydrangea Floret","hex":"#e6eae0"},{"name":"Hydrangea Pink","hex":"#e7b6c8"},{"name":"Hydrangea Purple","hex":"#caa0ff"},{"name":"Hydrangea Red","hex":"#9e194d"},{"name":"Hydrargyrum","hex":"#9b9b9b"},{"name":"Hydro","hex":"#49747f"},{"name":"Hydrogen Blue","hex":"#33476d"},{"name":"Hydrology","hex":"#89acac"},{"name":"Hydroport","hex":"#5e9ca1"},{"name":"Hygge Green","hex":"#e0e1d8"},{"name":"Hygiene Green","hex":"#5dbcb4"},{"name":"Hyper Blue","hex":"#015f97"},{"name":"Hyper Green","hex":"#55ff00"},{"name":"Hyper Light Drifter","hex":"#eddbda"},{"name":"Hyper Pink","hex":"#ec006c"},{"name":"Hyperlink Blue","hex":"#0000ee"},{"name":"Hyperpop Green","hex":"#17f9a6"},{"name":"Hypnotic","hex":"#687783"},{"name":"Hypnotic Green","hex":"#73e608"},{"name":"Hypnotic Red","hex":"#cf0d14"},{"name":"Hypnotic Sea","hex":"#00787f"},{"name":"Hypnotism","hex":"#32584c"},{"name":"Hypothalamus Grey","hex":"#415d66"},{"name":"Hyssop","hex":"#6d4976"},{"name":"I Love to Boogie","hex":"#ffa917"},{"name":"I Love You Pink","hex":"#d97d8f"},{"name":"I Miss You","hex":"#dddbc5"},{"name":"I Pink I Can","hex":"#d47f8d"},{"name":"I R Dark Green","hex":"#404034"},{"name":"I\'m a Local","hex":"#ebbf5c"},{"name":"Ibex Brown","hex":"#482400"},{"name":"Ibis","hex":"#f4b3c2"},{"name":"Ibis Mouse","hex":"#e4d2d8"},{"name":"Ibis Pink","hex":"#fbd0b9"},{"name":"Ibis Rose","hex":"#ca628f"},{"name":"Ibis White","hex":"#f2ece6"},{"name":"Ibis Wing","hex":"#f58f84"},{"name":"Ibiza Blue","hex":"#0086bc"},{"name":"Ice","hex":"#d6fffa"},{"name":"Ice Age","hex":"#c6e4e9"},{"name":"Ice Ballet","hex":"#eadee8"},{"name":"Ice Blue","hex":"#739bd0"},{"name":"Ice Blue Grey","hex":"#717787"},{"name":"Ice Bomb","hex":"#cce2dd"},{"name":"Ice Boutique Turquoise","hex":"#a2cdcb"},{"name":"Ice Breaker","hex":"#d4e7e7"},{"name":"Ice Cap Green","hex":"#b9e7dd"},{"name":"Ice Castle","hex":"#d5edfb"},{"name":"Ice Cave","hex":"#a0beda"},{"name":"Ice Citadel","hex":"#b2f8f8"},{"name":"Ice Climber","hex":"#25e2cd"},{"name":"Ice Cold","hex":"#d2eaf1"},{"name":"Ice Cold Green","hex":"#d9ebac"},{"name":"Ice Cold Stare","hex":"#b1d1fc"},{"name":"Ice Cream Cone","hex":"#e3d0bf"},{"name":"Ice Cream Parlour","hex":"#f7d3ad"},{"name":"Ice Crystal Blue","hex":"#a6e3e0"},{"name":"Ice Cube","hex":"#afe3d6"},{"name":"Ice Dagger","hex":"#cee5df"},{"name":"Ice Dark Turquoise","hex":"#005456"},{"name":"Ice Desert","hex":"#d1dce8"},{"name":"Ice Dream","hex":"#eaebe1"},{"name":"Ice Drop","hex":"#d3e2ee"},{"name":"Ice Effect","hex":"#bbeeff"},{"name":"Ice Fishing","hex":"#dcecf5"},{"name":"Ice Floe","hex":"#d8e7e1"},{"name":"Ice Flow","hex":"#bdcbcb"},{"name":"Ice Flower","hex":"#c3e7ec"},{"name":"Ice Folly","hex":"#dbece9"},{"name":"Ice Glow","hex":"#ffffe9"},{"name":"Ice Green","hex":"#87d8c3"},{"name":"Ice Grey","hex":"#cac7c4"},{"name":"Ice Gull Grey Blue","hex":"#9bb2ba"},{"name":"Ice Hot Pink","hex":"#e4bdc2"},{"name":"Ice Ice","hex":"#baebae"},{"name":"Ice Ice Baby","hex":"#00ffdd"},{"name":"Ice Lemon","hex":"#fffbc1"},{"name":"Ice Mauve","hex":"#c9c2dd"},{"name":"Ice Mist","hex":"#b6dbbf"},{"name":"Ice Pack","hex":"#a5dbe3"},{"name":"Ice Palace","hex":"#e2e4d7"},{"name":"Ice Plant","hex":"#cf7ead"},{"name":"Ice Rink","hex":"#bbddee"},{"name":"Ice Sculpture","hex":"#e1e6e5"},{"name":"Ice Shard Soft Blue","hex":"#c1dee2"},{"name":"Ice Temple","hex":"#11ffee"},{"name":"Ice Water Green","hex":"#cdebe1"},{"name":"Ice Yellow","hex":"#fefecd"},{"name":"Ice-Cold White","hex":"#dff0e2"},{"name":"Iceberg","hex":"#dae4ee"},{"name":"Iceberg Green","hex":"#8c9c92"},{"name":"Icebreaker","hex":"#b7c2cc"},{"name":"Icecap","hex":"#c3d6e0"},{"name":"Iced Almond","hex":"#fef4dd"},{"name":"Iced Aniseed","hex":"#cbd3c3"},{"name":"Iced Apricot","hex":"#efd6c0"},{"name":"Iced Aqua","hex":"#a7d4d9"},{"name":"Iced Avocado","hex":"#c8e4b9"},{"name":"Iced Cappuccino","hex":"#9c8866"},{"name":"Iced Celery","hex":"#e5e9b7"},{"name":"Iced Cherry","hex":"#e8c7bf"},{"name":"Iced Coffee","hex":"#aa895d"},{"name":"Iced Copper","hex":"#d0ae9a"},{"name":"Iced Espresso","hex":"#5a4a42"},{"name":"Iced Green Apple","hex":"#ecebc9"},{"name":"Iced Lavender","hex":"#c2c7db"},{"name":"Iced Mauve","hex":"#e8dce3"},{"name":"Iced Mocha","hex":"#a3846c"},{"name":"Iced Orchid","hex":"#8e7d89"},{"name":"Iced Slate","hex":"#d6dcd7"},{"name":"Iced Tea","hex":"#b87253"},{"name":"Iced Tulip","hex":"#afa9af"},{"name":"Iced Vovo","hex":"#e1a4b2"},{"name":"Iced Watermelon","hex":"#d1afb7"},{"name":"Iceland Green","hex":"#008b52"},{"name":"Iceland Poppy","hex":"#f37e27"},{"name":"Icelandic","hex":"#dae4ec"},{"name":"Icelandic Blue","hex":"#a0a4bc"},{"name":"Icelandic Water","hex":"#0011ff"},{"name":"Icelandic Winds","hex":"#d7deeb"},{"name":"Icelandic Winter","hex":"#d9e7e3"},{"name":"Icepick","hex":"#dadcd0"},{"name":"Icery","hex":"#a5fcdc"},{"name":"Icewind Dale","hex":"#e8ecee"},{"name":"Icicle","hex":"#dde7df"},{"name":"Icicle Mint","hex":"#cfe8e6"},{"name":"Icicles","hex":"#bcc5c9"},{"name":"Icing Flower","hex":"#d5b7cb"},{"name":"Icing Rose","hex":"#f5eee7"},{"name":"Icky Green","hex":"#8fae22"},{"name":"Icterine","hex":"#fcf75e"},{"name":"Icy","hex":"#bbc7d2"},{"name":"Icy Bay","hex":"#e0e5e2"},{"name":"Icy Breeze","hex":"#c4ecf0"},{"name":"Icy Brook","hex":"#c1cad9"},{"name":"Icy Glacier","hex":"#d4eae1"},{"name":"Icy Landscape","hex":"#c5e6f7"},{"name":"Icy Lavender","hex":"#e2e2ed"},{"name":"Icy Lemonade","hex":"#f4e8b2"},{"name":"Icy Life","hex":"#55ffee"},{"name":"Icy Lilac","hex":"#e6e9f9"},{"name":"Icy Morn","hex":"#b0d3d1"},{"name":"Icy Pink","hex":"#f5ced8"},{"name":"Icy Pistachio","hex":"#e6f2e9"},{"name":"Icy Plains","hex":"#cfdafb"},{"name":"Icy Teal","hex":"#d6dfe8"},{"name":"Icy Tundra","hex":"#f7f5ec"},{"name":"Icy Water","hex":"#bce2e8"},{"name":"Icy Waterfall","hex":"#c0d2d0"},{"name":"Icy Wind","hex":"#d3f1ee"},{"name":"Identity","hex":"#7890ac"},{"name":"Idol","hex":"#645a8b"},{"name":"Idyllic Isle","hex":"#94c8d2"},{"name":"Idyllic Pink","hex":"#c89eb7"},{"name":"If I Could Fly","hex":"#6d68ed"},{"name":"Igloo","hex":"#fdfcfa"},{"name":"Igloo Blue","hex":"#c9e5eb"},{"name":"Igniting","hex":"#f4d69a"},{"name":"Iguaçuense Waterfall","hex":"#2e776d"},{"name":"Iguana","hex":"#878757"},{"name":"Iguana Green","hex":"#71bc77"},{"name":"Ikkonzome Pink","hex":"#f08f90"},{"name":"Illicit Darkness","hex":"#00022e"},{"name":"Illicit Green","hex":"#56fca2"},{"name":"Illicit Pink","hex":"#ff5ccd"},{"name":"Illicit Purple","hex":"#bf77f6"},{"name":"Illuminated","hex":"#f9e5d8"},{"name":"Illuminati Green","hex":"#419168"},{"name":"Illuminating","hex":"#eeee77"},{"name":"Illuminating Emerald","hex":"#319177"},{"name":"Illuminating Experience","hex":"#dee4e0"},{"name":"Illusion","hex":"#ef95ae"},{"name":"Illusion Blue","hex":"#c3ced8"},{"name":"Illusionist","hex":"#574f64"},{"name":"Illusive Dream","hex":"#e1d5c2"},{"name":"Illusive Green","hex":"#92948d"},{"name":"Illustrious Indigo","hex":"#5533bb"},{"name":"Ilvaite Black","hex":"#330011"},{"name":"Imagery","hex":"#7a6e70"},{"name":"Imaginary Mauve","hex":"#89687d"},{"name":"Imagination","hex":"#dfe0ee"},{"name":"Imagine","hex":"#af9468"},{"name":"Imagine That","hex":"#947c98"},{"name":"Imam Ali Gold","hex":"#fae199"},{"name":"Imayou Pink","hex":"#d0576b"},{"name":"Immaculate Iguana","hex":"#aacc00"},{"name":"Immersed","hex":"#204f54"},{"name":"Immortal","hex":"#c0a9cc"},{"name":"Immortal Indigo","hex":"#d8b7cf"},{"name":"Immortality","hex":"#945b7f"},{"name":"Immortelle Yellow","hex":"#d4a207"},{"name":"Impala","hex":"#f4cf95"},{"name":"Impatiens Petal","hex":"#f1d2d7"},{"name":"Impatiens Pink","hex":"#ffc4bc"},{"name":"Impatient Heart","hex":"#c47d7c"},{"name":"Impatient Pink","hex":"#db7b97"},{"name":"Imperial","hex":"#602f6b"},{"name":"Imperial Blue","hex":"#002395"},{"name":"Imperial Dynasty","hex":"#33746b"},{"name":"Imperial Green","hex":"#408750"},{"name":"Imperial Grey","hex":"#676a6a"},{"name":"Imperial Ivory","hex":"#f1e8d2"},{"name":"Imperial Jewel","hex":"#693e42"},{"name":"Imperial Palace","hex":"#604e7a"},{"name":"Imperial Palm","hex":"#596458"},{"name":"Imperial Primer","hex":"#21303e"},{"name":"Imperial Purple","hex":"#5b3167"},{"name":"Imperial Red","hex":"#ec2938"},{"name":"Imperial Yellow","hex":"#ffb200"},{"name":"Impetuous","hex":"#e4d68c"},{"name":"Impression of Obscurity","hex":"#1a2578"},{"name":"Impressionist Blue","hex":"#a7cac9"},{"name":"Impressionist Sky","hex":"#b9cee0"},{"name":"Impressive Ivory","hex":"#f4dec3"},{"name":"Improbable","hex":"#6e7376"},{"name":"Impromptu","hex":"#705f63"},{"name":"Impulse","hex":"#005b87"},{"name":"Impulsive Purple","hex":"#624977"},{"name":"Impure White","hex":"#f5e7e3"},{"name":"Imrik Blue","hex":"#67aed0"},{"name":"In A Pickle","hex":"#978c59"},{"name":"In Caffeine We Trust","hex":"#693c2a"},{"name":"In for a Penny","hex":"#ee8877"},{"name":"In Good Taste","hex":"#b6d4a0"},{"name":"In the Blue","hex":"#9eb0bb"},{"name":"In the Buff","hex":"#d6cbbf"},{"name":"In the Dark","hex":"#3b3c41"},{"name":"In the Hills","hex":"#aea69b"},{"name":"In the Moment","hex":"#859893"},{"name":"In the Navy","hex":"#283849"},{"name":"In the Pink","hex":"#f4c4d0"},{"name":"In the Red","hex":"#ff2233"},{"name":"In the Shadows","hex":"#cbc4c0"},{"name":"In The Slip","hex":"#e2c3cf"},{"name":"In the Spotlight","hex":"#ede6ed"},{"name":"In the Tropics","hex":"#a3bc3a"},{"name":"In the Twilight","hex":"#84838e"},{"name":"In the Vines","hex":"#5c457b"},{"name":"In the Woods","hex":"#72786f"},{"name":"Inca Gold","hex":"#aa6d28"},{"name":"Inca Temple","hex":"#8c7b6c"},{"name":"Inca Yellow","hex":"#ffd301"},{"name":"Incan Treasure","hex":"#f9ddc4"},{"name":"Incandescence","hex":"#ffbb22"},{"name":"Incarnadine","hex":"#aa0022"},{"name":"Incense","hex":"#af9a7e"},{"name":"Incense Cedar","hex":"#65644a"},{"name":"Inchworm","hex":"#b2ec5d"},{"name":"Incision","hex":"#ff0022"},{"name":"Incognito","hex":"#8e8e82"},{"name":"Incredible White","hex":"#e3ded7"},{"name":"Incremental Blue","hex":"#123456"},{"name":"Incubation Red","hex":"#da1d38"},{"name":"Incubi Darkness","hex":"#0b474a"},{"name":"Incubus","hex":"#772222"},{"name":"Independence","hex":"#4c516d"},{"name":"Independent Gold","hex":"#d2ba83"},{"name":"India Blue","hex":"#008a8e"},{"name":"India Green","hex":"#138808"},{"name":"India Ink","hex":"#3c3d4c"},{"name":"India Trade","hex":"#e0a362"},{"name":"Indian Brass","hex":"#a5823d"},{"name":"Indian Clay","hex":"#f2d0c0"},{"name":"Indian Dance","hex":"#f49476"},{"name":"Indian Fig","hex":"#54332e"},{"name":"Indian Green","hex":"#91955f"},{"name":"Indian Ink","hex":"#3c3f4a"},{"name":"Indian Khaki","hex":"#d3b09c"},{"name":"Indian Lake","hex":"#cc1a97"},{"name":"Indian Maize","hex":"#e4c14d"},{"name":"Indian Mesa","hex":"#d5a193"},{"name":"Indian Muslin","hex":"#eae3d8"},{"name":"Indian Ocean","hex":"#86b7a1"},{"name":"Indian Paintbrush","hex":"#fa9761"},{"name":"Indian Pale Ale","hex":"#d5bc26"},{"name":"Indian Peafowl","hex":"#0044aa"},{"name":"Indian Pink","hex":"#ad5b78"},{"name":"Indian Princess","hex":"#da846d"},{"name":"Indian Red","hex":"#850e04"},{"name":"Indian Reed","hex":"#9f7060"},{"name":"Indian Saffron","hex":"#ff9933"},{"name":"Indian Silk","hex":"#8a5773"},{"name":"Indian Spice","hex":"#ae8845"},{"name":"Indian Summer","hex":"#a85143"},{"name":"Indian Sunset","hex":"#d98a7d"},{"name":"Indian Teal","hex":"#3c586b"},{"name":"Indian White","hex":"#efdac2"},{"name":"Indian Yellow","hex":"#e3a857"},{"name":"Indiana Clay","hex":"#e88a5b"},{"name":"Indica","hex":"#588c3a"},{"name":"Indifferent","hex":"#9892b8"},{"name":"Indigo","hex":"#4b0082"},{"name":"Indigo Batik","hex":"#4467a7"},{"name":"Indigo Black","hex":"#002e51"},{"name":"Indigo Blue","hex":"#3a18b1"},{"name":"Indigo Bunting","hex":"#006ca9"},{"name":"Indigo Carmine","hex":"#006ec7"},{"name":"Indigo Child","hex":"#a09fcc"},{"name":"Indigo Dye","hex":"#00416c"},{"name":"Indigo Hamlet","hex":"#1f4788"},{"name":"Indigo Ink","hex":"#474a4d"},{"name":"Indigo Ink Brown","hex":"#393432"},{"name":"Indigo Iron","hex":"#393f4c"},{"name":"Indigo Light","hex":"#5d76cb"},{"name":"Indigo Mouse","hex":"#6c848d"},{"name":"Indigo Navy Blue","hex":"#4c5e87"},{"name":"Indigo Night","hex":"#324680"},{"name":"Indigo Purple","hex":"#660099"},{"name":"Indigo Red","hex":"#695a78"},{"name":"Indigo Sloth","hex":"#1f0954"},{"name":"Indigo White","hex":"#ebf6f7"},{"name":"Indiscreet","hex":"#ac3b3b"},{"name":"Individual White","hex":"#d4cdca"},{"name":"Indiviolet Sunset","hex":"#6611aa"},{"name":"Indochine","hex":"#9c5b34"},{"name":"Indocile Tiger","hex":"#b96b00"},{"name":"Indolence","hex":"#a29dad"},{"name":"Indonesian Jungle","hex":"#008c69"},{"name":"Indonesian Rattan","hex":"#d1b272"},{"name":"Indubitably Green","hex":"#729e42"},{"name":"Indulgence","hex":"#533d47"},{"name":"Indulgent","hex":"#66565f"},{"name":"Indulgent Mocha","hex":"#d1c5b7"},{"name":"Industrial Age","hex":"#aeadad"},{"name":"Industrial Black","hex":"#322b26"},{"name":"Industrial Blue","hex":"#00898c"},{"name":"Industrial Green","hex":"#114400"},{"name":"Industrial Grey","hex":"#5b5a57"},{"name":"Industrial Revolution","hex":"#737373"},{"name":"Industrial Rose","hex":"#e09887"},{"name":"Industrial Strength","hex":"#877a65"},{"name":"Industrial Turquoise","hex":"#008a70"},{"name":"Ineffable Forest","hex":"#4f9153"},{"name":"Ineffable Green","hex":"#63f7b4"},{"name":"Ineffable Ice Cap","hex":"#caede4"},{"name":"Ineffable Linen","hex":"#e6e1c7"},{"name":"Ineffable Magenta","hex":"#cc99cc"},{"name":"Inescapable Lover","hex":"#820e3b"},{"name":"Infamous","hex":"#777985"},{"name":"Infatuation","hex":"#f0d5ea"},{"name":"Infectious Love","hex":"#bb1177"},{"name":"Inferno","hex":"#da5736"},{"name":"Inferno Orange","hex":"#ff4400"},{"name":"Infinite Deep Sea","hex":"#435a6f"},{"name":"Infinite Night","hex":"#071037"},{"name":"Infinitesimal Blue","hex":"#bddde1"},{"name":"Infinitesimal Green","hex":"#d7e4cc"},{"name":"Infinity","hex":"#222831"},{"name":"Infinity and Beyond","hex":"#6e7e99"},{"name":"Infinity Pool","hex":"#94d4e4"},{"name":"Informal Ivory","hex":"#f1e7d0"},{"name":"Informative Pink","hex":"#fe85ab"},{"name":"Infra-White","hex":"#ffccee"},{"name":"Infrared","hex":"#fe486c"},{"name":"Infrared Burn","hex":"#dd3333"},{"name":"Infrared Flush","hex":"#cc3344"},{"name":"Infrared Gloze","hex":"#cc3355"},{"name":"Infrared Tang","hex":"#dd2244"},{"name":"Infusion","hex":"#c8d0ca"},{"name":"Ingénue Blue","hex":"#334c5d"},{"name":"Inglenook Olive","hex":"#aaa380"},{"name":"Inheritance","hex":"#d7ae77"},{"name":"Ink Black","hex":"#252024"},{"name":"Ink Blotch","hex":"#00608b"},{"name":"Ink Blue","hex":"#0c5a77"},{"name":"Inkblot","hex":"#393f4b"},{"name":"Inked","hex":"#3b5066"},{"name":"Inked Silk","hex":"#d9dce4"},{"name":"Inkjet","hex":"#44556b"},{"name":"Inkwell","hex":"#31363a"},{"name":"Inky Blue","hex":"#4e7287"},{"name":"Inky Storm","hex":"#535266"},{"name":"Inky Violet","hex":"#747b9f"},{"name":"Inland","hex":"#606b54"},{"name":"Inland Waters","hex":"#7c939d"},{"name":"Inlet Harbor","hex":"#3f586e"},{"name":"Inner Cervela","hex":"#bbaa7e"},{"name":"Inner Child","hex":"#f1bdb2"},{"name":"Inner Journey","hex":"#6d69a1"},{"name":"Inner Sanctum","hex":"#78a6b5"},{"name":"Inner Space","hex":"#285b5f"},{"name":"Inner Touch","hex":"#bbafba"},{"name":"Inness Sage","hex":"#959272"},{"name":"Innisfree Garden","hex":"#229900"},{"name":"Innocence","hex":"#ebd1cf"},{"name":"Innocent Blue","hex":"#91b3d0"},{"name":"Innocent Pink","hex":"#856f79"},{"name":"Innocent Snowdrop","hex":"#d0c7ff"},{"name":"Innuendo","hex":"#a4b0c4"},{"name":"Inoffensive Blue","hex":"#114477"},{"name":"Inside","hex":"#221122"},{"name":"Inside Passage","hex":"#e0cfb5"},{"name":"Insightful Rose","hex":"#c9b0ab"},{"name":"Insignia","hex":"#285294"},{"name":"Insignia Blue","hex":"#313f58"},{"name":"Insignia White","hex":"#ecf3f9"},{"name":"Insomnia","hex":"#06012c"},{"name":"Insomniac Blue","hex":"#110077"},{"name":"Inspiration Peak","hex":"#4fa183"},{"name":"Inspired Lilac","hex":"#dfd9e4"},{"name":"Instant","hex":"#d9cec7"},{"name":"Instant Classic","hex":"#e3dac6"},{"name":"Instant Noodles","hex":"#f4d493"},{"name":"Instant Orange","hex":"#ff8d28"},{"name":"Instant Relief","hex":"#ede7d2"},{"name":"Instigate","hex":"#ada7c8"},{"name":"Integra","hex":"#405e95"},{"name":"Integrity","hex":"#233e57"},{"name":"Intellectual","hex":"#3f414c"},{"name":"Intellectual Grey","hex":"#a8a093"},{"name":"Intense Brown","hex":"#7f5400"},{"name":"Intense Green","hex":"#123328"},{"name":"Intense Jade","hex":"#68c89d"},{"name":"Intense Mauve","hex":"#682d63"},{"name":"Intense Passion","hex":"#df3163"},{"name":"Intense Purple","hex":"#4d4a6f"},{"name":"Intense Teal","hex":"#00978c"},{"name":"Intense Yellow","hex":"#e19c35"},{"name":"Interactive Cream","hex":"#e4caad"},{"name":"Intercoastal","hex":"#a0cdde"},{"name":"Intercoastal Grey","hex":"#a8b5bc"},{"name":"Interdimensional Blue","hex":"#360ccc"},{"name":"Interdimensional Portal","hex":"#d6e6e6"},{"name":"Interesting Aqua","hex":"#9bafb2"},{"name":"Interface Tan","hex":"#c1a392"},{"name":"Intergalactic","hex":"#4d516c"},{"name":"Intergalactic Blue","hex":"#afe0ef"},{"name":"Intergalactic Cowboy","hex":"#222266"},{"name":"Intergalactic Highway","hex":"#273287"},{"name":"Intergalactic Ray","hex":"#573935"},{"name":"Intergalactic Settlement","hex":"#5b1e8b"},{"name":"Interior Green","hex":"#536437"},{"name":"Interlude","hex":"#564355"},{"name":"Intermediate Blue","hex":"#56626e"},{"name":"Intermediate Green","hex":"#137730"},{"name":"Intermezzo","hex":"#019694"},{"name":"International","hex":"#3762a5"},{"name":"International Blue","hex":"#002fa7"},{"name":"International Klein Blue","hex":"#002fa6"},{"name":"International Orange","hex":"#ba160c"},{"name":"Interstellar Blue","hex":"#001155"},{"name":"Intimate Journal","hex":"#ccbb99"},{"name":"Intimate White","hex":"#f0e1d8"},{"name":"Into the Blue","hex":"#4f7ba7"},{"name":"Into the Green","hex":"#0d6c49"},{"name":"Into the Night","hex":"#1e3642"},{"name":"Into the Stratosphere","hex":"#425267"},{"name":"Intoxicate","hex":"#11bb55"},{"name":"Intoxication","hex":"#a1ac4d"},{"name":"Intrepid Grey","hex":"#e0e2e0"},{"name":"Intricate Ivory","hex":"#edddca"},{"name":"Intrigue","hex":"#635951"},{"name":"Intrigue Red","hex":"#b24648"},{"name":"Introspective","hex":"#6d6053"},{"name":"Intuitive","hex":"#cfc6bc"},{"name":"Inuit","hex":"#55a0b7"},{"name":"Inuit Blue","hex":"#d8e4e7"},{"name":"Inuit Ice","hex":"#c2bdc2"},{"name":"Inuit White","hex":"#d1cdd0"},{"name":"Invasive Indigo","hex":"#49017e"},{"name":"Inventive Orange","hex":"#e89d6f"},{"name":"Inverness","hex":"#576238"},{"name":"Inverness Grey","hex":"#dce3e2"},{"name":"Invigorate","hex":"#e47237"},{"name":"Invigorating","hex":"#f1eab4"},{"name":"Invitation Gold","hex":"#a6773f"},{"name":"Inviting Gesture","hex":"#cdc29d"},{"name":"Inviting Ivory","hex":"#f2d5b0"},{"name":"Inviting Veranda","hex":"#b9c4bc"},{"name":"Iolite","hex":"#7d89bb"},{"name":"Ionian","hex":"#368976"},{"name":"Ionic Ivory","hex":"#e7dfc5"},{"name":"Ionic Sky","hex":"#d0ede9"},{"name":"Ionized-air Glow","hex":"#55ddff"},{"name":"Iqaluit Ice","hex":"#93cfe3"},{"name":"Ireland Green","hex":"#006c2e"},{"name":"Iridescent","hex":"#3a5b52"},{"name":"Iridescent Green","hex":"#48c072"},{"name":"Iridescent Peacock","hex":"#00707d"},{"name":"Iridescent Purple","hex":"#966fd6"},{"name":"Iridescent Red","hex":"#cc4e5c"},{"name":"Iridescent Turquoise","hex":"#7bfdc7"},{"name":"Iris","hex":"#5a4fcf"},{"name":"Iris Bloom","hex":"#5b649e"},{"name":"Iris Blue","hex":"#03b4c8"},{"name":"Iris Eyes","hex":"#767694"},{"name":"Iris Ice","hex":"#e0e3ef"},{"name":"Iris Isle","hex":"#e8e5ec"},{"name":"Iris Mauve","hex":"#b39b94"},{"name":"Iris Orchid","hex":"#a767a2"},{"name":"Iris Petal","hex":"#6b6273"},{"name":"Iris Pink","hex":"#cab9be"},{"name":"Irish","hex":"#398a59"},{"name":"Irish Beauty","hex":"#007f59"},{"name":"Irish Charm","hex":"#69905b"},{"name":"Irish Clover","hex":"#53734c"},{"name":"Irish Coffee","hex":"#62422b"},{"name":"Irish Cream","hex":"#e9dbbe"},{"name":"Irish Folklore","hex":"#d3e3bf"},{"name":"Irish Green","hex":"#019529"},{"name":"Irish Hedge","hex":"#7cb386"},{"name":"Irish Jig","hex":"#66cc11"},{"name":"Irish Linen","hex":"#eee4e0"},{"name":"Irish Mist","hex":"#e7e5db"},{"name":"Irish Moor","hex":"#b5c0b3"},{"name":"Irish Spring","hex":"#90cca3"},{"name":"Irogon Blue","hex":"#9dacb5"},{"name":"Iroko","hex":"#433120"},{"name":"Iron","hex":"#5e5e5e"},{"name":"Iron Blue","hex":"#114b91"},{"name":"Iron Creek","hex":"#50676b"},{"name":"Iron Earth","hex":"#8aa1a6"},{"name":"Iron Fist","hex":"#cbcdcd"},{"name":"Iron Fixture","hex":"#5d5b5b"},{"name":"Iron Flint","hex":"#6e3b31"},{"name":"Iron Forge","hex":"#475a5e"},{"name":"Iron Gate","hex":"#585a60"},{"name":"Iron Grey","hex":"#7c7f7c"},{"name":"Iron Head","hex":"#344d56"},{"name":"Iron Maiden","hex":"#d6d1dc"},{"name":"Iron Mountain","hex":"#757574"},{"name":"Iron Orange","hex":"#e7661e"},{"name":"Iron Ore","hex":"#af5b46"},{"name":"Iron Oxide","hex":"#835949"},{"name":"Iron River","hex":"#4d504b"},{"name":"Iron Teal","hex":"#114e56"},{"name":"Iron Wood","hex":"#a0a6a8"},{"name":"Iron-ic","hex":"#6a6b67"},{"name":"Ironbreaker","hex":"#887f85"},{"name":"Ironbreaker Metal","hex":"#a1a6a9"},{"name":"Ironclad","hex":"#615c55"},{"name":"Ironside","hex":"#7e8082"},{"name":"Ironside Grey","hex":"#706e66"},{"name":"Ironstone","hex":"#865040"},{"name":"Ironwood","hex":"#a19583"},{"name":"Irradiant Iris","hex":"#dadee6"},{"name":"Irradiated Green","hex":"#aaff55"},{"name":"Irresistible","hex":"#b3446c"},{"name":"Irresistible Beige","hex":"#e6ddc6"},{"name":"Irrigation","hex":"#786c57"},{"name":"Irrigo Purple","hex":"#9955ff"},{"name":"Irritated Ibis","hex":"#ee1122"},{"name":"Is It Cold","hex":"#0022ff"},{"name":"Isabella\'s Aqua","hex":"#9bd8c4"},{"name":"Isabelline","hex":"#f4f0ec"},{"name":"Ishtar","hex":"#484450"},{"name":"Islamic Green","hex":"#009900"},{"name":"Island Aqua","hex":"#2bb9af"},{"name":"Island Breeze","hex":"#8adacf"},{"name":"Island Coral","hex":"#d8877a"},{"name":"Island Dream","hex":"#139ba2"},{"name":"Island Embrace","hex":"#ded9b4"},{"name":"Island Girl","hex":"#ffb59a"},{"name":"Island Green","hex":"#2bae66"},{"name":"Island Hopping","hex":"#f6e3d6"},{"name":"Island Light","hex":"#a7c9eb"},{"name":"Island Lush","hex":"#008292"},{"name":"Island Moment","hex":"#3fb2a8"},{"name":"Island Monkey","hex":"#ad4e1a"},{"name":"Island Oasis","hex":"#88d9d8"},{"name":"Island Palm","hex":"#6c7e71"},{"name":"Island Paradise","hex":"#8ddee1"},{"name":"Island Sea","hex":"#81d7d0"},{"name":"Island Spice","hex":"#f8eddb"},{"name":"Island View","hex":"#c3ddee"},{"name":"Isle of Capri","hex":"#0099c9"},{"name":"Isle of Dreams","hex":"#bcccb5"},{"name":"Isle of Pines","hex":"#3e6655"},{"name":"Isle of Sand","hex":"#f9dd13"},{"name":"Isle Royale","hex":"#80d7cf"},{"name":"Isn\'t It Just Peachy","hex":"#ffb278"},{"name":"Isolation","hex":"#494d55"},{"name":"Isotonic Water","hex":"#ddff55"},{"name":"Issey-San","hex":"#cfdac3"},{"name":"It Works","hex":"#af8a5b"},{"name":"It\'s a Girl","hex":"#de95ae"},{"name":"It\'s A Girl!","hex":"#ffdae2"},{"name":"It\'s My Party","hex":"#cc7365"},{"name":"It\'s Your Mauve","hex":"#bc989e"},{"name":"Italian Basil","hex":"#5f6957"},{"name":"Italian Buckthorn","hex":"#6b8c23"},{"name":"Italian Clay","hex":"#d79979"},{"name":"Italian Fitch","hex":"#d0c8e6"},{"name":"Italian Grape","hex":"#413d4b"},{"name":"Italian Ice","hex":"#e2e0d3"},{"name":"Italian Lace","hex":"#ede9d4"},{"name":"Italian Mocha","hex":"#93685a"},{"name":"Italian Olive","hex":"#807243"},{"name":"Italian Plum","hex":"#59354a"},{"name":"Italian Roast","hex":"#221111"},{"name":"Italian Sky Blue","hex":"#b2fcff"},{"name":"Italian Straw","hex":"#e7d3a1"},{"name":"Italian Villa","hex":"#ad5d5d"},{"name":"Italiano Rose","hex":"#d16169"},{"name":"Ivalo River","hex":"#cce5e8"},{"name":"Ivoire","hex":"#e4ceac"},{"name":"Ivory","hex":"#fffff0"},{"name":"Ivory Buff","hex":"#ebd999"},{"name":"Ivory Charm","hex":"#fff6da"},{"name":"Ivory Coast","hex":"#faf5de"},{"name":"Ivory Cream","hex":"#d5b89c"},{"name":"Ivory Invitation","hex":"#fcefd6"},{"name":"Ivory Keys","hex":"#f8f7e6"},{"name":"Ivory Lace","hex":"#ece2cc"},{"name":"Ivory Lashes","hex":"#e6e6d8"},{"name":"Ivory Memories","hex":"#e6ddcd"},{"name":"Ivory Mist","hex":"#efeade"},{"name":"Ivory Oats","hex":"#f9e4c1"},{"name":"Ivory Palace","hex":"#eeeadc"},{"name":"Ivory Paper","hex":"#e6deca"},{"name":"Ivory Parchment","hex":"#efe3ca"},{"name":"Ivory Ridge","hex":"#d9c9b8"},{"name":"Ivory Steam","hex":"#f0eada"},{"name":"Ivory Stone","hex":"#eee1cc"},{"name":"Ivory Tassel","hex":"#f8ead8"},{"name":"Ivory Tower","hex":"#fbf3f1"},{"name":"Ivory Wedding","hex":"#edede4"},{"name":"Ivy","hex":"#277b74"},{"name":"Ivy Enchantment","hex":"#93a272"},{"name":"Ivy Garden","hex":"#818068"},{"name":"Ivy Green","hex":"#585442"},{"name":"Ivy League","hex":"#007958"},{"name":"Ivy Topiary","hex":"#67614f"},{"name":"Ivy Wreath","hex":"#708d76"},{"name":"Iwai Brown","hex":"#6b6f59"},{"name":"Iwaicha Brown","hex":"#5e5545"},{"name":"Iyanden Darksun","hex":"#a59a59"},{"name":"Izmir Pink","hex":"#ceb0b5"},{"name":"Izmir Purple","hex":"#4d426e"},{"name":"J\'s Big Heart","hex":"#a06856"},{"name":"Jabłoński Brown","hex":"#ad6d68"},{"name":"Jabłoński Grey","hex":"#536871"},{"name":"Jacaranda","hex":"#f9d7ee"},{"name":"Jacaranda Jazz","hex":"#6c70a9"},{"name":"Jacaranda Light","hex":"#a8acb7"},{"name":"Jacaranda Pink","hex":"#c760ff"},{"name":"Jacarta","hex":"#440044"},{"name":"Jacey\'s Favorite","hex":"#bcaccd"},{"name":"Jack and Coke","hex":"#920f0e"},{"name":"Jack Bone","hex":"#869f69"},{"name":"Jack Frost","hex":"#dae6e3"},{"name":"Jack Rabbit","hex":"#c0b2b1"},{"name":"Jack-O","hex":"#fb9902"},{"name":"Jack-O-Lantern","hex":"#d37a51"},{"name":"Jackal","hex":"#a9a093"},{"name":"Jackfruit","hex":"#f7c680"},{"name":"Jacko Bean","hex":"#413628"},{"name":"Jackpot","hex":"#d19431"},{"name":"Jackson Antique","hex":"#c3bda9"},{"name":"Jacksons Purple","hex":"#3d3f7d"},{"name":"Jacobean Lace","hex":"#e4ccb0"},{"name":"Jacqueline","hex":"#5d4e50"},{"name":"Jacuzzi","hex":"#007cac"},{"name":"Jade","hex":"#00a86b"},{"name":"Jade Bracelet","hex":"#c2d7ad"},{"name":"Jade Cream","hex":"#59b587"},{"name":"Jade Dragon","hex":"#6aa193"},{"name":"Jade Dust","hex":"#ceddda"},{"name":"Jade Glass","hex":"#00ced1"},{"name":"Jade Gravel","hex":"#0abab5"},{"name":"Jade Green","hex":"#779977"},{"name":"Jade Jewel","hex":"#247e81"},{"name":"Jade Light Green","hex":"#c1cab7"},{"name":"Jade Lime","hex":"#9dca7b"},{"name":"Jade Mist","hex":"#d6e9d7"},{"name":"Jade Mountain","hex":"#34c2a7"},{"name":"Jade Mussel Green","hex":"#166a45"},{"name":"Jade of Emeralds","hex":"#318f33"},{"name":"Jade Orchid","hex":"#00aaaa"},{"name":"Jade Powder","hex":"#2baf6a"},{"name":"Jade Sea","hex":"#b8e0d0"},{"name":"Jade Shard","hex":"#017b92"},{"name":"Jade Spell","hex":"#c1e5d5"},{"name":"Jade Stone Green","hex":"#74bb83"},{"name":"Jade Tinge","hex":"#bbccbc"},{"name":"Jaded","hex":"#0092a1"},{"name":"Jaded Clouds","hex":"#aeddd3"},{"name":"Jaded Ginger","hex":"#cc7766"},{"name":"Jadeite","hex":"#38c6a1"},{"name":"Jadesheen","hex":"#77a276"},{"name":"Jadestone","hex":"#01a6a0"},{"name":"Jadite","hex":"#61826c"},{"name":"Jaffa","hex":"#e27945"},{"name":"Jaffa Orange","hex":"#d87839"},{"name":"Jagdwurst","hex":"#ffcccb"},{"name":"Jagged Ice","hex":"#cae7e2"},{"name":"Jagger","hex":"#3f2e4c"},{"name":"Jaguar","hex":"#29292f"},{"name":"Jaguar Rose","hex":"#f1b3b6"},{"name":"Jaipur","hex":"#a43323"},{"name":"Jaipur Pink","hex":"#d0417e"},{"name":"Jakarta","hex":"#efddc3"},{"name":"Jakarta Skyline","hex":"#3d325d"},{"name":"Jalapeño","hex":"#9a8d3f"},{"name":"Jalapeño Bouquet","hex":"#576648"},{"name":"Jalapeño Red","hex":"#c01141"},{"name":"Jam Session","hex":"#d4cfd6"},{"name":"Jama Masjid Taupe","hex":"#b38b6d"},{"name":"Jamaica Bay","hex":"#95cbc4"},{"name":"Jamaican Dream","hex":"#04627a"},{"name":"Jamaican Jade","hex":"#64d1be"},{"name":"Jamaican Sea","hex":"#26a5ba"},{"name":"Jambalaya","hex":"#f7b572"},{"name":"James Blonde","hex":"#f2e3b5"},{"name":"Jane Purple","hex":"#e3c2ff"},{"name":"Janemba Red","hex":"#ff2211"},{"name":"Janey\'s Party","hex":"#ceb5c8"},{"name":"Janitor","hex":"#2266cc"},{"name":"Janna","hex":"#f4ebd3"},{"name":"January Blue","hex":"#00a1b9"},{"name":"January Dawn","hex":"#dfe2e5"},{"name":"January Frost","hex":"#99c1dc"},{"name":"January Garnet","hex":"#7b4141"},{"name":"Japan Blush","hex":"#ddd6f3"},{"name":"Japanese Bonsai","hex":"#829f96"},{"name":"Japanese Carmine","hex":"#9f2832"},{"name":"Japanese Coral","hex":"#c47a88"},{"name":"Japanese Cypress","hex":"#965036"},{"name":"Japanese Fern","hex":"#b5b94c"},{"name":"Japanese Horseradish","hex":"#a8bf93"},{"name":"Japanese Indigo","hex":"#264348"},{"name":"Japanese Iris","hex":"#7f5d3b"},{"name":"Japanese Kimono","hex":"#cc6358"},{"name":"Japanese Koi","hex":"#db7842"},{"name":"Japanese Laurel","hex":"#2f7532"},{"name":"Japanese Maple","hex":"#780109"},{"name":"Japanese Poet","hex":"#c4bab7"},{"name":"Japanese Rose Garden","hex":"#e4b6c4"},{"name":"Japanese Sable","hex":"#313739"},{"name":"Japanese Violet","hex":"#5b3256"},{"name":"Japanese Wax Tree","hex":"#b77b57"},{"name":"Japanese White","hex":"#eee6d9"},{"name":"Japanese Wineberry","hex":"#522c35"},{"name":"Japanese Yew","hex":"#d8a373"},{"name":"Japonica","hex":"#ce7259"},{"name":"Jardin","hex":"#bdd0ab"},{"name":"Jardin De Hierbas","hex":"#c6caa7"},{"name":"Jardinière","hex":"#019a74"},{"name":"Jargon Jade","hex":"#53a38f"},{"name":"Jarrah","hex":"#827058"},{"name":"Jasmine","hex":"#fff4bb"},{"name":"Jasmine Flower","hex":"#f4e8e1"},{"name":"Jasmine Green","hex":"#79c63d"},{"name":"Jasmine Hollow","hex":"#7e7468"},{"name":"Jasper","hex":"#d73b3e"},{"name":"Jasper Cane","hex":"#e7c89f"},{"name":"Jasper Green","hex":"#57605a"},{"name":"Jasper Orange","hex":"#de8f4e"},{"name":"Jasper Park","hex":"#4a6558"},{"name":"Jasper Red","hex":"#fa2b00"},{"name":"Jasper Stone","hex":"#8d9e97"},{"name":"Java","hex":"#259797"},{"name":"Jay Bird","hex":"#50859e"},{"name":"Jay Wing Feathers","hex":"#7994b5"},{"name":"Jazlyn","hex":"#464152"},{"name":"Jazz","hex":"#5f2c2f"},{"name":"Jazz Age Blues","hex":"#3b4a6c"},{"name":"Jazz Age Coral","hex":"#f1bfb1"},{"name":"Jazz Blue","hex":"#1a6a9f"},{"name":"Jazz Tune","hex":"#9892a8"},{"name":"Jazzberry Jam","hex":"#674247"},{"name":"Jazzercise","hex":"#b6e12a"},{"name":"Jazzy","hex":"#c31e4e"},{"name":"Jazzy Jade","hex":"#55ddcc"},{"name":"Je T’aime","hex":"#b36b92"},{"name":"Jealous Jellyfish","hex":"#bb0099"},{"name":"Jealousy","hex":"#7fab60"},{"name":"Jean Jacket Blue","hex":"#7b90a2"},{"name":"Jeans Indigo","hex":"#6d8994"},{"name":"Jedi Night","hex":"#041108"},{"name":"Jefferson Cream","hex":"#f1e4c8"},{"name":"Jelly Bean","hex":"#44798e"},{"name":"Jelly Berry","hex":"#ee1177"},{"name":"Jelly Slug","hex":"#de6646"},{"name":"Jelly Yogurt","hex":"#ede6d9"},{"name":"Jellybean Pink","hex":"#9b6575"},{"name":"Jellyfish Blue","hex":"#95cad0"},{"name":"Jellyfish Sting","hex":"#ee6688"},{"name":"Jemima","hex":"#f6d67f"},{"name":"Jerboa","hex":"#dfb886"},{"name":"Jericho Jade","hex":"#4d8681"},{"name":"Jersey Cream","hex":"#f5debb"},{"name":"Jess","hex":"#25b387"},{"name":"Jester Red","hex":"#ac112c"},{"name":"Jet","hex":"#343434"},{"name":"Jet Black","hex":"#353337"},{"name":"Jet d\'Eau","hex":"#d1eaec"},{"name":"Jet Fuel","hex":"#575654"},{"name":"Jet Grey","hex":"#9d9a9a"},{"name":"Jet Set","hex":"#2f3734"},{"name":"Jet Ski","hex":"#5492af"},{"name":"Jet Stream","hex":"#bbd0c9"},{"name":"Jet White","hex":"#f2ede2"},{"name":"Jetski Race","hex":"#005d96"},{"name":"Jetstream","hex":"#b0d2d6"},{"name":"Jeune Citron","hex":"#a6d40d"},{"name":"Jewel","hex":"#136843"},{"name":"Jewel Beetle","hex":"#8cc90b"},{"name":"Jewel Caterpillar","hex":"#d374d5"},{"name":"Jewel Cave","hex":"#3c4173"},{"name":"Jewel Weed","hex":"#46a795"},{"name":"Jewel White","hex":"#cfeee1"},{"name":"Jewellery White","hex":"#ced6e6"},{"name":"Jewett White","hex":"#e6ddca"},{"name":"Jigglypuff","hex":"#ffaaff"},{"name":"Jimbaran Bay","hex":"#3d5d64"},{"name":"Jīn Huáng Gold","hex":"#f5d565"},{"name":"Jīn Sè Gold","hex":"#a5a502"},{"name":"Jīn Zōng Gold","hex":"#8e7618"},{"name":"Jinza Safflower","hex":"#ee827c"},{"name":"Jinzamomi Pink","hex":"#f7665a"},{"name":"Jitterbug","hex":"#bac08a"},{"name":"Jitterbug Jade","hex":"#019d6e"},{"name":"Jitterbug Lure","hex":"#8db0ad"},{"name":"Jittery Jade","hex":"#77eebb"},{"name":"Job\'s Tears","hex":"#005b7a"},{"name":"Jocose Jade","hex":"#77cc99"},{"name":"Jocular Green","hex":"#cce2ca"},{"name":"Jodhpur Blue","hex":"#9bd7e9"},{"name":"Jodhpur Tan","hex":"#dad1c8"},{"name":"Jodhpurs","hex":"#ebdcb6"},{"name":"Jogging Path","hex":"#c0b9a9"},{"name":"John Lemon","hex":"#eeff22"},{"name":"Joie De Vivre","hex":"#bc86af"},{"name":"Jojoba","hex":"#d9bd7d"},{"name":"Jokaero Orange","hex":"#ea5505"},{"name":"Joker\'s Smile","hex":"#d70141"},{"name":"Jolly Green","hex":"#5e774a"},{"name":"Jolly Jade","hex":"#77ccbb"},{"name":"Jolt of Jade","hex":"#4abca0"},{"name":"Jonquil","hex":"#eef293"},{"name":"Jonquil Trail","hex":"#f7d395"},{"name":"Jordan Jazz","hex":"#037a3b"},{"name":"Jordy Blue","hex":"#7aaae0"},{"name":"Josephine","hex":"#d3c3be"},{"name":"Joshua Tree","hex":"#7fb377"},{"name":"Journal White","hex":"#e6d3b2"},{"name":"Journey to the Sky","hex":"#cdeced"},{"name":"Journey\'s End","hex":"#bac9d4"},{"name":"Joust Blue","hex":"#55aaff"},{"name":"Jovial","hex":"#eeb9a7"},{"name":"Jovial Jade","hex":"#88ddaa"},{"name":"Joyful","hex":"#f6eec0"},{"name":"Joyful Lilac","hex":"#e4d4e2"},{"name":"Joyful Orange","hex":"#fa9335"},{"name":"Joyful Poppy","hex":"#ebada5"},{"name":"Joyful Ruby","hex":"#503136"},{"name":"Joyful Tears","hex":"#006669"},{"name":"Joyous","hex":"#ffeeb0"},{"name":"Joyous Song","hex":"#5b365e"},{"name":"Jú Huáng Tangerine","hex":"#f9900f"},{"name":"Jube","hex":"#4b373c"},{"name":"Jube Green","hex":"#78cf86"},{"name":"Jubilant Jade","hex":"#44aa77"},{"name":"Jubilation","hex":"#fbdd24"},{"name":"Jubilee","hex":"#7e6099"},{"name":"Jubilee Grey","hex":"#7c7379"},{"name":"Judah Silk","hex":"#473739"},{"name":"Judge Grey","hex":"#5d5346"},{"name":"Jugendstil Green","hex":"#c3c8b3"},{"name":"Jugendstil Pink","hex":"#9d6375"},{"name":"Jugendstil Turquoise","hex":"#5f9b9c"},{"name":"Juggernaut","hex":"#255367"},{"name":"Juice Violet","hex":"#442238"},{"name":"Juicy Details","hex":"#d9787c"},{"name":"Juicy Fig","hex":"#7d6c4a"},{"name":"Juicy Jackfruit","hex":"#eedd33"},{"name":"Juicy Lime","hex":"#b1cf5d"},{"name":"Juicy Mango","hex":"#ffd08d"},{"name":"Juicy Passionfruit","hex":"#f18870"},{"name":"Juicy Peach","hex":"#d99290"},{"name":"Julep","hex":"#57aa80"},{"name":"Julep Green","hex":"#c7dbd9"},{"name":"Jules","hex":"#a73940"},{"name":"July","hex":"#8bd2e3"},{"name":"July Ruby","hex":"#773b4a"},{"name":"Jumbo","hex":"#878785"},{"name":"June","hex":"#9bc4d4"},{"name":"June Berry","hex":"#9b96b6"},{"name":"June Bud","hex":"#bdda57"},{"name":"June Bug","hex":"#264a48"},{"name":"June Bugs","hex":"#bb6633"},{"name":"June Day","hex":"#ffe182"},{"name":"June Vision","hex":"#f1f1da"},{"name":"Juneberry","hex":"#775496"},{"name":"Jungle","hex":"#00a466"},{"name":"Jungle Adventure","hex":"#446d46"},{"name":"Jungle Book Green","hex":"#366c4e"},{"name":"Jungle Camouflage","hex":"#53665a"},{"name":"Jungle Civilization","hex":"#69673a"},{"name":"Jungle Cloak","hex":"#686959"},{"name":"Jungle Cover","hex":"#565042"},{"name":"Jungle Expedition","hex":"#b49356"},{"name":"Jungle Green","hex":"#048243"},{"name":"Jungle Jam","hex":"#115511"},{"name":"Jungle Jewels","hex":"#58a64b"},{"name":"Jungle Juice","hex":"#a4c161"},{"name":"Jungle Khaki","hex":"#c7bea7"},{"name":"Jungle King","hex":"#4f4d32"},{"name":"Jungle Mist","hex":"#b0c4c4"},{"name":"Jungle Moss","hex":"#bdc3ac"},{"name":"Jungle Noises","hex":"#36716f"},{"name":"Jungle Palm","hex":"#938326"},{"name":"Jungle Trail","hex":"#6d6f42"},{"name":"Jungle Vibes","hex":"#65801d"},{"name":"Juniper","hex":"#74918e"},{"name":"Juniper Ash","hex":"#798884"},{"name":"Juniper Berries","hex":"#547174"},{"name":"Juniper Berry","hex":"#b9b3c2"},{"name":"Juniper Berry Blue","hex":"#3f626e"},{"name":"Juniper Breeze","hex":"#d9e0d8"},{"name":"Juniper Green","hex":"#567f69"},{"name":"Juniper Oil","hex":"#6b8b75"},{"name":"Junket","hex":"#fbecd3"},{"name":"Junkrat","hex":"#998778"},{"name":"Jupiter","hex":"#e1e1e2"},{"name":"Jupiter Brown","hex":"#ac8181"},{"name":"Jurassic Gold","hex":"#e6a351"},{"name":"Jurassic Moss","hex":"#0d601c"},{"name":"Jurassic Park","hex":"#3c663e"},{"name":"Just a Fairytale","hex":"#6c5d97"},{"name":"Just a Little","hex":"#dbe0d6"},{"name":"Just A Tease","hex":"#fbd6d2"},{"name":"Just About Green","hex":"#e2e7d3"},{"name":"Just About White","hex":"#e8e8e0"},{"name":"Just Blush","hex":"#fab4a4"},{"name":"Just Gorgeous","hex":"#d6c4c1"},{"name":"Just Peachy","hex":"#f8c275"},{"name":"Just Perfect","hex":"#eaecd3"},{"name":"Just Pink Enough","hex":"#ffebee"},{"name":"Just Right","hex":"#dcbfac"},{"name":"Just Rosey","hex":"#c4a295"},{"name":"Justice","hex":"#606b8e"},{"name":"Jute","hex":"#ad9773"},{"name":"Jute Brown","hex":"#815d40"},{"name":"Juzcar Blue","hex":"#a1d5f1"},{"name":"Kā Fēi Sè Brown","hex":"#736354"},{"name":"Kabacha Brown","hex":"#b14a30"},{"name":"Kabalite Green","hex":"#038c67"},{"name":"Kabocha Green","hex":"#044a05"},{"name":"Kabuki","hex":"#a73a3e"},{"name":"Kabul","hex":"#6c5e53"},{"name":"Kacey\'s Pink","hex":"#e94b7e"},{"name":"Kachi Indigo","hex":"#393e4f"},{"name":"Kaffee","hex":"#816d5a"},{"name":"Kaffir Lime","hex":"#b9ab85"},{"name":"Kahili","hex":"#b7bfb0"},{"name":"Kahlua Milk","hex":"#bab099"},{"name":"Kahu Blue","hex":"#0093d6"},{"name":"Kaiser Cheese","hex":"#eed484"},{"name":"Kaitoke Green","hex":"#245336"},{"name":"Kakadu Trail","hex":"#7d806e"},{"name":"Kākāriki Green","hex":"#298256"},{"name":"Kakitsubata Blue","hex":"#3e62ad"},{"name":"Kālā Black","hex":"#201819"},{"name":"Kala Namak","hex":"#46444c"},{"name":"Kalahari Sunset","hex":"#9f5440"},{"name":"Kalamata","hex":"#6a6555"},{"name":"Kale","hex":"#648251"},{"name":"Kale Green","hex":"#4f6a56"},{"name":"Kaleidoscope","hex":"#8da8be"},{"name":"Kali Blue","hex":"#00505a"},{"name":"Kalish Violet","hex":"#552288"},{"name":"Kalliene Yellow","hex":"#b59808"},{"name":"Kaltes Klares Wasser","hex":"#0ffef9"},{"name":"Kamenozoki Grey","hex":"#c6c2b6"},{"name":"Kamut","hex":"#cca483"},{"name":"Kanafeh","hex":"#dd8833"},{"name":"Kandinsky Turquoise","hex":"#2d8284"},{"name":"Kangaroo","hex":"#c5c3b0"},{"name":"Kangaroo Fur","hex":"#c4ad92"},{"name":"Kangaroo Paw","hex":"#decac5"},{"name":"Kangaroo Pouch","hex":"#bda289"},{"name":"Kangaroo Tan","hex":"#e4d7ce"},{"name":"Kansas Grain","hex":"#fee7cb"},{"name":"Kantor Blue","hex":"#001146"},{"name":"Kanzō Orange","hex":"#ff8936"},{"name":"Kaolin","hex":"#ad7d40"},{"name":"Kappa Green","hex":"#c5ded1"},{"name":"Kara Cha Brown","hex":"#783c1d"},{"name":"Karacha Red","hex":"#b35c44"},{"name":"Karak Stone","hex":"#bb9662"},{"name":"Karaka","hex":"#2d2d24"},{"name":"Karaka Orange","hex":"#f04925"},{"name":"Karakurenai Red","hex":"#c91f37"},{"name":"Kariyasu Green","hex":"#6e7955"},{"name":"Karma","hex":"#b2a484"},{"name":"Karma Chameleon","hex":"#9f78a9"},{"name":"Karry","hex":"#fedcc1"},{"name":"Kashmir","hex":"#6f8d6a"},{"name":"Kashmir Blue","hex":"#576d8e"},{"name":"Kashmir Pink","hex":"#e9c8c3"},{"name":"Kasugai Peach","hex":"#f3dfd5"},{"name":"Kathleen\'s Garden","hex":"#8fa099"},{"name":"Kathmandu","hex":"#ad9a5d"},{"name":"Katsura","hex":"#c9e3cc"},{"name":"Katy Berry","hex":"#aa0077"},{"name":"Katydid","hex":"#66bc91"},{"name":"Kauai","hex":"#5ac7ac"},{"name":"Kawaii","hex":"#eaabbc"},{"name":"Kazakhstan Yellow","hex":"#fec50c"},{"name":"Keel Joy","hex":"#d49595"},{"name":"Keemun","hex":"#a49463"},{"name":"Keen Green","hex":"#226600"},{"name":"Keepsake","hex":"#c0ced6"},{"name":"Keepsake Lilac","hex":"#b899a2"},{"name":"Keepsake Rose","hex":"#b08693"},{"name":"Keese Blue","hex":"#0000bc"},{"name":"Kefir","hex":"#d5d5ce"},{"name":"Kelley Green","hex":"#02ab2e"},{"name":"Kellie Belle","hex":"#dec7cf"},{"name":"Kelly Green","hex":"#339c5e"},{"name":"Kelly\'s Flower","hex":"#babd6c"},{"name":"Kelp","hex":"#4d503c"},{"name":"Kelp Brown","hex":"#716246"},{"name":"Kelp Forest","hex":"#448811"},{"name":"Kelp\'thar Forest Blue","hex":"#0092ae"},{"name":"Kemp Kelly","hex":"#437b48"},{"name":"Ken Masters Red","hex":"#ec2c25"},{"name":"Kendal Green","hex":"#547867"},{"name":"Kendall Rose","hex":"#f7cccd"},{"name":"Kenny\'s Kiss","hex":"#d45871"},{"name":"Kenpō Brown","hex":"#543f32"},{"name":"Kenpōzome Black","hex":"#2e211b"},{"name":"Kentucky","hex":"#6395bf"},{"name":"Kentucky Blue","hex":"#a5b3cc"},{"name":"Kentucky Bluegrass","hex":"#22aabb"},{"name":"Kenya","hex":"#cca179"},{"name":"Kenyan Copper","hex":"#6c322e"},{"name":"Kenyan Sand","hex":"#bb8800"},{"name":"Keppel","hex":"#5fb69c"},{"name":"Kermit Green","hex":"#5cb200"},{"name":"Kernel","hex":"#ecb976"},{"name":"Kerr\'s Pink Potato","hex":"#b57281"},{"name":"Keshizumi Cinder","hex":"#524e4d"},{"name":"Kestrel White","hex":"#e0d6c8"},{"name":"Ketchup","hex":"#9a382d"},{"name":"Ketchup Later","hex":"#a91c1c"},{"name":"Kettle Black","hex":"#141314"},{"name":"Kettle Corn","hex":"#f6e2bd"},{"name":"Kettle Drum","hex":"#9bcb96"},{"name":"Kettleman","hex":"#606061"},{"name":"Key Keeper","hex":"#ecd1a5"},{"name":"Key Largo","hex":"#7fb6a4"},{"name":"Key Lime","hex":"#aeff6e"},{"name":"Key Lime Pie","hex":"#bfc921"},{"name":"Key Lime Water","hex":"#e8f48c"},{"name":"Key to the City","hex":"#bb9b7c"},{"name":"Key West Zenith","hex":"#759fc1"},{"name":"Keystone","hex":"#b39372"},{"name":"Keystone Grey","hex":"#b6bbb2"},{"name":"Keystone Taupe","hex":"#9e9284"},{"name":"Khaki","hex":"#c3b091"},{"name":"Khaki Brown","hex":"#954e2a"},{"name":"Khaki Core","hex":"#fbe4af"},{"name":"Khaki Green","hex":"#728639"},{"name":"Khaki Shade","hex":"#d4c5ac"},{"name":"Khaki Shell","hex":"#c9beaa"},{"name":"Khardic","hex":"#b16840"},{"name":"Khemri Brown","hex":"#76664c"},{"name":"Khmer Curry","hex":"#ee5555"},{"name":"Khorne Red","hex":"#6a0001"},{"name":"Kickstart Purple","hex":"#7777cc"},{"name":"Kid Gloves","hex":"#b6aeae"},{"name":"Kid Icarus","hex":"#a81000"},{"name":"Kid\'s Stuff","hex":"#ed8732"},{"name":"Kidnapper","hex":"#bfc0ab"},{"name":"Kihada Yellow","hex":"#fef263"},{"name":"Kikorangi Blue","hex":"#2e4ebf"},{"name":"Kikuchiba Gold","hex":"#e29c45"},{"name":"Kikyō Purple","hex":"#5d3f6a"},{"name":"Kilauea Lava","hex":"#843d38"},{"name":"Kilim Beige","hex":"#d7c5ae"},{"name":"Kilimanjaro","hex":"#3a3532"},{"name":"Kilkenny","hex":"#498555"},{"name":"Killarney","hex":"#49764f"},{"name":"Killer Fog","hex":"#c9d2d1"},{"name":"Kiln Dried","hex":"#a89887"},{"name":"Kimberley Sea","hex":"#386b7d"},{"name":"Kimberley Tree","hex":"#b8c1b1"},{"name":"Kimberlite","hex":"#696fa5"},{"name":"Kimberly","hex":"#695d87"},{"name":"Kimchi","hex":"#ed4b00"},{"name":"Kimirucha Brown","hex":"#896c39"},{"name":"Kimono","hex":"#6d86b6"},{"name":"Kimono Grey","hex":"#3d4c51"},{"name":"Kimono Violet","hex":"#75769b"},{"name":"Kin Gold","hex":"#f39800"},{"name":"Kincha Brown","hex":"#c66b27"},{"name":"Kind Green","hex":"#aac2b3"},{"name":"Kind Magenta","hex":"#ff1dce"},{"name":"Kinder","hex":"#b8bfca"},{"name":"Kinderhook Clay","hex":"#a09174"},{"name":"Kindleflame","hex":"#e9967a"},{"name":"Kindling","hex":"#7a7068"},{"name":"Kindness","hex":"#d4b2c0"},{"name":"Kindred","hex":"#71a2d4"},{"name":"Kinetic Blue","hex":"#254d6a"},{"name":"Kinetic Teal","hex":"#64cdbe"},{"name":"King Creek Falls","hex":"#5f686f"},{"name":"King Crimson","hex":"#c64a4a"},{"name":"King Fischer","hex":"#757166"},{"name":"King Ghidorah","hex":"#aa9977"},{"name":"King Kong","hex":"#161410"},{"name":"King Lime","hex":"#add900"},{"name":"King Lizard","hex":"#77dd22"},{"name":"King Nacho","hex":"#ffb800"},{"name":"King Neptune","hex":"#7794c0"},{"name":"King of Waves","hex":"#c6dce7"},{"name":"King Salmon","hex":"#d88668"},{"name":"King Tide","hex":"#2a7279"},{"name":"King Triton","hex":"#3c85be"},{"name":"King\'s Cloak","hex":"#c48692"},{"name":"King\'s Court","hex":"#706d5e"},{"name":"King\'s Plum Pie","hex":"#b3107a"},{"name":"King\'s Ransom","hex":"#b59d77"},{"name":"King\'s Robe","hex":"#6274ab"},{"name":"Kingdom Gold","hex":"#d1a436"},{"name":"Kingdom\'s Keys","hex":"#e9cfb7"},{"name":"Kingfisher","hex":"#3a5760"},{"name":"Kingfisher Blue","hex":"#006491"},{"name":"Kingfisher Bright","hex":"#096872"},{"name":"Kingfisher Daisy","hex":"#583580"},{"name":"Kingfisher Grey","hex":"#7e969f"},{"name":"Kingfisher Sheen","hex":"#007fa2"},{"name":"Kingfisher Turquoise","hex":"#7ab6b6"},{"name":"Kingly Cloud","hex":"#dedede"},{"name":"Kingpin Gold","hex":"#de9930"},{"name":"Kings of Sea","hex":"#2d8297"},{"name":"Kings Yellow","hex":"#ead665"},{"name":"Kingston","hex":"#d4dcd3"},{"name":"Kingston Aqua","hex":"#8fbcc4"},{"name":"Kinky Koala","hex":"#bb00bb"},{"name":"Kinky Pinky","hex":"#ee55cc"},{"name":"Kinlock","hex":"#7f7793"},{"name":"Kinsusutake Brown","hex":"#7d4e2d"},{"name":"Kir Royale Rose","hex":"#b45877"},{"name":"Kirby","hex":"#d74894"},{"name":"Kirchner Green","hex":"#5c6116"},{"name":"Kiri Mist","hex":"#c5c5d3"},{"name":"Kiriume Red","hex":"#8b352d"},{"name":"Kirsch","hex":"#b2132b"},{"name":"Kirsch Red","hex":"#974953"},{"name":"Kislev Pink","hex":"#efcdcb"},{"name":"Kismet","hex":"#a18ab7"},{"name":"Kiss","hex":"#d28ca7"},{"name":"Kiss A Frog","hex":"#bec187"},{"name":"Kiss and Tell","hex":"#d86773"},{"name":"Kiss Candy","hex":"#aa854a"},{"name":"Kiss Good Night","hex":"#e5c8d9"},{"name":"Kiss Me Kate","hex":"#e7eeec"},{"name":"Kiss Me More","hex":"#de6b86"},{"name":"Kiss of a Vampire","hex":"#8a0009"},{"name":"Kiss of Lime","hex":"#eae2ac"},{"name":"Kiss of the Scorpion","hex":"#dc331a"},{"name":"Kissable","hex":"#fd8f79"},{"name":"Kissed by a Zombies","hex":"#b15363"},{"name":"Kissed by Mist","hex":"#fcccf5"},{"name":"Kisses","hex":"#ff66bb"},{"name":"Kisses and Hugs","hex":"#ff6677"},{"name":"Kitchen Blue","hex":"#8ab5bd"},{"name":"Kite Brown","hex":"#95483f"},{"name":"Kitsilano Cookie","hex":"#d0c8b0"},{"name":"Kitsurubami Brown","hex":"#bb8141"},{"name":"Kitten","hex":"#d3c7bc"},{"name":"Kitten\'s Eye","hex":"#8aadf7"},{"name":"Kitten\'s Paw","hex":"#daa89b"},{"name":"Kittiwake Gull","hex":"#ccccbb"},{"name":"Kitty Kitty","hex":"#c7bdb3"},{"name":"Kiwi","hex":"#749e4e"},{"name":"Kiwi Fruit","hex":"#9daa4d"},{"name":"Kiwi Green","hex":"#8ee53f"},{"name":"Kiwi Ice Cream Green","hex":"#e5e7a7"},{"name":"Kiwi Kiss","hex":"#eef9c1"},{"name":"Kiwi Pulp","hex":"#9cef43"},{"name":"Kiwi Sorbet Green","hex":"#dee8be"},{"name":"Kiwi Squeeze","hex":"#d1edcd"},{"name":"Kiwikiwi Grey","hex":"#909495"},{"name":"Klaxosaur Blue","hex":"#2987c7"},{"name":"Klimt Green","hex":"#3fa282"},{"name":"Knapsack","hex":"#95896c"},{"name":"Knarloc Green","hex":"#4b5b40"},{"name":"Knight Elf","hex":"#926cac"},{"name":"Knight Rider","hex":"#0f0707"},{"name":"Knight\'s Armor","hex":"#5c5d5d"},{"name":"Knight\'s Tale","hex":"#aa91ae"},{"name":"Knighthood","hex":"#3c3f52"},{"name":"Knightley Straw","hex":"#edcc99"},{"name":"Knit Cardigan","hex":"#6d6c5f"},{"name":"Knitting Needles","hex":"#c3c1bc"},{"name":"Knock On Wood","hex":"#9f9b84"},{"name":"Knockout Orange","hex":"#e16f3e"},{"name":"Knockout Pink","hex":"#ff399c"},{"name":"Knot","hex":"#988266"},{"name":"Knotweed","hex":"#837f67"},{"name":"Koala Bear","hex":"#bdb7a3"},{"name":"Kōbai Red","hex":"#db5a6b"},{"name":"Kobe","hex":"#882d17"},{"name":"Kobi","hex":"#e093ab"},{"name":"Kobicha","hex":"#6b4423"},{"name":"Kobold Pink","hex":"#f0d2cf"},{"name":"Kobra Khan","hex":"#00aa22"},{"name":"Kodama White","hex":"#e8f5fc"},{"name":"Koeksister","hex":"#e97551"},{"name":"Kofta Brown","hex":"#883322"},{"name":"Köfte Brown","hex":"#773644"},{"name":"Kogane Gold","hex":"#e5b321"},{"name":"Kohaku Amber","hex":"#ca6924"},{"name":"Kohlrabi","hex":"#c0b76c"},{"name":"Kohlrabi Green","hex":"#d9d9b1"},{"name":"Koi","hex":"#d2663b"},{"name":"Koi Pond","hex":"#797f63"},{"name":"Koji Orange","hex":"#f6ad49"},{"name":"Koke Moss","hex":"#8b7d3a"},{"name":"Kokiake Brown","hex":"#7b3b3a"},{"name":"Kokimurasaki Purple","hex":"#3a243b"},{"name":"Kokoda","hex":"#7b785a"},{"name":"Kokushoku Black","hex":"#171412"},{"name":"Kolibri Blue","hex":"#00477a"},{"name":"Komatsuna Green","hex":"#7b8d42"},{"name":"Kombu","hex":"#7e726d"},{"name":"Kombu Green","hex":"#3a4032"},{"name":"Kombucha","hex":"#d89f66"},{"name":"Kommando Khaki","hex":"#9d907e"},{"name":"Komodo Dragon","hex":"#b38052"},{"name":"Komorebi","hex":"#bbc5b2"},{"name":"Kon","hex":"#192236"},{"name":"Kona","hex":"#574b50"},{"name":"Konjō Blue","hex":"#003171"},{"name":"Konkikyō Blue","hex":"#191f45"},{"name":"Koopa Green Shell","hex":"#58d854"},{"name":"Kopi Luwak","hex":"#833d3e"},{"name":"Kōrainando Green","hex":"#203838"},{"name":"Koral Kicks","hex":"#f2d1c3"},{"name":"Korean Mint","hex":"#5d7d61"},{"name":"Korichnewyi Brown","hex":"#8d4512"},{"name":"Korila","hex":"#d7e9c8"},{"name":"Korma","hex":"#804e2c"},{"name":"Koromiko","hex":"#feb552"},{"name":"Kōrozen","hex":"#592b1f"},{"name":"Kosher Khaki","hex":"#888877"},{"name":"Kournikova","hex":"#f9d054"},{"name":"Kōwhai Yellow","hex":"#e1b029"},{"name":"Kowloon","hex":"#e1d956"},{"name":"Kraft Paper","hex":"#d5b59c"},{"name":"Krameria","hex":"#cd48a9"},{"name":"Krasnyi Red","hex":"#eb2e28"},{"name":"Kremlin Red","hex":"#633639"},{"name":"Krieg Khaki","hex":"#c0bd81"},{"name":"Krishna Blue","hex":"#01abfd"},{"name":"Kriss Me Not Fuchsia","hex":"#ea27c2"},{"name":"Krypton","hex":"#b8c0c3"},{"name":"Krypton Green","hex":"#83890e"},{"name":"Kryptonite Green","hex":"#439946"},{"name":"KSU Purple","hex":"#512888"},{"name":"KU Crimson","hex":"#e8000d"},{"name":"Kuchinashi Yellow","hex":"#ffdb4f"},{"name":"Kul Sharif Blue","hex":"#87d3f8"},{"name":"Kumera","hex":"#886221"},{"name":"Kumquat","hex":"#fb9942"},{"name":"Kundalini Bliss","hex":"#d2ccda"},{"name":"Kung Fu","hex":"#643b42"},{"name":"Kunzite","hex":"#ddb6c6"},{"name":"Kurenai Red","hex":"#d7003a"},{"name":"Kuretake Black Manga","hex":"#001122"},{"name":"Kuri Black","hex":"#554738"},{"name":"Kuro Brown","hex":"#583822"},{"name":"Kuro Green","hex":"#1b2b1b"},{"name":"Kurobeni","hex":"#23191e"},{"name":"Kuroi Black","hex":"#14151d"},{"name":"Kurumizome Brown","hex":"#9f7462"},{"name":"Kuta Surf","hex":"#5789a5"},{"name":"Kuwanomi Purple","hex":"#55295b"},{"name":"Kuwazome Red","hex":"#59292c"},{"name":"Kvass","hex":"#c7610f"},{"name":"Kyo Purple","hex":"#9d5b8b"},{"name":"Kyoto","hex":"#bee3ea"},{"name":"Kyoto House","hex":"#503000"},{"name":"Kyoto Pearl","hex":"#dfd6d1"},{"name":"Kyuri Green","hex":"#4b5d16"},{"name":"La Grange","hex":"#7a7a60"},{"name":"Là Jiāo Hóng Red","hex":"#fc2647"},{"name":"La La Love","hex":"#bf90bb"},{"name":"La Luna","hex":"#ffffe5"},{"name":"La Luna Amarilla","hex":"#fddfa0"},{"name":"La Minute","hex":"#f5e5dc"},{"name":"La Palma","hex":"#428929"},{"name":"La Paz Siesta","hex":"#c1e5ea"},{"name":"La Pineta","hex":"#577e88"},{"name":"La Rioja","hex":"#bac00e"},{"name":"La Salle Green","hex":"#087830"},{"name":"La Terra","hex":"#ea936e"},{"name":"LA Vibes","hex":"#eeccdd"},{"name":"La Vie en Rose","hex":"#d2a5a3"},{"name":"La-De-Dah","hex":"#c3b1be"},{"name":"Labrador","hex":"#f2ecd9"},{"name":"Labrador\'s Locks","hex":"#d6c575"},{"name":"Labradorite","hex":"#657b83"},{"name":"Labradorite Green","hex":"#547d80"},{"name":"Labyrinth Walk","hex":"#c9a487"},{"name":"Lace Cap","hex":"#ebeaed"},{"name":"Lace Veil","hex":"#ecebea"},{"name":"Lace Wisteria","hex":"#c2bbc0"},{"name":"Laced Green","hex":"#ccee99"},{"name":"Lacewing","hex":"#d7e3ca"},{"name":"Lacey","hex":"#caaeab"},{"name":"Lacquer Green","hex":"#1b322c"},{"name":"Lacquer Mauve","hex":"#f0cfe1"},{"name":"Lacquered Liquorice","hex":"#383838"},{"name":"Lacrosse","hex":"#2e5c58"},{"name":"Lacustral","hex":"#19504c"},{"name":"Lacy Mist","hex":"#a78490"},{"name":"Laddu Orange","hex":"#ff8e13"},{"name":"Ladoga Bottom","hex":"#d9ded8"},{"name":"Lady Anne","hex":"#fde2de"},{"name":"Lady Banksia","hex":"#fde5a7"},{"name":"Lady Fern","hex":"#8fa174"},{"name":"Lady Fingers","hex":"#ccbbc0"},{"name":"Lady Flower","hex":"#d0a4ae"},{"name":"Lady Guinevere","hex":"#caa09e"},{"name":"Lady in Red","hex":"#b34b47"},{"name":"Lady Like","hex":"#9b8097"},{"name":"Lady Luck","hex":"#47613c"},{"name":"Lady Nicole","hex":"#d6d6cd"},{"name":"Lady of the Night","hex":"#05498b"},{"name":"Lady of the Sea","hex":"#0000cc"},{"name":"Lady Pink","hex":"#f3d2cf"},{"name":"Lady?S Cushions Pink","hex":"#c99bb0"},{"name":"Lady\'s Slipper","hex":"#e3e3ea"},{"name":"Ladybug","hex":"#bd474e"},{"name":"Ladylike","hex":"#ffc3bf"},{"name":"Laelia Pink","hex":"#f5c8dd"},{"name":"Lager","hex":"#f6f513"},{"name":"Lago Blue","hex":"#1fb4c3"},{"name":"Lagoon","hex":"#4b9b93"},{"name":"Lagoon Blue","hex":"#80a4b1"},{"name":"Lagoon Mirror","hex":"#eaedee"},{"name":"Lagoon Moss","hex":"#8b7e64"},{"name":"Lagoon Rock","hex":"#43bcbe"},{"name":"Lagoona Teal","hex":"#76c6d3"},{"name":"Laguna","hex":"#36a5c9"},{"name":"Laguna Beach","hex":"#e9d7c0"},{"name":"Laguna Blue","hex":"#5a7490"},{"name":"Lahar","hex":"#5f5855"},{"name":"Lahmian Medium","hex":"#e2dad1"},{"name":"Lahn Yellow","hex":"#fff80a"},{"name":"Laid Back Grey","hex":"#b3afa7"},{"name":"Laird","hex":"#79853c"},{"name":"Lake","hex":"#92cdcc"},{"name":"Lake Baikal","hex":"#155084"},{"name":"Lake Blue","hex":"#009eaf"},{"name":"Lake Bluff Putty","hex":"#d9cfb5"},{"name":"Lake Breeze","hex":"#aed4d2"},{"name":"Lake Forest","hex":"#96b4b1"},{"name":"Lake Green","hex":"#2e8b57"},{"name":"Lake Lucerne","hex":"#689db7"},{"name":"Lake Placid","hex":"#aeb9bc"},{"name":"Lake Red","hex":"#b74a70"},{"name":"Lake Reflection","hex":"#9dd8db"},{"name":"Lake Retba Pink","hex":"#ee55ee"},{"name":"Lake Stream","hex":"#3e6b83"},{"name":"Lake Tahoe Turquoise","hex":"#34b1b2"},{"name":"Lake Thun","hex":"#44bbdd"},{"name":"Lake View","hex":"#2e4967"},{"name":"Lake Water","hex":"#86aba5"},{"name":"Lake Winnipeg","hex":"#80a1b0"},{"name":"Lakefront","hex":"#8b9ca5"},{"name":"Lakelike","hex":"#306f73"},{"name":"Lakeshore","hex":"#5b96a2"},{"name":"Lakeside","hex":"#adb8c0"},{"name":"Lakeside Mist","hex":"#d7eeef"},{"name":"Lakeside Pine","hex":"#566552"},{"name":"Lakeview","hex":"#819aa0"},{"name":"Lakeville","hex":"#6c849b"},{"name":"Laksa","hex":"#e6bf95"},{"name":"Lāl Red","hex":"#d85525"},{"name":"Lama","hex":"#e0bb95"},{"name":"Lamb Chop","hex":"#82502c"},{"name":"Lamb\'s Ears","hex":"#c8ccbc"},{"name":"Lamb\'s Wool","hex":"#ffffe3"},{"name":"Lambent Lagoon","hex":"#3b5b92"},{"name":"Lambs Wool","hex":"#e6d1b2"},{"name":"Lambskin","hex":"#ebdcca"},{"name":"Lamenters Yellow","hex":"#fffeb6"},{"name":"Lamiaceae","hex":"#3afddb"},{"name":"Lamina","hex":"#bbd9bc"},{"name":"Laminated Wood","hex":"#948c7e"},{"name":"Lamp Post","hex":"#4a4f55"},{"name":"Lamplight","hex":"#ffd140"},{"name":"Lamplit","hex":"#e4af65"},{"name":"Lampoon","hex":"#805557"},{"name":"Lán Sè Blue","hex":"#4d4dff"},{"name":"Land Ahoy!","hex":"#97ddd4"},{"name":"Land Before Time","hex":"#bfbead"},{"name":"Land Light","hex":"#dfcaaa"},{"name":"Land of Trees","hex":"#e0d5b9"},{"name":"Land Rush Bone","hex":"#c9bba1"},{"name":"Landing","hex":"#eee1d9"},{"name":"Landjäger","hex":"#af403c"},{"name":"Landmark","hex":"#746854"},{"name":"Landmark Brown","hex":"#756657"},{"name":"Landscape","hex":"#c1cfa9"},{"name":"Langdon Dove","hex":"#b5ab9a"},{"name":"Langoustine","hex":"#dc5226"},{"name":"Langoustino","hex":"#ca6c56"},{"name":"Languid Blue","hex":"#a4b7bd"},{"name":"Languid Lavender","hex":"#d6cadd"},{"name":"Lannister Red","hex":"#cd0101"},{"name":"Lantana","hex":"#d87273"},{"name":"Lantana Lime","hex":"#d7eccd"},{"name":"Lantern Gold","hex":"#ffd97d"},{"name":"Lantern Light","hex":"#f6ebb9"},{"name":"Lanyard","hex":"#c09972"},{"name":"Lap Dog","hex":"#a6927f"},{"name":"Lap of Luxury","hex":"#515366"},{"name":"Lap Pool Blue","hex":"#98bbb7"},{"name":"Lapis Blue","hex":"#00508d"},{"name":"Lapis Jewel","hex":"#165d95"},{"name":"Lapis Lazuli","hex":"#26619c"},{"name":"Lapis Lazuli Blue","hex":"#215f96"},{"name":"Lapis on Neptune","hex":"#1f22d2"},{"name":"Lapwing Grey Green","hex":"#7a7562"},{"name":"Larb Gai","hex":"#dfc6aa"},{"name":"Larch Bolete","hex":"#ffaa77"},{"name":"Larchmere","hex":"#70baa7"},{"name":"Laredo Road","hex":"#c7994f"},{"name":"Large Wild Convolvulus","hex":"#e4e2d6"},{"name":"Largest Black Slug","hex":"#551f2f"},{"name":"Larimar Blue","hex":"#1d78ab"},{"name":"Larimar Green","hex":"#93d3bc"},{"name":"Lark","hex":"#b89b72"},{"name":"Lark Green","hex":"#8ac1a1"},{"name":"Larkspur","hex":"#3c7d90"},{"name":"Larkspur Blue","hex":"#20aeb1"},{"name":"Larkspur Bouquet","hex":"#798bbd"},{"name":"Larkspur Bud","hex":"#b7c0ea"},{"name":"Larkspur Violet","hex":"#928aae"},{"name":"Las Palmas","hex":"#c6da36"},{"name":"Laser","hex":"#c6a95e"},{"name":"Laser Lemon","hex":"#ffff66"},{"name":"Laser Trap","hex":"#ff3f6a"},{"name":"Last Light Blue","hex":"#475f94"},{"name":"Last of Lettuce","hex":"#aadd66"},{"name":"Last of the Lilacs","hex":"#cbbbcd"},{"name":"Last Straw","hex":"#e3dbcd"},{"name":"Last Sunlight","hex":"#e5b73b"},{"name":"Last Warning","hex":"#d30f3f"},{"name":"Lasting Impression","hex":"#b36663"},{"name":"Lasting Lime","hex":"#88ff00"},{"name":"Lasting Thoughts","hex":"#d4e6b1"},{"name":"Late Afternoon","hex":"#f8ab33"},{"name":"Late Day Sun","hex":"#f2e08e"},{"name":"Later Gator","hex":"#008a51"},{"name":"Latigo Bay","hex":"#3b9c98"},{"name":"Latin Charm","hex":"#292e44"},{"name":"Latte","hex":"#c5a582"},{"name":"Latte Froth","hex":"#f3f0e8"},{"name":"Latteo","hex":"#e8e7e6"},{"name":"Lattice","hex":"#cecec6"},{"name":"Lattice Green","hex":"#6f9843"},{"name":"Lattice Work","hex":"#b9e1c2"},{"name":"Laudable Lime","hex":"#8cbf6f"},{"name":"Laughing Jack","hex":"#c9c3d2"},{"name":"Laughing Orange","hex":"#f49807"},{"name":"Launderette Blue","hex":"#c0e7eb"},{"name":"Laundry Blue","hex":"#a2adb3"},{"name":"Laundry White","hex":"#f6f7f1"},{"name":"Laura","hex":"#a6979a"},{"name":"Laura Potato","hex":"#800008"},{"name":"Laurel","hex":"#6e8d71"},{"name":"Laurel Garland","hex":"#68705c"},{"name":"Laurel Green","hex":"#a9ba9d"},{"name":"Laurel Grey","hex":"#aaaca2"},{"name":"Laurel Leaf","hex":"#969b8b"},{"name":"Laurel Mist","hex":"#acb5a1"},{"name":"Laurel Nut Brown","hex":"#55403e"},{"name":"Laurel Oak","hex":"#918c7e"},{"name":"Laurel Pink","hex":"#f7e1dc"},{"name":"Laurel Tree","hex":"#889779"},{"name":"Laurel Woods","hex":"#44493d"},{"name":"Laurel Wreath","hex":"#52a786"},{"name":"Lauren\'s Lace","hex":"#efeae7"},{"name":"Lauren\'s Surprise","hex":"#d5e5e7"},{"name":"Lauriston Stone","hex":"#868172"},{"name":"Lava","hex":"#cf1020"},{"name":"Lava Black","hex":"#352f36"},{"name":"Lava Core","hex":"#764031"},{"name":"Lava Geyser","hex":"#dbd0ce"},{"name":"Lava Grey","hex":"#5e686d"},{"name":"Lava Lamp","hex":"#eb7135"},{"name":"Lava Pit","hex":"#e46f34"},{"name":"Lava Rock","hex":"#535e64"},{"name":"Lava Stone","hex":"#3c4151"},{"name":"Lavenbrun","hex":"#af9894"},{"name":"Lavendaire","hex":"#8f818b"},{"name":"Lavendar Wisp","hex":"#e9ebee"},{"name":"Lavender","hex":"#b56edc"},{"name":"Lavender Ash","hex":"#9998a7"},{"name":"Lavender Aura","hex":"#9f99aa"},{"name":"Lavender Bikini","hex":"#e5d9da"},{"name":"Lavender Blessing","hex":"#d3b8c5"},{"name":"Lavender Bliss","hex":"#cec3dd"},{"name":"Lavender Blossom","hex":"#b57edc"},{"name":"Lavender Blossom Grey","hex":"#8c8da1"},{"name":"Lavender Blue","hex":"#ccccff"},{"name":"Lavender Blue Shadow","hex":"#8b88f8"},{"name":"Lavender Blush","hex":"#fff0f5"},{"name":"Lavender Bonnet","hex":"#9994c0"},{"name":"Lavender Bouquet","hex":"#c7c2d0"},{"name":"Lavender Breeze","hex":"#e4e1e3"},{"name":"Lavender Candy","hex":"#fcb4d5"},{"name":"Lavender Cloud","hex":"#b8abb1"},{"name":"Lavender Cream","hex":"#c79fef"},{"name":"Lavender Crystal","hex":"#956d9a"},{"name":"Lavender Dream","hex":"#b4aecc"},{"name":"Lavender Dust","hex":"#c4c3d0"},{"name":"Lavender Earl","hex":"#af92bd"},{"name":"Lavender Elan","hex":"#9d9399"},{"name":"Lavender Elegance","hex":"#786c75"},{"name":"Lavender Essence","hex":"#dfdad9"},{"name":"Lavender Field Dreamer","hex":"#caadd8"},{"name":"Lavender Fog","hex":"#c5b5cc"},{"name":"Lavender Fragrance","hex":"#ddbbff"},{"name":"Lavender Frost","hex":"#bdabbe"},{"name":"Lavender Grey","hex":"#bdbbd7"},{"name":"Lavender Haze","hex":"#d3d0dd"},{"name":"Lavender Herb","hex":"#ad88a4"},{"name":"Lavender Honor","hex":"#c0c2d2"},{"name":"Lavender Illusion","hex":"#a99ba7"},{"name":"Lavender Indigo","hex":"#9457eb"},{"name":"Lavender Lace","hex":"#dfdde0"},{"name":"Lavender Lake","hex":"#a198a2"},{"name":"Lavender Leaf Green","hex":"#8c9180"},{"name":"Lavender Lily","hex":"#a5969c"},{"name":"Lavender Lustre","hex":"#8c9cc1"},{"name":"Lavender Magenta","hex":"#ee82ed"},{"name":"Lavender Mauve","hex":"#687698"},{"name":"Lavender Memory","hex":"#d3d3e2"},{"name":"Lavender Mist","hex":"#e5e5fa"},{"name":"Lavender Moor","hex":"#67636e"},{"name":"Lavender Mosaic","hex":"#857e86"},{"name":"Lavender Oil","hex":"#c0c0ca"},{"name":"Lavender Pearl","hex":"#ede5e8"},{"name":"Lavender Perceptions","hex":"#cb82e3"},{"name":"Lavender Phlox","hex":"#a6badf"},{"name":"Lavender Pillow","hex":"#c5b9d3"},{"name":"Lavender Pink","hex":"#dd85d7"},{"name":"Lavender Pizzazz","hex":"#e9e2e5"},{"name":"Lavender Princess","hex":"#e9d2ef"},{"name":"Lavender Purple","hex":"#967bb6"},{"name":"Lavender Quartz","hex":"#bd88ab"},{"name":"Lavender Rose","hex":"#fba0e3"},{"name":"Lavender Sachet","hex":"#bec2da"},{"name":"Lavender Savor","hex":"#eeddff"},{"name":"Lavender Scent","hex":"#bfacb1"},{"name":"Lavender Sky","hex":"#dbd7f2"},{"name":"Lavender Soap","hex":"#f1bfe2"},{"name":"Lavender Sparkle","hex":"#cfcedc"},{"name":"Lavender Spectacle","hex":"#9392ad"},{"name":"Lavender Steel","hex":"#c6cbdb"},{"name":"Lavender Suede","hex":"#b4a5a0"},{"name":"Lavender Sweater","hex":"#bd83be"},{"name":"Lavender Syrup","hex":"#e6e6f1"},{"name":"Lavender Tea","hex":"#d783ff"},{"name":"Lavender Tonic","hex":"#ccbbff"},{"name":"Lavender Twilight","hex":"#e7dfe3"},{"name":"Lavender Veil","hex":"#d9bbd3"},{"name":"Lavender Violet","hex":"#767ba5"},{"name":"Lavender Vista","hex":"#e3d7e5"},{"name":"Lavender Wash","hex":"#aab0d4"},{"name":"Lavender Water","hex":"#d2c9df"},{"name":"Lavendula","hex":"#bca4cb"},{"name":"Lavish Gold","hex":"#a38154"},{"name":"Lavish Lavender","hex":"#c2aec3"},{"name":"Lavish Lemon","hex":"#f9efca"},{"name":"Lavish Lime","hex":"#b0c175"},{"name":"Lavish Spending","hex":"#8469bc"},{"name":"Lawn Green","hex":"#4da409"},{"name":"Lawn Party","hex":"#5eb56a"},{"name":"Layers of Ocean","hex":"#5c7186"},{"name":"Laylock","hex":"#ab9ba5"},{"name":"Lazurite Blue","hex":"#174c60"},{"name":"Lazy Afternoon","hex":"#97928b"},{"name":"Lazy Caterpillar","hex":"#e2e5c7"},{"name":"Lazy Daisy","hex":"#f6eba1"},{"name":"Lazy Day","hex":"#95aed1"},{"name":"Lazy Grey","hex":"#bec1c3"},{"name":"Lazy Lavender","hex":"#a3a0b3"},{"name":"Lazy Lichen","hex":"#6e6e5c"},{"name":"Lazy Lizard","hex":"#9c9c4b"},{"name":"Lazy Shell Red","hex":"#cc0011"},{"name":"Lazy Summer Day","hex":"#fef3c3"},{"name":"Lazy Sunday","hex":"#cad3e7"},{"name":"Le Corbusier Crush","hex":"#bf4e46"},{"name":"Le Luxe","hex":"#5e6869"},{"name":"Le Max","hex":"#85b2a1"},{"name":"Lead","hex":"#212121"},{"name":"Lead Cast","hex":"#6c809c"},{"name":"Lead Glass","hex":"#fffae5"},{"name":"Lead Grey","hex":"#8a7963"},{"name":"Lead Ore","hex":"#99aabb"},{"name":"Leadbelcher","hex":"#cacacb"},{"name":"Leadbelcher Metal","hex":"#888d8f"},{"name":"Leaf","hex":"#71aa34"},{"name":"Leaf Bud","hex":"#eff19d"},{"name":"Leaf Green","hex":"#5ca904"},{"name":"Leaf Print","hex":"#e1d38e"},{"name":"Leaf Tea","hex":"#697d4c"},{"name":"Leaf Yellow","hex":"#e9d79e"},{"name":"Leaflet","hex":"#8b987b"},{"name":"Leafy","hex":"#679b6a"},{"name":"Leafy Canopy","hex":"#aacc11"},{"name":"Leafy Lemon","hex":"#c0f000"},{"name":"Leafy Lichen","hex":"#7d8574"},{"name":"Leafy Seadragon","hex":"#b6c406"},{"name":"Leafy Woodland","hex":"#aabb11"},{"name":"Leamington Spa","hex":"#a0b7a8"},{"name":"Leap of Faith","hex":"#c4d3e3"},{"name":"Leapfrog","hex":"#41a94f"},{"name":"Learning Green","hex":"#abc123"},{"name":"Leather","hex":"#906a54"},{"name":"Leather Bound","hex":"#916e52"},{"name":"Leather Brown","hex":"#97502b"},{"name":"Leather Chair","hex":"#a3754c"},{"name":"Leather Clutch","hex":"#744e42"},{"name":"Leather Loafers","hex":"#867354"},{"name":"Leather Satchel","hex":"#7c4f3a"},{"name":"Leather Tan","hex":"#a48454"},{"name":"Leather Work","hex":"#8a6347"},{"name":"Leaves of Spring","hex":"#c5e6cc"},{"name":"Lebanon Cedar","hex":"#3c341f"},{"name":"LeChuck\'s Beard","hex":"#3c351f"},{"name":"LED Blue","hex":"#0066a3"},{"name":"LED Green","hex":"#d8cb32"},{"name":"Leek","hex":"#98d98e"},{"name":"Leek Blossom Pink","hex":"#bca3b8"},{"name":"Leek Green","hex":"#979c84"},{"name":"Leek Powder","hex":"#b7b17a"},{"name":"Leek Soup","hex":"#7a9c58"},{"name":"Leek White","hex":"#cedcca"},{"name":"Leery Lemon","hex":"#f5c71a"},{"name":"Lees","hex":"#4c2226"},{"name":"Left on Red","hex":"#ff0303"},{"name":"Legacy","hex":"#5e5a67"},{"name":"Legacy Blue","hex":"#9ec9e2"},{"name":"Legal Eagle","hex":"#6d758f"},{"name":"Legal Ribbon","hex":"#6f434a"},{"name":"Legendary","hex":"#c6baaf"},{"name":"Legendary Grey","hex":"#787976"},{"name":"Legendary Lavender","hex":"#9d61d4"},{"name":"Legendary Lilac","hex":"#ad969d"},{"name":"Legendary Purple","hex":"#4e4e63"},{"name":"Legendary Sword","hex":"#7f8384"},{"name":"Legion Blue","hex":"#245a6a"},{"name":"Lei Flower","hex":"#d87b6a"},{"name":"Leisure","hex":"#c19634"},{"name":"Leisure Blue","hex":"#6a8ea1"},{"name":"Leisure Green","hex":"#438261"},{"name":"Leisure Time","hex":"#758c8f"},{"name":"Lemon","hex":"#fff700"},{"name":"Lemon Appeal","hex":"#efe4ae"},{"name":"Lemon Balm","hex":"#e5d9b6"},{"name":"Lemon Balm Green","hex":"#005228"},{"name":"Lemon Bar","hex":"#cea02f"},{"name":"Lemon Blast","hex":"#fcecad"},{"name":"Lemon Bubble","hex":"#fcebbf"},{"name":"Lemon Bundt Cake","hex":"#fef59f"},{"name":"Lemon Burst","hex":"#fed67e"},{"name":"Lemon Caipirinha","hex":"#f7de9d"},{"name":"Lemon Candy","hex":"#fae8ab"},{"name":"Lemon Chiffon","hex":"#fffacd"},{"name":"Lemon Chiffon Pie","hex":"#fff7c4"},{"name":"Lemon Chrome","hex":"#faae00"},{"name":"Lemon Cream","hex":"#fee193"},{"name":"Lemon Curd","hex":"#ffee11"},{"name":"Lemon Curry","hex":"#cda323"},{"name":"Lemon Delicious","hex":"#fce699"},{"name":"Lemon Dream","hex":"#eea300"},{"name":"Lemon Drizzle","hex":"#fee483"},{"name":"Lemon Drop","hex":"#fdd878"},{"name":"Lemon Drops","hex":"#ffe49d"},{"name":"Lemon Essence","hex":"#e2ae4d"},{"name":"Lemon Filling","hex":"#f9e4a6"},{"name":"Lemon Flesh","hex":"#f0e891"},{"name":"Lemon Gate","hex":"#96fbc4"},{"name":"Lemon Gelato","hex":"#f8ec9e"},{"name":"Lemon Ginger","hex":"#968428"},{"name":"Lemon Glacier","hex":"#fdff00"},{"name":"Lemon Grass","hex":"#999a86"},{"name":"Lemon Green","hex":"#adf802"},{"name":"Lemon Ice","hex":"#fffee6"},{"name":"Lemon Ice Yellow","hex":"#f6e2a7"},{"name":"Lemon Icing","hex":"#f6ebc8"},{"name":"Lemon Juice","hex":"#ffffec"},{"name":"Lemon Lily","hex":"#faf4d9"},{"name":"Lemon Lime","hex":"#bffe28"},{"name":"Lemon Lime Mojito","hex":"#cbba61"},{"name":"Lemon Meringue","hex":"#f6e199"},{"name":"Lemon Pearl","hex":"#f9f1db"},{"name":"Lemon Peel","hex":"#ffed80"},{"name":"Lemon Pepper","hex":"#ebeca7"},{"name":"Lemon Pie","hex":"#f1ff62"},{"name":"Lemon Poppy","hex":"#e1ae58"},{"name":"Lemon Popsicle","hex":"#faf2d1"},{"name":"Lemon Pound Cake","hex":"#ffdd93"},{"name":"Lemon Punch","hex":"#fecf24"},{"name":"Lemon Rose","hex":"#fbe9ac"},{"name":"Lemon Sachet","hex":"#faf0cf"},{"name":"Lemon Sherbet","hex":"#f1ffa8"},{"name":"Lemon Slice","hex":"#fffba8"},{"name":"Lemon Soap","hex":"#fffcc4"},{"name":"Lemon Sorbet","hex":"#fffac0"},{"name":"Lemon Sorbet Yellow","hex":"#dcc68e"},{"name":"Lemon Souffle","hex":"#ffe8ad"},{"name":"Lemon Splash","hex":"#f9f6de"},{"name":"Lemon Sponge Cake","hex":"#f7f0e1"},{"name":"Lemon Stick","hex":"#fbf7e0"},{"name":"Lemon Sugar","hex":"#f0f6dd"},{"name":"Lemon Surprise","hex":"#e1bc5c"},{"name":"Lemon Tart","hex":"#ffdd66"},{"name":"Lemon Thyme","hex":"#e4cf86"},{"name":"Lemon Tint","hex":"#fcf3cb"},{"name":"Lemon Tonic","hex":"#efefb2"},{"name":"Lemon Twist","hex":"#fed95d"},{"name":"Lemon Verbena","hex":"#f2ed6b"},{"name":"Lemon Whip","hex":"#ffe6ba"},{"name":"Lemon Whisper","hex":"#ffb10d"},{"name":"Lemon White","hex":"#fbf6e0"},{"name":"Lemon Zest","hex":"#f9d857"},{"name":"Lemonade","hex":"#efe499"},{"name":"Lemonade Stand","hex":"#f2ca3b"},{"name":"Lemongrass","hex":"#c5a658"},{"name":"Lemonwood Place","hex":"#f9f3d7"},{"name":"Lemur","hex":"#695f4f"},{"name":"Lemures","hex":"#bfb9d4"},{"name":"Lens Flare Blue","hex":"#cee2e2"},{"name":"Lens Flare Green","hex":"#b0ff9d"},{"name":"Lens Flare Pink","hex":"#e4cbff"},{"name":"Lenticular Ore","hex":"#6fb5a8"},{"name":"Lentil","hex":"#dcc8b0"},{"name":"Lentil Sprout","hex":"#a09548"},{"name":"Lenurple","hex":"#ba93d8"},{"name":"Leo Royal Fuchsia","hex":"#e042d5"},{"name":"Leopard","hex":"#d09800"},{"name":"Lepidolite Purple","hex":"#947e94"},{"name":"Leprechaun","hex":"#29906d"},{"name":"Leprechaun Green","hex":"#395549"},{"name":"Leprous Brown","hex":"#d99631"},{"name":"Lepton Gold","hex":"#d0a000"},{"name":"Leroy","hex":"#71635a"},{"name":"Les Cavaliers Beach","hex":"#0f63b3"},{"name":"Les Demoiselles d\'Avignon","hex":"#e59d7b"},{"name":"Less Brown","hex":"#756761"},{"name":"Less Traveled","hex":"#5d6957"},{"name":"Lester","hex":"#afd1c4"},{"name":"Let It Rain","hex":"#b6b8bd"},{"name":"Let It Ring","hex":"#cfae74"},{"name":"Let it Snow","hex":"#d8f1f4"},{"name":"Lethal Lime","hex":"#88ff11"},{"name":"Leticiaz","hex":"#95be76"},{"name":"Letter Grey","hex":"#8f8f8b"},{"name":"Letter Jacket","hex":"#b8860b"},{"name":"Lettuce Alone","hex":"#cedda2"},{"name":"Lettuce Green","hex":"#b9d087"},{"name":"Lettuce Mound","hex":"#92a772"},{"name":"Leukocyte White","hex":"#f2f1ed"},{"name":"Level Up","hex":"#468741"},{"name":"Leverkaas","hex":"#edcdc2"},{"name":"Leviathan Purple","hex":"#8b2a98"},{"name":"Lewisburg Lemon","hex":"#f8f1d3"},{"name":"Lewisham","hex":"#675a49"},{"name":"Lexaloffle Green","hex":"#00e436"},{"name":"Lexington Blue","hex":"#7d9294"},{"name":"Liaison","hex":"#8c3f52"},{"name":"Lián Hóng Lotus Pink","hex":"#f075e6"},{"name":"Liberace","hex":"#ccb8d2"},{"name":"Liberal Lilac","hex":"#9955bb"},{"name":"Liberalist","hex":"#0c4792"},{"name":"Liberated Lime","hex":"#d8ddcc"},{"name":"Liberator Gold","hex":"#e8c447"},{"name":"Liberia","hex":"#efe2db"},{"name":"Liberty","hex":"#514b98"},{"name":"Liberty Bell Grey","hex":"#696b6d"},{"name":"Liberty Blue","hex":"#0e1531"},{"name":"Liberty Green","hex":"#16a74e"},{"name":"Liberty Grey","hex":"#afbfc9"},{"name":"Libra Blue Morpho","hex":"#4cd5ff"},{"name":"Library Leather","hex":"#68554e"},{"name":"Library Oak","hex":"#8f7459"},{"name":"Library Pewter","hex":"#7f7263"},{"name":"Library Red","hex":"#5b3530"},{"name":"Lich Grey","hex":"#a9a694"},{"name":"Liche Purple","hex":"#730061"},{"name":"Lichen","hex":"#8ebaa6"},{"name":"Lichen Blue","hex":"#5d89b3"},{"name":"Lichen Gold","hex":"#dde7ae"},{"name":"Lichen Green","hex":"#9da693"},{"name":"Lichen Moss","hex":"#697056"},{"name":"Lick and Kiss","hex":"#ee5577"},{"name":"Lick of Lime","hex":"#a6cc72"},{"name":"Lickedy Lick","hex":"#b4496c"},{"name":"Lickety Split","hex":"#c3d997"},{"name":"Liddell","hex":"#c99c59"},{"name":"Liebermann Green","hex":"#92b498"},{"name":"Liechtenstein Yellow","hex":"#fdff38"},{"name":"Life Aquatic","hex":"#a2b0a8"},{"name":"Life at Sea","hex":"#afc9dc"},{"name":"Life Force","hex":"#6fb7e0"},{"name":"Life Is a Peach","hex":"#e5cdbe"},{"name":"Life Is Good","hex":"#e19b42"},{"name":"Life Lesson","hex":"#c5cabe"},{"name":"Lifeboat Blue","hex":"#81b6bc"},{"name":"Lifeguard","hex":"#e50000"},{"name":"Lifeless Green","hex":"#00dead"},{"name":"Lifeless Planet","hex":"#e6d699"},{"name":"Lifeline","hex":"#990033"},{"name":"Lifestyle Red","hex":"#8e3350"},{"name":"Ligado","hex":"#cdd6c2"},{"name":"Light Aluminium","hex":"#c3c5c5"},{"name":"Light Amber Orange","hex":"#ed9a76"},{"name":"Light Amourette","hex":"#d4d3e0"},{"name":"Light Angel Kiss","hex":"#dad4e4"},{"name":"Light Angora Blue","hex":"#c9d4e1"},{"name":"Light Apricot","hex":"#f2dad6"},{"name":"Light Aroma","hex":"#decfd2"},{"name":"Light Ash Brown","hex":"#c2a487"},{"name":"Light Bassinet","hex":"#ded0d8"},{"name":"Light Bathing","hex":"#abd5dc"},{"name":"Light Beige","hex":"#e5deca"},{"name":"Light Birch Green","hex":"#9db567"},{"name":"Light Bleaches","hex":"#d5d4d0"},{"name":"Light Blond","hex":"#e8d3af"},{"name":"Light Blossom Time","hex":"#ecddd6"},{"name":"Light Blue","hex":"#add8e6"},{"name":"Light Blue Cloud","hex":"#d2d3e1"},{"name":"Light Blue Glint","hex":"#a8d3e1"},{"name":"Light Blue Grey","hex":"#b7c9e2"},{"name":"Light Blue Sloth","hex":"#c6dde4"},{"name":"Light Blue Veil","hex":"#c0d8eb"},{"name":"Light Bluish Water","hex":"#a4dbe4"},{"name":"Light Blush","hex":"#e9c4cc"},{"name":"Light Bobby Blue","hex":"#add2e3"},{"name":"Light Breeze","hex":"#cfe0f2"},{"name":"Light Bright Spark","hex":"#94d0e9"},{"name":"Light Brown","hex":"#b5651d"},{"name":"Light Brown Drab","hex":"#b08699"},{"name":"Light Brume","hex":"#d6d5d2"},{"name":"Light Budgie Blue","hex":"#9ed6e8"},{"name":"Light Bunny Soft","hex":"#deced1"},{"name":"Light Cameo Blue","hex":"#c6d4e1"},{"name":"Light Candela","hex":"#c9d2df"},{"name":"Light Capri Green","hex":"#8bd4c3"},{"name":"Light Caramel","hex":"#a38a83"},{"name":"Light Cargo River","hex":"#dbd9c9"},{"name":"Light Carob","hex":"#f9dbcf"},{"name":"Light Carolina","hex":"#d8f3d7"},{"name":"Light Carrot Flower","hex":"#d8decf"},{"name":"Light Celery Stick","hex":"#d8f2dc"},{"name":"Light Chamois Beige","hex":"#d1c6be"},{"name":"Light Chervil","hex":"#ecead1"},{"name":"Light Chiffon","hex":"#f4e7e5"},{"name":"Light Chintz","hex":"#e0d5c9"},{"name":"Light Christobel","hex":"#dfd3ca"},{"name":"Light Cipollino","hex":"#d5dad1"},{"name":"Light Continental Waters","hex":"#afd5d8"},{"name":"Light Copper","hex":"#c48f4b"},{"name":"Light Corn","hex":"#f3e2d1"},{"name":"Light Corn Yellow","hex":"#e0c3a2"},{"name":"Light Cornflower Blue","hex":"#93ccea"},{"name":"Light Crushed Almond","hex":"#ddd7d1"},{"name":"Light Cuddle","hex":"#cbd7ed"},{"name":"Light Curd","hex":"#f9e9c9"},{"name":"Light Cyan","hex":"#e0ffff"},{"name":"Light Daly Waters","hex":"#c2e4e7"},{"name":"Light Dante Peak","hex":"#c6dedf"},{"name":"Light Daydreamer","hex":"#e2d9d2"},{"name":"Light Dedication","hex":"#fce9d5"},{"name":"Light Delphin","hex":"#9ed1e3"},{"name":"Light Deluxe Days","hex":"#a4d4ec"},{"name":"Light Detroit","hex":"#cddbdc"},{"name":"Light Dewpoint","hex":"#c4dadd"},{"name":"Light Drizzle","hex":"#a7aea5"},{"name":"Light Dry Lichen","hex":"#d4e3d7"},{"name":"Light Duck Egg Cream","hex":"#d5ebdd"},{"name":"Light Easter Rabbit","hex":"#d4ced1"},{"name":"Light Eggshell Pink","hex":"#d9d2c9"},{"name":"Light Ellen","hex":"#ead5c7"},{"name":"Light Elusive Dream","hex":"#d8cdd3"},{"name":"Light Enchanted","hex":"#d6eadb"},{"name":"Light Fairy Pink","hex":"#f3ded7"},{"name":"Light Favourite Lady","hex":"#ead3e0"},{"name":"Light Feather Green","hex":"#d3d9c5"},{"name":"Light Featherbed","hex":"#c1d8eb"},{"name":"Light Fern Green","hex":"#e6e6d0"},{"name":"Light Flamingo Pink","hex":"#e7d1dd"},{"name":"Light French Grey","hex":"#c9cfcc"},{"name":"Light French Taupe","hex":"#c2c0bb"},{"name":"Light Fresh Lime","hex":"#e2f4d7"},{"name":"Light Freshman","hex":"#ecf4d2"},{"name":"Light Frost","hex":"#ede8d7"},{"name":"Light Frosty Dawn","hex":"#d7efd5"},{"name":"Light Gentle Calm","hex":"#d2d9cd"},{"name":"Light Ghosting","hex":"#d7d3ca"},{"name":"Light Ginger Yellow","hex":"#f7d28c"},{"name":"Light Glaze","hex":"#c0b5aa"},{"name":"Light Granite","hex":"#e2ddcf"},{"name":"Light Grass Green","hex":"#70aa7c"},{"name":"Light Green","hex":"#76ff7b"},{"name":"Light Green Alabaster","hex":"#d5d8c9"},{"name":"Light Green Ash","hex":"#d7ddcd"},{"name":"Light Green Glint","hex":"#e5f4d5"},{"name":"Light Green Veil","hex":"#e8f4d2"},{"name":"Light Green Wash","hex":"#d4e6d9"},{"name":"Light Greenette","hex":"#e2f0d2"},{"name":"Light Gregorio Garden","hex":"#d7d4e4"},{"name":"Light Grey","hex":"#d8dcd6"},{"name":"Light Hindsight","hex":"#cdd6ea"},{"name":"Light Hint Of Lavender","hex":"#dccfce"},{"name":"Light Hog Bristle","hex":"#e5ddcb"},{"name":"Light Horizon Sky","hex":"#d0d2de"},{"name":"Light Iced Aniseed","hex":"#d8ded0"},{"name":"Light Iced Lavender","hex":"#d0d4e3"},{"name":"Light Imagine","hex":"#aed4d8"},{"name":"Light Incense","hex":"#efdcbe"},{"name":"Light Instant","hex":"#e2d9d4"},{"name":"Light Issey-San","hex":"#dbe4d1"},{"name":"Light Jellyfish Blue","hex":"#acd6db"},{"name":"Light Katsura","hex":"#d6ead8"},{"name":"Light Khaki","hex":"#998d7c"},{"name":"Light Kiri Mist","hex":"#d3d2dd"},{"name":"Light Lamb\'s Ears","hex":"#d6d9cb"},{"name":"Light Lavender","hex":"#efc0fe"},{"name":"Light Lavender Blush","hex":"#e3d2cf"},{"name":"Light Lavender Water","hex":"#ddd6e7"},{"name":"Light Lichen","hex":"#bfb6a9"},{"name":"Light Ligado","hex":"#d9e0d0"},{"name":"Light Light Blush","hex":"#eed2d7"},{"name":"Light Light Lichen","hex":"#d3e7dc"},{"name":"Light Lilac","hex":"#dcc6d2"},{"name":"Light Lime Sherbet","hex":"#d8e6ce"},{"name":"Light Limed White","hex":"#dbd5ce"},{"name":"Light Limpid Light","hex":"#dad1d7"},{"name":"Light Lip Gloss","hex":"#e7d9d4"},{"name":"Light Livingstone","hex":"#d8d7ca"},{"name":"Light Lost Lace","hex":"#d1f0dd"},{"name":"Light Lunette","hex":"#dcd5d3"},{"name":"Light Magnolia Rose","hex":"#dbd5da"},{"name":"Light Mahogany","hex":"#9b8b7c"},{"name":"Light Maiden\'s Blush","hex":"#f6ddce"},{"name":"Light Male","hex":"#e3dbd0"},{"name":"Light Marshmallow Magic","hex":"#f4dddb"},{"name":"Light Martian Moon","hex":"#d1efdd"},{"name":"Light Mauve","hex":"#c292a1"},{"name":"Light Meadow Lane","hex":"#cee1d9"},{"name":"Light Mint","hex":"#b6ffbb"},{"name":"Light Mint Green","hex":"#a6fbb2"},{"name":"Light Mist","hex":"#dce1d5"},{"name":"Light Mocha","hex":"#b18673"},{"name":"Light Modesty","hex":"#ded5e2"},{"name":"Light Morality","hex":"#c4d9eb"},{"name":"Light Mosque","hex":"#d8cdd0"},{"name":"Light Mulberry","hex":"#d1cae1"},{"name":"Light My Fire","hex":"#f8611a"},{"name":"Light Mystified","hex":"#d6e4d4"},{"name":"Light Naked Pink","hex":"#e2d4e1"},{"name":"Light Nougat","hex":"#fbe6c7"},{"name":"Light Nursery","hex":"#f4dcdc"},{"name":"Light Nut Milk","hex":"#e3d8d4"},{"name":"Light Oak","hex":"#d2b183"},{"name":"Light Oak Brown","hex":"#af855c"},{"name":"Light of New Hope","hex":"#eaf3d0"},{"name":"Light Olive","hex":"#acbf69"},{"name":"Light Opale","hex":"#c1e8ea"},{"name":"Light Opus","hex":"#dad7e8"},{"name":"Light Orchid","hex":"#e6a8d7"},{"name":"Light Orchid Haze","hex":"#d6cdd0"},{"name":"Light Oriental Blush","hex":"#e1d4e8"},{"name":"Light Otto Ice","hex":"#cde7dd"},{"name":"Light Pale Icelandish","hex":"#ccdfdc"},{"name":"Light Pale Lilac","hex":"#ced5e4"},{"name":"Light Pale Pearl","hex":"#d4cbce"},{"name":"Light Pale Tendril","hex":"#dbdacb"},{"name":"Light Pastel Green","hex":"#b2fba5"},{"name":"Light Pax","hex":"#d5d3e3"},{"name":"Light Peach Rose","hex":"#ffe6d8"},{"name":"Light Pearl Ash","hex":"#dcd6d1"},{"name":"Light Pearl Soft Blue","hex":"#bec8d8"},{"name":"Light Pecan Pine","hex":"#f1eae2"},{"name":"Light Pelican Bill","hex":"#e1ced4"},{"name":"Light Penna","hex":"#c8d4e7"},{"name":"Light Pensive","hex":"#d0d0d7"},{"name":"Light Periwinkle","hex":"#c1c6fc"},{"name":"Light Perk Up","hex":"#e0d5cd"},{"name":"Light Petite Pink","hex":"#f0d7d7"},{"name":"Light Pianissimo","hex":"#ecdbd6"},{"name":"Light Picnic Bay","hex":"#cde5de"},{"name":"Light Pink","hex":"#ffd1df"},{"name":"Light Pink Clay","hex":"#fedfdc"},{"name":"Light Pink Linen","hex":"#ddced1"},{"name":"Light Pink Pandora","hex":"#e9d3d5"},{"name":"Light Pink Polar","hex":"#d8c9cc"},{"name":"Light Pink Tone","hex":"#fad9da"},{"name":"Light Pistachio Tang","hex":"#e2dec8"},{"name":"Light Placid Blue","hex":"#c8d8e8"},{"name":"Light Pollinate","hex":"#ebe1cb"},{"name":"Light Poolside","hex":"#bee0e2"},{"name":"Light Porcelain","hex":"#e7dad7"},{"name":"Light Powder Blue","hex":"#c4d9ef"},{"name":"Light Powdered Granite","hex":"#d1d6eb"},{"name":"Light Pre School","hex":"#c5d0d9"},{"name":"Light Pretty Pale","hex":"#ead4e0"},{"name":"Light Puffball","hex":"#d9ced5"},{"name":"Light Pumpkin Brown","hex":"#c2a585"},{"name":"Light Pure Blue","hex":"#c2d2d8"},{"name":"Light Purity","hex":"#e0d5e9"},{"name":"Light Quaver","hex":"#cdded7"},{"name":"Light Quilt","hex":"#fde1d4"},{"name":"Light Radar","hex":"#c6d5ea"},{"name":"Light Rattan","hex":"#d1c1aa"},{"name":"Light Raw Cotton","hex":"#ecdfca"},{"name":"Light Red","hex":"#f3d3d9"},{"name":"Light Relax","hex":"#caddde"},{"name":"Light Ridge Light","hex":"#c3d5e5"},{"name":"Light Roast","hex":"#615544"},{"name":"Light Rose","hex":"#f4d4d6"},{"name":"Light Rose Beige","hex":"#f9ebe4"},{"name":"Light Rose Romantic","hex":"#f3dcd8"},{"name":"Light Saffron Orange","hex":"#ffcca5"},{"name":"Light Sage","hex":"#b3b0a3"},{"name":"Light Salome","hex":"#ccf1e3"},{"name":"Light Salt Spray","hex":"#bbd3da"},{"name":"Light Sandbank","hex":"#dedcc6"},{"name":"Light Sandy Day","hex":"#e1dacf"},{"name":"Light Sea Breeze","hex":"#b7cdd9"},{"name":"Light Sea Cliff","hex":"#b9d4e7"},{"name":"Light Sea Spray","hex":"#abd6de"},{"name":"Light Sea-Foam","hex":"#a0febf"},{"name":"Light Seafoam Green","hex":"#a7ffb5"},{"name":"Light Security","hex":"#e0e9d0"},{"name":"Light Shell Haven","hex":"#f1e8ce"},{"name":"Light Shell Tint","hex":"#fce0d6"},{"name":"Light Shetland Lace","hex":"#e7dccf"},{"name":"Light Shimmer","hex":"#a3d4ef"},{"name":"Light Shōchi Black","hex":"#8e8887"},{"name":"Light Shōgi White","hex":"#d8d4d7"},{"name":"Light Shōjin Blue","hex":"#1155ff"},{"name":"Light Shōrei Red","hex":"#d0181f"},{"name":"Light Short Phase","hex":"#cbe8df"},{"name":"Light Shōshin Yellow","hex":"#f7e582"},{"name":"Light Shōtoku Purple","hex":"#aa55ee"},{"name":"Light Shutterbug","hex":"#cef2e4"},{"name":"Light Silver Grass","hex":"#d4dbd1"},{"name":"Light Silverton","hex":"#cee3d9"},{"name":"Light Sky Babe","hex":"#a1d0e2"},{"name":"Light Sky Bus","hex":"#afcfe0"},{"name":"Light Sky Chase","hex":"#bad7dc"},{"name":"Light Skyway","hex":"#c2e3e8"},{"name":"Light Slipper Satin","hex":"#cfd1d8"},{"name":"Light Soft Celadon","hex":"#cedcd4"},{"name":"Light Soft Fresco","hex":"#cfe0d7"},{"name":"Light Soft Kind","hex":"#dcddcc"},{"name":"Light Spearmint Ice","hex":"#cfded7"},{"name":"Light Spice","hex":"#b3a18e"},{"name":"Light Spirit","hex":"#c3cad3"},{"name":"Light Spirited","hex":"#d8eee7"},{"name":"Light Sprig Muslin","hex":"#e0cfd2"},{"name":"Light Spring Burst","hex":"#d6e8d5"},{"name":"Light Sprinkle","hex":"#e3e3d7"},{"name":"Light Stargate","hex":"#c7d2dd"},{"name":"Light Starlight","hex":"#cbd0d7"},{"name":"Light Stately Frills","hex":"#d2ccd1"},{"name":"Light Steel Blue","hex":"#b0c4de"},{"name":"Light Stone","hex":"#dcd1cc"},{"name":"Light Subpoena","hex":"#e4dad3"},{"name":"Light Supernova","hex":"#cde5e2"},{"name":"Light Tactile","hex":"#deedd4"},{"name":"Light Taupe","hex":"#b19d8d"},{"name":"Light Taupe White","hex":"#d5d0cb"},{"name":"Light Teal","hex":"#b1ccc5"},{"name":"Light Template","hex":"#bbd6ea"},{"name":"Light Terracotta","hex":"#df9b81"},{"name":"Light Thought","hex":"#e2d8d4"},{"name":"Light Tidal Foam","hex":"#bcd6e9"},{"name":"Light Time Travel","hex":"#c5d2df"},{"name":"Light Tinge Of Mauve","hex":"#dfd2d9"},{"name":"Light Tip Toes","hex":"#e1d0d8"},{"name":"Light Tomato","hex":"#d0756f"},{"name":"Light Topaz Ochre","hex":"#b08971"},{"name":"Light Topaz Soft Blue","hex":"#b5cdd7"},{"name":"Light Touch","hex":"#f5ecdf"},{"name":"Light Turquoise","hex":"#7ef4cc"},{"name":"Light Vandamint","hex":"#bfe7ea"},{"name":"Light Vanilla Ice","hex":"#b8ced9"},{"name":"Light Vanilla Quake","hex":"#d8d5d0"},{"name":"Light Violet","hex":"#d6b4fc"},{"name":"Light Vision","hex":"#dcd9eb"},{"name":"Light Wallis","hex":"#d4ccce"},{"name":"Light Washed Blue","hex":"#acdce7"},{"name":"Light Water Wash","hex":"#bfd5eb"},{"name":"Light Water Wings","hex":"#c2f0e6"},{"name":"Light Watermark","hex":"#b7dadd"},{"name":"Light Watermelon Milk","hex":"#e6dad6"},{"name":"Light Wavecrest","hex":"#b5d1df"},{"name":"Light Weathered Hide","hex":"#e0d4d0"},{"name":"Light Whimsy","hex":"#99d0e7"},{"name":"Light White Box","hex":"#cedcd6"},{"name":"Light Year","hex":"#bfbfb4"},{"name":"Light Yellow","hex":"#fffe7a"},{"name":"Light Yellowish Green","hex":"#c2ff89"},{"name":"Light Youth","hex":"#ead7d5"},{"name":"Light Zen","hex":"#d1dbd2"},{"name":"Lighter Green","hex":"#75fd63"},{"name":"Lighter Mint","hex":"#dfebdd"},{"name":"Lighter Purple","hex":"#a55af4"},{"name":"Lightest Sky","hex":"#dce4d6"},{"name":"Lighthearted","hex":"#f7e0e1"},{"name":"Lighthearted Pink","hex":"#edd5dd"},{"name":"Lighthearted Rose","hex":"#c7a1a9"},{"name":"Lighthouse","hex":"#f3f4f4"},{"name":"Lighthouse Glow","hex":"#f8d568"},{"name":"Lighthouse View","hex":"#d9dcd5"},{"name":"Lightish Blue","hex":"#3d7afd"},{"name":"Lightish Green","hex":"#61e160"},{"name":"Lightish Purple","hex":"#a552e6"},{"name":"Lightish Red","hex":"#fe2f4a"},{"name":"Lightly Lime","hex":"#f0eda8"},{"name":"Lightning Bolt","hex":"#e5ebe6"},{"name":"Lightning Bolt Blue","hex":"#93b9df"},{"name":"Lightning Bug","hex":"#efde74"},{"name":"Lightning White","hex":"#f8edd1"},{"name":"Lightning Yellow","hex":"#f7a233"},{"name":"Lights of Shibuya","hex":"#f8f2de"},{"name":"Lights Out","hex":"#3d474b"},{"name":"Lightsaber Blue","hex":"#15f2fd"},{"name":"Lightweight Beige","hex":"#f6e5c5"},{"name":"Lignum Vitœ Foliage","hex":"#67765b"},{"name":"Ligonier Tan","hex":"#d2b18f"},{"name":"Likeable Sand","hex":"#d1b7a8"},{"name":"Lilac","hex":"#cea2fd"},{"name":"Lilac Ash","hex":"#d7cdcd"},{"name":"Lilac Bisque","hex":"#c6cde0"},{"name":"Lilac Bloom","hex":"#afabb8"},{"name":"Lilac Blossom","hex":"#9a93a9"},{"name":"Lilac Blue","hex":"#8293ac"},{"name":"Lilac Breeze","hex":"#a590c0"},{"name":"Lilac Bush","hex":"#9470c4"},{"name":"Lilac Champagne","hex":"#dfe1e6"},{"name":"Lilac Chiffon","hex":"#de9bc4"},{"name":"Lilac Cotton Candy","hex":"#cdd7ec"},{"name":"Lilac Crystal","hex":"#cbc5d9"},{"name":"Lilac Fields","hex":"#8f939d"},{"name":"Lilac Flare","hex":"#b2badb"},{"name":"Lilac Fluff","hex":"#c8a4bf"},{"name":"Lilac Frost","hex":"#e8deea"},{"name":"Lilac Geode","hex":"#bb88ff"},{"name":"Lilac Grey","hex":"#8d8b9a"},{"name":"Lilac Haze","hex":"#d5b6d4"},{"name":"Lilac Hint","hex":"#cacbd5"},{"name":"Lilac Hush","hex":"#a7adbe"},{"name":"Lilac Intuition","hex":"#9a7ea7"},{"name":"Lilac Lace","hex":"#c6a1cf"},{"name":"Lilac Light","hex":"#d7c1ba"},{"name":"Lilac Lotion","hex":"#ff3388"},{"name":"Lilac Lust","hex":"#c3b9d8"},{"name":"Lilac Luster","hex":"#ae98aa"},{"name":"Lilac Marble","hex":"#c3babf"},{"name":"Lilac Mauve","hex":"#d6d0d6"},{"name":"Lilac Mist","hex":"#e4e4e7"},{"name":"Lilac Murmur","hex":"#e5e6ea"},{"name":"Lilac Paradise","hex":"#dcbbba"},{"name":"Lilac Pink","hex":"#c09dc8"},{"name":"Lilac Purple","hex":"#a183c0"},{"name":"Lilac Rose","hex":"#bd4275"},{"name":"Lilac Sachet","hex":"#abb6d7"},{"name":"Lilac Scent Soft Blue","hex":"#9eabd0"},{"name":"Lilac Smoke","hex":"#b6a3a0"},{"name":"Lilac Snow","hex":"#dcc0d3"},{"name":"Lilac Spring","hex":"#8822cc"},{"name":"Lilac Suede","hex":"#ba9b97"},{"name":"Lilac Tan","hex":"#d4c7c4"},{"name":"Lilac Time","hex":"#a4abbf"},{"name":"Lilac Violet","hex":"#754a80"},{"name":"Lilacs in Spring","hex":"#e9cfe5"},{"name":"Lilas","hex":"#b4838f"},{"name":"Lilás","hex":"#cc99ff"},{"name":"Lili Elbe\'s Pink","hex":"#d4a1b0"},{"name":"Liliac","hex":"#c48efd"},{"name":"Lilliputian Lime","hex":"#88dd55"},{"name":"Lilting Laughter","hex":"#fcebd8"},{"name":"Lily","hex":"#c19fb3"},{"name":"Lily Green","hex":"#c5cf98"},{"name":"Lily Lavender","hex":"#e6e6e8"},{"name":"Lily Legs","hex":"#eec7d6"},{"name":"Lily of the Nile","hex":"#9191bb"},{"name":"Lily of The Valley White","hex":"#e2e3d6"},{"name":"Lily Pad","hex":"#818f84"},{"name":"Lily Pads","hex":"#6db083"},{"name":"Lily Pond","hex":"#deead8"},{"name":"Lily Pond Blue","hex":"#55707f"},{"name":"Lily Scent Green","hex":"#e6e6bc"},{"name":"Lily The Pink","hex":"#f5dee2"},{"name":"Lily White","hex":"#f0e7d3"},{"name":"Lilylock","hex":"#e0e1c1"},{"name":"Lima","hex":"#a9f971"},{"name":"Lima Bean","hex":"#e1d590"},{"name":"Lima Bean Green","hex":"#88be69"},{"name":"Lima Green","hex":"#b1b787"},{"name":"Lima Sombrio","hex":"#7aac21"},{"name":"Limbert Leather","hex":"#988870"},{"name":"Lime","hex":"#aaff32"},{"name":"Lime Acid","hex":"#afff01"},{"name":"Lime Blossom","hex":"#f4f2d3"},{"name":"Lime Bright","hex":"#f1e4b0"},{"name":"Lime Cake","hex":"#dae3d0"},{"name":"Lime Candy Pearl","hex":"#aaff00"},{"name":"Lime Chalk","hex":"#e5ddc8"},{"name":"Lime Coco Cake","hex":"#e6efcc"},{"name":"Lime Cream","hex":"#d0e3ad"},{"name":"Lime Daiquiri","hex":"#dde6d7"},{"name":"Lime Dream","hex":"#c2ecbc"},{"name":"Lime Fizz","hex":"#cfe838"},{"name":"Lime Flip","hex":"#d2e3cc"},{"name":"Lime Glow","hex":"#e1ecd9"},{"name":"Lime Granita","hex":"#dce1b8"},{"name":"Lime Green","hex":"#8ead2c"},{"name":"Lime Hawk Moth","hex":"#cdaea5"},{"name":"Lime Ice","hex":"#d1dd86"},{"name":"Lime Jelly","hex":"#e3ff00"},{"name":"Lime Juice","hex":"#e7e4d3"},{"name":"Lime Juice Green","hex":"#e5e896"},{"name":"Lime Lightning","hex":"#befd73"},{"name":"Lime Lizard","hex":"#abd35d"},{"name":"Lime Lollipop","hex":"#b4bd7a"},{"name":"Lime Meringue","hex":"#e6ecd6"},{"name":"Lime Mist","hex":"#ddffaa"},{"name":"Lime on Steroides","hex":"#00ff0d"},{"name":"Lime Parfait","hex":"#95c577"},{"name":"Lime Peel","hex":"#c6c191"},{"name":"Lime Pink","hex":"#b6848c"},{"name":"Lime Pop","hex":"#cccb2f"},{"name":"Lime Popsicle","hex":"#c1db3b"},{"name":"Lime Punch","hex":"#c0d725"},{"name":"Lime Rasp","hex":"#b5ce08"},{"name":"Lime Rickey","hex":"#afb96a"},{"name":"Lime Sherbet","hex":"#cdd78a"},{"name":"Lime Shot","hex":"#1df914"},{"name":"Lime Slice","hex":"#f0fded"},{"name":"Lime Soap","hex":"#7af9ab"},{"name":"Lime Sorbet","hex":"#bee5be"},{"name":"Lime Sorbet Green","hex":"#c6cd7d"},{"name":"Lime Splash","hex":"#cfdb8d"},{"name":"Lime Spritz","hex":"#dae1cf"},{"name":"Lime Taffy","hex":"#bad1b5"},{"name":"Lime Time","hex":"#ebe734"},{"name":"Lime Tree","hex":"#d8d06b"},{"name":"Lime Twist","hex":"#c6d624"},{"name":"Lime Wash","hex":"#dfe3d0"},{"name":"Lime White","hex":"#e9e4df"},{"name":"Lime Yellow","hex":"#d0fe1d"},{"name":"Lime Zest","hex":"#ddff00"},{"name":"Limeade","hex":"#5f9727"},{"name":"Limed Ash","hex":"#747d63"},{"name":"Limed Oak","hex":"#ac8a56"},{"name":"Limed Spruce","hex":"#394851"},{"name":"Limed White","hex":"#cfc9c0"},{"name":"Limelight","hex":"#eee96b"},{"name":"Limeño Limón","hex":"#f8b109"},{"name":"Limerick","hex":"#76857b"},{"name":"Limescent","hex":"#e0d4b7"},{"name":"Limesicle","hex":"#f2eabf"},{"name":"Limestone","hex":"#dcd8c7"},{"name":"Limestone Green","hex":"#a5af9d"},{"name":"Limestone Mauve","hex":"#d6d7db"},{"name":"Limestone Quarry","hex":"#f9f6db"},{"name":"Limestone Slate","hex":"#c5e0bd"},{"name":"Limetta","hex":"#8e9a21"},{"name":"Limewash","hex":"#dbd5cb"},{"name":"Limited Lime","hex":"#eaecb9"},{"name":"Limitless","hex":"#f0ddb8"},{"name":"Limo-Scene","hex":"#4b4950"},{"name":"Limoge Pink","hex":"#f3e0db"},{"name":"Limoges","hex":"#243f6c"},{"name":"Limolicious","hex":"#97b73a"},{"name":"Limon","hex":"#f7eb73"},{"name":"Limón Fresco","hex":"#cebc55"},{"name":"Limonana","hex":"#11dd66"},{"name":"Limoncello","hex":"#bfff00"},{"name":"Limone","hex":"#d6c443"},{"name":"Limonite","hex":"#be7f51"},{"name":"Limonite Brown","hex":"#4b4433"},{"name":"Limousine Grey Blue","hex":"#535f62"},{"name":"Limousine Leather","hex":"#3b3c3b"},{"name":"Limpet Shell","hex":"#90dcd9"},{"name":"Limpid Light","hex":"#cdc2ca"},{"name":"Limuyi Yellow","hex":"#fefc7e"},{"name":"Lincoln Green","hex":"#195905"},{"name":"Lincolnshire Sausage","hex":"#e3e6da"},{"name":"Linden Green","hex":"#c1b76a"},{"name":"Linden Spear","hex":"#8e9985"},{"name":"Linderhof Garden","hex":"#229922"},{"name":"Lindworm Green","hex":"#172808"},{"name":"Line Dried Sheets","hex":"#f5eded"},{"name":"Lineage","hex":"#4c3430"},{"name":"Linear","hex":"#164975"},{"name":"Linen","hex":"#faf0e6"},{"name":"Linen Cloth","hex":"#d9bca9"},{"name":"Linen Grey","hex":"#466163"},{"name":"Linen Ruffle","hex":"#efebe3"},{"name":"Linen White","hex":"#e9dcd1"},{"name":"Lingering Lilac","hex":"#e6def0"},{"name":"Lingering Storm","hex":"#858381"},{"name":"Lingonberry","hex":"#ff255c"},{"name":"Lingonberry Punch","hex":"#a95657"},{"name":"Lingonberry Red","hex":"#ce4458"},{"name":"Link","hex":"#778290"},{"name":"Link Green","hex":"#01a049"},{"name":"Link Grey","hex":"#7f7e72"},{"name":"Link to the Past","hex":"#d2b48c"},{"name":"Link Water","hex":"#c7cdd8"},{"name":"Link\'s Awakening","hex":"#3eaf76"},{"name":"Linnea Blossom","hex":"#c2abc4"},{"name":"Linnet","hex":"#c3bcb3"},{"name":"Linnet Egg Red","hex":"#ffccdd"},{"name":"Linoleum Blue","hex":"#427c9d"},{"name":"Linoleum Green","hex":"#3aa372"},{"name":"Linseed","hex":"#b0a895"},{"name":"Lint","hex":"#adb28d"},{"name":"Lion","hex":"#c19a62"},{"name":"Lion Cub","hex":"#f9cda4"},{"name":"Lion King","hex":"#dd9933"},{"name":"Lion Mane","hex":"#ba8e4f"},{"name":"Lion of Menecrates","hex":"#eeaa66"},{"name":"Lion\'s Lair","hex":"#81522e"},{"name":"Lion\'s Mane","hex":"#e8af49"},{"name":"Lion\'s Mane Blonde","hex":"#946b41"},{"name":"Lion\'s Roar","hex":"#f5dab3"},{"name":"Lioness","hex":"#e0af47"},{"name":"Lionfish Red","hex":"#e03c28"},{"name":"Lionhead","hex":"#d5b60a"},{"name":"Lionheart","hex":"#cc2222"},{"name":"Lip Gloss","hex":"#dfcdc7"},{"name":"Lippie","hex":"#d16a68"},{"name":"Lips of Apricot","hex":"#fbceb1"},{"name":"Lipstick","hex":"#c95b83"},{"name":"Lipstick Illusion","hex":"#d4696d"},{"name":"Lipstick Pink","hex":"#bd7f8a"},{"name":"Lipstick Red","hex":"#c0022f"},{"name":"Liqueur Red","hex":"#61394b"},{"name":"Liquid Blue","hex":"#55b7ce"},{"name":"Liquid Gold","hex":"#fdc675"},{"name":"Liquid Green Stuff","hex":"#3b7a5f"},{"name":"Liquid Hydrogen","hex":"#cedfe0"},{"name":"Liquid Lava","hex":"#f77511"},{"name":"Liquid Lime","hex":"#cdf80c"},{"name":"Liquid Mercury","hex":"#757a80"},{"name":"Liquid Neon","hex":"#c8ff00"},{"name":"Liquid Nitrogen","hex":"#f3f3f4"},{"name":"Liquorice","hex":"#0a0502"},{"name":"Liquorice Black","hex":"#352d32"},{"name":"Liquorice Green","hex":"#2a4041"},{"name":"Liquorice Red","hex":"#740900"},{"name":"Liquorice Root","hex":"#222200"},{"name":"Liquorice Stick","hex":"#b53e3d"},{"name":"Lira","hex":"#e2c28d"},{"name":"Lisbon Brown","hex":"#423921"},{"name":"Lisbon Lemon","hex":"#fffb00"},{"name":"Liselotte Syrup","hex":"#dd5511"},{"name":"Liseran Purple","hex":"#de6fa1"},{"name":"Lit","hex":"#fffed8"},{"name":"Lit\'L Buoy Blew","hex":"#d6e8e1"},{"name":"Lite Cocoa","hex":"#b59a8d"},{"name":"Lite Lavender","hex":"#e0dadf"},{"name":"Lite Mocha","hex":"#b99d91"},{"name":"Litewood","hex":"#e5dfcf"},{"name":"Lithic Sand","hex":"#53626e"},{"name":"Litmus","hex":"#9895c5"},{"name":"Little Baby Girl","hex":"#f8b9d4"},{"name":"Little Bear","hex":"#604b42"},{"name":"Little Beaux Blue","hex":"#b6d3c5"},{"name":"Little Black Dress","hex":"#43484b"},{"name":"Little Blue Box","hex":"#8ac5ba"},{"name":"Little Blue Heron","hex":"#3c4378"},{"name":"Little Bow Pink","hex":"#d37c99"},{"name":"Little Boy Blu","hex":"#c7d8db"},{"name":"Little Boy Blue","hex":"#6495da"},{"name":"Little Dipper","hex":"#e4e6ea"},{"name":"Little Dove","hex":"#ebe0ce"},{"name":"Little Ladybug","hex":"#ff1414"},{"name":"Little Lamb","hex":"#eae6d7"},{"name":"Little League","hex":"#6a9a8e"},{"name":"Little Lilac","hex":"#e0d8df"},{"name":"Little Mermaid","hex":"#2d454a"},{"name":"Little Pinky","hex":"#f4efed"},{"name":"Little Pond","hex":"#a6d1eb"},{"name":"Little Princess","hex":"#e6aac1"},{"name":"Little Red Corvette","hex":"#e50102"},{"name":"Little Smile","hex":"#f8d0e8"},{"name":"Little Sprout","hex":"#dae9d6"},{"name":"Little Sun Dress","hex":"#f7c85f"},{"name":"Little Theater","hex":"#73778f"},{"name":"Little Touch","hex":"#e7cfe8"},{"name":"Little Valley","hex":"#a4a191"},{"name":"Live Jazz","hex":"#87819b"},{"name":"Liveable Green","hex":"#cecebd"},{"name":"Liveliness","hex":"#ffdfb9"},{"name":"Lively Coral","hex":"#e67c7a"},{"name":"Lively Ivy","hex":"#b3ae87"},{"name":"Lively Laugh","hex":"#e1dd8e"},{"name":"Lively Lavender","hex":"#816f7a"},{"name":"Lively Light","hex":"#a18899"},{"name":"Lively Lilac","hex":"#9096b7"},{"name":"Lively Lime","hex":"#beb334"},{"name":"Lively Tune","hex":"#c8d8e5"},{"name":"Lively White","hex":"#f7f3e0"},{"name":"Lively Yellow","hex":"#ffe9b1"},{"name":"Liver","hex":"#654a46"},{"name":"Liver Brown","hex":"#513e32"},{"name":"Liver Chestnut","hex":"#987456"},{"name":"Livery Green","hex":"#a8d275"},{"name":"Livid","hex":"#6688cc"},{"name":"Livid Brown","hex":"#312a29"},{"name":"Livid Lime","hex":"#b8e100"},{"name":"Living Coral","hex":"#ff6a52"},{"name":"Living Large","hex":"#c87163"},{"name":"Living Stream","hex":"#37708c"},{"name":"Livingston","hex":"#a39880"},{"name":"Livingstone","hex":"#cbcbbb"},{"name":"Lizard","hex":"#7b6943"},{"name":"Lizard Belly","hex":"#cccc33"},{"name":"Lizard Breath","hex":"#edbb32"},{"name":"Lizard Brown","hex":"#795419"},{"name":"Lizard Green","hex":"#81826e"},{"name":"Lizard Legs","hex":"#7f6944"},{"name":"Llama Wool","hex":"#917864"},{"name":"Llilacquered","hex":"#c35b99"},{"name":"Loafer","hex":"#dbd9c2"},{"name":"Lobaria Lichen","hex":"#9fc8b2"},{"name":"Lobby Lilac","hex":"#a780b2"},{"name":"Lobelia","hex":"#7498be"},{"name":"Loblolly","hex":"#b3bbb7"},{"name":"Lobster","hex":"#bb240c"},{"name":"Lobster Bisque","hex":"#db8981"},{"name":"Lobster Brown","hex":"#a73836"},{"name":"Lobster Butter Sauce","hex":"#cc8811"},{"name":"Local Curry","hex":"#cb9e34"},{"name":"Loch Blue","hex":"#609795"},{"name":"Loch Modan Moss","hex":"#dfe5bf"},{"name":"Loch Ness","hex":"#5f6db0"},{"name":"Lochinvar","hex":"#489084"},{"name":"Lochmara","hex":"#316ea0"},{"name":"Lockhart","hex":"#be9aa2"},{"name":"Locomotion","hex":"#988171"},{"name":"Locust","hex":"#a2a580"},{"name":"Loden Blanket","hex":"#7d6546"},{"name":"Loden Frost","hex":"#788f74"},{"name":"Loden Green","hex":"#747a59"},{"name":"Loden Purple","hex":"#553a76"},{"name":"Loden Yellow","hex":"#b68b13"},{"name":"Lodgepole Pines","hex":"#aca690"},{"name":"Loft Light","hex":"#dccab7"},{"name":"Loft Space","hex":"#cbcecd"},{"name":"Log Cabin","hex":"#705a46"},{"name":"Logan","hex":"#9d9cb4"},{"name":"Loganberry","hex":"#5f4b6f"},{"name":"Loggia","hex":"#c4b7a5"},{"name":"Loggia Lights","hex":"#e1ebde"},{"name":"Lol Yellow","hex":"#e7cd8b"},{"name":"Lola","hex":"#b9acbb"},{"name":"Lolita","hex":"#bf2735"},{"name":"Lollipop","hex":"#d91e3f"},{"name":"Lolly","hex":"#fd978f"},{"name":"Lolly Ice","hex":"#a6dad0"},{"name":"London Fog","hex":"#9d988c"},{"name":"London Grey","hex":"#666677"},{"name":"London Hue","hex":"#ae94ab"},{"name":"London Rain","hex":"#0055bb"},{"name":"London Road","hex":"#7f878a"},{"name":"London Square","hex":"#7f909d"},{"name":"London Stones","hex":"#a89f94"},{"name":"Lone Hunter","hex":"#94c84c"},{"name":"Lone Pine","hex":"#575a44"},{"name":"Lone Star","hex":"#c09458"},{"name":"Lonely Chocolate","hex":"#4a0a00"},{"name":"Lonely Road","hex":"#947754"},{"name":"Lonestar","hex":"#522426"},{"name":"Long Beach","hex":"#faefdf"},{"name":"Long Forgotten Purple","hex":"#a1759c"},{"name":"Long Island Sound","hex":"#95d0fc"},{"name":"Long Lake","hex":"#68757e"},{"name":"Long Spring","hex":"#c97586"},{"name":"Long-Haul Flight","hex":"#002277"},{"name":"Longan\'s Kernel","hex":"#442117"},{"name":"Longbeard Grey","hex":"#ceceaf"},{"name":"Longboat","hex":"#60513a"},{"name":"Longfellow","hex":"#90b1a3"},{"name":"Longing for Nature","hex":"#4b9f5d"},{"name":"Longitude","hex":"#add5e4"},{"name":"Longlure Frogfish","hex":"#ebd84b"},{"name":"Longmeadow","hex":"#77928a"},{"name":"Loofah","hex":"#e3d3b5"},{"name":"Look at the Bright Side","hex":"#febf01"},{"name":"Looking Glass","hex":"#888786"},{"name":"Loom of Fate","hex":"#454151"},{"name":"Loon Turquoise","hex":"#2e6676"},{"name":"Looney Blue","hex":"#11ffff"},{"name":"Loophole","hex":"#cbc0b3"},{"name":"Loose Leather","hex":"#84613d"},{"name":"Loquat Brown","hex":"#ae7c4f"},{"name":"Lord Baltimore","hex":"#b76764"},{"name":"Lords of the Night","hex":"#664488"},{"name":"Loren Forest","hex":"#50702d"},{"name":"Lorian","hex":"#8ebcbd"},{"name":"Lorna","hex":"#658477"},{"name":"Lost at Sea","hex":"#8d9ca7"},{"name":"Lost Atlantis","hex":"#5f7388"},{"name":"Lost Canyon","hex":"#998e7a"},{"name":"Lost Golfer","hex":"#74af54"},{"name":"Lost in Heaven","hex":"#002489"},{"name":"Lost in Istanbul","hex":"#dee8e1"},{"name":"Lost in Sadness","hex":"#151632"},{"name":"Lost in Space","hex":"#03386a"},{"name":"Lost in the Woods","hex":"#014426"},{"name":"Lost in Time","hex":"#9fafbd"},{"name":"Lost Lace","hex":"#c2ebd1"},{"name":"Lost Lake","hex":"#b5adb5"},{"name":"Lost Lavender Somewhere","hex":"#8d828c"},{"name":"Lost Love","hex":"#e5d7d4"},{"name":"Lost River","hex":"#08457e"},{"name":"Lost Soul Grey","hex":"#929591"},{"name":"Lost Space","hex":"#969389"},{"name":"Lost Summit","hex":"#887a6e"},{"name":"Lothern Blue","hex":"#6699cc"},{"name":"Lotion","hex":"#fefdfa"},{"name":"Lots of Bubbles","hex":"#e5ecb7"},{"name":"Lottery Winnings","hex":"#768371"},{"name":"Lotti Red","hex":"#e40046"},{"name":"Lotus","hex":"#8b504b"},{"name":"Lotus Flower","hex":"#f4f0da"},{"name":"Lotus Leaf","hex":"#93a79e"},{"name":"Lotus Petal","hex":"#f2e9dc"},{"name":"Lotus Pod","hex":"#e7d7c2"},{"name":"Lotus Red","hex":"#d1717b"},{"name":"Loud Green","hex":"#64eb65"},{"name":"Loud Lime","hex":"#88ff22"},{"name":"Loudicious Pink","hex":"#d92fb4"},{"name":"Louisiana Mud","hex":"#655856"},{"name":"Loulou","hex":"#4c3347"},{"name":"Loulou\'s Purple","hex":"#bb2288"},{"name":"Lounge Green","hex":"#8ba97f"},{"name":"Lounge Leather","hex":"#563e31"},{"name":"Lounge Violet","hex":"#5e336d"},{"name":"Louvre","hex":"#ddc3a4"},{"name":"Lovable","hex":"#c87570"},{"name":"Lovage Green","hex":"#98b1a6"},{"name":"Love Affair","hex":"#ffbec8"},{"name":"Love at First Sight","hex":"#e5a5b1"},{"name":"Love Bird","hex":"#ba5b6a"},{"name":"Love Dust","hex":"#eb94da"},{"name":"Love for All","hex":"#cd0106"},{"name":"Love Fumes","hex":"#fdd0d5"},{"name":"Love Goddess","hex":"#cd0d0d"},{"name":"Love In A Mist","hex":"#e1b9c2"},{"name":"Love Juice","hex":"#cc1155"},{"name":"Love Letter","hex":"#e4658e"},{"name":"Love Lord","hex":"#c54673"},{"name":"Love Poem","hex":"#a06582"},{"name":"Love Potion","hex":"#ce145e"},{"name":"Love Priestess","hex":"#bb55cc"},{"name":"Love Red","hex":"#ff496c"},{"name":"Love Scepter","hex":"#dd8877"},{"name":"Love Spell","hex":"#f8b4c4"},{"name":"Love Vessel","hex":"#ee0099"},{"name":"Love-Struck Chinchilla","hex":"#aeaeb7"},{"name":"Loveable","hex":"#f0c1c6"},{"name":"Lovebirds","hex":"#c76a77"},{"name":"Lovecloud","hex":"#eebbee"},{"name":"Loveland","hex":"#e6718d"},{"name":"Loveliest Leaves","hex":"#a69a5c"},{"name":"Lovelight","hex":"#f7d6d8"},{"name":"Lovely Breeze","hex":"#f9d8e4"},{"name":"Lovely Euphoric Delight","hex":"#ffeeff"},{"name":"Lovely Harmony","hex":"#f4dbdc"},{"name":"Lovely Lavender","hex":"#d6d2dd"},{"name":"Lovely Lemonade","hex":"#e9dd22"},{"name":"Lovely Lilac","hex":"#a7b0cc"},{"name":"Lovely Linen","hex":"#dbceac"},{"name":"Lovely Little Rosy","hex":"#e35f66"},{"name":"Lovely Pink","hex":"#d8bfd4"},{"name":"Lover\'s Hideaway","hex":"#d0c6b5"},{"name":"Lover\'s Kiss","hex":"#8f3b3d"},{"name":"Lover\'s Knot","hex":"#f2dbdb"},{"name":"Lover\'s Leap","hex":"#957e68"},{"name":"Lover\'s Retreat","hex":"#f4ced8"},{"name":"Lover\'s Tryst","hex":"#b48ca3"},{"name":"Low Tide","hex":"#99d1a4"},{"name":"Lower Green","hex":"#e0efe3"},{"name":"Lower Lavender","hex":"#dcdfef"},{"name":"Lower Lilac","hex":"#e2d6d8"},{"name":"Lower Lime","hex":"#e6f1de"},{"name":"Lower Linen","hex":"#e0dcd8"},{"name":"Lower Lip","hex":"#f7468a"},{"name":"Lox","hex":"#ec9079"},{"name":"Loyal","hex":"#d2e1f0"},{"name":"Loyal Blue","hex":"#01455e"},{"name":"Loyalty","hex":"#4e6175"},{"name":"Lǜ Sè Green","hex":"#02c14d"},{"name":"Luau Green","hex":"#989746"},{"name":"Lucario Blue","hex":"#0b83b5"},{"name":"Lucea","hex":"#7cafe1"},{"name":"Lucent Lime","hex":"#00ff33"},{"name":"Lucent Yellow","hex":"#e4d0a5"},{"name":"Lucerne","hex":"#77b87c"},{"name":"Lucid Blue","hex":"#7e8d9f"},{"name":"Lucid Dream","hex":"#632f92"},{"name":"Lucid Dreams","hex":"#cceeff"},{"name":"Lucidity","hex":"#1e4469"},{"name":"Lucinda","hex":"#a6bbb7"},{"name":"Lucius Lilac","hex":"#baa2ce"},{"name":"Luck of the Irish","hex":"#547839"},{"name":"Lucky","hex":"#ab9a1c"},{"name":"Lucky Bamboo","hex":"#93834b"},{"name":"Lucky Clover","hex":"#008400"},{"name":"Lucky Day","hex":"#929a7d"},{"name":"Lucky Dog","hex":"#d3c8ba"},{"name":"Lucky Duck","hex":"#f4ecd7"},{"name":"Lucky Green","hex":"#238652"},{"name":"Lucky Grey","hex":"#777777"},{"name":"Lucky Lime","hex":"#9acd32"},{"name":"Lucky Lobster","hex":"#cc3322"},{"name":"Lucky Orange","hex":"#ff7700"},{"name":"Lucky Penny","hex":"#bc6f37"},{"name":"Lucky Point","hex":"#292d4f"},{"name":"Lucky Potato","hex":"#efead8"},{"name":"Lucky Shamrock","hex":"#487a7b"},{"name":"Ludicrous Lemming","hex":"#bb8877"},{"name":"Ludlow Beige","hex":"#ebdac0"},{"name":"Lugganath Orange","hex":"#f7a58b"},{"name":"Luigi","hex":"#4cbb17"},{"name":"Lull Wind","hex":"#c3d5e8"},{"name":"Lullaby","hex":"#cbd4d4"},{"name":"Lumber","hex":"#ffe4cd"},{"name":"Lumberjack","hex":"#9d4542"},{"name":"Luminary","hex":"#fffeed"},{"name":"Luminary Green","hex":"#dee799"},{"name":"Luminescent Blue","hex":"#a4dde9"},{"name":"Luminescent Green","hex":"#769c18"},{"name":"Luminescent Lime","hex":"#b9ff66"},{"name":"Luminescent Pink","hex":"#f984ef"},{"name":"Luminescent Sky","hex":"#cafffb"},{"name":"Luminous Apricot","hex":"#ecbf55"},{"name":"Luminous Light","hex":"#bbaeb9"},{"name":"Luminous Pink","hex":"#dc6c84"},{"name":"Luminous Yellow","hex":"#fee37f"},{"name":"Lump of Coal","hex":"#4e5154"},{"name":"Luna","hex":"#d4d8ce"},{"name":"Luna Green","hex":"#c1e0c8"},{"name":"Luna Light","hex":"#c2ceca"},{"name":"Luna Moon","hex":"#eceae1"},{"name":"Luna Moona","hex":"#70c1c9"},{"name":"Luna Pier","hex":"#414d62"},{"name":"Lunar Basalt","hex":"#686b67"},{"name":"Lunar Base","hex":"#878786"},{"name":"Lunar Dust","hex":"#ccccdd"},{"name":"Lunar Eclipse","hex":"#415053"},{"name":"Lunar Federation","hex":"#868381"},{"name":"Lunar Green","hex":"#4e5541"},{"name":"Lunar Lander","hex":"#dece9e"},{"name":"Lunar Landing","hex":"#d2cfc1"},{"name":"Lunar Launch Site","hex":"#938673"},{"name":"Lunar Light","hex":"#9b959c"},{"name":"Lunar Lite","hex":"#e0ddd8"},{"name":"Lunar Luxury","hex":"#fbf4d6"},{"name":"Lunar Outpost","hex":"#828287"},{"name":"Lunar Rays","hex":"#caced2"},{"name":"Lunar Rock","hex":"#c5c5c5"},{"name":"Lunar Shadow","hex":"#707685"},{"name":"Lunar Surface","hex":"#b6b9b6"},{"name":"Lunar Tide","hex":"#6f968b"},{"name":"Lunaria","hex":"#f7e7cd"},{"name":"Lunatic Lynx","hex":"#ddaa88"},{"name":"Lunatic Sky Dancer","hex":"#76fda8"},{"name":"Lunch Box","hex":"#f2ca95"},{"name":"Lunette","hex":"#d0c8c6"},{"name":"Lupin Grey","hex":"#d1e0e9"},{"name":"Lupine","hex":"#be9cc1"},{"name":"Lupine Blue","hex":"#6a96ba"},{"name":"Lurid Lettuce","hex":"#b4f319"},{"name":"Lurid Pink","hex":"#ff33ee"},{"name":"Lurid Red","hex":"#ff4505"},{"name":"Luscious","hex":"#903d49"},{"name":"Luscious Lavender","hex":"#696987"},{"name":"Luscious Leek","hex":"#bbcc22"},{"name":"Luscious Lemon","hex":"#eebd6a"},{"name":"Luscious Lemongrass","hex":"#517933"},{"name":"Luscious Lime","hex":"#91a673"},{"name":"Luscious Lobster","hex":"#c5847c"},{"name":"Luscious Purple","hex":"#605c71"},{"name":"Lush","hex":"#c5bda0"},{"name":"Lush Aqua","hex":"#004466"},{"name":"Lush Bamboo","hex":"#afbb33"},{"name":"Lush Garden","hex":"#008811"},{"name":"Lush Grass","hex":"#468d45"},{"name":"Lush Green","hex":"#bbee00"},{"name":"Lush Greenery","hex":"#7ff23e"},{"name":"Lush Honeycomb","hex":"#fca81b"},{"name":"Lush Hosta","hex":"#6c765c"},{"name":"Lush Life","hex":"#e9f6e0"},{"name":"Lush Lilac","hex":"#9d7eb7"},{"name":"Lush Mauve","hex":"#a091b7"},{"name":"Lush Meadow","hex":"#007351"},{"name":"Lush Plains","hex":"#22bb22"},{"name":"Lush Un\'goro Crater","hex":"#54a64d"},{"name":"Lust","hex":"#e62020"},{"name":"Lust Priestess","hex":"#bb3388"},{"name":"Luster Green","hex":"#bece61"},{"name":"Luster White","hex":"#f4f1ec"},{"name":"Lustful Wishes","hex":"#cc4499"},{"name":"Lustrian Undergrowth","hex":"#415a09"},{"name":"Lustrous Yellow","hex":"#e6da78"},{"name":"Lusty Lavender","hex":"#8d5eb7"},{"name":"Lusty Lips","hex":"#d5174e"},{"name":"Lusty Lizard","hex":"#00bb11"},{"name":"Lusty Orange","hex":"#e26d28"},{"name":"Lusty Red","hex":"#b1383d"},{"name":"Lusty Salmon","hex":"#efafa7"},{"name":"Lusty-Gallant","hex":"#ffcccc"},{"name":"Luxe Blue","hex":"#516582"},{"name":"Luxe Lilac","hex":"#a8a3b1"},{"name":"Luxor Blue","hex":"#bde9e5"},{"name":"Luxor Gold","hex":"#ab8d3f"},{"name":"Luxurious","hex":"#d4b75d"},{"name":"Luxurious Blue","hex":"#365f8c"},{"name":"Luxurious Lime","hex":"#88ee22"},{"name":"Luxurious Red","hex":"#863a42"},{"name":"Luxury","hex":"#818eb1"},{"name":"Lviv Blue","hex":"#384172"},{"name":"Lvivian Rain","hex":"#0182cc"},{"name":"Lyceum (Was Lycra Strip)","hex":"#adcf43"},{"name":"Lychee","hex":"#cd0c41"},{"name":"Lychee Pulp","hex":"#f7f2da"},{"name":"Lye","hex":"#9e9478"},{"name":"Lye Tinted","hex":"#7f6b5d"},{"name":"Lyman Camellia","hex":"#e5c7b9"},{"name":"Lynch","hex":"#697d89"},{"name":"Lynx","hex":"#604d47"},{"name":"Lynx Screen Blue","hex":"#2cb1eb"},{"name":"Lynx White","hex":"#f7f7f7"},{"name":"Lyons Blue","hex":"#005e76"},{"name":"Lyrebird","hex":"#0087ad"},{"name":"Lyric Blue","hex":"#728791"},{"name":"Lythrum","hex":"#72696f"},{"name":"M. Bison","hex":"#b4023d"},{"name":"Mā White","hex":"#f4f7fd"},{"name":"Maastricht Blue","hex":"#001c3d"},{"name":"Mabel","hex":"#cbe8e8"},{"name":"Mac N Cheese","hex":"#e4b070"},{"name":"Macabre","hex":"#880033"},{"name":"Macadamia","hex":"#e1ccaf"},{"name":"Macadamia Beige","hex":"#f7dfba"},{"name":"Macadamia Brown","hex":"#bba791"},{"name":"Macadamia Nut","hex":"#eee3dd"},{"name":"Macaroni","hex":"#f3d085"},{"name":"Macaroni and Cheese","hex":"#ffb97b"},{"name":"Macaroon","hex":"#b38b71"},{"name":"Macaroon Cream","hex":"#fee8d6"},{"name":"Macaroon Rose","hex":"#f75280"},{"name":"Macau","hex":"#46c299"},{"name":"Macaw","hex":"#ffbd24"},{"name":"Macaw Green","hex":"#9cad3b"},{"name":"Macchiato","hex":"#928168"},{"name":"Macharius Solar Orange","hex":"#dd4400"},{"name":"Machine Green","hex":"#a6a23f"},{"name":"Machine Gun Metal","hex":"#454545"},{"name":"Machine Oil","hex":"#f1e782"},{"name":"Machinery","hex":"#9999aa"},{"name":"Machu Picchu Gardens","hex":"#99bb33"},{"name":"Mack Creek","hex":"#bfae5b"},{"name":"Macquarie","hex":"#007d82"},{"name":"Macragge Blue","hex":"#004577"},{"name":"Maculata Bark","hex":"#ada5a3"},{"name":"Mad For Mango","hex":"#f8a200"},{"name":"Madagascar","hex":"#9d8544"},{"name":"Madagascar Pink","hex":"#d194a1"},{"name":"Madam Butterfly","hex":"#7ca7cb"},{"name":"Madame Mauve","hex":"#b5adb4"},{"name":"Madang","hex":"#b7e3a8"},{"name":"Madder","hex":"#754c50"},{"name":"Madder Blue","hex":"#b5b6ce"},{"name":"Madder Brown","hex":"#783738"},{"name":"Madder Lake","hex":"#cc3336"},{"name":"Madder Magenta","hex":"#80496e"},{"name":"Madder Orange","hex":"#f1beb0"},{"name":"Madder Red","hex":"#b7282e"},{"name":"Madder Rose","hex":"#eebbcb"},{"name":"Made in the Shade","hex":"#6b717a"},{"name":"Made of Steel","hex":"#5b686f"},{"name":"Madeira Brown","hex":"#8f4826"},{"name":"Mademoiselle Pink","hex":"#f504c9"},{"name":"Madera","hex":"#eed09d"},{"name":"Madison","hex":"#2d3c54"},{"name":"Madison Avenue","hex":"#3d3e3e"},{"name":"Madonna","hex":"#3f4250"},{"name":"Madonna Blue","hex":"#71b5d1"},{"name":"Madonna Lily","hex":"#eee6db"},{"name":"Madras","hex":"#473e23"},{"name":"Madras Blue","hex":"#9ac3da"},{"name":"Madrid Beige","hex":"#ecbf9f"},{"name":"Madrileño Maroon","hex":"#8f003a"},{"name":"Magenta","hex":"#ff00ff"},{"name":"Magenta Affair","hex":"#aa44dd"},{"name":"Magenta Crayon","hex":"#ff55a3"},{"name":"Magenta Dye","hex":"#ca1f7b"},{"name":"Magenta Elephant","hex":"#de0170"},{"name":"Magenta Haze","hex":"#a44775"},{"name":"Magenta Ink","hex":"#513d3c"},{"name":"Magenta Memoir","hex":"#b4559b"},{"name":"Magenta Pink","hex":"#cc338b"},{"name":"Magenta Purple","hex":"#762a54"},{"name":"Magenta Red","hex":"#913977"},{"name":"Magenta Red Lips","hex":"#62416d"},{"name":"Magenta Stream","hex":"#fa5ff7"},{"name":"Magenta Twilight","hex":"#bb989f"},{"name":"Magenta Violet","hex":"#6c5389"},{"name":"Magentarama","hex":"#cf3476"},{"name":"Magentella","hex":"#d521b8"},{"name":"Magentle","hex":"#aa11aa"},{"name":"Magentleman","hex":"#aa22bb"},{"name":"Magento","hex":"#bf3cff"},{"name":"Maggie\'s Magic","hex":"#ddeee2"},{"name":"Magic","hex":"#656b78"},{"name":"Magic Blade","hex":"#44dd00"},{"name":"Magic Blue","hex":"#3e8baa"},{"name":"Magic Carpet","hex":"#9488be"},{"name":"Magic Dust","hex":"#817c85"},{"name":"Magic Fountain","hex":"#1f75ff"},{"name":"Magic Gem","hex":"#8e7282"},{"name":"Magic Ink","hex":"#0247fe"},{"name":"Magic Lamp","hex":"#c2a260"},{"name":"Magic Magenta","hex":"#7f4774"},{"name":"Magic Malt","hex":"#a5887e"},{"name":"Magic Melon","hex":"#de9851"},{"name":"Magic Metal","hex":"#3f3925"},{"name":"Magic Mint","hex":"#aaf0d1"},{"name":"Magic Moment","hex":"#757caf"},{"name":"Magic Moments","hex":"#e9dbe0"},{"name":"Magic Mountain","hex":"#717462"},{"name":"Magic Night","hex":"#3a3b5b"},{"name":"Magic Potion","hex":"#ff4466"},{"name":"Magic Sage","hex":"#598556"},{"name":"Magic Sail","hex":"#e0d2ba"},{"name":"Magic Scent","hex":"#ccc9d7"},{"name":"Magic Spell","hex":"#544f66"},{"name":"Magic Wand","hex":"#c3d9e4"},{"name":"Magic Whale","hex":"#17034a"},{"name":"Magical","hex":"#c1ceda"},{"name":"Magical Malachite","hex":"#22cc88"},{"name":"Magical Mauve","hex":"#baa3a9"},{"name":"Magical Melon","hex":"#e9e9d0"},{"name":"Magical Merlin","hex":"#3d8ed0"},{"name":"Magical Moonlight","hex":"#f0eeeb"},{"name":"Magical Stardust","hex":"#eaeadb"},{"name":"Magma","hex":"#ff4e01"},{"name":"Magna Cum Laude","hex":"#dd0066"},{"name":"Magnesia Bay","hex":"#64bfdc"},{"name":"Magnesium","hex":"#c1c2c3"},{"name":"Magnet","hex":"#525054"},{"name":"Magnetic","hex":"#b2b5af"},{"name":"Magnetic Blue","hex":"#054c8a"},{"name":"Magnetic Green","hex":"#2b6867"},{"name":"Magnetic Grey","hex":"#838789"},{"name":"Magnetic Magic","hex":"#3fbbb2"},{"name":"Magneto\'s Magenta","hex":"#aa1d8e"},{"name":"Magnificence","hex":"#7f556f"},{"name":"Magnificent Magenta","hex":"#ee22aa"},{"name":"Magnitude","hex":"#ae8d7b"},{"name":"Magnolia","hex":"#fff9e4"},{"name":"Magnolia Blossom","hex":"#f4e7ce"},{"name":"Magnolia Petal","hex":"#f7eee3"},{"name":"Magnolia Pink","hex":"#ecb9b3"},{"name":"Magnolia Spray","hex":"#f6e6cb"},{"name":"Magnolia Spring","hex":"#f4f2e7"},{"name":"Magnolia White","hex":"#d8bfc8"},{"name":"Magnus Blue","hex":"#003686"},{"name":"Magos","hex":"#69475a"},{"name":"Maharaja","hex":"#3f354f"},{"name":"Mahogany","hex":"#c04000"},{"name":"Mahogany Brown","hex":"#812308"},{"name":"Mahogany Cherry","hex":"#82495a"},{"name":"Mahogany Finish","hex":"#aa5511"},{"name":"Mahogany Rose","hex":"#c39d90"},{"name":"Mahogany Spice","hex":"#5b4646"},{"name":"Mahonia Berry Blue","hex":"#62788e"},{"name":"Mai Tai","hex":"#a56531"},{"name":"Maiden Hair","hex":"#f5e9ca"},{"name":"Maiden Mist","hex":"#b9c0c0"},{"name":"Maiden of the Mist","hex":"#efdceb"},{"name":"Maiden Pink","hex":"#ff2feb"},{"name":"Maiden Voyage","hex":"#8ac7d4"},{"name":"Maiden\'s Blush","hex":"#f3d3bf"},{"name":"Maidenhair Fern","hex":"#44764a"},{"name":"Maiko","hex":"#d8baa6"},{"name":"Main Mast Gold","hex":"#b79400"},{"name":"Maine-Anjou Cattle","hex":"#a95249"},{"name":"Mainsail","hex":"#d9dfe2"},{"name":"Maire","hex":"#2a2922"},{"name":"Maison Blanche","hex":"#dfd2bf"},{"name":"Maison De Campagne","hex":"#bb9b7d"},{"name":"Maison Verte","hex":"#e5f0d9"},{"name":"Maize","hex":"#f4d054"},{"name":"Maizena","hex":"#fbec5e"},{"name":"Majestic","hex":"#5d4250"},{"name":"Majestic Blue","hex":"#3f425c"},{"name":"Majestic Dune","hex":"#f3bc80"},{"name":"Majestic Eggplant","hex":"#443388"},{"name":"Majestic Evergreen","hex":"#7d8878"},{"name":"Majestic Jungle","hex":"#607535"},{"name":"Majestic Magenta","hex":"#ee4488"},{"name":"Majestic Magic","hex":"#555570"},{"name":"Majestic Mount","hex":"#7c8091"},{"name":"Majestic Mountain","hex":"#447788"},{"name":"Majestic Orchid","hex":"#8d576d"},{"name":"Majestic Plum","hex":"#806173"},{"name":"Majestic Purple","hex":"#65608c"},{"name":"Majestic Treasures","hex":"#f2e9a5"},{"name":"Majestic Violet","hex":"#9d9ac4"},{"name":"Majesty","hex":"#673e6e"},{"name":"Majin Bū Pink","hex":"#ffaacc"},{"name":"Majolica Blue","hex":"#2d4b65"},{"name":"Majolica Earthenware","hex":"#976352"},{"name":"Majolica Green","hex":"#aeb08f"},{"name":"Majolica Mauve","hex":"#a08990"},{"name":"Major Blue","hex":"#289ec4"},{"name":"Major Brown","hex":"#61574e"},{"name":"Major Magenta","hex":"#f246a7"},{"name":"Major Tom","hex":"#001177"},{"name":"Majorca Blue","hex":"#4a9c95"},{"name":"Majorca Green","hex":"#808337"},{"name":"Majorelle Blue","hex":"#6050dc"},{"name":"Majorelle Gardens","hex":"#337766"},{"name":"Makara","hex":"#695f50"},{"name":"Make-Up Blue","hex":"#335f8d"},{"name":"Makin it Rain","hex":"#88bb55"},{"name":"Mako","hex":"#505555"},{"name":"Makore Veneer Red","hex":"#6e2f2c"},{"name":"Malabar","hex":"#cfbea9"},{"name":"Malachite","hex":"#0bda51"},{"name":"Malachite Blue Turquoise","hex":"#0e4f4f"},{"name":"Malachite Green","hex":"#004e00"},{"name":"Malaga","hex":"#ab5871"},{"name":"Malarca","hex":"#6e7d6e"},{"name":"Malaysian Mist","hex":"#b8d1d0"},{"name":"Maldives","hex":"#00bbdd"},{"name":"Male","hex":"#d6cec3"},{"name":"Male Betta","hex":"#347699"},{"name":"Malevolent Mauve","hex":"#bb6688"},{"name":"Malibu","hex":"#66b7e1"},{"name":"Malibu Beige","hex":"#c9c0b1"},{"name":"Malibu Blue","hex":"#00a9da"},{"name":"Malibu Coast","hex":"#e7cfc2"},{"name":"Malibu Dune","hex":"#e7ceb5"},{"name":"Malibu Peach","hex":"#fdc8b3"},{"name":"Malibu Sun","hex":"#fff2d9"},{"name":"Mallard","hex":"#254855"},{"name":"Mallard Blue","hex":"#3f6378"},{"name":"Mallard Green","hex":"#478865"},{"name":"Mallard Lake","hex":"#91b9c2"},{"name":"Mallard\'s Egg","hex":"#f8f2d8"},{"name":"Mallardish","hex":"#3a4531"},{"name":"Mallorca Blue","hex":"#517b95"},{"name":"Mallow Root","hex":"#f8ebde"},{"name":"Malmö FF","hex":"#a7d7ff"},{"name":"Malt","hex":"#ddcfbc"},{"name":"Malt Shake","hex":"#bba87f"},{"name":"Malta","hex":"#a59784"},{"name":"Malted","hex":"#dbc8c0"},{"name":"Malted Milk","hex":"#e8d9ce"},{"name":"Malted Mint","hex":"#bfd6c8"},{"name":"Malted Mint Madness","hex":"#11ddaa"},{"name":"Mama Africa","hex":"#551111"},{"name":"Mama Racoon","hex":"#594f40"},{"name":"Mamala Bay","hex":"#005e8c"},{"name":"Mamba","hex":"#766d7c"},{"name":"Mamba Green","hex":"#77ad3b"},{"name":"Mamey","hex":"#eba180"},{"name":"Mamie Pink","hex":"#ee82ee"},{"name":"Mammary Red","hex":"#b00b1e"},{"name":"Mammoth Mountain","hex":"#3b6a7a"},{"name":"Mammoth Wool","hex":"#995522"},{"name":"Man Cave","hex":"#816045"},{"name":"Man Friday","hex":"#3c4c5d"},{"name":"Mana","hex":"#b09737"},{"name":"Mana Tree","hex":"#4f7942"},{"name":"Manakin","hex":"#94bbda"},{"name":"Manatee","hex":"#8d90a1"},{"name":"Manchester","hex":"#65916d"},{"name":"Manchester Brown","hex":"#504440"},{"name":"Manchester Nights","hex":"#992222"},{"name":"Mandalay","hex":"#b57b2e"},{"name":"Mandalay Road","hex":"#a05f45"},{"name":"Mandarin","hex":"#f37a48"},{"name":"Mandarin Essence","hex":"#ee9944"},{"name":"Mandarin Jelly","hex":"#ff8800"},{"name":"Mandarin Orange","hex":"#ec6a37"},{"name":"Mandarin Peel","hex":"#ff9f00"},{"name":"Mandarin Red","hex":"#e84f3c"},{"name":"Mandarin Rind","hex":"#f1903d"},{"name":"Mandarin Sorbet","hex":"#ffae42"},{"name":"Mandarin Sugar","hex":"#f6e7e1"},{"name":"Mandarin Tusk","hex":"#d8d4d3"},{"name":"Mandrake","hex":"#8889a0"},{"name":"Mandu Dumpling","hex":"#c6c0a6"},{"name":"Mandy","hex":"#cd525b"},{"name":"Mandys Pink","hex":"#f5b799"},{"name":"Manga Pink","hex":"#f5b9d8"},{"name":"Mangala Pink","hex":"#e781a6"},{"name":"Manganese Black","hex":"#202f4b"},{"name":"Manganese Red","hex":"#e52b50"},{"name":"Mångata","hex":"#9dbcd4"},{"name":"Mango","hex":"#ffa62b"},{"name":"Mango Brown","hex":"#bb8434"},{"name":"Mango Cheesecake","hex":"#fbedda"},{"name":"Mango Creamsicles","hex":"#ffb769"},{"name":"Mango Green","hex":"#96ff00"},{"name":"Mango Ice","hex":"#f7bd8d"},{"name":"Mango Latte","hex":"#ffbb4d"},{"name":"Mango Loco","hex":"#feb81c"},{"name":"Mango Madness","hex":"#fd8c23"},{"name":"Mango Margarita","hex":"#f7b74e"},{"name":"Mango Mojito","hex":"#d1a229"},{"name":"Mango Nectar","hex":"#ffd49d"},{"name":"Mango Orange","hex":"#ff8b58"},{"name":"Mango Salsa","hex":"#ffb066"},{"name":"Mango Squash","hex":"#8e6c39"},{"name":"Mango Tango","hex":"#ff8243"},{"name":"Mangosteen","hex":"#383e5d"},{"name":"Mangosteen Violet","hex":"#3a2732"},{"name":"Mangrove","hex":"#757461"},{"name":"Mangrove Leaf","hex":"#607c3d"},{"name":"Mangu Black","hex":"#292938"},{"name":"Mangy Moose","hex":"#b2896c"},{"name":"Manhattan","hex":"#e2af80"},{"name":"Manhattan Blue","hex":"#404457"},{"name":"Manhattan Mist","hex":"#cccfcf"},{"name":"Mani","hex":"#97908e"},{"name":"Maniac Green","hex":"#009000"},{"name":"Maniac Mansion","hex":"#004058"},{"name":"Manifest","hex":"#899888"},{"name":"Manila","hex":"#e7c9a9"},{"name":"Manila Tint","hex":"#ffe2a7"},{"name":"Manitou Blue","hex":"#5b92a2"},{"name":"Mann Orange","hex":"#cf7336"},{"name":"Mannequin","hex":"#eedfdd"},{"name":"Mannequin Cream","hex":"#f6e5ce"},{"name":"Mannered Gold","hex":"#c19763"},{"name":"Manor House","hex":"#665d57"},{"name":"Mantella Frog","hex":"#ffbc02"},{"name":"Manticore Brown","hex":"#957840"},{"name":"Manticore Wing","hex":"#dd7711"},{"name":"Mantis","hex":"#74c365"},{"name":"Mantle","hex":"#96a793"},{"name":"Mantra","hex":"#dce2df"},{"name":"Manually Pressed Grapes","hex":"#881144"},{"name":"Manure","hex":"#ad900d"},{"name":"Manuscript","hex":"#d1c9ba"},{"name":"Manuscript Ink","hex":"#827e71"},{"name":"Manz","hex":"#e4db55"},{"name":"Manzanilla Olive","hex":"#9e8f6b"},{"name":"Manzanita","hex":"#643c37"},{"name":"Maple","hex":"#b88e72"},{"name":"Maple Beige","hex":"#fad0a1"},{"name":"Maple Brown Sugar","hex":"#a38e6f"},{"name":"Maple Elixir","hex":"#f6d193"},{"name":"Maple Glaze","hex":"#a76944"},{"name":"Maple Leaf","hex":"#d17b41"},{"name":"Maple Pecan","hex":"#e3d1bb"},{"name":"Maple Red","hex":"#bf514e"},{"name":"Maple Sugar","hex":"#c1967c"},{"name":"Maple Syrup","hex":"#bb9351"},{"name":"Maple Syrup Brown","hex":"#c88554"},{"name":"Maple View","hex":"#b49161"},{"name":"Maraschino","hex":"#ff2600"},{"name":"Marble Dust","hex":"#f3e5cb"},{"name":"Marble Garden","hex":"#646255"},{"name":"Marble Grape","hex":"#dee2c7"},{"name":"Marble Green","hex":"#8f9f97"},{"name":"Marble Green-Grey","hex":"#85928f"},{"name":"Marble Quarry","hex":"#e2dcd7"},{"name":"Marble Red","hex":"#a9606e"},{"name":"Marble White","hex":"#f2f0e6"},{"name":"March Green","hex":"#d4cc00"},{"name":"March Hare Orange","hex":"#ff750f"},{"name":"March Pink","hex":"#9a7276"},{"name":"March Tulip Green","hex":"#d4c978"},{"name":"March Wind","hex":"#bab9b6"},{"name":"March Yellow","hex":"#f1d48a"},{"name":"Mardi Gras","hex":"#880085"},{"name":"Marea Baja","hex":"#2e5464"},{"name":"Marfil","hex":"#f9ecda"},{"name":"Margarine","hex":"#f2d930"},{"name":"Margarita","hex":"#a9bc81"},{"name":"Mariana Trench","hex":"#445956"},{"name":"Marigold","hex":"#fcc006"},{"name":"Marigold Yellow","hex":"#fbe870"},{"name":"Marilyn Monroe","hex":"#e7c3ac"},{"name":"Marilyn MonRouge","hex":"#c9001e"},{"name":"Marina","hex":"#5a88c8"},{"name":"Marina Isle","hex":"#b1c8bf"},{"name":"Marinara Red","hex":"#ff0008"},{"name":"Marine","hex":"#042e60"},{"name":"Marine Blue","hex":"#01386a"},{"name":"Marine Green","hex":"#40a48e"},{"name":"Marine Grey","hex":"#a5b2aa"},{"name":"Marine Ink","hex":"#6384b8"},{"name":"Marine Layer","hex":"#a5b4b6"},{"name":"Marine Magic","hex":"#515e62"},{"name":"Marine Teal","hex":"#008383"},{"name":"Marine Tinge","hex":"#33a3b3"},{"name":"Marine Wonder","hex":"#1f7073"},{"name":"Mariner","hex":"#42639f"},{"name":"Mario","hex":"#e4000f"},{"name":"Marionberry","hex":"#380282"},{"name":"Maritime","hex":"#bdcfea"},{"name":"Maritime Blue","hex":"#2d3145"},{"name":"Maritime Outpost","hex":"#1e4581"},{"name":"Maritime Soft Blue","hex":"#69b8c0"},{"name":"Maritime White","hex":"#e5e6e0"},{"name":"Marjoram","hex":"#bfcba2"},{"name":"Marker Blue","hex":"#00869a"},{"name":"Marker Green","hex":"#9daf00"},{"name":"Marker Pink","hex":"#e3969b"},{"name":"Market Melon","hex":"#fbb377"},{"name":"Marlin","hex":"#515b87"},{"name":"Marlin Green","hex":"#41a1aa"},{"name":"Marmalade","hex":"#d46f14"},{"name":"Marmalade Glaze","hex":"#c27545"},{"name":"Marmite","hex":"#46221b"},{"name":"Marmot","hex":"#928475"},{"name":"Maroon","hex":"#800000"},{"name":"Maroon Flush","hex":"#c32249"},{"name":"Maroon Light","hex":"#bf3160"},{"name":"Maroon Oak","hex":"#520c17"},{"name":"Marooned","hex":"#86cdab"},{"name":"Marquee White","hex":"#f5ead6"},{"name":"Marquis Orange","hex":"#d2783a"},{"name":"Marquisette","hex":"#f3d49d"},{"name":"Marrakech Brown","hex":"#91734c"},{"name":"Marrakesh Red","hex":"#783b3c"},{"name":"Marrett Apple","hex":"#cacaa3"},{"name":"Marron","hex":"#6e4c4b"},{"name":"Marron Canela","hex":"#a7735a"},{"name":"Marrs Green","hex":"#008c8c"},{"name":"Mars","hex":"#ad6242"},{"name":"Mars Red","hex":"#c92a37"},{"name":"Marsala","hex":"#96534c"},{"name":"Marseilles","hex":"#b7bbbb"},{"name":"Marsh","hex":"#5c5337"},{"name":"Marsh Creek","hex":"#6b8781"},{"name":"Marsh Fern","hex":"#b6ca90"},{"name":"Marsh Field","hex":"#d4c477"},{"name":"Marsh Fog","hex":"#c6d8c7"},{"name":"Marsh Grass","hex":"#82763d"},{"name":"Marsh Marigold","hex":"#ffef17"},{"name":"Marsh Mist","hex":"#e8e1a1"},{"name":"Marsh Mix","hex":"#5a653a"},{"name":"Marsh Orchid","hex":"#c4a3bf"},{"name":"Marshal Blue","hex":"#3e4355"},{"name":"Marshland","hex":"#2b2e26"},{"name":"Marshmallow","hex":"#f0eee4"},{"name":"Marshmallow Cream","hex":"#f3e0d6"},{"name":"Marshmallow Fluff","hex":"#faf3de"},{"name":"Marshmallow Heart","hex":"#f9dce3"},{"name":"Marshmallow Magic","hex":"#efd2d0"},{"name":"Marshmallow Mist","hex":"#e0caaa"},{"name":"Marshmallow Rose","hex":"#f7e5e6"},{"name":"Marshmallow Whip","hex":"#f9efe0"},{"name":"Marshy Green","hex":"#8e712e"},{"name":"Marshy Habitat","hex":"#b8aea2"},{"name":"Marsupilami","hex":"#fdf200"},{"name":"Martian","hex":"#aea132"},{"name":"Martian Cerulean","hex":"#57958b"},{"name":"Martian Colony","hex":"#e5750f"},{"name":"Martian Green","hex":"#136c51"},{"name":"Martian Haze","hex":"#adeace"},{"name":"Martian Ironcrust","hex":"#b7410e"},{"name":"Martian Ironearth","hex":"#c15a4b"},{"name":"Martian Moon","hex":"#c3e9d3"},{"name":"Martica","hex":"#f4e5b7"},{"name":"Martina Olive","hex":"#8e8e41"},{"name":"Martini","hex":"#b7a8a3"},{"name":"Martini East","hex":"#ce8c8d"},{"name":"Martini Olive","hex":"#cdc796"},{"name":"Martinique","hex":"#3c3748"},{"name":"Marvellous","hex":"#6a7fb4"},{"name":"Marvelous Magic","hex":"#e1c6d6"},{"name":"Mary Blue","hex":"#006a77"},{"name":"Mary Poppins","hex":"#d1b5ca"},{"name":"Mary Rose","hex":"#d7b1b0"},{"name":"Mary\'s Garden","hex":"#69913d"},{"name":"Mary\'s Rose","hex":"#f6d2d4"},{"name":"Marzena Dream","hex":"#a6d0ec"},{"name":"Marzipan","hex":"#ebc881"},{"name":"Marzipan Pink","hex":"#eebabc"},{"name":"Marzipan White","hex":"#ebe5d8"},{"name":"Masala","hex":"#57534b"},{"name":"Masala Chai","hex":"#eeccaa"},{"name":"Mascarpone","hex":"#ece6d4"},{"name":"Mask","hex":"#ab878d"},{"name":"Masked Mauve","hex":"#c6b2be"},{"name":"Masoho Red","hex":"#d57c6b"},{"name":"Master","hex":"#3a4b61"},{"name":"Master Chief","hex":"#507d2a"},{"name":"Master Key","hex":"#ddcc88"},{"name":"Master Nacho","hex":"#ffb81b"},{"name":"Master Round Yellow","hex":"#e78303"},{"name":"Master Sword Blue","hex":"#00ffee"},{"name":"Masterpiece","hex":"#a1a2ab"},{"name":"Masuhana Blue","hex":"#4d646c"},{"name":"Mat Dazzle Rose","hex":"#ff48d0"},{"name":"Mata Hari","hex":"#544859"},{"name":"Matador\'s Cape","hex":"#cf6e66"},{"name":"Match Head","hex":"#d63756"},{"name":"Match Strike","hex":"#ffaa44"},{"name":"Matcha Mecha","hex":"#9faf6c"},{"name":"Matcha Picchu","hex":"#99bb00"},{"name":"Matcha Powder","hex":"#a0d404"},{"name":"Mate Tea","hex":"#7bb18d"},{"name":"Matisse","hex":"#365c7d"},{"name":"Matriarch","hex":"#7e6884"},{"name":"Matrix","hex":"#8e4d45"},{"name":"Matsuba Green","hex":"#454d32"},{"name":"Matt Black","hex":"#151515"},{"name":"Matt Blue","hex":"#2c6fbb"},{"name":"Matt Demon","hex":"#dd4433"},{"name":"Matt Green","hex":"#39ad48"},{"name":"Matt Lilac","hex":"#dec6d3"},{"name":"Matt Pink","hex":"#ffb6c1"},{"name":"Matt Purple","hex":"#9370db"},{"name":"Matt Sage","hex":"#b2b9a5"},{"name":"Matt White","hex":"#ffffd4"},{"name":"Mattar Paneer","hex":"#884433"},{"name":"Matte Blue","hex":"#8fb0ce"},{"name":"Matte Brown","hex":"#a17f67"},{"name":"Matte Carmine","hex":"#a06570"},{"name":"Matte Grey","hex":"#b4a8a4"},{"name":"Matte Jade Green","hex":"#b5cbbd"},{"name":"Matte Olive","hex":"#998f7f"},{"name":"Matte Sage Green","hex":"#8a9381"},{"name":"Matterhorn","hex":"#524b4b"},{"name":"Matterhorn Snow","hex":"#e0fefe"},{"name":"Mature","hex":"#c4afb3"},{"name":"Mature Cognac","hex":"#9a463d"},{"name":"Mature Grape","hex":"#5f3f54"},{"name":"Maturity","hex":"#38796c"},{"name":"Maud","hex":"#988286"},{"name":"Maui","hex":"#21a5be"},{"name":"Maui Blue","hex":"#52a2b4"},{"name":"Maui Mai Tai","hex":"#b66044"},{"name":"Maui Mist","hex":"#eef2f3"},{"name":"Mauve","hex":"#e0b0ff"},{"name":"Mauve Aquarelle","hex":"#e3d2db"},{"name":"Mauve Brown","hex":"#62595f"},{"name":"Mauve Chalk","hex":"#e5d0cf"},{"name":"Mauve Day","hex":"#ac8c8c"},{"name":"Mauve Finery","hex":"#cbb8c0"},{"name":"Mauve Glow","hex":"#d18489"},{"name":"Mauve It","hex":"#bb4466"},{"name":"Mauve Jazz","hex":"#908186"},{"name":"Mauve Madness","hex":"#aa7982"},{"name":"Mauve Magic","hex":"#bf91b2"},{"name":"Mauve Melody","hex":"#a69f9a"},{"name":"Mauve Memento","hex":"#a46a95"},{"name":"Mauve Mist","hex":"#c49bd4"},{"name":"Mauve Mole","hex":"#7d716e"},{"name":"Mauve Morn","hex":"#e7cccd"},{"name":"Mauve Morning","hex":"#d9d0cf"},{"name":"Mauve Musk","hex":"#a98ca1"},{"name":"Mauve Muslin","hex":"#b59ead"},{"name":"Mauve Mystery","hex":"#685c61"},{"name":"Mauve Mystique","hex":"#bb4477"},{"name":"Mauve Nymph","hex":"#c0ada6"},{"name":"Mauve Orchid","hex":"#ab728d"},{"name":"Mauve Organdie","hex":"#d9c4d0"},{"name":"Mauve Pansy","hex":"#bebbc0"},{"name":"Mauve Seductress","hex":"#bb7788"},{"name":"Mauve Shadows","hex":"#af8f9c"},{"name":"Mauve Stone","hex":"#c4bab6"},{"name":"Mauve Taupe","hex":"#915f6d"},{"name":"Mauve Tinge","hex":"#e7e1e1"},{"name":"Mauve White","hex":"#dee3e4"},{"name":"Mauve Wine","hex":"#653c4a"},{"name":"Mauve Wisp","hex":"#eadde1"},{"name":"Mauve-a-Lish","hex":"#90686c"},{"name":"Mauveine","hex":"#8a6d8b"},{"name":"Mauvelous","hex":"#d6b3c0"},{"name":"Mauverine","hex":"#9d8888"},{"name":"Mauvette","hex":"#c4b2a9"},{"name":"Mauvewood","hex":"#ae6a78"},{"name":"Mauvey Nude","hex":"#bb8899"},{"name":"Mauvey Pink","hex":"#8c8188"},{"name":"Maverick","hex":"#c8b1c0"},{"name":"Mawmaw\'s Pearls","hex":"#efe9dd"},{"name":"Maxi Teal","hex":"#017478"},{"name":"Maximum Blue","hex":"#47abcc"},{"name":"Maximum Blue Green","hex":"#30bfbf"},{"name":"Maximum Blue Purple","hex":"#acace6"},{"name":"Maximum Green","hex":"#5e8c31"},{"name":"Maximum Green Yellow","hex":"#d9e650"},{"name":"Maximum Mocha","hex":"#6b4a40"},{"name":"Maximum Orange","hex":"#ff5b00"},{"name":"Maximum Purple","hex":"#733380"},{"name":"Maximum Red","hex":"#d92121"},{"name":"Maximum Red Purple","hex":"#a63a79"},{"name":"Maximum Yellow","hex":"#fafa37"},{"name":"Maximum Yellow Red","hex":"#f2ba49"},{"name":"May Apple","hex":"#92d599"},{"name":"May Day","hex":"#53cbc4"},{"name":"May Green","hex":"#4c9141"},{"name":"May Mist","hex":"#a19fc8"},{"name":"May Sun","hex":"#faead0"},{"name":"Maya Blue","hex":"#73c2fb"},{"name":"Maya Green","hex":"#98d2d9"},{"name":"Mayan Blue","hex":"#006b6c"},{"name":"Mayan Chocolate","hex":"#655046"},{"name":"Mayan Gold","hex":"#b68c37"},{"name":"Mayan Red","hex":"#6c4a43"},{"name":"Mayan Ruins","hex":"#7d6950"},{"name":"Mayan Treasure","hex":"#ce9844"},{"name":"Maybe Maui","hex":"#f6d48d"},{"name":"Maybe Mushroom","hex":"#e2d8cb"},{"name":"Maybeck Muslin","hex":"#eddfc9"},{"name":"Mayfair White","hex":"#e6f0de"},{"name":"Mayflower Orchid","hex":"#ed93d7"},{"name":"Mayfly","hex":"#696841"},{"name":"Mayonnaise","hex":"#f6eed1"},{"name":"Maypole","hex":"#bee8d3"},{"name":"Mazarine Blue","hex":"#2a407e"},{"name":"Maze","hex":"#5c5638"},{"name":"Mazzone","hex":"#b0907c"},{"name":"Mazzy Star","hex":"#bf5bb0"},{"name":"McKenzie","hex":"#8c6338"},{"name":"McNuke","hex":"#33ff11"},{"name":"Mead","hex":"#ffc878"},{"name":"Meadow","hex":"#81b489"},{"name":"Meadow Blossom Blue","hex":"#7ab2d4"},{"name":"Meadow Flower","hex":"#987184"},{"name":"Meadow Glen","hex":"#ccd1b2"},{"name":"Meadow Grass","hex":"#c1d6b1"},{"name":"Meadow Green","hex":"#739957"},{"name":"Meadow Lane","hex":"#c0d7cd"},{"name":"Meadow Light","hex":"#dfe9de"},{"name":"Meadow Mauve","hex":"#ac5d91"},{"name":"Meadow Mist","hex":"#ccd8ba"},{"name":"Meadow Phlox","hex":"#a8afc7"},{"name":"Meadow Trail","hex":"#8d8168"},{"name":"Meadow Violet","hex":"#764f82"},{"name":"Meadow Yellow","hex":"#f7da90"},{"name":"Meadowbrook","hex":"#60a0a3"},{"name":"Meadowland","hex":"#807a55"},{"name":"Meadowlark","hex":"#e8d940"},{"name":"Meadowood","hex":"#9da28e"},{"name":"Meadowsweet Mist","hex":"#d4e3e2"},{"name":"Mean Girls Lipstick","hex":"#ff00ae"},{"name":"Meander","hex":"#8f8c79"},{"name":"Meander Blue","hex":"#bedbd8"},{"name":"Meat","hex":"#f08080"},{"name":"Meatbun","hex":"#f8eed3"},{"name":"Meatloaf","hex":"#663311"},{"name":"Mecca Gold","hex":"#c89134"},{"name":"Mecca Orange","hex":"#bd5745"},{"name":"Mecca Red","hex":"#663f3f"},{"name":"Mech Suit","hex":"#bbdddd"},{"name":"Mecha Grey","hex":"#8d847f"},{"name":"Mecha Kitty","hex":"#d0c4d3"},{"name":"Mecha Metal","hex":"#848393"},{"name":"Mechagodzilla","hex":"#dedce2"},{"name":"Mechanicus Standard Grey","hex":"#3d4b4d"},{"name":"Mechrite Red","hex":"#a31713"},{"name":"Medal Bronze","hex":"#977547"},{"name":"Medallion","hex":"#c3a679"},{"name":"Medical Mask","hex":"#95cce4"},{"name":"Medici Blue","hex":"#104773"},{"name":"Medici Ivory","hex":"#f3e9d7"},{"name":"Medicine Man","hex":"#69556d"},{"name":"Medicine Wheel","hex":"#99a28c"},{"name":"Medieval","hex":"#696db0"},{"name":"Medieval Blue","hex":"#2e3858"},{"name":"Medieval Cobblestone","hex":"#878573"},{"name":"Medieval Forest","hex":"#007e6b"},{"name":"Medieval Gold","hex":"#ac7f48"},{"name":"Medieval Sulfur","hex":"#a79f5c"},{"name":"Medieval Wine","hex":"#8c7d88"},{"name":"Meditation","hex":"#a9ac9d"},{"name":"Meditation Time","hex":"#a7a987"},{"name":"Meditative","hex":"#96aab0"},{"name":"Mediterranea","hex":"#39636a"},{"name":"Mediterranean","hex":"#60797d"},{"name":"Mediterranean Blue","hex":"#1682b9"},{"name":"Mediterranean Charm","hex":"#a1cfec"},{"name":"Mediterranean Cove","hex":"#007b84"},{"name":"Mediterranean Green","hex":"#e0e9d3"},{"name":"Mediterranean Mist","hex":"#bce9d6"},{"name":"Mediterranean Sea","hex":"#1e8cab"},{"name":"Mediterranean Swirl","hex":"#2999a2"},{"name":"Medium Aquamarine","hex":"#66ddaa"},{"name":"Medium Black","hex":"#444443"},{"name":"Medium Blue","hex":"#0000cd"},{"name":"Medium Brown","hex":"#7f5112"},{"name":"Medium Candy Apple Red","hex":"#e2062c"},{"name":"Medium Carmine","hex":"#af4035"},{"name":"Medium Champagne","hex":"#f3e5ac"},{"name":"Medium Electric Blue","hex":"#035096"},{"name":"Medium Goldenrod","hex":"#eaeaae"},{"name":"Medium Green","hex":"#418c53"},{"name":"Medium Grey","hex":"#7d7f7c"},{"name":"Medium Grey Green","hex":"#4d6b53"},{"name":"Medium Gunship Grey","hex":"#3f4952"},{"name":"Medium Jungle Green","hex":"#1c352d"},{"name":"Medium Lavender Magenta","hex":"#dda0fd"},{"name":"Medium Orchid","hex":"#ba55d3"},{"name":"Medium Persian Blue","hex":"#0067a5"},{"name":"Medium Pink","hex":"#f36196"},{"name":"Medium Purple","hex":"#9e43a2"},{"name":"Medium Red Violet","hex":"#bb3385"},{"name":"Medium Roast","hex":"#3c2005"},{"name":"Medium Ruby","hex":"#aa4069"},{"name":"Medium Scarlet","hex":"#fc2847"},{"name":"Medium Sea Green","hex":"#3cb371"},{"name":"Medium Sky Blue","hex":"#80daeb"},{"name":"Medium Slate Blue","hex":"#7b68ee"},{"name":"Medium Spring Bud","hex":"#c9dc87"},{"name":"Medium Spring Green","hex":"#00fa9a"},{"name":"Medium Taupe","hex":"#674c47"},{"name":"Medium Terracotta","hex":"#dc9d8b"},{"name":"Medium Turquoise","hex":"#48d1cc"},{"name":"Medium Tuscan Red","hex":"#794431"},{"name":"Medium Vermilion","hex":"#d9603b"},{"name":"Medium Violet Red","hex":"#c71585"},{"name":"Medium Wood","hex":"#a68064"},{"name":"Medlar","hex":"#d5d7bf"},{"name":"Medusa Green","hex":"#998800"},{"name":"Medusa\'s Snakes","hex":"#777711"},{"name":"Mee-hua Sunset","hex":"#ee7700"},{"name":"Meek Moss Green","hex":"#869f98"},{"name":"Meerkat","hex":"#ab7647"},{"name":"Meetinghouse Blue","hex":"#739dad"},{"name":"Mega Blue","hex":"#366fa6"},{"name":"Mega Greige","hex":"#ada295"},{"name":"Mega Magenta","hex":"#d767ad"},{"name":"Mega Metal Mecha","hex":"#dfcbcf"},{"name":"Mega Metal Phoenix","hex":"#c6ccd4"},{"name":"Mega Teal","hex":"#0ee8a3"},{"name":"Megadrive Screen","hex":"#4a40ad"},{"name":"Megaman","hex":"#3cbcfc"},{"name":"Megaman Helmet","hex":"#0058f8"},{"name":"Megido Red","hex":"#a10000"},{"name":"Méi Gūi Hóng Red","hex":"#fe023c"},{"name":"Méi Gūi Zǐ Purple","hex":"#e03fd8"},{"name":"Méi Hēi Coal","hex":"#123120"},{"name":"Meissen Blue","hex":"#007fb9"},{"name":"Melancholia","hex":"#12390d"},{"name":"Melancholic Macaw","hex":"#aa1133"},{"name":"Melancholic Sea","hex":"#53778f"},{"name":"Melancholy","hex":"#dd8899"},{"name":"Mélange Green","hex":"#c4c476"},{"name":"Melanie","hex":"#e0b7c2"},{"name":"Melanite Black Green","hex":"#282e27"},{"name":"Melanzane","hex":"#342931"},{"name":"Melbourne","hex":"#4c7c4b"},{"name":"Melbourne Cup","hex":"#45c3ad"},{"name":"Melissa","hex":"#b5d96b"},{"name":"Mella Yella","hex":"#f0dda2"},{"name":"Mellifluous Blue","hex":"#c9e1e0"},{"name":"Mellow Apricot","hex":"#f8b878"},{"name":"Mellow Blue","hex":"#d7e2dd"},{"name":"Mellow Buff","hex":"#d5af91"},{"name":"Mellow Coral","hex":"#e0897e"},{"name":"Mellow Flower","hex":"#f1dfe9"},{"name":"Mellow Glow","hex":"#ffcfad"},{"name":"Mellow Green","hex":"#d5d593"},{"name":"Mellow Mango","hex":"#cc4400"},{"name":"Mellow Mauve","hex":"#9c6579"},{"name":"Mellow Melon","hex":"#ee2266"},{"name":"Mellow Mint","hex":"#ddedbd"},{"name":"Mellow Mood","hex":"#b1b7a1"},{"name":"Mellow Rose","hex":"#d9a6a1"},{"name":"Mellow Sun","hex":"#f5d39c"},{"name":"Mellow Yellow","hex":"#f8de7f"},{"name":"Mellowed Gold","hex":"#e2a94f"},{"name":"Melmac Silver","hex":"#b6b2a1"},{"name":"Melodic White","hex":"#eee8e8"},{"name":"Melodious","hex":"#7bb5ae"},{"name":"Melodramatic Magenta","hex":"#dd22aa"},{"name":"Melody","hex":"#becbd7"},{"name":"Melody Purple","hex":"#a8acd0"},{"name":"Melon","hex":"#ff7855"},{"name":"Melon Baby","hex":"#f47869"},{"name":"Melon Balls","hex":"#f2bd85"},{"name":"Melon Green","hex":"#74ac8d"},{"name":"Melon Ice","hex":"#f4d9c8"},{"name":"Melon Melody","hex":"#f9c291"},{"name":"Melón Meloso","hex":"#f2b88c"},{"name":"Melon Mist","hex":"#e88092"},{"name":"Melon Orange","hex":"#f08f48"},{"name":"Melon Pink","hex":"#f1d4c4"},{"name":"Melon Red","hex":"#f69268"},{"name":"Melon Seed","hex":"#332c22"},{"name":"Melon Sorbet","hex":"#f8b797"},{"name":"Melon Sprinkle","hex":"#ffcd9d"},{"name":"Melon Tint","hex":"#f8e7d4"},{"name":"Melon Twist","hex":"#aa6864"},{"name":"Melon Water","hex":"#fdbcb4"},{"name":"Melondrama","hex":"#ee8170"},{"name":"Melrose","hex":"#c3b9dd"},{"name":"Melt Ice","hex":"#b4cbe3"},{"name":"Melt with You","hex":"#e3cfab"},{"name":"Melted Butter","hex":"#ffcf53"},{"name":"Melted Chocolate","hex":"#785f4c"},{"name":"Melted Copper","hex":"#ce8544"},{"name":"Melted Ice Cream","hex":"#dcb7a6"},{"name":"Melted Marshmallow","hex":"#fee2cc"},{"name":"Melted Wax","hex":"#f6e6c5"},{"name":"Melting Glacier","hex":"#e9f9f5"},{"name":"Melting Ice","hex":"#cae1d9"},{"name":"Melting Icicles","hex":"#ecebe4"},{"name":"Melting Moment","hex":"#bba2b6"},{"name":"Melting Point","hex":"#cbe1e4"},{"name":"Melting Snowman","hex":"#dae5e0"},{"name":"Melting Violet","hex":"#d4b8bf"},{"name":"Meltwater","hex":"#79c0cc"},{"name":"Melville","hex":"#95a99e"},{"name":"Memoir","hex":"#ecf0da"},{"name":"Memorable Rose","hex":"#cf8a8d"},{"name":"Memories","hex":"#e8deda"},{"name":"Memorize","hex":"#9197a4"},{"name":"Memory Lane","hex":"#c7d1db"},{"name":"Memphis Green","hex":"#5e9d7b"},{"name":"Men\'s Night","hex":"#5d5f73"},{"name":"Menacing Clouds","hex":"#69788a"},{"name":"Mendocino Hills","hex":"#837a64"},{"name":"Menoth White Base","hex":"#f3e8b8"},{"name":"Menoth White Highlight","hex":"#f0f1ce"},{"name":"Mental Floss","hex":"#deb4c5"},{"name":"Mental Note","hex":"#eaeede"},{"name":"Menthol","hex":"#c1f9a2"},{"name":"Menthol Green","hex":"#9cd2b4"},{"name":"Menthol Kiss","hex":"#a0e2d4"},{"name":"Mephiston Red","hex":"#9a1115"},{"name":"Mercer Charcoal","hex":"#aca495"},{"name":"Merchant Marine Blue","hex":"#0343df"},{"name":"Mercurial","hex":"#b6b0a9"},{"name":"Mercury","hex":"#ebebeb"},{"name":"Mercury Mist","hex":"#89c8c3"},{"name":"Merguez","hex":"#650021"},{"name":"Meridian","hex":"#877272"},{"name":"Meridian Star","hex":"#7bc8b2"},{"name":"Merin\'s Fire","hex":"#ff9408"},{"name":"Meringue","hex":"#f3e4b3"},{"name":"Meringue Tips","hex":"#c2a080"},{"name":"Merino","hex":"#e1dbd0"},{"name":"Merino Wool","hex":"#cfc1ae"},{"name":"Meristem","hex":"#aae1ce"},{"name":"Merlin","hex":"#4f4e48"},{"name":"Merlin\'s Beard","hex":"#efe2d9"},{"name":"Merlin\'s Choice","hex":"#9f8898"},{"name":"Merlin\'s Cloak","hex":"#89556e"},{"name":"Merlot","hex":"#730039"},{"name":"Merlot Fields","hex":"#712735"},{"name":"Merlot Magic","hex":"#b64055"},{"name":"Mermaid","hex":"#817a65"},{"name":"Mermaid Blues","hex":"#004477"},{"name":"Mermaid Dreams","hex":"#0088bb"},{"name":"Mermaid Harbor","hex":"#00776f"},{"name":"Mermaid Net","hex":"#22cccc"},{"name":"Mermaid Sea","hex":"#297f6d"},{"name":"Mermaid Song","hex":"#25ae8e"},{"name":"Mermaid Tears","hex":"#d9e6a6"},{"name":"Mermaid Treasure","hex":"#1fafb4"},{"name":"Mermaid\'s Cove","hex":"#8aa786"},{"name":"Mermaid\'s Kiss","hex":"#59c8a5"},{"name":"Mermaid\'s Tail","hex":"#337b35"},{"name":"Merry Music","hex":"#ced3c1"},{"name":"Merry Pink","hex":"#eac8da"},{"name":"Merrylyn","hex":"#a5d0af"},{"name":"Mesa","hex":"#bca177"},{"name":"Mesa Beige","hex":"#f2ebd6"},{"name":"Mesa Peach","hex":"#c19180"},{"name":"Mesa Pink","hex":"#ddb1a8"},{"name":"Mesa Red","hex":"#92555b"},{"name":"Mesa Ridge","hex":"#772f39"},{"name":"Mesa Rose","hex":"#eeb5af"},{"name":"Mesa Sunrise","hex":"#ea8160"},{"name":"Mesa Tan","hex":"#a78b71"},{"name":"Mesa Verde","hex":"#7f976c"},{"name":"Mesclun Green","hex":"#9db682"},{"name":"Meški Black","hex":"#1f0b1e"},{"name":"Mesmerize","hex":"#8e9074"},{"name":"Mesozoic Green","hex":"#997700"},{"name":"Mesquite Powder","hex":"#e3c8b1"},{"name":"Message Green","hex":"#37b8af"},{"name":"Messenger Bag","hex":"#7d745e"},{"name":"Messinesi","hex":"#fee2be"},{"name":"Metal","hex":"#babfbc"},{"name":"Metal Chi","hex":"#9c9c9b"},{"name":"Metal Construction Green","hex":"#2f2e1f"},{"name":"Metal Deluxe","hex":"#244343"},{"name":"Metal Flake","hex":"#838782"},{"name":"Metal Fringe","hex":"#837e74"},{"name":"Metal Gear","hex":"#a2c3db"},{"name":"Metal Grey","hex":"#677986"},{"name":"Metal Petal","hex":"#b090b2"},{"name":"Metal Spark","hex":"#eeff99"},{"name":"Metalise","hex":"#34373c"},{"name":"Metallic","hex":"#bcc3c7"},{"name":"Metallic Blue","hex":"#4f738e"},{"name":"Metallic Bronze","hex":"#554a3c"},{"name":"Metallic Copper","hex":"#6e3d34"},{"name":"Metallic Gold","hex":"#d4af37"},{"name":"Metallic Green","hex":"#24855b"},{"name":"Metallic Mist","hex":"#cdccbe"},{"name":"Metallic Seaweed","hex":"#0a7e8c"},{"name":"Metallic Sunburst","hex":"#9c7c38"},{"name":"Metamorphosis","hex":"#a9959f"},{"name":"Meteor","hex":"#bb7431"},{"name":"Meteor Shower","hex":"#5533ff"},{"name":"Meteorite","hex":"#4a3b6a"},{"name":"Meteorite Black Blue","hex":"#414756"},{"name":"Meteorological","hex":"#596d69"},{"name":"Methadone","hex":"#cc2233"},{"name":"Methyl Blue","hex":"#0074a8"},{"name":"Metro","hex":"#828393"},{"name":"Metroid Red","hex":"#f83800"},{"name":"Metropolis","hex":"#61584f"},{"name":"Metropolis Mood","hex":"#99a1a5"},{"name":"Metropolitan Silhouette","hex":"#3e4244"},{"name":"Metropolitan White","hex":"#eeece7"},{"name":"Mette Penne","hex":"#f9e1d4"},{"name":"Mettwurst","hex":"#df7163"},{"name":"Mexicali Rose","hex":"#e39b99"},{"name":"Mexican Chile","hex":"#d16d76"},{"name":"Mexican Chocolate","hex":"#6f5a48"},{"name":"Mexican Milk","hex":"#ffb9b2"},{"name":"Mexican Moonlight","hex":"#c99387"},{"name":"Mexican Mudkip","hex":"#fcd8dc"},{"name":"Mexican Pink","hex":"#e4007c"},{"name":"Mexican Purple","hex":"#5a3c55"},{"name":"Mexican Red","hex":"#9b3d3d"},{"name":"Mexican Red Papaya","hex":"#c6452f"},{"name":"Mexican Sand","hex":"#af9781"},{"name":"Mexican Sand Dollar","hex":"#dad4c5"},{"name":"Mexican Silver","hex":"#cecec8"},{"name":"Mexican Spirit","hex":"#d68339"},{"name":"Mexican Standoff","hex":"#ec9f76"},{"name":"Mǐ Bái Beige","hex":"#dad7ad"},{"name":"Mì Chéng Honey","hex":"#e8af45"},{"name":"Miami Coral","hex":"#fd8973"},{"name":"Miami Jade","hex":"#17917f"},{"name":"Miami Marmalade","hex":"#f7931a"},{"name":"Miami Pink","hex":"#f7c3da"},{"name":"Miami Spice","hex":"#907a6e"},{"name":"Miami Stucco","hex":"#f5d5b8"},{"name":"Miami Teal","hex":"#6ec2b0"},{"name":"Miami Weiss","hex":"#ede4d3"},{"name":"Miami White","hex":"#ccccee"},{"name":"Mica Creek","hex":"#70828f"},{"name":"Micaceous Green","hex":"#c5dacc"},{"name":"Micaceous Light Grey","hex":"#cdc7bd"},{"name":"Microchip","hex":"#babcc0"},{"name":"Micropolis","hex":"#556e6b"},{"name":"MicroProse Red","hex":"#ee172b"},{"name":"Microwave Blue","hex":"#2d5254"},{"name":"Mid Blue","hex":"#276ab3"},{"name":"Mid Century","hex":"#553333"},{"name":"Mid Century Furniture","hex":"#ae5c1b"},{"name":"Mid Cypress","hex":"#779781"},{"name":"Mid Green","hex":"#50a747"},{"name":"Mid Grey","hex":"#5f5f6e"},{"name":"Mid Spring Morning","hex":"#cff7ef"},{"name":"Mid Tan","hex":"#c4915e"},{"name":"Mid-century Gem","hex":"#81b39c"},{"name":"Midas Finger Gold","hex":"#f6b404"},{"name":"Midas Touch","hex":"#e8bd45"},{"name":"Midday","hex":"#f7d78a"},{"name":"Midday Sun","hex":"#ffe1a3"},{"name":"Middle Blue","hex":"#7ed4e6"},{"name":"Middle Blue Green","hex":"#8dd9cc"},{"name":"Middle Blue Purple","hex":"#8b72be"},{"name":"Middle Ditch","hex":"#7c6942"},{"name":"Middle Green","hex":"#4d8c57"},{"name":"Middle Green Yellow","hex":"#acbf60"},{"name":"Middle Purple","hex":"#d982b5"},{"name":"Middle Red","hex":"#e58e73"},{"name":"Middle Red Purple","hex":"#210837"},{"name":"Middle Safflower","hex":"#c85179"},{"name":"Middle Yellow","hex":"#ffeb00"},{"name":"Middle Yellow Red","hex":"#ecb176"},{"name":"Middle-Earth","hex":"#a2948d"},{"name":"Middlestone","hex":"#c7ab84"},{"name":"Middy\'s Purple","hex":"#aa8ed6"},{"name":"Midnight","hex":"#03012d"},{"name":"Midnight Affair","hex":"#534657"},{"name":"Midnight Badger","hex":"#585960"},{"name":"Midnight Blue","hex":"#020035"},{"name":"Midnight Blush","hex":"#979fbf"},{"name":"Midnight Brown","hex":"#706048"},{"name":"Midnight Clover","hex":"#3c574e"},{"name":"Midnight Dream","hex":"#394857"},{"name":"Midnight Dreams","hex":"#002233"},{"name":"Midnight Escape","hex":"#403c40"},{"name":"Midnight Express","hex":"#21263a"},{"name":"Midnight Garden","hex":"#637057"},{"name":"Midnight Green","hex":"#004953"},{"name":"Midnight Grey","hex":"#666a6d"},{"name":"Midnight Haze","hex":"#3e505f"},{"name":"Midnight Hour","hex":"#3b484f"},{"name":"Midnight in NY","hex":"#4e5a59"},{"name":"Midnight in Saigon","hex":"#dd8866"},{"name":"Midnight in the Tropics","hex":"#435964"},{"name":"Midnight in Tokyo","hex":"#000088"},{"name":"Midnight Interlude","hex":"#32496f"},{"name":"Midnight Iris","hex":"#484d61"},{"name":"Midnight Jam","hex":"#0b0119"},{"name":"Midnight Magic","hex":"#46474a"},{"name":"Midnight Melancholia","hex":"#002266"},{"name":"Midnight Merlot","hex":"#880044"},{"name":"Midnight Mosaic","hex":"#3d5267"},{"name":"Midnight Moss","hex":"#242e28"},{"name":"Midnight Navy","hex":"#364251"},{"name":"Midnight Pearl","hex":"#5f6c74"},{"name":"Midnight Pie","hex":"#372d52"},{"name":"Midnight Pines","hex":"#17240b"},{"name":"Midnight Purple","hex":"#280137"},{"name":"Midnight Sea","hex":"#565b8d"},{"name":"Midnight Serenade","hex":"#41434e"},{"name":"Midnight Shadow","hex":"#566373"},{"name":"Midnight Show","hex":"#546473"},{"name":"Midnight Sky","hex":"#424753"},{"name":"Midnight Spruce","hex":"#555b53"},{"name":"Midnight Sun","hex":"#4e5a6d"},{"name":"Midnight Violet","hex":"#6a75ad"},{"name":"Midori","hex":"#2a603b"},{"name":"Midori Green","hex":"#3eb370"},{"name":"Midsummer","hex":"#f6d9a9"},{"name":"Midsummer Dream","hex":"#b7a5ad"},{"name":"Midsummer Field","hex":"#88cc44"},{"name":"Midsummer Gold","hex":"#eab034"},{"name":"Midsummer Night","hex":"#3a505b"},{"name":"Midsummer Nights","hex":"#0011ee"},{"name":"Midsummer Twilight","hex":"#b1a4b4"},{"name":"Midsummer\'s Dream","hex":"#b4d0d9"},{"name":"Midtown","hex":"#b5a18a"},{"name":"Midwinter Fire","hex":"#dd1100"},{"name":"Midwinter Mist","hex":"#a5d4dc"},{"name":"Mighty Mauve","hex":"#8f7f85"},{"name":"Mighty Midnight","hex":"#000133"},{"name":"Migol Blue","hex":"#283482"},{"name":"Mikado","hex":"#3f3623"},{"name":"Mikado Green","hex":"#a7a62d"},{"name":"Mikado Yellow","hex":"#ffc40c"},{"name":"Mikan Orange","hex":"#f08300"},{"name":"Mike Wazowski Green","hex":"#11ee55"},{"name":"Milady","hex":"#eee1dc"},{"name":"Milan","hex":"#f6f493"},{"name":"Milano","hex":"#c1a181"},{"name":"Milano Red","hex":"#9e3332"},{"name":"Mild Blue","hex":"#cbd5db"},{"name":"Mild Blue Yonder","hex":"#a2add0"},{"name":"Mild Evergreen","hex":"#8ebbac"},{"name":"Mild Green","hex":"#789885"},{"name":"Mild Menthol","hex":"#87f8a3"},{"name":"Mild Mint","hex":"#dce6e3"},{"name":"Mild Orange","hex":"#f3bb93"},{"name":"Mildura","hex":"#667960"},{"name":"Miles","hex":"#829ba0"},{"name":"Milestone","hex":"#7f848a"},{"name":"Militant Vegan","hex":"#229955"},{"name":"Military Green","hex":"#667c3e"},{"name":"Military Olive","hex":"#706043"},{"name":"Milk","hex":"#fdfff5"},{"name":"Milk and Cookies","hex":"#e9e1df"},{"name":"Milk Blue","hex":"#dce3e7"},{"name":"Milk Brownie Dough","hex":"#8f7265"},{"name":"Milk Chocolate","hex":"#7f4e1e"},{"name":"Milk Coffee Brown","hex":"#966f5d"},{"name":"Milk Foam","hex":"#f6ffe8"},{"name":"Milk Froth","hex":"#ffeecc"},{"name":"Milk Glass","hex":"#faf7f0"},{"name":"Milk Mustache","hex":"#faf3e6"},{"name":"Milk Paint","hex":"#efe9d9"},{"name":"Milk Punch","hex":"#fff4d3"},{"name":"Milk Quartz","hex":"#f5deae"},{"name":"Milk Star White","hex":"#f5ede2"},{"name":"Milk Thistle","hex":"#9e9b88"},{"name":"Milk Tooth","hex":"#faebd7"},{"name":"Milk White","hex":"#dcd9cd"},{"name":"Milkshake Pink","hex":"#f0cdd2"},{"name":"Milkweed","hex":"#e3e8d9"},{"name":"Milkweed Pod","hex":"#95987e"},{"name":"Milkwort Red","hex":"#916981"},{"name":"Milky","hex":"#e2dcd4"},{"name":"Milky Aquamarine","hex":"#038487"},{"name":"Milky Blue","hex":"#72a8ba"},{"name":"Milky Green","hex":"#c6d4c9"},{"name":"Milky Lavender","hex":"#aea3d0"},{"name":"Milky Maize","hex":"#f9d9a0"},{"name":"Milky Skies","hex":"#c3b1af"},{"name":"Milky Way","hex":"#e8f4f7"},{"name":"Milky Way Galaxy","hex":"#faefd5"},{"name":"Milky Yellow","hex":"#f8dd74"},{"name":"Mill Creek","hex":"#876e59"},{"name":"Millbrook","hex":"#595648"},{"name":"Mille-Feuille","hex":"#efc87d"},{"name":"Millennial Pink","hex":"#f6c8c1"},{"name":"Millennium Silver","hex":"#8c9595"},{"name":"Million Grey","hex":"#999999"},{"name":"Millionaire","hex":"#b6843c"},{"name":"Millstream","hex":"#b9d4de"},{"name":"Milly Green","hex":"#99bd91"},{"name":"Milpa","hex":"#689663"},{"name":"Milton","hex":"#b4b498"},{"name":"Milvus Milvus Orange","hex":"#bb7722"},{"name":"Mimesia Blue","hex":"#2269ca"},{"name":"Mimi Pink","hex":"#ffdae9"},{"name":"Mimolette Orange","hex":"#ee8811"},{"name":"Mimosa","hex":"#f5e9d5"},{"name":"Mimosa Yellow","hex":"#dfc633"},{"name":"Minced Ginger","hex":"#bdb387"},{"name":"Mincemeat","hex":"#b66a3c"},{"name":"Mindaro","hex":"#daea6f"},{"name":"Mindful","hex":"#c8ac82"},{"name":"Mindful Grey","hex":"#bdb5ad"},{"name":"Mine Rock","hex":"#8e8583"},{"name":"Mine Shaft","hex":"#373e41"},{"name":"Mined Coal","hex":"#6c6b65"},{"name":"Miner\'s Dust","hex":"#d3cec5"},{"name":"Mineral","hex":"#d7d1c5"},{"name":"Mineral Beige","hex":"#d8c49f"},{"name":"Mineral Blue","hex":"#6d9192"},{"name":"Mineral Brown","hex":"#4d3f33"},{"name":"Mineral Deposit","hex":"#abb0ac"},{"name":"Mineral Glow","hex":"#fce8ce"},{"name":"Mineral Green","hex":"#506355"},{"name":"Mineral Grey","hex":"#b2b6ac"},{"name":"Mineral Red","hex":"#b35457"},{"name":"Mineral Spring","hex":"#edf2ec"},{"name":"Mineral Umber","hex":"#b18b32"},{"name":"Mineral Water","hex":"#dfebd6"},{"name":"Mineral White","hex":"#dce5d9"},{"name":"Mineral Yellow","hex":"#d19a3b"},{"name":"Minerva","hex":"#b5deda"},{"name":"Minestrone","hex":"#c72616"},{"name":"Ming","hex":"#407577"},{"name":"Ming Green","hex":"#41b57e"},{"name":"Mini Bay","hex":"#8aadcf"},{"name":"Mini Blue","hex":"#96d7db"},{"name":"Mini Cake","hex":"#fbf6de"},{"name":"Mini Green","hex":"#9fc5aa"},{"name":"Miniature Posey","hex":"#e5beba"},{"name":"Minified Ballerina Blue","hex":"#d3dfea"},{"name":"Minified Blue","hex":"#b3dbea"},{"name":"Minified Blush","hex":"#f2dde1"},{"name":"Minified Cinnamon","hex":"#ded9db"},{"name":"Minified Green","hex":"#dde8e0"},{"name":"Minified Jade","hex":"#c1e3e9"},{"name":"Minified Lime","hex":"#ebf5de"},{"name":"Minified Magenta","hex":"#e6dfe8"},{"name":"Minified Malachite","hex":"#ddf3e5"},{"name":"Minified Maroon","hex":"#e5dbda"},{"name":"Minified Mauve","hex":"#e0dce4"},{"name":"Minified Mint","hex":"#e4ebdc"},{"name":"Minified Moss","hex":"#e3e8db"},{"name":"Minified Mustard","hex":"#e9e6d4"},{"name":"Minified Purple","hex":"#e1dee7"},{"name":"Minified Yellow","hex":"#f4ebd4"},{"name":"Minimal","hex":"#f3eecd"},{"name":"Minimal Grey","hex":"#948d99"},{"name":"Minimal Rose","hex":"#f2cfe0"},{"name":"Minimalist","hex":"#cabead"},{"name":"Minimalistic","hex":"#e9ece5"},{"name":"Minimum Beige","hex":"#e8d3ba"},{"name":"Minion Yellow","hex":"#fece4e"},{"name":"Mink","hex":"#8a7561"},{"name":"Mink Brown","hex":"#67594c"},{"name":"Mink Haze","hex":"#c5b29f"},{"name":"Minnesota April","hex":"#9b9fb5"},{"name":"Minor Blue","hex":"#b7dfe8"},{"name":"Minotaur Red","hex":"#734b42"},{"name":"Minotaurus Brown","hex":"#882211"},{"name":"Minsk","hex":"#3e3267"},{"name":"Minstrel of the Woods","hex":"#118800"},{"name":"Minstrel Rose","hex":"#c89697"},{"name":"Mint","hex":"#3eb489"},{"name":"Mint Blossom Rose","hex":"#d7c2ce"},{"name":"Mint Blue","hex":"#bce0df"},{"name":"Mint Bonbon Green","hex":"#7db6a8"},{"name":"Mint Chiffon","hex":"#e6fdf1"},{"name":"Mint Chip","hex":"#cfebea"},{"name":"Mint Circle","hex":"#a9ceaa"},{"name":"Mint Cocktail Green","hex":"#b8e2b0"},{"name":"Mint Coffee","hex":"#ccffee"},{"name":"Mint Cold Green","hex":"#6cbba0"},{"name":"Mint Condition","hex":"#dffbf3"},{"name":"Mint Cream","hex":"#f5fffa"},{"name":"Mint Emulsion","hex":"#dfeadb"},{"name":"Mint Fizz","hex":"#e6f3e7"},{"name":"Mint Flash","hex":"#dcf4e6"},{"name":"Mint Frappé","hex":"#d0ebc8"},{"name":"Mint Gloss","hex":"#c8f3cd"},{"name":"Mint Grasshopper","hex":"#e2f0e0"},{"name":"Mint Green","hex":"#487d4a"},{"name":"Mint Hint","hex":"#ecf4e2"},{"name":"Mint Ice","hex":"#bde8d8"},{"name":"Mint Ice Cream","hex":"#98cdb5"},{"name":"Mint Ice Green","hex":"#c9caa1"},{"name":"Mint Jelly","hex":"#45cea2"},{"name":"Mint Julep","hex":"#def0a3"},{"name":"Mint Leaf","hex":"#00cfb0"},{"name":"Mint Leaves","hex":"#6a7d4e"},{"name":"Mint Macaron","hex":"#afeeee"},{"name":"Mint Majesty","hex":"#7dd7c0"},{"name":"Mint Mist","hex":"#b9e0d3"},{"name":"Mint Morning","hex":"#00ddcc"},{"name":"Mint Mousse","hex":"#b4ccbd"},{"name":"Mint Parfait","hex":"#bbe6bb"},{"name":"Mint Shake","hex":"#daeed3"},{"name":"Mint Smoothie","hex":"#c5e6d1"},{"name":"Mint Soap","hex":"#cbd5b1"},{"name":"Mint Sprig","hex":"#009c6e"},{"name":"Mint Stone","hex":"#95b090"},{"name":"Mint Tea","hex":"#afeee1"},{"name":"Mint Tonic","hex":"#99eeaa"},{"name":"Mint Tulip","hex":"#c6eadd"},{"name":"Mint Twist","hex":"#98cbba"},{"name":"Mint Wafer","hex":"#dce5d8"},{"name":"Mint Zest","hex":"#ccffdd"},{"name":"Mint-o-licious","hex":"#b6e9c8"},{"name":"Mintage","hex":"#78bfb2"},{"name":"Mintastic","hex":"#afffd5"},{"name":"Minted","hex":"#e0ead8"},{"name":"Minted Blue","hex":"#26a6be"},{"name":"Minted Blueberry Lemonade","hex":"#b32651"},{"name":"Minted Ice","hex":"#d8f3eb"},{"name":"Minted Lemon","hex":"#c1c6a8"},{"name":"Mintie","hex":"#abf4d2"},{"name":"Mintnight","hex":"#7cbbae"},{"name":"Mintos","hex":"#80d9cc"},{"name":"Minty Fresh","hex":"#d2f2e7"},{"name":"Minty Frosting","hex":"#dbe8cf"},{"name":"Minty Green","hex":"#0bf77d"},{"name":"Minty Paradise","hex":"#00ffbb"},{"name":"Minuet","hex":"#a5b6cf"},{"name":"Minuet Lilac","hex":"#777ba9"},{"name":"Minuet Rose","hex":"#b38081"},{"name":"Minuet White","hex":"#e8e6e7"},{"name":"Minuette","hex":"#d47791"},{"name":"Minute Mauve","hex":"#f2e4f5"},{"name":"Mirabella","hex":"#886793"},{"name":"Mirabelle Yellow","hex":"#f3be67"},{"name":"Miracle","hex":"#898696"},{"name":"Miracle Bay","hex":"#799292"},{"name":"Miracle Elixir","hex":"#617ba6"},{"name":"Mirador","hex":"#bcdccd"},{"name":"Mirage","hex":"#373f43"},{"name":"Mirage Blue","hex":"#636c77"},{"name":"Mirage Grey","hex":"#abafae"},{"name":"Mirage Lake","hex":"#4f938f"},{"name":"Mirage of Violets","hex":"#7b1c6e"},{"name":"Mirage White","hex":"#f5f4e6"},{"name":"Miranda\'s Spike","hex":"#614251"},{"name":"Mirror Ball","hex":"#d6d4d7"},{"name":"Mirror Lake","hex":"#7aa8cb"},{"name":"Mirror Mirror","hex":"#a8b0b2"},{"name":"Mirrored Willow","hex":"#8e876e"},{"name":"Mischief Maker","hex":"#954738"},{"name":"Mischief Mouse","hex":"#b7bab9"},{"name":"Mischievous","hex":"#dff2dd"},{"name":"Mischka","hex":"#a5a9b2"},{"name":"Missed","hex":"#eff0c0"},{"name":"Missing Link","hex":"#6f5d57"},{"name":"Mission Bay Blue","hex":"#9ba9ab"},{"name":"Mission Brown","hex":"#775c47"},{"name":"Mission Control","hex":"#818387"},{"name":"Mission Courtyard","hex":"#f3d1b3"},{"name":"Mission Gold","hex":"#b78d61"},{"name":"Mission Hills","hex":"#b29c7f"},{"name":"Mission Jewel","hex":"#456252"},{"name":"Mission Stone","hex":"#dac5b6"},{"name":"Mission Tan","hex":"#dac6a8"},{"name":"Mission Tile","hex":"#874c3e"},{"name":"Mission Trail","hex":"#857a64"},{"name":"Mission White","hex":"#e2d8c2"},{"name":"Mission Wildflower","hex":"#9e5566"},{"name":"Mississippi Mud","hex":"#99886f"},{"name":"Mississippi River","hex":"#3b638c"},{"name":"Missouri Mud","hex":"#a6a19b"},{"name":"Mist Green","hex":"#aacebc"},{"name":"Mist Grey","hex":"#c4c4bc"},{"name":"Mist of Green","hex":"#e3f1eb"},{"name":"Mist Spirit","hex":"#e4ebe7"},{"name":"Mist Yellow","hex":"#f8eed6"},{"name":"Misted Aqua","hex":"#d7e7e6"},{"name":"Misted Eve","hex":"#a2b7cf"},{"name":"Misted Fern","hex":"#e1ecd1"},{"name":"Misted Yellow","hex":"#dab965"},{"name":"Mistletoe","hex":"#8aa282"},{"name":"Mistletoe Kiss","hex":"#98b489"},{"name":"Mistral","hex":"#b8bfcc"},{"name":"Misty","hex":"#cdd2d2"},{"name":"Misty Afternoon","hex":"#c6dcc7"},{"name":"Misty Aqua","hex":"#bcdbdb"},{"name":"Misty Beach Cattle","hex":"#f1eedf"},{"name":"Misty Bead","hex":"#d2d59b"},{"name":"Misty Blue","hex":"#b4c4c3"},{"name":"Misty Blush","hex":"#ddc9c6"},{"name":"Misty Coast","hex":"#d5d9d3"},{"name":"Misty Cold Sea","hex":"#83bbc1"},{"name":"Misty Dawn","hex":"#e4e5e0"},{"name":"Misty Glen","hex":"#cde7db"},{"name":"Misty Grape","hex":"#65434d"},{"name":"Misty Haze","hex":"#cec9c3"},{"name":"Misty Hillside","hex":"#dce5cc"},{"name":"Misty Isle","hex":"#c5e4dc"},{"name":"Misty Jade","hex":"#acd0bb"},{"name":"Misty Lake","hex":"#c2d5c4"},{"name":"Misty Lavender","hex":"#dbd9e1"},{"name":"Misty Lawn","hex":"#dffae1"},{"name":"Misty Lilac","hex":"#b9b1c2"},{"name":"Misty Marsh","hex":"#d3e1d3"},{"name":"Misty Meadow","hex":"#bec0b0"},{"name":"Misty Memories","hex":"#eac3d2"},{"name":"Misty Mint","hex":"#deecda"},{"name":"Misty Moonstone","hex":"#e5e0cc"},{"name":"Misty Moor","hex":"#718981"},{"name":"Misty Morn","hex":"#e7e1e3"},{"name":"Misty Morning","hex":"#b2c8bd"},{"name":"Misty Moss","hex":"#bbb477"},{"name":"Misty Mountains","hex":"#c0d0e6"},{"name":"Misty Mustard","hex":"#f7ebd1"},{"name":"Misty Rose","hex":"#ffe4e1"},{"name":"Misty Surf","hex":"#b5c8c9"},{"name":"Misty Valley","hex":"#bdc389"},{"name":"Misty Violet","hex":"#dbd7e4"},{"name":"Mitchell Blue","hex":"#0d789f"},{"name":"Mithril","hex":"#878787"},{"name":"Mithril Silver","hex":"#bbbbc1"},{"name":"Mix Or Match","hex":"#ccccba"},{"name":"Mixed Berries","hex":"#96819a"},{"name":"Mixed Berry Jam","hex":"#6a4652"},{"name":"Mixed Fruit","hex":"#f9bab2"},{"name":"Mixed Veggies","hex":"#719166"},{"name":"Miyamoto Red","hex":"#e4030f"},{"name":"Miyazaki Verdant","hex":"#6fea3e"},{"name":"Mizu","hex":"#70c1e0"},{"name":"Mizu Cyan","hex":"#a7dbed"},{"name":"Mizuasagi Green","hex":"#749f8d"},{"name":"Moat","hex":"#3e6a6b"},{"name":"Mobster","hex":"#605a67"},{"name":"Moby Dick","hex":"#dde8ed"},{"name":"Moccasin","hex":"#fbebd6"},{"name":"Mocha","hex":"#9d7651"},{"name":"Mocha Accent","hex":"#8d8171"},{"name":"Mocha Bean","hex":"#847569"},{"name":"Mocha Bisque","hex":"#9a6340"},{"name":"Mocha Black","hex":"#6f5b52"},{"name":"Mocha Brown","hex":"#6b565e"},{"name":"Mocha Cake","hex":"#beaf93"},{"name":"Mocha Dandelion","hex":"#f1d96e"},{"name":"Mocha Foam","hex":"#bba28e"},{"name":"Mocha Glow","hex":"#773322"},{"name":"Mocha Ice","hex":"#dfd2ca"},{"name":"Mocha Latte","hex":"#82715f"},{"name":"Mocha Light","hex":"#d7cfc2"},{"name":"Mocha Madness","hex":"#8b6b58"},{"name":"Mocha Magic","hex":"#88796d"},{"name":"Mocha Mousse","hex":"#996e5b"},{"name":"Mocha Tan","hex":"#ac9680"},{"name":"Mocha Wisp","hex":"#918278"},{"name":"Mochaccino","hex":"#945200"},{"name":"Mochito","hex":"#8efa00"},{"name":"Mock Orange","hex":"#ff9863"},{"name":"Mod Orange","hex":"#d8583c"},{"name":"Modal","hex":"#31a6d1"},{"name":"Modal Blue","hex":"#40a6ac"},{"name":"Mode Beige","hex":"#96711f"},{"name":"Moderate White","hex":"#e9decf"},{"name":"Modern Blue","hex":"#bad1e9"},{"name":"Modern Grey","hex":"#d5cec2"},{"name":"Modern History","hex":"#bea27d"},{"name":"Modern Ivory","hex":"#f5ecdc"},{"name":"Modern Lavender","hex":"#a8aab3"},{"name":"Modern Mint","hex":"#88a395"},{"name":"Modern Mocha","hex":"#9d8376"},{"name":"Modern Monument","hex":"#d6d6d1"},{"name":"Modern Zen","hex":"#e0deb2"},{"name":"Moderne Class","hex":"#745b49"},{"name":"Modest Mauve","hex":"#838492"},{"name":"Modest Violet","hex":"#e9e4ef"},{"name":"Modest White","hex":"#e6ddd4"},{"name":"Modestly Peach","hex":"#eea59d"},{"name":"Modesty","hex":"#d4c7d9"},{"name":"Modish Moss","hex":"#c3b68b"},{"name":"Moegi Green","hex":"#f19172"},{"name":"Moelleux Au Chocolat","hex":"#553311"},{"name":"Moenkopi Soil","hex":"#c8a692"},{"name":"Mogwa-Cheong Yellow","hex":"#ddcc00"},{"name":"Mohair Mauve","hex":"#bfa59e"},{"name":"Mohair Pink","hex":"#a78594"},{"name":"Mohair Soft Blue Grey","hex":"#97b2b7"},{"name":"Mohalla","hex":"#a79b7e"},{"name":"Moire","hex":"#beadb0"},{"name":"Moire Satin","hex":"#665d63"},{"name":"Moist Gold","hex":"#dbdb70"},{"name":"Moist Silver","hex":"#e0e7dd"},{"name":"Moisty Mire","hex":"#004422"},{"name":"Mojave Desert","hex":"#bea684"},{"name":"Mojave Dusk","hex":"#b99178"},{"name":"Mojave Gold","hex":"#bf9c65"},{"name":"Mojave Sunset","hex":"#aa6a53"},{"name":"Mojito","hex":"#e4f3e0"},{"name":"Mojo","hex":"#97463c"},{"name":"Molasses","hex":"#574a47"},{"name":"Molasses Cookie","hex":"#8b714b"},{"name":"Moldy Ochre","hex":"#d5a300"},{"name":"Mole","hex":"#392d2b"},{"name":"Mole Grey","hex":"#938f8a"},{"name":"Moleskin","hex":"#b0a196"},{"name":"Mollusca","hex":"#e6bca0"},{"name":"Molly Green","hex":"#e3efe3"},{"name":"Molly Robins","hex":"#4d8b72"},{"name":"Molten Bronze","hex":"#c69c04"},{"name":"Molten Caramel","hex":"#bb7a39"},{"name":"Molten Core","hex":"#ff5800"},{"name":"Molten Ice","hex":"#e1ede6"},{"name":"Molten Lava","hex":"#b5332e"},{"name":"Molten Lead","hex":"#686a69"},{"name":"Mom\'s Apple Pie","hex":"#eab781"},{"name":"Mom\'s Love","hex":"#ffd4bb"},{"name":"Mom\'s Pancake","hex":"#f5c553"},{"name":"Momentum","hex":"#746f5c"},{"name":"Momo Peach","hex":"#f47983"},{"name":"Momoshio Brown","hex":"#542d24"},{"name":"Mona Lisa","hex":"#ff9889"},{"name":"Monaco","hex":"#abd4e6"},{"name":"Monaco Blue","hex":"#274376"},{"name":"Monarch","hex":"#6b252c"},{"name":"Monarch Gold","hex":"#b7813c"},{"name":"Monarch Migration","hex":"#bf764c"},{"name":"Monarch Orange","hex":"#efa06b"},{"name":"Monarch Velvet","hex":"#543941"},{"name":"Monarch Wing","hex":"#ff8d25"},{"name":"Monarch\'s Cocoon","hex":"#8cb293"},{"name":"Monarchist","hex":"#4b62d2"},{"name":"Monarchy","hex":"#9093ad"},{"name":"Monastery Mantle","hex":"#41363a"},{"name":"Monastic","hex":"#aba9d2"},{"name":"Monastir","hex":"#b78999"},{"name":"Moncur","hex":"#9bb9ae"},{"name":"Mondo","hex":"#554d42"},{"name":"Mondrian Blue","hex":"#0f478c"},{"name":"Monet","hex":"#c3cfdc"},{"name":"Monet Lily","hex":"#cdd7e6"},{"name":"Monet Magic","hex":"#c1acc3"},{"name":"Monet Moonrise","hex":"#eef0d1"},{"name":"Monet Vert","hex":"#92dbc4"},{"name":"Monet\'s Lavender","hex":"#dde0ea"},{"name":"Money","hex":"#7b9a6d"},{"name":"Money Banks","hex":"#aabe49"},{"name":"Money Tree","hex":"#c9937a"},{"name":"Mongolian Plateau","hex":"#777700"},{"name":"Mongoose","hex":"#a58b6f"},{"name":"Monk\'s Cloth","hex":"#6e6355"},{"name":"Monkey Island","hex":"#553b39"},{"name":"Monkey King","hex":"#bf6414"},{"name":"Monkey Madness","hex":"#63584c"},{"name":"Monks Robe","hex":"#704822"},{"name":"Monogram","hex":"#595747"},{"name":"Monologue","hex":"#a1bcd8"},{"name":"Monorail Silver","hex":"#b8bcbb"},{"name":"Monroe Kiss","hex":"#dec1b8"},{"name":"Monsoon","hex":"#7a7679"},{"name":"Monstera","hex":"#5f674b"},{"name":"Monstera Deliciosa","hex":"#75bf0a"},{"name":"Monstrous Green","hex":"#22cc11"},{"name":"Mont Blanc","hex":"#9eb6d8"},{"name":"Mont Blanc Peak","hex":"#f2e7e7"},{"name":"Montage","hex":"#8190a4"},{"name":"Montana","hex":"#393b3c"},{"name":"Montana Grape","hex":"#76627c"},{"name":"Montana Sky","hex":"#6ab0b9"},{"name":"Montauk Sands","hex":"#bbad9e"},{"name":"Monte Carlo","hex":"#7ac5b4"},{"name":"Montecito","hex":"#b6a180"},{"name":"Montego Bay","hex":"#3fbabd"},{"name":"Monterey Brown","hex":"#946e5c"},{"name":"Monterey Chestnut","hex":"#7d4235"},{"name":"Monterey Mist","hex":"#e0dfea"},{"name":"Montezuma","hex":"#d2cdb6"},{"name":"Montezuma Gold","hex":"#eecc44"},{"name":"Montezuma Hills","hex":"#a6b2a4"},{"name":"Montezuma\'s Castle","hex":"#d9ad9e"},{"name":"Montreux Blue","hex":"#5879a2"},{"name":"Montrose Rose","hex":"#9d6a73"},{"name":"Monument","hex":"#84898c"},{"name":"Monument Green","hex":"#d3c190"},{"name":"Monument Grey","hex":"#7a807a"},{"name":"Monument Valley","hex":"#ad5c34"},{"name":"Monza","hex":"#c7031e"},{"name":"Moo","hex":"#fbe5bd"},{"name":"Mood Indigo","hex":"#393f52"},{"name":"Mood Lighting","hex":"#ffe7d5"},{"name":"Mood Mode","hex":"#7f90cb"},{"name":"Moody Black","hex":"#49555d"},{"name":"Moody Blue","hex":"#8378c7"},{"name":"Moody Blues","hex":"#586e75"},{"name":"Moody Indigo","hex":"#6586a5"},{"name":"Moody Mist","hex":"#cae2d9"},{"name":"Moody Whitby","hex":"#8f9294"},{"name":"Mooloolaba","hex":"#c7b8a9"},{"name":"Moon Base","hex":"#7d7d77"},{"name":"Moon Buggy","hex":"#c7bdc1"},{"name":"Moon Dance","hex":"#faefbe"},{"name":"Moon Drop","hex":"#ddd5c9"},{"name":"Moon Dust","hex":"#e0e6f0"},{"name":"Moon Glass","hex":"#bcd1c7"},{"name":"Moon Glow","hex":"#f5f3ce"},{"name":"Moon Goddess","hex":"#cfc7d5"},{"name":"Moon Jellyfish","hex":"#8eb8ce"},{"name":"Moon Landing","hex":"#a7a7a7"},{"name":"Moon Lily","hex":"#e6e6e7"},{"name":"Moon Maiden","hex":"#faf1de"},{"name":"Moon Mist","hex":"#cecdb8"},{"name":"Moon Rise","hex":"#f4f4e8"},{"name":"Moon Rock","hex":"#897d76"},{"name":"Moon Rose","hex":"#b9aba5"},{"name":"Moon Shadow","hex":"#96a5b8"},{"name":"Moon Shell","hex":"#e9e3d8"},{"name":"Moon Tide","hex":"#6f8588"},{"name":"Moon Valley","hex":"#fcf1de"},{"name":"Moon Veil","hex":"#8d99b1"},{"name":"Moon White","hex":"#eaf4fc"},{"name":"Moon Yellow","hex":"#f0c420"},{"name":"Moonbeam","hex":"#c2b8ae"},{"name":"Moondance","hex":"#e5decc"},{"name":"Moondoggie","hex":"#f3debf"},{"name":"Moonglade Water","hex":"#65ffff"},{"name":"Moonglow","hex":"#f8e4c4"},{"name":"Moonless Mystery","hex":"#1e2433"},{"name":"Moonless Night","hex":"#3c393d"},{"name":"Moonless Sky","hex":"#444b4a"},{"name":"Moonlight","hex":"#f6eed5"},{"name":"Moonlight Blue","hex":"#567090"},{"name":"Moonlight Green","hex":"#d2e8d8"},{"name":"Moonlight Jade","hex":"#c7e5df"},{"name":"Moonlight Mauve","hex":"#ca83a7"},{"name":"Moonlight Melody","hex":"#af73b0"},{"name":"Moonlight Sonata","hex":"#4e468b"},{"name":"Moonlight White","hex":"#f9f0de"},{"name":"Moonlight Yellow","hex":"#e1c38b"},{"name":"Moonlit Beach","hex":"#f9f0e6"},{"name":"Moonlit Forest","hex":"#3e6d6a"},{"name":"Moonlit Mauve","hex":"#d28fb0"},{"name":"Moonlit Ocean","hex":"#30445a"},{"name":"Moonlit Orchid","hex":"#949194"},{"name":"Moonlit Pool","hex":"#205a61"},{"name":"Moonlit Snow","hex":"#eaeeec"},{"name":"Moonmist","hex":"#c9d9e0"},{"name":"Moonquake","hex":"#8d9596"},{"name":"Moonraker","hex":"#c0b2d7"},{"name":"Moonrose","hex":"#a53f48"},{"name":"Moonscape","hex":"#806b77"},{"name":"Moonshade","hex":"#5a6e9c"},{"name":"Moonshadow","hex":"#9845b0"},{"name":"Moonshine","hex":"#c3c2b2"},{"name":"Moonstone","hex":"#3aa8c1"},{"name":"Moonstone Blue","hex":"#73a9c2"},{"name":"Moonstruck","hex":"#fcf0c2"},{"name":"Moonwalk","hex":"#bebec4"},{"name":"Moonwort","hex":"#a5ae9f"},{"name":"Moor Oak Grey","hex":"#6a584d"},{"name":"Moor Pond Green","hex":"#3c6461"},{"name":"Moor-Monster","hex":"#1f5429"},{"name":"Moorland","hex":"#a6ab9b"},{"name":"Moorland Heather","hex":"#cc94be"},{"name":"Moorstone","hex":"#cfd1ca"},{"name":"Moose Fur","hex":"#725440"},{"name":"Moose Trail","hex":"#6b5445"},{"name":"Moosewood","hex":"#5d5744"},{"name":"Moot Green","hex":"#a2db10"},{"name":"Moping Green","hex":"#00ee33"},{"name":"Morado Purple","hex":"#9955cc"},{"name":"Morality","hex":"#b4cde5"},{"name":"Morass","hex":"#726138"},{"name":"Moray","hex":"#c8bd6a"},{"name":"Moray Eel","hex":"#00a78b"},{"name":"Mordant Blue","hex":"#2a6671"},{"name":"Mordant Red 19","hex":"#ae0c00"},{"name":"Mordian Blue","hex":"#2f5684"},{"name":"More Maple","hex":"#d0ab70"},{"name":"More Melon","hex":"#e0e3c8"},{"name":"More Mint","hex":"#e6e8c5"},{"name":"More Than A Week","hex":"#8d8d8d"},{"name":"Morel","hex":"#73645c"},{"name":"Morganite","hex":"#dfcec6"},{"name":"Morning at Sea","hex":"#82979b"},{"name":"Morning Blue","hex":"#8da399"},{"name":"Morning Blush","hex":"#f9e8df"},{"name":"Morning Bread","hex":"#e7e6de"},{"name":"Morning Breeze","hex":"#d5e3de"},{"name":"Morning Calm","hex":"#ceeeef"},{"name":"Morning Chill","hex":"#ced5e3"},{"name":"Morning Dew","hex":"#b0b9ac"},{"name":"Morning Dew White","hex":"#c6dbd6"},{"name":"Morning Fog","hex":"#d0dbd7"},{"name":"Morning Forest","hex":"#6dae81"},{"name":"Morning Frost","hex":"#ebf4df"},{"name":"Morning Glory","hex":"#9ed1d3"},{"name":"Morning Glory Pink","hex":"#ca99b7"},{"name":"Morning Glow","hex":"#eef0d6"},{"name":"Morning Green","hex":"#89bab2"},{"name":"Morning Haze","hex":"#e0e8ed"},{"name":"Morning Light Wave","hex":"#e0efe9"},{"name":"Morning Marmalade","hex":"#ee8a67"},{"name":"Morning Mist","hex":"#e5edf1"},{"name":"Morning Mist Grey","hex":"#ada7b9"},{"name":"Morning Moon","hex":"#f7eecf"},{"name":"Morning Moor","hex":"#dad6ae"},{"name":"Morning Parlor","hex":"#acc0bd"},{"name":"Morning Rush","hex":"#dee4dc"},{"name":"Morning Shine","hex":"#f8eaed"},{"name":"Morning Shower","hex":"#d3dcea"},{"name":"Morning Sigh","hex":"#fce9de"},{"name":"Morning Sky","hex":"#c7ecea"},{"name":"Morning Snow","hex":"#f5f4ed"},{"name":"Morning Song","hex":"#e4ece9"},{"name":"Morning Star","hex":"#c3d1e5"},{"name":"Morning Sun","hex":"#f3e6ce"},{"name":"Morning Sunlight","hex":"#fdefcc"},{"name":"Morning Tea","hex":"#cabd94"},{"name":"Morning Wheat","hex":"#e7d2a9"},{"name":"Morning Zen","hex":"#cbcdb9"},{"name":"Morning\'s Egg","hex":"#d9be77"},{"name":"Morningside","hex":"#f3e2df"},{"name":"Mornington","hex":"#dcc6b9"},{"name":"Moroccan Blue","hex":"#115674"},{"name":"Moroccan Blunt","hex":"#75583d"},{"name":"Moroccan Brown","hex":"#7c726c"},{"name":"Moroccan Dusk","hex":"#6b5e5d"},{"name":"Moroccan Henna","hex":"#6e5043"},{"name":"Moroccan Leather","hex":"#6d4444"},{"name":"Moroccan Moonlight","hex":"#eae0d4"},{"name":"Moroccan Ruby","hex":"#8d504b"},{"name":"Moroccan Sky","hex":"#bf7756"},{"name":"Moroccan Spice","hex":"#8f623b"},{"name":"Morocco","hex":"#b67267"},{"name":"Morocco Brown","hex":"#442d21"},{"name":"Morocco Red","hex":"#96453b"},{"name":"Morocco Sand","hex":"#ece3cc"},{"name":"Morris Artichoke","hex":"#8cb295"},{"name":"Morris Leaf","hex":"#c2d3af"},{"name":"Morris Room Grey","hex":"#ada193"},{"name":"Morro Bay","hex":"#546b78"},{"name":"Morrow White","hex":"#fcfccf"},{"name":"Mortar","hex":"#565051"},{"name":"Mortar Grey","hex":"#9e9f9e"},{"name":"Mosaic Blue","hex":"#007c94"},{"name":"Mosaic Green","hex":"#599f68"},{"name":"Mosaic Tile","hex":"#1c6b69"},{"name":"Moscow Midnight","hex":"#204652"},{"name":"Moscow Mule","hex":"#eecc77"},{"name":"Moscow Papyrus","hex":"#937c00"},{"name":"Moselle Green","hex":"#2e4e36"},{"name":"Mosque","hex":"#005f5b"},{"name":"Moss","hex":"#009051"},{"name":"Moss Agate","hex":"#a0aa9a"},{"name":"Moss Beach","hex":"#6b7061"},{"name":"Moss Brown","hex":"#715b2e"},{"name":"Moss Candy","hex":"#8aa775"},{"name":"Moss Cottage","hex":"#42544c"},{"name":"Moss Covered","hex":"#7a7e66"},{"name":"Moss Glen","hex":"#4a473f"},{"name":"Moss Green","hex":"#638b27"},{"name":"Moss Grey","hex":"#afab97"},{"name":"Moss Ink","hex":"#c7cac1"},{"name":"Moss Island","hex":"#c8c6b4"},{"name":"Moss Landing","hex":"#6d7e40"},{"name":"Moss Mist","hex":"#dee1d3"},{"name":"Moss Point Green","hex":"#7e8d60"},{"name":"Moss Print","hex":"#afb796"},{"name":"Moss Ring","hex":"#729067"},{"name":"Moss Rock","hex":"#5e5b4d"},{"name":"Moss Rose","hex":"#8f6d6b"},{"name":"Moss Stone","hex":"#b4a54b"},{"name":"Moss Vale","hex":"#38614c"},{"name":"Mossa","hex":"#b4c2b6"},{"name":"Mosslands","hex":"#779966"},{"name":"Mossleaf","hex":"#8c9d8f"},{"name":"Mosstone","hex":"#7f805b"},{"name":"Mossy","hex":"#857349"},{"name":"Mossy Bank","hex":"#8b8770"},{"name":"Mossy Bench","hex":"#83a28f"},{"name":"Mossy Bronze","hex":"#525f48"},{"name":"Mossy Cavern","hex":"#a4a97b"},{"name":"Mossy Gold","hex":"#9c9273"},{"name":"Mossy Green","hex":"#5a7c46"},{"name":"Mossy Oak","hex":"#848178"},{"name":"Mossy Pavement","hex":"#908c7e"},{"name":"Mossy Rock","hex":"#a9965d"},{"name":"Mossy Shade","hex":"#7e6c44"},{"name":"Mossy Shining Gold","hex":"#bad147"},{"name":"Mossy Statue","hex":"#828e74"},{"name":"Mossy White","hex":"#e7f2de"},{"name":"Mossy Woods","hex":"#7a9703"},{"name":"Mostly Metal","hex":"#575e5f"},{"name":"Mote of Dust","hex":"#c1c1c5"},{"name":"Moth","hex":"#cbc1a2"},{"name":"Moth Green","hex":"#007700"},{"name":"Moth Grey","hex":"#dad3cb"},{"name":"Moth Mist","hex":"#edebde"},{"name":"Moth Orchid","hex":"#d00172"},{"name":"Moth Pink","hex":"#cfbdba"},{"name":"Moth Wing","hex":"#ccbca9"},{"name":"Moth\'s Wing","hex":"#edf1db"},{"name":"Mother Earth","hex":"#849c8d"},{"name":"Mother Lode","hex":"#a28761"},{"name":"Mother Nature","hex":"#bde1c4"},{"name":"Mother of Pearl","hex":"#e9d5c3"},{"name":"Mother of Pearl Green","hex":"#8fd89f"},{"name":"Mother of Pearl Pink","hex":"#d1c4c6"},{"name":"Mother of Pearl Silver","hex":"#ccd6e6"},{"name":"Mother\'s Milk","hex":"#f7edca"},{"name":"Motherland","hex":"#bcb667"},{"name":"Mothra Wing","hex":"#eedd82"},{"name":"Mothy","hex":"#cebbb3"},{"name":"Motif","hex":"#a58e71"},{"name":"Motto","hex":"#917c6f"},{"name":"Mount Eden","hex":"#e7efe0"},{"name":"Mount Etna","hex":"#3d484c"},{"name":"Mount Hyjal","hex":"#3d703e"},{"name":"Mount Olive","hex":"#716646"},{"name":"Mount Olympus","hex":"#d4ffff"},{"name":"Mount Sterling","hex":"#cad3d4"},{"name":"Mount Tam","hex":"#7c7b6a"},{"name":"Mountain Air","hex":"#e6e0e0"},{"name":"Mountain Ash","hex":"#cc7700"},{"name":"Mountain Blueberry","hex":"#3c4b6c"},{"name":"Mountain Bluebird","hex":"#4c98c2"},{"name":"Mountain Crystal Silver","hex":"#e2efe8"},{"name":"Mountain Dew","hex":"#cfe2e0"},{"name":"Mountain Elk","hex":"#867965"},{"name":"Mountain Falls","hex":"#bdcac0"},{"name":"Mountain Fern","hex":"#94b491"},{"name":"Mountain Fig","hex":"#383c49"},{"name":"Mountain Flower Mauve","hex":"#6c71a6"},{"name":"Mountain Fog","hex":"#f4dbc7"},{"name":"Mountain Forest","hex":"#4d663e"},{"name":"Mountain Green","hex":"#b2b599"},{"name":"Mountain Grey","hex":"#e8e3db"},{"name":"Mountain Haze","hex":"#6c6e7e"},{"name":"Mountain Heather","hex":"#eedae6"},{"name":"Mountain Iris","hex":"#5c5687"},{"name":"Mountain Lake","hex":"#2d5975"},{"name":"Mountain Lake Azure","hex":"#4cbca7"},{"name":"Mountain Lake Blue","hex":"#85d4d4"},{"name":"Mountain Lake Green","hex":"#75b996"},{"name":"Mountain Laurel","hex":"#f4c8d5"},{"name":"Mountain Lichen","hex":"#a7ae9e"},{"name":"Mountain Main","hex":"#8db8d0"},{"name":"Mountain Maize","hex":"#efcc7c"},{"name":"Mountain Meadow","hex":"#30ba8f"},{"name":"Mountain Meadow Green","hex":"#418638"},{"name":"Mountain Mint","hex":"#a7e0c2"},{"name":"Mountain Mist","hex":"#a09f9c"},{"name":"Mountain Morn","hex":"#d4dcd1"},{"name":"Mountain Moss","hex":"#94a293"},{"name":"Mountain Outlook","hex":"#7f9f97"},{"name":"Mountain Pass","hex":"#5c6a6a"},{"name":"Mountain Peak","hex":"#e9e0d4"},{"name":"Mountain Pine","hex":"#3b5257"},{"name":"Mountain Quail","hex":"#605b57"},{"name":"Mountain Range Blue","hex":"#53b8c9"},{"name":"Mountain Range Green","hex":"#283123"},{"name":"Mountain Ridge","hex":"#75665e"},{"name":"Mountain Road","hex":"#868578"},{"name":"Mountain Sage","hex":"#a3aa8c"},{"name":"Mountain Shade","hex":"#b1ab9a"},{"name":"Mountain Spring","hex":"#d9e1c1"},{"name":"Mountain Stream","hex":"#96afb7"},{"name":"Mountain Trail","hex":"#615742"},{"name":"Mountain View","hex":"#394c3b"},{"name":"Mountain\'s Majesty","hex":"#d8d0e3"},{"name":"Mountbatten Pink","hex":"#997a8d"},{"name":"Mourn Mountain Snow","hex":"#e9eaeb"},{"name":"Mournfang Brown","hex":"#6f5749"},{"name":"Mourning Blue","hex":"#1651bd"},{"name":"Mourning Dove","hex":"#928d88"},{"name":"Mourning Violet","hex":"#474354"},{"name":"Mouse Catcher","hex":"#9e928f"},{"name":"Mouse Nose","hex":"#ffe5b4"},{"name":"Mouse Tail","hex":"#727664"},{"name":"Mouse Trap","hex":"#beb1b0"},{"name":"Moussaka","hex":"#6d2a13"},{"name":"Mousse aux Pruneaux","hex":"#e8cef6"},{"name":"Mousy Brown","hex":"#5c4939"},{"name":"Mousy Indigo","hex":"#5c544e"},{"name":"Moutarde de Bénichon","hex":"#bf9005"},{"name":"Move Mint","hex":"#4effcd"},{"name":"Mover & Shaker","hex":"#9cce9e"},{"name":"Mover and Shaker","hex":"#855d44"},{"name":"Movie Magic","hex":"#b2bfd5"},{"name":"Movie Star","hex":"#c52033"},{"name":"Mow the Lawn","hex":"#a9b49a"},{"name":"Mown Grass","hex":"#627948"},{"name":"Mown Hay","hex":"#e6d3bb"},{"name":"Moxie","hex":"#e5dad8"},{"name":"Mozart","hex":"#485480"},{"name":"Mozzarella Covered Chorizo","hex":"#e39b7a"},{"name":"Mr Frosty","hex":"#a3c5db"},{"name":"Mr Mustard","hex":"#e4b857"},{"name":"Mr. Glass","hex":"#c0d5ef"},{"name":"Ms. Pac-Man Kiss","hex":"#ff00aa"},{"name":"MSU Green","hex":"#18453b"},{"name":"Mt Burleigh","hex":"#597766"},{"name":"Mt. Hood White","hex":"#e7e9e6"},{"name":"Mt. Rushmore","hex":"#7f8181"},{"name":"Mǔ Lì Bái Oyster","hex":"#f1f2d3"},{"name":"Mud","hex":"#70543e"},{"name":"Mud Ball","hex":"#966544"},{"name":"Mud Bath","hex":"#7c6841"},{"name":"Mud Berry","hex":"#d0c8c4"},{"name":"Mud Brown","hex":"#60460f"},{"name":"Mud Green","hex":"#606602"},{"name":"Mud House","hex":"#847146"},{"name":"Mud Pack","hex":"#9d9588"},{"name":"Mud Pink","hex":"#dcc0c3"},{"name":"Mud Pots","hex":"#b6b5b1"},{"name":"Mud Puddle","hex":"#9d958b"},{"name":"Mud Room","hex":"#60584b"},{"name":"Mud Yellow","hex":"#c18136"},{"name":"Mud-Dell","hex":"#a08b76"},{"name":"Mudbrick","hex":"#a46960"},{"name":"Muddled Basil","hex":"#5a5243"},{"name":"Muddy","hex":"#a13905"},{"name":"Muddy Brown","hex":"#886806"},{"name":"Muddy Green","hex":"#657432"},{"name":"Muddy Mauve","hex":"#e4b3cc"},{"name":"Muddy Olive","hex":"#4b5d46"},{"name":"Muddy Quicksand","hex":"#c3988b"},{"name":"Muddy River","hex":"#715d3d"},{"name":"Muddy Rose","hex":"#e2beb4"},{"name":"Muddy Waters","hex":"#a9844f"},{"name":"Muddy Yellow","hex":"#bfac05"},{"name":"Mudra","hex":"#b8d0da"},{"name":"Mudskipper","hex":"#897a69"},{"name":"Mudslide","hex":"#84735f"},{"name":"Mudstone","hex":"#84846f"},{"name":"Muesli","hex":"#9e7e53"},{"name":"Muffin Magic","hex":"#f9ddc7"},{"name":"Muffin Mix","hex":"#f5e0d0"},{"name":"Mughal Green","hex":"#448800"},{"name":"Mukluks","hex":"#a38961"},{"name":"Mulberry","hex":"#920a4e"},{"name":"Mulberry Brown","hex":"#956f29"},{"name":"Mulberry Bush","hex":"#ad6ea0"},{"name":"Mulberry Mauve Black","hex":"#463f60"},{"name":"Mulberry Mix","hex":"#9f556c"},{"name":"Mulberry Purple","hex":"#4a3c62"},{"name":"Mulberry Silk","hex":"#94766c"},{"name":"Mulberry Stain","hex":"#c6babe"},{"name":"Mulberry Thorn","hex":"#c57f2e"},{"name":"Mulberry Wine","hex":"#997c85"},{"name":"Mulberry Wood","hex":"#5c0536"},{"name":"Mulberry Yogurt","hex":"#c54b8c"},{"name":"Mulch","hex":"#4e4240"},{"name":"Mule","hex":"#827b77"},{"name":"Mule Fawn","hex":"#884f40"},{"name":"Mulgore Mustard","hex":"#c2b332"},{"name":"Mulled Cider","hex":"#a18162"},{"name":"Mulled Grape","hex":"#675a74"},{"name":"Mulled Spice","hex":"#d5a579"},{"name":"Mulled Wine","hex":"#524d5b"},{"name":"Mulled Wine Red","hex":"#3b2932"},{"name":"Mullen Pink","hex":"#ca4042"},{"name":"Mulling Spice","hex":"#c18654"},{"name":"Multnomah Falls","hex":"#ccd0dd"},{"name":"Mulu Frog","hex":"#55bb00"},{"name":"Mummy Brown","hex":"#824b27"},{"name":"Mummy\'s Tomb","hex":"#828e84"},{"name":"Munch On Melon","hex":"#f23e67"},{"name":"Munchkin","hex":"#9bb139"},{"name":"Mung Bean","hex":"#cac76d"},{"name":"Munsell Blue","hex":"#0093af"},{"name":"Munsell Yellow","hex":"#efcc00"},{"name":"Muntok White Pepper","hex":"#d2a172"},{"name":"Murano Soft Blue","hex":"#c5d6ee"},{"name":"Murasaki","hex":"#4f284b"},{"name":"Murasaki Purple","hex":"#884898"},{"name":"Murderous Magenta","hex":"#b3205f"},{"name":"Murdoch","hex":"#5b8d6b"},{"name":"Murex","hex":"#847eb1"},{"name":"Murky Green","hex":"#6c7a0e"},{"name":"Murmur","hex":"#c7cfc7"},{"name":"Murray Red","hex":"#6b3c39"},{"name":"Muscadine","hex":"#f4e5ab"},{"name":"Muscat Blanc","hex":"#ebe2cf"},{"name":"Muscat Grape","hex":"#5e5067"},{"name":"Muscatel","hex":"#7b6a68"},{"name":"Muscovado Sugar","hex":"#9b6957"},{"name":"Muscovite","hex":"#e9decb"},{"name":"Muse","hex":"#a5857f"},{"name":"Museum","hex":"#685951"},{"name":"Mushiao Green","hex":"#2d4436"},{"name":"Mushroom","hex":"#bdaca3"},{"name":"Mushroom Basket","hex":"#977a76"},{"name":"Mushroom Bisque","hex":"#cab49b"},{"name":"Mushroom Brown","hex":"#906e58"},{"name":"Mushroom Cap","hex":"#d3beac"},{"name":"Mushroom Forest","hex":"#8e8062"},{"name":"Mushroom Risotto","hex":"#dbd0ca"},{"name":"Mushroom White","hex":"#f0e1cd"},{"name":"Musical Mist","hex":"#f8eae6"},{"name":"Musk","hex":"#cca195"},{"name":"Musk Deer","hex":"#7e5b58"},{"name":"Musk Dusk","hex":"#cfbfb9"},{"name":"Musk Memory","hex":"#774548"},{"name":"Muskelmannbraun","hex":"#a57545"},{"name":"Musket","hex":"#7d6d39"},{"name":"Muskmelon","hex":"#e98447"},{"name":"Muskrat","hex":"#7e6f4f"},{"name":"Muslin","hex":"#d3d1c4"},{"name":"Muslin Tint","hex":"#e0cdb1"},{"name":"Mussel Green","hex":"#24342a"},{"name":"Mussel White","hex":"#f0e2de"},{"name":"Mustang","hex":"#5e4a47"},{"name":"Mustard","hex":"#ceb301"},{"name":"Mustard Brown","hex":"#ac7e04"},{"name":"Mustard Crusted Salmon","hex":"#ef8144"},{"name":"Mustard Field","hex":"#d8b076"},{"name":"Mustard Flower","hex":"#d2bd0a"},{"name":"Mustard Gold","hex":"#a6894b"},{"name":"Mustard Green","hex":"#a8b504"},{"name":"Mustard Magic","hex":"#857139"},{"name":"Mustard Musketeers","hex":"#d5a129"},{"name":"Mustard Oil","hex":"#d5bd66"},{"name":"Mustard On Toast","hex":"#ddcc33"},{"name":"Mustard Sauce","hex":"#edbd68"},{"name":"Mustard Seed","hex":"#c69f26"},{"name":"Mustard Seed Beige","hex":"#c5a574"},{"name":"Mustard Yellow","hex":"#e1ad01"},{"name":"Mutabilis","hex":"#c29594"},{"name":"Muted Berry","hex":"#91788c"},{"name":"Muted Blue","hex":"#3b719f"},{"name":"Muted Clay","hex":"#cf8a78"},{"name":"Muted Green","hex":"#5fa052"},{"name":"Muted Lavender","hex":"#3b5698"},{"name":"Muted Lime","hex":"#d0c678"},{"name":"Muted Mauve","hex":"#b3a9a3"},{"name":"Muted Mulberry","hex":"#66626d"},{"name":"Muted Pink","hex":"#d1768f"},{"name":"Muted Purple","hex":"#805b87"},{"name":"Muted Sage","hex":"#93907e"},{"name":"MVS Red","hex":"#ee0000"},{"name":"My Fair Lady","hex":"#f3c4c2"},{"name":"My Love","hex":"#e1c6a8"},{"name":"My Pink","hex":"#d68b80"},{"name":"My Place or Yours","hex":"#4f434e"},{"name":"My Sin","hex":"#fdae45"},{"name":"My Sweetheart","hex":"#f8e7df"},{"name":"Mykonos","hex":"#387abe"},{"name":"Mykonos Blue","hex":"#005780"},{"name":"Myoga Purple","hex":"#e0218a"},{"name":"Myrtle","hex":"#21421e"},{"name":"Myrtle Deep Green","hex":"#00524c"},{"name":"Myrtle Flower","hex":"#9eb3de"},{"name":"Myrtle Green","hex":"#317873"},{"name":"Myrtle Pepper","hex":"#b77961"},{"name":"Myself","hex":"#8e6f76"},{"name":"Mystere","hex":"#98817c"},{"name":"Mysteria","hex":"#826f7a"},{"name":"Mysterioso","hex":"#46394b"},{"name":"Mysterious","hex":"#535e63"},{"name":"Mysterious Blue","hex":"#3e7a85"},{"name":"Mysterious Depths","hex":"#060929"},{"name":"Mysterious Mauve","hex":"#a6a3a9"},{"name":"Mysterious Moss","hex":"#6f6a52"},{"name":"Mysterious Night","hex":"#5c6070"},{"name":"Mysterious Waters","hex":"#27454a"},{"name":"Mystery","hex":"#a4cdcc"},{"name":"Mystery Mint","hex":"#bbefd3"},{"name":"Mystery Oceans","hex":"#063c89"},{"name":"Mystic","hex":"#d8ddda"},{"name":"Mystic Blue","hex":"#48a8d0"},{"name":"Mystic Fog","hex":"#eae9e1"},{"name":"Mystic Green","hex":"#d8f878"},{"name":"Mystic Harbor","hex":"#d2e4ee"},{"name":"Mystic Iris","hex":"#8596d2"},{"name":"Mystic Light","hex":"#dde5ec"},{"name":"Mystic Magenta","hex":"#e02e82"},{"name":"Mystic Maroon","hex":"#ad4379"},{"name":"Mystic Mauve","hex":"#dbb7ba"},{"name":"Mystic Melon","hex":"#edebb4"},{"name":"Mystic Opal","hex":"#fbddbe"},{"name":"Mystic Pool","hex":"#d5dde2"},{"name":"Mystic Red","hex":"#ff5500"},{"name":"Mystic River","hex":"#b7cae0"},{"name":"Mystic Tulip","hex":"#f9b3a3"},{"name":"Mystic Turquoise","hex":"#00877b"},{"name":"Mystic White","hex":"#ebebe9"},{"name":"Mystical","hex":"#6e5881"},{"name":"Mystical Mist","hex":"#e5e2e3"},{"name":"Mystical Purple","hex":"#745d83"},{"name":"Mystical Sea","hex":"#dce3d1"},{"name":"Mystical Shade","hex":"#4c5364"},{"name":"Mystical Shadow","hex":"#352b30"},{"name":"Mystical Trip","hex":"#7a6a75"},{"name":"Mystification","hex":"#2a4071"},{"name":"Mystified","hex":"#c9dbc7"},{"name":"Mystifying Magenta","hex":"#c920b0"},{"name":"Mystique","hex":"#a598a0"},{"name":"Mystique Violet","hex":"#723d5b"},{"name":"Myth","hex":"#657175"},{"name":"Mythic Forest","hex":"#4a686c"},{"name":"Mythical","hex":"#7e778e"},{"name":"Mythical Blue","hex":"#93a8a7"},{"name":"Mythical Forest","hex":"#398467"},{"name":"Mythical Orange","hex":"#ff7f49"},{"name":"Mythical Wine","hex":"#7a0a14"},{"name":"Nacho","hex":"#ffcb5d"},{"name":"Nacho Cheese","hex":"#ffbb00"},{"name":"Nacre","hex":"#e8e2d4"},{"name":"Nadeshiko Pink","hex":"#f6adc6"},{"name":"Nadia","hex":"#afc9c0"},{"name":"Naga Morich","hex":"#c90406"},{"name":"Naga Viper Pepper","hex":"#ed292b"},{"name":"Naggaroth Night","hex":"#3d3354"},{"name":"Nǎi Yóu Sè Cream","hex":"#fdedc3"},{"name":"Nail Polish Pink","hex":"#bd4e84"},{"name":"Nairobi Dusk","hex":"#d9a787"},{"name":"Naive Peach","hex":"#fce7d3"},{"name":"Nakabeni Pink","hex":"#c93756"},{"name":"Naked Lady","hex":"#d6b3a9"},{"name":"Naked Light","hex":"#e9b6c1"},{"name":"Naked Noodle","hex":"#f7cb6e"},{"name":"Naked Pink","hex":"#d8c6d6"},{"name":"Naked Rose","hex":"#ebb5b3"},{"name":"Namakabe Brown","hex":"#785e49"},{"name":"Namara Grey","hex":"#7b7c7d"},{"name":"Namaste","hex":"#bdd8c0"},{"name":"Namibia","hex":"#7c6d61"},{"name":"Nana","hex":"#a08da7"},{"name":"Nancy","hex":"#57b8dc"},{"name":"Nandi Bear","hex":"#8f423d"},{"name":"Nandor","hex":"#4e5d4e"},{"name":"Nankeen","hex":"#b89e82"},{"name":"Nano White","hex":"#f2f0ea"},{"name":"Nanohanacha Gold","hex":"#e3b130"},{"name":"Nantucket Bay","hex":"#7d9192"},{"name":"Nantucket Dune","hex":"#d0bfaa"},{"name":"Nantucket Mist","hex":"#cabfbf"},{"name":"Nantucket Sands","hex":"#b4a89a"},{"name":"Napa","hex":"#a39a87"},{"name":"Napa Grape","hex":"#5b5162"},{"name":"Napa Harvest","hex":"#534853"},{"name":"Napa Sunset","hex":"#cd915c"},{"name":"Napa Wine","hex":"#5d4149"},{"name":"Napa Winery","hex":"#6a5c7d"},{"name":"Napery","hex":"#efddc1"},{"name":"Napier Green","hex":"#2a8000"},{"name":"Naples Yellow","hex":"#fada5f"},{"name":"Napoleon","hex":"#404149"},{"name":"Napoleonic Blue","hex":"#2c4170"},{"name":"Nārangī Orange","hex":"#ff8050"},{"name":"Narcissus","hex":"#c39449"},{"name":"Narcomedusae","hex":"#e6e3d8"},{"name":"Nârenji Orange","hex":"#ffc14b"},{"name":"Narvik","hex":"#e9e6dc"},{"name":"Narwhal Grey","hex":"#080813"},{"name":"Nasake","hex":"#746062"},{"name":"Nashi Pear Beige","hex":"#edd4b1"},{"name":"Nasturtium","hex":"#fe5b2e"},{"name":"Nasturtium Flower","hex":"#e64d1d"},{"name":"Nasturtium Leaf","hex":"#87b369"},{"name":"Nasturtium Shoot","hex":"#869f49"},{"name":"Nasty Green","hex":"#70b23f"},{"name":"Nasu Purple","hex":"#5d21d0"},{"name":"Nataneyu Gold","hex":"#a17917"},{"name":"Natchez","hex":"#ba9f95"},{"name":"Natchez Moss","hex":"#b1a76f"},{"name":"National Anthem","hex":"#3f6f98"},{"name":"Native Berry","hex":"#dc6b67"},{"name":"Native Flora","hex":"#9aa099"},{"name":"Native Hue of Resolution","hex":"#d33300"},{"name":"Native Soil","hex":"#887b69"},{"name":"Nato Blue","hex":"#153043"},{"name":"NATO Olive","hex":"#555548"},{"name":"Natrolite","hex":"#ebbc71"},{"name":"Nattō","hex":"#c79843"},{"name":"Natural","hex":"#a48b74"},{"name":"Natural Almond","hex":"#ded2bb"},{"name":"Natural Bark","hex":"#6d574d"},{"name":"Natural Bridge","hex":"#a29171"},{"name":"Natural Candy Pink","hex":"#e4717a"},{"name":"Natural Chamois","hex":"#bba88b"},{"name":"Natural Choice","hex":"#e3ded0"},{"name":"Natural Copper","hex":"#8b655a"},{"name":"Natural Green","hex":"#bccd91"},{"name":"Natural Grey","hex":"#c4c0bb"},{"name":"Natural Harmony","hex":"#91aa90"},{"name":"Natural Indigo","hex":"#003740"},{"name":"Natural Instinct Green","hex":"#017374"},{"name":"Natural Leather","hex":"#a80e00"},{"name":"Natural Light","hex":"#f1ebc8"},{"name":"Natural Linen","hex":"#ecdfcf"},{"name":"Natural Orchestra","hex":"#4c9c77"},{"name":"Natural Order","hex":"#77b033"},{"name":"Natural Pumice","hex":"#4a4a43"},{"name":"Natural Radiance","hex":"#e7dcc1"},{"name":"Natural Rice Beige","hex":"#dcc39f"},{"name":"Natural Silk Grey","hex":"#d3c5c0"},{"name":"Natural Spring","hex":"#aa838b"},{"name":"Natural Steel","hex":"#8a8287"},{"name":"Natural Stone","hex":"#aea295"},{"name":"Natural Tan","hex":"#dcd2c3"},{"name":"Natural Twine","hex":"#dbc39b"},{"name":"Natural Watercourse","hex":"#006e4e"},{"name":"Natural Whisper","hex":"#f0e8cf"},{"name":"Natural White","hex":"#fbede2"},{"name":"Natural Wool","hex":"#fff6d7"},{"name":"Natural Yellow","hex":"#eed88b"},{"name":"Natural Youth","hex":"#d7e5b4"},{"name":"Naturale","hex":"#f1e0cf"},{"name":"Naturalism","hex":"#68685d"},{"name":"Naturalist Grey","hex":"#8b8c83"},{"name":"Naturally Calm","hex":"#ced0d9"},{"name":"Nature","hex":"#bfd5b3"},{"name":"Nature Apricot","hex":"#feb7a5"},{"name":"Nature Green","hex":"#7daf94"},{"name":"Nature Retreat","hex":"#7b8787"},{"name":"Nature Spirits","hex":"#c8c8b4"},{"name":"Nature Surrounds","hex":"#52634b"},{"name":"Nature Trail","hex":"#e6d7bb"},{"name":"Nature\'s Delight","hex":"#a6d292"},{"name":"Nature\'s Gate","hex":"#666a60"},{"name":"Nature\'s Gift","hex":"#99a399"},{"name":"Nature\'s Masterpiece","hex":"#006611"},{"name":"Nature\'s Reflection","hex":"#c5d4cd"},{"name":"Nature\'s Strength","hex":"#117733"},{"name":"Naturel","hex":"#cbc0ad"},{"name":"Natures Gift","hex":"#89af97"},{"name":"Naughty Hottie","hex":"#ba403a"},{"name":"Naughty Marietta","hex":"#e3ccdc"},{"name":"Nauseous Blue","hex":"#483d8b"},{"name":"Nautical","hex":"#2e4a7d"},{"name":"Nautical Blue","hex":"#1a5091"},{"name":"Nautical Creatures","hex":"#295c7a"},{"name":"Nautical Star","hex":"#aab5b7"},{"name":"Nautilus","hex":"#273c5a"},{"name":"Navagio Bay","hex":"#378fb3"},{"name":"Navajo","hex":"#efdcc3"},{"name":"Navajo Turquoise","hex":"#007c78"},{"name":"Navajo White","hex":"#ffdead"},{"name":"Naval","hex":"#41729f"},{"name":"Naval Adventures","hex":"#072688"},{"name":"Naval Blue","hex":"#384b6b"},{"name":"Naval Night","hex":"#011c39"},{"name":"Naval Passage","hex":"#386782"},{"name":"Navel","hex":"#ec8430"},{"name":"Navigate","hex":"#008a86"},{"name":"Navigator","hex":"#5d83ab"},{"name":"Navy","hex":"#01153e"},{"name":"Navy Black","hex":"#263032"},{"name":"Navy Blazer","hex":"#2a2e3f"},{"name":"Navy Blue","hex":"#000080"},{"name":"Navy Cosmos","hex":"#57415c"},{"name":"Navy Damask","hex":"#425166"},{"name":"Navy Dark Blue","hex":"#004c6a"},{"name":"Navy Green","hex":"#35530a"},{"name":"Navy Peony","hex":"#223a5e"},{"name":"Navy Purple","hex":"#9556eb"},{"name":"Navy Seal","hex":"#253a91"},{"name":"Navy Teal","hex":"#20576e"},{"name":"Navy Trim","hex":"#203462"},{"name":"Neapolitan","hex":"#9b7a78"},{"name":"Neapolitan Blue","hex":"#4d7faa"},{"name":"Near Moon","hex":"#5ee7df"},{"name":"Nearly Brown","hex":"#a88e76"},{"name":"Nearly Peach","hex":"#efded1"},{"name":"Nearsighted","hex":"#c8d5dd"},{"name":"Nebula","hex":"#a104c3"},{"name":"Nebula Outpost","hex":"#922b9c"},{"name":"Nebulas Blue","hex":"#2e62a7"},{"name":"Nebulous","hex":"#c4b9b8"},{"name":"Nebulous White","hex":"#dedfdc"},{"name":"Necklace Pearl","hex":"#f6eeed"},{"name":"Necron Compound","hex":"#828b8e"},{"name":"Necrophilic Brown","hex":"#dead69"},{"name":"Nectar","hex":"#ecdacd"},{"name":"Nectar Jackpot","hex":"#f0d38f"},{"name":"Nectar of the Gods","hex":"#513439"},{"name":"Nectar Red","hex":"#7f4c64"},{"name":"Nectarina","hex":"#d38d72"},{"name":"Nectarine","hex":"#ff8656"},{"name":"Nectarous Nectarine","hex":"#dd5566"},{"name":"Needlepoint Navy","hex":"#546670"},{"name":"Nefarious Blue","hex":"#c5ced8"},{"name":"Nefarious Mauve","hex":"#e6d1dc"},{"name":"Negishi Green","hex":"#938b4b"},{"name":"Negroni","hex":"#eec7a2"},{"name":"Neighborly Peach","hex":"#f3c1a3"},{"name":"Nelson\'s Milk Snake","hex":"#933d41"},{"name":"Nemophilist","hex":"#337711"},{"name":"Neo Mint","hex":"#aaffcc"},{"name":"Neo Tokyo Grey","hex":"#bec0c2"},{"name":"Neon Blue","hex":"#04d9ff"},{"name":"Neon Boneyard","hex":"#dfc5fe"},{"name":"Neon Carrot","hex":"#ff9832"},{"name":"Neon Fuchsia","hex":"#fe4164"},{"name":"Neon Green","hex":"#39ff14"},{"name":"Neon Light","hex":"#ffdf5e"},{"name":"Neon Nazar","hex":"#4fdce1"},{"name":"Neon Pink","hex":"#fe019a"},{"name":"Neon Purple","hex":"#bc13fe"},{"name":"Neon Red","hex":"#ff073a"},{"name":"Neon Romance","hex":"#e9023a"},{"name":"Neon Rose","hex":"#ff0080"},{"name":"Neon Violet","hex":"#674876"},{"name":"Neon Yellow","hex":"#cfff04"},{"name":"Nepal","hex":"#93aab9"},{"name":"Nephrite","hex":"#6d9288"},{"name":"Neptune","hex":"#007dac"},{"name":"Neptune Blue","hex":"#2e5d9d"},{"name":"Neptune Green","hex":"#7fbb9e"},{"name":"Neptune\'s Wrath","hex":"#11425d"},{"name":"Nereus","hex":"#4c793c"},{"name":"Nero","hex":"#252525"},{"name":"Nero\'s Green","hex":"#318181"},{"name":"Nervous Neon Pink","hex":"#ff6ec7"},{"name":"Nervy Hue","hex":"#d7c65b"},{"name":"Nessie","hex":"#716748"},{"name":"Nesting Dove","hex":"#eeeada"},{"name":"Net Worker","hex":"#b6a194"},{"name":"Netherworld","hex":"#881111"},{"name":"Netsuke","hex":"#e0cfb0"},{"name":"Nettle","hex":"#bbac7d"},{"name":"Nettle Green","hex":"#364c2e"},{"name":"Nettle Rash","hex":"#e4f7e7"},{"name":"Network Grey","hex":"#a0a5a7"},{"name":"Neutra","hex":"#cac1b1"},{"name":"Neutral Buff","hex":"#9d928f"},{"name":"Neutral Green","hex":"#aaa583"},{"name":"Neutral Grey","hex":"#8e918f"},{"name":"Neutral Ground","hex":"#e2daca"},{"name":"Neutral Peach","hex":"#ffe6c3"},{"name":"Neutral Valley","hex":"#8b694d"},{"name":"Neutral White","hex":"#ecede8"},{"name":"Neutrino Blue","hex":"#01248f"},{"name":"Nevada","hex":"#666f6f"},{"name":"Nevada Morning","hex":"#ffd5a7"},{"name":"Nevada Sand","hex":"#ead5b9"},{"name":"Nevada Sky","hex":"#a1d9e7"},{"name":"Never Cry Wolf","hex":"#6e6455"},{"name":"Never Forget","hex":"#a67283"},{"name":"Nevergreen","hex":"#666556"},{"name":"Neverland","hex":"#9ce5d6"},{"name":"Nevermind Nirvana","hex":"#7bc8f6"},{"name":"Neverything","hex":"#13181b"},{"name":"New Age Blue","hex":"#496ead"},{"name":"New Amber","hex":"#6d3b24"},{"name":"New Bamboo","hex":"#adac84"},{"name":"New Brick","hex":"#934c3d"},{"name":"New Brick Red","hex":"#cb4154"},{"name":"New Bulgarian Rose","hex":"#482427"},{"name":"New Car","hex":"#214fc6"},{"name":"New Chestnut","hex":"#a28367"},{"name":"New Clay","hex":"#efc1b5"},{"name":"New Colonial Yellow","hex":"#d9ad7f"},{"name":"New Cork","hex":"#b89b6b"},{"name":"New Cream","hex":"#ede0c0"},{"name":"New England Brick","hex":"#ad7065"},{"name":"New England Roast","hex":"#aa7755"},{"name":"New Fawn","hex":"#c9a171"},{"name":"New Foliage","hex":"#c2bc90"},{"name":"New Forest","hex":"#47514d"},{"name":"New Frond","hex":"#bacca0"},{"name":"New Gold","hex":"#ead151"},{"name":"New Green","hex":"#b5ac31"},{"name":"New Harvest Moon","hex":"#eddfc7"},{"name":"New Hope","hex":"#e2efc2"},{"name":"New House White","hex":"#f1ede7"},{"name":"New Hunter","hex":"#4a5f58"},{"name":"New Kenyan Copper","hex":"#7c1c05"},{"name":"New Khaki","hex":"#d9c7aa"},{"name":"New Life","hex":"#7c916e"},{"name":"New Limerick","hex":"#9dc209"},{"name":"New Love","hex":"#c6bbdb"},{"name":"New Moss","hex":"#c6d6c7"},{"name":"New Navy Blue","hex":"#3b4a55"},{"name":"New Neutral","hex":"#bec0aa"},{"name":"New Orleans","hex":"#e4c385"},{"name":"New Penny","hex":"#a27d66"},{"name":"New Roof","hex":"#875251"},{"name":"New Shoot","hex":"#869e3e"},{"name":"New Sled","hex":"#933c3c"},{"name":"New Steel","hex":"#738595"},{"name":"New Violet","hex":"#d6c1dd"},{"name":"New Wave Green","hex":"#11ff11"},{"name":"New Wave Pink","hex":"#ff22ff"},{"name":"New Wheat","hex":"#d2af6f"},{"name":"New Wool","hex":"#d6c3b9"},{"name":"New Yellow","hex":"#e8c247"},{"name":"New York Pink","hex":"#dd8374"},{"name":"New York Sunset","hex":"#ff0059"},{"name":"New Youth","hex":"#f0e1df"},{"name":"Newbury Moss","hex":"#616550"},{"name":"Newburyport","hex":"#445a79"},{"name":"Newman\'s Eye","hex":"#b2c7e1"},{"name":"Newmarket Sausage","hex":"#eae2dc"},{"name":"Newport Blue","hex":"#1c8ac9"},{"name":"Newport Indigo","hex":"#313d6c"},{"name":"Newsprint","hex":"#756f6d"},{"name":"Niagara","hex":"#29a98b"},{"name":"Niagara Falls","hex":"#cbe3ee"},{"name":"Niagara Mist","hex":"#c5e8ee"},{"name":"Niblet Green","hex":"#7dc734"},{"name":"Nice Blue","hex":"#107ab0"},{"name":"Nice Cream","hex":"#faecd1"},{"name":"Nice White","hex":"#e6ddd5"},{"name":"Niche","hex":"#65758f"},{"name":"Nichols Beach","hex":"#84979a"},{"name":"Nick\'s Nook","hex":"#909062"},{"name":"Nickel","hex":"#929292"},{"name":"Nickel Ore Green","hex":"#537e7e"},{"name":"Nickel Plate","hex":"#c1c6bf"},{"name":"Nicotine Gold","hex":"#eebb33"},{"name":"Niebla Azul","hex":"#b6c3c4"},{"name":"Nifty Turquoise","hex":"#019187"},{"name":"Night Black","hex":"#312f36"},{"name":"Night Bloom","hex":"#613e3d"},{"name":"Night Blooming Jasmine","hex":"#f9f7ec"},{"name":"Night Blue","hex":"#040348"},{"name":"Night Brown","hex":"#44281b"},{"name":"Night Brown Black","hex":"#322d25"},{"name":"Night Club","hex":"#494b4e"},{"name":"Night Dive","hex":"#003355"},{"name":"Night Edition","hex":"#20586d"},{"name":"Night Flight","hex":"#434d5c"},{"name":"Night Fog","hex":"#2d1962"},{"name":"Night Folly","hex":"#49646d"},{"name":"Night Green","hex":"#302f27"},{"name":"Night Grey","hex":"#45444d"},{"name":"Night Gull Grey","hex":"#615d5c"},{"name":"Night in Manchester","hex":"#324ab2"},{"name":"Night in the Woods","hex":"#443300"},{"name":"Night Kite","hex":"#005572"},{"name":"Night Market","hex":"#4c6177"},{"name":"Night Mauve","hex":"#5d3b41"},{"name":"Night Mission","hex":"#5e5c50"},{"name":"Night Mode","hex":"#234e86"},{"name":"Night Music","hex":"#9c96af"},{"name":"Night Night","hex":"#4f4f5e"},{"name":"Night Out","hex":"#656a6e"},{"name":"Night Owl","hex":"#5d7b89"},{"name":"Night Pearl","hex":"#11ffbb"},{"name":"Night Red","hex":"#3c2727"},{"name":"Night Rendezvous","hex":"#66787e"},{"name":"Night Rider","hex":"#332e2e"},{"name":"Night Romance","hex":"#715055"},{"name":"Night Rose","hex":"#b0807a"},{"name":"Night Shadz","hex":"#a23d54"},{"name":"Night Shift","hex":"#2a5c6a"},{"name":"Night Sky","hex":"#292b31"},{"name":"Night Snow","hex":"#aaccff"},{"name":"Night Thistle","hex":"#6b7ba7"},{"name":"Night Tide","hex":"#455360"},{"name":"Night Train","hex":"#4b7689"},{"name":"Night Turquoise","hex":"#003833"},{"name":"Night Watch","hex":"#3c4f4e"},{"name":"Night White","hex":"#e1e1dd"},{"name":"Night Wind","hex":"#d7e2db"},{"name":"Night Wizard","hex":"#313740"},{"name":"Nightfall","hex":"#43535e"},{"name":"Nightfall in Suburbia","hex":"#0011dd"},{"name":"Nighthawk","hex":"#615452"},{"name":"Nighthawks","hex":"#234c47"},{"name":"Nightingale","hex":"#5c4827"},{"name":"Nightingale Grey","hex":"#baaea3"},{"name":"Nightlife","hex":"#27426b"},{"name":"Nightly","hex":"#536078"},{"name":"Nightly Activities","hex":"#2e5090"},{"name":"Nightly Aurora","hex":"#9beec1"},{"name":"Nightly Blade","hex":"#5a7d9a"},{"name":"Nightly Escapade","hex":"#0433ff"},{"name":"Nightly Expedition","hex":"#221188"},{"name":"Nightly Ivy","hex":"#444940"},{"name":"Nightly Silhouette","hex":"#4f5b93"},{"name":"Nightly Violet","hex":"#784384"},{"name":"Nightly Walk","hex":"#544563"},{"name":"Nightly Woods","hex":"#013220"},{"name":"Nightmare","hex":"#112211"},{"name":"Nightshade","hex":"#3c464b"},{"name":"Nightshade Berries","hex":"#1b1811"},{"name":"Nightshade Blue","hex":"#293135"},{"name":"Nightshade Purple","hex":"#535872"},{"name":"Nightshade Violet","hex":"#a383ac"},{"name":"Nightshadow Blue","hex":"#555971"},{"name":"Nigritella Red","hex":"#931121"},{"name":"Nihilakh Oxide","hex":"#a0d6b4"},{"name":"Nīlā Blue","hex":"#0055ff"},{"name":"Nile","hex":"#afb982"},{"name":"Nile Blue","hex":"#253f4e"},{"name":"Nile Clay","hex":"#8b8174"},{"name":"Nile Green","hex":"#99be85"},{"name":"Nile Reed","hex":"#968f5f"},{"name":"Nile River","hex":"#9ab6a9"},{"name":"Nile Sand","hex":"#bbad94"},{"name":"Nile Stone","hex":"#61c9c1"},{"name":"Nilla Vanilla","hex":"#f1ebe0"},{"name":"Nimbus Blue","hex":"#4422ff"},{"name":"Nimbus Cloud","hex":"#c8c8cc"},{"name":"Nina","hex":"#f5e3ea"},{"name":"Nine Iron","hex":"#46434a"},{"name":"Níng Méng Huáng Lemon","hex":"#ffef19"},{"name":"Ninja","hex":"#020308"},{"name":"Ninja Princess","hex":"#75528b"},{"name":"Ninja Turtle","hex":"#94b1a9"},{"name":"Ninjin Orange","hex":"#e5aa70"},{"name":"Nipple","hex":"#bb7777"},{"name":"Nippon","hex":"#bc002c"},{"name":"Nirvana","hex":"#a2919b"},{"name":"Nirvana Jewel","hex":"#64a5ad"},{"name":"Nisemurasaki Purple","hex":"#43242a"},{"name":"Níu Zǎi Sè Denim","hex":"#056eee"},{"name":"No More Drama","hex":"#a33f40"},{"name":"No Need to Blush","hex":"#ffd6dd"},{"name":"No Way Rosé","hex":"#fbaa95"},{"name":"No$GMB Yellow","hex":"#f8e888"},{"name":"Nobel","hex":"#a99d9d"},{"name":"Nobility","hex":"#ecdec5"},{"name":"Nobility Blue","hex":"#414969"},{"name":"Noble Black","hex":"#202124"},{"name":"Noble Blue","hex":"#697991"},{"name":"Noble Blush","hex":"#e8b9b2"},{"name":"Noble Cause","hex":"#990c0d"},{"name":"Noble Cause Purple","hex":"#7e1e9c"},{"name":"Noble Chocolate","hex":"#6d4433"},{"name":"Noble Cream","hex":"#e1dace"},{"name":"Noble Crown","hex":"#8d755d"},{"name":"Noble Fir","hex":"#5a736d"},{"name":"Noble Grey","hex":"#c1beb9"},{"name":"Noble Hatter\'s Violet","hex":"#51384a"},{"name":"Noble Honor","hex":"#69354f"},{"name":"Noble Knight","hex":"#394d78"},{"name":"Noble Lilac","hex":"#b28392"},{"name":"Noble Plum","hex":"#871f78"},{"name":"Noble Purple","hex":"#afb1c5"},{"name":"Noble Red","hex":"#92181d"},{"name":"Noble Robe","hex":"#807070"},{"name":"Noble Silver","hex":"#73777f"},{"name":"Noble Tone","hex":"#884967"},{"name":"Noblesse","hex":"#524b50"},{"name":"Noctis","hex":"#646b77"},{"name":"Nocturnal","hex":"#767d86"},{"name":"Nocturnal Expedition","hex":"#114c5a"},{"name":"Nocturnal Flight","hex":"#675754"},{"name":"Nocturnal Rose","hex":"#cc6699"},{"name":"Nocturnal Sea","hex":"#0e6071"},{"name":"Nocturne","hex":"#344d58"},{"name":"Nocturne Blue","hex":"#37525f"},{"name":"Nocturne Red","hex":"#7a4b56"},{"name":"Nocturne Shade","hex":"#356fad"},{"name":"Noghrei Silver","hex":"#bdbebd"},{"name":"Noir","hex":"#312b27"},{"name":"Noir Fiction","hex":"#150811"},{"name":"Nomad","hex":"#a19986"},{"name":"Nomad Grey","hex":"#7e736f"},{"name":"Nomadic","hex":"#af9479"},{"name":"Nomadic Desert","hex":"#c7b198"},{"name":"Nomadic Dream","hex":"#dbdedb"},{"name":"Nomadic Taupe","hex":"#d2c6ae"},{"name":"Nomadic Travels","hex":"#e0c997"},{"name":"Nominee","hex":"#357567"},{"name":"Non Skid Grey","hex":"#8a8daa"},{"name":"Non-Photo Blue","hex":"#a4dded"},{"name":"Non-Stop Orange","hex":"#dd8811"},{"name":"Nonchalant White","hex":"#deddd1"},{"name":"Nonpareil Apple","hex":"#c1a65c"},{"name":"Noodle Arms","hex":"#f5ddc4"},{"name":"Noodles","hex":"#f9e3b4"},{"name":"Nor\'wester","hex":"#99a9ad"},{"name":"Nora\'s Forest","hex":"#003333"},{"name":"Nordic","hex":"#1d393c"},{"name":"Nordic Breeze","hex":"#d3dde7"},{"name":"Nordic Grass Green","hex":"#1fab58"},{"name":"Nordic Noir","hex":"#003344"},{"name":"Nordland Blue","hex":"#7e95ab"},{"name":"Nordland Light Blue","hex":"#96aec5"},{"name":"Nordmann Fir","hex":"#2e7073"},{"name":"Norfolk Green","hex":"#2e4b3c"},{"name":"Norfolk Sky","hex":"#6cbae7"},{"name":"Nori Green","hex":"#112a12"},{"name":"Nori Seaweed Green","hex":"#464826"},{"name":"Norman Shaw Goldspar","hex":"#e9c68e"},{"name":"Norse Blue","hex":"#3d9dc2"},{"name":"North Atlantic","hex":"#5e7b7f"},{"name":"North Atlantic Breeze","hex":"#3676b5"},{"name":"North Beach Blue","hex":"#849c9d"},{"name":"North Cape Grey","hex":"#7a9595"},{"name":"North Grey","hex":"#6a7777"},{"name":"North Island","hex":"#bcb6b4"},{"name":"North Rim","hex":"#d8a892"},{"name":"North Sea","hex":"#316c69"},{"name":"North Sea Blue","hex":"#343c4c"},{"name":"North Star","hex":"#f2dea4"},{"name":"North Star Blue","hex":"#223399"},{"name":"North Texas Green","hex":"#059033"},{"name":"North Wind","hex":"#48bdc1"},{"name":"North Woods","hex":"#555a51"},{"name":"Northampton Trees","hex":"#767962"},{"name":"Northeast Trail","hex":"#948666"},{"name":"Northern Barrens Dust","hex":"#de743c"},{"name":"Northern Beach","hex":"#e9dad2"},{"name":"Northern Exposure","hex":"#bfc7d4"},{"name":"Northern Glen","hex":"#536255"},{"name":"Northern Landscape","hex":"#c5c1a3"},{"name":"Northern Light Grey","hex":"#a7aeb4"},{"name":"Northern Lights","hex":"#e6f0ea"},{"name":"Northern Pond","hex":"#a3b9cd"},{"name":"Northern Sky","hex":"#8daccc"},{"name":"Northern Star","hex":"#ffffea"},{"name":"Northern Territory","hex":"#5e463c"},{"name":"Northgate Green","hex":"#aaa388"},{"name":"Northpointe","hex":"#9e9181"},{"name":"Northrend","hex":"#b9f2ff"},{"name":"Northwind","hex":"#cee5e9"},{"name":"Norway","hex":"#a4b88f"},{"name":"Norwegian Blue","hex":"#78888e"},{"name":"Norwegian Sky","hex":"#b4cdde"},{"name":"Norwich Green","hex":"#acb597"},{"name":"Nosegay","hex":"#ffe6ec"},{"name":"Nosferatu","hex":"#a9a8a8"},{"name":"Noshime Flower","hex":"#426579"},{"name":"Nostalgia","hex":"#d6b8bd"},{"name":"Nostalgia Perfume","hex":"#dbdbf7"},{"name":"Nostalgia Rose","hex":"#a2747d"},{"name":"Nostalgic","hex":"#666c7e"},{"name":"Nostalgic Evening","hex":"#47626f"},{"name":"Not a Cloud in Sight","hex":"#85c8d3"},{"name":"Not My Fault","hex":"#7e7d78"},{"name":"Not So Innocent","hex":"#6a6968"},{"name":"Not Tonight","hex":"#090615"},{"name":"Not Yet Caramel","hex":"#b1714c"},{"name":"Not Yo Cheese","hex":"#ffc12c"},{"name":"Notable Hue","hex":"#8ba7bb"},{"name":"Notebook Paper","hex":"#e8ebe6"},{"name":"Notes of Plum","hex":"#770f05"},{"name":"Noteworthy","hex":"#d9bacc"},{"name":"Nothing Less","hex":"#f2deb9"},{"name":"Notice Me","hex":"#ba8686"},{"name":"Notorious","hex":"#bda998"},{"name":"Notorious Neanderthal","hex":"#664400"},{"name":"Nottingham Forest","hex":"#585d4e"},{"name":"Nougat","hex":"#ae8a78"},{"name":"Nougat Brown","hex":"#7c503f"},{"name":"Nouveau","hex":"#686f7e"},{"name":"Nouveau Copper","hex":"#a05b42"},{"name":"Nouveau Rose","hex":"#996872"},{"name":"Nouveau-Riche","hex":"#ffbb77"},{"name":"Nouvelle White","hex":"#e1dcda"},{"name":"Nova Pink","hex":"#d94f9a"},{"name":"Nova White","hex":"#f8eed9"},{"name":"Novel Lilac","hex":"#c2a4c2"},{"name":"Novelle Peach","hex":"#e3c7b2"},{"name":"Novelty Navy","hex":"#515b62"},{"name":"November","hex":"#be7767"},{"name":"November Gold","hex":"#f6b265"},{"name":"November Green","hex":"#767764"},{"name":"November Leaf","hex":"#f1b690"},{"name":"November Pink","hex":"#ede6e8"},{"name":"November Skies","hex":"#7cafb9"},{"name":"November Storms","hex":"#423f3b"},{"name":"Noxious","hex":"#89a203"},{"name":"Nuance","hex":"#e2e0d6"},{"name":"Nuclear Blast","hex":"#bbff00"},{"name":"Nuclear Fallout","hex":"#aa9900"},{"name":"Nuclear Mango","hex":"#ee9933"},{"name":"Nuclear Meltdown","hex":"#44ee00"},{"name":"Nuclear Throne","hex":"#00de00"},{"name":"Nuclear Waste","hex":"#7cfc00"},{"name":"Nude","hex":"#f2d3bc"},{"name":"Nude Flamingo","hex":"#e58f7c"},{"name":"Nude Lips","hex":"#b5948d"},{"name":"Nugget","hex":"#bc9229"},{"name":"Nugget Gold","hex":"#bf961f"},{"name":"Nuisette","hex":"#b48395"},{"name":"Nuit Blanche","hex":"#1e488f"},{"name":"Nuln Oil","hex":"#14100e"},{"name":"Nuln Oil Gloss","hex":"#171310"},{"name":"Numbers","hex":"#929bac"},{"name":"Numero Uno","hex":"#e2e6de"},{"name":"Nun Orchid","hex":"#f8f6e9"},{"name":"Nurgle\'s Rot","hex":"#9b8f22"},{"name":"Nurgling Green","hex":"#b8cc82"},{"name":"Nursery","hex":"#efd0d2"},{"name":"Nursery Green","hex":"#edf0de"},{"name":"Nursery Pink","hex":"#f4d8e8"},{"name":"Nurture","hex":"#d7dcd5"},{"name":"Nurture Green","hex":"#98b092"},{"name":"Nurturing","hex":"#a1a97b"},{"name":"Nurude Brown","hex":"#9d896c"},{"name":"Nut","hex":"#9e8a6d"},{"name":"Nut Brown","hex":"#86695e"},{"name":"Nut Cracker","hex":"#816c5b"},{"name":"Nut Flavor","hex":"#d7bea4"},{"name":"Nut Milk","hex":"#d9ccc8"},{"name":"Nut Oil","hex":"#775d38"},{"name":"Nut Shell","hex":"#aca394"},{"name":"Nuthatch","hex":"#8e725f"},{"name":"Nuthatch Back","hex":"#445599"},{"name":"Nutmeg","hex":"#7e4a3b"},{"name":"Nutmeg Frost","hex":"#ecd9ca"},{"name":"Nutmeg Glow","hex":"#d8b691"},{"name":"Nutmeg Wood Finish","hex":"#683600"},{"name":"Nutria","hex":"#75663e"},{"name":"Nutria Fur Brown","hex":"#514035"},{"name":"Nutshell","hex":"#a9856b"},{"name":"Nutter Butter","hex":"#f7d4c6"},{"name":"Nutty Beige","hex":"#d4bca3"},{"name":"Nutty Brown","hex":"#8a6f44"},{"name":"Nyanza","hex":"#e9ffdb"},{"name":"NYC Apartment Wall","hex":"#efeae8"},{"name":"NYC Taxi","hex":"#f7b731"},{"name":"Nyctophobia Blue","hex":"#4d587a"},{"name":"Nylon","hex":"#e9e3cb"},{"name":"Nymph Green","hex":"#aec2a5"},{"name":"Nymph\'s Delight","hex":"#7b6c8e"},{"name":"Nymphaeaceae","hex":"#cee0e3"},{"name":"NYPD","hex":"#5f6e77"},{"name":"O Fortuna","hex":"#e1b8b5"},{"name":"O Tannenbaum","hex":"#005522"},{"name":"O\'Brien Orange","hex":"#f3a347"},{"name":"O\'grady Green","hex":"#58ac8f"},{"name":"O\'Neal Green","hex":"#395643"},{"name":"Oak Barrel","hex":"#715636"},{"name":"Oak Brown","hex":"#a18d80"},{"name":"Oak Buff","hex":"#cf9c63"},{"name":"Oak Creek","hex":"#5d504a"},{"name":"Oak Harbour","hex":"#cdb386"},{"name":"Oak Plank","hex":"#5d4f39"},{"name":"Oak Ridge","hex":"#c0b0ab"},{"name":"Oak Shaving","hex":"#eed8c2"},{"name":"Oak Tone","hex":"#d0c7b6"},{"name":"Oakley Apricot","hex":"#e0b695"},{"name":"Oakmoss","hex":"#6d7244"},{"name":"Oakwood","hex":"#bda58b"},{"name":"Oakwood Brown","hex":"#8f716e"},{"name":"Oarsman Blue","hex":"#648d95"},{"name":"Oasis","hex":"#0092a3"},{"name":"Oasis Sand","hex":"#fcedc5"},{"name":"Oasis Spring","hex":"#47a3c6"},{"name":"Oasis Stream","hex":"#a2ebd8"},{"name":"Oat Cake","hex":"#e1cab3"},{"name":"Oat Field","hex":"#c0ad89"},{"name":"Oat Flour","hex":"#f7e4cd"},{"name":"Oat Milk","hex":"#dedacd"},{"name":"Oat Straw","hex":"#f1d694"},{"name":"Oath","hex":"#4a465a"},{"name":"Oatmeal","hex":"#c9c1b1"},{"name":"Oatmeal Bath","hex":"#ddc7a2"},{"name":"Oatmeal Biscuit","hex":"#b7a86d"},{"name":"Oatmeal Cookie","hex":"#eadac6"},{"name":"Oberon","hex":"#fcd389"},{"name":"Obi Lilac","hex":"#b0a3b6"},{"name":"Object of Desire","hex":"#b7a8a8"},{"name":"Objectivity","hex":"#bbc6de"},{"name":"Obligation","hex":"#54645c"},{"name":"Oblivion","hex":"#000435"},{"name":"Obscure Ochre","hex":"#88654e"},{"name":"Obscure Ogre","hex":"#771908"},{"name":"Obscure Olive","hex":"#4a5d23"},{"name":"Obscure Orange","hex":"#bb5500"},{"name":"Obscure Orchid","hex":"#9d0759"},{"name":"Observatory","hex":"#008f70"},{"name":"Obsession","hex":"#ae9550"},{"name":"Obsidian","hex":"#445055"},{"name":"Obsidian Brown","hex":"#523e35"},{"name":"Obsidian Lava Black","hex":"#382b46"},{"name":"Obsidian Red","hex":"#372a38"},{"name":"Obsidian Shard","hex":"#060313"},{"name":"Obsidian Shell","hex":"#441166"},{"name":"Obsidian Stone","hex":"#3c3f40"},{"name":"Obstinate Orange","hex":"#d7552a"},{"name":"Obtrusive Orange","hex":"#ffb077"},{"name":"Ocean","hex":"#005493"},{"name":"Ocean Abyss","hex":"#221166"},{"name":"Ocean Air","hex":"#dae4ed"},{"name":"Ocean Blue","hex":"#009dc4"},{"name":"Ocean Blues","hex":"#508693"},{"name":"Ocean Boat Blue","hex":"#0077be"},{"name":"Ocean Boulevard","hex":"#a4c8c8"},{"name":"Ocean Breeze","hex":"#d3e5eb"},{"name":"Ocean Bubble","hex":"#8cadcd"},{"name":"Ocean Call","hex":"#2b6c8e"},{"name":"Ocean City","hex":"#7896ba"},{"name":"Ocean Crest","hex":"#d6dddd"},{"name":"Ocean Cruise","hex":"#9cd4e1"},{"name":"Ocean Current","hex":"#537783"},{"name":"Ocean Depths","hex":"#00657f"},{"name":"Ocean Dream","hex":"#d4dde2"},{"name":"Ocean Drive","hex":"#b0bec5"},{"name":"Ocean Droplet","hex":"#afc3bc"},{"name":"Ocean Eyes","hex":"#a9c7cf"},{"name":"Ocean Foam","hex":"#cac8b4"},{"name":"Ocean Frigate","hex":"#7a7878"},{"name":"Ocean Front","hex":"#b8e3ed"},{"name":"Ocean Green","hex":"#3d9973"},{"name":"Ocean in a Bowl","hex":"#68dfbb"},{"name":"Ocean Kiss","hex":"#a4c3c5"},{"name":"Ocean Liner","hex":"#189086"},{"name":"Ocean Melody","hex":"#7d999f"},{"name":"Ocean Mirage","hex":"#00748f"},{"name":"Ocean Night","hex":"#637195"},{"name":"Ocean Oasis","hex":"#006c68"},{"name":"Ocean Pearl","hex":"#d3cfbd"},{"name":"Ocean Ridge","hex":"#7594b3"},{"name":"Ocean Sand","hex":"#e4d5cd"},{"name":"Ocean Shadow","hex":"#5b7886"},{"name":"Ocean Slumber","hex":"#41767b"},{"name":"Ocean Soul","hex":"#00878f"},{"name":"Ocean Spray","hex":"#005379"},{"name":"Ocean Storm","hex":"#3f677e"},{"name":"Ocean Storms","hex":"#7b8c97"},{"name":"Ocean Surf","hex":"#79a2bd"},{"name":"Ocean Swell","hex":"#727c7e"},{"name":"Ocean Trapeze","hex":"#2e526a"},{"name":"Ocean Trip","hex":"#62aeba"},{"name":"Ocean Tropic","hex":"#67a6d4"},{"name":"Ocean View","hex":"#729bb3"},{"name":"Ocean Wave","hex":"#7dbcaa"},{"name":"Ocean Weed","hex":"#6c6541"},{"name":"Oceanic","hex":"#4f6d82"},{"name":"Oceanic Climate","hex":"#bbc8c9"},{"name":"Oceanic Motion","hex":"#1d5c83"},{"name":"Oceano","hex":"#9ad6e5"},{"name":"Oceans Deep","hex":"#415f61"},{"name":"Oceanside","hex":"#015a6b"},{"name":"Oceanus","hex":"#90aba8"},{"name":"Ocelot","hex":"#f1e2c9"},{"name":"Ocher","hex":"#bf9b0c"},{"name":"Ochraceous Salmon","hex":"#d99e73"},{"name":"Ochre","hex":"#cc7722"},{"name":"Ochre Brown","hex":"#9f7b3e"},{"name":"Ochre Maroon","hex":"#cc7733"},{"name":"Ochre Pigment","hex":"#c77135"},{"name":"Ochre Red","hex":"#a7374b"},{"name":"Ochre Revival","hex":"#eec987"},{"name":"Ochre Spice","hex":"#e96d03"},{"name":"Ochre Yellow","hex":"#efcc83"},{"name":"Octagon Ocean","hex":"#085b73"},{"name":"Octarine","hex":"#ccdd00"},{"name":"October","hex":"#c67533"},{"name":"October Bounty","hex":"#e3c6a3"},{"name":"October Harvest","hex":"#d1bb98"},{"name":"October Haze","hex":"#f8ac8c"},{"name":"October Leaves","hex":"#855743"},{"name":"October Sky","hex":"#8fa2a2"},{"name":"Odd Pea Pod","hex":"#357911"},{"name":"Ode to Green","hex":"#b6e5d6"},{"name":"Ode to Joy","hex":"#9d404a"},{"name":"Ode to Purple","hex":"#a798c2"},{"name":"Odious Orange","hex":"#ffdfbf"},{"name":"Odyssey","hex":"#374a5a"},{"name":"Odyssey Grey","hex":"#4c4e5d"},{"name":"Odyssey Lilac","hex":"#d5c6cc"},{"name":"Odyssey Plum","hex":"#e1c2c5"},{"name":"Off Black","hex":"#303030"},{"name":"Off Blue","hex":"#5684ae"},{"name":"Off Broadway","hex":"#433f3d"},{"name":"Off Green","hex":"#6ba353"},{"name":"Off Shore","hex":"#d1cccb"},{"name":"Off the Grid","hex":"#9f9049"},{"name":"Off The Grid","hex":"#b8aea4"},{"name":"Off White","hex":"#ffffe4"},{"name":"Off Yellow","hex":"#f1f33f"},{"name":"Off-Road Green","hex":"#003723"},{"name":"Offbeat","hex":"#d6d0c6"},{"name":"Offbeat Green","hex":"#9c8b1f"},{"name":"Office Blue Green","hex":"#006c65"},{"name":"Office Green","hex":"#00800f"},{"name":"Office Grey","hex":"#635d54"},{"name":"Office Neon Light","hex":"#ff2277"},{"name":"Official Violet","hex":"#2e4182"},{"name":"Offshore Mist","hex":"#cad8d8"},{"name":"Often Orange","hex":"#ff714e"},{"name":"Ogen Melon","hex":"#d7b235"},{"name":"Ogre Odor","hex":"#fd5240"},{"name":"Ogryn Camo","hex":"#9da94b"},{"name":"Ogryn Wash","hex":"#d1a14e"},{"name":"Oh Boy!","hex":"#bbdaf8"},{"name":"Oh Dahling","hex":"#edeec5"},{"name":"Oh Em Ghee","hex":"#e3c81c"},{"name":"Oh My Gold","hex":"#eebb55"},{"name":"Oh Pistachio","hex":"#abca99"},{"name":"Oh So Pretty","hex":"#eac7cb"},{"name":"Oil","hex":"#313330"},{"name":"Oil Blue","hex":"#678f8a"},{"name":"Oil Green","hex":"#7b7f68"},{"name":"Oil Of Lavender","hex":"#c7bebe"},{"name":"Oil on Fire","hex":"#ff5511"},{"name":"Oil Rush","hex":"#333144"},{"name":"Oil Slick","hex":"#031602"},{"name":"Oil Yellow","hex":"#c2ab3f"},{"name":"Oilcloth Green","hex":"#83ba8e"},{"name":"Oiled Teak","hex":"#6c5a51"},{"name":"Oiled Up Kardashian","hex":"#996644"},{"name":"Oilseed Crops","hex":"#c2be0e"},{"name":"Oily Steel","hex":"#99aaaa"},{"name":"Oitake Green","hex":"#5e644f"},{"name":"OK Corral","hex":"#d07360"},{"name":"Oklahoma Wheat","hex":"#f5e0ba"},{"name":"Okra","hex":"#3e912d"},{"name":"Okroshka","hex":"#40533d"},{"name":"Old Amethyst","hex":"#87868f"},{"name":"Old Army Helmet","hex":"#616652"},{"name":"Old Asparagus","hex":"#929000"},{"name":"Old Bamboo","hex":"#769164"},{"name":"Old Benchmark","hex":"#029386"},{"name":"Old Bone","hex":"#dbc2ab"},{"name":"Old Boot","hex":"#7c644b"},{"name":"Old Botanical Garden","hex":"#5e624a"},{"name":"Old Brick","hex":"#8a3335"},{"name":"Old Brown Crayon","hex":"#330000"},{"name":"Old Burgundy","hex":"#43302e"},{"name":"Old Celadon","hex":"#a8a89d"},{"name":"Old Chalk","hex":"#e3d6e9"},{"name":"Old Cheddar","hex":"#dd6644"},{"name":"Old Coffee","hex":"#704241"},{"name":"Old Copper","hex":"#73503b"},{"name":"Old Cumin","hex":"#784430"},{"name":"Old Doeskin","hex":"#bdab9b"},{"name":"Old Driftwood","hex":"#97694f"},{"name":"Old Eggplant","hex":"#614051"},{"name":"Old Eggshell","hex":"#cdc4ba"},{"name":"Old Faithful","hex":"#82a2be"},{"name":"Old Fashioned Pink","hex":"#f4c6cc"},{"name":"Old Fashioned Purple","hex":"#73486b"},{"name":"Old Flame","hex":"#f2b7b5"},{"name":"Old Four Leaf Clover","hex":"#757d43"},{"name":"Old Geranium","hex":"#c66787"},{"name":"Old Glory Blue","hex":"#002868"},{"name":"Old Glory Red","hex":"#bf0a30"},{"name":"Old Gold","hex":"#cfb53b"},{"name":"Old Green","hex":"#839573"},{"name":"Old Grey Mare","hex":"#b4b6ad"},{"name":"Old Guitar","hex":"#b35e1f"},{"name":"Old Gungeon Red","hex":"#0063ec"},{"name":"Old Heart","hex":"#e66a77"},{"name":"Old Heliotrope","hex":"#563c5c"},{"name":"Old Ivory","hex":"#ffffcb"},{"name":"Old Kitchen White","hex":"#eff5dc"},{"name":"Old Lace","hex":"#fdf5e6"},{"name":"Old Laser Lemon","hex":"#fdfc74"},{"name":"Old Lavender","hex":"#796878"},{"name":"Old Leather","hex":"#a88b66"},{"name":"Old Lime","hex":"#aec571"},{"name":"Old Mahogany","hex":"#4a0100"},{"name":"Old Mandarin","hex":"#8e2323"},{"name":"Old Map","hex":"#d5c9bc"},{"name":"Old Mauve","hex":"#673147"},{"name":"Old Mill","hex":"#343b4e"},{"name":"Old Mill Blue","hex":"#6e6f82"},{"name":"Old Mission Pink","hex":"#d8c2ca"},{"name":"Old Money","hex":"#2c5c4f"},{"name":"Old Moss Green","hex":"#867e36"},{"name":"Old Nan Yarn","hex":"#5e5896"},{"name":"Old Pearls","hex":"#f6ebd7"},{"name":"Old Pink","hex":"#c77986"},{"name":"Old Porch","hex":"#745947"},{"name":"Old Prune","hex":"#8272a4"},{"name":"Old Red Crest","hex":"#d8cbcf"},{"name":"Old Rose","hex":"#c08081"},{"name":"Old Ruin","hex":"#917b53"},{"name":"Old Salem","hex":"#bba582"},{"name":"Old School","hex":"#353c3d"},{"name":"Old Silver","hex":"#848482"},{"name":"Old Trail","hex":"#bb8811"},{"name":"Old Treasure Chest","hex":"#544333"},{"name":"Old Truck","hex":"#0a888a"},{"name":"Old Tudor","hex":"#6c574c"},{"name":"Old Vine","hex":"#687760"},{"name":"Old Whiskey","hex":"#ddaa55"},{"name":"Old Willow Leaf","hex":"#756947"},{"name":"Old Wine","hex":"#90091f"},{"name":"Old World","hex":"#91a8cf"},{"name":"Old Yella","hex":"#feed9a"},{"name":"Old Yellow Bricks","hex":"#ece6d7"},{"name":"Olde World Gold","hex":"#8f6c3e"},{"name":"Olden Amber","hex":"#eeb76b"},{"name":"Ole Pink","hex":"#ebd5cc"},{"name":"Ole Yeller","hex":"#c79e5f"},{"name":"Oleander","hex":"#f2ccc5"},{"name":"Oleander Pink","hex":"#f85898"},{"name":"Oliva Oscuro","hex":"#665439"},{"name":"Olivary","hex":"#6e592c"},{"name":"Olive","hex":"#808010"},{"name":"Olive Bark","hex":"#5f5537"},{"name":"Olive Branch","hex":"#646a45"},{"name":"Olive Bread","hex":"#c3bebb"},{"name":"Olive Brown","hex":"#645403"},{"name":"Olive Buff","hex":"#bcd382"},{"name":"Olive Chutney","hex":"#a6997a"},{"name":"Olive Conquering White","hex":"#e4e5d8"},{"name":"Olive Court","hex":"#5f5d48"},{"name":"Olive Creed","hex":"#e8ecc0"},{"name":"Olive Drab","hex":"#6f7632"},{"name":"Olive Gold","hex":"#bfac8b"},{"name":"Olive Green","hex":"#677a04"},{"name":"Olive Grey","hex":"#afa78d"},{"name":"Olive Grove","hex":"#716a4d"},{"name":"Olive Haze","hex":"#888064"},{"name":"Olive Hint","hex":"#c9bd88"},{"name":"Olive It","hex":"#aeab9a"},{"name":"Olive Leaf","hex":"#4e4b35"},{"name":"Olive Leaf Tea","hex":"#78866b"},{"name":"Olive Martini","hex":"#ced2ab"},{"name":"Olive Niçoise","hex":"#88432e"},{"name":"Olive Night","hex":"#565342"},{"name":"Olive Ocher","hex":"#d1bd19"},{"name":"Olive Ochre","hex":"#837752"},{"name":"Olive Oil","hex":"#bab86c"},{"name":"Olive Paste","hex":"#83826d"},{"name":"Olive Pit","hex":"#a9a491"},{"name":"Olive Reserve","hex":"#a4a84d"},{"name":"Olive Sand","hex":"#9abf8d"},{"name":"Olive Sapling","hex":"#7f7452"},{"name":"Olive Shade","hex":"#7d7248"},{"name":"Olive Shadow","hex":"#706041"},{"name":"Olive Soap","hex":"#97a49a"},{"name":"Olive Sprig","hex":"#acaf95"},{"name":"Olive Tint","hex":"#efebd7"},{"name":"Olive Tree","hex":"#aba77c"},{"name":"Olive Wood","hex":"#756244"},{"name":"Olive Yellow","hex":"#c2b709"},{"name":"Olivenite","hex":"#333311"},{"name":"Olivetone","hex":"#747028"},{"name":"Olivia","hex":"#996622"},{"name":"Olivine","hex":"#9ab973"},{"name":"Olivine Basalt","hex":"#655867"},{"name":"Olivine Grey","hex":"#928e7c"},{"name":"Olm Pink","hex":"#ffe6e2"},{"name":"Olympia Ivy","hex":"#5a6647"},{"name":"Olympian Blue","hex":"#1c4c8c"},{"name":"Olympic Blue","hex":"#4f8fe6"},{"name":"Olympic Bronze","hex":"#9a724a"},{"name":"Olympic Range","hex":"#424c44"},{"name":"Olympus White","hex":"#d4d8d7"},{"name":"Ombre Blue","hex":"#4a4e5d"},{"name":"Ombre Grey","hex":"#848998"},{"name":"Omphalodes","hex":"#b5cedf"},{"name":"On a Whim","hex":"#019e91"},{"name":"On Cloud Nine","hex":"#c2e7e8"},{"name":"On Location","hex":"#d4c6dc"},{"name":"On the Avenue","hex":"#948776"},{"name":"On the Moor","hex":"#666d68"},{"name":"On the Nile","hex":"#b29aa7"},{"name":"On the Rocks","hex":"#d0cec8"},{"name":"Onahau","hex":"#c2e6ec"},{"name":"Once Bitten","hex":"#bd2f10"},{"name":"Once in a Blue Moon","hex":"#0044bb"},{"name":"One Minute to Midnight","hex":"#003388"},{"name":"One to Remember","hex":"#dcbdad"},{"name":"One Year of Rain","hex":"#29465b"},{"name":"Onion","hex":"#48412b"},{"name":"Onion Powder","hex":"#ece2d4"},{"name":"Onion Seedling","hex":"#47885e"},{"name":"Onion Skin","hex":"#eeeddf"},{"name":"Onion Skin Blue","hex":"#4c5692"},{"name":"Onion White","hex":"#e2d5c2"},{"name":"Online","hex":"#b0b5b5"},{"name":"Online Lime","hex":"#468c3e"},{"name":"Only Natural","hex":"#e1bc99"},{"name":"Only Oatmeal","hex":"#d4cdb5"},{"name":"Only Olive","hex":"#cbccb5"},{"name":"Only Yesterday","hex":"#f4d1b9"},{"name":"Onsen","hex":"#66eebb"},{"name":"Ontario Violet","hex":"#777cb0"},{"name":"Onyx","hex":"#464544"},{"name":"Onyx Heart","hex":"#353839"},{"name":"Ooid Sand","hex":"#c2beb6"},{"name":"Opal","hex":"#aee0e4"},{"name":"Opal Blue","hex":"#bcd9d2"},{"name":"Opal Cream","hex":"#fceece"},{"name":"Opal Fire","hex":"#e49c86"},{"name":"Opal Flame","hex":"#e95c4b"},{"name":"Opal Green","hex":"#157954"},{"name":"Opal Grey","hex":"#9a9394"},{"name":"Opal Silk","hex":"#9db9b2"},{"name":"Opal Turquoise","hex":"#96d1c3"},{"name":"Opal Violet","hex":"#7e8fbb"},{"name":"Opal Waters","hex":"#b1c6d1"},{"name":"Opalescent","hex":"#3c94c1"},{"name":"Opalescent Coral","hex":"#ffd2a9"},{"name":"Opaline","hex":"#c1d1c4"},{"name":"Opaline Green","hex":"#a3c57d"},{"name":"Opaline Pink","hex":"#c6a0ab"},{"name":"Open Air","hex":"#c7dfe0"},{"name":"Open Book","hex":"#f5f1e5"},{"name":"Open Canyon","hex":"#bba990"},{"name":"Open Range","hex":"#91876b"},{"name":"Open Seas","hex":"#83afbc"},{"name":"Open Sesame","hex":"#f8e2a9"},{"name":"Opera","hex":"#816575"},{"name":"Opera Blue","hex":"#453e6e"},{"name":"Opera Glass","hex":"#e5f1eb"},{"name":"Opera Glasses","hex":"#365360"},{"name":"Opera Mauve","hex":"#b784a7"},{"name":"Opera Red","hex":"#ff1b2d"},{"name":"Operetta Mauve","hex":"#3a284c"},{"name":"Opium","hex":"#987e7e"},{"name":"Opium Mauve","hex":"#735362"},{"name":"Optimist Gold","hex":"#e9ab51"},{"name":"Optimistic Yellow","hex":"#f5e1a6"},{"name":"Optimum Blue","hex":"#465a7f"},{"name":"Optophobia","hex":"#130d0d"},{"name":"Opulent","hex":"#d5892f"},{"name":"Opulent Blue","hex":"#0055ee"},{"name":"Opulent Green","hex":"#103222"},{"name":"Opulent Lime","hex":"#88dd11"},{"name":"Opulent Mauve","hex":"#462343"},{"name":"Opulent Opal","hex":"#f2ebea"},{"name":"Opulent Orange","hex":"#f16640"},{"name":"Opulent Ostrich","hex":"#775577"},{"name":"Opulent Purple","hex":"#673362"},{"name":"Opulent Turquoise","hex":"#88ddcc"},{"name":"Opulent Violet","hex":"#a09ec6"},{"name":"Opus","hex":"#cecae1"},{"name":"Opus Magnum","hex":"#e3e1ed"},{"name":"Oracle","hex":"#395555"},{"name":"Orange","hex":"#ffa500"},{"name":"Orange Aura","hex":"#ff9682"},{"name":"Orange Avant-Garde","hex":"#ff8822"},{"name":"Orange Ballad","hex":"#b56d41"},{"name":"Orange Bell Pepper","hex":"#ff8844"},{"name":"Orange Blast","hex":"#f5c99b"},{"name":"Orange Brown","hex":"#b16002"},{"name":"Orange Burst","hex":"#ff6e3a"},{"name":"Orange Canyon","hex":"#fdd1a4"},{"name":"Orange Caramel","hex":"#de954b"},{"name":"Orange Chalk","hex":"#fad48b"},{"name":"Orange Chiffon","hex":"#f9ae7d"},{"name":"Orange Chocolate","hex":"#f3c775"},{"name":"Orange Clay","hex":"#e6a57f"},{"name":"Orange Clown Fish","hex":"#ff550e"},{"name":"Orange Coloured White","hex":"#fbebcf"},{"name":"Orange Confection","hex":"#f4e3d2"},{"name":"Orange Creamsicle","hex":"#ffb710"},{"name":"Orange Crush","hex":"#ee7733"},{"name":"Orange Danger","hex":"#dd6600"},{"name":"Orange Daylily","hex":"#eb7d5d"},{"name":"Orange Delight","hex":"#ffc355"},{"name":"Orange Drop","hex":"#e18e3f"},{"name":"Orange Essential","hex":"#d1907c"},{"name":"Orange Fire","hex":"#ffaf6b"},{"name":"Orange Flambe","hex":"#a96f55"},{"name":"Orange Glass","hex":"#ffca7d"},{"name":"Orange Glow","hex":"#ffe2bd"},{"name":"Orange Gluttony","hex":"#ee7722"},{"name":"Orange Grove","hex":"#fbaf8d"},{"name":"Orange Hibiscus","hex":"#ff9a45"},{"name":"Orange Ice","hex":"#ffdec1"},{"name":"Orange Jelly","hex":"#fac205"},{"name":"Orange Jewel","hex":"#ff9731"},{"name":"Orange Juice","hex":"#ff7f00"},{"name":"Orange Keeper","hex":"#ca5333"},{"name":"Orange Lily","hex":"#be7249"},{"name":"Orange Liqueur","hex":"#edaa80"},{"name":"Orange Maple","hex":"#d3a083"},{"name":"Orange Marmalade","hex":"#faac72"},{"name":"Orange Ochre","hex":"#da7631"},{"name":"Orange Outburst","hex":"#dd7700"},{"name":"Orange Peel","hex":"#ffa000"},{"name":"Orange Pepper","hex":"#da7d00"},{"name":"Orange Piñata","hex":"#ff6611"},{"name":"Orange Pink","hex":"#ff6f52"},{"name":"Orange Pop","hex":"#ffbc3e"},{"name":"Orange Poppy","hex":"#e68750"},{"name":"Orange Popsicle","hex":"#ff7913"},{"name":"Orange Pospsicle","hex":"#f2a60f"},{"name":"Orange Quench","hex":"#febc61"},{"name":"Orange Red","hex":"#fe4401"},{"name":"Orange Roughy","hex":"#a85335"},{"name":"Orange Rufous","hex":"#c05200"},{"name":"Orange Rust","hex":"#c56543"},{"name":"Orange Salmonberry","hex":"#f0b073"},{"name":"Orange Satisfaction","hex":"#dd9900"},{"name":"Orange Sherbet","hex":"#fec49b"},{"name":"Orange Shimmer","hex":"#e2d6bd"},{"name":"Orange Shot","hex":"#dd7744"},{"name":"Orange Soda","hex":"#fa5b3d"},{"name":"Orange Spice","hex":"#fea060"},{"name":"Orange Squash","hex":"#c27635"},{"name":"Orange Sulphur","hex":"#e8a320"},{"name":"Orange Supreme","hex":"#ff7435"},{"name":"Orange Tea Rose","hex":"#ff8379"},{"name":"Orange Tiger","hex":"#f95c14"},{"name":"Orange Vermillion","hex":"#bc5339"},{"name":"Orange White","hex":"#eae3cd"},{"name":"Orange Wood","hex":"#b74923"},{"name":"Orange Yellow","hex":"#fdb915"},{"name":"Orange you Happy?","hex":"#fd7f22"},{"name":"Orange Zest","hex":"#f07227"},{"name":"Orangeade","hex":"#e35435"},{"name":"Orangealicious","hex":"#ee5511"},{"name":"Orangery","hex":"#e6bca9"},{"name":"Orangevale","hex":"#e88354"},{"name":"Orangeville","hex":"#e57059"},{"name":"Orangina","hex":"#fec615"},{"name":"Orangish","hex":"#fd8d49"},{"name":"Orangish Brown","hex":"#b25f03"},{"name":"Orangish Red","hex":"#f43605"},{"name":"Oranzhewyi Orange","hex":"#ee6237"},{"name":"Orb of Discord","hex":"#772299"},{"name":"Orb of Harmony","hex":"#eedd44"},{"name":"Orbital","hex":"#6d83bb"},{"name":"Orbital Kingdom","hex":"#220088"},{"name":"Orca White","hex":"#d0ccc9"},{"name":"Orchard Plum","hex":"#9a858c"},{"name":"Orchestra of Red","hex":"#ae230e"},{"name":"Orchid","hex":"#7a81ff"},{"name":"Orchid Bloom","hex":"#c5aecf"},{"name":"Orchid Blossom","hex":"#e4e1e4"},{"name":"Orchid Bouquet","hex":"#d1acce"},{"name":"Orchid Dottyback","hex":"#aa55aa"},{"name":"Orchid Ecstasy","hex":"#bb4488"},{"name":"Orchid Fragrance","hex":"#c9c1d0"},{"name":"Orchid Grey","hex":"#5e5871"},{"name":"Orchid Haze","hex":"#b0879b"},{"name":"Orchid Hue","hex":"#e5e999"},{"name":"Orchid Hush","hex":"#cec3d2"},{"name":"Orchid Ice","hex":"#e0d0db"},{"name":"Orchid Kiss","hex":"#ac74a4"},{"name":"Orchid Lane","hex":"#e5dde7"},{"name":"Orchid Lei","hex":"#9c4a7d"},{"name":"Orchid Mist","hex":"#e8e6e8"},{"name":"Orchid Orange","hex":"#ffa180"},{"name":"Orchid Orchestra","hex":"#876281"},{"name":"Orchid Petal","hex":"#bfb4cb"},{"name":"Orchid Pink","hex":"#f3bbca"},{"name":"Orchid Red","hex":"#ad878d"},{"name":"Orchid Rose","hex":"#e9d1da"},{"name":"Orchid Shadow","hex":"#cbc5c2"},{"name":"Orchid Smoke","hex":"#cd899e"},{"name":"Orchid Tint","hex":"#d3c9d4"},{"name":"Orchid Whisper","hex":"#dde0e8"},{"name":"Orchid White","hex":"#f1ebd9"},{"name":"Orchilla","hex":"#938ea9"},{"name":"Ordain","hex":"#998188"},{"name":"Order Green","hex":"#1a4c32"},{"name":"Ore Bluish Black","hex":"#1c3339"},{"name":"Ore Mountains Green","hex":"#2b6551"},{"name":"Orecchiette","hex":"#faeecb"},{"name":"Oregano","hex":"#7f8353"},{"name":"Oregano Green","hex":"#4da241"},{"name":"Oregano Spice","hex":"#8d8764"},{"name":"Oregon","hex":"#9b4703"},{"name":"Oregon Blue","hex":"#448ee4"},{"name":"Oregon Grape","hex":"#49354e"},{"name":"Oregon Hazel","hex":"#916238"},{"name":"Oregon Trail","hex":"#efb91b"},{"name":"Orenju Ogon Koi","hex":"#ffcda8"},{"name":"Orestes","hex":"#9e9b85"},{"name":"Organic","hex":"#747261"},{"name":"Organic Bamboo","hex":"#e1cda4"},{"name":"Organic Fiber","hex":"#feede0"},{"name":"Organic Field","hex":"#c6c2ab"},{"name":"Organic Green","hex":"#7fac6e"},{"name":"Organic Matter","hex":"#a99e54"},{"name":"Organza","hex":"#ffdea6"},{"name":"Organza Green","hex":"#bbccbd"},{"name":"Organza Peach","hex":"#fbeeda"},{"name":"Organza Violet","hex":"#7391cc"},{"name":"Orient","hex":"#255b77"},{"name":"Orient Blue","hex":"#4e4981"},{"name":"Orient Green","hex":"#77997d"},{"name":"Orient Mosaic Green","hex":"#7cb8a1"},{"name":"Orient Pink","hex":"#8f415f"},{"name":"Orient Yellow","hex":"#f7b969"},{"name":"Oriental Blush","hex":"#d7c6e1"},{"name":"Oriental Eggplant","hex":"#533e4f"},{"name":"Oriental Herbs","hex":"#118822"},{"name":"Oriental Nights","hex":"#4b2c74"},{"name":"Oriental Olive","hex":"#445533"},{"name":"Oriental Pink","hex":"#c28e88"},{"name":"Oriental Ruby","hex":"#ce536b"},{"name":"Oriental Scent","hex":"#e2bfa8"},{"name":"Oriental Silk","hex":"#efe5d6"},{"name":"Oriental Spice","hex":"#8b5131"},{"name":"Origami","hex":"#ece0c6"},{"name":"Origami White","hex":"#e5e2da"},{"name":"Original White","hex":"#f0e5d3"},{"name":"Orinoco","hex":"#d2d3b3"},{"name":"Oriole","hex":"#ff8008"},{"name":"Oriole Yellow","hex":"#f6d576"},{"name":"Orioles","hex":"#ee8962"},{"name":"Orioles Orange","hex":"#fb4f14"},{"name":"Orion","hex":"#de55a9"},{"name":"Orion Blue","hex":"#40525f"},{"name":"Orion Grey","hex":"#535558"},{"name":"Orka Black","hex":"#27221f"},{"name":"Orkhide Shade","hex":"#3e5755"},{"name":"Orko","hex":"#d91407"},{"name":"Orlean\'s Tune","hex":"#b8995b"},{"name":"Orleans Tune","hex":"#97d5e7"},{"name":"Ornamental Turquoise","hex":"#00867d"},{"name":"Ornate","hex":"#806d95"},{"name":"Ornery Tangerine","hex":"#f77d25"},{"name":"Oro","hex":"#c29436"},{"name":"Orochimaru","hex":"#d9d8da"},{"name":"Orpiment Orange","hex":"#d17c3f"},{"name":"Orpiment Yellow","hex":"#f9c89b"},{"name":"Orpington Chicken","hex":"#be855e"},{"name":"Orzo Pasta","hex":"#f9eacc"},{"name":"Osage Orange","hex":"#f4a045"},{"name":"Osiris","hex":"#5b5a4d"},{"name":"Oslo Blue","hex":"#a6bdbe"},{"name":"Oslo Grey","hex":"#878d91"},{"name":"Osprey","hex":"#63564b"},{"name":"Osprey Nest","hex":"#ccbab1"},{"name":"Osso Bucco","hex":"#ad9769"},{"name":"Ostrich","hex":"#e9e3d5"},{"name":"Ostrich Egg","hex":"#dcd0bb"},{"name":"Ostrich Tail","hex":"#eadfe6"},{"name":"Oswego Tea","hex":"#665d59"},{"name":"Ōtan Red","hex":"#ff4e20"},{"name":"Otis Madeira","hex":"#633d38"},{"name":"Ottawa Falls","hex":"#00a78d"},{"name":"Otter","hex":"#7f674f"},{"name":"Otter Brown","hex":"#654320"},{"name":"Otter Creek","hex":"#3f5a5d"},{"name":"Otter Tail","hex":"#938577"},{"name":"Otto Ice","hex":"#bedfd3"},{"name":"Ottoman","hex":"#d3dbcb"},{"name":"Ottoman Red","hex":"#ee2222"},{"name":"OU Crimson Red","hex":"#990000"},{"name":"Oubliette","hex":"#4f4944"},{"name":"Ouni Red","hex":"#ee7948"},{"name":"Our Little Secret","hex":"#a84b7a"},{"name":"Out of Blue","hex":"#c0f7db"},{"name":"Out of Fashion","hex":"#f26d8f"},{"name":"Out of Plumb","hex":"#9c909c"},{"name":"Out of the Blue","hex":"#1199ee"},{"name":"Outback","hex":"#c9a375"},{"name":"Outback Brown","hex":"#7e5d47"},{"name":"Outdoor Cafe","hex":"#8d745e"},{"name":"Outdoor Land","hex":"#a07d5e"},{"name":"Outdoor Oasis","hex":"#6e6f4d"},{"name":"Outdoorsy","hex":"#b2974d"},{"name":"Outer Boundary","hex":"#654846"},{"name":"Outer Reef","hex":"#2a6295"},{"name":"Outer Rim","hex":"#221177"},{"name":"Outer Space","hex":"#314e64"},{"name":"Outerbanks","hex":"#b7a48b"},{"name":"Outgoing Orange","hex":"#e6955f"},{"name":"Outlawed Orange","hex":"#b67350"},{"name":"Outrageous","hex":"#824438"},{"name":"Outrageous Green","hex":"#8ab733"},{"name":"Outrageous Orange","hex":"#ff6e4a"},{"name":"Outrigger","hex":"#82714d"},{"name":"Ovation","hex":"#9eb2b9"},{"name":"Over the Hills","hex":"#4d6d08"},{"name":"Over the Moon","hex":"#abb8d5"},{"name":"Over the Sky","hex":"#98d5ea"},{"name":"Over the Taupe","hex":"#b09d8a"},{"name":"Overbaked","hex":"#61311c"},{"name":"Overboard","hex":"#005555"},{"name":"Overcast","hex":"#73a3d0"},{"name":"Overcast Brick","hex":"#b3583d"},{"name":"Overcast Day","hex":"#8f99a2"},{"name":"Overcast Night","hex":"#42426f"},{"name":"Overcast Sky","hex":"#a7b8c4"},{"name":"Overdue Blue","hex":"#4400ff"},{"name":"Overdue Grey","hex":"#c7c3be"},{"name":"Overexposed Shot","hex":"#eff4dc"},{"name":"Overgrown","hex":"#88dd00"},{"name":"Overgrown Citadel","hex":"#888844"},{"name":"Overgrown Mausoleum","hex":"#448833"},{"name":"Overgrown Temple","hex":"#116611"},{"name":"Overgrown Trees","hex":"#6b6048"},{"name":"Overgrown Trellis","hex":"#6a8988"},{"name":"Overgrowth","hex":"#88cc33"},{"name":"Overjoy","hex":"#eec25f"},{"name":"Overlook","hex":"#717481"},{"name":"Overnight Oats","hex":"#fbf0db"},{"name":"Overt Green","hex":"#97a554"},{"name":"Overtake","hex":"#33557f"},{"name":"Overtone","hex":"#a4e3b3"},{"name":"Ovoid Fruit","hex":"#8c7e49"},{"name":"Owl Manner Malt","hex":"#c0af87"},{"name":"Owlet","hex":"#90845f"},{"name":"Oxalis","hex":"#c1e28a"},{"name":"Oxblood","hex":"#800020"},{"name":"Oxblood Red","hex":"#71383f"},{"name":"Oxford","hex":"#b1bbc5"},{"name":"Oxford Blue","hex":"#002147"},{"name":"Oxford Brick","hex":"#743b39"},{"name":"Oxford Brown","hex":"#504139"},{"name":"Oxford Sausage","hex":"#db7192"},{"name":"Oxford Street","hex":"#bda07f"},{"name":"Oxford Tan","hex":"#b8a99a"},{"name":"Oxide","hex":"#bf7657"},{"name":"Oxley","hex":"#6d9a78"},{"name":"Oxygen Blue","hex":"#92b6d5"},{"name":"Oyster","hex":"#e3d3bf"},{"name":"Oyster Bar","hex":"#dbd0bb"},{"name":"Oyster Bay","hex":"#71818c"},{"name":"Oyster Bisque","hex":"#f2e5b1"},{"name":"Oyster Catch","hex":"#4a4c45"},{"name":"Oyster Cracker","hex":"#f4f0d2"},{"name":"Oyster Grey","hex":"#cbc1ae"},{"name":"Oyster Haze","hex":"#e4ded2"},{"name":"Oyster Island","hex":"#efefe5"},{"name":"Oyster Linen","hex":"#b1ab96"},{"name":"Oyster Mushroom","hex":"#b8bcbe"},{"name":"Oyster Pink","hex":"#d4b5b0"},{"name":"Oyster White","hex":"#cbc4a2"},{"name":"Ozone","hex":"#8b95a2"},{"name":"Ozone Blue","hex":"#c7d3e0"},{"name":"Pa Red","hex":"#5e3a39"},{"name":"Paarl","hex":"#864b36"},{"name":"Pablo","hex":"#7a715c"},{"name":"Pac-Man","hex":"#ffe737"},{"name":"Paccheri","hex":"#ecdfad"},{"name":"Pacer White","hex":"#e5ddd0"},{"name":"Pachyderm","hex":"#8f989d"},{"name":"Pacific","hex":"#24646b"},{"name":"Pacific Bliss","hex":"#96acb8"},{"name":"Pacific Blue","hex":"#1ca9c9"},{"name":"Pacific Blues","hex":"#4470b0"},{"name":"Pacific Bluffs","hex":"#c3a285"},{"name":"Pacific Breeze","hex":"#c1dbe7"},{"name":"Pacific Bridge","hex":"#0052cc"},{"name":"Pacific Coast","hex":"#5e85b1"},{"name":"Pacific Depths","hex":"#004488"},{"name":"Pacific Fog","hex":"#dcdcd5"},{"name":"Pacific Harbour","hex":"#77b9db"},{"name":"Pacific Line","hex":"#2d3544"},{"name":"Pacific Mist","hex":"#cdd5d3"},{"name":"Pacific Navy","hex":"#25488a"},{"name":"Pacific Ocean","hex":"#92cbf1"},{"name":"Pacific Palisade","hex":"#69a4b9"},{"name":"Pacific Panorama","hex":"#c0d6ea"},{"name":"Pacific Pearl","hex":"#e8eae6"},{"name":"Pacific Pine","hex":"#546b45"},{"name":"Pacific Pleasure","hex":"#167d97"},{"name":"Pacific Queen","hex":"#026b5d"},{"name":"Pacific Sand","hex":"#f1ebcd"},{"name":"Pacific Sea Teal","hex":"#3e8083"},{"name":"Pacific Spirit","hex":"#3c4a56"},{"name":"Pacific Storm","hex":"#035453"},{"name":"Pacifica","hex":"#4e77a3"},{"name":"Pacifika","hex":"#778120"},{"name":"Packing Paper","hex":"#ba9b5d"},{"name":"Paco","hex":"#4f4037"},{"name":"Padded Leaf","hex":"#859e94"},{"name":"Paddle Wheel","hex":"#88724d"},{"name":"Paddy","hex":"#da9585"},{"name":"Paddy Field","hex":"#99bb44"},{"name":"Padua","hex":"#7eb394"},{"name":"Paella","hex":"#dcc61f"},{"name":"Paella Natural White","hex":"#e1d7c2"},{"name":"Pageant Green","hex":"#99dac5"},{"name":"Pageant Song","hex":"#b6c3d1"},{"name":"Pageantry Purple","hex":"#68447c"},{"name":"Pagoda","hex":"#127e93"},{"name":"Pagoda Blue","hex":"#1b8192"},{"name":"Paid in Full","hex":"#8c8e65"},{"name":"Painite","hex":"#6b4947"},{"name":"Paint the Sky","hex":"#11eeff"},{"name":"Painted Bark","hex":"#5f3d32"},{"name":"Painted Clay","hex":"#eb8f6f"},{"name":"Painted Desert","hex":"#beb8b6"},{"name":"Painted Leather","hex":"#6d544f"},{"name":"Painted Pony","hex":"#bb9471"},{"name":"Painted Poppy","hex":"#cb5139"},{"name":"Painted Sea","hex":"#008595"},{"name":"Painted Skies","hex":"#b28774"},{"name":"Painted Turtle","hex":"#56745f"},{"name":"Painter\'s Canvas","hex":"#f9f2de"},{"name":"Painter\'s White","hex":"#f2ebdd"},{"name":"Paisley","hex":"#726f7e"},{"name":"Paisley Purple","hex":"#8b79b1"},{"name":"Pakistan Green","hex":"#006600"},{"name":"Palace Arms","hex":"#43456d"},{"name":"Palace Blue","hex":"#3973c0"},{"name":"Palace Green","hex":"#426255"},{"name":"Palace Purple","hex":"#68457a"},{"name":"Palace Red","hex":"#752745"},{"name":"Palace Rose","hex":"#f8cad5"},{"name":"Palais White","hex":"#f4f0e5"},{"name":"Palak Paneer","hex":"#888811"},{"name":"Palatial","hex":"#eedcd1"},{"name":"Palatial White","hex":"#f9f2e4"},{"name":"Palatinate Blue","hex":"#273be2"},{"name":"Palatinate Purple","hex":"#682860"},{"name":"Palatine","hex":"#c9c7b6"},{"name":"Pale","hex":"#fff9d0"},{"name":"Pale Adobe","hex":"#f4e9ba"},{"name":"Pale Ale","hex":"#fef068"},{"name":"Pale Aqua","hex":"#bcd4e1"},{"name":"Pale Bamboo","hex":"#c9bfa8"},{"name":"Pale Banana","hex":"#f5e28d"},{"name":"Pale Beige","hex":"#ccc7b1"},{"name":"Pale Berries","hex":"#e2ccc7"},{"name":"Pale Berry","hex":"#e39e9c"},{"name":"Pale Beryl","hex":"#98ded9"},{"name":"Pale Blackish Purple","hex":"#4a475c"},{"name":"Pale Blossom","hex":"#fde1f0"},{"name":"Pale Blue","hex":"#d0fefe"},{"name":"Pale Blue Grey","hex":"#a2adb1"},{"name":"Pale Blush","hex":"#dfafa4"},{"name":"Pale Brown","hex":"#b1916e"},{"name":"Pale Bud","hex":"#eeebe8"},{"name":"Pale Canary","hex":"#f1efa6"},{"name":"Pale Cashmere","hex":"#e8dfd5"},{"name":"Pale Celadon","hex":"#c9cbbe"},{"name":"Pale Celery","hex":"#e9e9c7"},{"name":"Pale Cerulean","hex":"#9bc4e2"},{"name":"Pale Chamois","hex":"#efe5d7"},{"name":"Pale Cherry Blossom","hex":"#fdeff2"},{"name":"Pale Chestnut","hex":"#ddadaf"},{"name":"Pale Cloud","hex":"#dadee9"},{"name":"Pale Coral","hex":"#f0d0b4"},{"name":"Pale Cornflower","hex":"#ced9e1"},{"name":"Pale Cucumber","hex":"#d6d5bc"},{"name":"Pale Daffodil","hex":"#fde89a"},{"name":"Pale Dogwood","hex":"#ecccc1"},{"name":"Pale Egg","hex":"#fde8d0"},{"name":"Pale Flower","hex":"#698aab"},{"name":"Pale Frost","hex":"#c7e1ee"},{"name":"Pale Gingersnap","hex":"#eaddca"},{"name":"Pale Gold","hex":"#fdde6c"},{"name":"Pale Grape","hex":"#c0a2c7"},{"name":"Pale Green","hex":"#69b076"},{"name":"Pale Green Grey","hex":"#96907e"},{"name":"Pale Green Tea","hex":"#e2e2d2"},{"name":"Pale Grey","hex":"#fdfdfe"},{"name":"Pale Grey Blue","hex":"#d4e2eb"},{"name":"Pale Grey Magenta","hex":"#e7d8ea"},{"name":"Pale Honey","hex":"#f5d6aa"},{"name":"Pale Icelandish","hex":"#bdd4d1"},{"name":"Pale Iris","hex":"#8895c5"},{"name":"Pale Ivy","hex":"#d4cfb2"},{"name":"Pale Jade","hex":"#77c3b4"},{"name":"Pale Jasper","hex":"#fed6cc"},{"name":"Pale Khaki","hex":"#998877"},{"name":"Pale King\'s Blue","hex":"#abf5ed"},{"name":"Pale Lavender","hex":"#dcd0ff"},{"name":"Pale Leaf","hex":"#bdcaa8"},{"name":"Pale Lichen","hex":"#d8d4bf"},{"name":"Pale Light Green","hex":"#b1fc99"},{"name":"Pale Lilac","hex":"#d8b5bf"},{"name":"Pale Lily","hex":"#f3ece7"},{"name":"Pale Lime Green","hex":"#b1ff65"},{"name":"Pale Lime Yellow","hex":"#dfe497"},{"name":"Pale Linen","hex":"#ebe5d6"},{"name":"Pale Loden","hex":"#ccd2ca"},{"name":"Pale Lychee","hex":"#c4acb2"},{"name":"Pale Marigold","hex":"#ffbb44"},{"name":"Pale Mauve","hex":"#c6a4a4"},{"name":"Pale Mint","hex":"#aac2a1"},{"name":"Pale Moss","hex":"#dcc797"},{"name":"Pale Moss Green","hex":"#d0dbc4"},{"name":"Pale Mountain Lake Turquoise","hex":"#bae1d3"},{"name":"Pale Muse","hex":"#e4dde7"},{"name":"Pale Narcissus","hex":"#faf5e2"},{"name":"Pale Olive","hex":"#d3c7a1"},{"name":"Pale Olive Green","hex":"#aba578"},{"name":"Pale Orchid","hex":"#dedbe5"},{"name":"Pale Orchid Petal","hex":"#f6e2ec"},{"name":"Pale Organza","hex":"#fdebbc"},{"name":"Pale Oyster","hex":"#9c8d72"},{"name":"Pale Palomino","hex":"#e5dbca"},{"name":"Pale Parchment","hex":"#d1c3ad"},{"name":"Pale Parsnip","hex":"#e3d8bf"},{"name":"Pale Pastel","hex":"#9adedb"},{"name":"Pale Peach","hex":"#ffe5ad"},{"name":"Pale Pear","hex":"#f4da6e"},{"name":"Pale Pearl","hex":"#fff2de"},{"name":"Pale Perfection","hex":"#f7e0de"},{"name":"Pale Periwinkle","hex":"#c8d2e2"},{"name":"Pale Persimmon","hex":"#d4acad"},{"name":"Pale Petals","hex":"#d9bfce"},{"name":"Pale Petticoat","hex":"#ba9ba5"},{"name":"Pale Petunia","hex":"#f8c0c7"},{"name":"Pale Phthalo Blue","hex":"#ccd5ff"},{"name":"Pale Pink","hex":"#efcddb"},{"name":"Pale Pistachio","hex":"#e3e7d1"},{"name":"Pale Poppy","hex":"#bca8ad"},{"name":"Pale Primrose","hex":"#eec8d3"},{"name":"Pale Purple","hex":"#b790d4"},{"name":"Pale Quartz","hex":"#efeada"},{"name":"Pale Rebelka Jakub","hex":"#ebebd7"},{"name":"Pale Robin Egg Blue","hex":"#96ded1"},{"name":"Pale Rose","hex":"#efd6da"},{"name":"Pale Sage","hex":"#acbda1"},{"name":"Pale Sagebrush","hex":"#d3d1b9"},{"name":"Pale Sand","hex":"#e5d5ba"},{"name":"Pale Seafoam","hex":"#c3e7e8"},{"name":"Pale Shale","hex":"#cacfdc"},{"name":"Pale Shrimp","hex":"#f8dbd6"},{"name":"Pale Sienna","hex":"#dfc7bc"},{"name":"Pale Sky","hex":"#bdf6fe"},{"name":"Pale Slate","hex":"#9fabad"},{"name":"Pale Spring Bud","hex":"#ecebbd"},{"name":"Pale Spring Morning","hex":"#b3be98"},{"name":"Pale Starlet","hex":"#e4ded8"},{"name":"Pale Sunshine","hex":"#f2c880"},{"name":"Pale Taupe","hex":"#bc987e"},{"name":"Pale Teal","hex":"#82cbb2"},{"name":"Pale Tendril","hex":"#cecdbb"},{"name":"Pale Terra","hex":"#eaaa96"},{"name":"Pale Turquoise","hex":"#a5fbd5"},{"name":"Pale Verdigris","hex":"#6f9892"},{"name":"Pale View","hex":"#f4f2e2"},{"name":"Pale Violet","hex":"#c6c3d6"},{"name":"Pale Vista","hex":"#d8dece"},{"name":"Pale Whale","hex":"#b6d3df"},{"name":"Pale Wheat","hex":"#d9c29f"},{"name":"Pale Willow","hex":"#89ab98"},{"name":"Pale Wisteria","hex":"#bbc8e6"},{"name":"Pale Wood","hex":"#ead2a2"},{"name":"Palest of Lemon","hex":"#f4eed1"},{"name":"Palisade","hex":"#c3b497"},{"name":"Palisade Orchid","hex":"#af8ea5"},{"name":"Palish Peach","hex":"#f7ece1"},{"name":"Palladian","hex":"#eee9df"},{"name":"Palladium","hex":"#b1b1b1"},{"name":"Pallasite Blue","hex":"#314a4e"},{"name":"Pallid Blue","hex":"#b3cdd4"},{"name":"Pallid Green","hex":"#c1e0c1"},{"name":"Pallid Light Green","hex":"#cbdcb7"},{"name":"Pallid Orange","hex":"#fcb99d"},{"name":"Pallid Rose","hex":"#f3dfdb"},{"name":"Pallid Wych","hex":"#cdcebe"},{"name":"Palm","hex":"#afaf5e"},{"name":"Palm Breeze","hex":"#dbe2c9"},{"name":"Palm Desert","hex":"#85775f"},{"name":"Palm Frond","hex":"#aead5b"},{"name":"Palm Green","hex":"#20392c"},{"name":"Palm Heart Cream","hex":"#ddd8c2"},{"name":"Palm Lane","hex":"#7a7363"},{"name":"Palm Leaf","hex":"#36482f"},{"name":"Palm Springs Splash","hex":"#20887a"},{"name":"Palm Sugar Yellow","hex":"#edd69d"},{"name":"Palm Tree","hex":"#74b560"},{"name":"Palmerin","hex":"#577063"},{"name":"Palmetto","hex":"#6d9a9b"},{"name":"Palmetto Bluff","hex":"#ceb993"},{"name":"Palmito","hex":"#eaeacf"},{"name":"Palo Verde","hex":"#5f6356"},{"name":"Paloma","hex":"#9f9c99"},{"name":"Paloma Tan","hex":"#e9b679"},{"name":"Palomino","hex":"#bb7744"},{"name":"Palomino Gold","hex":"#daae00"},{"name":"Palomino Mane","hex":"#e6d6ba"},{"name":"Palomino Pony","hex":"#837871"},{"name":"Palomino Tan","hex":"#c2aa8d"},{"name":"Pampas","hex":"#eae4dc"},{"name":"Pampered Princess","hex":"#f5eaeb"},{"name":"Pan Purple","hex":"#657aef"},{"name":"Pan Tostado","hex":"#e8be99"},{"name":"Panache","hex":"#ebf7e4"},{"name":"Panache Pink","hex":"#edc9d5"},{"name":"Panama Rose","hex":"#c6577c"},{"name":"Pancake","hex":"#f7d788"},{"name":"Pancake Mix","hex":"#d7bfa6"},{"name":"Pancakes","hex":"#f5ddd8"},{"name":"Pancho","hex":"#dfb992"},{"name":"Pancotto Pugliese","hex":"#bfdb89"},{"name":"Panda","hex":"#544f3a"},{"name":"Panda Black","hex":"#3c4748"},{"name":"Panda White","hex":"#eae2d4"},{"name":"Pandanus","hex":"#616c44"},{"name":"Pandora","hex":"#71689a"},{"name":"Pandora Grey","hex":"#e3d4cf"},{"name":"Pandora\'s Box","hex":"#fedbb7"},{"name":"Panela","hex":"#9b5227"},{"name":"Pango Black","hex":"#4e4f6a"},{"name":"Pani Puri","hex":"#f4aa53"},{"name":"Pannikin","hex":"#7895cc"},{"name":"Panorama","hex":"#327a88"},{"name":"Panorama Blue","hex":"#35bdc8"},{"name":"Pansy","hex":"#f75394"},{"name":"Pansy Garden","hex":"#7f8fca"},{"name":"Pansy Petal","hex":"#5f4561"},{"name":"Pansy Posie","hex":"#bfa7b6"},{"name":"Pansy Posy","hex":"#bca3b4"},{"name":"Pansy Purple","hex":"#78184a"},{"name":"Pantomime","hex":"#adafba"},{"name":"Paolo Veronese Green","hex":"#009b7d"},{"name":"Paparazzi","hex":"#5a4a64"},{"name":"Paparazzi Flash","hex":"#c6cbd1"},{"name":"Papaya","hex":"#fe985c"},{"name":"Papaya Punch","hex":"#fca07f"},{"name":"Papaya Sorbet","hex":"#ffeac5"},{"name":"Papaya Whip","hex":"#ffd1af"},{"name":"Papaya Yellow Green","hex":"#bea932"},{"name":"Paper Brown","hex":"#d7ac7f"},{"name":"Paper Daisy","hex":"#f0e5c7"},{"name":"Paper Dog","hex":"#d6c5a9"},{"name":"Paper Elephant","hex":"#c5d0e6"},{"name":"Paper Goat","hex":"#b1a99f"},{"name":"Paper Heart","hex":"#f7dbc7"},{"name":"Paper Hearts","hex":"#cc4466"},{"name":"Paper Lamb","hex":"#f2ebe1"},{"name":"Paper Lantern","hex":"#f2e0c4"},{"name":"Paper Moon","hex":"#ead4a6"},{"name":"Paper Plane","hex":"#f1ece0"},{"name":"Paper Sack","hex":"#b4a07a"},{"name":"Paper Tiger","hex":"#fdf1af"},{"name":"Paper White","hex":"#eef0f3"},{"name":"Paperboy\'s Lawn","hex":"#249148"},{"name":"Paperwhite","hex":"#f6efdf"},{"name":"Papier Blanc","hex":"#efeadc"},{"name":"Papilio Argeotus","hex":"#8590ae"},{"name":"Pappardelle Noodle","hex":"#f9ebcc"},{"name":"Paprika","hex":"#7c2d37"},{"name":"Paprika Kisses","hex":"#c24325"},{"name":"Papyrus","hex":"#999911"},{"name":"Papyrus Map","hex":"#c0ac92"},{"name":"Papyrus Paper","hex":"#f5edd6"},{"name":"Par Four","hex":"#507069"},{"name":"Par Four Green","hex":"#3f8f45"},{"name":"Parachute","hex":"#beb755"},{"name":"Parachute Purple","hex":"#362852"},{"name":"Parachute Silk","hex":"#ffe2b5"},{"name":"Parachuting","hex":"#00589b"},{"name":"Paradise","hex":"#def1ea"},{"name":"Paradise Bird","hex":"#ff8c55"},{"name":"Paradise City","hex":"#5f7475"},{"name":"Paradise Found","hex":"#83988c"},{"name":"Paradise Grape","hex":"#746565"},{"name":"Paradise Green","hex":"#a3e493"},{"name":"Paradise Island","hex":"#5aa7a0"},{"name":"Paradise Landscape","hex":"#009494"},{"name":"Paradise of Greenery","hex":"#398749"},{"name":"Paradise Palms","hex":"#006622"},{"name":"Paradise Pink","hex":"#e4445e"},{"name":"Paradise Sky","hex":"#66c6d0"},{"name":"Paradiso","hex":"#488084"},{"name":"Parador Inn","hex":"#a99a8a"},{"name":"Parador Stone","hex":"#908d86"},{"name":"Parakeet","hex":"#78ae48"},{"name":"Parakeet Blue","hex":"#7eb6ff"},{"name":"Parakeet Green","hex":"#1aa36d"},{"name":"Parakeet Pete","hex":"#cbd3c6"},{"name":"Paramount","hex":"#5b6161"},{"name":"Parasailing","hex":"#007d7c"},{"name":"Parasite Brown","hex":"#914b13"},{"name":"Parasol","hex":"#e9dfde"},{"name":"Parauri Brown","hex":"#824a53"},{"name":"Parchment","hex":"#fefcaf"},{"name":"Parchment Paper","hex":"#f0e7d8"},{"name":"Parchment White","hex":"#f9eae5"},{"name":"Parfait","hex":"#c8a6a1"},{"name":"Parfait d\'Amour","hex":"#734f96"},{"name":"Parfait Pink","hex":"#e4b4c4"},{"name":"Paris","hex":"#91a7bc"},{"name":"Paris Blue","hex":"#b7dded"},{"name":"Paris Creek","hex":"#888873"},{"name":"Paris Daisy","hex":"#fbeb50"},{"name":"Paris Green","hex":"#50c87c"},{"name":"Paris M","hex":"#312760"},{"name":"Paris Paving","hex":"#737274"},{"name":"Paris Pink","hex":"#da6d91"},{"name":"Paris White","hex":"#bfcdc0"},{"name":"Parisian Blue","hex":"#4f7ca4"},{"name":"Parisian Cafe","hex":"#978478"},{"name":"Parisian Cafè","hex":"#a49085"},{"name":"Parisian Cashmere","hex":"#d1c7b8"},{"name":"Parisian Green","hex":"#6b9c42"},{"name":"Parisian Night","hex":"#323341"},{"name":"Parisian Patina","hex":"#7d9b89"},{"name":"Parisian Violet","hex":"#787093"},{"name":"Park Avenue","hex":"#465048"},{"name":"Park Bench","hex":"#537f6c"},{"name":"Park Green Flat","hex":"#88c9a6"},{"name":"Park Picnic","hex":"#428f46"},{"name":"Parkview","hex":"#46483e"},{"name":"Parkwater","hex":"#477bbd"},{"name":"Parlor Rose","hex":"#baa1b2"},{"name":"Parlour Blue","hex":"#465f7e"},{"name":"Parlour Red","hex":"#a12d5d"},{"name":"Parma Grey","hex":"#806e85"},{"name":"Parma Ham","hex":"#f89882"},{"name":"Parma Mauve","hex":"#5f5680"},{"name":"Parma Plum Red","hex":"#5e3958"},{"name":"Parma Violet","hex":"#55455a"},{"name":"Parmentier","hex":"#887cab"},{"name":"Parmesan","hex":"#ffffdd"},{"name":"Parrot Green","hex":"#8db051"},{"name":"Parrot Pink","hex":"#d998a0"},{"name":"Parrot Tulip","hex":"#eebfd5"},{"name":"Parsley","hex":"#305d35"},{"name":"Parsley Green","hex":"#5a9f4d"},{"name":"Parsley Sprig","hex":"#3d7049"},{"name":"Parsnip","hex":"#d6c69a"},{"name":"Parsnip Root","hex":"#9d892e"},{"name":"Partial Pink","hex":"#ffedf8"},{"name":"Particle Cannon","hex":"#def3e6"},{"name":"Particle Ioniser Red","hex":"#cb3215"},{"name":"Particular Mint","hex":"#d0d2c5"},{"name":"Partly Cloudy","hex":"#9dbbcd"},{"name":"Partridge","hex":"#844c44"},{"name":"Partridge Grey","hex":"#919098"},{"name":"Partridge Knoll","hex":"#a9875b"},{"name":"Party Hat","hex":"#cac1e2"},{"name":"Party Pig","hex":"#ee99ff"},{"name":"Party Time","hex":"#d0252f"},{"name":"Partytime","hex":"#e3a9c4"},{"name":"Pasadena Rose","hex":"#a84a49"},{"name":"Paseo Verde","hex":"#929178"},{"name":"Pasha Brown","hex":"#c3b7a4"},{"name":"Pasilla Chiles","hex":"#44413b"},{"name":"Paspalum Grass","hex":"#b9bd97"},{"name":"Pass Time Blue","hex":"#5d98b3"},{"name":"Passementerie","hex":"#eed786"},{"name":"Passion Flower","hex":"#6f5698"},{"name":"Passion for Revenge","hex":"#dd0d06"},{"name":"Passion Fruit","hex":"#907895"},{"name":"Passion Fruit Punch","hex":"#e8aa9d"},{"name":"Passion Plum","hex":"#9c5f77"},{"name":"Passion Potion","hex":"#e398af"},{"name":"Passion Razz","hex":"#59355e"},{"name":"Passionate Blue","hex":"#1f3465"},{"name":"Passionate Blueberry","hex":"#334159"},{"name":"Passionate Pause","hex":"#edefcb"},{"name":"Passionate Pink","hex":"#dd00cc"},{"name":"Passionate Plum","hex":"#753a58"},{"name":"Passionate Purple","hex":"#882299"},{"name":"Passionfruit Mauve","hex":"#513e49"},{"name":"Passive","hex":"#cbccc9"},{"name":"Passive Pink","hex":"#dba29e"},{"name":"Passive Royal","hex":"#795365"},{"name":"Pasta","hex":"#f7dfaf"},{"name":"Pasta Luego","hex":"#fae17f"},{"name":"Pasta Rasta","hex":"#eec474"},{"name":"Pastel Blue","hex":"#a2bffe"},{"name":"Pastel Brown","hex":"#836953"},{"name":"Pastel China","hex":"#f0e4e0"},{"name":"Pastel Day","hex":"#dfd8e1"},{"name":"Pastel de Nata","hex":"#f2c975"},{"name":"Pastel Green","hex":"#77dd77"},{"name":"Pastel Grey","hex":"#cfcfc4"},{"name":"Pastel Grey Green","hex":"#bccbb9"},{"name":"Pastel Jade","hex":"#d2f0e0"},{"name":"Pastel Lavender","hex":"#d8a1c4"},{"name":"Pastel Lilac","hex":"#bdb0d0"},{"name":"Pastel Lime","hex":"#b9d786"},{"name":"Pastel Magenta","hex":"#f49ac2"},{"name":"Pastel Meadow","hex":"#a9c9af"},{"name":"Pastel Mint","hex":"#cef0cc"},{"name":"Pastel Mint Green","hex":"#add0b3"},{"name":"Pastel Moon Creme","hex":"#fff5d9"},{"name":"Pastel Orange","hex":"#ff964f"},{"name":"Pastel Parchment","hex":"#dbccc3"},{"name":"Pastel Pea","hex":"#bee7a5"},{"name":"Pastel Peach","hex":"#f1caad"},{"name":"Pastel Pink","hex":"#dea5a4"},{"name":"Pastel Purple","hex":"#b39eb5"},{"name":"Pastel Red","hex":"#ff6961"},{"name":"Pastel Rose Tan","hex":"#e4c5b0"},{"name":"Pastel Sand","hex":"#d5c6b4"},{"name":"Pastel Smirk","hex":"#deece1"},{"name":"Pastel Strawberry","hex":"#ef4f4c"},{"name":"Pastel Turquoise","hex":"#99c5c4"},{"name":"Pastel Violet","hex":"#cb99c9"},{"name":"Pastel Yellow","hex":"#fdfd96"},{"name":"Pastoral","hex":"#edfad9"},{"name":"Pastrami","hex":"#e87175"},{"name":"Pastry","hex":"#f8deb8"},{"name":"Pastry Dough","hex":"#faedd5"},{"name":"Pastry Pink","hex":"#f8e1d0"},{"name":"Pastry Shell","hex":"#b77d58"},{"name":"Pasture Green","hex":"#506351"},{"name":"Patch of Land","hex":"#225511"},{"name":"Patches","hex":"#8a7d6b"},{"name":"Patchwork Pink","hex":"#c4a89e"},{"name":"Patchwork Plum","hex":"#7e696a"},{"name":"Paternoster","hex":"#c7c7c6"},{"name":"Path to the Sky","hex":"#c4eee8"},{"name":"Pathway","hex":"#dbd6d2"},{"name":"Patience","hex":"#e6ddd6"},{"name":"Patient Pink","hex":"#ffaba5"},{"name":"Patient White","hex":"#ede2de"},{"name":"Patina","hex":"#639283"},{"name":"Patina Creek","hex":"#b6c4bd"},{"name":"Patina Green","hex":"#b9eab3"},{"name":"Patina Violet","hex":"#695a67"},{"name":"Patio Green","hex":"#3f5a50"},{"name":"Patio Stone","hex":"#6b655b"},{"name":"Patisserie","hex":"#eddbc8"},{"name":"Patriarch","hex":"#800070"},{"name":"Patrice","hex":"#8cd9a1"},{"name":"Patrician Purple","hex":"#72527f"},{"name":"Patrinia Flowers","hex":"#d9b611"},{"name":"Patrinia Scabiosaefolia","hex":"#f2f2b0"},{"name":"Patriot Blue","hex":"#3c3c5f"},{"name":"Pattens Blue","hex":"#d3e5ef"},{"name":"Pattipan","hex":"#bcc6b1"},{"name":"Pattypan","hex":"#edb80f"},{"name":"Pāua","hex":"#2a2551"},{"name":"Pāua Shell","hex":"#245056"},{"name":"Pauley","hex":"#629191"},{"name":"Pauper","hex":"#343445"},{"name":"Paved Path","hex":"#828782"},{"name":"Paved With Gold","hex":"#e8d284"},{"name":"Pavement","hex":"#554f53"},{"name":"Pavestone","hex":"#c9c4ba"},{"name":"Pavilion","hex":"#bebf84"},{"name":"Pavilion Beige","hex":"#c5b6a4"},{"name":"Pavilion Peach","hex":"#df9c45"},{"name":"Pavillion","hex":"#ede4d4"},{"name":"Paving Stone","hex":"#a8a498"},{"name":"Paving Stones","hex":"#cbccc4"},{"name":"Pavlova","hex":"#baab87"},{"name":"Paw Paw","hex":"#fbd49c"},{"name":"Paw Print","hex":"#827a6d"},{"name":"Pawn Broker","hex":"#473430"},{"name":"Pax","hex":"#c8c6da"},{"name":"Payne\'s Grey","hex":"#536878"},{"name":"PCB Green","hex":"#002d04"},{"name":"Pea","hex":"#a4bf20"},{"name":"Pea Aubergine Green","hex":"#7c9865"},{"name":"Pea Case","hex":"#709d3d"},{"name":"Pea Green","hex":"#8eab12"},{"name":"Pea Soup","hex":"#929901"},{"name":"Pea Soup Green","hex":"#94a617"},{"name":"Peabody","hex":"#3f7074"},{"name":"Peace","hex":"#a2b2bd"},{"name":"Peace & Quiet","hex":"#e0dac8"},{"name":"Peace of Mind","hex":"#c1875f"},{"name":"Peace River","hex":"#a8bfcc"},{"name":"Peace Yellow","hex":"#eecf9e"},{"name":"Peaceable Kingdom","hex":"#ddccac"},{"name":"Peaceful Blue","hex":"#9ab6c0"},{"name":"Peaceful Glade","hex":"#878e83"},{"name":"Peaceful Night","hex":"#d6e7e3"},{"name":"Peaceful Pastures","hex":"#94d8ac"},{"name":"Peaceful Peach","hex":"#ffddcd"},{"name":"Peaceful Pond","hex":"#579797"},{"name":"Peaceful Purple","hex":"#660088"},{"name":"Peaceful Rain","hex":"#f1fbf1"},{"name":"Peaceful River","hex":"#47a0d2"},{"name":"Peach","hex":"#ffb07c"},{"name":"Peach A La Mode","hex":"#efc9aa"},{"name":"Peach Amber","hex":"#fb9f93"},{"name":"Peach Ash","hex":"#efc4bb"},{"name":"Peach Beach","hex":"#fdcfa1"},{"name":"Peach Beauty","hex":"#e7c3ab"},{"name":"Peach Beige","hex":"#cd9489"},{"name":"Peach Bellini","hex":"#fedcad"},{"name":"Peach Bloom","hex":"#d89a78"},{"name":"Peach Blossom","hex":"#dc7a83"},{"name":"Peach Blossom Red","hex":"#eecfbf"},{"name":"Peach Blush","hex":"#dcbeb5"},{"name":"Peach Breeze","hex":"#ffece5"},{"name":"Peach Brick","hex":"#e5ccbd"},{"name":"Peach Bud","hex":"#fdb2ab"},{"name":"Peach Buff","hex":"#cc99bb"},{"name":"Peach Burst","hex":"#f39998"},{"name":"Peach Butter","hex":"#ffac3a"},{"name":"Peach Caramel","hex":"#c56a3d"},{"name":"Peach Cider","hex":"#ffd9aa"},{"name":"Peach Cloud","hex":"#fce2d8"},{"name":"Peach Cobbler","hex":"#ffa167"},{"name":"Peach Crayon","hex":"#ffcba7"},{"name":"Peach Cream","hex":"#fff0db"},{"name":"Peach Crème Brûlée","hex":"#ffe19d"},{"name":"Peach Damask","hex":"#f6c4a6"},{"name":"Peach Darling","hex":"#efcdb4"},{"name":"Peach Dip","hex":"#f4debf"},{"name":"Peach Dunes","hex":"#b3695f"},{"name":"Peach Dust","hex":"#f0d8cc"},{"name":"Peach Echo","hex":"#f6725c"},{"name":"Peach Everlasting","hex":"#f4e2d4"},{"name":"Peach Fade","hex":"#fce9d6"},{"name":"Peach Fizz","hex":"#ffa883"},{"name":"Peach Flower","hex":"#e198b4"},{"name":"Peach Fury","hex":"#f88435"},{"name":"Peach Fuzz","hex":"#ffc7b9"},{"name":"Peach Glamour","hex":"#ebd7d3"},{"name":"Peach Glow","hex":"#ffdcac"},{"name":"Peach Juice","hex":"#ffcfab"},{"name":"Peach Kiss","hex":"#fbe2cd"},{"name":"Peach Latte","hex":"#e7c19f"},{"name":"Peach Macaron","hex":"#c67464"},{"name":"Peach Melba","hex":"#fbbdaf"},{"name":"Peach Mimosa","hex":"#f4a28c"},{"name":"Peach Nectar","hex":"#ffae96"},{"name":"Peach Nirvana","hex":"#edb48f"},{"name":"Peach Nougat","hex":"#e3a385"},{"name":"Peach of Mind","hex":"#ffe2b4"},{"name":"Peach Orange","hex":"#ffcc99"},{"name":"Peach Parfait","hex":"#f6b895"},{"name":"Peach Patch","hex":"#f3d5a1"},{"name":"Peach Pearl","hex":"#ffb2a5"},{"name":"Peach Pink","hex":"#ff9a8a"},{"name":"Peach Poppy","hex":"#ddaaaa"},{"name":"Peach Powder","hex":"#e2bdb3"},{"name":"Peach Preserve","hex":"#d29487"},{"name":"Peach Puff","hex":"#ffdab9"},{"name":"Peach Punch","hex":"#f59997"},{"name":"Peach Puree","hex":"#efcfba"},{"name":"Peach Purée","hex":"#eed0b6"},{"name":"Peach Quartz","hex":"#f4b087"},{"name":"Peach Red","hex":"#f9cdc4"},{"name":"Peach Rose","hex":"#f6e3d5"},{"name":"Peach Sachet","hex":"#f6d9c9"},{"name":"Peach Schnapps","hex":"#ffdcd6"},{"name":"Peach Scone","hex":"#ffbcbc"},{"name":"Peach Shortcake","hex":"#f3dfd4"},{"name":"Peach Smoothie","hex":"#ffe5bd"},{"name":"Peach Souffle","hex":"#ecbcb2"},{"name":"Peach Surprise","hex":"#f3e3d1"},{"name":"Peach Taffy","hex":"#f3b68e"},{"name":"Peach Temptation","hex":"#f2c5b2"},{"name":"Peach Tile","hex":"#efa498"},{"name":"Peach Tone","hex":"#f2e3dc"},{"name":"Peach Umbrella","hex":"#f9e8ce"},{"name":"Peach Velour","hex":"#f7b28b"},{"name":"Peach Whip","hex":"#d8b6b0"},{"name":"Peach Yellow","hex":"#fadfad"},{"name":"Peach\'s Daydream","hex":"#fd9b88"},{"name":"Peachade","hex":"#fadfc7"},{"name":"Peaches à La Crème","hex":"#ffa361"},{"name":"Peaches of Immortality","hex":"#d98586"},{"name":"Peaches\'n\'Cream","hex":"#eec9a6"},{"name":"Peachskin","hex":"#ddb3b2"},{"name":"Peachtree","hex":"#f3ddcd"},{"name":"Peachy","hex":"#ffa67a"},{"name":"Peachy Bon-Bon","hex":"#ffd2b9"},{"name":"Peachy Breezes","hex":"#ffc996"},{"name":"Peachy Confection","hex":"#d4a88d"},{"name":"Peachy Ethereal","hex":"#fde0dc"},{"name":"Peachy Feeling","hex":"#ed8666"},{"name":"Peachy Keen","hex":"#ffdeda"},{"name":"Peachy Maroney","hex":"#e8956b"},{"name":"Peachy Milk","hex":"#f3e0d8"},{"name":"Peachy Pico","hex":"#ffccaa"},{"name":"Peachy Pinky","hex":"#ff775e"},{"name":"Peachy Salmon","hex":"#ff9b80"},{"name":"Peachy Sand","hex":"#ffdcb7"},{"name":"Peachy Scene","hex":"#dd7755"},{"name":"Peachy Skin","hex":"#f0cfa0"},{"name":"Peachy Summer Skies","hex":"#ffd9a8"},{"name":"Peachy Tint","hex":"#e3a381"},{"name":"Peachy-Kini","hex":"#f1bf92"},{"name":"Peacoat","hex":"#2d3146"},{"name":"Peacock Blue","hex":"#016795"},{"name":"Peacock Feather","hex":"#12939a"},{"name":"Peacock Green","hex":"#006a50"},{"name":"Peacock Plume","hex":"#206d71"},{"name":"Peacock Pride","hex":"#006663"},{"name":"Peacock Purple","hex":"#513843"},{"name":"Peacock Silk","hex":"#6da893"},{"name":"Peacock Tail","hex":"#01636d"},{"name":"Peahen","hex":"#719e8a"},{"name":"Peak Point","hex":"#768083"},{"name":"Peak Season","hex":"#ffdfc9"},{"name":"Peanut","hex":"#7a4434"},{"name":"Peanut Brittle","hex":"#a6893a"},{"name":"Peanut Butter","hex":"#be893f"},{"name":"Peanut Butter Biscuit","hex":"#f7b565"},{"name":"Peanut Butter Chicken","hex":"#ffb75f"},{"name":"Peanut Butter Crust","hex":"#c8a38a"},{"name":"Peanut Butter Jelly","hex":"#ce4a2d"},{"name":"Peapod","hex":"#82b185"},{"name":"Peapod Green","hex":"#8e916d"},{"name":"Pear","hex":"#d1e231"},{"name":"Pear Cactus","hex":"#91af88"},{"name":"Pear Perfume","hex":"#ccdd99"},{"name":"Pear Sorbet","hex":"#f3eac3"},{"name":"Pear Spritz","hex":"#cbf85f"},{"name":"Pear Tint","hex":"#e3de92"},{"name":"Pearl","hex":"#eae0c8"},{"name":"Pearl Aqua","hex":"#88d8c0"},{"name":"Pearl Ash","hex":"#d0c9c3"},{"name":"Pearl Bay","hex":"#7fc6cc"},{"name":"Pearl Blackberry","hex":"#76727f"},{"name":"Pearl Blue","hex":"#79b4c9"},{"name":"Pearl Blush","hex":"#f4cec5"},{"name":"Pearl Brite","hex":"#e6e6e3"},{"name":"Pearl Bush","hex":"#ded1c6"},{"name":"Pearl City","hex":"#dce4e9"},{"name":"Pearl Drops","hex":"#f0ebe4"},{"name":"Pearl Dust","hex":"#efe5d9"},{"name":"Pearl Grey","hex":"#cbcec5"},{"name":"Pearl Lusta","hex":"#eae1c8"},{"name":"Pearl Necklace","hex":"#fcf7eb"},{"name":"Pearl Onion","hex":"#eeefe1"},{"name":"Pearl Oyster","hex":"#ddd6cb"},{"name":"Pearl Pebble","hex":"#ded7da"},{"name":"Pearl Powder","hex":"#faffed"},{"name":"Pearl Rose","hex":"#dfd3d4"},{"name":"Pearl Sugar","hex":"#f4f1eb"},{"name":"Pearl Violet","hex":"#e6e0e3"},{"name":"Pearl White","hex":"#f3f2ed"},{"name":"Pearl Yellow","hex":"#f1e3bc"},{"name":"Pearled Couscous","hex":"#f2e9d5"},{"name":"Pearled Ivory","hex":"#f0dfcc"},{"name":"Pearls & Lace","hex":"#dcd0cb"},{"name":"Pearls and Lace","hex":"#eee7dc"},{"name":"Pearly","hex":"#f4e3df"},{"name":"Pearly Pink","hex":"#ee99cc"},{"name":"Pearly Purple","hex":"#b768a2"},{"name":"Pearly Putty","hex":"#dbd3bd"},{"name":"Pearly Star","hex":"#e4e4da"},{"name":"Pearly Swirly","hex":"#eee9d8"},{"name":"Pearly White","hex":"#feefd3"},{"name":"Peas in a Pod","hex":"#7b9459"},{"name":"Peas In A Pod","hex":"#a9d689"},{"name":"Peas Please","hex":"#8c7f3c"},{"name":"Peaslake","hex":"#8caa95"},{"name":"Peat","hex":"#766d52"},{"name":"Peat Brown","hex":"#5a3d29"},{"name":"Peat Moss","hex":"#4a352b"},{"name":"Peat Red Brown","hex":"#6c5755"},{"name":"Peat Swamp Forest","hex":"#988c75"},{"name":"Peaty Brown","hex":"#552211"},{"name":"Pebble","hex":"#9d9880"},{"name":"Pebble Beach","hex":"#7f8285"},{"name":"Pebble Cream","hex":"#f3e1ca"},{"name":"Pebble Path","hex":"#d5bc94"},{"name":"Pebble Soft Blue White","hex":"#d3d7dc"},{"name":"Pebble Stone","hex":"#e0d9da"},{"name":"Pebble Walk","hex":"#afb2a7"},{"name":"Pebblebrook","hex":"#d8d0bc"},{"name":"Pebbled Courtyard","hex":"#decab9"},{"name":"Pebbled Path","hex":"#a0968d"},{"name":"Pebbled Shore","hex":"#dbd5ca"},{"name":"Pebbles","hex":"#ded8dc"},{"name":"Pecan","hex":"#b17d64"},{"name":"Pecan Brown","hex":"#a67253"},{"name":"Pecan Sandie","hex":"#f4decb"},{"name":"Pecan Veneer","hex":"#e09f78"},{"name":"Peche","hex":"#fddcb7"},{"name":"Pecos Spice","hex":"#e1a080"},{"name":"Peculiarly Drab Tincture","hex":"#c5af91"},{"name":"Pedestrian Green","hex":"#00bb22"},{"name":"Pedestrian Lemon","hex":"#ffff22"},{"name":"Pedestrian Red","hex":"#cc1122"},{"name":"Pedigree","hex":"#31646e"},{"name":"Pedigrey","hex":"#8f8e8c"},{"name":"Pediment","hex":"#d3ccc4"},{"name":"Peek a Blue","hex":"#c5e1e1"},{"name":"Peekaboo","hex":"#e6dee6"},{"name":"Peeled Asparagus","hex":"#87a96b"},{"name":"Peeps","hex":"#ffcf38"},{"name":"Peevish Red","hex":"#ff2266"},{"name":"Pegasus","hex":"#e8e9e4"},{"name":"Pegeen Peony","hex":"#ea9fb4"},{"name":"Pekin Chicken","hex":"#f5d2ac"},{"name":"Pelagic","hex":"#355d83"},{"name":"Pelati","hex":"#ff3333"},{"name":"Pelican","hex":"#c1bcac"},{"name":"Pelican Bay","hex":"#9eacb1"},{"name":"Pelican Bill","hex":"#d7c0c7"},{"name":"Pelican Feather","hex":"#e8c3c2"},{"name":"Pelican Pecker","hex":"#fb9a30"},{"name":"Pelican Pink","hex":"#e2a695"},{"name":"Pelican Tan","hex":"#c8a481"},{"name":"Pelorus","hex":"#2599b2"},{"name":"Pencil Eraser","hex":"#dbb7bb"},{"name":"Pencil Lead","hex":"#5c6274"},{"name":"Pencil Point","hex":"#595d61"},{"name":"Pencil Sketch","hex":"#999d9e"},{"name":"Pendula Garden","hex":"#7b8267"},{"name":"Penelope","hex":"#e3e3eb"},{"name":"Penelope Pink","hex":"#9d6984"},{"name":"Peninsula","hex":"#37799c"},{"name":"Penna","hex":"#b9c8e0"},{"name":"Pennywise","hex":"#a2583a"},{"name":"Pensive","hex":"#c2c1cb"},{"name":"Pensive Pink","hex":"#eab6ad"},{"name":"Pentagon","hex":"#96ccd1"},{"name":"Pentalon","hex":"#dbb2bc"},{"name":"Penthouse View","hex":"#cabfb3"},{"name":"Penzance","hex":"#627e75"},{"name":"Peony","hex":"#eb8f9d"},{"name":"Peony Blush","hex":"#d8c1be"},{"name":"Peony Mauve","hex":"#9f86b7"},{"name":"Peony Pink","hex":"#e38c7f"},{"name":"Peony Prize","hex":"#faddd4"},{"name":"People\'s Choice","hex":"#b6a8d0"},{"name":"Pepper & Spice","hex":"#b75754"},{"name":"Pepper Grass","hex":"#7c9d47"},{"name":"Pepper Green","hex":"#007d58"},{"name":"Pepper Jelly","hex":"#cc2244"},{"name":"Pepper Mill","hex":"#777568"},{"name":"Pepper Spice","hex":"#8e7059"},{"name":"Pepper Sprout","hex":"#7e9242"},{"name":"Pepperberry","hex":"#c79d9b"},{"name":"Peppercorn","hex":"#725c5b"},{"name":"Peppercorn Red","hex":"#533d44"},{"name":"Peppercorn Rent","hex":"#4f4337"},{"name":"Peppered Moss","hex":"#807548"},{"name":"Peppered Pecan","hex":"#957d6f"},{"name":"Peppergrass","hex":"#767461"},{"name":"Peppermint","hex":"#d7e7d0"},{"name":"Peppermint Bar","hex":"#81bca8"},{"name":"Peppermint Fresh","hex":"#64be9f"},{"name":"Peppermint Frosting","hex":"#b8ffeb"},{"name":"Peppermint Patty","hex":"#d1e6d5"},{"name":"Peppermint Pie","hex":"#aac7c1"},{"name":"Peppermint Spray","hex":"#90cbaa"},{"name":"Peppermint Stick","hex":"#e8b9be"},{"name":"Peppermint Toad","hex":"#009933"},{"name":"Peppermint Twist","hex":"#96ced5"},{"name":"Pepperoncini","hex":"#d8c553"},{"name":"Pepperoni","hex":"#aa4400"},{"name":"Peppery","hex":"#5b5752"},{"name":"Peppy","hex":"#72d7b7"},{"name":"Peppy Peacock","hex":"#55ccbb"},{"name":"Peppy Pineapple","hex":"#ffff44"},{"name":"Peptalk","hex":"#0060a6"},{"name":"Pepto","hex":"#e8a2b9"},{"name":"Pêra Rocha","hex":"#a3ce27"},{"name":"Perano","hex":"#acb9e8"},{"name":"Percale","hex":"#f0e8dd"},{"name":"Perdu Pink","hex":"#c1ada9"},{"name":"Perennial Blue","hex":"#a4bbd3"},{"name":"Perennial Garden","hex":"#87a56f"},{"name":"Perennial Gold","hex":"#caaf81"},{"name":"Perennial Green","hex":"#47694f"},{"name":"Perennial Phlox","hex":"#e6a7ac"},{"name":"Perfect Dark","hex":"#313390"},{"name":"Perfect Greige","hex":"#b7ab9f"},{"name":"Perfect Khaki","hex":"#b2a492"},{"name":"Perfect Landing","hex":"#9eb2c3"},{"name":"Perfect Ocean","hex":"#3062a0"},{"name":"Perfect Pear","hex":"#e9e8bb"},{"name":"Perfect Penny","hex":"#a06a56"},{"name":"Perfect Periwinkle","hex":"#6487b0"},{"name":"Perfect Pink","hex":"#e5b3b2"},{"name":"Perfect Sky","hex":"#4596cf"},{"name":"Perfect Solution","hex":"#f2edd7"},{"name":"Perfect Storm","hex":"#9598a1"},{"name":"Perfect Tan","hex":"#cbac88"},{"name":"Perfect Taupe","hex":"#b6aca0"},{"name":"Perfect White","hex":"#f0eeee"},{"name":"Perfection","hex":"#d9d6e5"},{"name":"Perfectly Purple","hex":"#694878"},{"name":"Perfectly Purple Place","hex":"#cc22aa"},{"name":"Perfume","hex":"#c2a9db"},{"name":"Perfume Cloud","hex":"#e2c9ce"},{"name":"Perfume Haze","hex":"#f3e9f7"},{"name":"Pergament","hex":"#bfa58a"},{"name":"Pergament Shreds","hex":"#e4e0dc"},{"name":"Pergola Panorama","hex":"#e1e9db"},{"name":"Peri Peri","hex":"#c62d2c"},{"name":"Pericallis Hybrida","hex":"#904fef"},{"name":"Peridot","hex":"#e6e200"},{"name":"Periglacial Blue","hex":"#acb6b2"},{"name":"Périgord Truffle","hex":"#524a46"},{"name":"Periscope","hex":"#52677b"},{"name":"Peristyle Brass","hex":"#ae905e"},{"name":"Periwinkle","hex":"#8e82fe"},{"name":"Periwinkle Blossom","hex":"#8b9ab9"},{"name":"Periwinkle Blue","hex":"#8f99fb"},{"name":"Periwinkle Bud","hex":"#b4c4de"},{"name":"Periwinkle Dusk","hex":"#8d9db3"},{"name":"Periwinkle Grey","hex":"#c3cde6"},{"name":"Periwinkle Powder","hex":"#c5cbe1"},{"name":"Periwinkle Sky","hex":"#8cb7d7"},{"name":"Periwinkle Tint","hex":"#d3ddd6"},{"name":"Perk Up","hex":"#d6c7be"},{"name":"Perky","hex":"#408e7c"},{"name":"Perky Tint","hex":"#fbf4d3"},{"name":"Perky Yellow","hex":"#f2ca83"},{"name":"Perle Noir","hex":"#4f4d51"},{"name":"Permafrost","hex":"#98eff9"},{"name":"Permanent Geranium Lake","hex":"#e12c2c"},{"name":"Permanent Green","hex":"#005437"},{"name":"Perpetual Purple","hex":"#584d75"},{"name":"Perplexed","hex":"#bdb3c3"},{"name":"Perrigloss Tan","hex":"#ddaa99"},{"name":"Perrywinkle","hex":"#8f8ce7"},{"name":"Perseverance","hex":"#acb3c7"},{"name":"Persian Bazaar","hex":"#c5988c"},{"name":"Persian Belt","hex":"#99ac4b"},{"name":"Persian Blinds","hex":"#e3e1cc"},{"name":"Persian Blue","hex":"#1c39bb"},{"name":"Persian Delight","hex":"#efcada"},{"name":"Persian Fable","hex":"#d4ebdd"},{"name":"Persian Flatbread","hex":"#e1c7a8"},{"name":"Persian Gold","hex":"#9b7939"},{"name":"Persian Green","hex":"#00a693"},{"name":"Persian Indigo","hex":"#32127a"},{"name":"Persian Jewel","hex":"#6a7dbc"},{"name":"Persian Luxury Purple","hex":"#990077"},{"name":"Persian Melon","hex":"#ffdcbf"},{"name":"Persian Mosaic","hex":"#206874"},{"name":"Persian Orange","hex":"#d99058"},{"name":"Persian Pastel","hex":"#aa9499"},{"name":"Persian Pink","hex":"#f77fbe"},{"name":"Persian Plum","hex":"#701c1c"},{"name":"Persian Plush","hex":"#575b93"},{"name":"Persian Prince","hex":"#38343e"},{"name":"Persian Red","hex":"#cc3333"},{"name":"Persian Rose","hex":"#fe28a2"},{"name":"Persian Violet","hex":"#8c8eb2"},{"name":"Persicus","hex":"#ffb49b"},{"name":"Persimmon","hex":"#e59b34"},{"name":"Persimmon Fade","hex":"#f7bd8f"},{"name":"Persimmon Juice","hex":"#934337"},{"name":"Persimmon Orange","hex":"#f47327"},{"name":"Persimmon Red","hex":"#a74e4a"},{"name":"Persimmon Varnish","hex":"#9f563a"},{"name":"Perspective","hex":"#cebeda"},{"name":"Persuasion","hex":"#c4ae96"},{"name":"Peru","hex":"#cd853f"},{"name":"Peruvian Lily","hex":"#cd7db5"},{"name":"Peruvian Soil","hex":"#733d1f"},{"name":"Peruvian Violet","hex":"#7b7284"},{"name":"Pervenche","hex":"#0099ee"},{"name":"Pestering Pesto","hex":"#119922"},{"name":"Pestilence","hex":"#9f8303"},{"name":"Pesto","hex":"#c1b23e"},{"name":"Pesto Alla Genovese","hex":"#558800"},{"name":"Pesto Calabrese","hex":"#f49325"},{"name":"Pesto di Noce","hex":"#b09d64"},{"name":"Pesto di Pistacchio","hex":"#a7c437"},{"name":"Pesto di Rucola","hex":"#748a35"},{"name":"Pesto Genovese","hex":"#9dc249"},{"name":"Pesto Green","hex":"#817553"},{"name":"Pesto Paste","hex":"#898c66"},{"name":"Pesto Rosso","hex":"#bb3333"},{"name":"Pestulance","hex":"#aa9933"},{"name":"Petal Bloom","hex":"#f7d5da"},{"name":"Petal Dust","hex":"#f4dfcd"},{"name":"Petal of a Dying Rose","hex":"#9f0630"},{"name":"Petal Pink","hex":"#f4e5e0"},{"name":"Petal Plush","hex":"#ddaaee"},{"name":"Petal Poise","hex":"#f8e3ee"},{"name":"Petal Purple","hex":"#53465d"},{"name":"Petal Tip","hex":"#d9d9df"},{"name":"Petals Unfolding","hex":"#f3bbc0"},{"name":"Peter Pan","hex":"#19a700"},{"name":"Petit Four","hex":"#7fbad1"},{"name":"Petit Pink","hex":"#e9cdd8"},{"name":"Petite Orchid","hex":"#da9790"},{"name":"Petite Pink","hex":"#eacacb"},{"name":"Petite Purple","hex":"#cfbbd8"},{"name":"Petrel","hex":"#4076b4"},{"name":"Petrel Blue Grey","hex":"#a0aebc"},{"name":"Petrichor","hex":"#66cccc"},{"name":"Petrichor Brown","hex":"#6a4345"},{"name":"Petrified","hex":"#8b8680"},{"name":"Petrified Oak","hex":"#9b846c"},{"name":"Petrified Purple","hex":"#9c87c1"},{"name":"Petro Blue","hex":"#2f5961"},{"name":"Petrol","hex":"#005f6a"},{"name":"Petrol Green","hex":"#549b8c"},{"name":"Petrol Slumber","hex":"#243640"},{"name":"Petroleum","hex":"#21211d"},{"name":"Petticoat","hex":"#fecdac"},{"name":"Pettifers","hex":"#228822"},{"name":"Pettingill Sage","hex":"#88806a"},{"name":"Petula","hex":"#ffbab0"},{"name":"Petunia","hex":"#4d3466"},{"name":"Petunia Patty","hex":"#4b3c4b"},{"name":"Petunia Trail","hex":"#b8b0cf"},{"name":"Pewter","hex":"#91a092"},{"name":"Pewter Blue","hex":"#8ba8b7"},{"name":"Pewter Cast","hex":"#9b9893"},{"name":"Pewter Green","hex":"#5e6259"},{"name":"Pewter Grey","hex":"#a7a19e"},{"name":"Pewter Mug","hex":"#8b8283"},{"name":"Pewter Patter","hex":"#bab4a6"},{"name":"Pewter Ring","hex":"#8a8886"},{"name":"Pewter Tankard","hex":"#a39b90"},{"name":"Pewter Tray","hex":"#bdc5c0"},{"name":"Pewter Vase","hex":"#cececb"},{"name":"Peyote","hex":"#c5bbae"},{"name":"Pezzottaite","hex":"#d03b52"},{"name":"Phantom","hex":"#6e797b"},{"name":"Phantom Green","hex":"#d6e0d1"},{"name":"Phantom Hue","hex":"#645d5e"},{"name":"Phantom Mist","hex":"#4b4441"},{"name":"Phantom Ship","hex":"#2f3434"},{"name":"Pharaoh Purple","hex":"#636285"},{"name":"Pharaoh\'s Gem","hex":"#007367"},{"name":"Pharaoh\'s Jade","hex":"#83d1a9"},{"name":"Pharaoh\'s Seas","hex":"#59bbc2"},{"name":"Pharlap","hex":"#826663"},{"name":"Pharmaceutical Green","hex":"#087e34"},{"name":"Pharmacy Green","hex":"#005500"},{"name":"Phaser Beam","hex":"#ff4d00"},{"name":"Pheasant","hex":"#c17c54"},{"name":"Pheasant Brown","hex":"#795435"},{"name":"Pheasant\'s Egg","hex":"#e0dcd7"},{"name":"Phellodendron Amurense","hex":"#f3c13a"},{"name":"Phelps Putty","hex":"#c4bdad"},{"name":"Phenomenal Peach","hex":"#ffcba2"},{"name":"Phenomenal Pink","hex":"#ee55ff"},{"name":"Phenomenon","hex":"#3e729b"},{"name":"Pheromone Purple","hex":"#8822bb"},{"name":"Philanthropist Pink","hex":"#e2d9dd"},{"name":"Philippine Blue","hex":"#0038a7"},{"name":"Philippine Bronze","hex":"#6e3a07"},{"name":"Philippine Brown","hex":"#5d1916"},{"name":"Philippine Gold","hex":"#b17304"},{"name":"Philippine Golden Yellow","hex":"#eebb00"},{"name":"Philippine Green","hex":"#008543"},{"name":"Philippine Orange","hex":"#ff7300"},{"name":"Philippine Pink","hex":"#fa1a8e"},{"name":"Philippine Red","hex":"#ce1127"},{"name":"Philippine Violet","hex":"#81007f"},{"name":"Philippine Yellow","hex":"#fecb00"},{"name":"Philips Green","hex":"#008f80"},{"name":"Philodendron","hex":"#116356"},{"name":"Philosophical","hex":"#757b7d"},{"name":"Philosophically Speaking","hex":"#4d483d"},{"name":"Phlox","hex":"#df00ff"},{"name":"Phlox Flower Violet","hex":"#7f4f78"},{"name":"Phlox Pink","hex":"#ce5e9a"},{"name":"Phoenix Flames","hex":"#faa21a"},{"name":"Phoenix Fossil","hex":"#f8d99e"},{"name":"Phoenix Red","hex":"#e2725b"},{"name":"Phoenix Rising","hex":"#d2813a"},{"name":"Phoenix Villa","hex":"#f7efde"},{"name":"Phosphor Green","hex":"#00aa00"},{"name":"Phosphorescent Blue","hex":"#11eeee"},{"name":"Phosphorescent Green","hex":"#11ff00"},{"name":"Phosphorus","hex":"#a5d0c6"},{"name":"Photo Grey","hex":"#aead96"},{"name":"Photon Barrier","hex":"#88ddee"},{"name":"Photon Projector","hex":"#88eeff"},{"name":"Photon White","hex":"#f8f8e8"},{"name":"PHP Purple","hex":"#8892bf"},{"name":"Phthalo Blue","hex":"#000f89"},{"name":"Phthalo Green","hex":"#123524"},{"name":"Phuket Palette","hex":"#0480bd"},{"name":"Physalis","hex":"#ef9548"},{"name":"Physalis Aquarelle","hex":"#ebe1d4"},{"name":"Physalis Peal","hex":"#e1d8bb"},{"name":"Pianissimo","hex":"#e6d0ca"},{"name":"Piano Black","hex":"#17171a"},{"name":"Piano Brown","hex":"#5c4c4a"},{"name":"Piano Grey Rose","hex":"#cfc4c7"},{"name":"Piano Keys","hex":"#eee5d4"},{"name":"Piano Mauve","hex":"#9e8996"},{"name":"Picador","hex":"#765c52"},{"name":"Picante","hex":"#a04933"},{"name":"Picasso","hex":"#f8ea97"},{"name":"Picasso Lily","hex":"#634878"},{"name":"Piccadilly Grey","hex":"#625d5d"},{"name":"Piccadilly Purple","hex":"#51588e"},{"name":"Piccolo","hex":"#8bd2e2"},{"name":"Picholine","hex":"#566955"},{"name":"Picholine Olive","hex":"#958251"},{"name":"Picket Fence","hex":"#f3f2ea"},{"name":"Picket Fence White","hex":"#ebe7db"},{"name":"Pickford","hex":"#c9f0d1"},{"name":"Pickle","hex":"#85a16a"},{"name":"Pickle Juice","hex":"#bba528"},{"name":"Pickled","hex":"#b3a74b"},{"name":"Pickled Avocado","hex":"#99bb11"},{"name":"Pickled Bean","hex":"#6e4826"},{"name":"Pickled Beet","hex":"#542644"},{"name":"Pickled Beets","hex":"#aa0044"},{"name":"Pickled Bluewood","hex":"#314459"},{"name":"Pickled Capers","hex":"#695e4b"},{"name":"Pickled Cucumber","hex":"#94a135"},{"name":"Pickled Ginger","hex":"#ffdd55"},{"name":"Pickled Grape Leaves","hex":"#775500"},{"name":"Pickled Lemon","hex":"#ddcc11"},{"name":"Pickled Limes","hex":"#bbbb11"},{"name":"Pickled Okra","hex":"#887647"},{"name":"Pickled Pineapple","hex":"#eeff33"},{"name":"Pickled Pink","hex":"#da467d"},{"name":"Pickled Plum","hex":"#8e4785"},{"name":"Pickled Pork","hex":"#ddbbaa"},{"name":"Pickled Purple","hex":"#8e7aa1"},{"name":"Pickled Radish","hex":"#ee1144"},{"name":"Pickled Salmon","hex":"#ff6655"},{"name":"Pickling Spice","hex":"#cfd2b5"},{"name":"Picnic","hex":"#99c285"},{"name":"Picnic Bay","hex":"#bcdbd4"},{"name":"Picnic Day Sky","hex":"#00ccee"},{"name":"Pico Earth","hex":"#ab5236"},{"name":"Pico Eggplant","hex":"#7e2553"},{"name":"Pico Ivory","hex":"#fff1e8"},{"name":"Pico Metal","hex":"#c2c3c7"},{"name":"Pico Orange","hex":"#ffa300"},{"name":"Pico Sun","hex":"#ffec27"},{"name":"Pico Void","hex":"#1d2b53"},{"name":"Pico-8 Pink","hex":"#ff77a8"},{"name":"Picton Blue","hex":"#5ba0d0"},{"name":"Pictorial Carmine","hex":"#c30b4e"},{"name":"Picture Book Green","hex":"#00804c"},{"name":"Picture Perfect","hex":"#fbf2d1"},{"name":"Pie Crust","hex":"#f1d99f"},{"name":"Pie Safe","hex":"#877a64"},{"name":"Piece of Cake","hex":"#ede7c8"},{"name":"Pieces of Eight","hex":"#ffaf38"},{"name":"Pied Wagtail Grey","hex":"#bebdc2"},{"name":"Piedmont","hex":"#c2cec5"},{"name":"Piedra De Sol","hex":"#eac185"},{"name":"Pier","hex":"#88857d"},{"name":"Pier 17 Steel","hex":"#647d8e"},{"name":"Piercing Pink","hex":"#dd00ee"},{"name":"Piercing Red","hex":"#dd1122"},{"name":"Piermont Stone Red","hex":"#43232c"},{"name":"Pierogi","hex":"#f4d68c"},{"name":"Piezo Blue","hex":"#a1c8db"},{"name":"Pig Iron","hex":"#484848"},{"name":"Pig Pink","hex":"#fdd7e4"},{"name":"Pigeon","hex":"#a9afaa"},{"name":"Pigeon Grey","hex":"#c1b4a0"},{"name":"Pigeon Pink","hex":"#9d857f"},{"name":"Pigeon Post","hex":"#afbdd9"},{"name":"Piggy","hex":"#ef98aa"},{"name":"Piggy Bank","hex":"#ffccbb"},{"name":"Piggy Dreams","hex":"#ffcbc4"},{"name":"Piggyback","hex":"#f0dce3"},{"name":"Piglet","hex":"#ffc0c6"},{"name":"Pigment Indigo","hex":"#4d0082"},{"name":"Pigskin Puffball","hex":"#e8dad1"},{"name":"Pika Yellow","hex":"#eee92d"},{"name":"Pikachu Chu","hex":"#eede73"},{"name":"Pike Lake","hex":"#6c7779"},{"name":"Pikkoro Green","hex":"#15b01a"},{"name":"Pīlā Yellow","hex":"#ffff55"},{"name":"Pilot Blue","hex":"#006981"},{"name":"Pilsener","hex":"#f8f753"},{"name":"Piment Piquant","hex":"#cc2200"},{"name":"Pimento","hex":"#dc5d47"},{"name":"Pimento Grain Brown","hex":"#6c5738"},{"name":"Pimlico","hex":"#df9e9d"},{"name":"Pimm\'s","hex":"#c3585c"},{"name":"Pina","hex":"#ffd97a"},{"name":"Pina Colada","hex":"#f4deb3"},{"name":"Pinafore Blue","hex":"#7198c0"},{"name":"Pinard Yellow","hex":"#f4c701"},{"name":"Pinata","hex":"#c17a62"},{"name":"Pinball","hex":"#d3d3d3"},{"name":"Pinch Me","hex":"#c88ca4"},{"name":"Pinch of Pearl","hex":"#fff8e3"},{"name":"Pinch of Pepper","hex":"#0f180a"},{"name":"Pinch of Pistachio","hex":"#ddddcc"},{"name":"Pinch Purple","hex":"#b4abaf"},{"name":"Pincushion","hex":"#ac989c"},{"name":"Pindjur Red","hex":"#bb4411"},{"name":"Pine","hex":"#2b5d34"},{"name":"Pine Bark","hex":"#887468"},{"name":"Pine Brook","hex":"#5c7669"},{"name":"Pine Cone","hex":"#645345"},{"name":"Pine Cone Brown","hex":"#675850"},{"name":"Pine Cone Pass","hex":"#5c6456"},{"name":"Pine Crush","hex":"#b7b8a5"},{"name":"Pine Forest","hex":"#415241"},{"name":"Pine Frost","hex":"#deeae0"},{"name":"Pine Garland","hex":"#797e65"},{"name":"Pine Glade","hex":"#bdc07e"},{"name":"Pine Grain","hex":"#ebc79e"},{"name":"Pine Green","hex":"#0a481e"},{"name":"Pine Grove","hex":"#273f39"},{"name":"Pine Haven","hex":"#486358"},{"name":"Pine Hutch","hex":"#ecdbd2"},{"name":"Pine Leaves","hex":"#839b5c"},{"name":"Pine Mist","hex":"#d5d8bc"},{"name":"Pine Mountain","hex":"#5c685e"},{"name":"Pine Needle","hex":"#334d41"},{"name":"Pine Nut","hex":"#eadac2"},{"name":"Pine Ridge","hex":"#6d9185"},{"name":"Pine Scent","hex":"#4a6d42"},{"name":"Pine Strain","hex":"#d5bfa5"},{"name":"Pine Trail","hex":"#9c9f75"},{"name":"Pine Tree","hex":"#2a2f23"},{"name":"Pine Water","hex":"#e5e7d5"},{"name":"Pine Whisper","hex":"#b3c6b9"},{"name":"Pineal Pink","hex":"#786d72"},{"name":"Pineapple","hex":"#563c0d"},{"name":"Pineapple Blossom","hex":"#b4655c"},{"name":"Pineapple Cream","hex":"#f2eac3"},{"name":"Pineapple Crush","hex":"#edda8f"},{"name":"Pineapple Delight","hex":"#f0e7a9"},{"name":"Pineapple Fizz","hex":"#f9f0d6"},{"name":"Pineapple High","hex":"#ebeb57"},{"name":"Pineapple Juice","hex":"#f8e87b"},{"name":"Pineapple Perfume","hex":"#eeee88"},{"name":"Pineapple Sage","hex":"#9c8f60"},{"name":"Pineapple Salmon","hex":"#fd645f"},{"name":"Pineapple Slice","hex":"#e7d791"},{"name":"Pineapple Soda","hex":"#e4e5ce"},{"name":"Pineapple Sorbet","hex":"#f7f4da"},{"name":"Pineapple Whip","hex":"#ead988"},{"name":"Pineberry","hex":"#f0d6dd"},{"name":"Pinebrook","hex":"#5d695a"},{"name":"Pinecone Hill","hex":"#63695f"},{"name":"Pinecone Path","hex":"#574745"},{"name":"Pinehurst","hex":"#2b7b66"},{"name":"Pinenut","hex":"#f8d9b8"},{"name":"Pinetop","hex":"#57593f"},{"name":"Pineweed","hex":"#5b7349"},{"name":"Piney Lake","hex":"#006655"},{"name":"Piney Wood","hex":"#70574f"},{"name":"Píng Gǔo Lǜ Green","hex":"#23c48b"},{"name":"Pink","hex":"#ffc0cb"},{"name":"Pink Abalone","hex":"#e9b8a4"},{"name":"Pink Amour","hex":"#f4e2e9"},{"name":"Pink and Sleek","hex":"#ffc3c6"},{"name":"Pink Apatite","hex":"#d7b8ab"},{"name":"Pink Apotheosis","hex":"#ffb2f0"},{"name":"Pink as Hell","hex":"#fe69b5"},{"name":"Pink Ballad","hex":"#a6427c"},{"name":"Pink Beach","hex":"#f6c3a6"},{"name":"Pink Beauty","hex":"#dca7c2"},{"name":"Pink Begonia","hex":"#dd9cbd"},{"name":"Pink Bite","hex":"#e936a7"},{"name":"Pink Blessing","hex":"#f2a9ba"},{"name":"Pink Bliss","hex":"#e3abce"},{"name":"Pink Blossom","hex":"#fbe9dd"},{"name":"Pink Blush","hex":"#f4acb6"},{"name":"Pink Bonnet","hex":"#dd77ee"},{"name":"Pink Booties","hex":"#efe1e4"},{"name":"Pink Bravado","hex":"#c5b5c3"},{"name":"Pink Bubble Tea","hex":"#fdbac4"},{"name":"Pink Cardoon","hex":"#ecc9ca"},{"name":"Pink Carnation","hex":"#ed7a9e"},{"name":"Pink Cattleya","hex":"#ffb2d0"},{"name":"Pink Chablis","hex":"#f4ded9"},{"name":"Pink Chalk","hex":"#f2a3bd"},{"name":"Pink Champagne","hex":"#e8dfed"},{"name":"Pink Charge","hex":"#dd66bb"},{"name":"Pink Chi","hex":"#e4898a"},{"name":"Pink Chintz","hex":"#efbecf"},{"name":"Pink Clay","hex":"#ffd5d1"},{"name":"Pink Clay Pot","hex":"#d99294"},{"name":"Pink Condition","hex":"#ff99dd"},{"name":"Pink Cupcake","hex":"#f5d0d6"},{"name":"Pink Currant","hex":"#fed5e9"},{"name":"Pink Dahlia","hex":"#b94c66"},{"name":"Pink Damask","hex":"#d98580"},{"name":"Pink Dazzle","hex":"#c97376"},{"name":"Pink Delight","hex":"#ff8ad8"},{"name":"Pink Diamond","hex":"#fed0fc"},{"name":"Pink Diminishing","hex":"#fff4f2"},{"name":"Pink Discord","hex":"#b499a1"},{"name":"Pink Dogwood","hex":"#f7d1d1"},{"name":"Pink Dream","hex":"#fea5a2"},{"name":"Pink Duet","hex":"#f8e7e4"},{"name":"Pink Dust","hex":"#e4b5b2"},{"name":"Pink Dyed Blond","hex":"#ecdfd5"},{"name":"Pink Earth","hex":"#b08272"},{"name":"Pink Elephant","hex":"#f5d5cc"},{"name":"Pink Elephants","hex":"#ff99ee"},{"name":"Pink Emulsion","hex":"#f2e4e2"},{"name":"Pink Eraser","hex":"#f3a09a"},{"name":"Pink Explosion","hex":"#f56f88"},{"name":"Pink Fetish","hex":"#dd77ff"},{"name":"Pink Fever","hex":"#cc55ff"},{"name":"Pink Fire","hex":"#fc845d"},{"name":"Pink Fit","hex":"#f5a8b2"},{"name":"Pink Flambe","hex":"#d3507a"},{"name":"Pink Flambé","hex":"#cd4e82"},{"name":"Pink Flame","hex":"#b55a63"},{"name":"Pink Flamingo","hex":"#ff66ff"},{"name":"Pink Flare","hex":"#d8b4b6"},{"name":"Pink Floyd","hex":"#eb9a9d"},{"name":"Pink Fluorite","hex":"#fbd3d9"},{"name":"Pink Frappé","hex":"#e6d2dc"},{"name":"Pink Frosting","hex":"#f7d7e2"},{"name":"Pink Garnet","hex":"#d2738f"},{"name":"Pink Gin","hex":"#dfa3ba"},{"name":"Pink Ginger","hex":"#cfa798"},{"name":"Pink Glamour","hex":"#ff787b"},{"name":"Pink Glitter","hex":"#fddfda"},{"name":"Pink Glow","hex":"#ffece0"},{"name":"Pink Granite","hex":"#bd9e97"},{"name":"Pink Grapefruit","hex":"#f3bac9"},{"name":"Pink Heath","hex":"#f2bddf"},{"name":"Pink Hibiscus","hex":"#b36c86"},{"name":"Pink Horror","hex":"#90305d"},{"name":"Pink Hydrangea","hex":"#f8c1bb"},{"name":"Pink Ice","hex":"#cf9fa9"},{"name":"Pink Icing","hex":"#eea0a6"},{"name":"Pink Illusion","hex":"#d8b8f8"},{"name":"Pink Ink","hex":"#ff1476"},{"name":"Pink Insanity","hex":"#cc44ff"},{"name":"Pink Jazz","hex":"#9e6b89"},{"name":"Pink Katydid","hex":"#ff55aa"},{"name":"Pink Kitsch","hex":"#ff22ee"},{"name":"Pink Lace","hex":"#f6ccd7"},{"name":"Pink Lady","hex":"#f3d7b6"},{"name":"Pink Lavender","hex":"#d9afca"},{"name":"Pink Lemonade","hex":"#ffeaeb"},{"name":"Pink Lily","hex":"#f8d0e7"},{"name":"Pink Linen","hex":"#d2bfc4"},{"name":"Pink Lotus","hex":"#fadbd7"},{"name":"Pink Macaroon","hex":"#eaacc6"},{"name":"Pink Makeup","hex":"#fc80a5"},{"name":"Pink Manhattan","hex":"#c16c7b"},{"name":"Pink Marble","hex":"#e5d0ca"},{"name":"Pink Marshmallow","hex":"#f4b6d1"},{"name":"Pink Mimosa","hex":"#f4b6a8"},{"name":"Pink Mirage","hex":"#f4ede9"},{"name":"Pink Mist","hex":"#e6bccd"},{"name":"Pink Moment","hex":"#ed9aab"},{"name":"Pink Moroccan","hex":"#a98981"},{"name":"Pink Nectar","hex":"#d8aab7"},{"name":"Pink Nudity","hex":"#d6c3b7"},{"name":"Pink OCD","hex":"#6844fc"},{"name":"Pink Orange","hex":"#ff9066"},{"name":"Pink Orchid","hex":"#da70d6"},{"name":"Pink Orchid Mantis","hex":"#fd82c3"},{"name":"Pink Organdy","hex":"#e1d6d8"},{"name":"Pink Orthoclase","hex":"#aa98a9"},{"name":"Pink Overflow","hex":"#ff33ff"},{"name":"Pink Pail","hex":"#eaced4"},{"name":"Pink Palazzo","hex":"#df9f8f"},{"name":"Pink Pampas","hex":"#d1b6c3"},{"name":"Pink Pandora","hex":"#e1c5c9"},{"name":"Pink Panther","hex":"#ff0090"},{"name":"Pink Papaya","hex":"#d5877e"},{"name":"Pink Parade","hex":"#b26ba2"},{"name":"Pink Parakeet","hex":"#ad546e"},{"name":"Pink Parfait","hex":"#faddd5"},{"name":"Pink Party","hex":"#ff55ee"},{"name":"Pink Peacock","hex":"#d3236f"},{"name":"Pink Pearl","hex":"#e7accf"},{"name":"Pink Peony","hex":"#e1bed9"},{"name":"Pink Pepper","hex":"#ef586c"},{"name":"Pink Peppercorn","hex":"#8e5565"},{"name":"Pink Perennial","hex":"#c034af"},{"name":"Pink Perfume","hex":"#ffdbe5"},{"name":"Pink Persimmon","hex":"#ffad97"},{"name":"Pink Petal","hex":"#f6e6e2"},{"name":"Pink Piano","hex":"#f62681"},{"name":"Pink Pieris","hex":"#efc9b8"},{"name":"Pink Ping","hex":"#ee66ee"},{"name":"Pink Plastic Fantastic","hex":"#fc80c3"},{"name":"Pink Pleasure","hex":"#ffdfe5"},{"name":"Pink Plum","hex":"#ead2d2"},{"name":"Pink Poison","hex":"#ff007e"},{"name":"Pink Polar","hex":"#ccbabe"},{"name":"Pink Poppy","hex":"#8e6e74"},{"name":"Pink Posey","hex":"#eadee0"},{"name":"Pink Posies","hex":"#efdbe2"},{"name":"Pink Potion","hex":"#ceaebb"},{"name":"Pink Power","hex":"#d5b6cd"},{"name":"Pink Prestige","hex":"#ee99aa"},{"name":"Pink Pride","hex":"#ef1de7"},{"name":"Pink Prism","hex":"#f3e6e4"},{"name":"Pink Proposal","hex":"#f1e0e8"},{"name":"Pink Punch","hex":"#d04a70"},{"name":"Pink Punk","hex":"#d983bd"},{"name":"Pink Purple","hex":"#db4bda"},{"name":"Pink Pussycat","hex":"#dc9f9f"},{"name":"Pink Quartz","hex":"#ffbbee"},{"name":"Pink Quince","hex":"#ab485b"},{"name":"Pink Raspberry","hex":"#980036"},{"name":"Pink Red","hex":"#f5054f"},{"name":"Pink Rose Bud","hex":"#feab9a"},{"name":"Pink Sachet","hex":"#eebcb8"},{"name":"Pink Salt","hex":"#f6cdc6"},{"name":"Pink Sand","hex":"#dfb19b"},{"name":"Pink Sangria","hex":"#f6dbd3"},{"name":"Pink Satin","hex":"#ffbbdd"},{"name":"Pink Scallop","hex":"#f2e0d4"},{"name":"Pink Sea Salt","hex":"#f6dacb"},{"name":"Pink Sentiment","hex":"#f0d4ca"},{"name":"Pink Shade","hex":"#cd7584"},{"name":"Pink Shade Granite","hex":"#a4877d"},{"name":"Pink Shadow","hex":"#bb3377"},{"name":"Pink Sherbet","hex":"#f780a1"},{"name":"Pink Shimmer","hex":"#fde0da"},{"name":"Pink Slip","hex":"#d58d8a"},{"name":"Pink Softness","hex":"#deb8bc"},{"name":"Pink Sparkle","hex":"#ffe9eb"},{"name":"Pink Spinel","hex":"#e7c9ca"},{"name":"Pink Spyro","hex":"#a328b3"},{"name":"Pink Stock","hex":"#ddabab"},{"name":"Pink Sugar","hex":"#eeaaff"},{"name":"Pink Supremecy","hex":"#ffd9e6"},{"name":"Pink Swan","hex":"#bfb3b2"},{"name":"Pink Taffy","hex":"#efbcb6"},{"name":"Pink Tease","hex":"#ff81c0"},{"name":"Pink Theory","hex":"#ffe6e4"},{"name":"Pink Tint","hex":"#d9c8ba"},{"name":"Pink Touch","hex":"#fae2d6"},{"name":"Pink Tulip","hex":"#985672"},{"name":"Pink Tulle","hex":"#deb59a"},{"name":"Pink Tutu","hex":"#f9e4e9"},{"name":"Pink Vibernum","hex":"#f5e6e6"},{"name":"Pink Water","hex":"#e0c9c4"},{"name":"Pink Wink","hex":"#ffaaee"},{"name":"Pink Wraith","hex":"#ddbbbb"},{"name":"Pink Yarrow","hex":"#d13d82"},{"name":"Pink Zest","hex":"#f2d8cd"},{"name":"Pink-N-Purple","hex":"#866180"},{"name":"Pinkadelic","hex":"#cb5c5b"},{"name":"Pinkalicious","hex":"#ff99ff"},{"name":"Pinkathon","hex":"#f1bdba"},{"name":"Pinkham","hex":"#e8c5ae"},{"name":"Pinkinity","hex":"#e82a8e"},{"name":"Pinkish","hex":"#d46a7e"},{"name":"Pinkish Brown","hex":"#b17261"},{"name":"Pinkish Grey","hex":"#c8aca9"},{"name":"Pinkish Orange","hex":"#ff724c"},{"name":"Pinkish Purple","hex":"#d648d7"},{"name":"Pinkish Red","hex":"#f10c45"},{"name":"Pinkish Tan","hex":"#d99b82"},{"name":"Pinkling","hex":"#eb84f5"},{"name":"Pinkman","hex":"#dd11ff"},{"name":"Pinktone","hex":"#f9ced1"},{"name":"Pinky","hex":"#fc86aa"},{"name":"Pinky Beige","hex":"#c9aa98"},{"name":"Pinky Pickle","hex":"#b96d8e"},{"name":"Pinky Promise","hex":"#f5d1cf"},{"name":"Pinky Swear","hex":"#eeaaee"},{"name":"Pinnacle","hex":"#beddd5"},{"name":"Pinot Noir","hex":"#605258"},{"name":"Pinque","hex":"#eca2ad"},{"name":"Pinwheel Geyser","hex":"#d2dcde"},{"name":"Pinyon Pine","hex":"#625a42"},{"name":"Pion Purple","hex":"#480840"},{"name":"Pioneer Village","hex":"#aa9076"},{"name":"Pipe","hex":"#857165"},{"name":"Pipe Clay","hex":"#cac7bc"},{"name":"Piper","hex":"#9d5432"},{"name":"Pipitschah","hex":"#f5e6c4"},{"name":"Pippin","hex":"#fcdbd2"},{"name":"Piquant Green","hex":"#769358"},{"name":"Piquant Pink","hex":"#ee00ee"},{"name":"Pirat\'s Wine","hex":"#71424a"},{"name":"Pirate Black","hex":"#363838"},{"name":"Pirate Gold","hex":"#ba782a"},{"name":"Pirate Plunder","hex":"#b1905e"},{"name":"Pirate Silver","hex":"#818988"},{"name":"Pirate Treasure","hex":"#ddca69"},{"name":"Pirate\'s Haven","hex":"#005176"},{"name":"Pirate\'s Hook","hex":"#b08f42"},{"name":"Pirate\'s Trinket","hex":"#716970"},{"name":"Pisces Vivid Amethyst","hex":"#ab46ec"},{"name":"Pisco Sour","hex":"#beeb71"},{"name":"Pismo Dunes","hex":"#f4d6a4"},{"name":"Pistachio","hex":"#93c572"},{"name":"Pistachio Cream","hex":"#c5d498"},{"name":"Pistachio Flour","hex":"#4f8f00"},{"name":"Pistachio Green","hex":"#a9d39e"},{"name":"Pistachio Ice Cream","hex":"#a0b7ad"},{"name":"Pistachio Mousse","hex":"#c0fa8b"},{"name":"Pistachio Pudding","hex":"#c6d4ac"},{"name":"Pistachio Shell","hex":"#cfc5af"},{"name":"Pistachio Shortbread","hex":"#c7bb73"},{"name":"Pistachio Tang","hex":"#d7d2b8"},{"name":"Pistou Green","hex":"#00bb55"},{"name":"Pit Stop","hex":"#414958"},{"name":"Pita","hex":"#f5e7d2"},{"name":"Pita Bread","hex":"#dec8a6"},{"name":"Pitapat","hex":"#edeb9a"},{"name":"Pitch","hex":"#423937"},{"name":"Pitch Black","hex":"#483c41"},{"name":"Pitch Green","hex":"#283330"},{"name":"Pitch Mary Brown","hex":"#5c4033"},{"name":"Pitch Pine","hex":"#7c7766"},{"name":"Pitch-Black Forests","hex":"#003322"},{"name":"Pitcher","hex":"#b5d1be"},{"name":"Pitmaston Pear Yellow","hex":"#d0a32e"},{"name":"Pitter Patter","hex":"#9bc2bd"},{"name":"Pixel Bleeding","hex":"#bb0022"},{"name":"Pixel Cream","hex":"#f7d384"},{"name":"Pixel Nature","hex":"#008751"},{"name":"Pixel White","hex":"#dbdcdb"},{"name":"Pixelated Grass","hex":"#009337"},{"name":"Pixie Green","hex":"#bbcda5"},{"name":"Pixie Powder","hex":"#391285"},{"name":"Pixie Violet","hex":"#acb1d4"},{"name":"Pixie Wing","hex":"#e9e6eb"},{"name":"Pixieland","hex":"#b4a6c6"},{"name":"Pizazz","hex":"#e57f3d"},{"name":"Pizazz Peach","hex":"#f5c795"},{"name":"Pizza","hex":"#bf8d3c"},{"name":"Pizza Flame","hex":"#cd2217"},{"name":"Pizza Pie","hex":"#a06165"},{"name":"Place of Dust","hex":"#c6c3c0"},{"name":"Placebo","hex":"#e7e7e7"},{"name":"Placebo Blue","hex":"#ebf4fc"},{"name":"Placebo Fuchsia","hex":"#f8ebfc"},{"name":"Placebo Green","hex":"#ebfcec"},{"name":"Placebo Lime","hex":"#f6fceb"},{"name":"Placebo Magenta","hex":"#fcebf4"},{"name":"Placebo Orange","hex":"#fcf5eb"},{"name":"Placebo Pink","hex":"#fcebfa"},{"name":"Placebo Purple","hex":"#f0ebfc"},{"name":"Placebo Red","hex":"#fcebeb"},{"name":"Placebo Sky","hex":"#ebfcfc"},{"name":"Placebo Turquoise","hex":"#ebfcf5"},{"name":"Placebo Yellow","hex":"#fcfbeb"},{"name":"Placid Blue","hex":"#88a9d2"},{"name":"Placid Sea","hex":"#1cadba"},{"name":"Plague Brown","hex":"#dfb900"},{"name":"Plaguelands Beige","hex":"#ab8d44"},{"name":"Plaguelands Hazel","hex":"#ad5f28"},{"name":"Plain and Simple","hex":"#ebf0d6"},{"name":"Plain Old Brown","hex":"#905100"},{"name":"Plains","hex":"#f5de85"},{"name":"Plane Brown","hex":"#8a5024"},{"name":"Planet Earth","hex":"#daddc3"},{"name":"Planet Green","hex":"#496a76"},{"name":"Planet of the Apes","hex":"#883333"},{"name":"Planetarium","hex":"#1c70ad"},{"name":"Planetary Silver","hex":"#cccfcb"},{"name":"Plankton Green","hex":"#00534c"},{"name":"Plant Green","hex":"#777a44"},{"name":"Plantain","hex":"#97943b"},{"name":"Plantain Chips","hex":"#d6a550"},{"name":"Plantain Green","hex":"#356554"},{"name":"Plantation","hex":"#3e594c"},{"name":"Plantation Island","hex":"#9b8a44"},{"name":"Plantation Shutters","hex":"#6a5143"},{"name":"Planter","hex":"#339900"},{"name":"Plasma Trail","hex":"#d59cfc"},{"name":"Plaster","hex":"#eaeaea"},{"name":"Plaster Cast","hex":"#e1eaec"},{"name":"Plaster Mix","hex":"#ead1a6"},{"name":"Plastic Carrot","hex":"#f65d20"},{"name":"Plastic Clouds","hex":"#f5f0f1"},{"name":"Plastic Lime","hex":"#eddc70"},{"name":"Plastic Lips","hex":"#aa2266"},{"name":"Plastic Marble","hex":"#ffddcc"},{"name":"Plastic Pines","hex":"#55aa11"},{"name":"Plastic Veggie","hex":"#22ff22"},{"name":"Plasticine","hex":"#4a623b"},{"name":"Plate Mail Metal","hex":"#8c8589"},{"name":"Plateau","hex":"#d3e7e5"},{"name":"Platinum","hex":"#e5e4e2"},{"name":"Platinum Blonde","hex":"#f0e8d7"},{"name":"Platinum Granite","hex":"#807f7e"},{"name":"Platinum Grey","hex":"#6a6d6f"},{"name":"Platinum Ogon Koi","hex":"#ece1d3"},{"name":"Platonic Blue","hex":"#88ccff"},{"name":"Platoon Green","hex":"#2a4845"},{"name":"Plaudit","hex":"#39536c"},{"name":"Play \'til dawn","hex":"#ff8877"},{"name":"Play on Grey","hex":"#bab6a9"},{"name":"Play School","hex":"#ce5924"},{"name":"Play Time","hex":"#b39ba9"},{"name":"Playa Arenosa","hex":"#dcc7b3"},{"name":"Playful Peach","hex":"#fce3ca"},{"name":"Playful Plum","hex":"#ba99a2"},{"name":"Playful Purple","hex":"#bfb9d5"},{"name":"Playing Hooky","hex":"#8b8c6b"},{"name":"Plaza Pink","hex":"#f4c0c3"},{"name":"Plaza Taupe","hex":"#aea393"},{"name":"Pleasant Dream","hex":"#a379aa"},{"name":"Pleasant Hill","hex":"#4d5a4c"},{"name":"Pleasant Pomegranate","hex":"#cc3300"},{"name":"Pleasant Purple","hex":"#8833aa"},{"name":"Pleasant Stream","hex":"#00a0a2"},{"name":"Pleasing Pink","hex":"#f5cdd2"},{"name":"Pleasure","hex":"#80385c"},{"name":"Pleated Mauve","hex":"#858bc2"},{"name":"Plein Air","hex":"#b9c4d2"},{"name":"Ploughed Earth","hex":"#6c6459"},{"name":"Plover Grey","hex":"#8f8373"},{"name":"Plum","hex":"#66386a"},{"name":"Plum Blossom","hex":"#f2a0a1"},{"name":"Plum Blossom Dye","hex":"#b48a76"},{"name":"Plum Blue","hex":"#4b6176"},{"name":"Plum Brown","hex":"#4e4247"},{"name":"Plum Cake","hex":"#d1bfdc"},{"name":"Plum Caspia","hex":"#612246"},{"name":"Plum Cheese","hex":"#670728"},{"name":"Plum Crush","hex":"#716063"},{"name":"Plum Dandy","hex":"#8b6878"},{"name":"Plum Dust","hex":"#aa4c8f"},{"name":"Plum Frost","hex":"#b1a7b6"},{"name":"Plum Fuzz","hex":"#313048"},{"name":"Plum Green","hex":"#695c39"},{"name":"Plum Harvest","hex":"#674555"},{"name":"Plum Haze","hex":"#8b7574"},{"name":"Plum Highness","hex":"#885577"},{"name":"Plum Island","hex":"#463c4e"},{"name":"Plum Jam","hex":"#704783"},{"name":"Plum Juice","hex":"#dea1dd"},{"name":"Plum Kingdom","hex":"#aa3377"},{"name":"Plum Kitten","hex":"#625b5c"},{"name":"Plum Majesty","hex":"#994548"},{"name":"Plum Mouse","hex":"#c099a0"},{"name":"Plum Orbit","hex":"#4e414b"},{"name":"Plum Paradise","hex":"#aa1166"},{"name":"Plum Passion","hex":"#9b4b80"},{"name":"Plum Perfect","hex":"#aa1155"},{"name":"Plum Perfume","hex":"#a489a3"},{"name":"Plum Pie","hex":"#8e4585"},{"name":"Plum Point","hex":"#d4bddf"},{"name":"Plum Power","hex":"#7e5e8d"},{"name":"Plum Preserve","hex":"#7c70aa"},{"name":"Plum Purple","hex":"#580f41"},{"name":"Plum Raisin","hex":"#644847"},{"name":"Plum Rich","hex":"#64475e"},{"name":"Plum Royale","hex":"#876c7a"},{"name":"Plum Sauce","hex":"#6a3939"},{"name":"Plum Savor","hex":"#915d88"},{"name":"Plum Shade","hex":"#78738b"},{"name":"Plum Shadow","hex":"#7c707c"},{"name":"Plum Skin","hex":"#51304e"},{"name":"Plum Smoke","hex":"#928e8e"},{"name":"Plum Swirl","hex":"#957e8e"},{"name":"Plum Taffy","hex":"#ddc1d7"},{"name":"Plum Taupe","hex":"#b6a19b"},{"name":"Plum Truffle","hex":"#6a5858"},{"name":"Plum Wine","hex":"#734d58"},{"name":"Plum\'s the Word","hex":"#dacee8"},{"name":"Plumage","hex":"#00998c"},{"name":"Plumbeous","hex":"#5c7287"},{"name":"Plumberry","hex":"#735054"},{"name":"Plumburn","hex":"#7d665f"},{"name":"Plume","hex":"#a5cfd5"},{"name":"Plume Grass","hex":"#d9d5c5"},{"name":"Plumeria","hex":"#c3b5d4"},{"name":"Plummy","hex":"#675a75"},{"name":"Plumosa","hex":"#64a281"},{"name":"Plumville","hex":"#9e8185"},{"name":"Plunder","hex":"#5072a9"},{"name":"Plunge","hex":"#035568"},{"name":"Plunge Pool","hex":"#00ffcc"},{"name":"Plunging Waterfall","hex":"#8cd4df"},{"name":"Plush","hex":"#3b3549"},{"name":"Plush Purple","hex":"#5d4a61"},{"name":"Plush Suede","hex":"#b1928c"},{"name":"Plush Velvet","hex":"#7e737d"},{"name":"Plushy Pink","hex":"#eab7a8"},{"name":"Pluto","hex":"#34acb1"},{"name":"Plutonium","hex":"#35fa00"},{"name":"Pluviophile","hex":"#66dddd"},{"name":"Plymouth Beige","hex":"#ddd3c2"},{"name":"Plymouth Green","hex":"#b1b695"},{"name":"Plymouth Grey","hex":"#b0b1ac"},{"name":"Plymouth Notch","hex":"#cdb3ac"},{"name":"Poached Egg","hex":"#f5d893"},{"name":"Poached Rainbow Trout","hex":"#ff8552"},{"name":"Poblano","hex":"#077f1b"},{"name":"Pochard Duck Head","hex":"#ee9977"},{"name":"Pocket Lint","hex":"#b5d5d7"},{"name":"Pocket Watch","hex":"#c2a781"},{"name":"Poetic Green","hex":"#00a844"},{"name":"Poetic License","hex":"#e4e8e1"},{"name":"Poetic Light","hex":"#e2ded8"},{"name":"Poetic Princess","hex":"#f8e1e4"},{"name":"Poetic Yellow","hex":"#fffed7"},{"name":"Poetry Mauve","hex":"#886891"},{"name":"Poetry Plum","hex":"#6f5c5f"},{"name":"Poetry Reading","hex":"#9faec9"},{"name":"Pogo Sands","hex":"#ece4d2"},{"name":"Pohutukawa","hex":"#651c26"},{"name":"Poinciana","hex":"#db372a"},{"name":"Poinsettia","hex":"#cc3842"},{"name":"Pointed Cabbage Green","hex":"#859587"},{"name":"Pointed Fir","hex":"#575d56"},{"name":"Pointed Rock","hex":"#646767"},{"name":"Poise","hex":"#a77693"},{"name":"Poised Peach","hex":"#ffa99d"},{"name":"Poised Taupe","hex":"#8c7e78"},{"name":"Poison Green","hex":"#40fd14"},{"name":"Poison Ivy","hex":"#00ad43"},{"name":"Poison Purple","hex":"#7f01fe"},{"name":"Poison Purple Paradise","hex":"#b300ff"},{"name":"Poisonberry","hex":"#73403e"},{"name":"Poisoning Green","hex":"#66ff11"},{"name":"Poisonous","hex":"#55ff11"},{"name":"Poisonous Apple","hex":"#993333"},{"name":"Poisonous Cloud","hex":"#d3db39"},{"name":"Poisonous Dart","hex":"#77ff66"},{"name":"Poisonous Ice Cream","hex":"#d7d927"},{"name":"Poisonous Pesticide","hex":"#32cd32"},{"name":"Poisonous Pesto","hex":"#cae80a"},{"name":"Poisonous Pistachio","hex":"#88ee11"},{"name":"Poisonous Potion","hex":"#99dd33"},{"name":"Poisonous Purple","hex":"#2a0134"},{"name":"Poker Green","hex":"#35654d"},{"name":"Polar","hex":"#e5f2e7"},{"name":"Polar Bear","hex":"#eae9e0"},{"name":"Polar Bear In A Blizzard","hex":"#fcffff"},{"name":"Polar Blue","hex":"#b3e0e7"},{"name":"Polar Drift","hex":"#ccd5da"},{"name":"Polar Expedition","hex":"#c9e7e3"},{"name":"Polar Fox","hex":"#d2d0c9"},{"name":"Polar Ice","hex":"#71a6d2"},{"name":"Polar Mist","hex":"#adafbd"},{"name":"Polar Pond","hex":"#6b7b7b"},{"name":"Polar Seas","hex":"#accde2"},{"name":"Polar Soft Blue","hex":"#d0dcde"},{"name":"Polar White","hex":"#e6efec"},{"name":"Polar Wind","hex":"#b4dfed"},{"name":"Polaris","hex":"#a0aead"},{"name":"Polaris Blue","hex":"#6f8a8c"},{"name":"Polenta","hex":"#efc47f"},{"name":"Police Blue","hex":"#374f6b"},{"name":"Polignac","hex":"#bd7d94"},{"name":"Polish White","hex":"#e9e8e7"},{"name":"Polished","hex":"#ded8ce"},{"name":"Polished Apple","hex":"#862a2e"},{"name":"Polished Aqua","hex":"#77bcb6"},{"name":"Polished Bronze","hex":"#cd7f32"},{"name":"Polished Brown","hex":"#985538"},{"name":"Polished Concrete","hex":"#9e9793"},{"name":"Polished Copper","hex":"#b66325"},{"name":"Polished Cotton","hex":"#c7d4d7"},{"name":"Polished Garnet","hex":"#953640"},{"name":"Polished Gold","hex":"#eeaa55"},{"name":"Polished Leather","hex":"#4f4041"},{"name":"Polished Limestone","hex":"#dcd5c8"},{"name":"Polished Mahogany","hex":"#432722"},{"name":"Polished Marble","hex":"#d0bc9d"},{"name":"Polished Metal","hex":"#819ab1"},{"name":"Polished Pearl","hex":"#f8edd3"},{"name":"Polished Pewter","hex":"#9c9a99"},{"name":"Polished Pine","hex":"#5da493"},{"name":"Polished Pink","hex":"#fff2ef"},{"name":"Polished Rock","hex":"#bcc3c2"},{"name":"Polished Silver","hex":"#c5d1da"},{"name":"Polished Steel","hex":"#6f828a"},{"name":"Polished Stone","hex":"#beb49e"},{"name":"Polite White","hex":"#e9ddd4"},{"name":"Polka Dot Plum","hex":"#5a4458"},{"name":"Polka Dot Skirt","hex":"#fde2a0"},{"name":"Pollen","hex":"#eeeeaa"},{"name":"Pollen Grains","hex":"#f0c588"},{"name":"Pollen Powder","hex":"#fbd187"},{"name":"Pollen Storm","hex":"#b8a02a"},{"name":"Pollinate","hex":"#e3d6bc"},{"name":"Pollination","hex":"#eedd66"},{"name":"Polliwog","hex":"#e2cf24"},{"name":"Polly","hex":"#ffcaa4"},{"name":"Polo Blue","hex":"#8aa7cc"},{"name":"Polo Pony","hex":"#d09258"},{"name":"Polo Tan","hex":"#f4e5dd"},{"name":"Polvo de Oro","hex":"#e8b87f"},{"name":"Polyanthus Narcissus","hex":"#feffcc"},{"name":"Polypropylene","hex":"#eaeae8"},{"name":"Pomace Red","hex":"#856f76"},{"name":"Pomegranate","hex":"#c35550"},{"name":"Pomegranate Red","hex":"#b53d45"},{"name":"Pomegranate Tea","hex":"#ab6f73"},{"name":"Pomelo Red","hex":"#e38fac"},{"name":"Pomelo Sugar","hex":"#fce8e3"},{"name":"Pomodoro","hex":"#c30232"},{"name":"Pomodoro e Mozzarella","hex":"#f2d4df"},{"name":"Pomp and Power","hex":"#87608e"},{"name":"Pompadour","hex":"#6a1f44"},{"name":"Pompeian Pink","hex":"#c87763"},{"name":"Pompeian Red","hex":"#a82a38"},{"name":"Pompeii Ash","hex":"#6c757d"},{"name":"Pompeii Blue","hex":"#004c71"},{"name":"Pompeii Red","hex":"#d1462c"},{"name":"Pompeii Ruins","hex":"#5e615b"},{"name":"Pompeius Blue","hex":"#77a8ab"},{"name":"Pompelmo","hex":"#ff6666"},{"name":"Pomtini","hex":"#ca93c1"},{"name":"Ponceau","hex":"#f75c75"},{"name":"Poncho","hex":"#b49073"},{"name":"Pond Bath","hex":"#00827f"},{"name":"Pond Blue","hex":"#8bb6c6"},{"name":"Pond Green","hex":"#a18e6b"},{"name":"Pond Moss","hex":"#01796f"},{"name":"Pond Newt","hex":"#486b67"},{"name":"Pond Sedge","hex":"#658782"},{"name":"Pond\'s Edge","hex":"#b6c9b8"},{"name":"Ponder","hex":"#b88f88"},{"name":"Ponderosa Pine","hex":"#29494e"},{"name":"Pondscape","hex":"#d7efde"},{"name":"Pont Moss","hex":"#5f9228"},{"name":"Pontoon","hex":"#0c608e"},{"name":"Pony","hex":"#c6aa81"},{"name":"Pony Express","hex":"#726a60"},{"name":"Pony Tail","hex":"#d2bc9b"},{"name":"Ponzu Brown","hex":"#220000"},{"name":"Poodle Pink","hex":"#eecee6"},{"name":"Poodle Skirt","hex":"#ffaebb"},{"name":"Poodle Skirt Peach","hex":"#ea927a"},{"name":"Pookie Bear","hex":"#824b2e"},{"name":"Pool Bar","hex":"#8fabbd"},{"name":"Pool Blue","hex":"#67bcb3"},{"name":"Pool Floor","hex":"#7daee1"},{"name":"Pool Green","hex":"#00af9d"},{"name":"Pool Party","hex":"#bee9e3"},{"name":"Pool Side","hex":"#aad5d9"},{"name":"Pool Table","hex":"#039578"},{"name":"Pool Tide","hex":"#70928e"},{"name":"Pool Tiles","hex":"#89cff0"},{"name":"Pool Water","hex":"#2188ff"},{"name":"Poolhouse","hex":"#8095a0"},{"name":"Pop Shop","hex":"#93d4c0"},{"name":"Pop That Gum","hex":"#f771b3"},{"name":"Popcorn","hex":"#f7d07a"},{"name":"Popcorn Ball","hex":"#fcebd1"},{"name":"Poplar","hex":"#a29f46"},{"name":"Poplar Forest","hex":"#137953"},{"name":"Poplar Kitten","hex":"#ece9e9"},{"name":"Poplar Pink","hex":"#fed3e4"},{"name":"Poplar White","hex":"#dfe3d8"},{"name":"Poppy","hex":"#c23c47"},{"name":"Poppy Crepe","hex":"#fbe9d8"},{"name":"Poppy Flower","hex":"#ec5800"},{"name":"Poppy Glow","hex":"#f18c49"},{"name":"Poppy Leaf","hex":"#88a496"},{"name":"Poppy Petal","hex":"#f6a08c"},{"name":"Poppy Pods","hex":"#736157"},{"name":"Poppy Pompadour","hex":"#6b3fa0"},{"name":"Poppy Power","hex":"#ed2939"},{"name":"Poppy Prose","hex":"#ae605b"},{"name":"Poppy Red","hex":"#dd3845"},{"name":"Poppy Seed","hex":"#4a4e54"},{"name":"Poppy Surprise","hex":"#ff5630"},{"name":"Poppy\'s Whiskers","hex":"#ccd7df"},{"name":"Popstar","hex":"#be4f62"},{"name":"Popular Beige","hex":"#d4ccc3"},{"name":"Porcelain","hex":"#dddcdb"},{"name":"Porcelain Basin","hex":"#d9d0c4"},{"name":"Porcelain Blue","hex":"#95c0cb"},{"name":"Porcelain Crab","hex":"#e9b7a8"},{"name":"Porcelain Earth","hex":"#eeffbb"},{"name":"Porcelain Figurines","hex":"#a9998c"},{"name":"Porcelain Goldfish","hex":"#e1dad9"},{"name":"Porcelain Green","hex":"#118c7e"},{"name":"Porcelain Jasper","hex":"#dfe2e4"},{"name":"Porcelain Mint","hex":"#dbe7e1"},{"name":"Porcelain Mold","hex":"#ebe8e2"},{"name":"Porcelain Peach","hex":"#f5d8ba"},{"name":"Porcelain Pink","hex":"#ecd9b9"},{"name":"Porcelain Rose","hex":"#ea6b6a"},{"name":"Porcelain Skin","hex":"#ffe7eb"},{"name":"Porcelain Tan","hex":"#f7d8c4"},{"name":"Porcelain Yellow","hex":"#fddda7"},{"name":"Porcellana","hex":"#ffbfab"},{"name":"Porch Ceiling","hex":"#a4b3b9"},{"name":"Porch Song","hex":"#566f8c"},{"name":"Porch Swing","hex":"#597175"},{"name":"Porch Swing Beige","hex":"#d2cabe"},{"name":"Porchetta Crust","hex":"#aa8736"},{"name":"Porcini","hex":"#d9ae86"},{"name":"Porcupine Needles","hex":"#917a75"},{"name":"Pork Belly","hex":"#f8e0e7"},{"name":"Porous Stone","hex":"#d4cebf"},{"name":"Porpita Porpita","hex":"#2792c3"},{"name":"Porpoise","hex":"#dbdbda"},{"name":"Porpoise Fin","hex":"#c8cbcd"},{"name":"Porpoise Place","hex":"#076a7e"},{"name":"Porsche","hex":"#df9d5b"},{"name":"Port","hex":"#6d3637"},{"name":"Port Au Prince","hex":"#006a93"},{"name":"Port Glow","hex":"#54383b"},{"name":"Port Gore","hex":"#3b436c"},{"name":"Port Hope","hex":"#54c3c1"},{"name":"Port Malmesbury","hex":"#0e4d4e"},{"name":"Port Royale","hex":"#532d36"},{"name":"Port Wine","hex":"#6e0c0d"},{"name":"Port Wine Barrel","hex":"#846342"},{"name":"Port Wine Stain","hex":"#85677b"},{"name":"Portabella","hex":"#9a8273"},{"name":"Portabello","hex":"#947a62"},{"name":"Portage","hex":"#8b98d8"},{"name":"Portal Entrance","hex":"#f8f6da"},{"name":"Portica","hex":"#f0d555"},{"name":"Portico","hex":"#bbab95"},{"name":"Portland Orange","hex":"#ff5a36"},{"name":"Portobello","hex":"#a28c82"},{"name":"Portobello Mushroom","hex":"#9d928a"},{"name":"Portofino","hex":"#f4f09b"},{"name":"Portrait Pink","hex":"#f0d3df"},{"name":"Portrait Tone","hex":"#c4957a"},{"name":"Portsmouth","hex":"#768482"},{"name":"Portsmouth Bay","hex":"#a1adad"},{"name":"Portsmouth Blue","hex":"#5b7074"},{"name":"Portsmouth Olive","hex":"#6b6b44"},{"name":"Portsmouth Spice","hex":"#a75546"},{"name":"Portuguese Blue","hex":"#3c5e95"},{"name":"Portuguese Dawn","hex":"#c48f85"},{"name":"Portuguese Green","hex":"#717910"},{"name":"Poseidon","hex":"#143c5d"},{"name":"Poseidon Jr.","hex":"#66eeee"},{"name":"Poseidon\'s Beard","hex":"#d9d6c7"},{"name":"Poseidon\'s Territory","hex":"#4400ee"},{"name":"Posey Blue","hex":"#a5b4c6"},{"name":"Posh Peach","hex":"#efb495"},{"name":"Posies","hex":"#dfbbd9"},{"name":"Positive Energy","hex":"#e1e2cf"},{"name":"Positive Red","hex":"#ad2c34"},{"name":"Positively Palm","hex":"#76745d"},{"name":"Positively Pink","hex":"#e7bfb6"},{"name":"Possessed Plum","hex":"#773355"},{"name":"Possessed Purple","hex":"#881166"},{"name":"Possessed Red","hex":"#c2264d"},{"name":"Possibly Pink","hex":"#f3dace"},{"name":"Post Apocalyptic Cloud","hex":"#c8cdd8"},{"name":"Post Boy","hex":"#7a99ad"},{"name":"Post It","hex":"#0074b4"},{"name":"Post Yellow","hex":"#ffee01"},{"name":"Poster Blue","hex":"#134682"},{"name":"Poster Green","hex":"#006b56"},{"name":"Poster Yellow","hex":"#ecc100"},{"name":"Postmodern Mauve","hex":"#b39c8e"},{"name":"Posture & Pose","hex":"#c7c4cd"},{"name":"Postwar Boom","hex":"#466f97"},{"name":"Posy","hex":"#f3e1d3"},{"name":"Posy Green","hex":"#366254"},{"name":"Posy Petal","hex":"#f3879c"},{"name":"Posy Purple","hex":"#6e6386"},{"name":"Pot Black","hex":"#161616"},{"name":"Pot of Cream","hex":"#f9f4e6"},{"name":"Pot of Gold","hex":"#f6cd23"},{"name":"Potash","hex":"#e07757"},{"name":"Potato Chip","hex":"#fddc57"},{"name":"Potent Purple","hex":"#532d45"},{"name":"Potentially Purple","hex":"#d5cde3"},{"name":"Potpourri","hex":"#f5e7e2"},{"name":"Potted Plant","hex":"#9ecca7"},{"name":"Potter Green","hex":"#938a2a"},{"name":"Potter\'s Clay","hex":"#a64826"},{"name":"Potter\'s Pink","hex":"#c2937b"},{"name":"Potter’s Clay","hex":"#bfa298"},{"name":"Potters Pot","hex":"#845c40"},{"name":"Pottery Blue","hex":"#54a6c2"},{"name":"Pottery Clay","hex":"#b9714a"},{"name":"Pottery Red","hex":"#b05d59"},{"name":"Pottery Urn","hex":"#aa866e"},{"name":"Pottery Wheel","hex":"#caac91"},{"name":"Potting Moss","hex":"#a0a089"},{"name":"Potting Soil","hex":"#5b3e31"},{"name":"Poudretteite Pink","hex":"#e68e96"},{"name":"Pound Cake","hex":"#fdf1c3"},{"name":"Pound Sterling","hex":"#818081"},{"name":"Pouring Copper","hex":"#fb9b82"},{"name":"Pout","hex":"#e4ccc3"},{"name":"Pout Pink","hex":"#ff82ce"},{"name":"Pouty Purple","hex":"#e7d7ef"},{"name":"Powder Ash","hex":"#bcc9c2"},{"name":"Powder Blue","hex":"#b0e0e6"},{"name":"Powder Blush","hex":"#d8948b"},{"name":"Powder Cake","hex":"#dfd7ca"},{"name":"Powder Dust","hex":"#b7b7bc"},{"name":"Powder Lilac","hex":"#bfc2ce"},{"name":"Powder Mill","hex":"#9cb3b5"},{"name":"Powder Pink","hex":"#fdd6e5"},{"name":"Powder Puff","hex":"#ffeff3"},{"name":"Powder Puff Pink","hex":"#ffcebe"},{"name":"Powder Red","hex":"#95396a"},{"name":"Powder Room","hex":"#a14d52"},{"name":"Powder Rose","hex":"#f5b3bc"},{"name":"Powder Sand","hex":"#f7f1dd"},{"name":"Powder Soft Blue","hex":"#b9c9d7"},{"name":"Powder Viola","hex":"#cbc2d3"},{"name":"Powder Viola White","hex":"#d9d3e5"},{"name":"Powder White","hex":"#ebf1f5"},{"name":"Powdered","hex":"#f9f2e7"},{"name":"Powdered Allspice","hex":"#c9ab9a"},{"name":"Powdered Blush","hex":"#f8dcdb"},{"name":"Powdered Brick","hex":"#ac9b9b"},{"name":"Powdered Cocoa","hex":"#341c02"},{"name":"Powdered Coffee","hex":"#a0450e"},{"name":"Powdered Gold","hex":"#e8d2b1"},{"name":"Powdered Granite","hex":"#c3c9e6"},{"name":"Powdered Green Tea","hex":"#c5c56a"},{"name":"Powdered Gum","hex":"#a0b0a4"},{"name":"Powdered Peach","hex":"#fde2d1"},{"name":"Powdered Petals","hex":"#e3c7c6"},{"name":"Powdered Pool","hex":"#c7d6d0"},{"name":"Powdered Sage","hex":"#b7b38d"},{"name":"Powdered Snow","hex":"#f8f4e6"},{"name":"Powdery Mist","hex":"#e4e0eb"},{"name":"Power Grey","hex":"#a2a4a6"},{"name":"Power Lunch","hex":"#d4d1c7"},{"name":"Power Outage","hex":"#332244"},{"name":"Power Peony","hex":"#ee5588"},{"name":"Powered Rock","hex":"#bbb7ab"},{"name":"Powerful Mauve","hex":"#4c3f5d"},{"name":"Powerful Violet","hex":"#372252"},{"name":"Practical Beige","hex":"#c9b29c"},{"name":"Practical Tan","hex":"#e1cbb6"},{"name":"Practice Green","hex":"#679a7c"},{"name":"Pragmatic","hex":"#c2a593"},{"name":"Prairie","hex":"#0b9d6a"},{"name":"Prairie Clay","hex":"#935444"},{"name":"Prairie Denim","hex":"#516678"},{"name":"Prairie Dog","hex":"#937067"},{"name":"Prairie Dune","hex":"#fbd5bd"},{"name":"Prairie Dusk","hex":"#cec5ad"},{"name":"Prairie Dust","hex":"#b9ab8f"},{"name":"Prairie Fire","hex":"#996e5a"},{"name":"Prairie Grass","hex":"#b1a38e"},{"name":"Prairie Green","hex":"#50a400"},{"name":"Prairie Grove","hex":"#8e7d5d"},{"name":"Prairie House","hex":"#d3c9ad"},{"name":"Prairie Land","hex":"#e2cc9c"},{"name":"Prairie Poppy","hex":"#ae5f55"},{"name":"Prairie Rose","hex":"#f2c8be"},{"name":"Prairie Sage","hex":"#b3a98c"},{"name":"Prairie Sand","hex":"#883c32"},{"name":"Prairie Sky","hex":"#c6d7e0"},{"name":"Prairie Sun","hex":"#eea372"},{"name":"Prairie Sunset","hex":"#ffb199"},{"name":"Prairie Winds","hex":"#e8e6d9"},{"name":"Praise Giving","hex":"#b2b1ae"},{"name":"Praise of Shadow","hex":"#221155"},{"name":"Praise the Sun","hex":"#f3f4d9"},{"name":"Praline","hex":"#ad8b75"},{"name":"Prancer","hex":"#c58380"},{"name":"Praxeti White","hex":"#f6f7ed"},{"name":"Prayer Flag","hex":"#d59c6a"},{"name":"Praying Mantis","hex":"#a5be8f"},{"name":"Pre School","hex":"#b5c2cd"},{"name":"Pre-Raphaelite","hex":"#8b7f7a"},{"name":"Precious","hex":"#f1dab2"},{"name":"Precious Blue","hex":"#008389"},{"name":"Precious Copper","hex":"#885522"},{"name":"Precious Dewdrop","hex":"#f5f5e4"},{"name":"Precious Emerald","hex":"#186e50"},{"name":"Precious Garnet","hex":"#b7757c"},{"name":"Precious Nectar","hex":"#ffde9c"},{"name":"Precious Oxley","hex":"#6d9a79"},{"name":"Precious Pearls","hex":"#f1f0ef"},{"name":"Precious Peony","hex":"#bd4048"},{"name":"Precious Persimmon","hex":"#ff7744"},{"name":"Precious Pink","hex":"#f6b5b6"},{"name":"Precious Pumpkin","hex":"#e16233"},{"name":"Precious Stone","hex":"#328696"},{"name":"Precision","hex":"#2c3944"},{"name":"Precocious Red","hex":"#e8dee3"},{"name":"Predictable","hex":"#e5dbcb"},{"name":"Prediction","hex":"#6d6e7b"},{"name":"Prefect","hex":"#5772b0"},{"name":"Prehistoric Meteor","hex":"#ee2211"},{"name":"Prehistoric Pink","hex":"#c3738d"},{"name":"Prehistoric Stone","hex":"#9aa0a3"},{"name":"Prehistoric Wood","hex":"#5e5239"},{"name":"Prehnite Yellow","hex":"#d0a700"},{"name":"Prelude","hex":"#dfebee"},{"name":"Prelude to Pink","hex":"#e1deda"},{"name":"Premium Pink","hex":"#e6b6be"},{"name":"Preppy Rose","hex":"#d1668f"},{"name":"Preservation Plum","hex":"#665864"},{"name":"Preserve","hex":"#4a3c50"},{"name":"Preserved Petals","hex":"#b0655a"},{"name":"Presidential","hex":"#3e4d59"},{"name":"Presidio Peach","hex":"#ec9580"},{"name":"Presidio Plaza","hex":"#bb9174"},{"name":"Presley Purple","hex":"#634875"},{"name":"Press Agent","hex":"#606b77"},{"name":"Pressed Blossoms","hex":"#c2968b"},{"name":"Pressed Flower","hex":"#d492bd"},{"name":"Pressed Laser Lemon","hex":"#fefe22"},{"name":"Pressed Rose","hex":"#efaba6"},{"name":"Pressing my Luck","hex":"#00cc11"},{"name":"Prestige","hex":"#b8a7a0"},{"name":"Prestige Blue","hex":"#303742"},{"name":"Prestige Green","hex":"#154647"},{"name":"Prestige Mauve","hex":"#4c213d"},{"name":"Presumption","hex":"#5e6277"},{"name":"Pretentious Peacock","hex":"#4444ff"},{"name":"Prettiest Pink","hex":"#e5a3c5"},{"name":"Pretty in Pink","hex":"#fabfe4"},{"name":"Pretty in Plum","hex":"#cc5588"},{"name":"Pretty in Prune","hex":"#6b295a"},{"name":"Pretty Lady","hex":"#c3a1b6"},{"name":"Pretty Maiden","hex":"#849457"},{"name":"Pretty Pale","hex":"#e3c6d6"},{"name":"Pretty Parasol","hex":"#ac5d3e"},{"name":"Pretty Pastry","hex":"#dfcdb2"},{"name":"Pretty Petunia","hex":"#d6b7e2"},{"name":"Pretty Pink","hex":"#ebb3b2"},{"name":"Pretty Pink Piggy","hex":"#eeaadd"},{"name":"Pretty Please","hex":"#ffccc8"},{"name":"Pretty Posie","hex":"#bcbde4"},{"name":"Pretty Primrose","hex":"#f5a994"},{"name":"Pretty Puce","hex":"#7b6065"},{"name":"Pretty Purple","hex":"#c4bbd6"},{"name":"Pretty Twilight Night","hex":"#254770"},{"name":"Priceless Coral","hex":"#e5a68d"},{"name":"Priceless Purple","hex":"#46373f"},{"name":"Prickly Pear","hex":"#a89942"},{"name":"Prickly Pear Cactus","hex":"#69916e"},{"name":"Prickly Pink","hex":"#f42c93"},{"name":"Prickly Purple","hex":"#a264ba"},{"name":"Prim","hex":"#e2cdd5"},{"name":"Primal","hex":"#cba792"},{"name":"Primal Blue","hex":"#0081b5"},{"name":"Primal Green","hex":"#11875d"},{"name":"Primal Rage","hex":"#f4301c"},{"name":"Primal Red","hex":"#a92b4f"},{"name":"Primary Blue","hex":"#0804f9"},{"name":"Primavera","hex":"#6fa77a"},{"name":"Prime Blue","hex":"#0064a1"},{"name":"Prime Merchandise","hex":"#92b979"},{"name":"Prime Pink","hex":"#ff8d86"},{"name":"Prime Purple","hex":"#656293"},{"name":"Primitive","hex":"#685e4e"},{"name":"Primitive Green","hex":"#ded6ac"},{"name":"Primitive Plum","hex":"#663c55"},{"name":"Primo","hex":"#7cbc6c"},{"name":"Primrose","hex":"#d6859f"},{"name":"Primrose Garden","hex":"#f3949b"},{"name":"Primrose Path","hex":"#ffe262"},{"name":"Primrose Pink","hex":"#e7c2ca"},{"name":"Primrose White","hex":"#ece4d0"},{"name":"Primrose Yellow","hex":"#f6d155"},{"name":"Primula","hex":"#ca9fa5"},{"name":"Prince","hex":"#4b384c"},{"name":"Prince Charming","hex":"#cc2277"},{"name":"Prince Grey","hex":"#a0adac"},{"name":"Prince Paris","hex":"#9d7957"},{"name":"Prince Royal","hex":"#60606f"},{"name":"Princely","hex":"#7d4961"},{"name":"Princely Violet","hex":"#6d5c7b"},{"name":"Princess","hex":"#f0a8b5"},{"name":"Princess Blue","hex":"#0056a1"},{"name":"Princess Blue Feather","hex":"#cceeee"},{"name":"Princess Bride","hex":"#f4c1c1"},{"name":"Princess Elle","hex":"#f6e9ea"},{"name":"Princess Fairy Tale","hex":"#e5dbeb"},{"name":"Princess Ivory","hex":"#faead5"},{"name":"Princess Peach","hex":"#f878f8"},{"name":"Princess Perfume","hex":"#ff85cf"},{"name":"Princess Pink","hex":"#dfb5b0"},{"name":"Princeton Orange","hex":"#ff8f00"},{"name":"Priory","hex":"#756f54"},{"name":"Priscilla","hex":"#f1d3da"},{"name":"Prism","hex":"#aadccd"},{"name":"Prism Pink","hex":"#f0a1bf"},{"name":"Prism Violet","hex":"#53357d"},{"name":"Prismarine","hex":"#117777"},{"name":"Prismatic Pearl","hex":"#eae8dd"},{"name":"Prismatic Springs","hex":"#005c77"},{"name":"Prison Jumpsuit","hex":"#fdaa48"},{"name":"Pristine","hex":"#f2e8da"},{"name":"Pristine Oceanic","hex":"#00ccbb"},{"name":"Pristine Petal","hex":"#d5e1e0"},{"name":"Pristine Seas","hex":"#007799"},{"name":"Private Black","hex":"#4c4949"},{"name":"Private Eye","hex":"#006e89"},{"name":"Private Jet","hex":"#889db2"},{"name":"Private Tone","hex":"#845469"},{"name":"Private White","hex":"#f3ebd9"},{"name":"Privet Hedge","hex":"#588a79"},{"name":"Privilege Green","hex":"#7a8775"},{"name":"Privileged","hex":"#f3ead7"},{"name":"Privileged Elite","hex":"#597695"},{"name":"Prize Winning Orchid","hex":"#cc9dc6"},{"name":"Prized Celadon","hex":"#a2c0b9"},{"name":"Professor Plum","hex":"#393540"},{"name":"Profound Mauve","hex":"#40243d"},{"name":"Profound Pink","hex":"#c39297"},{"name":"Prom","hex":"#daa5aa"},{"name":"Prom Corsage","hex":"#e7c3e7"},{"name":"Prom Queen","hex":"#9b1dcd"},{"name":"Promenade","hex":"#f8f6df"},{"name":"Prometheus Orange","hex":"#f4581e"},{"name":"Prominent Blue","hex":"#2b7da6"},{"name":"Prominent Pink","hex":"#da9ec5"},{"name":"Promiscuous Pink","hex":"#bb11ee"},{"name":"Promise Keeping","hex":"#afc7e8"},{"name":"Promised Amethyst","hex":"#686278"},{"name":"Prompt","hex":"#5e7fb5"},{"name":"Proper Grey","hex":"#ada8a5"},{"name":"Proper Purple","hex":"#59476b"},{"name":"Proper Temperature","hex":"#ede5c7"},{"name":"Property","hex":"#4b5667"},{"name":"Prophet Violet","hex":"#6f58a6"},{"name":"Prophetess","hex":"#be8b8f"},{"name":"Prophetic Purple","hex":"#624f59"},{"name":"Prophetic Sea","hex":"#818b9c"},{"name":"Prosciutto","hex":"#e0b4a4"},{"name":"Prosecco","hex":"#fad6a5"},{"name":"Prospect","hex":"#62584b"},{"name":"Prosperity","hex":"#915f66"},{"name":"Protégé Bronze","hex":"#66543e"},{"name":"Protein High","hex":"#ff8866"},{"name":"Proton Red","hex":"#840804"},{"name":"Protoss Pylon","hex":"#00aaff"},{"name":"Provence","hex":"#658dc6"},{"name":"Provence Blue","hex":"#8a9c99"},{"name":"Provence Creme","hex":"#ffedcb"},{"name":"Provence Violet","hex":"#827191"},{"name":"Provincial","hex":"#a8aca2"},{"name":"Provincial Blue","hex":"#5e7b91"},{"name":"Provincial Pink","hex":"#f6e3da"},{"name":"Provocative","hex":"#4c5079"},{"name":"Prudence","hex":"#d4c6db"},{"name":"Prune","hex":"#701c11"},{"name":"Prune Plum","hex":"#211640"},{"name":"Prune Purple","hex":"#6c445b"},{"name":"Prunella","hex":"#864788"},{"name":"Prunelle","hex":"#220878"},{"name":"Prunus Avium","hex":"#dd4492"},{"name":"Prussian","hex":"#3f585f"},{"name":"Prussian Blue","hex":"#003366"},{"name":"Prussian Nights","hex":"#0b085f"},{"name":"Prussian Plum","hex":"#6f4b5c"},{"name":"Psychedelic Purple","hex":"#dd00ff"},{"name":"Psychic","hex":"#625981"},{"name":"Pú Táo Zǐ Purple","hex":"#ce5dae"},{"name":"Puce","hex":"#cc8899"},{"name":"Pucker Up","hex":"#ff1177"},{"name":"Puddle","hex":"#c8b69e"},{"name":"Puddle Jumper","hex":"#6a8389"},{"name":"Pueblo","hex":"#6e3326"},{"name":"Pueblo Rose","hex":"#e9786e"},{"name":"Pueblo Sand","hex":"#e7c3a4"},{"name":"Pueblo White","hex":"#e5dfcd"},{"name":"Puerto Princesa","hex":"#54927e"},{"name":"Puerto Rico","hex":"#59baa3"},{"name":"Puff Dragon","hex":"#635940"},{"name":"Puff of Pink","hex":"#ffcbee"},{"name":"Puff Pastry Yellow","hex":"#fccf8b"},{"name":"Puffball","hex":"#ccbfc9"},{"name":"Puffball Vapour","hex":"#e2dadf"},{"name":"Puffins Bill","hex":"#e95c20"},{"name":"Puffy Cloud","hex":"#d2def2"},{"name":"Puffy Little Cloud","hex":"#d7edea"},{"name":"Puffy Pillow","hex":"#e8e5de"},{"name":"Puissant Purple","hex":"#7722cc"},{"name":"Pulled Taffy","hex":"#f1d6bc"},{"name":"Pullman Brown","hex":"#644117"},{"name":"Pullman Green","hex":"#3b331c"},{"name":"Pulp","hex":"#e18289"},{"name":"Pulsating Blue","hex":"#01678d"},{"name":"Puma","hex":"#96711c"},{"name":"Pumice","hex":"#bac0b4"},{"name":"Pumice Grey","hex":"#807375"},{"name":"Pumice Stone","hex":"#cac2b9"},{"name":"Pumpernickel Brown","hex":"#6c462d"},{"name":"Pumping Spice","hex":"#f7504a"},{"name":"Pumpkin","hex":"#ff7518"},{"name":"Pumpkin Bread","hex":"#d27d46"},{"name":"Pumpkin Butter","hex":"#cba077"},{"name":"Pumpkin Cat","hex":"#eb7b07"},{"name":"Pumpkin Choco","hex":"#8d2d13"},{"name":"Pumpkin Cream","hex":"#e6c8a9"},{"name":"Pumpkin Drizzle","hex":"#b96846"},{"name":"Pumpkin Essence","hex":"#f7dac0"},{"name":"Pumpkin Green","hex":"#286848"},{"name":"Pumpkin Green Black","hex":"#183425"},{"name":"Pumpkin Hue","hex":"#f6a379"},{"name":"Pumpkin Mousse","hex":"#f2c3a7"},{"name":"Pumpkin Orange","hex":"#fb7d07"},{"name":"Pumpkin Patch","hex":"#d59466"},{"name":"Pumpkin Pie","hex":"#e99e56"},{"name":"Pumpkin Seed","hex":"#fffdd8"},{"name":"Pumpkin Soup","hex":"#e17701"},{"name":"Pumpkin Spice","hex":"#b2691a"},{"name":"Pumpkin Toast","hex":"#de9456"},{"name":"Pumpkin Vapour","hex":"#ffa74f"},{"name":"Pumpkin Yellow","hex":"#e99a10"},{"name":"Punch","hex":"#dc4333"},{"name":"Punch of Pink","hex":"#b68692"},{"name":"Punch of Yellow","hex":"#ecd086"},{"name":"Punch Out Glove","hex":"#6888fc"},{"name":"Punchit Purple","hex":"#56414d"},{"name":"Punctuate","hex":"#856b71"},{"name":"Punga","hex":"#534931"},{"name":"Punk Rock Pink","hex":"#8811ff"},{"name":"Punk Rock Purple","hex":"#bb11aa"},{"name":"Punky Pink","hex":"#b2485b"},{"name":"Pupil","hex":"#070303"},{"name":"Puppeteers","hex":"#79ccb3"},{"name":"Puppy","hex":"#bcaea0"},{"name":"Puppy Love","hex":"#e2babf"},{"name":"Purception","hex":"#c687d6"},{"name":"Pure Apple","hex":"#6ab54b"},{"name":"Pure Beige","hex":"#e9d0c4"},{"name":"Pure Black","hex":"#595652"},{"name":"Pure Blue","hex":"#0203e2"},{"name":"Pure Cashmere","hex":"#aba093"},{"name":"Pure Cyan","hex":"#36bfa8"},{"name":"Pure Earth","hex":"#a79480"},{"name":"Pure Frost","hex":"#faeae1"},{"name":"Pure Hedonist","hex":"#ff2255"},{"name":"Pure Laughter","hex":"#fdf5ca"},{"name":"Pure Light Blue","hex":"#036c91"},{"name":"Pure Mauve","hex":"#6f5390"},{"name":"Pure Midnight","hex":"#112266"},{"name":"Pure Passion","hex":"#b40039"},{"name":"Pure Pleasure","hex":"#f51360"},{"name":"Pure Purple","hex":"#751973"},{"name":"Pure Red","hex":"#d22d1d"},{"name":"Pure Sunshine","hex":"#ffee15"},{"name":"Pure Turquoise","hex":"#7abec2"},{"name":"Pure White","hex":"#f8f8f2"},{"name":"Pure Woody","hex":"#58503c"},{"name":"Pure Zeal","hex":"#615753"},{"name":"Purebred","hex":"#67707d"},{"name":"Pureed Pumpkin","hex":"#c74222"},{"name":"Purehearted","hex":"#e66771"},{"name":"Purification","hex":"#c3dce9"},{"name":"Puritan Grey","hex":"#a8b0ae"},{"name":"Purity","hex":"#d7c9e3"},{"name":"Purple","hex":"#800080"},{"name":"Purple Agate","hex":"#988eb4"},{"name":"Purple Amethyst","hex":"#9190ba"},{"name":"Purple Anemone","hex":"#8866ff"},{"name":"Purple Anxiety","hex":"#c20078"},{"name":"Purple Ash","hex":"#8f8395"},{"name":"Purple Balance","hex":"#9d9eb4"},{"name":"Purple Balloon","hex":"#625b87"},{"name":"Purple Basil","hex":"#5c4450"},{"name":"Purple Berry","hex":"#4c4a74"},{"name":"Purple Blanket","hex":"#4a455d"},{"name":"Purple Bloom","hex":"#544258"},{"name":"Purple Blue","hex":"#661aee"},{"name":"Purple Brown","hex":"#673a3f"},{"name":"Purple Cabbage","hex":"#3d34a5"},{"name":"Purple Cactus Flower","hex":"#a83a9a"},{"name":"Purple Chalk","hex":"#c4adc9"},{"name":"Purple Cheeks","hex":"#b67ca2"},{"name":"Purple Climax","hex":"#8800ff"},{"name":"Purple Comet","hex":"#6e6970"},{"name":"Purple Corallite","hex":"#5a4e8f"},{"name":"Purple Cort","hex":"#593c50"},{"name":"Purple Cream","hex":"#d7cbd7"},{"name":"Purple Crystal","hex":"#e7e7eb"},{"name":"Purple Curse","hex":"#771166"},{"name":"Purple Daze","hex":"#63647e"},{"name":"Purple Door","hex":"#331144"},{"name":"Purple Dove","hex":"#917f84"},{"name":"Purple Drab","hex":"#754260"},{"name":"Purple Dragon","hex":"#c6bedd"},{"name":"Purple Dreamer","hex":"#660066"},{"name":"Purple Dusk","hex":"#7c6b76"},{"name":"Purple Emperor","hex":"#6633bb"},{"name":"Purple Empire","hex":"#5a4d55"},{"name":"Purple Emulsion","hex":"#eadce2"},{"name":"Purple Essence","hex":"#c2b1c8"},{"name":"Purple Excellency","hex":"#943589"},{"name":"Purple Feather","hex":"#594670"},{"name":"Purple Feather Boa","hex":"#880099"},{"name":"Purple Gentian","hex":"#8397d0"},{"name":"Purple Gladiola","hex":"#c1abd4"},{"name":"Purple Grapes","hex":"#736993"},{"name":"Purple Grey","hex":"#866f85"},{"name":"Purple Gumball","hex":"#6a6283"},{"name":"Purple Gumdrop","hex":"#835f79"},{"name":"Purple Haze","hex":"#807396"},{"name":"Purple Heart","hex":"#69359c"},{"name":"Purple Heart Kiwi","hex":"#cc2288"},{"name":"Purple Heather","hex":"#bab8d3"},{"name":"Purple Hebe","hex":"#8773bb"},{"name":"Purple Hedonist","hex":"#aa66ff"},{"name":"Purple Hepatica","hex":"#ccaaff"},{"name":"Purple Hollyhock","hex":"#d96cad"},{"name":"Purple Honeycreeper","hex":"#8855ff"},{"name":"Purple Hyacinth","hex":"#6e8fc0"},{"name":"Purple Illusion","hex":"#b8b8f8"},{"name":"Purple Illusionist","hex":"#a675fe"},{"name":"Purple Impression","hex":"#7c89ab"},{"name":"Purple Ink","hex":"#9a2ca0"},{"name":"Purple Kasbah","hex":"#73626f"},{"name":"Purple Kite","hex":"#512c31"},{"name":"Purple Kush","hex":"#cc77cc"},{"name":"Purple Lepidolite","hex":"#b88aac"},{"name":"Purple Magic","hex":"#653475"},{"name":"Purple Mauve","hex":"#9a8891"},{"name":"Purple Mountain Majesty","hex":"#7a70a8"},{"name":"Purple Mountains Majesty","hex":"#9678b6"},{"name":"Purple Mountains’ Majesty","hex":"#9d81ba"},{"name":"Purple Mystery","hex":"#815989"},{"name":"Purple Navy","hex":"#4e5180"},{"name":"Purple Noir","hex":"#322c56"},{"name":"Purple Ode","hex":"#40507a"},{"name":"Purple Odyssey","hex":"#643e65"},{"name":"Purple Opulence","hex":"#60569a"},{"name":"Purple Orchid","hex":"#ad4d8c"},{"name":"Purple Paradise","hex":"#79669d"},{"name":"Purple Passage","hex":"#645e77"},{"name":"Purple Passion","hex":"#784674"},{"name":"Purple Pennant","hex":"#452e4a"},{"name":"Purple People Eater","hex":"#5b4763"},{"name":"Purple Peril","hex":"#903f75"},{"name":"Purple Pink","hex":"#c83cb9"},{"name":"Purple Pirate","hex":"#bb00aa"},{"name":"Purple Pizzazz","hex":"#fe4eda"},{"name":"Purple Pj\'s","hex":"#c7cee8"},{"name":"Purple Pleasures","hex":"#81459e"},{"name":"Purple Plum","hex":"#9c51b6"},{"name":"Purple Plumeria","hex":"#473854"},{"name":"Purple Poodle","hex":"#dab4cc"},{"name":"Purple Pool","hex":"#4c4976"},{"name":"Purple Potion","hex":"#aa00aa"},{"name":"Purple Premiere","hex":"#b9a0d2"},{"name":"Purple Pride","hex":"#a274b5"},{"name":"Purple Prince","hex":"#5b4d54"},{"name":"Purple Pristine","hex":"#7733aa"},{"name":"Purple Prophet","hex":"#bb9eca"},{"name":"Purple Prose","hex":"#543254"},{"name":"Purple Protégé","hex":"#593569"},{"name":"Purple Protest","hex":"#8822dd"},{"name":"Purple Province","hex":"#523e49"},{"name":"Purple Punch","hex":"#696374"},{"name":"Purple Purity","hex":"#c9c6df"},{"name":"Purple Ragwort","hex":"#8c8798"},{"name":"Purple Rain","hex":"#7442c8"},{"name":"Purple Red","hex":"#990147"},{"name":"Purple Reign","hex":"#5c4971"},{"name":"Purple Rhapsody","hex":"#8278ad"},{"name":"Purple Rose","hex":"#af9fca"},{"name":"Purple Rubiate","hex":"#8b7880"},{"name":"Purple Sage","hex":"#75697e"},{"name":"Purple Sand","hex":"#c2b2f0"},{"name":"Purple Sapphire","hex":"#754b8f"},{"name":"Purple Shade","hex":"#4e2e53"},{"name":"Purple Shine","hex":"#c8bad4"},{"name":"Purple Silhouette","hex":"#776d90"},{"name":"Purple Sky","hex":"#62547e"},{"name":"Purple Snail","hex":"#cc69e4"},{"name":"Purple Sphinx","hex":"#563948"},{"name":"Purple Spire","hex":"#746f9d"},{"name":"Purple Spot","hex":"#652dc1"},{"name":"Purple Springs","hex":"#ab9bbc"},{"name":"Purple Squid","hex":"#845998"},{"name":"Purple Starburst","hex":"#b16d90"},{"name":"Purple Statement","hex":"#6e5755"},{"name":"Purple Statice","hex":"#a885b5"},{"name":"Purple Stiletto","hex":"#624154"},{"name":"Purple Stone","hex":"#605467"},{"name":"Purple Sultan","hex":"#853682"},{"name":"Purple Surf","hex":"#9b95a9"},{"name":"Purple Tanzanite","hex":"#835995"},{"name":"Purple Taupe","hex":"#50404d"},{"name":"Purple Thorn","hex":"#f0b9be"},{"name":"Purple Tone Ink","hex":"#a22da4"},{"name":"Purple Toolbox","hex":"#746cc0"},{"name":"Purple Trinket","hex":"#665261"},{"name":"Purple Urn Orchid","hex":"#c364c5"},{"name":"Purple Vanity","hex":"#9932cc"},{"name":"Purple Veil","hex":"#d3d5e0"},{"name":"Purple Velour","hex":"#581a57"},{"name":"Purple Velvet","hex":"#483b56"},{"name":"Purple Verbena","hex":"#46354b"},{"name":"Purple Vision","hex":"#a29cc8"},{"name":"Purple Void","hex":"#442244"},{"name":"Purple White","hex":"#d3c2cf"},{"name":"Purple Wine","hex":"#97397f"},{"name":"Purple Wineberry","hex":"#5a395b"},{"name":"Purple Yearning","hex":"#dd1166"},{"name":"Purple Zergling","hex":"#a15589"},{"name":"Purple\'s Baby Sister","hex":"#eec3ee"},{"name":"Purpletini","hex":"#b6c4dd"},{"name":"Purpletone","hex":"#837f92"},{"name":"Purplex","hex":"#602287"},{"name":"Purplish","hex":"#98568d"},{"name":"Purplish Blue","hex":"#6140ef"},{"name":"Purplish Brown","hex":"#6b4247"},{"name":"Purplish Grey","hex":"#7a687f"},{"name":"Purplish Pink","hex":"#df4ec8"},{"name":"Purplish Red","hex":"#b0054b"},{"name":"Purplish White","hex":"#dfd3e3"},{"name":"Purplue","hex":"#5e0dc2"},{"name":"Purposeful","hex":"#776c76"},{"name":"Purpura","hex":"#8d8485"},{"name":"Purpureus","hex":"#9a4eae"},{"name":"Purpurite Red","hex":"#864480"},{"name":"Purpurite Violet","hex":"#57385e"},{"name":"Purri Sticks","hex":"#898078"},{"name":"Purslane","hex":"#879f6c"},{"name":"Pussyfoot","hex":"#cebada"},{"name":"Pussywillow","hex":"#b2ada4"},{"name":"Pussywillow Grey","hex":"#a2a193"},{"name":"Put on Ice","hex":"#c8ddea"},{"name":"Putnam Plum","hex":"#8d4362"},{"name":"Putrid Green","hex":"#89a572"},{"name":"Putting Bench","hex":"#f1e4c9"},{"name":"Putting Green","hex":"#3a9234"},{"name":"Putty","hex":"#cdae70"},{"name":"Putty Grey","hex":"#bda89c"},{"name":"Putty Pearl","hex":"#a99891"},{"name":"Putty Yellow","hex":"#9d8e7f"},{"name":"Puturple","hex":"#ada2ce"},{"name":"Puyo Blob Green","hex":"#55ff55"},{"name":"Pygmy Goat","hex":"#d6d0cf"},{"name":"Pyjama Blue","hex":"#6299aa"},{"name":"Pylon","hex":"#9fbadf"},{"name":"Pyramid","hex":"#9f7d4f"},{"name":"Pyramid Gold","hex":"#e5b572"},{"name":"Pyrite","hex":"#f8c642"},{"name":"Pyrite Gold","hex":"#ac9362"},{"name":"Pyrite Green","hex":"#3a6364"},{"name":"Pyrite Slate Green","hex":"#867452"},{"name":"Pyrite Yellow","hex":"#c4bf33"},{"name":"Python Blue","hex":"#3776ab"},{"name":"Python Yellow","hex":"#ffd343"},{"name":"Qahvei Brown","hex":"#7b5804"},{"name":"Qermez Red","hex":"#cf3c71"},{"name":"Qiān Hūi Grey","hex":"#89a0b0"},{"name":"Qing Dynasty Dragon","hex":"#4455ee"},{"name":"Qing Dynasty Fire","hex":"#dd2266"},{"name":"Qing Yellow","hex":"#ffcc66"},{"name":"Quack Quack","hex":"#ffe989"},{"name":"Quagmire Green","hex":"#998811"},{"name":"Quail","hex":"#96838b"},{"name":"Quail Egg","hex":"#e3ddce"},{"name":"Quail Hollow","hex":"#5c4e53"},{"name":"Quail Ridge","hex":"#aca397"},{"name":"Quail Valley","hex":"#ab9673"},{"name":"Quaint Peche","hex":"#eacdc1"},{"name":"Quaking Grass","hex":"#bbc6a4"},{"name":"Quantum Blue","hex":"#6e799b"},{"name":"Quantum Effect","hex":"#b2ddc4"},{"name":"Quantum Green","hex":"#7c948b"},{"name":"Quantum of Light","hex":"#130173"},{"name":"Quark White","hex":"#e7f1e6"},{"name":"Quarried Limestone","hex":"#ebe6d5"},{"name":"Quarry","hex":"#8a9399"},{"name":"Quarry Quartz","hex":"#af9a91"},{"name":"Quarter Pearl Lusta","hex":"#f2eddd"},{"name":"Quarter Spanish White","hex":"#ebe2d2"},{"name":"Quarterdeck","hex":"#1272a3"},{"name":"Quartersawn Oak","hex":"#85695b"},{"name":"Quartz","hex":"#d9d9f3"},{"name":"Quartz Green","hex":"#6e7c45"},{"name":"Quartz Pink","hex":"#ed999e"},{"name":"Quartz Sand","hex":"#a9aaab"},{"name":"Quartz Stone","hex":"#e8e8e5"},{"name":"Quartz White","hex":"#f3e8e1"},{"name":"Quartzite","hex":"#232e26"},{"name":"Quarzo","hex":"#c7d0da"},{"name":"Quaver","hex":"#bed3cb"},{"name":"Queen Anne Lilac","hex":"#c0b6b4"},{"name":"Queen Anne\'s Lace","hex":"#f2eede"},{"name":"Queen Blue","hex":"#436b95"},{"name":"Queen Conch Shell","hex":"#e8bc95"},{"name":"Queen Lioness","hex":"#77613d"},{"name":"Queen of Gardens","hex":"#bbdd55"},{"name":"Queen of Hearts","hex":"#98333a"},{"name":"Queen of Sheba","hex":"#817699"},{"name":"Queen of the Night","hex":"#295776"},{"name":"Queen of Trees","hex":"#1c401f"},{"name":"Queen Palm","hex":"#ad9e4b"},{"name":"Queen Pink","hex":"#e8ccd7"},{"name":"Queen Valley","hex":"#6c7068"},{"name":"Queen\'s","hex":"#7b6fa0"},{"name":"Queen\'s Coat","hex":"#9d433f"},{"name":"Queen\'s Honour","hex":"#8b5776"},{"name":"Queen\'s Rose","hex":"#753a40"},{"name":"Queen\'s Tart","hex":"#d3bcc5"},{"name":"Queen\'s Violet","hex":"#cdb9c4"},{"name":"Queenly","hex":"#d3acce"},{"name":"Queenly Laugh","hex":"#f9ecd0"},{"name":"Queer Blue","hex":"#88ace0"},{"name":"Queer Purple","hex":"#b36ff6"},{"name":"Quench Blue","hex":"#b4e0e7"},{"name":"Quest","hex":"#bdc1c1"},{"name":"Quest Grey","hex":"#ada5a5"},{"name":"Question Mark Block","hex":"#ef9a49"},{"name":"Quetzal Green","hex":"#006868"},{"name":"Quibble","hex":"#b393c0"},{"name":"Quiche Lorraine","hex":"#fed56f"},{"name":"Quick-Freeze","hex":"#bddbe1"},{"name":"Quicksand","hex":"#ac9884"},{"name":"Quicksilver","hex":"#a6a6a6"},{"name":"Quiet Abyss","hex":"#160435"},{"name":"Quiet Bay","hex":"#6597cc"},{"name":"Quiet Cove","hex":"#017aa6"},{"name":"Quiet Drizzle","hex":"#b7d0c5"},{"name":"Quiet Green","hex":"#9ebc97"},{"name":"Quiet Grey","hex":"#b9babd"},{"name":"Quiet Harbour","hex":"#5a789a"},{"name":"Quiet Moment","hex":"#96aeb0"},{"name":"Quiet Night","hex":"#3e8fbc"},{"name":"Quiet on the Set","hex":"#e4e2dd"},{"name":"Quiet Peace","hex":"#3a4a64"},{"name":"Quiet Pink","hex":"#dba39a"},{"name":"Quiet Pond","hex":"#94d8e2"},{"name":"Quiet Rain","hex":"#e7efcf"},{"name":"Quiet Refuge","hex":"#b69c97"},{"name":"Quiet Shade","hex":"#686970"},{"name":"Quiet Shore","hex":"#f5ebd6"},{"name":"Quiet Splendor","hex":"#fae6ca"},{"name":"Quiet Star","hex":"#eecc9f"},{"name":"Quiet Storm","hex":"#2f596d"},{"name":"Quiet Teal","hex":"#a9bab1"},{"name":"Quiet Time","hex":"#b8bcb8"},{"name":"Quiet Veranda","hex":"#ebd2a7"},{"name":"Quiet Whisper","hex":"#f1f3e8"},{"name":"Quietude","hex":"#adbbb2"},{"name":"Quill Grey","hex":"#cbc9c0"},{"name":"Quill Tip","hex":"#2d3359"},{"name":"Quills of Terico","hex":"#612741"},{"name":"Quilotoa Blue","hex":"#7f9daf"},{"name":"Quilotoa Green","hex":"#70a38d"},{"name":"Quilt","hex":"#fcd9c6"},{"name":"Quilt Gold","hex":"#eac365"},{"name":"Quinacridone Magenta","hex":"#8e3a59"},{"name":"Quince","hex":"#d4cb60"},{"name":"Quince Jelly","hex":"#f89330"},{"name":"Quincy","hex":"#6a5445"},{"name":"Quincy Granite","hex":"#b5b5af"},{"name":"Quinoa","hex":"#f9ecd1"},{"name":"Quinoline Yellow","hex":"#f5e326"},{"name":"Quintana","hex":"#008ca9"},{"name":"Quintessential","hex":"#c2dbc6"},{"name":"Quite Coral","hex":"#c76356"},{"name":"Quithayran Green","hex":"#9be510"},{"name":"Quiver","hex":"#886037"},{"name":"Quiver Tan","hex":"#8e7f6a"},{"name":"Quixotic","hex":"#948491"},{"name":"Quixotic Plum","hex":"#4a4653"},{"name":"Rabbit","hex":"#5f575c"},{"name":"Rabbit Paws","hex":"#885d62"},{"name":"Rabbit-Ear Iris","hex":"#491e3c"},{"name":"Raccoon Tail","hex":"#735e56"},{"name":"Race Car Stripe","hex":"#cf4944"},{"name":"Race the Sun","hex":"#eef3d0"},{"name":"Race Track","hex":"#cbbeb5"},{"name":"Rachel Pink","hex":"#e8b9ae"},{"name":"Racing Green","hex":"#014600"},{"name":"Racing Red","hex":"#c21727"},{"name":"Rackham Red","hex":"#d6341e"},{"name":"Rackley","hex":"#5d8aaa"},{"name":"Racoon Eyes","hex":"#776a3c"},{"name":"Radar","hex":"#b6c8e4"},{"name":"Radar Blip Green","hex":"#96f97b"},{"name":"Radiance","hex":"#bb9157"},{"name":"Radiant Dawn","hex":"#ece2ce"},{"name":"Radiant Glow","hex":"#ffeed2"},{"name":"Radiant Hulk","hex":"#10f144"},{"name":"Radiant Lilac","hex":"#a489a0"},{"name":"Radiant Orchid","hex":"#ad5e99"},{"name":"Radiant Rose","hex":"#eed5d4"},{"name":"Radiant Rouge","hex":"#d7b1b2"},{"name":"Radiant Silver","hex":"#8f979d"},{"name":"Radiant Sun","hex":"#f0cc50"},{"name":"Radiant Sunrise","hex":"#eebe1b"},{"name":"Radiant Yellow","hex":"#fc9e21"},{"name":"Radiation Carrot","hex":"#ffa343"},{"name":"Radical Green","hex":"#326a2b"},{"name":"Radical Red","hex":"#ff355e"},{"name":"Radicchio","hex":"#745166"},{"name":"Radigan Conagher Brown","hex":"#694d3a"},{"name":"Radioactive","hex":"#89fe05"},{"name":"Radioactive Eggplant","hex":"#f9006f"},{"name":"Radioactive Green","hex":"#2cfa1f"},{"name":"Radioactive Lilypad","hex":"#66dd00"},{"name":"Radish","hex":"#a42e41"},{"name":"Radish Lips","hex":"#ee3355"},{"name":"Radishical","hex":"#ec4872"},{"name":"Radisson","hex":"#e5e7e6"},{"name":"Radium","hex":"#7fff00"},{"name":"Radler","hex":"#ffd15c"},{"name":"Radome Tan","hex":"#f1c7a1"},{"name":"Raffia","hex":"#dcc6a0"},{"name":"Raffia Cream","hex":"#cda09a"},{"name":"Raffia Greige","hex":"#b3a996"},{"name":"Raffia Light Grey","hex":"#cbd9d8"},{"name":"Raffia Ribbon","hex":"#cbb08c"},{"name":"Raffia White","hex":"#eeeee3"},{"name":"Raffles Tan","hex":"#ca9a5d"},{"name":"Raftsman","hex":"#3c5f9b"},{"name":"Rage","hex":"#ff1133"},{"name":"Rage of Quel\'Danas","hex":"#f32507"},{"name":"Ragin\' Cajun","hex":"#8d514c"},{"name":"Raging Bull","hex":"#b54e45"},{"name":"Raging Leaf","hex":"#dd5500"},{"name":"Raging Raisin","hex":"#aa3333"},{"name":"Raging Sea","hex":"#8d969e"},{"name":"Raging Tide","hex":"#5187a0"},{"name":"Ragtime Blues","hex":"#4a5e6c"},{"name":"Ragweed","hex":"#7be892"},{"name":"Raichu Orange","hex":"#f6ad3a"},{"name":"Raiden Blue","hex":"#0056a8"},{"name":"Raiden\'s Fury","hex":"#e34029"},{"name":"Railroad Ties","hex":"#544540"},{"name":"Rain","hex":"#abbebf"},{"name":"Rain Barrel","hex":"#8b795f"},{"name":"Rain Boots","hex":"#354d65"},{"name":"Rain Check","hex":"#b6d5de"},{"name":"Rain Cloud","hex":"#919fa1"},{"name":"Rain Dance","hex":"#a9ccdb"},{"name":"Rain Drop","hex":"#e7eee8"},{"name":"Rain Drum","hex":"#685346"},{"name":"Rain or Shine","hex":"#b5dcea"},{"name":"Rain Shadow","hex":"#677276"},{"name":"Rain Slicker","hex":"#bca849"},{"name":"Rain Song","hex":"#c5d5e9"},{"name":"Rain Storm","hex":"#3e5964"},{"name":"Rain Washed","hex":"#bed4d2"},{"name":"Rain Water","hex":"#d6e5eb"},{"name":"Rainbow","hex":"#f6bfbc"},{"name":"Rainbow Bright","hex":"#2863ad"},{"name":"Rainbow Trout","hex":"#ff975c"},{"name":"Rainbow\'s Inner Rim","hex":"#ff09ff"},{"name":"Rainbow\'s Outer Rim","hex":"#ff0001"},{"name":"Raindance","hex":"#819392"},{"name":"Raindrop","hex":"#9ec6c6"},{"name":"Raindrops","hex":"#ece5e1"},{"name":"Rainee","hex":"#b3c1b1"},{"name":"Rainford","hex":"#759180"},{"name":"Rainforest","hex":"#009a70"},{"name":"Rainforest Dew","hex":"#e6dab1"},{"name":"Rainforest Fern","hex":"#cec192"},{"name":"Rainforest Glow","hex":"#b2c346"},{"name":"Rainforest Nights","hex":"#002200"},{"name":"Rainforest Zipline","hex":"#7f795f"},{"name":"Rainier Blue","hex":"#558484"},{"name":"Rainmaker","hex":"#485769"},{"name":"Rainmaster","hex":"#9ca4a9"},{"name":"Rainsong","hex":"#acbdb1"},{"name":"Rainstorm","hex":"#244653"},{"name":"Rainwashed","hex":"#c2cdc5"},{"name":"Rainwater","hex":"#87d9d2"},{"name":"Rainy Afternoon","hex":"#889a95"},{"name":"Rainy Day","hex":"#cfc8bd"},{"name":"Rainy Grey","hex":"#a5a5a5"},{"name":"Rainy Lake","hex":"#3f6c8f"},{"name":"Rainy Mood","hex":"#4499aa"},{"name":"Rainy Morning","hex":"#005566"},{"name":"Rainy Season","hex":"#d1d8d6"},{"name":"Rainy Sidewalk","hex":"#9bafbb"},{"name":"Rainy Week","hex":"#99bbdd"},{"name":"Raisin","hex":"#5d4a4e"},{"name":"Raisin Black","hex":"#242124"},{"name":"Raisin in the Sun","hex":"#78615c"},{"name":"Rajah","hex":"#fbab60"},{"name":"Rajah Rose","hex":"#e6d9e2"},{"name":"Raked Leaves","hex":"#957d48"},{"name":"Rakuda Brown","hex":"#bf794e"},{"name":"Rally Green","hex":"#7ec083"},{"name":"Ramadi Grey","hex":"#b7a9ac"},{"name":"Rambling Green","hex":"#5a804f"},{"name":"Rambling Rose","hex":"#d98899"},{"name":"Ramie","hex":"#cdbda2"},{"name":"Ramjet","hex":"#4c73af"},{"name":"Ramona","hex":"#8f9a88"},{"name":"Rampant Rhubarb","hex":"#603231"},{"name":"Rampart","hex":"#bcb7b1"},{"name":"Ramsons","hex":"#195456"},{"name":"Ranch Acres","hex":"#f3e7cf"},{"name":"Ranch Brown","hex":"#9e7454"},{"name":"Ranch House","hex":"#7b645a"},{"name":"Ranch Mink","hex":"#968379"},{"name":"Ranch Tan","hex":"#c8b7a1"},{"name":"Rancho Verde","hex":"#dfd8b3"},{"name":"Rand Moon","hex":"#b7b7b4"},{"name":"Randall","hex":"#756e60"},{"name":"Range Land","hex":"#68bd56"},{"name":"Ranger Green","hex":"#6a8472"},{"name":"Ranger Station","hex":"#707651"},{"name":"Rangitoto","hex":"#2e3222"},{"name":"Rangoon Green","hex":"#2b2e25"},{"name":"Ranier White","hex":"#f7ecd8"},{"name":"Ranunculus White","hex":"#f5dde6"},{"name":"Rapakivi Granite","hex":"#d28239"},{"name":"Rapeseed","hex":"#c19a13"},{"name":"Rapeseed Blossom","hex":"#ffec47"},{"name":"Rapeseed Oil","hex":"#a69425"},{"name":"Rapid Rock","hex":"#a39281"},{"name":"Rapier Silver","hex":"#d8dfda"},{"name":"Rapt","hex":"#45363a"},{"name":"Rapture","hex":"#114444"},{"name":"Rapture Blue","hex":"#a7d6dd"},{"name":"Rapture Rose","hex":"#cf5a70"},{"name":"Rapture\'s Light","hex":"#f6f3e7"},{"name":"Rapunzel","hex":"#f6d77f"},{"name":"Rapunzel Silver","hex":"#d2d2d4"},{"name":"Rare Blue","hex":"#0044ff"},{"name":"Rare Crystal","hex":"#e1dee8"},{"name":"Rare Find","hex":"#ac8044"},{"name":"Rare Grey","hex":"#a6a69b"},{"name":"Rare Happening","hex":"#8daca0"},{"name":"Rare Orchid","hex":"#dbdce2"},{"name":"Rare Red","hex":"#dd1133"},{"name":"Rare Rhubarb","hex":"#cc0022"},{"name":"Rare Turquoise","hex":"#00748e"},{"name":"Rare White Jade","hex":"#e8e9cc"},{"name":"Rare White Raven","hex":"#e8dbdf"},{"name":"Rare Wind","hex":"#55ffcc"},{"name":"Rare Wood","hex":"#594c42"},{"name":"Rarified Air","hex":"#e1e6e6"},{"name":"Raspberry","hex":"#b00149"},{"name":"Raspberry Crush","hex":"#875169"},{"name":"Raspberry Fool","hex":"#8e3643"},{"name":"Raspberry Glace","hex":"#915f6c"},{"name":"Raspberry Glaze","hex":"#ff77aa"},{"name":"Raspberry Ice","hex":"#d9ccc7"},{"name":"Raspberry Ice Red","hex":"#9f3753"},{"name":"Raspberry Jam","hex":"#ca3767"},{"name":"Raspberry Jelly Red","hex":"#9b6287"},{"name":"Raspberry Kahlua","hex":"#c9a196"},{"name":"Raspberry Leaf Green","hex":"#044f3b"},{"name":"Raspberry Lemonade","hex":"#e1aaaf"},{"name":"Raspberry Magenta","hex":"#9a1a60"},{"name":"Raspberry Milk","hex":"#ebd2d1"},{"name":"Raspberry Mousse","hex":"#e06f8b"},{"name":"Raspberry Parfait","hex":"#b96482"},{"name":"Raspberry Patch","hex":"#a34f66"},{"name":"Raspberry Pink","hex":"#e25098"},{"name":"Raspberry Pudding","hex":"#94435a"},{"name":"Raspberry Radiance","hex":"#882d50"},{"name":"Raspberry Ripple","hex":"#cd827d"},{"name":"Raspberry Romantic","hex":"#972b51"},{"name":"Raspberry Rose","hex":"#b3436c"},{"name":"Raspberry Shortcake","hex":"#ff3888"},{"name":"Raspberry Smoothie","hex":"#d0a1b4"},{"name":"Raspberry Sorbet","hex":"#d2386c"},{"name":"Raspberry Truffle","hex":"#8a5d55"},{"name":"Raspberry Whip","hex":"#b3737f"},{"name":"Raspberry Wine","hex":"#b63753"},{"name":"Raspberry Yogurt","hex":"#e30b5d"},{"name":"Rat Brown","hex":"#885f01"},{"name":"Rationality","hex":"#6f6138"},{"name":"Rattan","hex":"#a58e61"},{"name":"Rattan Basket","hex":"#a79069"},{"name":"Rattan Palm","hex":"#8f876b"},{"name":"Rattlesnake","hex":"#7f7667"},{"name":"Raucous Orange","hex":"#c35530"},{"name":"Rave Raisin","hex":"#54463f"},{"name":"Rave Red","hex":"#a13b34"},{"name":"Rave Regatta","hex":"#00619d"},{"name":"Raven","hex":"#0b0b0b"},{"name":"Raven Black","hex":"#3d3d3d"},{"name":"Raven Grey","hex":"#6f747b"},{"name":"Raven Night","hex":"#3b3f66"},{"name":"Raven\'s Banquet","hex":"#bb2255"},{"name":"Raven\'s Coat","hex":"#030205"},{"name":"Raven’s Wing","hex":"#4b4045"},{"name":"Ravenclaw","hex":"#0a0555"},{"name":"Ravenwood","hex":"#464543"},{"name":"Ravine","hex":"#d3cec7"},{"name":"Ravioli al Limone","hex":"#fade79"},{"name":"Ravishing Coral","hex":"#e79580"},{"name":"Ravishing Rouge","hex":"#bb2200"},{"name":"Raw Alabaster","hex":"#f2eed3"},{"name":"Raw Amethyst","hex":"#544173"},{"name":"Raw Cashew Nut","hex":"#c8beb1"},{"name":"Raw Chocolate","hex":"#662200"},{"name":"Raw Cinnabar","hex":"#7d403b"},{"name":"Raw Copper","hex":"#c46b51"},{"name":"Raw Cotton","hex":"#e3d4bb"},{"name":"Raw Edge","hex":"#9e7172"},{"name":"Raw Garnet Viola","hex":"#8b6c7e"},{"name":"Raw Linen","hex":"#cc8844"},{"name":"Raw Sienna","hex":"#9a6200"},{"name":"Raw Silk","hex":"#e1d9c7"},{"name":"Raw Sugar","hex":"#d8cab2"},{"name":"Raw Sunset","hex":"#f95d2d"},{"name":"Raw Umber","hex":"#a75e09"},{"name":"Rawhide","hex":"#865e49"},{"name":"Rawhide Canoe","hex":"#7a643f"},{"name":"Ray of Light","hex":"#fdf2c0"},{"name":"Rayo de Sol","hex":"#f4c454"},{"name":"Razee","hex":"#7197cb"},{"name":"Razzberries","hex":"#d1768c"},{"name":"Razzberry Fizz","hex":"#e1d5d4"},{"name":"Razzle Dazzle","hex":"#ba417b"},{"name":"Razzle Dazzle Rose","hex":"#ff33cc"},{"name":"Razzmatazz","hex":"#e30b5c"},{"name":"Razzmatazz Lips","hex":"#e3256b"},{"name":"Razzmic Berry","hex":"#8d4e85"},{"name":"Rè Dài Chéng Orange","hex":"#f08101"},{"name":"Re-Entry","hex":"#dd484e"},{"name":"Re-Entry Red","hex":"#cd0317"},{"name":"Reading Tea Leaves","hex":"#7d5d5e"},{"name":"Ready Lawn","hex":"#7ba570"},{"name":"Real Brown","hex":"#563d2d"},{"name":"Real Cork","hex":"#c1a17f"},{"name":"Real Mccoy","hex":"#00577e"},{"name":"Real Raspberry","hex":"#dd79a2"},{"name":"Real Red","hex":"#a90308"},{"name":"Real Simple","hex":"#ccb896"},{"name":"Real Teal","hex":"#45657d"},{"name":"Real Turquoise","hex":"#008a4c"},{"name":"Realist Beige","hex":"#d3c8bd"},{"name":"Really Light Green","hex":"#e9eadb"},{"name":"Really Rain","hex":"#e8ecdb"},{"name":"Really Teal","hex":"#016367"},{"name":"Realm","hex":"#796c70"},{"name":"Realm of the Underworld","hex":"#114411"},{"name":"Rebecca Purple","hex":"#663399"},{"name":"Rebel","hex":"#453430"},{"name":"Rebel Red","hex":"#cd4035"},{"name":"Rebel Rouser","hex":"#9b7697"},{"name":"Rebellion Red","hex":"#cc0404"},{"name":"Reboot","hex":"#28a8cd"},{"name":"Rebounder","hex":"#bad56b"},{"name":"Receding Night","hex":"#4a4e5c"},{"name":"Reclaimed Wood","hex":"#bab6ab"},{"name":"Reclining Green","hex":"#b7d7bf"},{"name":"Recollection Blue","hex":"#1a525b"},{"name":"Recuperate","hex":"#decce4"},{"name":"Recycled","hex":"#cdb6a0"},{"name":"Recycled Glass","hex":"#b7c3b7"},{"name":"Red","hex":"#ff0000"},{"name":"Red Alert","hex":"#ff0f0f"},{"name":"Red Arremer","hex":"#e44e4d"},{"name":"Red Baron","hex":"#bb0011"},{"name":"Red Bay","hex":"#8e3738"},{"name":"Red Bean","hex":"#3d0c02"},{"name":"Red Beech","hex":"#7b3801"},{"name":"Red Bell Pepper","hex":"#dd3300"},{"name":"Red Berry","hex":"#701f28"},{"name":"Red Birch","hex":"#9d2b22"},{"name":"Red Blood","hex":"#660000"},{"name":"Red Blooded","hex":"#8a3c38"},{"name":"Red Bluff","hex":"#824e46"},{"name":"Red Brick","hex":"#834841"},{"name":"Red Brown","hex":"#a52a2f"},{"name":"Red Bud","hex":"#a63253"},{"name":"Red Cabbage","hex":"#534a77"},{"name":"Red Candle","hex":"#833c3d"},{"name":"Red Card","hex":"#ff3322"},{"name":"Red Carpet","hex":"#bc2026"},{"name":"Red Cedar","hex":"#d87678"},{"name":"Red Cent","hex":"#ad654c"},{"name":"Red Chalk","hex":"#ed7777"},{"name":"Red Chicory","hex":"#883543"},{"name":"Red Chili","hex":"#95372d"},{"name":"Red Chipotle","hex":"#834c3e"},{"name":"Red City of Morocco","hex":"#c10c27"},{"name":"Red Clay","hex":"#8f4b41"},{"name":"Red Clay Hill","hex":"#77413d"},{"name":"Red Clover","hex":"#bb8580"},{"name":"Red Clown","hex":"#d43e38"},{"name":"Red Contrast","hex":"#b33234"},{"name":"Red Coral","hex":"#c37469"},{"name":"Red Craft","hex":"#91433e"},{"name":"Red Cray","hex":"#e45e32"},{"name":"Red Crayon","hex":"#ee204d"},{"name":"Red Curry","hex":"#8b5e52"},{"name":"Red Dahlia","hex":"#85222b"},{"name":"Red Damask","hex":"#cb6f4a"},{"name":"Red Dead Redemption","hex":"#bb012d"},{"name":"Red Devil","hex":"#860111"},{"name":"Red Dit","hex":"#ff4500"},{"name":"Red Door","hex":"#ac0000"},{"name":"Red Dust","hex":"#e8dedb"},{"name":"Red Earth","hex":"#a2816e"},{"name":"Red Elegance","hex":"#85464b"},{"name":"Red Emulsion","hex":"#e9dbde"},{"name":"Red Endive","hex":"#794d60"},{"name":"Red Epiphyllum","hex":"#d00000"},{"name":"Red Flag","hex":"#ff2244"},{"name":"Red Gerbera","hex":"#b07473"},{"name":"Red Gooseberry","hex":"#604046"},{"name":"Red Gore","hex":"#ad1400"},{"name":"Red Gravel","hex":"#b8866e"},{"name":"Red Gravy","hex":"#b83312"},{"name":"Red Grey","hex":"#99686a"},{"name":"Red Gumball","hex":"#ac3a3e"},{"name":"Red Hawk","hex":"#8a453b"},{"name":"Red Herring","hex":"#dd1144"},{"name":"Red Hook","hex":"#845544"},{"name":"Red Hot","hex":"#dd0033"},{"name":"Red Hot Chili Pepper","hex":"#db1d27"},{"name":"Red Hot Jazz","hex":"#773c31"},{"name":"Red Icon","hex":"#c93543"},{"name":"Red Ink","hex":"#ac3235"},{"name":"Red Jade","hex":"#783f54"},{"name":"Red Jalapeno","hex":"#bf6153"},{"name":"Red Kite","hex":"#913228"},{"name":"Red Knuckles","hex":"#dd0011"},{"name":"Red Leather","hex":"#ab4d50"},{"name":"Red Leever","hex":"#881400"},{"name":"Red Light Neon","hex":"#ff0055"},{"name":"Red Lightning","hex":"#d24b38"},{"name":"Red Lilac Purple","hex":"#bfbac0"},{"name":"Red Liquorice","hex":"#a83e4c"},{"name":"Red Lust","hex":"#b4090d"},{"name":"Red Mahogany","hex":"#663b43"},{"name":"Red Mana","hex":"#f95554"},{"name":"Red Mane","hex":"#6d3d2a"},{"name":"Red Maple Leaf","hex":"#834c4b"},{"name":"Red Menace","hex":"#aa2121"},{"name":"Red Mull","hex":"#ff8888"},{"name":"Red Mulled Wine","hex":"#880022"},{"name":"Red My Mind","hex":"#994341"},{"name":"Red Obsession","hex":"#b63731"},{"name":"Red Ochre","hex":"#953334"},{"name":"Red October","hex":"#fe2712"},{"name":"Red Octopus","hex":"#773243"},{"name":"Red Onion","hex":"#473442"},{"name":"Red Orange","hex":"#ff3f34"},{"name":"Red Orange Juice","hex":"#ff5349"},{"name":"Red Orpiment","hex":"#cd6d57"},{"name":"Red Oxide","hex":"#5d1f1e"},{"name":"Red Panda","hex":"#c34b1b"},{"name":"Red Paracentrotus","hex":"#bb0044"},{"name":"Red Pear","hex":"#82383c"},{"name":"Red Pegasus","hex":"#dd0000"},{"name":"Red Pentacle","hex":"#a60000"},{"name":"Red Pepper","hex":"#7a3f38"},{"name":"Red Peppercorn","hex":"#c62d42"},{"name":"Red Perfume","hex":"#f6b894"},{"name":"Red Pigment","hex":"#ed1c24"},{"name":"Red Pines","hex":"#72423f"},{"name":"Red Pink","hex":"#fa2a55"},{"name":"Red Plum","hex":"#7c2949"},{"name":"Red Potato","hex":"#995d50"},{"name":"Red Potion","hex":"#dd143d"},{"name":"Red Power","hex":"#d63d3b"},{"name":"Red Prairie","hex":"#8e3928"},{"name":"Red Prayer Flag","hex":"#bb1100"},{"name":"Red Prickly Pear","hex":"#d92849"},{"name":"Red Purple","hex":"#e40078"},{"name":"Red Radish","hex":"#ee3344"},{"name":"Red Rampage","hex":"#ee3322"},{"name":"Red Red Red","hex":"#91403d"},{"name":"Red Red Wine","hex":"#814142"},{"name":"Red Reign","hex":"#800707"},{"name":"Red Remains","hex":"#ffe0de"},{"name":"Red Republic","hex":"#d70200"},{"name":"Red Revival","hex":"#a8453b"},{"name":"Red Ribbon","hex":"#ed0a3f"},{"name":"Red Rider","hex":"#b9271c"},{"name":"Red Riding Hood","hex":"#fe2713"},{"name":"Red River","hex":"#b95543"},{"name":"Red Robin","hex":"#7d4138"},{"name":"Red Rock","hex":"#a65052"},{"name":"Red Rock Falls","hex":"#a27253"},{"name":"Red Rock Panorama","hex":"#b29e9d"},{"name":"Red Rooster","hex":"#7e5146"},{"name":"Red Rust","hex":"#8a3319"},{"name":"Red Safflower","hex":"#c53d43"},{"name":"Red Salsa","hex":"#fd3a4a"},{"name":"Red Sandstorm","hex":"#e5cac0"},{"name":"Red Sauce Parlor","hex":"#cc3b22"},{"name":"Red Savina Pepper","hex":"#ee0128"},{"name":"Red Sentinel","hex":"#b9090f"},{"name":"Red Shade Wash","hex":"#862808"},{"name":"Red Shimmer","hex":"#fee0da"},{"name":"Red Shrivel","hex":"#874c62"},{"name":"Red Sparowes","hex":"#c8756d"},{"name":"Red Stage","hex":"#ad522e"},{"name":"Red Stone","hex":"#8d6b64"},{"name":"Red Stop","hex":"#ff2222"},{"name":"Red Stunt","hex":"#c4091e"},{"name":"Red Tape","hex":"#cc1133"},{"name":"Red Team Spirit","hex":"#b8383b"},{"name":"Red Terra","hex":"#ae4930"},{"name":"Red Theatre","hex":"#6e3637"},{"name":"Red Tolumnia Orchid","hex":"#be0119"},{"name":"Red Tomato","hex":"#b1403a"},{"name":"Red Tone Ink","hex":"#8b2e08"},{"name":"Red Trillium","hex":"#c44d4f"},{"name":"Red Tuna Fruit","hex":"#b41b40"},{"name":"Red Velvet","hex":"#783b38"},{"name":"Red Vine","hex":"#5f383c"},{"name":"Red Violet","hex":"#9e0168"},{"name":"Red Vitality","hex":"#9f1a1d"},{"name":"Red Wattle Hog","hex":"#765952"},{"name":"Red Willow","hex":"#885a55"},{"name":"Red Wine","hex":"#8c0034"},{"name":"Red Wine Vinegar","hex":"#722f37"},{"name":"Red Wire","hex":"#db5947"},{"name":"Red Wrath","hex":"#ee1155"},{"name":"Red Wrath of Zeus","hex":"#e0180c"},{"name":"Red-Eye","hex":"#dd1155"},{"name":"Red-Handed","hex":"#dd2233"},{"name":"Red-Hot Mama","hex":"#a91f29"},{"name":"Red-Letter Day","hex":"#cc0055"},{"name":"Red-Tailed-Hawk","hex":"#a27547"},{"name":"Redalicious","hex":"#bb2211"},{"name":"Redbox","hex":"#94332f"},{"name":"Redbud","hex":"#ad5e65"},{"name":"Redcurrant","hex":"#88455e"},{"name":"Reddened Earth","hex":"#9c6e63"},{"name":"Reddest Red","hex":"#9b4045"},{"name":"Reddish","hex":"#c44240"},{"name":"Reddish Banana","hex":"#ffbb88"},{"name":"Reddish Black","hex":"#433635"},{"name":"Reddish Brown","hex":"#7f2b0a"},{"name":"Reddish Grey","hex":"#997570"},{"name":"Reddish Orange","hex":"#f8481c"},{"name":"Reddish Pink","hex":"#fe2c54"},{"name":"Reddish Purple","hex":"#910951"},{"name":"Reddish White","hex":"#fff8d5"},{"name":"Reddy Brown","hex":"#6e1005"},{"name":"Redend Point","hex":"#ae8e7e"},{"name":"Redeye","hex":"#af3937"},{"name":"Rediscover","hex":"#c3cdc9"},{"name":"Redneck","hex":"#f5d6d8"},{"name":"Redolency","hex":"#ea8a7a"},{"name":"Redridge Brown","hex":"#9d4e34"},{"name":"Redrock Canyon","hex":"#a24d47"},{"name":"Redstone","hex":"#e46b71"},{"name":"Redsurrection","hex":"#d90b0b"},{"name":"Redtail","hex":"#af4544"},{"name":"Reduced Blue","hex":"#d6dfec"},{"name":"Reduced Green","hex":"#e7e9d8"},{"name":"Reduced Pink","hex":"#f6e4e4"},{"name":"Reduced Red","hex":"#efdedf"},{"name":"Reduced Sand","hex":"#eee5da"},{"name":"Reduced Sky","hex":"#d3eeec"},{"name":"Reduced Spearmint","hex":"#dbe8df"},{"name":"Reduced Turquoise","hex":"#daece7"},{"name":"Reduced Yellow","hex":"#f0ead7"},{"name":"Redwing","hex":"#98010d"},{"name":"Redwood","hex":"#5b342e"},{"name":"Redwood City","hex":"#b45f56"},{"name":"Redwood Forest","hex":"#916f5e"},{"name":"RedЯum","hex":"#ff2200"},{"name":"Reed","hex":"#c3d3a8"},{"name":"Reed Bed","hex":"#b0ad96"},{"name":"Reed Green","hex":"#a1a14a"},{"name":"Reed Mace","hex":"#cd5e3c"},{"name":"Reed Mace Brown","hex":"#726250"},{"name":"Reed Yellow","hex":"#dcc79e"},{"name":"Reeds","hex":"#a0bca7"},{"name":"Reef","hex":"#017371"},{"name":"Reef Blue","hex":"#93bdcf"},{"name":"Reef Encounter","hex":"#00968f"},{"name":"Reef Escape","hex":"#0474ad"},{"name":"Reef Gold","hex":"#a98d36"},{"name":"Reef Green","hex":"#a5e1c4"},{"name":"Reef Refractions","hex":"#d1ef9f"},{"name":"Reef Resort","hex":"#274256"},{"name":"Reef Waters","hex":"#6f9fa9"},{"name":"Refined Chianti","hex":"#8c1b3c"},{"name":"Refined Green","hex":"#384543"},{"name":"Refined Mint","hex":"#f1f9ec"},{"name":"Refined Rose","hex":"#af6879"},{"name":"Refined Sand","hex":"#c1b38c"},{"name":"Reflecting Pond","hex":"#234251"},{"name":"Reflecting Pool","hex":"#dcdfdc"},{"name":"Reflection","hex":"#d3d5d3"},{"name":"Reflection Pool","hex":"#cadbdf"},{"name":"Reform","hex":"#8aaad6"},{"name":"Refresh","hex":"#a1d4c8"},{"name":"Refreshed","hex":"#cfe587"},{"name":"Refreshing Green","hex":"#617a74"},{"name":"Refreshing Pool","hex":"#b7e6e6"},{"name":"Refreshing Primer","hex":"#d7fffe"},{"name":"Refreshing Tea","hex":"#ebdda6"},{"name":"Refrigerator Green","hex":"#badfcd"},{"name":"Refuge","hex":"#607d84"},{"name":"Regal","hex":"#dac2b3"},{"name":"Regal Azure","hex":"#6a76af"},{"name":"Regal Blue","hex":"#203f58"},{"name":"Regal Destiny","hex":"#2e508a"},{"name":"Regal Gown","hex":"#655777"},{"name":"Regal Orchid","hex":"#a282a9"},{"name":"Regal Red","hex":"#99484a"},{"name":"Regal Rose","hex":"#9d7374"},{"name":"Regal View","hex":"#749e8f"},{"name":"Regal Violet","hex":"#a298a2"},{"name":"Regale Blue","hex":"#7db5d3"},{"name":"Regalia","hex":"#522d80"},{"name":"Regality","hex":"#664480"},{"name":"Regatta","hex":"#5382bb"},{"name":"Regatta Bay","hex":"#2d5367"},{"name":"Regency Cream","hex":"#e1bb87"},{"name":"Regency Rose","hex":"#a78881"},{"name":"Regent Grey","hex":"#798488"},{"name":"Regent St Blue","hex":"#a0cdd9"},{"name":"Regina Peach","hex":"#d2aa92"},{"name":"Registra","hex":"#c2bbbf"},{"name":"Registration Black","hex":"#000200"},{"name":"Regula Barbara Blue","hex":"#009999"},{"name":"Reign of Tomatoes","hex":"#f7250b"},{"name":"Reign Over Me","hex":"#76679e"},{"name":"Reikland","hex":"#ca6c4d"},{"name":"Reindeer","hex":"#dac0ba"},{"name":"Reindeer Moss","hex":"#bdf8a3"},{"name":"Rejuvenate","hex":"#c4c7a5"},{"name":"Rejuvenation","hex":"#a4a783"},{"name":"Relax","hex":"#b9d2d3"},{"name":"Relaxation Green","hex":"#a8d19e"},{"name":"Relaxed Blue","hex":"#698a97"},{"name":"Relaxed Khaki","hex":"#c8bba3"},{"name":"Relaxed Rhino","hex":"#bbaaaa"},{"name":"Relaxing Blue","hex":"#899daa"},{"name":"Relaxing Green","hex":"#e0eadb"},{"name":"Relentless Olive","hex":"#71713e"},{"name":"Reliable White","hex":"#e8ded3"},{"name":"Relic","hex":"#88789b"},{"name":"Relic Bronze","hex":"#906a3a"},{"name":"Relief","hex":"#bf2133"},{"name":"Relieved Red","hex":"#e9dbdf"},{"name":"Reliquial Rose","hex":"#ff2288"},{"name":"Relish","hex":"#b3cbaa"},{"name":"Remaining Embers","hex":"#8a4c38"},{"name":"Remarkable Beige","hex":"#efe7d6"},{"name":"Rembrandt Ruby","hex":"#974f49"},{"name":"Remembrance","hex":"#ca9e9c"},{"name":"Remington Rust","hex":"#a25d4c"},{"name":"Remote Control","hex":"#6d7a6a"},{"name":"Remy","hex":"#f6deda"},{"name":"Renaissance","hex":"#434257"},{"name":"Renaissance Rose","hex":"#865560"},{"name":"Renanthera Orchid","hex":"#820747"},{"name":"Rendang","hex":"#9b4b20"},{"name":"Rendezvous","hex":"#abbed0"},{"name":"Renegade","hex":"#8f968b"},{"name":"Renga Brick","hex":"#b55233"},{"name":"Renkon Beige","hex":"#989f7a"},{"name":"Rennie\'s Rose","hex":"#b87f84"},{"name":"Reno Sand","hex":"#b26e33"},{"name":"Renoir Bisque","hex":"#dabe9f"},{"name":"Renwick Beige","hex":"#c3b09d"},{"name":"Renwick Brown","hex":"#504e47"},{"name":"Renwick Golden Oak","hex":"#96724c"},{"name":"Renwick Heather","hex":"#8b7d7b"},{"name":"Renwick Olive","hex":"#97896a"},{"name":"Renwick Rose Beige","hex":"#af8871"},{"name":"Repose Grey","hex":"#ccc9c0"},{"name":"Reptile Green","hex":"#24da91"},{"name":"Reptile Revenge","hex":"#5e582b"},{"name":"Reptilian Green","hex":"#009e82"},{"name":"Republican","hex":"#de0100"},{"name":"Requiem","hex":"#4e3f44"},{"name":"Requisite Grey","hex":"#b9b2a9"},{"name":"Reseda","hex":"#9da98c"},{"name":"Reseda Green","hex":"#75946b"},{"name":"Reservation","hex":"#8c7544"},{"name":"Reserve","hex":"#ac8a98"},{"name":"Reserved Beige","hex":"#e2e1d6"},{"name":"Reserved Blue","hex":"#d2d8de"},{"name":"Reserved White","hex":"#e0e0d9"},{"name":"Reservoir","hex":"#01638b"},{"name":"Resolute Blue","hex":"#85b0c4"},{"name":"Resolution Blue","hex":"#002387"},{"name":"Resonant Blue","hex":"#01a2c6"},{"name":"Resort Sunrise","hex":"#f4d7c5"},{"name":"Resort Tan","hex":"#907d66"},{"name":"Resort White","hex":"#f4f1e4"},{"name":"Resounding Rose","hex":"#cd8e89"},{"name":"Respite","hex":"#97b4c3"},{"name":"Resplendent","hex":"#b4a8b1"},{"name":"Rest Assured","hex":"#9bbfc9"},{"name":"Restful","hex":"#bbbba4"},{"name":"Restful Brown","hex":"#8c7e6f"},{"name":"Restful Rain","hex":"#f1f2dd"},{"name":"Restful Retreat","hex":"#b1c7c9"},{"name":"Restful White","hex":"#eee8d7"},{"name":"Resting Place","hex":"#bcc8be"},{"name":"Restless Sea","hex":"#38515d"},{"name":"Restoration","hex":"#939581"},{"name":"Restoration Ivory","hex":"#e9e1ca"},{"name":"Restrained Gold","hex":"#d2b084"},{"name":"Reticence","hex":"#d9cdc3"},{"name":"Retina Soft Blue","hex":"#b6c7e0"},{"name":"Retiring Blue","hex":"#d5eae8"},{"name":"Retreat","hex":"#7a8076"},{"name":"Retributor Armour Metal","hex":"#c39e81"},{"name":"Retro","hex":"#9bdc96"},{"name":"Retro Avocado","hex":"#958d45"},{"name":"Retro Blue","hex":"#2b62f4"},{"name":"Retro Lime","hex":"#19cc89"},{"name":"Retro Mint","hex":"#9fcdb1"},{"name":"Retro Nectarine","hex":"#ef7d16"},{"name":"Retro Orange","hex":"#e85112"},{"name":"Retro Peach","hex":"#e7c0ad"},{"name":"Retro Pink","hex":"#b48286"},{"name":"Retro Pink Pop","hex":"#ff0073"},{"name":"Retro Vibe","hex":"#cb9711"},{"name":"Revel Blue","hex":"#4c6b8a"},{"name":"Revelry Blue","hex":"#67b8ce"},{"name":"Revenant Brown","hex":"#c59782"},{"name":"Revere Greige","hex":"#8a7c75"},{"name":"Revered","hex":"#a78faf"},{"name":"Reverie Pink","hex":"#f4e5e1"},{"name":"Reversed Grey","hex":"#080808"},{"name":"Revival","hex":"#5f81a4"},{"name":"Revival Mahogany","hex":"#665043"},{"name":"Revival Red","hex":"#7f4e47"},{"name":"Revival Rose","hex":"#c09084"},{"name":"Reviving Green","hex":"#e8e097"},{"name":"Revolver","hex":"#37363f"},{"name":"Reynard","hex":"#b46848"},{"name":"Rhapsodic","hex":"#dc9e94"},{"name":"Rhapsody","hex":"#9c83a8"},{"name":"Rhapsody In Blue","hex":"#002244"},{"name":"Rhapsody Lilac","hex":"#babfdc"},{"name":"Rhapsody Rap","hex":"#74676c"},{"name":"Rhind Papyrus","hex":"#969565"},{"name":"Rhine Castle","hex":"#5f5e5f"},{"name":"Rhine Falls","hex":"#e3eadb"},{"name":"Rhine River Rose","hex":"#ab3560"},{"name":"Rhine Wine","hex":"#c87291"},{"name":"Rhinestone","hex":"#8e6c94"},{"name":"Rhino","hex":"#3d4653"},{"name":"Rhinoceros","hex":"#727a7c"},{"name":"Rhinoceros Beetle","hex":"#440011"},{"name":"Rhinox Hide","hex":"#493435"},{"name":"Rhode Island Red","hex":"#9b5b55"},{"name":"Rhodes","hex":"#89c0e6"},{"name":"Rhododendron","hex":"#7d2f45"},{"name":"Rhodonite","hex":"#f3b3c5"},{"name":"Rhodonite Brown","hex":"#4d4141"},{"name":"Rhubarb","hex":"#7f222e"},{"name":"Rhubarb Gin","hex":"#d9a6c1"},{"name":"Rhubarb Leaf Green","hex":"#bca872"},{"name":"Rhubarb Pie","hex":"#d78187"},{"name":"Rhubarb Smoothie","hex":"#8c474b"},{"name":"Rhumba Orange","hex":"#cb7841"},{"name":"Rhynchites Nitens","hex":"#383867"},{"name":"Rhys","hex":"#beceb4"},{"name":"Rhythm","hex":"#767194"},{"name":"Rhythm & Blues","hex":"#70767b"},{"name":"Rhythmic Blue","hex":"#b8d5d7"},{"name":"Rialto","hex":"#914d57"},{"name":"Ribbon Red","hex":"#bd273a"},{"name":"Rice Bowl","hex":"#f1e7d5"},{"name":"Rice Cake","hex":"#efecde"},{"name":"Rice Crackers","hex":"#e0ccb6"},{"name":"Rice Curry","hex":"#b2854a"},{"name":"Rice Fibre","hex":"#e4d8ab"},{"name":"Rice Flower","hex":"#eff5d1"},{"name":"Rice Grain","hex":"#dbd0b9"},{"name":"Rice Paddy","hex":"#dfd4b0"},{"name":"Rice Paper","hex":"#fffcdb"},{"name":"Rice Pudding","hex":"#fff0e3"},{"name":"Rice Wine","hex":"#f5e7c8"},{"name":"Rich and Rare","hex":"#977540"},{"name":"Rich Biscuit","hex":"#948165"},{"name":"Rich Black","hex":"#004040"},{"name":"Rich Blue","hex":"#021bf9"},{"name":"Rich Bordeaux","hex":"#514142"},{"name":"Rich Brilliant Lavender","hex":"#f1a7fe"},{"name":"Rich Brocade","hex":"#925850"},{"name":"Rich Brown","hex":"#715e4f"},{"name":"Rich Carmine","hex":"#d70041"},{"name":"Rich Copper","hex":"#bf7d52"},{"name":"Rich Cream","hex":"#faeac3"},{"name":"Rich Electric Blue","hex":"#0892d0"},{"name":"Rich Gardenia","hex":"#f57f4f"},{"name":"Rich Georgia Clay","hex":"#de7a63"},{"name":"Rich Glow","hex":"#ffe8a0"},{"name":"Rich Gold","hex":"#aa8833"},{"name":"Rich Green","hex":"#218845"},{"name":"Rich Grey Turquoise","hex":"#324943"},{"name":"Rich Honey","hex":"#f9bc7d"},{"name":"Rich Ivory","hex":"#fff0c4"},{"name":"Rich Lavender","hex":"#a76bcf"},{"name":"Rich Lilac","hex":"#b666d2"},{"name":"Rich Loam","hex":"#583d37"},{"name":"Rich Mahogany","hex":"#604944"},{"name":"Rich Maroon","hex":"#b0306a"},{"name":"Rich Mocha","hex":"#745342"},{"name":"Rich Oak","hex":"#a7855a"},{"name":"Rich Olive","hex":"#3e4740"},{"name":"Rich Pewter","hex":"#6b7172"},{"name":"Rich Purple","hex":"#720058"},{"name":"Rich Red","hex":"#ff1144"},{"name":"Rich Red Violet","hex":"#7c3651"},{"name":"Rich Reward","hex":"#b9a37f"},{"name":"Rich Sorrel","hex":"#a87c3e"},{"name":"Rich Taupe","hex":"#b39c89"},{"name":"Rich Texture","hex":"#645671"},{"name":"Rich Violet","hex":"#50578b"},{"name":"Rich Walnut","hex":"#7c5f4a"},{"name":"Richardson Brick","hex":"#854c47"},{"name":"Rickrack","hex":"#a6a660"},{"name":"Ricochet","hex":"#817c74"},{"name":"Ride off into the Sunset","hex":"#f3cf64"},{"name":"Ridge Light","hex":"#b2c8dd"},{"name":"Ridge View","hex":"#a3aab8"},{"name":"Ridgeback","hex":"#ef985c"},{"name":"Ridgecrest","hex":"#9d8861"},{"name":"Ridgeline","hex":"#7a5d46"},{"name":"Riding Boots","hex":"#734a35"},{"name":"Riding Star","hex":"#a0a197"},{"name":"Riesling Grape","hex":"#bfb065"},{"name":"Rifle Green","hex":"#414833"},{"name":"Rigby Ridge","hex":"#a0a082"},{"name":"Right as Rain","hex":"#c0e1e4"},{"name":"Rikan Brown","hex":"#534a32"},{"name":"Rikyū Brown","hex":"#826b58"},{"name":"Rikyūnezumi Brown","hex":"#656255"},{"name":"Rikyūshira Brown","hex":"#b0927a"},{"name":"Rincon Cove","hex":"#c7b39e"},{"name":"Ringlet","hex":"#fbedbe"},{"name":"Rinse","hex":"#d5d9dd"},{"name":"Rinsed-Out Red","hex":"#ff7952"},{"name":"Rio Grande","hex":"#b7c61a"},{"name":"Rio Red","hex":"#92242e"},{"name":"Rio Rust","hex":"#926956"},{"name":"Rio Sky","hex":"#cae1da"},{"name":"Rip Cord","hex":"#dfab56"},{"name":"Rip Van Periwinkle","hex":"#8fa4d2"},{"name":"Ripasso","hex":"#94312f"},{"name":"Ripe Berry","hex":"#5c5666"},{"name":"Ripe Cherry","hex":"#c3556f"},{"name":"Ripe Currant","hex":"#8a3c3e"},{"name":"Ripe Eggplant","hex":"#492d35"},{"name":"Ripe Fig","hex":"#6a5254"},{"name":"Ripe Green","hex":"#747a2c"},{"name":"Ripe Lavander","hex":"#a259ce"},{"name":"Ripe Lemon","hex":"#f4d81c"},{"name":"Ripe Malinka","hex":"#f5576c"},{"name":"Ripe Mango","hex":"#ffc324"},{"name":"Ripe Melon","hex":"#febaad"},{"name":"Ripe Olive","hex":"#44483d"},{"name":"Ripe Pear","hex":"#e1e36e"},{"name":"Ripe Pineapple","hex":"#ffe07b"},{"name":"Ripe Plum","hex":"#410056"},{"name":"Ripe Pumpkin","hex":"#ffaf37"},{"name":"Ripe Rhubarb","hex":"#7e3947"},{"name":"Ripe Wheat","hex":"#e3c494"},{"name":"Ripening Grape","hex":"#6f3942"},{"name":"Ripple","hex":"#d3dcdc"},{"name":"Rippled Rock","hex":"#c4c5bc"},{"name":"Riptide","hex":"#89d9c8"},{"name":"Rise and Shine","hex":"#ffe99e"},{"name":"Rise-N-Shine","hex":"#ffc632"},{"name":"Rising Ash","hex":"#978888"},{"name":"Rising Star","hex":"#f7f6d5"},{"name":"Risotto","hex":"#f8f5e9"},{"name":"Rita Repulsa","hex":"#00aa55"},{"name":"Rita\'s Rouge","hex":"#ba7176"},{"name":"Rite of Spring","hex":"#ffeba9"},{"name":"Ritterlich Blue","hex":"#293286"},{"name":"Ritual","hex":"#767081"},{"name":"Ritual Experience","hex":"#533844"},{"name":"Ritzy","hex":"#d79c5f"},{"name":"River Bank","hex":"#7e705e"},{"name":"River Blue","hex":"#38afcd"},{"name":"River Clay","hex":"#c7b5a9"},{"name":"River Forest","hex":"#545b45"},{"name":"River Fountain","hex":"#248591"},{"name":"River God","hex":"#6c6c5f"},{"name":"River Mist","hex":"#d6e1d4"},{"name":"River Mud","hex":"#a08b71"},{"name":"River of Gold","hex":"#e4b55d"},{"name":"River Pebble","hex":"#a39c92"},{"name":"River Reed","hex":"#dedbc4"},{"name":"River Road","hex":"#ae8d6b"},{"name":"River Rock","hex":"#d8cdc4"},{"name":"River Rocks","hex":"#7e645d"},{"name":"River Rouge","hex":"#ec9b9d"},{"name":"River Shark","hex":"#dfdcd5"},{"name":"River Styx","hex":"#161820"},{"name":"River Tour","hex":"#848b99"},{"name":"River Valley","hex":"#94a5b7"},{"name":"River Veil","hex":"#d9e0de"},{"name":"Riverbank","hex":"#ae9e87"},{"name":"Riverbed","hex":"#86bebe"},{"name":"Riverdale","hex":"#bec5ba"},{"name":"Rivergrass","hex":"#84a27b"},{"name":"Rivers Edge","hex":"#afd9d7"},{"name":"Riverside","hex":"#4e6f95"},{"name":"Riverside Blue","hex":"#6cb4c3"},{"name":"Riverstone","hex":"#757878"},{"name":"Riverway","hex":"#5d7274"},{"name":"Riveter Rose","hex":"#b7a9a2"},{"name":"Riviera","hex":"#189fac"},{"name":"Riviera Beach","hex":"#c0ae96"},{"name":"Riviera Blue","hex":"#65b4d8"},{"name":"Riviera Clay","hex":"#c9a88d"},{"name":"Riviera Paradise","hex":"#009a9e"},{"name":"Riviera Retreat","hex":"#d9c0a6"},{"name":"Riviera Rose","hex":"#f7b1a6"},{"name":"Riviera Sand","hex":"#dfc6a0"},{"name":"Riviera Sea","hex":"#1b8188"},{"name":"Rivulet","hex":"#d5dae1"},{"name":"Rix","hex":"#605655"},{"name":"Road Less-Travelled","hex":"#8b7b6e"},{"name":"Road Runner","hex":"#cbc3bd"},{"name":"Roadrunner","hex":"#c8c0b7"},{"name":"Roadside","hex":"#ada493"},{"name":"Roadster White","hex":"#e1e0d7"},{"name":"Roadster Yellow","hex":"#f3dea2"},{"name":"Roan Rouge","hex":"#885156"},{"name":"Roanoke","hex":"#372b25"},{"name":"Roanoke Taupe","hex":"#8f837d"},{"name":"Roaring Twenties","hex":"#b39c9e"},{"name":"Roast Coffee","hex":"#704341"},{"name":"Roasted","hex":"#785246"},{"name":"Roasted Almond","hex":"#d2b49c"},{"name":"Roasted Black","hex":"#655a5c"},{"name":"Roasted Cashew","hex":"#8f8176"},{"name":"Roasted Coconut","hex":"#ab8c72"},{"name":"Roasted Hazelnut","hex":"#af967d"},{"name":"Roasted Kona","hex":"#574038"},{"name":"Roasted Nuts","hex":"#604d42"},{"name":"Roasted Pecan","hex":"#93542b"},{"name":"Roasted Pepper","hex":"#890a01"},{"name":"Roasted Pistachio","hex":"#c9b27c"},{"name":"Roasted Seeds","hex":"#e1a175"},{"name":"Roasted Sesame","hex":"#fec36b"},{"name":"Roasted Sienna","hex":"#ea7e5d"},{"name":"Roasted Squash","hex":"#e6a255"},{"name":"Roastery","hex":"#692302"},{"name":"Rob Roy","hex":"#ddad56"},{"name":"Robeson Rose","hex":"#654f4f"},{"name":"Robin\'s Egg","hex":"#6dedfd"},{"name":"Robinhood","hex":"#6e6a3b"},{"name":"Robo Master","hex":"#adadad"},{"name":"Robot Grendizer Gold","hex":"#eeee11"},{"name":"Robotic Gods","hex":"#94a2b1"},{"name":"Robust Orange","hex":"#c4633e"},{"name":"Rock","hex":"#5a4d41"},{"name":"Rock Blue","hex":"#93a2ba"},{"name":"Rock Bottom","hex":"#484c49"},{"name":"Rock Candy","hex":"#dee1df"},{"name":"Rock Cliffs","hex":"#c0af92"},{"name":"Rock Creek","hex":"#688082"},{"name":"Rock Crystal","hex":"#cecbcb"},{"name":"Rock Garden","hex":"#465448"},{"name":"Rock Lobster","hex":"#f00b52"},{"name":"Rock Slide","hex":"#a1968c"},{"name":"Rock Spray","hex":"#9d442d"},{"name":"Rock Star Pink","hex":"#c58bba"},{"name":"Rock\'n Oak","hex":"#8b785c"},{"name":"Rock\'n\'Rose","hex":"#fc8aaa"},{"name":"Rockabilly","hex":"#6c7186"},{"name":"Rockabye Baby","hex":"#f4e4e0"},{"name":"Rocket Fuel","hex":"#fefbe5"},{"name":"Rocket Man","hex":"#bebec3"},{"name":"Rocket Metallic","hex":"#8a7f80"},{"name":"Rocket Science","hex":"#ff3311"},{"name":"Rockfall","hex":"#aabbaa"},{"name":"Rockin Red","hex":"#bc363c"},{"name":"Rocking Chair","hex":"#721f37"},{"name":"Rocking Chair Red","hex":"#90413d"},{"name":"Rockman Blue","hex":"#31a2f2"},{"name":"Rockmelon Rind","hex":"#d3e0b1"},{"name":"Rockpool","hex":"#519ea1"},{"name":"Rocks of Normandy","hex":"#8e7d62"},{"name":"Rockwall Vine","hex":"#6d7e42"},{"name":"Rockweed","hex":"#443735"},{"name":"Rockwood Jade","hex":"#c8e0ba"},{"name":"Rocky Creek","hex":"#3e4d50"},{"name":"Rocky Hill","hex":"#567b8a"},{"name":"Rocky Mountain","hex":"#a9867d"},{"name":"Rocky Mountain Red","hex":"#76443e"},{"name":"Rocky Mountain Sky","hex":"#b5bfbd"},{"name":"Rocky Ridge","hex":"#918c86"},{"name":"Rocky River","hex":"#5e706a"},{"name":"Rocky Road","hex":"#64453c"},{"name":"Rococco Red","hex":"#c33846"},{"name":"Rococo Beige","hex":"#dfd6c1"},{"name":"Rococo Gold","hex":"#977447"},{"name":"Rodan Gold","hex":"#fddc5c"},{"name":"Rodeo","hex":"#7f5e46"},{"name":"Rodeo Dust","hex":"#c7a384"},{"name":"Rodeo Red","hex":"#a24b3a"},{"name":"Rodeo Roundup","hex":"#a68e6d"},{"name":"Rodeo Tan","hex":"#a78b74"},{"name":"Rodham","hex":"#b2b26c"},{"name":"Roebuck","hex":"#a68370"},{"name":"Rogan Josh","hex":"#883311"},{"name":"Rogue","hex":"#807a6c"},{"name":"Rogue Cowboy","hex":"#ba9e88"},{"name":"Rogue Pink","hex":"#f8a4c0"},{"name":"Rohwurst","hex":"#734a45"},{"name":"Rojo 0xide","hex":"#8d4942"},{"name":"Rojo Dust","hex":"#b57466"},{"name":"Rojo Marrón","hex":"#4b3029"},{"name":"Rokō Brown","hex":"#665343"},{"name":"Rokou Brown","hex":"#8c7042"},{"name":"Rokushō Green","hex":"#407a52"},{"name":"Roland-Garros","hex":"#bb5522"},{"name":"Roller Coaster","hex":"#8c8578"},{"name":"Roller Coaster Chariot","hex":"#0078be"},{"name":"Roller Derby","hex":"#8cffdb"},{"name":"Rolling Hills","hex":"#7c7e6a"},{"name":"Rolling Pebble","hex":"#a09482"},{"name":"Rolling Sea","hex":"#5a6d77"},{"name":"Rolling Stone","hex":"#6d7876"},{"name":"Rolling Waves","hex":"#bfd1c9"},{"name":"Romaine","hex":"#c0d2ad"},{"name":"Romaine Green","hex":"#a38e00"},{"name":"Roman","hex":"#d8625b"},{"name":"Roman Bath","hex":"#8c97a3"},{"name":"Roman Brick","hex":"#ab7f5b"},{"name":"Roman Bronze Coin","hex":"#514100"},{"name":"Roman Coffee","hex":"#7d6757"},{"name":"Roman Coin","hex":"#ac8760"},{"name":"Roman Column","hex":"#f6f0e2"},{"name":"Roman Empire Red","hex":"#ee1111"},{"name":"Roman Gold","hex":"#d19b2f"},{"name":"Roman Mosaic","hex":"#dad1ce"},{"name":"Roman Plaster","hex":"#ddd2bf"},{"name":"Roman Purple","hex":"#524765"},{"name":"Roman Ruins","hex":"#c0b5a0"},{"name":"Roman Silver","hex":"#838996"},{"name":"Roman Snail","hex":"#a49593"},{"name":"Roman Violet","hex":"#4d517f"},{"name":"Roman Wall","hex":"#b0ada0"},{"name":"Roman White","hex":"#deedeb"},{"name":"Romance","hex":"#f4f0e6"},{"name":"Romanesque","hex":"#7983a4"},{"name":"Romanesque Gold","hex":"#d0af7a"},{"name":"Romantic","hex":"#ffc69e"},{"name":"Romantic Ballad","hex":"#e0bedf"},{"name":"Romantic Cruise","hex":"#e7e0ee"},{"name":"Romantic Embers","hex":"#b23e4f"},{"name":"Romantic Isle","hex":"#007c75"},{"name":"Romantic Moment","hex":"#9076ae"},{"name":"Romantic Morn","hex":"#fcd5cb"},{"name":"Romantic Morning","hex":"#ddbbdd"},{"name":"Romantic Night","hex":"#96353a"},{"name":"Romantic Poetry","hex":"#cac0ce"},{"name":"Romantic Rose","hex":"#aa4488"},{"name":"Romantic Thriller","hex":"#a2101b"},{"name":"Romantic Vampire","hex":"#991166"},{"name":"Romeo","hex":"#e3d2ce"},{"name":"Romeo O Romeo","hex":"#a4233c"},{"name":"Romesco","hex":"#f48101"},{"name":"Romp","hex":"#983d48"},{"name":"Romulus","hex":"#dfc1a8"},{"name":"Ronchi","hex":"#eab852"},{"name":"Rondo of Blood","hex":"#a60044"},{"name":"Roof Terracotta","hex":"#a14743"},{"name":"Roof Tile Green","hex":"#043132"},{"name":"Rooftop Garden","hex":"#9ead92"},{"name":"Rooibos Tea","hex":"#ae3c29"},{"name":"Rookwood Amber","hex":"#c08650"},{"name":"Rookwood Antique Gold","hex":"#a58258"},{"name":"Rookwood Blue Green","hex":"#738478"},{"name":"Rookwood Brown","hex":"#7f614a"},{"name":"Rookwood Clay","hex":"#9a7e64"},{"name":"Rookwood Dark Brown","hex":"#5f4d43"},{"name":"Rookwood Dark Green","hex":"#565c4a"},{"name":"Rookwood Dark Red","hex":"#4b2929"},{"name":"Rookwood Jade","hex":"#979f7f"},{"name":"Rookwood Medium Brown","hex":"#6e5241"},{"name":"Rookwood Red","hex":"#622f2d"},{"name":"Rookwood Sash Green","hex":"#506a67"},{"name":"Rookwood Shutter Green","hex":"#303b39"},{"name":"Rookwood Terra Cotta","hex":"#975840"},{"name":"Rooster Comb","hex":"#96463f"},{"name":"Root Beer","hex":"#81544a"},{"name":"Root Beer Float","hex":"#cfa46b"},{"name":"Root Brew","hex":"#290e05"},{"name":"Root Brown","hex":"#6b3226"},{"name":"Rooted","hex":"#5f4f3e"},{"name":"Rope","hex":"#8e593c"},{"name":"Roquefort Blue","hex":"#aec6cf"},{"name":"Rosa","hex":"#fe86a4"},{"name":"Rosa Bonito","hex":"#efd9e1"},{"name":"Rosa Vieja","hex":"#f0e3df"},{"name":"Rosaline Pearl","hex":"#a38887"},{"name":"Rosarian","hex":"#faeadd"},{"name":"Rose","hex":"#ff007f"},{"name":"Rosé","hex":"#f7746b"},{"name":"Rose Ashes","hex":"#b5acab"},{"name":"Rose Aspect","hex":"#f1c6ca"},{"name":"Rose Beige","hex":"#e3cbc4"},{"name":"Rose Bisque","hex":"#c6a499"},{"name":"Rose Bonbon","hex":"#f9429e"},{"name":"Rose Branch","hex":"#80565b"},{"name":"Rose Brocade","hex":"#996c6e"},{"name":"Rose Brown","hex":"#bc8e8f"},{"name":"Rose Bud","hex":"#b65f9a"},{"name":"Rose Cheeks","hex":"#f0738a"},{"name":"Rose Chintz","hex":"#c77579"},{"name":"Rose Cloud","hex":"#dab09e"},{"name":"Rose Colored","hex":"#dcb6b5"},{"name":"Rose Colored Glasses","hex":"#e5c4c0"},{"name":"Rose Cream","hex":"#efe0de"},{"name":"Rose Daphne","hex":"#ff9ede"},{"name":"Rose Dawn","hex":"#b38380"},{"name":"Rose de Mai","hex":"#cb8e81"},{"name":"Rose Delight","hex":"#e099ad"},{"name":"Rose Dragée","hex":"#eecffe"},{"name":"Rose Dusk","hex":"#e5a192"},{"name":"Rose Dust","hex":"#cdb2a5"},{"name":"Rose Ebony","hex":"#674846"},{"name":"Rose Elegance","hex":"#e9a1b8"},{"name":"Rose Embroidery","hex":"#c59ea1"},{"name":"Rose Essence","hex":"#f29b89"},{"name":"Rose Fantasy","hex":"#f1e8ec"},{"name":"Rose Fog","hex":"#e7bcb4"},{"name":"Rose Frost","hex":"#ffece9"},{"name":"Rose Fusion","hex":"#f96653"},{"name":"Rose Garden","hex":"#da9ec8"},{"name":"Rose Garland","hex":"#865a64"},{"name":"Rose Garnet","hex":"#960145"},{"name":"Rose Glory","hex":"#e585a5"},{"name":"Rose Glow","hex":"#ffdbeb"},{"name":"Rose Gold","hex":"#b76e79"},{"name":"Rose Hip","hex":"#fd0e35"},{"name":"Rose Hip Tonic","hex":"#dbb9b6"},{"name":"Rose Laffy Taffy","hex":"#a6465b"},{"name":"Rose Linen","hex":"#e8aea2"},{"name":"Rose Lotion","hex":"#ecd7c6"},{"name":"Rose Madder","hex":"#e33636"},{"name":"Rose Mallow","hex":"#f4aac7"},{"name":"Rose Marble","hex":"#ceb9c4"},{"name":"Rose Marquee","hex":"#a76464"},{"name":"Rose Marquis","hex":"#dd94a1"},{"name":"Rose Mauve","hex":"#af9690"},{"name":"Rose Meadow","hex":"#c4989e"},{"name":"Rose Melody","hex":"#ecbfc9"},{"name":"Rose Mochi","hex":"#ffe9ed"},{"name":"Rose of Sharon","hex":"#ac512d"},{"name":"Rose Pearl","hex":"#dfd4cc"},{"name":"Rose Petal","hex":"#e6c1bb"},{"name":"Rose Pink","hex":"#ff66cc"},{"name":"Rose Pink Villa","hex":"#7c383e"},{"name":"Rose Potpourri","hex":"#c9a59f"},{"name":"Rose Pottery","hex":"#d0a29e"},{"name":"Rose Quartz","hex":"#f7cac1"},{"name":"Rose Red","hex":"#c92351"},{"name":"Rose Reminder","hex":"#f4c0c6"},{"name":"Rose Romantic","hex":"#eed1cd"},{"name":"Rose Rush","hex":"#dd2255"},{"name":"Rose Sachet","hex":"#ce858f"},{"name":"Rose Shadow","hex":"#f9c2cd"},{"name":"Rose Silk","hex":"#e7afa8"},{"name":"Rose Smoke","hex":"#ceada3"},{"name":"Rose Soiree","hex":"#e08395"},{"name":"Rose Sorbet","hex":"#fbd3cd"},{"name":"Rose Souvenir","hex":"#c290c5"},{"name":"Rose Stain","hex":"#d3b6ba"},{"name":"Rose Sugar","hex":"#fae6e5"},{"name":"Rose Tan","hex":"#fae8e1"},{"name":"Rose Tattoo","hex":"#e1a890"},{"name":"Rose Taupe","hex":"#905d5d"},{"name":"Rose Tea","hex":"#b48993"},{"name":"Rose Tonic","hex":"#ffdddd"},{"name":"Rose Turkish Delight","hex":"#db5079"},{"name":"Rose Vale","hex":"#ab4e5f"},{"name":"Rose Vapor","hex":"#f2dbd6"},{"name":"Rose Violet","hex":"#c44d97"},{"name":"Rose Water","hex":"#f6dbd8"},{"name":"Rose White","hex":"#fbeee8"},{"name":"Rose Wine","hex":"#9d5c75"},{"name":"Rose Yogurt","hex":"#d9bcb7"},{"name":"Roseate","hex":"#f7e5db"},{"name":"Roseate Spoonbill","hex":"#e0adc4"},{"name":"Rosebay","hex":"#cb9aad"},{"name":"Roseberry","hex":"#f4a6a1"},{"name":"Rosebloom","hex":"#e290b2"},{"name":"Rosebud","hex":"#e0cdd1"},{"name":"Rosebud Cherry","hex":"#8a2d52"},{"name":"Rosecco","hex":"#eebbdd"},{"name":"Rosedust","hex":"#cc8d84"},{"name":"Roseine Plum","hex":"#7b7fa9"},{"name":"Roseland","hex":"#926566"},{"name":"Roselle","hex":"#f0dee4"},{"name":"Rosemarried","hex":"#819b4f"},{"name":"Rosemary","hex":"#405e5c"},{"name":"Rosemary Green","hex":"#699b72"},{"name":"Rosemary Sprig","hex":"#626a52"},{"name":"Rosemary White","hex":"#dfe3db"},{"name":"Rosenkavalier","hex":"#bc8a90"},{"name":"Roses are Red","hex":"#aa3646"},{"name":"Roses in the Snow","hex":"#e7aecd"},{"name":"Rosetta","hex":"#ba8f7f"},{"name":"Rosette","hex":"#ce8e8b"},{"name":"Rosettee","hex":"#d7a491"},{"name":"Rosetti","hex":"#cf929a"},{"name":"Roseville","hex":"#b495b0"},{"name":"Rosewater","hex":"#e2c8bf"},{"name":"Rosewood","hex":"#65000b"},{"name":"Rosewood Apricot","hex":"#d39ea2"},{"name":"Rosewood Brown","hex":"#72371c"},{"name":"Rosewood Dreams","hex":"#ebbeb5"},{"name":"Rosey Afterglow","hex":"#fac8ce"},{"name":"Rosie","hex":"#ffbbcc"},{"name":"Rosie Posie","hex":"#efe4e9"},{"name":"Rosily","hex":"#be7583"},{"name":"Rosin","hex":"#39382f"},{"name":"Rosolanc Purple","hex":"#b319ab"},{"name":"Rosso Corsa","hex":"#d40000"},{"name":"Rosy","hex":"#be89a8"},{"name":"Rosy Aura","hex":"#d8b3b9"},{"name":"Rosy Brown","hex":"#bc8f8f"},{"name":"Rosy Cheeks","hex":"#dc506e"},{"name":"Rosy Cloud","hex":"#fedecd"},{"name":"Rosy Copper","hex":"#cf8974"},{"name":"Rosy Fluffy Bedspread","hex":"#cc77ff"},{"name":"Rosy Highlight","hex":"#f7d994"},{"name":"Rosy Lavender","hex":"#d7c7d0"},{"name":"Rosy Maple Moth","hex":"#fec9ed"},{"name":"Rosy Nectar","hex":"#f2c2e1"},{"name":"Rosy Outlook","hex":"#f5ab9e"},{"name":"Rosy Pink","hex":"#f6688e"},{"name":"Rosy Queen","hex":"#cf9384"},{"name":"Rosy Sandstone","hex":"#735551"},{"name":"Rosy Skin","hex":"#f7b978"},{"name":"Rosy Sunset","hex":"#d95854"},{"name":"Rosy Tan","hex":"#c8aba7"},{"name":"Roti","hex":"#b69642"},{"name":"Rotunda Gold","hex":"#f5e0bf"},{"name":"Rotunda White","hex":"#d7d1c6"},{"name":"Rouge","hex":"#ab1239"},{"name":"Rouge Charm","hex":"#814d54"},{"name":"Rouge Like","hex":"#a94064"},{"name":"Rouge Red","hex":"#e24666"},{"name":"Rouge Sarde","hex":"#ee2233"},{"name":"Rough Asphalt","hex":"#bdbebf"},{"name":"Rough Ride","hex":"#7a8687"},{"name":"Rough Stone","hex":"#9ea2aa"},{"name":"Roulette","hex":"#97635f"},{"name":"Rousseau Gold","hex":"#ead6af"},{"name":"Rousseau Green","hex":"#175844"},{"name":"Roux","hex":"#994400"},{"name":"Row House","hex":"#bfb8ad"},{"name":"Row House Tan","hex":"#d2bb9d"},{"name":"Rowan","hex":"#cb0162"},{"name":"Rowdy Orange","hex":"#eaa007"},{"name":"Rowntree","hex":"#8e8e6e"},{"name":"Roxy Brown","hex":"#7a5546"},{"name":"Royal","hex":"#0c1793"},{"name":"Royal Ash","hex":"#550344"},{"name":"Royal Azure","hex":"#0038a8"},{"name":"Royal Banner","hex":"#c74767"},{"name":"Royal Battle","hex":"#2f3844"},{"name":"Royal Blood","hex":"#105e80"},{"name":"Royal Blue","hex":"#4169e1"},{"name":"Royal Blue Metallic","hex":"#082d4f"},{"name":"Royal Blue Tang","hex":"#1600fc"},{"name":"Royal Breeze","hex":"#275779"},{"name":"Royal Brown","hex":"#523b35"},{"name":"Royal Cloak","hex":"#16a5a3"},{"name":"Royal Consort","hex":"#2e5686"},{"name":"Royal Coronation","hex":"#3e3542"},{"name":"Royal Crown","hex":"#94714c"},{"name":"Royal Curtsy","hex":"#282a4a"},{"name":"Royal Decree","hex":"#403547"},{"name":"Royal Flycatcher Crest","hex":"#ee6600"},{"name":"Royal Fortune","hex":"#747792"},{"name":"Royal Fuchsia","hex":"#ca2c92"},{"name":"Royal Garnet","hex":"#653a3d"},{"name":"Royal Glimmer","hex":"#9791bc"},{"name":"Royal Gold","hex":"#e1bc8a"},{"name":"Royal Gold Pearl","hex":"#d0a54e"},{"name":"Royal Gramma Purple","hex":"#a152bd"},{"name":"Royal Grey","hex":"#698396"},{"name":"Royal Heath","hex":"#b54b73"},{"name":"Royal Hunter Blue","hex":"#4411ee"},{"name":"Royal Hunter Green","hex":"#3f5948"},{"name":"Royal Hyacinth","hex":"#464b6a"},{"name":"Royal Indigo","hex":"#4e4260"},{"name":"Royal Intrigue","hex":"#687094"},{"name":"Royal Iris","hex":"#553e42"},{"name":"Royal Ivy","hex":"#787866"},{"name":"Royal Lavender","hex":"#7851a9"},{"name":"Royal Lilac","hex":"#84549b"},{"name":"Royal Lines","hex":"#6e3d58"},{"name":"Royal Liqueur","hex":"#784d40"},{"name":"Royal Mail Red","hex":"#da202a"},{"name":"Royal Maroon","hex":"#543938"},{"name":"Royal Marquis","hex":"#545e97"},{"name":"Royal Mile","hex":"#a1a0b7"},{"name":"Royal Milk Tea","hex":"#f7cfb4"},{"name":"Royal Navy","hex":"#45505b"},{"name":"Royal Navy Blue","hex":"#0066cc"},{"name":"Royal Neptune","hex":"#1c3b42"},{"name":"Royal Night","hex":"#2b3191"},{"name":"Royal Oakleaf","hex":"#879473"},{"name":"Royal Oranje","hex":"#ff7722"},{"name":"Royal Orchard","hex":"#5f6d59"},{"name":"Royal Palm","hex":"#418d84"},{"name":"Royal Peacock","hex":"#27ace0"},{"name":"Royal Pine","hex":"#355e5a"},{"name":"Royal Plum","hex":"#654161"},{"name":"Royal Pretender","hex":"#a063a1"},{"name":"Royal Proclamation","hex":"#aaa0bc"},{"name":"Royal Purple","hex":"#4b006e"},{"name":"Royal Purpleness","hex":"#881177"},{"name":"Royal Raisin","hex":"#806f72"},{"name":"Royal Rajah","hex":"#60456d"},{"name":"Royal Raul","hex":"#8f7bb7"},{"name":"Royal Red Flush","hex":"#8e3c3f"},{"name":"Royal Regatta","hex":"#678bc9"},{"name":"Royal Robe","hex":"#614a7b"},{"name":"Royal Rum","hex":"#a54a4a"},{"name":"Royal Silk","hex":"#4b3841"},{"name":"Royal Silver","hex":"#e0dddd"},{"name":"Royal Star","hex":"#fede4f"},{"name":"Royal Treatment","hex":"#494256"},{"name":"Royal Velvet","hex":"#513e4d"},{"name":"Royal Vessel","hex":"#4433ee"},{"name":"Royal Wave","hex":"#3e4967"},{"name":"Royal Wedding","hex":"#fbe3e3"},{"name":"Royal Yellow","hex":"#fada50"},{"name":"Royalty","hex":"#5930a9"},{"name":"Royalty Loyalty","hex":"#ae58ab"},{"name":"Roycroft Adobe","hex":"#a76251"},{"name":"Roycroft Bottle Green","hex":"#324038"},{"name":"Roycroft Brass","hex":"#7a6a51"},{"name":"Roycroft Bronze Green","hex":"#575449"},{"name":"Roycroft Copper Red","hex":"#7b3728"},{"name":"Roycroft Mist Grey","hex":"#c2bdb1"},{"name":"Roycroft Pewter","hex":"#616564"},{"name":"Roycroft Rose","hex":"#c08f80"},{"name":"Roycroft Suede","hex":"#a79473"},{"name":"Roycroft Vellum","hex":"#e8d9bd"},{"name":"Rozowy Pink","hex":"#f2a8b8"},{"name":"Rub Elbows","hex":"#5f5547"},{"name":"Rubber","hex":"#815d37"},{"name":"Rubber Band","hex":"#ce4676"},{"name":"Rubber Ducky","hex":"#facf58"},{"name":"Rubber Radish","hex":"#ff9999"},{"name":"Rubber Rose","hex":"#ffc5cb"},{"name":"Rubiate","hex":"#c04042"},{"name":"Rubidium","hex":"#c5b9b4"},{"name":"Rubine","hex":"#6c383c"},{"name":"Rubine Red","hex":"#d10056"},{"name":"Ruby","hex":"#ca0147"},{"name":"Ruby Crystal","hex":"#975b60"},{"name":"Ruby Dust","hex":"#e0115f"},{"name":"Ruby Eye","hex":"#d0a2a0"},{"name":"Ruby Grey","hex":"#73525c"},{"name":"Ruby Lips","hex":"#813e45"},{"name":"Ruby Queen","hex":"#b0063d"},{"name":"Ruby Red","hex":"#9b111e"},{"name":"Ruby Ring","hex":"#a03d41"},{"name":"Ruby Shade","hex":"#a2566f"},{"name":"Ruby Shard","hex":"#bd1c30"},{"name":"Ruby Slippers","hex":"#9c2e33"},{"name":"Ruby Star","hex":"#bb1122"},{"name":"Ruby Violet","hex":"#5c384e"},{"name":"Ruby Wine","hex":"#85393d"},{"name":"Rubylicious","hex":"#db1459"},{"name":"Rucksack Tan","hex":"#edb508"},{"name":"Ruddy","hex":"#ff0028"},{"name":"Ruddy Brown","hex":"#bb6528"},{"name":"Ruddy Oak","hex":"#a5654e"},{"name":"Ruddy Pink","hex":"#e18e96"},{"name":"Rudraksha Beads","hex":"#894e45"},{"name":"Ruffled Clam","hex":"#f9f2dc"},{"name":"Ruffled Iris","hex":"#9fa3c0"},{"name":"Ruffles","hex":"#fbbbae"},{"name":"Rufous","hex":"#a81c07"},{"name":"Rugby Tan","hex":"#bb9d87"},{"name":"Rugged Brown","hex":"#694336"},{"name":"Rugged Tan","hex":"#b8a292"},{"name":"Ruggero Grey","hex":"#484435"},{"name":"Ruggero Red","hex":"#8c3f3e"},{"name":"Ruined Smores","hex":"#0f1012"},{"name":"Ruins of Civilization","hex":"#cadece"},{"name":"Ruins of Metal","hex":"#9b8b84"},{"name":"Rule Breaker","hex":"#774e55"},{"name":"Rum","hex":"#716675"},{"name":"Rum Custard","hex":"#e9cfaa"},{"name":"Rum Punch","hex":"#aa423a"},{"name":"Rum Raisin","hex":"#683b3c"},{"name":"Rum Riche","hex":"#990044"},{"name":"Rum Spice","hex":"#aa7971"},{"name":"Rum Swizzle","hex":"#f1edd4"},{"name":"Rumba Orange","hex":"#c77b42"},{"name":"Rumba Red","hex":"#902a40"},{"name":"Rumors","hex":"#744245"},{"name":"Run Lola Run","hex":"#da2811"},{"name":"Rundlet Peach","hex":"#d3aa94"},{"name":"Runefang Steel","hex":"#c4c4c7"},{"name":"Runelord Brass","hex":"#b6a89a"},{"name":"Runic Mauve","hex":"#cab2c1"},{"name":"Running Water","hex":"#326193"},{"name":"Rural Eyes","hex":"#99af73"},{"name":"Rural Green","hex":"#8d844d"},{"name":"Rural Red","hex":"#bb1144"},{"name":"Ruri Blue","hex":"#1e50a2"},{"name":"Rurikon Blue","hex":"#1b294b"},{"name":"Rush Hour","hex":"#536770"},{"name":"Rushing River","hex":"#5f7797"},{"name":"Rushing Stream","hex":"#65c3d6"},{"name":"Rushmore Grey","hex":"#b7b2a6"},{"name":"Ruskie","hex":"#866c5e"},{"name":"Ruskin Blue","hex":"#546b75"},{"name":"Ruskin Bronze","hex":"#4d4d41"},{"name":"Ruskin Red","hex":"#935242"},{"name":"Ruskin Room Green","hex":"#aca17d"},{"name":"Russ Grey","hex":"#547588"},{"name":"Russeau Gold","hex":"#e7d6b1"},{"name":"Russet","hex":"#80461b"},{"name":"Russet Brown","hex":"#823d38"},{"name":"Russet Green","hex":"#e3d9a0"},{"name":"Russet Leather","hex":"#965849"},{"name":"Russet Orange","hex":"#e47127"},{"name":"Russet Red","hex":"#9f6859"},{"name":"Russian Blue","hex":"#9aaebb"},{"name":"Russian Green","hex":"#679267"},{"name":"Russian Olive","hex":"#726647"},{"name":"Russian Red","hex":"#4d4244"},{"name":"Russian Toffee","hex":"#d0c4af"},{"name":"Russian Uniform","hex":"#5f6d36"},{"name":"Russian Violet","hex":"#32174d"},{"name":"Rust","hex":"#a83c09"},{"name":"Rust Brown","hex":"#8b3103"},{"name":"Rust Coloured","hex":"#a46454"},{"name":"Rust Effect","hex":"#bb3344"},{"name":"Rust Magenta","hex":"#966684"},{"name":"Rust Orange","hex":"#c45508"},{"name":"Rust Red","hex":"#aa2704"},{"name":"Rusted Crimson","hex":"#60372e"},{"name":"Rusted Lock","hex":"#aa4411"},{"name":"Rusted Nail","hex":"#884b3d"},{"name":"Rustic Adobe","hex":"#d39a72"},{"name":"Rustic Brown","hex":"#935848"},{"name":"Rustic Cabin","hex":"#705536"},{"name":"Rustic City","hex":"#ba9a67"},{"name":"Rustic Cream","hex":"#f6efe2"},{"name":"Rustic Hacienda","hex":"#9c8e74"},{"name":"Rustic Oak","hex":"#996e58"},{"name":"Rustic Pottery","hex":"#df745b"},{"name":"Rustic Ranch","hex":"#8d794f"},{"name":"Rustic Red","hex":"#3a181a"},{"name":"Rustic Rose","hex":"#cbb6a4"},{"name":"Rustic Taupe","hex":"#cdb9a2"},{"name":"Rustic Tobacco","hex":"#6e5949"},{"name":"Rustica","hex":"#8a3a2c"},{"name":"Rustique","hex":"#f5bfb2"},{"name":"Rustling Leaves","hex":"#6b6d4e"},{"name":"Rusty","hex":"#96512a"},{"name":"Rusty Chainmail","hex":"#c6494c"},{"name":"Rusty Coin","hex":"#8d5f2c"},{"name":"Rusty Gate","hex":"#af6649"},{"name":"Rusty Heart","hex":"#a04039"},{"name":"Rusty Nail","hex":"#cc5522"},{"name":"Rusty Orange","hex":"#cd5909"},{"name":"Rusty Pebble","hex":"#e3dce0"},{"name":"Rusty Red","hex":"#af2f0d"},{"name":"Rusty Sand","hex":"#edb384"},{"name":"Rusty Sword","hex":"#a4493d"},{"name":"Rusty Tap","hex":"#719da8"},{"name":"Rutabaga","hex":"#ead5b6"},{"name":"Rutherford","hex":"#8d734f"},{"name":"Ruthless Empress","hex":"#573894"},{"name":"Rye","hex":"#d1ae7b"},{"name":"Rye Bread","hex":"#cdbea1"},{"name":"Rye Brown","hex":"#807465"},{"name":"Rye Dough Brown","hex":"#807365"},{"name":"Ryegrass","hex":"#bbb286"},{"name":"Ryoku-Ou-Shoku Yellow","hex":"#dccb18"},{"name":"Ryu\'s Kimono","hex":"#f3f1e1"},{"name":"Ryza Dust","hex":"#ec631a"},{"name":"S\'mores","hex":"#a87f5f"},{"name":"Sabal Palm","hex":"#496a4e"},{"name":"Saber Tooth","hex":"#d4b385"},{"name":"Saber-Toothed Tiger","hex":"#e69656"},{"name":"Sabiasagi Blue","hex":"#6a7f7a"},{"name":"Sabionando Grey","hex":"#455859"},{"name":"Sabiseiji Grey","hex":"#898a74"},{"name":"Sable","hex":"#784841"},{"name":"Sablé","hex":"#f6d8be"},{"name":"Sable Brown","hex":"#946a52"},{"name":"Sable Cloaked","hex":"#c4a7a1"},{"name":"Sablewood","hex":"#ecdfd6"},{"name":"Sabo Garden","hex":"#978d59"},{"name":"Sabz Green","hex":"#a5d610"},{"name":"Sachet Cushion","hex":"#d4d8ed"},{"name":"Sachet Pink","hex":"#f18ab0"},{"name":"Sacramento State Green","hex":"#00563f"},{"name":"Sacred Blue","hex":"#97b9e0"},{"name":"Sacred Ground","hex":"#b2865d"},{"name":"Sacred Sapling","hex":"#7c8635"},{"name":"Sacred Scarlet","hex":"#950c1b"},{"name":"Sacred Spring","hex":"#c7cbce"},{"name":"Sacred Turquoise","hex":"#49b3a5"},{"name":"Sacred Vortex","hex":"#a59c8d"},{"name":"Sacrifice","hex":"#2a5774"},{"name":"Sacrifice Altar","hex":"#850101"},{"name":"Sacro Bosco","hex":"#229911"},{"name":"Saddle","hex":"#5d4e46"},{"name":"Saddle Brown","hex":"#8b4513"},{"name":"Saddle Soap","hex":"#9f906e"},{"name":"Saddle Up","hex":"#ab927a"},{"name":"Saddlebag","hex":"#8a534e"},{"name":"Safari","hex":"#b6a58b"},{"name":"Safari Brown","hex":"#976c60"},{"name":"Safari Chic","hex":"#b7aa96"},{"name":"Safari Sun","hex":"#b4875e"},{"name":"Safari Trail","hex":"#8f7b51"},{"name":"Safari Vest","hex":"#b2a68f"},{"name":"Safe Harbour","hex":"#1e8ea1"},{"name":"Safe Haven","hex":"#5588aa"},{"name":"Safety Orange","hex":"#ff6600"},{"name":"Safety Yellow","hex":"#eed202"},{"name":"Safflower","hex":"#fdae44"},{"name":"Safflower Bark","hex":"#bb5548"},{"name":"Safflower Kite","hex":"#9a493f"},{"name":"Safflower Purple","hex":"#b44c97"},{"name":"Safflower Red","hex":"#d9333f"},{"name":"Safflower Scarlet","hex":"#e83929"},{"name":"Safflower Wisteria","hex":"#cca6bf"},{"name":"Safflowerish Sky","hex":"#8491c3"},{"name":"Saffron","hex":"#f4c430"},{"name":"Saffron Blossom Mauve","hex":"#9c8aab"},{"name":"Saffron Bread","hex":"#e8e9cf"},{"name":"Saffron Crocus","hex":"#584c77"},{"name":"Saffron Desires","hex":"#c24359"},{"name":"Saffron Gold","hex":"#f08f00"},{"name":"Saffron Mango","hex":"#f9bf58"},{"name":"Saffron Robe","hex":"#d49f4e"},{"name":"Saffron Soufflé","hex":"#feb209"},{"name":"Saffron Strands","hex":"#d39952"},{"name":"Saffron Sunset","hex":"#da9e35"},{"name":"Saffron Thread","hex":"#ffb301"},{"name":"Saffron Tint","hex":"#f2ead6"},{"name":"Saffron Valley","hex":"#a7843e"},{"name":"Saffron Yellow","hex":"#d09b2c"},{"name":"Saga Blue","hex":"#75a0b1"},{"name":"Sagat Purple","hex":"#6a31ca"},{"name":"Sage","hex":"#87ae73"},{"name":"Sage Advice","hex":"#948b76"},{"name":"Sage Blossom Blue","hex":"#4e78a9"},{"name":"Sage Brush","hex":"#bfc1a2"},{"name":"Sage Bundle","hex":"#bad3c7"},{"name":"Sage Garden","hex":"#7fab70"},{"name":"Sage Green","hex":"#887766"},{"name":"Sage Green Grey","hex":"#69796a"},{"name":"Sage Green Light","hex":"#73705e"},{"name":"Sage Grey","hex":"#9ea49d"},{"name":"Sage Leaves","hex":"#7b8b5d"},{"name":"Sage Salt","hex":"#dbebde"},{"name":"Sage Sensation","hex":"#b2e191"},{"name":"Sage Shadow","hex":"#5e6a61"},{"name":"Sage Splash","hex":"#e4e5d2"},{"name":"Sage Splendor","hex":"#c3c6a4"},{"name":"Sage Tint","hex":"#daded1"},{"name":"Sage Violet","hex":"#413c7b"},{"name":"Sage Wisdom","hex":"#afad96"},{"name":"Sagebrush","hex":"#947252"},{"name":"Sagebrush Green","hex":"#567572"},{"name":"Sagey","hex":"#a2aa8c"},{"name":"Sagittarius Amber Artifact","hex":"#fa7f46"},{"name":"Sago","hex":"#d8cfc3"},{"name":"Sago Garden","hex":"#94be7f"},{"name":"Saguaro","hex":"#655f2d"},{"name":"Sahara","hex":"#b79826"},{"name":"Sahara Dust","hex":"#a8989b"},{"name":"Sahara Gravel","hex":"#dfc08a"},{"name":"Sahara Light Red","hex":"#f0e1db"},{"name":"Sahara Sand","hex":"#f1e788"},{"name":"Sahara Shade","hex":"#e2ab60"},{"name":"Sahara Splendor","hex":"#9b7448"},{"name":"Sahara Sun","hex":"#c67363"},{"name":"Sahara Wind","hex":"#dfd4b7"},{"name":"Sail","hex":"#a5ceec"},{"name":"Sail Away","hex":"#55b4de"},{"name":"Sail Cloth","hex":"#ece5d7"},{"name":"Sail Cover","hex":"#588fa0"},{"name":"Sail Grey","hex":"#cabaa4"},{"name":"Sail into the Horizon","hex":"#a3bbdc"},{"name":"Sail Maker","hex":"#0e4d72"},{"name":"Sail On","hex":"#4575ad"},{"name":"Sail to the Sea","hex":"#99c3f0"},{"name":"Sailboat","hex":"#314a72"},{"name":"Sailcloth","hex":"#ece0c4"},{"name":"Sailfish","hex":"#2e9cbb"},{"name":"Sailing Safari","hex":"#3a5161"},{"name":"Sailing Tangerine","hex":"#ffa857"},{"name":"Sailor","hex":"#445780"},{"name":"Sailor Blue","hex":"#0f445c"},{"name":"Sailor Boy","hex":"#aebbd0"},{"name":"Sailor Moon","hex":"#ffee00"},{"name":"Sailor\'s Bay","hex":"#496f8e"},{"name":"Sailor\'s Coat","hex":"#334b58"},{"name":"Sailor\'s Knot","hex":"#b8a47a"},{"name":"Sainsbury","hex":"#66b89c"},{"name":"Saint Seiya Gold","hex":"#eeee00"},{"name":"Saira Red","hex":"#ff9bb7"},{"name":"Sakura","hex":"#dfb1b6"},{"name":"Sakura Mochi","hex":"#cea19f"},{"name":"Sakura Nezu","hex":"#e8dfe4"},{"name":"Sakura Night","hex":"#7b6c7c"},{"name":"Salad","hex":"#8ba673"},{"name":"Saladin","hex":"#7e8f69"},{"name":"Salal Leaves","hex":"#637d74"},{"name":"Salamander","hex":"#63775b"},{"name":"Salametti","hex":"#e25e31"},{"name":"Salami","hex":"#820000"},{"name":"Salami Slice","hex":"#da655e"},{"name":"Salem","hex":"#177b4d"},{"name":"Salem Black","hex":"#45494d"},{"name":"Salem Blue","hex":"#66a9d3"},{"name":"Salem Clay","hex":"#b4ab99"},{"name":"Salina Springs","hex":"#cad2d4"},{"name":"Saline Water","hex":"#c5e8e7"},{"name":"Salisbury Stone","hex":"#ddd8c6"},{"name":"Salmon","hex":"#ff796c"},{"name":"Salmon Beauty","hex":"#fbc6b6"},{"name":"Salmon Buff","hex":"#fea871"},{"name":"Salmon Carpaccio","hex":"#ee867d"},{"name":"Salmon Cream","hex":"#e9cfcf"},{"name":"Salmon Creek","hex":"#feddc5"},{"name":"Salmon Eggs","hex":"#f7d560"},{"name":"Salmon Flush","hex":"#f1c9cc"},{"name":"Salmon Fresco","hex":"#fbb1a2"},{"name":"Salmon Glow","hex":"#ebb9af"},{"name":"Salmon Grey","hex":"#e3b6aa"},{"name":"Salmon Mousse","hex":"#fcd1c3"},{"name":"Salmon Nigiri","hex":"#f9906f"},{"name":"Salmon Orange","hex":"#ff8c69"},{"name":"Salmon Pate","hex":"#d5847e"},{"name":"Salmon Peach","hex":"#fdc5b5"},{"name":"Salmon Pink","hex":"#ff91a4"},{"name":"Salmon Pink Red","hex":"#e1958f"},{"name":"Salmon Poké Bowl","hex":"#ee7777"},{"name":"Salmon Rose","hex":"#ff737e"},{"name":"Salmon Run","hex":"#edaf9c"},{"name":"Salmon Salt","hex":"#e7968b"},{"name":"Salmon Sand","hex":"#d9aa8f"},{"name":"Salmon Sashimi","hex":"#ff7e79"},{"name":"Salmon Slice","hex":"#f1ac8d"},{"name":"Salmon Smoke","hex":"#d4bfbd"},{"name":"Salmon Tartare","hex":"#ff9baa"},{"name":"Salmon Tint","hex":"#efccbf"},{"name":"Salmon Upstream","hex":"#ffa8a6"},{"name":"Salome","hex":"#bbeddb"},{"name":"Salomie","hex":"#ffd67b"},{"name":"Salon Bleu","hex":"#7d8697"},{"name":"Salon Rose","hex":"#ab7878"},{"name":"Salsa","hex":"#b31928"},{"name":"Salsa Diane","hex":"#bb4f5c"},{"name":"Salsa Habañero","hex":"#e35401"},{"name":"Salsa Mexicana","hex":"#a03413"},{"name":"Salsa Picante","hex":"#ab250b"},{"name":"Salsa Verde","hex":"#cec754"},{"name":"Salsify Grass","hex":"#2bb179"},{"name":"Salsify White","hex":"#ded8c4"},{"name":"Salt","hex":"#efede6"},{"name":"Salt Blue","hex":"#7d9c9d"},{"name":"Salt Box","hex":"#f5e9d9"},{"name":"Salt Box Blue","hex":"#648fa4"},{"name":"Salt Caramel","hex":"#d3934d"},{"name":"Salt Cellar","hex":"#dee0d7"},{"name":"Salt Crystal","hex":"#f0ede0"},{"name":"Salt Glaze","hex":"#cfd4ce"},{"name":"Salt Island Green","hex":"#757261"},{"name":"Salt Lake","hex":"#74c6d3"},{"name":"Salt Mountain","hex":"#d7fefe"},{"name":"Salt n Pepa","hex":"#dcd9db"},{"name":"Salt Pebble","hex":"#f9ecea"},{"name":"Salt Scrub","hex":"#d0c6af"},{"name":"Salt Spray","hex":"#a7c5ce"},{"name":"Salt Steppe","hex":"#eeddbb"},{"name":"Salt Water","hex":"#95bbd8"},{"name":"Salt Water Taffy","hex":"#d1ab99"},{"name":"Saltbox Blue","hex":"#65758a"},{"name":"Salted","hex":"#ebeadc"},{"name":"Salted Capers","hex":"#a69151"},{"name":"Salted Caramel","hex":"#ebb367"},{"name":"Salted Caramel Popcorn","hex":"#fdb251"},{"name":"Salted Pretzel","hex":"#816b56"},{"name":"Saltpan","hex":"#eef3e5"},{"name":"Saltwater","hex":"#c2d0de"},{"name":"Saltwater Depth","hex":"#52896b"},{"name":"Salty Breeze","hex":"#dde2d7"},{"name":"Salty Cracker","hex":"#e2c681"},{"name":"Salty Dog","hex":"#234058"},{"name":"Salty Ice","hex":"#cce2f3"},{"name":"Salty Seeds","hex":"#c1b993"},{"name":"Salty Tear","hex":"#cfebed"},{"name":"Salty Tears","hex":"#bacad4"},{"name":"Salty Thyme","hex":"#96b403"},{"name":"Salty Vapour","hex":"#cbdee3"},{"name":"Salute","hex":"#2f323d"},{"name":"Salvation","hex":"#514e5c"},{"name":"Salvia","hex":"#a8b59e"},{"name":"Salvia Blue","hex":"#96bfe6"},{"name":"Salvia Divinorum","hex":"#929752"},{"name":"Samantha\'s Room","hex":"#f2d7e6"},{"name":"Samba","hex":"#aa262b"},{"name":"Samba de Coco","hex":"#f0e0d4"},{"name":"Sambuca","hex":"#3b2e25"},{"name":"Sambucus","hex":"#17182b"},{"name":"Samoan Sun","hex":"#fabc46"},{"name":"Samovar Silver","hex":"#b8bebe"},{"name":"Samphire Green","hex":"#4db560"},{"name":"San Antonio Sage","hex":"#a69474"},{"name":"San Carlos Plaza","hex":"#d9bb8e"},{"name":"San Felix","hex":"#2c6e31"},{"name":"San Francisco Fog","hex":"#c4c2bc"},{"name":"San Francisco Mauve","hex":"#936a6d"},{"name":"San Francisco Pink","hex":"#bb33aa"},{"name":"San Gabriel Blue","hex":"#2f6679"},{"name":"San Juan","hex":"#445761"},{"name":"San Marino","hex":"#4e6c9d"},{"name":"San Miguel Blue","hex":"#527585"},{"name":"Sanctuary","hex":"#d4c9a6"},{"name":"Sanctuary Spa","hex":"#66b2e4"},{"name":"Sand","hex":"#e2ca76"},{"name":"Sand Blast","hex":"#decbab"},{"name":"Sand Brown","hex":"#cba560"},{"name":"Sand Castle","hex":"#e5d9c6"},{"name":"Sand Crystal","hex":"#ffeeda"},{"name":"Sand Dagger","hex":"#e6ddd2"},{"name":"Sand Dance","hex":"#e0c8b9"},{"name":"Sand Diamond","hex":"#fae8bc"},{"name":"Sand Dollar","hex":"#dccdbb"},{"name":"Sand Dollar White","hex":"#fae3c9"},{"name":"Sand Drift","hex":"#e5e0d3"},{"name":"Sand Dune","hex":"#e3d2c0"},{"name":"Sand Fossil","hex":"#decfb3"},{"name":"Sand Grain","hex":"#e3e4d9"},{"name":"Sand Island","hex":"#f4d1c2"},{"name":"Sand Motif","hex":"#ddc6a8"},{"name":"Sand Muffin","hex":"#ffdfc2"},{"name":"Sand Paper","hex":"#ccbb88"},{"name":"Sand Pearl","hex":"#e7d4b6"},{"name":"Sand Pebble","hex":"#b09d7f"},{"name":"Sand Puffs","hex":"#e6e5d3"},{"name":"Sand Pyramid","hex":"#ddcc77"},{"name":"Sand Ripples","hex":"#c1b7b0"},{"name":"Sand Shark","hex":"#5a86ad"},{"name":"Sand Trail","hex":"#d0c6a1"},{"name":"Sand Trap","hex":"#bba595"},{"name":"Sand Verbena","hex":"#9d89bd"},{"name":"Sand Yellow","hex":"#fdee73"},{"name":"Sandal","hex":"#a3876a"},{"name":"Sandalwood","hex":"#615543"},{"name":"Sandalwood Beige","hex":"#f2d1b1"},{"name":"Sandalwood Grey Blue","hex":"#005160"},{"name":"Sandalwood Tan","hex":"#907f68"},{"name":"Sandalwood White","hex":"#f2ecde"},{"name":"Sandbank","hex":"#e9d5ad"},{"name":"Sandbar","hex":"#cbbfad"},{"name":"Sandblast","hex":"#f5c9bf"},{"name":"Sandcastle","hex":"#e5d7c4"},{"name":"Sanderling","hex":"#c8ab96"},{"name":"Sandgrass Green","hex":"#93917f"},{"name":"Sandhill","hex":"#eddcbe"},{"name":"Sandhill Crane","hex":"#015e60"},{"name":"Sanding Sugar","hex":"#efebde"},{"name":"Sandpaper","hex":"#d7b1a5"},{"name":"Sandpiper","hex":"#ebdac8"},{"name":"Sandpiper Cove","hex":"#717474"},{"name":"Sandpit","hex":"#9e7c5e"},{"name":"Sandpoint","hex":"#eacdb0"},{"name":"Sandrift","hex":"#af937d"},{"name":"Sandrock","hex":"#c4b19a"},{"name":"Sands of Time","hex":"#bca38b"},{"name":"Sandshell","hex":"#d6c8b8"},{"name":"Sandstone","hex":"#c9ae74"},{"name":"Sandstone Cliff","hex":"#d2c9b7"},{"name":"Sandstone Grey","hex":"#857266"},{"name":"Sandstone Grey Green","hex":"#88928c"},{"name":"Sandstone Palette","hex":"#d9ccb6"},{"name":"Sandstone Red Grey","hex":"#886e70"},{"name":"Sandstorm","hex":"#ecd540"},{"name":"Sandwashed","hex":"#cbbe9c"},{"name":"Sandwashed Driftwood","hex":"#706859"},{"name":"Sandwashed Glassshard","hex":"#dee8e3"},{"name":"Sandwisp","hex":"#decb81"},{"name":"Sandworm","hex":"#fce883"},{"name":"Sandy","hex":"#f1da7a"},{"name":"Sandy Ash","hex":"#e4ded5"},{"name":"Sandy Bay","hex":"#fad7b3"},{"name":"Sandy Beach","hex":"#f9e2d0"},{"name":"Sandy Bluff","hex":"#aca088"},{"name":"Sandy Brown","hex":"#f4a460"},{"name":"Sandy Clay","hex":"#dbd0bd"},{"name":"Sandy Day","hex":"#d7cfc1"},{"name":"Sandy Hair","hex":"#b7ac97"},{"name":"Sandy Pail","hex":"#d2c098"},{"name":"Sandy Ridge","hex":"#a18e77"},{"name":"Sandy Shoes","hex":"#847563"},{"name":"Sandy Shore","hex":"#f2e9bb"},{"name":"Sandy Tan","hex":"#fdd9b5"},{"name":"Sandy Taupe","hex":"#967111"},{"name":"Sandy Toes","hex":"#c7b8a4"},{"name":"Sang de Boeuf","hex":"#771100"},{"name":"Sango Pink","hex":"#f5b1aa"},{"name":"Sango Red","hex":"#f8674f"},{"name":"Sangoire Red","hex":"#881100"},{"name":"Sangria","hex":"#b14566"},{"name":"Sanguinary","hex":"#f01a4d"},{"name":"Sanguine","hex":"#6c110e"},{"name":"Sanguine Brown","hex":"#6c3736"},{"name":"Sanskrit","hex":"#e69332"},{"name":"Santa Belly Red","hex":"#ad2c15"},{"name":"Santa Fe","hex":"#b16d52"},{"name":"Santa Fe Sunrise","hex":"#cc9469"},{"name":"Santa Fe Sunset","hex":"#a75a4c"},{"name":"Santa Fe Tan","hex":"#d5ad85"},{"name":"Santana Soul","hex":"#714636"},{"name":"Santas Grey","hex":"#9fa0b1"},{"name":"Santiago Orange","hex":"#e95f24"},{"name":"Santo","hex":"#d6d2ce"},{"name":"Santolina Blooms","hex":"#e3d0d5"},{"name":"Santorini","hex":"#41b0d0"},{"name":"Santorini Blue","hex":"#416d83"},{"name":"Sap Green","hex":"#5c8b15"},{"name":"Sapless Green","hex":"#bebdac"},{"name":"Sapling","hex":"#e1d5a6"},{"name":"Sappanwood","hex":"#9e3d3f"},{"name":"Sappanwood Incense","hex":"#a24f46"},{"name":"Sappanwood Perfume","hex":"#a86965"},{"name":"Sapphire","hex":"#0f52ba"},{"name":"Sapphire Blue","hex":"#0067bc"},{"name":"Sapphire Fog","hex":"#99a8c9"},{"name":"Sapphire Glitter","hex":"#0033cc"},{"name":"Sapphire Lace","hex":"#235c8e"},{"name":"Sapphire Light Yellow","hex":"#cdc7b4"},{"name":"Sapphire Pink","hex":"#887084"},{"name":"Sapphire Shimmer Blue","hex":"#5776af"},{"name":"Sapphire Siren","hex":"#662288"},{"name":"Sapphire Sparkle","hex":"#135e84"},{"name":"Sapphire Splendour","hex":"#2425b9"},{"name":"Sapphire Stone","hex":"#41495d"},{"name":"Sapphireberry","hex":"#c9e5ee"},{"name":"Sapphired","hex":"#5b82a6"},{"name":"Sarah\'s Garden","hex":"#00aac1"},{"name":"Saratoga","hex":"#555b2c"},{"name":"Sarawak White Pepper","hex":"#f4eeba"},{"name":"Sarcoline","hex":"#ffddaa"},{"name":"Sardinia Beaches","hex":"#28a4cb"},{"name":"Sargasso Sea","hex":"#3d4a67"},{"name":"Sari","hex":"#e47c64"},{"name":"Sarsaparilla","hex":"#5b4c44"},{"name":"Saruk Grey","hex":"#817265"},{"name":"Sashay Sand","hex":"#cfb4a8"},{"name":"Sasquatch Socks","hex":"#ff4681"},{"name":"Sassafras","hex":"#5a3940"},{"name":"Sassafras Tea","hex":"#dbd8ca"},{"name":"Sassy","hex":"#c18862"},{"name":"Sassy Grass","hex":"#7a8c31"},{"name":"Sassy Green","hex":"#bba86a"},{"name":"Sassy Lime","hex":"#dfe289"},{"name":"Sassy Pink","hex":"#f6cefc"},{"name":"Sassy Salmon","hex":"#ee7c54"},{"name":"Sassy Yellow","hex":"#f0c374"},{"name":"Satan","hex":"#e63626"},{"name":"Satellite","hex":"#9f8d89"},{"name":"Satin Black","hex":"#4e5152"},{"name":"Satin Blush","hex":"#ffe4c6"},{"name":"Satin Chocolate","hex":"#773344"},{"name":"Satin Cream White","hex":"#fdf3d5"},{"name":"Satin Deep Black","hex":"#1c1e21"},{"name":"Satin Flower","hex":"#b48fbd"},{"name":"Satin Green","hex":"#c7dfb8"},{"name":"Satin Latour","hex":"#fad7b0"},{"name":"Satin Lime","hex":"#33ee00"},{"name":"Satin Linen","hex":"#e6e4d4"},{"name":"Satin Pink","hex":"#fbe0dc"},{"name":"Satin Purse","hex":"#fff8ee"},{"name":"Satin Ribbon","hex":"#ffd8dc"},{"name":"Satin Sheen Gold","hex":"#cba135"},{"name":"Satin Soft Blue","hex":"#9cadc7"},{"name":"Satin Soil","hex":"#6b4836"},{"name":"Satin Souffle","hex":"#efe0bc"},{"name":"Satin Weave","hex":"#f3edd9"},{"name":"Satin White","hex":"#cfd5db"},{"name":"Satire","hex":"#c4c2cd"},{"name":"Sativa","hex":"#b5bf50"},{"name":"Satoimo Brown","hex":"#654321"},{"name":"Satsuma Imo Red","hex":"#96466a"},{"name":"Sattle","hex":"#aa6622"},{"name":"Saturated Sky","hex":"#4b4cfc"},{"name":"Saturn","hex":"#fae5bf"},{"name":"Saturn Grey","hex":"#b8b19f"},{"name":"Saturnia","hex":"#dddbce"},{"name":"Satyr Brown","hex":"#bca17a"},{"name":"Saucisson","hex":"#882c17"},{"name":"Saucy Gold","hex":"#b6743b"},{"name":"Saudi Sand","hex":"#9e958a"},{"name":"Sauerkraut","hex":"#eee0b9"},{"name":"Sauna Steam","hex":"#edebe1"},{"name":"Sausage Roll","hex":"#ebdfcd"},{"name":"Sausalito","hex":"#f4e5c5"},{"name":"Sausalito Port","hex":"#5d6f85"},{"name":"Sausalito Ridge","hex":"#6a5d53"},{"name":"Sauteed Mushroom","hex":"#ab9378"},{"name":"Sauterne","hex":"#c5a253"},{"name":"Sauvignon","hex":"#f4eae4"},{"name":"Sauvignon Blanc","hex":"#b18276"},{"name":"Savanna","hex":"#874c44"},{"name":"Savannah","hex":"#d1bd92"},{"name":"Savannah Grass","hex":"#babc72"},{"name":"Savannah Moss","hex":"#47533f"},{"name":"Savannah Sun","hex":"#ffb989"},{"name":"Saveloy","hex":"#aa2200"},{"name":"Savile Row","hex":"#c0b7cf"},{"name":"Saving Light","hex":"#550011"},{"name":"Savon de Provence","hex":"#eed9b6"},{"name":"Savory Salmon","hex":"#d19c97"},{"name":"Savoy","hex":"#87b550"},{"name":"Savoy Blue","hex":"#4b61d1"},{"name":"Savoy House","hex":"#7e4242"},{"name":"Sawdust","hex":"#f6e9cf"},{"name":"Sawgrass","hex":"#d1cfc0"},{"name":"Sawgrass Basket","hex":"#c3b090"},{"name":"Sawgrass Cottage","hex":"#d3cda2"},{"name":"Sawshark","hex":"#aa7766"},{"name":"Sawtooth Aak","hex":"#ec956c"},{"name":"Saxon","hex":"#abc1a0"},{"name":"Saxon Blue","hex":"#435965"},{"name":"Saxony Blue","hex":"#216b88"},{"name":"Saxophone Gold","hex":"#ceaf81"},{"name":"Say It With Red Roses","hex":"#c7111e"},{"name":"Sayward Pine","hex":"#383739"},{"name":"Sazerac","hex":"#f5dec4"},{"name":"Scab Red","hex":"#8b0000"},{"name":"Scallion","hex":"#6b8e23"},{"name":"Scallop Shell","hex":"#fbd8c9"},{"name":"Scalloped Oak","hex":"#f2d1a0"},{"name":"Scalloped Potato","hex":"#fce3cf"},{"name":"Scalloped Potatoes","hex":"#f6d58b"},{"name":"Scalloped Shell","hex":"#f3e9e0"},{"name":"Scallywag","hex":"#e5d5bd"},{"name":"Scaly Green","hex":"#027275"},{"name":"Scampi","hex":"#6f63a0"},{"name":"Scanda","hex":"#6b8ca9"},{"name":"Scandal","hex":"#add9d1"},{"name":"Scandalous Rose","hex":"#dfbdd0"},{"name":"Scandinavian Liquorice","hex":"#1a1110"},{"name":"Scandinavian Sky","hex":"#c2d3d6"},{"name":"Scapa Flow","hex":"#6b6a6c"},{"name":"Scarab","hex":"#2c3d37"},{"name":"Scarabaeus Sacer","hex":"#414040"},{"name":"Scarabœus Nobilis","hex":"#7d8c55"},{"name":"Scarborough","hex":"#809391"},{"name":"Scarecrow Frown","hex":"#a55e2b"},{"name":"Scarlet","hex":"#ff2400"},{"name":"Scarlet Apple","hex":"#922e4a"},{"name":"Scarlet Beebalm","hex":"#bb2d32"},{"name":"Scarlet Cattleya Orchid","hex":"#c70752"},{"name":"Scarlet Flame","hex":"#993366"},{"name":"Scarlet Glow","hex":"#cb0103"},{"name":"Scarlet Gum","hex":"#4a2d57"},{"name":"Scarlet Ibis","hex":"#f4601b"},{"name":"Scarlet Past","hex":"#a53b3d"},{"name":"Scarlet Red","hex":"#b63e36"},{"name":"Scarlet Ribbons","hex":"#a4334a"},{"name":"Scarlet Sage","hex":"#aa2335"},{"name":"Scarlet Shade","hex":"#7e2530"},{"name":"Scarlet Splendour","hex":"#cc0c1b"},{"name":"Scarlet Tanager","hex":"#b43b3d"},{"name":"Scarpetta","hex":"#8ca468"},{"name":"Scatman Blue","hex":"#647983"},{"name":"Scattered Showers","hex":"#7b8285"},{"name":"Scenario","hex":"#81a79e"},{"name":"Scene Stealer","hex":"#af6d62"},{"name":"Scenic Blue","hex":"#486275"},{"name":"Scenic Path","hex":"#cec5b4"},{"name":"Scenic Water","hex":"#88bbff"},{"name":"Scented Clove","hex":"#61524c"},{"name":"Scented Frill","hex":"#caaeb8"},{"name":"Scented Spring","hex":"#eed5ee"},{"name":"Scented Valentine","hex":"#f3d9d6"},{"name":"Sceptre Blue","hex":"#353542"},{"name":"Schabziger Yellow","hex":"#eeeebb"},{"name":"Schauss Pink","hex":"#ff91af"},{"name":"Schiaparelli Pink","hex":"#e84998"},{"name":"Schiava Blue","hex":"#192961"},{"name":"Schindler Brown","hex":"#8b714c"},{"name":"Schist","hex":"#87876f"},{"name":"Schnipo","hex":"#dd8855"},{"name":"Scholarship","hex":"#586a7d"},{"name":"School Bus","hex":"#ffd800"},{"name":"School Ink","hex":"#31373f"},{"name":"Schooner","hex":"#8d8478"},{"name":"Sci-fi Petrol","hex":"#006666"},{"name":"Sci-Fi Takeout","hex":"#00604b"},{"name":"Science Blue","hex":"#0076cc"},{"name":"Science Experiment","hex":"#97a53f"},{"name":"Scintillating Violet","hex":"#764663"},{"name":"Sconce","hex":"#ae935d"},{"name":"Sconce Gold","hex":"#957340"},{"name":"Scoop of Dark Matter","hex":"#110055"},{"name":"Scooter","hex":"#308ea0"},{"name":"Scorched","hex":"#351f19"},{"name":"Scorched Brown","hex":"#4d0001"},{"name":"Scorched Earth","hex":"#44403d"},{"name":"Scorched Metal","hex":"#423d27"},{"name":"Scorpio Scarlet Seal","hex":"#e75323"},{"name":"Scorpion","hex":"#6a6466"},{"name":"Scorpion Grass Blue","hex":"#99aac8"},{"name":"Scorpion Green","hex":"#62d84e"},{"name":"Scorpion Venom","hex":"#97ea10"},{"name":"Scorpy Green","hex":"#8eef15"},{"name":"Scorzonera Brown","hex":"#544e03"},{"name":"Scotch Blue","hex":"#000077"},{"name":"Scotch Bonnet","hex":"#fe9f00"},{"name":"Scotch Lassie","hex":"#649d85"},{"name":"Scotch Mist","hex":"#eee7c8"},{"name":"Scotch Thistle","hex":"#99719e"},{"name":"Scotchtone","hex":"#ebccb9"},{"name":"Scotland Isle","hex":"#87954f"},{"name":"Scotland Road","hex":"#9baa9a"},{"name":"Scots Pine","hex":"#5f653b"},{"name":"Scott Base","hex":"#66a3c3"},{"name":"Scouring Rush","hex":"#3b7960"},{"name":"Scoville High","hex":"#e34b26"},{"name":"Scoville Highness","hex":"#900405"},{"name":"Screamer Pink","hex":"#ab0040"},{"name":"Screamin\' Green","hex":"#66ff66"},{"name":"Screaming Bell Metal","hex":"#c16f45"},{"name":"Screaming Magenta","hex":"#cc00cc"},{"name":"Screaming Skull","hex":"#f0f2d2"},{"name":"Screech Owl","hex":"#eae4d8"},{"name":"Screed Grey","hex":"#9a908a"},{"name":"Screen Gem","hex":"#9d7798"},{"name":"Screen Glow","hex":"#66eeaa"},{"name":"Screen Test","hex":"#999eb0"},{"name":"Scribe","hex":"#9fabb6"},{"name":"Script Ink","hex":"#60616b"},{"name":"Script White","hex":"#dbdddf"},{"name":"Scrofulous Brown","hex":"#dba539"},{"name":"Scroll","hex":"#efe0cb"},{"name":"Scroll of Wisdom","hex":"#f3e5c0"},{"name":"Scrolled Parchment","hex":"#e9ddc9"},{"name":"Scrub","hex":"#3d4031"},{"name":"Scuba","hex":"#6392b7"},{"name":"Scuba Blue","hex":"#00a2c5"},{"name":"Scud","hex":"#acd7c8"},{"name":"Scuff Blue","hex":"#0044ee"},{"name":"Sculptor Clay","hex":"#ccc3b4"},{"name":"Sculptural Silver","hex":"#d1dad5"},{"name":"Scurf Green","hex":"#02737a"},{"name":"Sè Lèi Orange","hex":"#fc824a"},{"name":"Sea","hex":"#3c9992"},{"name":"Sea Anemone","hex":"#e8dad6"},{"name":"Sea Angel","hex":"#8bb8c3"},{"name":"Sea Beast","hex":"#62777e"},{"name":"Sea Bed","hex":"#29848d"},{"name":"Sea Blithe","hex":"#41545c"},{"name":"Sea Blue","hex":"#006994"},{"name":"Sea Breeze","hex":"#a4bfce"},{"name":"Sea Breeze Green","hex":"#c9d9e7"},{"name":"Sea Buckthorn","hex":"#ffbf65"},{"name":"Sea Cabbage","hex":"#519d76"},{"name":"Sea Caller","hex":"#45868b"},{"name":"Sea Cap","hex":"#e4f3df"},{"name":"Sea Capture","hex":"#61bddc"},{"name":"Sea Cave","hex":"#005986"},{"name":"Sea Challenge","hex":"#2c585c"},{"name":"Sea Cliff","hex":"#a5c7df"},{"name":"Sea Creature","hex":"#00586d"},{"name":"Sea Crystal","hex":"#608ba6"},{"name":"Sea Current","hex":"#4c959d"},{"name":"Sea Deep","hex":"#2d3c44"},{"name":"Sea Dew","hex":"#9ecdd5"},{"name":"Sea Drifter","hex":"#4b7794"},{"name":"Sea Drive","hex":"#c2d2e0"},{"name":"Sea Elephant","hex":"#77675c"},{"name":"Sea Fantasy","hex":"#1a9597"},{"name":"Sea Fern","hex":"#656d54"},{"name":"Sea Foam","hex":"#87e0cf"},{"name":"Sea Foam Mist","hex":"#cbdce2"},{"name":"Sea Fog","hex":"#dfddd6"},{"name":"Sea Frost","hex":"#d5dcdc"},{"name":"Sea Garden","hex":"#568e88"},{"name":"Sea Glass","hex":"#afc1bf"},{"name":"Sea Glass Teal","hex":"#a0e5d9"},{"name":"Sea Goddess","hex":"#216987"},{"name":"Sea Going","hex":"#2a2e44"},{"name":"Sea Grape","hex":"#3300aa"},{"name":"Sea Grass","hex":"#67ad83"},{"name":"Sea Green","hex":"#53fca1"},{"name":"Sea Haze Grey","hex":"#cbd9d4"},{"name":"Sea Hazel","hex":"#a7a291"},{"name":"Sea Hunter","hex":"#245878"},{"name":"Sea Ice","hex":"#d7f2ed"},{"name":"Sea Kale","hex":"#30a299"},{"name":"Sea Kelp","hex":"#354a55"},{"name":"Sea Lavender","hex":"#cfb1d8"},{"name":"Sea Lettuce","hex":"#67a181"},{"name":"Sea Life","hex":"#5dc6bf"},{"name":"Sea Lion","hex":"#7f8793"},{"name":"Sea Loch","hex":"#6e99d1"},{"name":"Sea Mariner","hex":"#434a54"},{"name":"Sea Mark","hex":"#92b6cf"},{"name":"Sea Mist","hex":"#dbeee0"},{"name":"Sea Monster","hex":"#658c7b"},{"name":"Sea Moss","hex":"#2c5252"},{"name":"Sea Nettle","hex":"#f47633"},{"name":"Sea Note","hex":"#5482c2"},{"name":"Sea Nymph","hex":"#8aaea4"},{"name":"Sea of Atlantis","hex":"#2d535a"},{"name":"Sea of Crete","hex":"#0693d5"},{"name":"Sea of Galilee","hex":"#466590"},{"name":"Sea of Tears","hex":"#1d4da0"},{"name":"Sea of Tranquility","hex":"#81d1da"},{"name":"Sea Paint","hex":"#00507a"},{"name":"Sea Palm","hex":"#72897e"},{"name":"Sea Pea","hex":"#457973"},{"name":"Sea Pearl","hex":"#e0e9e4"},{"name":"Sea Pine","hex":"#4c6969"},{"name":"Sea Pink","hex":"#db817e"},{"name":"Sea Quest","hex":"#3e7984"},{"name":"Sea Radish","hex":"#799781"},{"name":"Sea Ridge","hex":"#45a3cb"},{"name":"Sea Rover","hex":"#a3d1e2"},{"name":"Sea Salt","hex":"#eee1d7"},{"name":"Sea Salt Rivers","hex":"#5087bd"},{"name":"Sea Salt Sherbet","hex":"#fff5f7"},{"name":"Sea Serpent","hex":"#4bc7cf"},{"name":"Sea Serpent\'s Tears","hex":"#5511cc"},{"name":"Sea Sight","hex":"#00789b"},{"name":"Sea Sparkle","hex":"#469ba7"},{"name":"Sea Spray","hex":"#d2ebea"},{"name":"Sea Sprite","hex":"#b7ccc7"},{"name":"Sea Squash","hex":"#baa243"},{"name":"Sea Star","hex":"#4d939a"},{"name":"Sea Swimmer","hex":"#337f86"},{"name":"Sea Turtle","hex":"#818a40"},{"name":"Sea Urchin","hex":"#367d83"},{"name":"Sea Wind","hex":"#accad5"},{"name":"Sea Wonder","hex":"#0f9bc0"},{"name":"Seaborn","hex":"#85c2b2"},{"name":"Seaborne","hex":"#7aa5c9"},{"name":"Seabrook","hex":"#4b81af"},{"name":"Seabuckthorn Yellow Brown","hex":"#cd7b00"},{"name":"Seachange","hex":"#3e8896"},{"name":"Seacrest","hex":"#b6c9a6"},{"name":"Seafair Green","hex":"#b8f8d8"},{"name":"Seafarer","hex":"#204d68"},{"name":"Seafoam Blue","hex":"#78d1b6"},{"name":"Seafoam Dream","hex":"#c0cdc2"},{"name":"Seafoam Green","hex":"#99bb88"},{"name":"Seafoam Pearl","hex":"#c2ecd8"},{"name":"Seafoam Splashes","hex":"#b0efce"},{"name":"Seafoam Spray","hex":"#daefce"},{"name":"Seaglass","hex":"#d0e6de"},{"name":"Seagrass","hex":"#bcc6a2"},{"name":"Seagrass Green","hex":"#264e50"},{"name":"Seagull","hex":"#e0ded8"},{"name":"Seagull Grey","hex":"#d9d9d2"},{"name":"Seagull Wail","hex":"#c7bda8"},{"name":"Seal Blue","hex":"#475663"},{"name":"Seal Brown","hex":"#321414"},{"name":"Seal Grey","hex":"#8a9098"},{"name":"Seal Pup","hex":"#65869b"},{"name":"Sealegs","hex":"#6b8b8b"},{"name":"Sealskin","hex":"#48423c"},{"name":"Sealskin Shadow","hex":"#e9ece6"},{"name":"Seamount","hex":"#15646d"},{"name":"Seance","hex":"#69326e"},{"name":"Seaplane Grey","hex":"#3a3f41"},{"name":"Seaport","hex":"#006e8c"},{"name":"Seaport Steam","hex":"#aecac8"},{"name":"Searching Blue","hex":"#6c7f9a"},{"name":"Searchlight","hex":"#eff0bf"},{"name":"Seared Earth","hex":"#9a5633"},{"name":"Seared Grey","hex":"#495157"},{"name":"Searing Gorge Brown","hex":"#6b3b23"},{"name":"Seascape","hex":"#77a2ad"},{"name":"Seascape Blue","hex":"#a6bad1"},{"name":"Seascape Green","hex":"#b5e4e4"},{"name":"Seashell","hex":"#fff5ee"},{"name":"Seashell Cove","hex":"#104c77"},{"name":"Seashell Peach","hex":"#fff6de"},{"name":"Seashell Pink","hex":"#f7c8c2"},{"name":"Seashore Dreams","hex":"#b5dcef"},{"name":"Seaside","hex":"#66a4b0"},{"name":"Seaside Sand","hex":"#f2e9d7"},{"name":"Seaside Villa","hex":"#e9d5c9"},{"name":"Season Finale","hex":"#bea27b"},{"name":"Seasonal Beige","hex":"#e6b99f"},{"name":"Seasoned Acorn","hex":"#7f6640"},{"name":"Seasoned Apple Green","hex":"#8db600"},{"name":"Seasoned Salt","hex":"#cec2a1"},{"name":"Seastone","hex":"#7d8b8a"},{"name":"Seattle Red","hex":"#7d212a"},{"name":"Seawashed Glass","hex":"#a9c095"},{"name":"Seaweed","hex":"#18d17b"},{"name":"Seaweed Green","hex":"#35ad6b"},{"name":"Seaweed Salad","hex":"#7d7b55"},{"name":"Seaweed Tea","hex":"#5d7759"},{"name":"Seaweed Wrap","hex":"#4d473d"},{"name":"Seaworld","hex":"#125459"},{"name":"Seaworthy","hex":"#314d58"},{"name":"Sebright Chicken","hex":"#bd5701"},{"name":"Secluded Canyon","hex":"#c6876f"},{"name":"Secluded Green","hex":"#6f6d56"},{"name":"Secluded Woods","hex":"#495a52"},{"name":"Second Nature","hex":"#585642"},{"name":"Second Pour","hex":"#887ca4"},{"name":"Second Wind","hex":"#dfece9"},{"name":"Secrecy","hex":"#50759e"},{"name":"Secret Affair","hex":"#c41661"},{"name":"Secret Blush","hex":"#e1d2d5"},{"name":"Secret Cove","hex":"#68909d"},{"name":"Secret Crush","hex":"#d7dfd6"},{"name":"Secret Garden","hex":"#11aa66"},{"name":"Secret Glade","hex":"#b5b88d"},{"name":"Secret Journal","hex":"#7c6055"},{"name":"Secret Meadow","hex":"#72754f"},{"name":"Secret of Mana","hex":"#4166f5"},{"name":"Secret Passage","hex":"#372a05"},{"name":"Secret Passageway","hex":"#6d695e"},{"name":"Secret Path","hex":"#737054"},{"name":"Secret Safari","hex":"#c6bb68"},{"name":"Secret Scarlet","hex":"#7a0e0e"},{"name":"Secret Scent","hex":"#e3d7dc"},{"name":"Secret Society","hex":"#464e5a"},{"name":"Secret Story","hex":"#ff1493"},{"name":"Secure Blue","hex":"#5389a1"},{"name":"Security","hex":"#d6e1c2"},{"name":"Sedate Grey","hex":"#d1cdbf"},{"name":"Sedge","hex":"#b1a591"},{"name":"Sedge Grasses","hex":"#9a8841"},{"name":"Sedge Green","hex":"#707a68"},{"name":"Sedia","hex":"#b0a67e"},{"name":"Sediment","hex":"#b3a698"},{"name":"Sedona","hex":"#e7e0cf"},{"name":"Sedona at Sunset","hex":"#bf7c45"},{"name":"Sedona Brown","hex":"#886244"},{"name":"Sedona Canyon","hex":"#c16a55"},{"name":"Sedona Pink","hex":"#d6b8a7"},{"name":"Sedona Sage","hex":"#686d6c"},{"name":"Sedona Shadow","hex":"#665f70"},{"name":"Sedona Stone","hex":"#8e462f"},{"name":"Seduction","hex":"#fbf2bf"},{"name":"Seductive Thorns","hex":"#a2c748"},{"name":"Seed Brown","hex":"#734f39"},{"name":"Seed Pearl","hex":"#e6dac4"},{"name":"Seed Pod","hex":"#dac43c"},{"name":"Seedless Grape","hex":"#d3c3d4"},{"name":"Seedling","hex":"#c0cba1"},{"name":"Seeress","hex":"#a99ba9"},{"name":"Sefid White","hex":"#fff1f1"},{"name":"Sehnsucht Red","hex":"#903037"},{"name":"Seiheki Green","hex":"#3a6960"},{"name":"Seiji Green","hex":"#819c8b"},{"name":"Sekichiku Pink","hex":"#e5abbe"},{"name":"Sekkasshoku Brown","hex":"#683f36"},{"name":"Selago","hex":"#e6dfe7"},{"name":"Selective Yellow","hex":"#ffba00"},{"name":"Selenium","hex":"#777e7a"},{"name":"Self Powered","hex":"#8c7591"},{"name":"Self-Destruct","hex":"#c2b398"},{"name":"Self-Love","hex":"#d22b6d"},{"name":"Seljuk Blue","hex":"#4488ee"},{"name":"Sell Gold","hex":"#d4ae5e"},{"name":"Sell Out","hex":"#90a2b7"},{"name":"Semi Opal","hex":"#ab9649"},{"name":"Semi Sweet","hex":"#6b5250"},{"name":"Semi Sweet Chocolate","hex":"#6b4226"},{"name":"Semi-Precious","hex":"#659b97"},{"name":"Semolina","hex":"#c7ab8b"},{"name":"Semolina Pudding","hex":"#ffe8c7"},{"name":"Sēn Lín Lǜ Forest","hex":"#4ca973"},{"name":"Senate","hex":"#4a515f"},{"name":"Sencha Brown","hex":"#824b35"},{"name":"Seneca Rock","hex":"#9a927f"},{"name":"Senior Moment","hex":"#fdecc7"},{"name":"Sensai Brown","hex":"#494a41"},{"name":"Sensaicha brown","hex":"#3b3429"},{"name":"Sensaimidori Green","hex":"#374231"},{"name":"Sensational Sand","hex":"#bfa38d"},{"name":"Sensible Hue","hex":"#ead7b4"},{"name":"Sensitive Scorpion","hex":"#cc2266"},{"name":"Sensitive Tint","hex":"#cec9cc"},{"name":"Sensitivity","hex":"#a1b0be"},{"name":"Sensual Climax","hex":"#da3287"},{"name":"Sensual Fumes","hex":"#cd68e2"},{"name":"Sensual Peach","hex":"#ffd2b6"},{"name":"Sensuous","hex":"#b75e6b"},{"name":"Sensuous Grey","hex":"#837d7f"},{"name":"Sentimental","hex":"#e6d8d2"},{"name":"Sentimental Beige","hex":"#e0d8c5"},{"name":"Sentimental Lady","hex":"#c4d3dc"},{"name":"Sentimental Pink","hex":"#f8eef4"},{"name":"Sentinel","hex":"#d2e0d6"},{"name":"Sephiroth Grey","hex":"#8c92ac"},{"name":"Sepia","hex":"#704214"},{"name":"Sepia Black","hex":"#2b0202"},{"name":"Sepia Brown","hex":"#4b3526"},{"name":"Sepia Filter","hex":"#cbb499"},{"name":"Sepia Rose","hex":"#d4bbb6"},{"name":"Sepia Skin","hex":"#9f5c42"},{"name":"Sepia Tint","hex":"#8c7562"},{"name":"Sepia Tone","hex":"#b8a88a"},{"name":"Sepia Wash","hex":"#995915"},{"name":"Sepia Yellow","hex":"#8c7340"},{"name":"September Gold","hex":"#8d7548"},{"name":"September Morn","hex":"#ede6b3"},{"name":"September Morning","hex":"#ffe9bb"},{"name":"September Song","hex":"#d5d8c8"},{"name":"September Sun","hex":"#fdd7a2"},{"name":"Sequesta","hex":"#d4d158"},{"name":"Sequin","hex":"#e1c28d"},{"name":"Sequoia","hex":"#84463b"},{"name":"Sequoia Dusk","hex":"#795953"},{"name":"Sequoia Fog","hex":"#c5bbaf"},{"name":"Sequoia Grove","hex":"#935e4e"},{"name":"Sequoia Lake","hex":"#506c6b"},{"name":"Sequoia Redwood","hex":"#763f3d"},{"name":"Serape","hex":"#d88b4d"},{"name":"Seraphim Sepia","hex":"#d7824b"},{"name":"Seraphinite","hex":"#616f65"},{"name":"Serbian Green","hex":"#3e644f"},{"name":"Serena","hex":"#cfd0c1"},{"name":"Serenade","hex":"#fce9d7"},{"name":"Serendibite Black","hex":"#4a4354"},{"name":"Serendipity","hex":"#bde1d8"},{"name":"Serene","hex":"#dce3e4"},{"name":"Serene Blue","hex":"#1199bb"},{"name":"Serene Breeze","hex":"#bdd9d0"},{"name":"Serene Journey","hex":"#cfd8d1"},{"name":"Serene Peach","hex":"#f5d3b7"},{"name":"Serene Pink","hex":"#f6c6b9"},{"name":"Serene Scene","hex":"#d2c880"},{"name":"Serene Sea","hex":"#78a7c3"},{"name":"Serene Setting","hex":"#c5d2d9"},{"name":"Serene Sky","hex":"#c3e3eb"},{"name":"Serene Stream","hex":"#819daa"},{"name":"Serene Thought","hex":"#c5c0ac"},{"name":"Serenely","hex":"#ced7d5"},{"name":"Serengeti Dust","hex":"#e7dbc9"},{"name":"Serengeti Grass","hex":"#ab9579"},{"name":"Serengeti Green","hex":"#77cc88"},{"name":"Serengeti Sand","hex":"#fce7d0"},{"name":"Sereni Teal","hex":"#76baa8"},{"name":"Serenity","hex":"#91a8d0"},{"name":"Serenity\'s Reign","hex":"#507bce"},{"name":"Serial Kisses","hex":"#dd3744"},{"name":"Serious Cloud","hex":"#7d848b"},{"name":"Serious Grey","hex":"#cec9c7"},{"name":"Seriously Sand","hex":"#dcccb4"},{"name":"Serpent","hex":"#817f6d"},{"name":"Serpent Scepter","hex":"#bbcc00"},{"name":"Serpentine","hex":"#9b8e54"},{"name":"Serpentine Green","hex":"#a2b37a"},{"name":"Serpentine Shadow","hex":"#003300"},{"name":"Serrano Pepper","hex":"#556600"},{"name":"Seryi Grey","hex":"#9ca9ad"},{"name":"Sesame","hex":"#baa38b"},{"name":"Sesame Crunch","hex":"#c26a35"},{"name":"Sesame Seed","hex":"#e1d9b8"},{"name":"Sesame Street Green","hex":"#00a870"},{"name":"Settlement","hex":"#7e7970"},{"name":"Seven Days of Rain","hex":"#d3dae1"},{"name":"Seven Seas","hex":"#4a5c6a"},{"name":"Seven Veils","hex":"#e3b8bd"},{"name":"Severe Seal","hex":"#eee7de"},{"name":"Severely Burnt Toast","hex":"#241005"},{"name":"Seville Scarlet","hex":"#955843"},{"name":"Shabby Chic","hex":"#bb8a8e"},{"name":"Shabby Chic Pink","hex":"#efddd6"},{"name":"Shade of Amber","hex":"#ff7e00"},{"name":"Shade of Marigold","hex":"#b88a3d"},{"name":"Shade of Mauve","hex":"#ae7181"},{"name":"Shade of Violet","hex":"#8601af"},{"name":"Shade-Grown","hex":"#4e5147"},{"name":"Shaded Fern","hex":"#786947"},{"name":"Shaded Fuchsia","hex":"#664348"},{"name":"Shaded Glen","hex":"#8e824a"},{"name":"Shaded Hammock","hex":"#859c9b"},{"name":"Shaded Spruce","hex":"#005f6d"},{"name":"Shaded Sun","hex":"#f3eba5"},{"name":"Shaded Willow","hex":"#8ab18a"},{"name":"Shades of Rhodonite","hex":"#be2bdf"},{"name":"Shades of Ruby","hex":"#9c0009"},{"name":"Shades On","hex":"#605f5f"},{"name":"Shadow","hex":"#837050"},{"name":"Shadow Azalea Pink","hex":"#e96a97"},{"name":"Shadow Blue","hex":"#778ba5"},{"name":"Shadow Cliff","hex":"#7a6f66"},{"name":"Shadow Dance","hex":"#877d83"},{"name":"Shadow Effect","hex":"#788788"},{"name":"Shadow Gargoyle","hex":"#686767"},{"name":"Shadow Green","hex":"#9ac0b6"},{"name":"Shadow Grey","hex":"#b09691"},{"name":"Shadow Leaf","hex":"#395648"},{"name":"Shadow Lime","hex":"#ccde95"},{"name":"Shadow Mountain","hex":"#585858"},{"name":"Shadow of Night","hex":"#2a4f61"},{"name":"Shadow of the Colossus","hex":"#a3a2a1"},{"name":"Shadow Planet","hex":"#221144"},{"name":"Shadow Purple","hex":"#4e334e"},{"name":"Shadow Ridge","hex":"#5b5343"},{"name":"Shadow Taupe","hex":"#9c917f"},{"name":"Shadow Warrior","hex":"#1a2421"},{"name":"Shadow White","hex":"#eef1ea"},{"name":"Shadow Wood","hex":"#5e534a"},{"name":"Shadow Woods","hex":"#8a795d"},{"name":"Shadowdancer","hex":"#111155"},{"name":"Shadowed Steel","hex":"#4b4b4b"},{"name":"Shadows","hex":"#6b6d6a"},{"name":"Shady","hex":"#dbd6cb"},{"name":"Shady Blue","hex":"#42808a"},{"name":"Shady Character","hex":"#4c4b4c"},{"name":"Shady Glade","hex":"#007865"},{"name":"Shady Green","hex":"#635d4c"},{"name":"Shady Grey","hex":"#849292"},{"name":"Shady Lady","hex":"#9f9b9d"},{"name":"Shady Neon Blue","hex":"#5555ff"},{"name":"Shady Oak","hex":"#73694b"},{"name":"Shady Pink","hex":"#c4a1af"},{"name":"Shady White","hex":"#f0e9df"},{"name":"Shady Willow","hex":"#939689"},{"name":"Shagbark Olive","hex":"#645d41"},{"name":"Shaggy Barked","hex":"#b3ab98"},{"name":"Shagreen","hex":"#cbc99d"},{"name":"Shaker Blue","hex":"#748c96"},{"name":"Shaker Grey","hex":"#6c6556"},{"name":"Shaker Peg","hex":"#886a3f"},{"name":"Shakespeare","hex":"#609ab8"},{"name":"Shakker Red","hex":"#7f4340"},{"name":"Shakshuka","hex":"#aa3311"},{"name":"Shaku-Do Copper","hex":"#752100"},{"name":"Shale","hex":"#4a3f41"},{"name":"Shale Green","hex":"#6b886b"},{"name":"Shale Grey","hex":"#899da3"},{"name":"Shalimar","hex":"#f8f6a8"},{"name":"Shallot Bulb","hex":"#7b8d73"},{"name":"Shallot Leaf","hex":"#505c3a"},{"name":"Shallow End","hex":"#c5f5e8"},{"name":"Shallow Sea","hex":"#9ab8c2"},{"name":"Shallow Shoal","hex":"#9dd6d4"},{"name":"Shallow Shore","hex":"#b0dec8"},{"name":"Shallow Water","hex":"#8af1fe"},{"name":"Shallow Water Ground","hex":"#8caeac"},{"name":"Shamanic Journey","hex":"#cc855a"},{"name":"Shampoo","hex":"#ffcff1"},{"name":"Shamrock","hex":"#009e60"},{"name":"Shamrock Field","hex":"#358d52"},{"name":"Shamrock Green","hex":"#4ea77d"},{"name":"Shān Hú Hóng Coral","hex":"#fa9a85"},{"name":"Shandy","hex":"#ffe670"},{"name":"Shanghai Jade","hex":"#aad9bb"},{"name":"Shanghai Peach","hex":"#d79a91"},{"name":"Shanghai Silk","hex":"#c8dfc3"},{"name":"Shangri La","hex":"#ecd4d2"},{"name":"Shani Purple","hex":"#4c1050"},{"name":"Shank","hex":"#a18b5d"},{"name":"Sharbah Fizz","hex":"#9be3d7"},{"name":"Sharegaki Persimmon","hex":"#ffa26b"},{"name":"Shark","hex":"#cadcde"},{"name":"Shark Bait","hex":"#ee6699"},{"name":"Shark Fin","hex":"#969795"},{"name":"Shark Tooth","hex":"#e4e1d3"},{"name":"Sharknado","hex":"#35524a"},{"name":"Sharkskin","hex":"#808184"},{"name":"Sharp Blue","hex":"#2b3d54"},{"name":"Sharp Green","hex":"#c6ec7a"},{"name":"Sharp Grey","hex":"#c9cad1"},{"name":"Sharp Lime","hex":"#c0ad28"},{"name":"Sharp Pebbles","hex":"#dbd6d8"},{"name":"Sharp Yellow","hex":"#ecc043"},{"name":"Sharp-Rip Drill","hex":"#eae1d6"},{"name":"Shasta Lake","hex":"#355c74"},{"name":"Shattan Gold","hex":"#bb5577"},{"name":"Shattell","hex":"#b5a088"},{"name":"Shattered Ice","hex":"#daeee6"},{"name":"Shattered Porcelain","hex":"#eee2e0"},{"name":"Shattered Sky","hex":"#d0dde9"},{"name":"Shattered White","hex":"#f1f1e5"},{"name":"Shaved Chocolate","hex":"#5a4039"},{"name":"Shaved Ice","hex":"#a9b4ba"},{"name":"Shaving Cream","hex":"#e1e5e5"},{"name":"Shawarma","hex":"#dd9955"},{"name":"She Loves Pink","hex":"#e39b96"},{"name":"Shea","hex":"#f8f1eb"},{"name":"Sheaf","hex":"#d2ae84"},{"name":"Shearling","hex":"#e8e1ce"},{"name":"Shearwater Black","hex":"#5b5b6c"},{"name":"Shebang","hex":"#81876f"},{"name":"Sheen Green","hex":"#8fd400"},{"name":"Sheepskin","hex":"#d9b28b"},{"name":"Sheepskin Gloves","hex":"#ad9e87"},{"name":"Sheer Apricot","hex":"#f3c99d"},{"name":"Sheer Green","hex":"#b0c69a"},{"name":"Sheer Lavender","hex":"#efe2f2"},{"name":"Sheer Lilac","hex":"#b793c0"},{"name":"Sheer Peach","hex":"#fff7e7"},{"name":"Sheer Pink","hex":"#f6e5db"},{"name":"Sheer Rosebud","hex":"#ffe8e5"},{"name":"Sheer Scarf","hex":"#e3d6ca"},{"name":"Sheer Sunlight","hex":"#fffedf"},{"name":"Sheet Blue","hex":"#52616f"},{"name":"Sheet Metal","hex":"#5e6063"},{"name":"Sheffield","hex":"#638f7b"},{"name":"Sheffield Grey","hex":"#6b7680"},{"name":"Sheikh White","hex":"#efecee"},{"name":"Sheikh Zayed White","hex":"#e6efef"},{"name":"Shell","hex":"#dcc5bc"},{"name":"Shell Brook","hex":"#eee7e6"},{"name":"Shell Brown","hex":"#56564b"},{"name":"Shell Coral","hex":"#e88d68"},{"name":"Shell Ginger","hex":"#f9e4d6"},{"name":"Shell Haven","hex":"#ebdfc0"},{"name":"Shell Pink","hex":"#f88180"},{"name":"Shell Tint","hex":"#fdd7ca"},{"name":"Shell Walk","hex":"#b6b6a8"},{"name":"Shell White","hex":"#f0ebe0"},{"name":"Shelter","hex":"#b8986c"},{"name":"Sheltered Bay","hex":"#758f9a"},{"name":"Shēn Chéng Orange","hex":"#c03f20"},{"name":"Shēn Hóng Red","hex":"#be0620"},{"name":"Shepherd\'s Warning","hex":"#c06f68"},{"name":"Sheraton Sage","hex":"#8f8666"},{"name":"Sherbet Fruit","hex":"#f8c8bb"},{"name":"Sheriff","hex":"#ebcfaa"},{"name":"Sheringa Rose","hex":"#735153"},{"name":"Sherpa Blue","hex":"#00494e"},{"name":"Sherry Cream","hex":"#f9e4db"},{"name":"Sherwood Forest","hex":"#555a4c"},{"name":"Sherwood Green","hex":"#1b4636"},{"name":"Shetland Lace","hex":"#dfd0c0"},{"name":"Shetland Pony","hex":"#d6a48d"},{"name":"Shì Zǐ Chéng Persimmon","hex":"#e29f31"},{"name":"Shiffurple","hex":"#9900aa"},{"name":"Shifting Sand","hex":"#d6c0ab"},{"name":"Shiitake","hex":"#a5988a"},{"name":"Shikon","hex":"#2b2028"},{"name":"Shilo","hex":"#e6b2a6"},{"name":"Shimmer","hex":"#88c7e9"},{"name":"Shimmering Blue","hex":"#82dbcc"},{"name":"Shimmering Blush","hex":"#d98695"},{"name":"Shimmering Brook","hex":"#64b3d3"},{"name":"Shimmering Champagne","hex":"#f3debc"},{"name":"Shimmering Expanse Cyan","hex":"#45e9fd"},{"name":"Shimmering Glade","hex":"#a4943a"},{"name":"Shimmering Love","hex":"#ff88cc"},{"name":"Shimmering Pool","hex":"#d2efe6"},{"name":"Shimmering Sea","hex":"#2b526a"},{"name":"Shimmering Sky","hex":"#dbd1e8"},{"name":"Shin Godzilla","hex":"#9a373f"},{"name":"Shinbashi","hex":"#59b9c6"},{"name":"Shinbashi Azure","hex":"#006c7f"},{"name":"Shindig","hex":"#00a990"},{"name":"Shine Baby Shine","hex":"#a85e6e"},{"name":"Shiner","hex":"#773ca7"},{"name":"Shingle Fawn","hex":"#745937"},{"name":"Shining Armor","hex":"#908b8e"},{"name":"Shining Gold","hex":"#ffd200"},{"name":"Shining Knight","hex":"#989ea7"},{"name":"Shining Silver","hex":"#c7c7c9"},{"name":"Shinkansen White","hex":"#dacdcd"},{"name":"Shinshu","hex":"#8f1d21"},{"name":"Shiny Armor","hex":"#a1a9a8"},{"name":"Shiny Gold","hex":"#ae9f65"},{"name":"Shiny Kettle","hex":"#cea190"},{"name":"Shiny Luster","hex":"#dbdddb"},{"name":"Shiny Nickel","hex":"#ccd3d8"},{"name":"Shiny Rubber","hex":"#3a363b"},{"name":"Shiny Shamrock","hex":"#5fa778"},{"name":"Shiny Silk","hex":"#f7ecca"},{"name":"Shiny Trumpet","hex":"#ecae58"},{"name":"Ship Cove","hex":"#7988ab"},{"name":"Ship Grey","hex":"#3e3a44"},{"name":"Ship Steering Wheel","hex":"#62493b"},{"name":"Ship\'s Harbour","hex":"#4f84af"},{"name":"Ship\'s Officer","hex":"#2d3a49"},{"name":"Shipmate","hex":"#7aa3cc"},{"name":"Shipwreck","hex":"#968772"},{"name":"Shipyard","hex":"#4f6f85"},{"name":"Shiracha Brown","hex":"#c48e69"},{"name":"Shiraz","hex":"#842833"},{"name":"Shire","hex":"#646b59"},{"name":"Shire Green","hex":"#68e52f"},{"name":"Shiroi White","hex":"#ebf5f0"},{"name":"Shironeri Silk","hex":"#feddcb"},{"name":"Shirt Blue","hex":"#6598af"},{"name":"Shisha Coal","hex":"#3c3b3c"},{"name":"Shishi Pink","hex":"#efab93"},{"name":"Shishito Pepper Green","hex":"#bbf90f"},{"name":"Shiso Green","hex":"#63a950"},{"name":"Shiva Blue","hex":"#99dbfe"},{"name":"Shock Jockey","hex":"#bb88aa"},{"name":"Shocking","hex":"#e899be"},{"name":"Shocking Crimson","hex":"#ff0d04"},{"name":"Shocking Orange","hex":"#ff6e1c"},{"name":"Shocking Pink","hex":"#fe02a2"},{"name":"Shockwave","hex":"#72c8b8"},{"name":"Shoe Wax","hex":"#2b2b2b"},{"name":"Shoelace","hex":"#eae4d9"},{"name":"Shoelace Beige","hex":"#f6ebd3"},{"name":"Shōji","hex":"#ded5c7"},{"name":"Shoji White","hex":"#e6dfd3"},{"name":"Shojo\'s Blood","hex":"#e2041b"},{"name":"Shōjōhi Red","hex":"#dc3023"},{"name":"Shooting Star","hex":"#ecf0eb"},{"name":"Shopping Bag","hex":"#5a4743"},{"name":"Shore Water","hex":"#6797a2"},{"name":"Shoreland","hex":"#ead9cb"},{"name":"Shoreline","hex":"#6c8791"},{"name":"Shoreline Green","hex":"#58c6ab"},{"name":"Shoreline Haze","hex":"#d2cbbc"},{"name":"Short and Sweet","hex":"#edd1d3"},{"name":"Short Phase","hex":"#bbdfd5"},{"name":"Shortbread","hex":"#f5e6d3"},{"name":"Shortbread Cookie","hex":"#eaceb0"},{"name":"Shortcake","hex":"#eedaac"},{"name":"Shortgrass Prairie","hex":"#9e957c"},{"name":"Shot Over","hex":"#4a5c69"},{"name":"Shot-Put","hex":"#716b63"},{"name":"Shovel Knight","hex":"#37c4fa"},{"name":"Show Business","hex":"#dd835b"},{"name":"Show Stopper","hex":"#a42e37"},{"name":"Showcase Blue","hex":"#93aebc"},{"name":"Shower","hex":"#9fadb7"},{"name":"Showstopper","hex":"#7f607f"},{"name":"Shrimp","hex":"#e29a86"},{"name":"Shrimp Boat","hex":"#f5be9d"},{"name":"Shrimp Boudin","hex":"#dbbfa3"},{"name":"Shrimp Cocktail","hex":"#f4a461"},{"name":"Shrimp Toast","hex":"#f7c5a0"},{"name":"Shrine of Pleasures","hex":"#cc3388"},{"name":"Shrinking Violet","hex":"#5d84b1"},{"name":"Shrub Green","hex":"#003636"},{"name":"Shrubbery","hex":"#a9c08a"},{"name":"Shrubby Lichen","hex":"#b5d1db"},{"name":"Shu Red","hex":"#eb6101"},{"name":"Shǔi Cǎo Lǜ Green","hex":"#40826d"},{"name":"Shui Jiao Dumpling","hex":"#dccca3"},{"name":"Shukra Blue","hex":"#2b64ad"},{"name":"Shuriken","hex":"#333344"},{"name":"Shutter Blue","hex":"#666e7f"},{"name":"Shutter Copper","hex":"#bb6622"},{"name":"Shutter Grey","hex":"#797f7d"},{"name":"Shutterbug","hex":"#bba262"},{"name":"Shutters","hex":"#6c705e"},{"name":"Shuttle Grey","hex":"#61666b"},{"name":"Shy Beige","hex":"#e2ded6"},{"name":"Shy Blunt","hex":"#d3d8de"},{"name":"Shy Candela","hex":"#d6dde6"},{"name":"Shy Cupid","hex":"#f0d6ca"},{"name":"Shy Denim","hex":"#d7dadd"},{"name":"Shy Girl","hex":"#ffd7cf"},{"name":"Shy Green","hex":"#e5e8d9"},{"name":"Shy Guy Red","hex":"#aa0055"},{"name":"Shy Mint","hex":"#e0e4db"},{"name":"Shy Moment","hex":"#aaaaff"},{"name":"Shy Pink","hex":"#dfd9dc"},{"name":"Shy Smile","hex":"#dcbbbe"},{"name":"Shy Violet","hex":"#d6c7d6"},{"name":"Shylock","hex":"#5ab9a4"},{"name":"Shyness","hex":"#f3f3d9"},{"name":"Siam","hex":"#686b50"},{"name":"Siam Gold","hex":"#896f40"},{"name":"Siamese Green","hex":"#9dac79"},{"name":"Siamese Kitten","hex":"#efe1d5"},{"name":"Siberian Fur","hex":"#eee2d5"},{"name":"Siberian Green","hex":"#4e6157"},{"name":"Siberian Ice","hex":"#c1ccd6"},{"name":"Sicilia Bougainvillea","hex":"#ff44ff"},{"name":"Sicilian Villa","hex":"#fcc792"},{"name":"Sicily Sea","hex":"#c1c6ad"},{"name":"Sick Blue","hex":"#502d86"},{"name":"Sick Green","hex":"#9db92c"},{"name":"Sickly Green","hex":"#94b21c"},{"name":"Sickly Yellow","hex":"#d0e429"},{"name":"Sidecar","hex":"#e9d9a9"},{"name":"Sidekick","hex":"#bfc3ae"},{"name":"Sidesaddle","hex":"#a17858"},{"name":"Sideshow","hex":"#e2c591"},{"name":"Sidewalk Chalk Blue","hex":"#dbe9ed"},{"name":"Sidewalk Chalk Pink","hex":"#f7ccc4"},{"name":"Sidewalk Grey","hex":"#7b8f99"},{"name":"Sienna","hex":"#a9561e"},{"name":"Sienna Buff","hex":"#cda589"},{"name":"Sienna Dust","hex":"#dcc4ac"},{"name":"Sienna Ochre","hex":"#de9f83"},{"name":"Sienna Red","hex":"#b1635e"},{"name":"Sienna Yellow","hex":"#f1d28c"},{"name":"Sierra","hex":"#a35c46"},{"name":"Sierra Foothills","hex":"#a28a67"},{"name":"Sierra Madre","hex":"#c2bcae"},{"name":"Sierra Pink","hex":"#ed9181"},{"name":"Sierra Redwood","hex":"#924e3c"},{"name":"Sierra Sand","hex":"#afa28f"},{"name":"Siesta","hex":"#f0c3a7"},{"name":"Siesta Dreams","hex":"#c9a480"},{"name":"Siesta Rose","hex":"#ec7878"},{"name":"Siesta Sands","hex":"#f1e6e0"},{"name":"Siesta Tan","hex":"#e9d8c8"},{"name":"Siesta White","hex":"#cbdadb"},{"name":"Sightful","hex":"#76a4a6"},{"name":"Sigmarite","hex":"#caad76"},{"name":"Sign of Spring","hex":"#e3ede2"},{"name":"Sign of the Crown","hex":"#fce299"},{"name":"Signal Green","hex":"#33ff00"},{"name":"Signal Grey","hex":"#838684"},{"name":"Signal Pink","hex":"#b15384"},{"name":"Signal White","hex":"#ecece6"},{"name":"Signature Blue","hex":"#455371"},{"name":"Silence","hex":"#eaede5"},{"name":"Silence is Golden","hex":"#c2a06d"},{"name":"Silent Breath","hex":"#e9f1ec"},{"name":"Silent Breeze","hex":"#c6eaec"},{"name":"Silent Delight","hex":"#e5e7e8"},{"name":"Silent Film","hex":"#9fa5a5"},{"name":"Silent Ivory","hex":"#fef2c7"},{"name":"Silent Night","hex":"#526771"},{"name":"Silent Ripple","hex":"#abe3de"},{"name":"Silent River","hex":"#bad9d9"},{"name":"Silent Sage","hex":"#729988"},{"name":"Silent Sands","hex":"#a99582"},{"name":"Silent Sea","hex":"#3a4a63"},{"name":"Silent Smoke","hex":"#dbd7ce"},{"name":"Silent Storm","hex":"#c3c7bd"},{"name":"Silent Tide","hex":"#7c929a"},{"name":"Silent White","hex":"#e5e7e4"},{"name":"Silentropae Cloud","hex":"#ccbbbb"},{"name":"Silestone","hex":"#b29e81"},{"name":"Silhouette","hex":"#cbcdc4"},{"name":"Silica","hex":"#dbd4bf"},{"name":"Silica Sand","hex":"#ede2e0"},{"name":"Silicate Green","hex":"#88b2a9"},{"name":"Silicate Light Turquoise","hex":"#cddad3"},{"name":"Siliceous Red","hex":"#5a3d4a"},{"name":"Silicone Seduction","hex":"#ebe0ca"},{"name":"Silicone Serena","hex":"#dcdccf"},{"name":"Silithus Brown","hex":"#d57b65"},{"name":"Silk","hex":"#bbada1"},{"name":"Silk Chiffon","hex":"#ccbfc7"},{"name":"Silk Crepe Grey","hex":"#354e4b"},{"name":"Silk Crepe Mauve","hex":"#6e7196"},{"name":"Silk Dessou","hex":"#eee9dc"},{"name":"Silk Elegance","hex":"#f6e8de"},{"name":"Silk for the Gods","hex":"#ecddc9"},{"name":"Silk Gown","hex":"#fceedb"},{"name":"Silk Jewel","hex":"#02517a"},{"name":"Silk Khimar","hex":"#70939e"},{"name":"Silk Lilac","hex":"#9188b5"},{"name":"Silk Lining","hex":"#fcefe0"},{"name":"Silk Pillow","hex":"#f3f0ea"},{"name":"Silk Ribbon","hex":"#c86e8b"},{"name":"Silk Road","hex":"#97976f"},{"name":"Silk Sails","hex":"#f6eecd"},{"name":"Silk Sari","hex":"#009283"},{"name":"Silk Satin","hex":"#8b4248"},{"name":"Silk Sheets","hex":"#efdddf"},{"name":"Silk Sox","hex":"#a5b2c7"},{"name":"Silk Star","hex":"#f5eec6"},{"name":"Silk Stone","hex":"#cc9999"},{"name":"Silken Chocolate","hex":"#b77d5f"},{"name":"Silken Gold","hex":"#fce17c"},{"name":"Silken Jade","hex":"#11a39e"},{"name":"Silken Peacock","hex":"#427584"},{"name":"Silken Pebble","hex":"#d0d0c9"},{"name":"Silken Pine","hex":"#495d5a"},{"name":"Silken Raspberry","hex":"#aa7d89"},{"name":"Silken Ruby","hex":"#e81320"},{"name":"Silken Tofu","hex":"#fef6d8"},{"name":"Silken Web","hex":"#dadcd4"},{"name":"Silkie Chicken","hex":"#fdefdb"},{"name":"Silkroad","hex":"#ece0b2"},{"name":"Silkworm","hex":"#eeeecc"},{"name":"Silky Bamboo","hex":"#eae0cd"},{"name":"Silky Green","hex":"#bdc2bb"},{"name":"Silky Mint","hex":"#d7ecd9"},{"name":"Silky Pink","hex":"#ffddf4"},{"name":"Silky Tofu","hex":"#fff5e4"},{"name":"Silky White","hex":"#efebe2"},{"name":"Silky Yogurt","hex":"#f2f3cd"},{"name":"Silly Puddy","hex":"#f4b0bb"},{"name":"Silt","hex":"#8a7d72"},{"name":"Silt Green","hex":"#a3b9ac"},{"name":"Silver","hex":"#c0c0c0"},{"name":"Silver Ash","hex":"#dddbd0"},{"name":"Silver Bells","hex":"#b8b4b6"},{"name":"Silver Birch","hex":"#d2cfc4"},{"name":"Silver Bird","hex":"#fbf5f0"},{"name":"Silver Blue","hex":"#8a9a9a"},{"name":"Silver Blueberry","hex":"#5b7085"},{"name":"Silver Bullet","hex":"#b6b5b8"},{"name":"Silver Chalice","hex":"#acaea9"},{"name":"Silver Charm","hex":"#adb0b4"},{"name":"Silver City","hex":"#e2e4e9"},{"name":"Silver Cloud","hex":"#beb7b0"},{"name":"Silver Clouds","hex":"#a6aaa2"},{"name":"Silver Creek","hex":"#d9dad2"},{"name":"Silver Cross","hex":"#cdc5c2"},{"name":"Silver Dagger","hex":"#c1c1d1"},{"name":"Silver Dollar","hex":"#bdb6ae"},{"name":"Silver Drop","hex":"#9ab2a9"},{"name":"Silver Dust","hex":"#e8e7e0"},{"name":"Silver Feather","hex":"#edebe7"},{"name":"Silver Fern","hex":"#e1ddbf"},{"name":"Silver Filigree","hex":"#7f7c81"},{"name":"Silver Fir Blue","hex":"#7196a2"},{"name":"Silver Fox","hex":"#bdbcc4"},{"name":"Silver Grass","hex":"#c6cec3"},{"name":"Silver Grass Traces","hex":"#dfe4dc"},{"name":"Silver Green","hex":"#d7d7c7"},{"name":"Silver Grey","hex":"#a8a8a4"},{"name":"Silver Hill","hex":"#6d747b"},{"name":"Silver Lake","hex":"#dedddd"},{"name":"Silver Lake Blue","hex":"#5686b4"},{"name":"Silver Laurel","hex":"#d8dcc8"},{"name":"Silver Leaf","hex":"#9db7a5"},{"name":"Silver Linden Grey","hex":"#859382"},{"name":"Silver Lined","hex":"#bbbfc3"},{"name":"Silver Lining","hex":"#b8b1a5"},{"name":"Silver Lustre","hex":"#a8a798"},{"name":"Silver Maple Green","hex":"#71776e"},{"name":"Silver Marlin","hex":"#c8c8c0"},{"name":"Silver Mauve","hex":"#dbccd3"},{"name":"Silver Medal","hex":"#d6d6d6"},{"name":"Silver Mine","hex":"#bec2c1"},{"name":"Silver Mink","hex":"#9f8d7c"},{"name":"Silver Moon","hex":"#d9d7c9"},{"name":"Silver Peony","hex":"#e1c1b9"},{"name":"Silver Phoenix","hex":"#ebecf5"},{"name":"Silver Pine","hex":"#526e6b"},{"name":"Silver Pink","hex":"#d9a8a8"},{"name":"Silver Polish","hex":"#c6c6c6"},{"name":"Silver Rose","hex":"#d29ea6"},{"name":"Silver Rust","hex":"#c9a0df"},{"name":"Silver Sage","hex":"#8e8572"},{"name":"Silver Sand","hex":"#bebdb6"},{"name":"Silver Sands","hex":"#dadedd"},{"name":"Silver Sateen","hex":"#c7c6c0"},{"name":"Silver Sconce","hex":"#a19fa5"},{"name":"Silver Screen","hex":"#a6aeaa"},{"name":"Silver Service","hex":"#b2aaaa"},{"name":"Silver Setting","hex":"#d8dadb"},{"name":"Silver Shadow","hex":"#d8dad8"},{"name":"Silver Skate","hex":"#87a1b1"},{"name":"Silver Sky","hex":"#eaece9"},{"name":"Silver Snippet","hex":"#8e9090"},{"name":"Silver Spoon","hex":"#d3d3d2"},{"name":"Silver Springs","hex":"#b7bdc4"},{"name":"Silver Spruce","hex":"#cadfdd"},{"name":"Silver Star","hex":"#98a0b8"},{"name":"Silver Storm","hex":"#8599a8"},{"name":"Silver Strand","hex":"#b8c7ce"},{"name":"Silver Strand Beach","hex":"#cacdca"},{"name":"Silver Strawberry","hex":"#f2c1c0"},{"name":"Silver Surfer","hex":"#7e7d88"},{"name":"Silver Sweetpea","hex":"#c4c9e2"},{"name":"Silver Taupe","hex":"#b8b2a2"},{"name":"Silver Thistle Beige","hex":"#e7d5c5"},{"name":"Silver Tinsel","hex":"#b6b3a9"},{"name":"Silver Tipped Sage","hex":"#bfc2bf"},{"name":"Silver Tradition","hex":"#d9d9d3"},{"name":"Silver Tree","hex":"#67be90"},{"name":"Silver Whiskers","hex":"#bbc5c4"},{"name":"Silver White","hex":"#e7e8e3"},{"name":"Silver Willow Green","hex":"#637c5b"},{"name":"Silver-Tongued","hex":"#cdc7c7"},{"name":"Silverado","hex":"#6a6472"},{"name":"Silverado Ranch","hex":"#a7a89b"},{"name":"Silverado Trail","hex":"#b7bbc6"},{"name":"Silverback","hex":"#cbcbcb"},{"name":"Silverbeet","hex":"#5a6a43"},{"name":"Silverberry","hex":"#bebbc9"},{"name":"Silverfish","hex":"#8d95aa"},{"name":"Silvermist","hex":"#b0b8b2"},{"name":"Silverpine","hex":"#4e6866"},{"name":"Silverpine Cyan","hex":"#8ae8ff"},{"name":"Silverplate","hex":"#c2c0ba"},{"name":"Silverpointe","hex":"#d1d2cb"},{"name":"Silverstone","hex":"#b1b3b3"},{"name":"Silverton","hex":"#bfd9ce"},{"name":"Silverware","hex":"#b8b8bf"},{"name":"Silvery Moon","hex":"#e6e5dc"},{"name":"Silvery Streak","hex":"#d5dbd5"},{"name":"Similar to Slate","hex":"#2f4e4e"},{"name":"Simmered Seaweed","hex":"#4c3d30"},{"name":"Simmering Ridge","hex":"#cb9281"},{"name":"Simmering Smoke","hex":"#a99f96"},{"name":"Simpatico Blue","hex":"#a8c1d4"},{"name":"Simple Pink","hex":"#f9a3aa"},{"name":"Simple Serenity","hex":"#c8d9e5"},{"name":"Simple Silhouette","hex":"#7a716e"},{"name":"Simple Stone","hex":"#cdc7b7"},{"name":"Simple White","hex":"#dfd9d2"},{"name":"Simplicity","hex":"#ced0db"},{"name":"Simplify Beige","hex":"#d6c7b9"},{"name":"Simply Blue","hex":"#adbbc9"},{"name":"Simply Delicious","hex":"#ffd2c1"},{"name":"Simply Elegant","hex":"#cedde7"},{"name":"Simply Green","hex":"#00aa81"},{"name":"Simply Peachy","hex":"#ffc06c"},{"name":"Simply Posh","hex":"#8cb9d4"},{"name":"Simply Purple","hex":"#715bb1"},{"name":"Simply Sage","hex":"#a7a996"},{"name":"Simply Sparkling","hex":"#b0c5e0"},{"name":"Simply Taupe","hex":"#ad9f93"},{"name":"Simply Violet","hex":"#a6a1d7"},{"name":"Simply White","hex":"#ebede7"},{"name":"Simpson Surprise","hex":"#82856d"},{"name":"Simpsons Yellow","hex":"#ffd90f"},{"name":"Sin City","hex":"#cfa236"},{"name":"Sinatra","hex":"#4675b7"},{"name":"Sinbad","hex":"#a6d5d0"},{"name":"Sinful","hex":"#645059"},{"name":"Singapore Orchid","hex":"#a020f0"},{"name":"Singing Blue","hex":"#0074a4"},{"name":"Singing in the Rain","hex":"#8e9c98"},{"name":"Singing the Blues","hex":"#2b4d68"},{"name":"Single Origin","hex":"#713e39"},{"name":"Sinister","hex":"#12110e"},{"name":"Sinister Minister","hex":"#353331"},{"name":"Sinister Mood","hex":"#a89c94"},{"name":"Siniy Blue","hex":"#4c4dff"},{"name":"Sinkhole","hex":"#49716d"},{"name":"Sinking Sand","hex":"#d8b778"},{"name":"Sinner\'s City","hex":"#fee5cb"},{"name":"Sinoper Red","hex":"#bb1111"},{"name":"Sinopia","hex":"#cb410b"},{"name":"Sinsemilla","hex":"#b6bd4a"},{"name":"Sip of Mint","hex":"#dedfc9"},{"name":"Sip of Nut Milk","hex":"#eae2df"},{"name":"Sir Edmund","hex":"#20415d"},{"name":"Siren","hex":"#69293b"},{"name":"Siren of Nature","hex":"#68a43c"},{"name":"Sirocco","hex":"#68766e"},{"name":"Sis Kebab","hex":"#884411"},{"name":"Sisal","hex":"#c5baa0"},{"name":"Siskin Green","hex":"#c8c76f"},{"name":"Siskin Sprout","hex":"#7a942e"},{"name":"Sister Loganberry Frost","hex":"#863f76"},{"name":"Site White","hex":"#dcdedc"},{"name":"Sitter Red","hex":"#3c2233"},{"name":"Sitting Pretty","hex":"#f4e2d9"},{"name":"Sixteen Million Pink","hex":"#fd02ff"},{"name":"Sixties Blue","hex":"#0079a9"},{"name":"Siyâh Black","hex":"#1c1b1a"},{"name":"Sizzling Hot","hex":"#a36956"},{"name":"Sizzling Red","hex":"#ff3855"},{"name":"Sizzling Sunrise","hex":"#ffdb00"},{"name":"Sizzling Sunset","hex":"#eb7e4d"},{"name":"Sizzling Watermelon","hex":"#fa005c"},{"name":"Skarsnik Green","hex":"#5f9370"},{"name":"Skavenblight Dinge","hex":"#47413b"},{"name":"Skeleton","hex":"#ebdecc"},{"name":"Skeleton Bone","hex":"#f4ebbc"},{"name":"Skeletor\'s Cape","hex":"#773399"},{"name":"Skeptic","hex":"#9db4aa"},{"name":"Ski Patrol","hex":"#c9133e"},{"name":"Ski Slope","hex":"#e1e5e3"},{"name":"Ski White","hex":"#d2e3e5"},{"name":"Skilandis","hex":"#41332f"},{"name":"Skimmed Milk White","hex":"#feffe3"},{"name":"Skink Blue","hex":"#5cbfce"},{"name":"Skinny Dip","hex":"#f9dbd2"},{"name":"Skinny Jeans","hex":"#5588ff"},{"name":"Skipper","hex":"#748796"},{"name":"Skipper Blue","hex":"#4c4d78"},{"name":"Skipping Rocks","hex":"#d1d0c9"},{"name":"Skipping Stone","hex":"#d0cbb6"},{"name":"Skirret Green","hex":"#51b73b"},{"name":"Skobeloff","hex":"#007474"},{"name":"Skrag Brown","hex":"#b04e0f"},{"name":"Skull","hex":"#e3dac9"},{"name":"Skullcrusher Brass","hex":"#f1c78e"},{"name":"Skullfire","hex":"#f9f5da"},{"name":"Sky","hex":"#76d6ff"},{"name":"Sky Babe","hex":"#88c1d8"},{"name":"Sky Blue","hex":"#9fb9e2"},{"name":"Sky Blue Pink","hex":"#dcbfe1"},{"name":"Sky Bus","hex":"#99c1d6"},{"name":"Sky Captain","hex":"#242933"},{"name":"Sky Chase","hex":"#a5cad1"},{"name":"Sky City","hex":"#a0bdd9"},{"name":"Sky Cloud","hex":"#addee5"},{"name":"Sky Dancer","hex":"#4499ff"},{"name":"Sky Dive","hex":"#60bfd3"},{"name":"Sky Eyes","hex":"#8eaabd"},{"name":"Sky Fall","hex":"#89c6df"},{"name":"Sky Glass","hex":"#d1dcd8"},{"name":"Sky Grey","hex":"#b6c3c1"},{"name":"Sky High","hex":"#a7c2eb"},{"name":"Sky Light View","hex":"#cadade"},{"name":"Sky Lodge","hex":"#546977"},{"name":"Sky Magenta","hex":"#cf71af"},{"name":"Sky of Magritte","hex":"#0099ff"},{"name":"Sky of Ocean","hex":"#82cde5"},{"name":"Sky Pilot","hex":"#a2bad4"},{"name":"Sky Splash","hex":"#c9d3d3"},{"name":"Sky Wanderer","hex":"#b8dced"},{"name":"Sky Watch","hex":"#8acfd6"},{"name":"Sky\'s the Limit","hex":"#bbcee0"},{"name":"Skyan","hex":"#66ccff"},{"name":"Skydiver","hex":"#83acd3"},{"name":"Skydiving","hex":"#c6d6d7"},{"name":"Skydome","hex":"#38a3cc"},{"name":"Skylar","hex":"#6bccc1"},{"name":"Skylark","hex":"#c1e4f0"},{"name":"Skylight","hex":"#b8d6d7"},{"name":"Skyline","hex":"#959eb7"},{"name":"Skyline Steel","hex":"#b9c0c3"},{"name":"Skylla","hex":"#1f7cc2"},{"name":"Skysail Blue","hex":"#818db3"},{"name":"Skyscraper","hex":"#d3dbe2"},{"name":"Skyvory","hex":"#dcd7cd"},{"name":"Skywalker","hex":"#c1deea"},{"name":"Skywalker Green","hex":"#8ffe08"},{"name":"Skyward","hex":"#a6c4ca"},{"name":"Skyway","hex":"#a6bbcf"},{"name":"Slaanesh Grey","hex":"#dbd5e6"},{"name":"Slap Happy","hex":"#c9cc4a"},{"name":"Slate","hex":"#516572"},{"name":"Slate Black","hex":"#4b3d33"},{"name":"Slate Blue","hex":"#5b7c99"},{"name":"Slate Brown","hex":"#a0987c"},{"name":"Slate Green","hex":"#658d6d"},{"name":"Slate Grey","hex":"#59656d"},{"name":"Slate Mauve","hex":"#625c63"},{"name":"Slate Pebble","hex":"#b4ada9"},{"name":"Slate Pink","hex":"#b3586c"},{"name":"Slate Rock","hex":"#868988"},{"name":"Slate Rose","hex":"#ba6671"},{"name":"Slate Stone","hex":"#acb4ac"},{"name":"Slate Tile","hex":"#606e74"},{"name":"Slate Tint","hex":"#7a818d"},{"name":"Slate Violet","hex":"#989192"},{"name":"Slate Wall","hex":"#40535d"},{"name":"Sled","hex":"#4c5055"},{"name":"Sleek White","hex":"#faf6e9"},{"name":"Sleep","hex":"#4579ac"},{"name":"Sleep Baby Sleep","hex":"#bed1e1"},{"name":"Sleeping Easy","hex":"#98bddd"},{"name":"Sleeping Giant","hex":"#786d5e"},{"name":"Sleepless Blue","hex":"#badbed"},{"name":"Sleepy Blue","hex":"#bccbce"},{"name":"Sleepy Hollow","hex":"#b7c9d1"},{"name":"Sleepy Hollows","hex":"#839c6d"},{"name":"Sleepy Owlet","hex":"#b5a78d"},{"name":"Sleet","hex":"#8a8c94"},{"name":"Slender Reed","hex":"#dec29f"},{"name":"Slice of Heaven","hex":"#0022ee"},{"name":"Slice of Watermelon","hex":"#e1697c"},{"name":"Sliced Cucumber","hex":"#cccfbf"},{"name":"Slices of Happy","hex":"#ede5bc"},{"name":"Slick Blue","hex":"#73ccd8"},{"name":"Slick Green","hex":"#615d4c"},{"name":"Slick Mud","hex":"#a66e49"},{"name":"Sliding","hex":"#97aeaf"},{"name":"Slight Mushroom","hex":"#cfc9c5"},{"name":"Slightly Golden","hex":"#cb904e"},{"name":"Slightly in Love","hex":"#fce6db"},{"name":"Slightly Peach","hex":"#f1ddd8"},{"name":"Slightly Rose","hex":"#e6cfce"},{"name":"Slightly Spritzig","hex":"#92d2ed"},{"name":"Slightly Zen","hex":"#dce4dd"},{"name":"Slime","hex":"#a7c408"},{"name":"Slime Girl","hex":"#00bb88"},{"name":"Slime Lime","hex":"#b8ebc5"},{"name":"Slimer Green","hex":"#aadd00"},{"name":"Slimy Green","hex":"#7ded17"},{"name":"Slipper Satin","hex":"#bfc1cb"},{"name":"Slippery Moss","hex":"#beba82"},{"name":"Slippery Salmon","hex":"#f87e63"},{"name":"Slippery Shale","hex":"#7b766c"},{"name":"Slippery Soap","hex":"#efedd8"},{"name":"Slippery Stone","hex":"#8d6a4a"},{"name":"Slippery Tub","hex":"#d5f3ec"},{"name":"Slopes","hex":"#d2b698"},{"name":"Slow Dance","hex":"#dbdcc4"},{"name":"Slow Green","hex":"#c6d5c9"},{"name":"Slow Perch","hex":"#d5d4ce"},{"name":"Slubbed Silk","hex":"#e1c2be"},{"name":"Sludge","hex":"#ca6b02"},{"name":"Slugger","hex":"#42342b"},{"name":"Slumber","hex":"#2d517c"},{"name":"Slumber Sloth","hex":"#cdc5b5"},{"name":"Sly Fox","hex":"#804741"},{"name":"Sly Shrimp","hex":"#f8e2d9"},{"name":"Smallmouth Bass","hex":"#ac9a7e"},{"name":"Smalt","hex":"#003399"},{"name":"Smalt Blue","hex":"#496267"},{"name":"Smaragdine","hex":"#4a9976"},{"name":"Smart White","hex":"#f6f3ec"},{"name":"Smashed Grape","hex":"#8775a1"},{"name":"Smashed Potatoes","hex":"#e2d0b9"},{"name":"Smashed Pumpkin","hex":"#ff6d3a"},{"name":"Smashing Pumpkins","hex":"#ff5522"},{"name":"Smell of Garlic","hex":"#d9ddcb"},{"name":"Smell of Lavender","hex":"#dce0ea"},{"name":"Smell the Mint","hex":"#bef7cf"},{"name":"Smell the Roses","hex":"#bb7283"},{"name":"Smells of Fresh Bread","hex":"#d7cecd"},{"name":"Smidgen of Love","hex":"#f0ccd9"},{"name":"Smiley Face","hex":"#ffc962"},{"name":"Smitten","hex":"#c84186"},{"name":"Smock Blue","hex":"#3b646c"},{"name":"Smoke","hex":"#bfc8c3"},{"name":"Smoke & Ash","hex":"#939789"},{"name":"Smoke and Mirrors","hex":"#d9e6e8"},{"name":"Smoke Blue","hex":"#6688bb"},{"name":"Smoke Bush","hex":"#cc7788"},{"name":"Smoke Bush Rose","hex":"#ad8177"},{"name":"Smoke Cloud","hex":"#adb6b9"},{"name":"Smoke Dragon","hex":"#ccbbaa"},{"name":"Smoke Green","hex":"#9fb296"},{"name":"Smoke Grey","hex":"#cebaa8"},{"name":"Smoke Pine","hex":"#446b61"},{"name":"Smoke Screen","hex":"#aeaeae"},{"name":"Smoke Tree","hex":"#bb5f34"},{"name":"Smoked Amethyst","hex":"#5a4351"},{"name":"Smoked Black Coffee","hex":"#3b2f2f"},{"name":"Smoked Claret","hex":"#583a39"},{"name":"Smoked Flamingo","hex":"#674244"},{"name":"Smoked Ham","hex":"#f2b381"},{"name":"Smoked Lavender","hex":"#ceb5b3"},{"name":"Smoked Mauve","hex":"#a89c97"},{"name":"Smoked Mulberry","hex":"#725f6c"},{"name":"Smoked Oak Brown","hex":"#573f16"},{"name":"Smoked Oyster","hex":"#d9d2cd"},{"name":"Smoked Paprika","hex":"#793a30"},{"name":"Smoked Pearl","hex":"#6f6e70"},{"name":"Smoked Purple","hex":"#444251"},{"name":"Smoked Salmon","hex":"#fa8072"},{"name":"Smoked Silver","hex":"#ddbbcc"},{"name":"Smoked Tan","hex":"#aea494"},{"name":"Smoked Umber","hex":"#d0c6bd"},{"name":"Smokehouse","hex":"#716354"},{"name":"Smokescreen","hex":"#5e5755"},{"name":"Smokestack","hex":"#beb2a5"},{"name":"Smokey Blue","hex":"#647b84"},{"name":"Smokey Claret","hex":"#88716d"},{"name":"Smokey Cream","hex":"#e9dfd5"},{"name":"Smokey Denim","hex":"#747b92"},{"name":"Smokey Lilac","hex":"#928996"},{"name":"Smokey Pink","hex":"#cebdb4"},{"name":"Smokey Slate","hex":"#a5b5ac"},{"name":"Smokey Stone","hex":"#9a9da2"},{"name":"Smokey Tan","hex":"#9f8c7c"},{"name":"Smokey Topaz","hex":"#a57b5b"},{"name":"Smokey Wings","hex":"#a7a5a3"},{"name":"Smokin Hot","hex":"#954a3d"},{"name":"Smoking Mirror","hex":"#a29587"},{"name":"Smoking Night Blue","hex":"#43454c"},{"name":"Smoking Red","hex":"#992200"},{"name":"Smoky","hex":"#605d6b"},{"name":"Smoky Azurite","hex":"#708d9e"},{"name":"Smoky Beige","hex":"#b9a796"},{"name":"Smoky Black","hex":"#100c08"},{"name":"Smoky Blue","hex":"#7196a6"},{"name":"Smoky Day","hex":"#a49e93"},{"name":"Smoky Emerald","hex":"#4c726b"},{"name":"Smoky Forest","hex":"#817d68"},{"name":"Smoky Grape","hex":"#9b8fa6"},{"name":"Smoky Grey Green","hex":"#939087"},{"name":"Smoky Mauve","hex":"#998ba5"},{"name":"Smoky Mountain","hex":"#afa8a9"},{"name":"Smoky Orchid","hex":"#e1d9dc"},{"name":"Smoky Pink","hex":"#bb8d88"},{"name":"Smoky Quartz","hex":"#51484f"},{"name":"Smoky Salmon","hex":"#e2b6a7"},{"name":"Smoky Slate","hex":"#a1a18f"},{"name":"Smoky Studio","hex":"#7e8590"},{"name":"Smoky Sunrise","hex":"#aa9793"},{"name":"Smoky Tone","hex":"#9d9e9d"},{"name":"Smoky Topaz","hex":"#7e7668"},{"name":"Smoky Trout","hex":"#857d72"},{"name":"Smoky White","hex":"#aeada3"},{"name":"Smoky Wings","hex":"#b2aca9"},{"name":"Smoldering Copper","hex":"#aa6e4b"},{"name":"Smooch Rouge","hex":"#d13d4b"},{"name":"Smooth As Corn Silk","hex":"#f4e4b3"},{"name":"Smooth Beech","hex":"#d3bb96"},{"name":"Smooth Coffee","hex":"#5d4e4c"},{"name":"Smooth Pebbles","hex":"#cabab1"},{"name":"Smooth Satin","hex":"#a2d5d3"},{"name":"Smooth Silk","hex":"#f6ead2"},{"name":"Smooth Stone","hex":"#bcb6b3"},{"name":"Smooth-Hound Shark","hex":"#97b2b1"},{"name":"Smoothie Green","hex":"#988e01"},{"name":"Smouldering Red","hex":"#ca3434"},{"name":"Smudged Lips","hex":"#ee4466"},{"name":"Snail Trail Silver","hex":"#e9eeeb"},{"name":"Snake Eyes","hex":"#e9cb4c"},{"name":"Snake Fruit","hex":"#db2217"},{"name":"Snake River","hex":"#45698c"},{"name":"Snakebite","hex":"#bb4444"},{"name":"Snakebite Leather","hex":"#baa208"},{"name":"Snakes in the Grass","hex":"#889717"},{"name":"Snap Pea Green","hex":"#8a8650"},{"name":"Snap-Shot","hex":"#2b3e52"},{"name":"Snapdragon","hex":"#fed777"},{"name":"Snappy Happy","hex":"#eb8239"},{"name":"Snappy Violet","hex":"#cc0088"},{"name":"Snarky Mint","hex":"#9ae37d"},{"name":"Sneaky Devil","hex":"#840014"},{"name":"Sneaky Sesame","hex":"#896a46"},{"name":"Sneezy","hex":"#9d7938"},{"name":"Snip of Parsley","hex":"#718854"},{"name":"Snip of Tannin","hex":"#dccebb"},{"name":"Snobby Shore","hex":"#dd7733"},{"name":"Snoop","hex":"#49556c"},{"name":"Snorkel Blue","hex":"#034f84"},{"name":"Snorkel Sea","hex":"#004f7d"},{"name":"Snorlax","hex":"#222277"},{"name":"Snot","hex":"#acbb0d"},{"name":"Snot Green","hex":"#9dc100"},{"name":"Snow","hex":"#fffafa"},{"name":"Snow Ballet","hex":"#def1e7"},{"name":"Snow Cloud","hex":"#e5e9eb"},{"name":"Snow Crystal Green","hex":"#e4f0e8"},{"name":"Snow Day","hex":"#f7f5ed"},{"name":"Snow Drift","hex":"#e3e3dc"},{"name":"Snow Fall","hex":"#f3f2eb"},{"name":"Snow Flurry","hex":"#eaf7c9"},{"name":"Snow Globe","hex":"#f4f2e9"},{"name":"Snow Goose","hex":"#c3d9cb"},{"name":"Snow Green","hex":"#c8dac2"},{"name":"Snow Leopard","hex":"#cfdfdb"},{"name":"Snow Pea","hex":"#6ccc7b"},{"name":"Snow Peak","hex":"#e0dcdb"},{"name":"Snow Pink","hex":"#ebc6c0"},{"name":"Snow Plum","hex":"#f4eaf0"},{"name":"Snow Quartz","hex":"#d2d8da"},{"name":"Snow Shadow","hex":"#d7e4ed"},{"name":"Snow Storm","hex":"#eeedea"},{"name":"Snow Tiger","hex":"#dadce0"},{"name":"Snow White","hex":"#eeffee"},{"name":"Snow White Blush","hex":"#f8afa9"},{"name":"Snowball Effect","hex":"#d9e9e5"},{"name":"Snowbank","hex":"#e8e9e9"},{"name":"Snowbell","hex":"#bed0da"},{"name":"Snowbelt","hex":"#eef1ec"},{"name":"Snowberry","hex":"#efeced"},{"name":"Snowboard","hex":"#74a9b9"},{"name":"Snowbound","hex":"#ddebe3"},{"name":"Snowcap","hex":"#dce5eb"},{"name":"Snowdrop","hex":"#eeffcc"},{"name":"Snowdrop Explosion","hex":"#e0efe1"},{"name":"Snowfall","hex":"#e0deda"},{"name":"Snowfall White","hex":"#eeede0"},{"name":"Snowflake","hex":"#eff0f0"},{"name":"Snowglory","hex":"#c8c8c4"},{"name":"Snowman","hex":"#fefafb"},{"name":"Snowmelt","hex":"#c9e6e9"},{"name":"Snowpink","hex":"#f1c5c2"},{"name":"Snowshoe Hare","hex":"#e7e3d6"},{"name":"Snowstorm Space Shuttle","hex":"#001188"},{"name":"Snowy Evergreen","hex":"#edf2e0"},{"name":"Snowy Mint","hex":"#d6f0cd"},{"name":"Snowy Mount","hex":"#f1eeeb"},{"name":"Snowy Pine","hex":"#f0efe3"},{"name":"Snowy Shadow","hex":"#d3dbec"},{"name":"Snowy Summit","hex":"#c5d8e9"},{"name":"Snub","hex":"#a5adbd"},{"name":"Snuff","hex":"#e4d7e5"},{"name":"Snug Cottage","hex":"#fff9e2"},{"name":"Snug Yellow","hex":"#fcdb80"},{"name":"Snuggle Pie","hex":"#a58f73"},{"name":"So Blue-Berry","hex":"#d4d8e3"},{"name":"So Chic!","hex":"#cecdc5"},{"name":"So Dainty","hex":"#cdc0c9"},{"name":"So Merlot","hex":"#84525a"},{"name":"So Much Fawn","hex":"#f1e0cb"},{"name":"So Shy","hex":"#dad5d6"},{"name":"So Sour","hex":"#00ff11"},{"name":"So Sublime","hex":"#8b847c"},{"name":"So This Is Love","hex":"#ffdef2"},{"name":"So-Sari","hex":"#006f47"},{"name":"Soaked in Sun","hex":"#f7d163"},{"name":"Soap","hex":"#cec8ef"},{"name":"Soap Bubble","hex":"#b2dcef"},{"name":"Soap Green","hex":"#a0b28e"},{"name":"Soap Pink","hex":"#e5bfca"},{"name":"Soapstone","hex":"#ece5da"},{"name":"Soar","hex":"#ddf0f0"},{"name":"Soaring Eagle","hex":"#9badbe"},{"name":"Soaring Sky","hex":"#b9e5e8"},{"name":"Soba","hex":"#d1b49f"},{"name":"Soccer Turf","hex":"#22bb00"},{"name":"Sociable","hex":"#cf8c76"},{"name":"Social Butterfly","hex":"#faf2dc"},{"name":"Socialist","hex":"#921a1c"},{"name":"Socialite","hex":"#907676"},{"name":"Sockeye","hex":"#e49780"},{"name":"Soda Pop","hex":"#c3c67e"},{"name":"Sodalite Blue","hex":"#2c447b"},{"name":"Sōdenkaracha Brown","hex":"#9b533f"},{"name":"Sodium Silver","hex":"#fffcee"},{"name":"Sofisticata","hex":"#93806a"},{"name":"Soft Amber","hex":"#cfbea5"},{"name":"Soft Amethyst","hex":"#cfb7c9"},{"name":"Soft Apricot","hex":"#e0b392"},{"name":"Soft Bark","hex":"#897670"},{"name":"Soft Beige","hex":"#b9b5af"},{"name":"Soft Blue","hex":"#6488ea"},{"name":"Soft Blue Lavender","hex":"#888cba"},{"name":"Soft Blue White","hex":"#dae7e9"},{"name":"Soft Blush","hex":"#e3bcbc"},{"name":"Soft Boiled","hex":"#ffb737"},{"name":"Soft Breeze","hex":"#f6f0eb"},{"name":"Soft Bromeliad","hex":"#99656c"},{"name":"Soft Bronze","hex":"#a18666"},{"name":"Soft Butter","hex":"#f4e1b6"},{"name":"Soft Buttercup","hex":"#ffedbe"},{"name":"Soft Candlelight","hex":"#f7eacf"},{"name":"Soft Cashmere","hex":"#efb6d8"},{"name":"Soft Celadon","hex":"#bfcfc8"},{"name":"Soft Celery","hex":"#c4cd87"},{"name":"Soft Chamois","hex":"#dbb67a"},{"name":"Soft Charcoal","hex":"#838298"},{"name":"Soft Cheddar","hex":"#e4bc5b"},{"name":"Soft Cloud","hex":"#d0e3ed"},{"name":"Soft Cocoa","hex":"#987b71"},{"name":"Soft Coral","hex":"#ffeee0"},{"name":"Soft Cream","hex":"#f5efd6"},{"name":"Soft Denim","hex":"#b9c6ca"},{"name":"Soft Doeskin","hex":"#e0cfb9"},{"name":"Soft Dove","hex":"#c2bbb2"},{"name":"Soft Fawn","hex":"#b59778"},{"name":"Soft Feather","hex":"#efe4dc"},{"name":"Soft Fern","hex":"#c7d368"},{"name":"Soft Fig","hex":"#817714"},{"name":"Soft Focus","hex":"#e2efdd"},{"name":"Soft Fresco","hex":"#c0d5ca"},{"name":"Soft Froth","hex":"#bdccb3"},{"name":"Soft Fuchsia","hex":"#d496bd"},{"name":"Soft Fur","hex":"#7e7574"},{"name":"Soft Gossamer","hex":"#fbeede"},{"name":"Soft Grass","hex":"#c1dfc4"},{"name":"Soft Green","hex":"#6fc276"},{"name":"Soft Greige","hex":"#d7c3b5"},{"name":"Soft Heather","hex":"#bea8b7"},{"name":"Soft Ice Rose","hex":"#e7cfca"},{"name":"Soft Impact","hex":"#b28ea8"},{"name":"Soft Impala","hex":"#a28b7e"},{"name":"Soft Iris","hex":"#e6e3eb"},{"name":"Soft Ivory","hex":"#fbf1df"},{"name":"Soft Kind","hex":"#d1d2be"},{"name":"Soft Lace","hex":"#f5ede5"},{"name":"Soft Lavender","hex":"#f6e5f6"},{"name":"Soft Leather","hex":"#d9a077"},{"name":"Soft Lilac","hex":"#e2d4df"},{"name":"Soft Lumen","hex":"#beddba"},{"name":"Soft Matte","hex":"#dd99bb"},{"name":"Soft Metal","hex":"#bab2b1"},{"name":"Soft Mint","hex":"#e6f9f1"},{"name":"Soft Moonlight","hex":"#efecd7"},{"name":"Soft Moss","hex":"#cce1c7"},{"name":"Soft Muslin","hex":"#f7eadf"},{"name":"Soft Olive","hex":"#59604f"},{"name":"Soft Orange","hex":"#eec0ab"},{"name":"Soft Orange Bloom","hex":"#ffdcd2"},{"name":"Soft Peach","hex":"#eedfde"},{"name":"Soft Peach Mist","hex":"#fff3f0"},{"name":"Soft Pearl","hex":"#efe7db"},{"name":"Soft Petals","hex":"#ebf8ef"},{"name":"Soft Pillow","hex":"#fff5e7"},{"name":"Soft Pink","hex":"#fdb0c0"},{"name":"Soft Pumice","hex":"#949ea2"},{"name":"Soft Pumpkin","hex":"#dc8e31"},{"name":"Soft Purple","hex":"#a66fb5"},{"name":"Soft Putty","hex":"#c0bba5"},{"name":"Soft Red","hex":"#412533"},{"name":"Soft Saffron","hex":"#fdd47e"},{"name":"Soft Sage","hex":"#bcbcae"},{"name":"Soft Salmon","hex":"#eaaaa2"},{"name":"Soft Satin","hex":"#eec5ce"},{"name":"Soft Savvy","hex":"#837e87"},{"name":"Soft Secret","hex":"#d6d4ca"},{"name":"Soft Shoe","hex":"#e8d5c6"},{"name":"Soft Sienna","hex":"#d09f93"},{"name":"Soft Silver","hex":"#f7f9e9"},{"name":"Soft Sky","hex":"#b5b5cb"},{"name":"Soft Steel","hex":"#404854"},{"name":"Soft Straw","hex":"#f5d180"},{"name":"Soft Suede","hex":"#d8cbad"},{"name":"Soft Summer Rain","hex":"#a1d7ef"},{"name":"Soft Sunrise","hex":"#f2e3d8"},{"name":"Soft Tone","hex":"#c3b3b2"},{"name":"Soft Tone Ink","hex":"#9d6016"},{"name":"Soft Touch","hex":"#639b95"},{"name":"Soft Turquoise","hex":"#74ced2"},{"name":"Soft Vellum","hex":"#dddebe"},{"name":"Soft Violet","hex":"#e9e6e2"},{"name":"Soft Wheat","hex":"#d9bd9c"},{"name":"Softened Green","hex":"#bbbca7"},{"name":"Softer Tan","hex":"#dacab2"},{"name":"Softly Softly","hex":"#c9b7ce"},{"name":"Softsun","hex":"#f3ca40"},{"name":"Software","hex":"#7f8486"},{"name":"Sohi Orange","hex":"#e0815e"},{"name":"Sohi Red","hex":"#e35c38"},{"name":"Soho Red","hex":"#ab6953"},{"name":"Soil Of Avagddu","hex":"#845c00"},{"name":"Sojourn Blue","hex":"#416f8b"},{"name":"Solar","hex":"#fbeab8"},{"name":"Solar Ash","hex":"#cc6622"},{"name":"Solar Energy","hex":"#f7da74"},{"name":"Solar Flare","hex":"#e67c41"},{"name":"Solar Fusion","hex":"#dc9f46"},{"name":"Solar Glow","hex":"#faf1bd"},{"name":"Solar Light","hex":"#faf0c9"},{"name":"Solar Power","hex":"#f4b435"},{"name":"Solar Storm","hex":"#ffc16c"},{"name":"Solar Wind","hex":"#fce9b9"},{"name":"Solaria","hex":"#f5d68f"},{"name":"Solarium","hex":"#e1ba36"},{"name":"Solarized","hex":"#fbcf4f"},{"name":"Soldier Green","hex":"#545a2c"},{"name":"Solé","hex":"#f7dda1"},{"name":"Soleil","hex":"#e9cb2e"},{"name":"Solemn Silence","hex":"#d3d8d8"},{"name":"Solid Empire","hex":"#635c59"},{"name":"Solid Gold","hex":"#b7d24b"},{"name":"Solid Opal","hex":"#eeeae2"},{"name":"Solid Pink","hex":"#c78b95"},{"name":"Solid Snake","hex":"#a1a58c"},{"name":"Solitaire","hex":"#c6decf"},{"name":"Solitary Slate","hex":"#80796d"},{"name":"Solitary State","hex":"#c4c7c4"},{"name":"Solitary Tree","hex":"#539b6a"},{"name":"Solitude","hex":"#e9ecf1"},{"name":"Solo","hex":"#cbd2d0"},{"name":"Solstice","hex":"#babdb8"},{"name":"Solution","hex":"#77abab"},{"name":"Somali Brown","hex":"#6c5751"},{"name":"Somber","hex":"#cbb489"},{"name":"Somber Green","hex":"#005c2b"},{"name":"Somber Roses","hex":"#af546b"},{"name":"Sombre Grey","hex":"#555470"},{"name":"Sombrero","hex":"#b39c8c"},{"name":"Sombrero Tan","hex":"#cba391"},{"name":"Someday","hex":"#efe4cc"},{"name":"Something Blue","hex":"#b0d6e6"},{"name":"Somewhere in a Fairytale","hex":"#cc99dd"},{"name":"Sommelier","hex":"#5d3736"},{"name":"Somnambulist","hex":"#778899"},{"name":"Sonata","hex":"#abc8d8"},{"name":"Sonata Blue","hex":"#8a9eae"},{"name":"Sonata in Green Minor","hex":"#55aa44"},{"name":"Song Bird","hex":"#0078af"},{"name":"Song of Summer","hex":"#fce7b5"},{"name":"Song Thrush","hex":"#af987f"},{"name":"Song Thrush Egg","hex":"#f2e5e0"},{"name":"Songbird","hex":"#a3d1eb"},{"name":"Sonia Rose","hex":"#f3c8c2"},{"name":"Sonic Blue","hex":"#17569b"},{"name":"Sonic Silver","hex":"#757575"},{"name":"Sonoma Chardonnay","hex":"#ddcb91"},{"name":"Sonoma Sage","hex":"#90a58a"},{"name":"Sonoma Sky","hex":"#bfd1ca"},{"name":"Sonora Apricot","hex":"#e0b493"},{"name":"Sonora Hills","hex":"#bea77d"},{"name":"Sonora Rose","hex":"#e8d2e3"},{"name":"Sonora Shade","hex":"#c89672"},{"name":"Sonoran Desert","hex":"#cfb8a1"},{"name":"Sonoran Sands","hex":"#ddd5c6"},{"name":"Sonorous Bells","hex":"#faf0cb"},{"name":"Soooo Bloody","hex":"#550000"},{"name":"Soot","hex":"#555e5f"},{"name":"Soothing Breeze","hex":"#b3bec4"},{"name":"Soothing Pink","hex":"#f2e7de"},{"name":"Soothing Sapphire","hex":"#307dd3"},{"name":"Soothing Sea","hex":"#bce6de"},{"name":"Soothing Spring","hex":"#bccbc4"},{"name":"Soothing Vapor","hex":"#e1efe2"},{"name":"Soothing White","hex":"#e1e2e4"},{"name":"Soothsayer","hex":"#8092bc"},{"name":"Sooty","hex":"#141414"},{"name":"Sooty Willow Bamboo","hex":"#4d4b3a"},{"name":"Sophisticated Lilac","hex":"#956c87"},{"name":"Sophisticated Plum","hex":"#5d5153"},{"name":"Sophisticated Teal","hex":"#537175"},{"name":"Sophistication","hex":"#bfb5a6"},{"name":"Sophomore","hex":"#7d7170"},{"name":"Sora Blue","hex":"#a0d8ef"},{"name":"Sora Sky","hex":"#4d8fac"},{"name":"Sorbet Ice Mauve","hex":"#a1a6d6"},{"name":"Sorbet Yellow","hex":"#dac100"},{"name":"Sorbus","hex":"#dd6b38"},{"name":"Sorcerer","hex":"#3398ce"},{"name":"Sorrel Brown","hex":"#9b6d51"},{"name":"Sorrel Felt","hex":"#a49688"},{"name":"Sorrel Leaf","hex":"#887e64"},{"name":"Sorrell Brown","hex":"#9d7f61"},{"name":"Sorreno Lemon","hex":"#f1d058"},{"name":"Sorx Red","hex":"#fc0156"},{"name":"Sotek Green","hex":"#47788a"},{"name":"Soufflé","hex":"#edd1a8"},{"name":"Soul Quenching","hex":"#7e989d"},{"name":"Soul Search","hex":"#377290"},{"name":"Soul Side","hex":"#ffaa55"},{"name":"Soul Train","hex":"#58475e"},{"name":"Soulful","hex":"#374357"},{"name":"Soulful Blue","hex":"#757c91"},{"name":"Soulful Music","hex":"#3b4457"},{"name":"Soulless","hex":"#1b150d"},{"name":"Soulmate","hex":"#85777b"},{"name":"Soulmate Pink","hex":"#ffc8e9"},{"name":"Soulstone Blue","hex":"#0047ab"},{"name":"Sounds of Nature","hex":"#dfe5d7"},{"name":"Sour","hex":"#e5edb5"},{"name":"Sour Apple","hex":"#a0ac4f"},{"name":"Sour Apple Candy","hex":"#aaee22"},{"name":"Sour Apple Rings","hex":"#33bb00"},{"name":"Sour Bubba","hex":"#8b844e"},{"name":"Sour Candy","hex":"#66b348"},{"name":"Sour Cherry","hex":"#e24736"},{"name":"Sour Face","hex":"#adc979"},{"name":"Sour Green","hex":"#c1e613"},{"name":"Sour Green Cherry","hex":"#c8ffb0"},{"name":"Sour Lemon","hex":"#ffeea5"},{"name":"Sour Patch Peach","hex":"#f4d9c5"},{"name":"Sour Tarts","hex":"#fee5c8"},{"name":"Sour Yellow","hex":"#eeff04"},{"name":"Source Blue","hex":"#cdeae5"},{"name":"Source Green","hex":"#84b6a2"},{"name":"Sourdough","hex":"#c9b59a"},{"name":"South Kingston","hex":"#76614b"},{"name":"South Pacific","hex":"#698694"},{"name":"South Peach","hex":"#ead2bb"},{"name":"South Peak","hex":"#eadfd2"},{"name":"South Rim Trail","hex":"#a6847b"},{"name":"South Shore Sun","hex":"#ffdc9e"},{"name":"Southern Barrens Mud","hex":"#b98258"},{"name":"Southern Beauty","hex":"#f7dddb"},{"name":"Southern Belle","hex":"#a6d6c3"},{"name":"Southern Blue","hex":"#365787"},{"name":"Southern Breeze","hex":"#e4dfd1"},{"name":"Southern Evening","hex":"#34657d"},{"name":"Southern Moss","hex":"#bca66a"},{"name":"Southern Pine","hex":"#acb4ab"},{"name":"Southern Platyfish","hex":"#d0d34d"},{"name":"Southwest Stone","hex":"#de9f85"},{"name":"Southwestern Clay","hex":"#cc6758"},{"name":"Southwestern Sand","hex":"#ede0ce"},{"name":"Sovereign","hex":"#4b4356"},{"name":"Sovereign Red","hex":"#ce243f"},{"name":"Sovereignty","hex":"#304e63"},{"name":"Soviet Gold","hex":"#ffd900"},{"name":"Soy Milk","hex":"#d5d2c7"},{"name":"Soya","hex":"#fae3bc"},{"name":"Soya Bean","hex":"#6f634b"},{"name":"Soybean","hex":"#cab68b"},{"name":"Soylent Green","hex":"#578363"},{"name":"Spa","hex":"#ceece7"},{"name":"Spa Blue","hex":"#d3dedf"},{"name":"Spa Dream","hex":"#1993be"},{"name":"Spa Retreat","hex":"#d4e4e6"},{"name":"Spa Sangria","hex":"#d7c9a5"},{"name":"Space Angel","hex":"#3b4271"},{"name":"Space Battle Blue","hex":"#440099"},{"name":"Space Black","hex":"#505150"},{"name":"Space Cadet","hex":"#1d2951"},{"name":"Space Colonization","hex":"#150f5b"},{"name":"Space Convoy","hex":"#667788"},{"name":"Space Dust","hex":"#002299"},{"name":"Space Exploration","hex":"#001199"},{"name":"Space Explorer","hex":"#114499"},{"name":"Space Grey","hex":"#110022"},{"name":"Space Invader","hex":"#139d08"},{"name":"Space Missions","hex":"#324471"},{"name":"Space Opera","hex":"#5511dd"},{"name":"Space Shuttle","hex":"#4b433b"},{"name":"Space Station","hex":"#6c6d7a"},{"name":"Space Wolves Grey","hex":"#dae6ef"},{"name":"Spacebox","hex":"#5c6b6b"},{"name":"Spaceman","hex":"#5f6882"},{"name":"Spacescape","hex":"#222255"},{"name":"Spacious Grey","hex":"#877d75"},{"name":"Spacious Plain","hex":"#9a8557"},{"name":"Spacious Skies","hex":"#d5eaf2"},{"name":"Spacious Sky","hex":"#aeb5c7"},{"name":"Spade Black","hex":"#424142"},{"name":"Spaghetti","hex":"#fef69e"},{"name":"Spaghetti Carbonara","hex":"#ddddaa"},{"name":"Spaghetti Monster","hex":"#eecc88"},{"name":"Spaghetti Strap Pink","hex":"#fbaed2"},{"name":"Spalding Grey","hex":"#8d7f75"},{"name":"Spandex Green","hex":"#36b14e"},{"name":"Spangle","hex":"#e5dbe5"},{"name":"Spanish Bistre","hex":"#807532"},{"name":"Spanish Blue","hex":"#0070b8"},{"name":"Spanish Carmine","hex":"#d10047"},{"name":"Spanish Chestnut","hex":"#7f5f52"},{"name":"Spanish Cream","hex":"#fce5c0"},{"name":"Spanish Crimson","hex":"#e51a4c"},{"name":"Spanish Galleon","hex":"#817863"},{"name":"Spanish Gold","hex":"#b09a4f"},{"name":"Spanish Green","hex":"#7b8976"},{"name":"Spanish Grey","hex":"#989898"},{"name":"Spanish Lace","hex":"#fce8ca"},{"name":"Spanish Leather","hex":"#8e6a3f"},{"name":"Spanish Mustang","hex":"#684b40"},{"name":"Spanish Olive","hex":"#a1a867"},{"name":"Spanish Orange","hex":"#e86100"},{"name":"Spanish Peanut","hex":"#c57556"},{"name":"Spanish Pink","hex":"#f7bfbe"},{"name":"Spanish Plum","hex":"#5c3357"},{"name":"Spanish Purple","hex":"#66033c"},{"name":"Spanish Raisin","hex":"#61504e"},{"name":"Spanish Red","hex":"#e60026"},{"name":"Spanish Roast","hex":"#111133"},{"name":"Spanish Sand","hex":"#cab08e"},{"name":"Spanish Sky Blue","hex":"#00fffe"},{"name":"Spanish Style","hex":"#93765c"},{"name":"Spanish Villa","hex":"#dbb39e"},{"name":"Spanish Violet","hex":"#4c2882"},{"name":"Spanish Viridian","hex":"#007f5c"},{"name":"Spanish White","hex":"#ded1b7"},{"name":"Spanish Yellow","hex":"#f6b511"},{"name":"Spare White","hex":"#e4e4dd"},{"name":"Sparkle Glow","hex":"#f5d2b5"},{"name":"Sparkler","hex":"#ffee99"},{"name":"Sparkling Apple","hex":"#77b244"},{"name":"Sparkling Blueberry Lemonade","hex":"#c15187"},{"name":"Sparkling Brook","hex":"#dceee3"},{"name":"Sparkling Champagne","hex":"#efcf98"},{"name":"Sparkling Cider","hex":"#fffdeb"},{"name":"Sparkling Cosmo","hex":"#f9736e"},{"name":"Sparkling Cove","hex":"#2da4b6"},{"name":"Sparkling Emerald","hex":"#1f6c53"},{"name":"Sparkling Frost","hex":"#d2d5da"},{"name":"Sparkling Grape","hex":"#82387e"},{"name":"Sparkling Green","hex":"#66ee00"},{"name":"Sparkling Lavender","hex":"#eeccff"},{"name":"Sparkling Metal","hex":"#c3c3c7"},{"name":"Sparkling Mint","hex":"#a4ddd3"},{"name":"Sparkling Pink","hex":"#f5cee6"},{"name":"Sparkling Purple","hex":"#cc11ff"},{"name":"Sparkling Red","hex":"#ee3333"},{"name":"Sparkling River","hex":"#d6edf1"},{"name":"Sparkling Silver","hex":"#cbd0cd"},{"name":"Sparkling Snow","hex":"#f5fefd"},{"name":"Sparkling Spring","hex":"#d9e3e0"},{"name":"Sparks In The Dark","hex":"#ff7711"},{"name":"Sparky Blue","hex":"#22eeff"},{"name":"Sparrow","hex":"#69595c"},{"name":"Sparrow Grey Red","hex":"#523e47"},{"name":"Sparrow’s Fire","hex":"#ff6622"},{"name":"Spartacus","hex":"#76a4a7"},{"name":"Spartan Blue","hex":"#7a8898"},{"name":"Spartan Crimson","hex":"#9e1316"},{"name":"Spartan Stone","hex":"#afa994"},{"name":"Spatial Spirit","hex":"#c1edd3"},{"name":"Spatial White","hex":"#dedddb"},{"name":"Spätzle Yellow","hex":"#ffee88"},{"name":"Speak To Me","hex":"#ffd9a6"},{"name":"Speakeasy","hex":"#826a6c"},{"name":"Speaking of the Devil","hex":"#a8415b"},{"name":"Spear Shaft","hex":"#885500"},{"name":"Spearfish","hex":"#5fb6bf"},{"name":"Spearmint","hex":"#64bfa4"},{"name":"Spearmint Burst","hex":"#5cbe86"},{"name":"Spearmint Frosting","hex":"#8dc2a8"},{"name":"Spearmint Ice","hex":"#bfd3cb"},{"name":"Spearmint Leaf","hex":"#cbece6"},{"name":"Spearmint Stick","hex":"#e8f0e2"},{"name":"Spearmint Water","hex":"#b1eae8"},{"name":"Spearmints","hex":"#bce3c9"},{"name":"Special Delivery","hex":"#a5b2b7"},{"name":"Special Grey","hex":"#7b787d"},{"name":"Special Ops","hex":"#868b53"},{"name":"Species","hex":"#dcd867"},{"name":"Speckled Easter Egg","hex":"#d38798"},{"name":"Spectacular Purple","hex":"#bb02fe"},{"name":"Spectacular Saffron","hex":"#edd924"},{"name":"Spectacular Scarlet","hex":"#f72305"},{"name":"Spectra","hex":"#375d4f"},{"name":"Spectra Green","hex":"#00a096"},{"name":"Spectra Yellow","hex":"#f6aa09"},{"name":"Spectral","hex":"#dfdcd8"},{"name":"Spectral Green","hex":"#008664"},{"name":"Spectrum Blue","hex":"#44448d"},{"name":"Spectrum Red","hex":"#f20000"},{"name":"Speedboat","hex":"#90bfd4"},{"name":"Speeding Ticket","hex":"#f9f1d7"},{"name":"Speedwell","hex":"#5a6272"},{"name":"Spell","hex":"#5e4f50"},{"name":"Spell Caster","hex":"#4a373e"},{"name":"Spellbound","hex":"#e7dfce"},{"name":"Spelt Grain Brown","hex":"#a38c6b"},{"name":"Spelunking","hex":"#35465e"},{"name":"Sphagnales Moss","hex":"#a5ad44"},{"name":"Sphagnum Moss","hex":"#75693d"},{"name":"Sphere","hex":"#f2e8cc"},{"name":"Sphinx","hex":"#a99593"},{"name":"Spice","hex":"#6c4f3f"},{"name":"Spice Bazaar","hex":"#86613f"},{"name":"Spice Cake","hex":"#b87243"},{"name":"Spice Cookie","hex":"#f0ded3"},{"name":"Spice Delight","hex":"#f3e9cf"},{"name":"Spice Garden","hex":"#c9d6b4"},{"name":"Spice Girl","hex":"#e1c2c1"},{"name":"Spice Is Nice","hex":"#ebd0a4"},{"name":"Spice Ivory","hex":"#f4eedc"},{"name":"Spice Market","hex":"#b84823"},{"name":"Spice of Life","hex":"#86493f"},{"name":"Spice Pink","hex":"#ffb088"},{"name":"Spice Route","hex":"#c26e4b"},{"name":"Spiceberry","hex":"#604941"},{"name":"Spiced","hex":"#bb715b"},{"name":"Spiced Apple","hex":"#7f403a"},{"name":"Spiced Beige","hex":"#e9d2bb"},{"name":"Spiced Berry","hex":"#85443f"},{"name":"Spiced Brandy","hex":"#bb9683"},{"name":"Spiced Butternut","hex":"#ffd978"},{"name":"Spiced Carrot","hex":"#a4624c"},{"name":"Spiced Cashews","hex":"#d3b080"},{"name":"Spiced Cider","hex":"#915b41"},{"name":"Spiced Cinnamon","hex":"#805b48"},{"name":"Spiced Coral","hex":"#d55459"},{"name":"Spiced Honey","hex":"#a38061"},{"name":"Spiced Hot Chocolate","hex":"#53433e"},{"name":"Spiced Latte","hex":"#886c57"},{"name":"Spiced Mustard","hex":"#b99563"},{"name":"Spiced Nectarine","hex":"#ffbb72"},{"name":"Spiced Nut","hex":"#bc693e"},{"name":"Spiced Nutmeg","hex":"#927d6c"},{"name":"Spiced Orange","hex":"#edc7b6"},{"name":"Spiced Plum","hex":"#764f80"},{"name":"Spiced Potpourri","hex":"#905d5f"},{"name":"Spiced Pumpkin","hex":"#d88d56"},{"name":"Spiced Purple","hex":"#bb1166"},{"name":"Spiced Red","hex":"#8b4c3d"},{"name":"Spiced Rum","hex":"#ad8b6a"},{"name":"Spiced Tea","hex":"#ab6162"},{"name":"Spiced Up","hex":"#b14b38"},{"name":"Spiced Up Orange","hex":"#e67a37"},{"name":"Spiced Vinegar","hex":"#cdba99"},{"name":"Spiced Wine","hex":"#664942"},{"name":"Spicy","hex":"#ff1111"},{"name":"Spicy and Oriental","hex":"#c75f26"},{"name":"Spicy Berry","hex":"#cc3366"},{"name":"Spicy Cayenne","hex":"#9b5b4f"},{"name":"Spicy Cinnamon","hex":"#a85624"},{"name":"Spicy Hue","hex":"#994b35"},{"name":"Spicy Hummus","hex":"#eebbaa"},{"name":"Spicy Mix","hex":"#8b5f4d"},{"name":"Spicy Mustard","hex":"#74640d"},{"name":"Spicy Orange","hex":"#da482d"},{"name":"Spicy Paella","hex":"#f38f39"},{"name":"Spicy Pink","hex":"#ff1cae"},{"name":"Spicy Purple","hex":"#b9396e"},{"name":"Spicy Red","hex":"#97413e"},{"name":"Spicy Sweetcorn","hex":"#f6ac00"},{"name":"Spicy Tomato","hex":"#c75433"},{"name":"Spider Cotton","hex":"#e2e8df"},{"name":"Spike","hex":"#656271"},{"name":"Spiked Apricot","hex":"#fdddb7"},{"name":"Spikey Red","hex":"#600000"},{"name":"Spill the Beans","hex":"#9b351b"},{"name":"Spilled Cappuccino","hex":"#e4e1de"},{"name":"Spilt Milk","hex":"#f4f4d1"},{"name":"Spinach","hex":"#46a35a"},{"name":"Spinach Banana Smoothie","hex":"#aaaa55"},{"name":"Spinach Dip","hex":"#b1cdac"},{"name":"Spinach Green","hex":"#909b4c"},{"name":"Spinach Souffle","hex":"#83825b"},{"name":"Spinach Soup","hex":"#6e750e"},{"name":"Spinach White","hex":"#e4e8da"},{"name":"Spindle","hex":"#b3c4d8"},{"name":"Spindrift","hex":"#73fcd6"},{"name":"Spinel Black","hex":"#41435b"},{"name":"Spinel Grey","hex":"#6a5662"},{"name":"Spinel Red","hex":"#ff4dc9"},{"name":"Spinel Stone Black","hex":"#272a3b"},{"name":"Spinel Violet","hex":"#38283d"},{"name":"Spinnaker","hex":"#a3e2dd"},{"name":"Spinnaker Blue","hex":"#018cb6"},{"name":"Spinning Blue","hex":"#5b6a7c"},{"name":"Spinning Silk","hex":"#f3ddbc"},{"name":"Spinning Wheel","hex":"#f6edda"},{"name":"Spirit","hex":"#b2bbc6"},{"name":"Spirit Dance","hex":"#514b80"},{"name":"Spirit Mountain","hex":"#6a8b98"},{"name":"Spirit Rock","hex":"#5f534e"},{"name":"Spirit Warrior","hex":"#d45341"},{"name":"Spirit Whisper","hex":"#e3eebf"},{"name":"Spirited Away","hex":"#fde7e3"},{"name":"Spirited Green","hex":"#bddec7"},{"name":"Spirited Yellow","hex":"#ffdc83"},{"name":"Spiritstone Red","hex":"#fd411e"},{"name":"Spiro Disco Ball","hex":"#0fc0fc"},{"name":"Spirulina","hex":"#5a665c"},{"name":"Spitsbergen Blue","hex":"#6f757d"},{"name":"Splash","hex":"#f1d79e"},{"name":"Splash Of Grenadine","hex":"#f984e5"},{"name":"Splash of Honey","hex":"#d8b98c"},{"name":"Splash Palace","hex":"#5984b0"},{"name":"Splashdown","hex":"#d4e8d8"},{"name":"Splashing Wave","hex":"#44ddff"},{"name":"Splashy","hex":"#019196"},{"name":"Splatter","hex":"#a9586c"},{"name":"Splatter Movie","hex":"#d01a2c"},{"name":"Spleen Green","hex":"#ccee00"},{"name":"Splendiferous","hex":"#806e7c"},{"name":"Splendor","hex":"#f3dfcc"},{"name":"Splendor and Pride","hex":"#5870a4"},{"name":"Splendor Gold","hex":"#ffb14e"},{"name":"Splinter","hex":"#a3713f"},{"name":"Splish Splash","hex":"#3194ce"},{"name":"Split Pea","hex":"#96983f"},{"name":"Split Pea Soup","hex":"#c8b165"},{"name":"Split Rail","hex":"#8e6c51"},{"name":"Spoiled Egg","hex":"#e8ff2a"},{"name":"Spoiled Rotten","hex":"#b6bfe5"},{"name":"Sponge","hex":"#a0956f"},{"name":"Sponge Cake","hex":"#fffe40"},{"name":"Spooky","hex":"#d1d2bf"},{"name":"Spooky Ghost","hex":"#d4d1d9"},{"name":"Spooky Graveyard","hex":"#685e4f"},{"name":"Spooled White","hex":"#f5eae3"},{"name":"Spoonful of Sugar","hex":"#e7e9e3"},{"name":"Spores","hex":"#7f8162"},{"name":"Sport Green","hex":"#00a27d"},{"name":"Sport Yellow","hex":"#efd678"},{"name":"Sporting Green","hex":"#434c47"},{"name":"Sports Blue","hex":"#399bb4"},{"name":"Sports Fan","hex":"#e08119"},{"name":"Sports Field Green","hex":"#4d8064"},{"name":"Sporty Blue","hex":"#6a8aa4"},{"name":"Spotlight","hex":"#faeacd"},{"name":"Spotted Dove","hex":"#bfbfbd"},{"name":"Spotted Snake Eel","hex":"#b1d3e3"},{"name":"Spray","hex":"#7ecddd"},{"name":"Spray Green","hex":"#aea692"},{"name":"Spray of Mint","hex":"#bdd0c3"},{"name":"Spreadsheet Green","hex":"#007711"},{"name":"Sprig Muslin","hex":"#d6c1c5"},{"name":"Sprig of Mint","hex":"#8be0ba"},{"name":"Spring","hex":"#00f900"},{"name":"Spring Blossom","hex":"#e9edbd"},{"name":"Spring Bouquet","hex":"#69cd7f"},{"name":"Spring Boutique","hex":"#d7b9cb"},{"name":"Spring Branch","hex":"#a98c37"},{"name":"Spring Bud","hex":"#a7fc00"},{"name":"Spring Burst","hex":"#c9e0c8"},{"name":"Spring Buttercup","hex":"#fff6c2"},{"name":"Spring Crocus","hex":"#b7629b"},{"name":"Spring Day","hex":"#dbd7b7"},{"name":"Spring Dew","hex":"#d9eee1"},{"name":"Spring Fever","hex":"#e5e3bf"},{"name":"Spring Field","hex":"#4a7368"},{"name":"Spring Fields","hex":"#b3cdac"},{"name":"Spring Fog","hex":"#ecf1ec"},{"name":"Spring Forest","hex":"#67926f"},{"name":"Spring Forth","hex":"#11bb22"},{"name":"Spring Forward","hex":"#babd29"},{"name":"Spring Frost","hex":"#87ff2a"},{"name":"Spring Garden","hex":"#558961"},{"name":"Spring Glow","hex":"#d3e0b8"},{"name":"Spring Grass","hex":"#d5cb7f"},{"name":"Spring Green","hex":"#00ff7c"},{"name":"Spring Grey","hex":"#c5c6b3"},{"name":"Spring Heat","hex":"#fffddd"},{"name":"Spring Hill","hex":"#c4cbb2"},{"name":"Spring Juniper","hex":"#4a754a"},{"name":"Spring Kiss","hex":"#e3efb2"},{"name":"Spring Leaves","hex":"#a8c3aa"},{"name":"Spring Lilac","hex":"#b1b3cb"},{"name":"Spring Lily","hex":"#fcf4c8"},{"name":"Spring Lobster","hex":"#640125"},{"name":"Spring Lobster Brown","hex":"#6c2c2f"},{"name":"Spring Lobster Dye","hex":"#7a4171"},{"name":"Spring Marsh","hex":"#c0b05d"},{"name":"Spring Mist","hex":"#d3e0de"},{"name":"Spring Morn","hex":"#e5f0d5"},{"name":"Spring Moss","hex":"#a99757"},{"name":"Spring Onion","hex":"#596c3c"},{"name":"Spring Pink","hex":"#dfbcc9"},{"name":"Spring Rain","hex":"#a3bd9c"},{"name":"Spring Reflection","hex":"#a1bfab"},{"name":"Spring Roll","hex":"#c4a661"},{"name":"Spring Savor","hex":"#cceecc"},{"name":"Spring Shoot","hex":"#e2edc1"},{"name":"Spring Shower","hex":"#abdcee"},{"name":"Spring Slumber Green","hex":"#b8f8b8"},{"name":"Spring Song","hex":"#faccbf"},{"name":"Spring Sprig","hex":"#a2c09b"},{"name":"Spring Sprout","hex":"#86ba4a"},{"name":"Spring Storm","hex":"#a9c6cb"},{"name":"Spring Stream","hex":"#98beb2"},{"name":"Spring Sun","hex":"#f1f1c6"},{"name":"Spring Thaw","hex":"#d9dcdd"},{"name":"Spring Thyme","hex":"#d8dcb3"},{"name":"Spring Tide","hex":"#99cde6"},{"name":"Spring Valley","hex":"#ced7c5"},{"name":"Spring Vegetables","hex":"#82a320"},{"name":"Spring Walk","hex":"#acb193"},{"name":"Spring Water Turquoise","hex":"#7ab5ae"},{"name":"Spring Wheat","hex":"#e0eed4"},{"name":"Spring White","hex":"#ecfcec"},{"name":"Spring Wisteria","hex":"#cda4de"},{"name":"Spring Wood","hex":"#e9e1d9"},{"name":"Spring Yellow","hex":"#f2e47d"},{"name":"Springtide Green","hex":"#c8cb8e"},{"name":"Springtide Melodies","hex":"#9aa955"},{"name":"Springtime","hex":"#e9e5b3"},{"name":"Springtime Bloom","hex":"#db88ac"},{"name":"Springtime Dew","hex":"#ffffef"},{"name":"Springtime Rain","hex":"#ebeef3"},{"name":"Springview Green","hex":"#7ea15a"},{"name":"Sprinkle","hex":"#ebddea"},{"name":"Sprinkled with Dew","hex":"#cfecee"},{"name":"Sprinkled With Pink","hex":"#e7a2ae"},{"name":"Sprite Twist","hex":"#b9dcc3"},{"name":"Spritzig","hex":"#76c5e7"},{"name":"Sprout","hex":"#b8ca9d"},{"name":"Sprout Green","hex":"#c8d5cf"},{"name":"Sprouted","hex":"#f3d48b"},{"name":"Spruce","hex":"#0a5f38"},{"name":"Spruce Shade","hex":"#91a49d"},{"name":"Spruce Shadow","hex":"#838a7a"},{"name":"Spruce Stone","hex":"#9fc09c"},{"name":"Spruce Tree Flower","hex":"#b35e97"},{"name":"Spruce Woods","hex":"#6e6a51"},{"name":"Spruce Yellow","hex":"#b77d42"},{"name":"Spruced Up","hex":"#9a7f28"},{"name":"Spumoni","hex":"#bccfa4"},{"name":"Spun Cotton","hex":"#f3ecdc"},{"name":"Spun Jute","hex":"#f4e4cf"},{"name":"Spun Pearl","hex":"#a2a1ac"},{"name":"Spun Sugar","hex":"#fae2ed"},{"name":"Spun Wool","hex":"#e3ded4"},{"name":"SQL Injection Purple","hex":"#5e0092"},{"name":"Squant","hex":"#666666"},{"name":"Squash","hex":"#f2ab15"},{"name":"Squash Bisque","hex":"#e7b17c"},{"name":"Squash Blossom","hex":"#f8b438"},{"name":"Squeaky","hex":"#6cc4da"},{"name":"Squeeze Toy Alien","hex":"#11ee00"},{"name":"Squid Hat","hex":"#6e2233"},{"name":"Squid Ink Powder","hex":"#001133"},{"name":"Squid Pink","hex":"#f5b4bd"},{"name":"Squid\'s Ink","hex":"#4d4e5c"},{"name":"Squig Orange","hex":"#aa4f44"},{"name":"Squirrel","hex":"#8f7d6b"},{"name":"Squirrel\'s Nest","hex":"#665e48"},{"name":"Squirt","hex":"#95bcc5"},{"name":"Sriracha","hex":"#f56961"},{"name":"St. Augustine","hex":"#d0ddcc"},{"name":"St. Bart\'s","hex":"#577c88"},{"name":"St. Nicholas Beard","hex":"#eedddd"},{"name":"St. Patrick","hex":"#2b8c4e"},{"name":"St. Patrick\'s Blue","hex":"#23297a"},{"name":"St. Petersburg","hex":"#dee8f3"},{"name":"St. Tropez","hex":"#325482"},{"name":"Stability","hex":"#c1d0b2"},{"name":"Stable Hay","hex":"#f6e0be"},{"name":"Stack","hex":"#858885"},{"name":"Stacked Limestone","hex":"#d1b992"},{"name":"Stacked Stone","hex":"#918676"},{"name":"Stadium Grass","hex":"#d5f534"},{"name":"Stadium Lawn","hex":"#9af764"},{"name":"Stag Beetle","hex":"#603b41"},{"name":"Stage Gold","hex":"#9e6928"},{"name":"Stage Mauve","hex":"#b081aa"},{"name":"Stagecoach","hex":"#7f5a44"},{"name":"Stained Glass","hex":"#556682"},{"name":"Stainless Steel","hex":"#b4bdc7"},{"name":"Stairway to Heaven","hex":"#67716e"},{"name":"Stalactite Brown","hex":"#d4c4a7"},{"name":"Stalk","hex":"#7cb26e"},{"name":"Stamina","hex":"#b0a8ad"},{"name":"Stamnankáthi Green","hex":"#638636"},{"name":"Stamp Pad Green","hex":"#2ea18c"},{"name":"Stamped Concrete","hex":"#a0a09a"},{"name":"Stand Out","hex":"#7f8596"},{"name":"Standby Led","hex":"#ff0066"},{"name":"Standing Ovation","hex":"#bfb9bd"},{"name":"Standing Waters","hex":"#005599"},{"name":"Standish Blue","hex":"#85979a"},{"name":"Stanford Green","hex":"#658f7c"},{"name":"Stanford Stone","hex":"#bcab9c"},{"name":"Stanger Red","hex":"#a40000"},{"name":"Stanley","hex":"#9bc2b4"},{"name":"Star","hex":"#ffe500"},{"name":"Star and Crescent Red","hex":"#c51f26"},{"name":"Star Anise","hex":"#5c5042"},{"name":"Star Bright","hex":"#e8ddae"},{"name":"Star City","hex":"#5796a1"},{"name":"Star Command Blue","hex":"#007bb8"},{"name":"Star Dust","hex":"#f9f3dd"},{"name":"Star Fruit Yellow Green","hex":"#beaa4a"},{"name":"Star Grass","hex":"#75dbc1"},{"name":"Star Jasmine","hex":"#d8dce6"},{"name":"Star Magic","hex":"#e4d8d8"},{"name":"Star Map","hex":"#dae2e9"},{"name":"Star Mist","hex":"#b3c6ce"},{"name":"Star of David","hex":"#0000f7"},{"name":"Star of Gold","hex":"#ebe3c7"},{"name":"Star of Life","hex":"#057bc1"},{"name":"Star of Morning","hex":"#ebbbbe"},{"name":"Star Platinum Purple","hex":"#9500ff"},{"name":"Star Sapphire","hex":"#3c6a9d"},{"name":"Star Shine","hex":"#f8f6e3"},{"name":"Star Spangled","hex":"#3a5779"},{"name":"Star White","hex":"#efefe8"},{"name":"Star-Studded","hex":"#f7ebac"},{"name":"Starboard","hex":"#016c4f"},{"name":"Starbright","hex":"#f5ecc9"},{"name":"Starbur","hex":"#6cb037"},{"name":"Starburst","hex":"#dce7e5"},{"name":"Stardew","hex":"#a6b2b5"},{"name":"Stardust","hex":"#ddd3ae"},{"name":"Stardust Ballroom","hex":"#dacfd4"},{"name":"Stardust Evening","hex":"#b8bfdc"},{"name":"Starfish","hex":"#e5bca5"},{"name":"Starfleet Blue","hex":"#0096ff"},{"name":"Starflower Blue","hex":"#4e9ab0"},{"name":"Starfox","hex":"#f0e8d5"},{"name":"Starfruit","hex":"#e4d183"},{"name":"Stargate","hex":"#b7c4d3"},{"name":"Stargate Shimmer","hex":"#7777ff"},{"name":"Stargazer","hex":"#3f5865"},{"name":"Stargazing","hex":"#414549"},{"name":"Starglider","hex":"#faeede"},{"name":"Stark White","hex":"#d2c6b6"},{"name":"Starless Night","hex":"#3e4855"},{"name":"Starlet","hex":"#854e51"},{"name":"Starlet Pink","hex":"#edc2db"},{"name":"Starlight","hex":"#bcc0cc"},{"name":"Starlight Blue","hex":"#b5ced4"},{"name":"Starling\'s Egg","hex":"#e8dfd8"},{"name":"Starlit Eve","hex":"#384351"},{"name":"Starlit Night","hex":"#3b476b"},{"name":"Starry Night","hex":"#286492"},{"name":"Starry Sky Blue","hex":"#4f5e7e"},{"name":"Starset","hex":"#758ba4"},{"name":"Starship","hex":"#e3dd39"},{"name":"Starship Tonic","hex":"#cce7e8"},{"name":"Starship Trooper","hex":"#229966"},{"name":"Starstruck","hex":"#4664a5"},{"name":"Startling Orange","hex":"#e56131"},{"name":"Stately Frills","hex":"#c5bdc4"},{"name":"Stately Stems","hex":"#577a6c"},{"name":"Stately White","hex":"#faf9ea"},{"name":"Static","hex":"#d5d3c3"},{"name":"Statuary","hex":"#9ea4a5"},{"name":"Statue of Liberty","hex":"#376d64"},{"name":"Statued","hex":"#d0bcb1"},{"name":"Statuesque","hex":"#e0dfd9"},{"name":"Status Bronze","hex":"#dc8a30"},{"name":"Stay in Lime","hex":"#9fac5c"},{"name":"Stay the Night","hex":"#314662"},{"name":"Steadfast","hex":"#4a5777"},{"name":"Steady Brown","hex":"#8a6b4d"},{"name":"Stealth Jet","hex":"#4b4844"},{"name":"Steam","hex":"#dddddd"},{"name":"Steam Bath","hex":"#ccd0da"},{"name":"Steam Chestnut","hex":"#ebe1a9"},{"name":"Steam Engine","hex":"#b2b2ad"},{"name":"Steam White","hex":"#e8e9e5"},{"name":"Steamboat Geyser","hex":"#d2ccb4"},{"name":"Steamed Chai","hex":"#e0d4bd"},{"name":"Steamed Chestnut","hex":"#d3b17d"},{"name":"Steamed Milk","hex":"#ead8be"},{"name":"Steamed Salmon","hex":"#ee8888"},{"name":"Steampunk Gold","hex":"#c39c55"},{"name":"Steampunk Leather","hex":"#6f3b34"},{"name":"Steamy Dumpling","hex":"#eae9b4"},{"name":"Steamy Spring","hex":"#b1cfc7"},{"name":"Steel","hex":"#797979"},{"name":"Steel Armor","hex":"#767275"},{"name":"Steel Blue","hex":"#4682b4"},{"name":"Steel Blue Eyes","hex":"#7d94c6"},{"name":"Steel Blue Grey","hex":"#436175"},{"name":"Steel Grey","hex":"#43464b"},{"name":"Steel Legion Drab","hex":"#7a744d"},{"name":"Steel Light Blue","hex":"#5599b6"},{"name":"Steel Me","hex":"#ddd5ce"},{"name":"Steel Mist","hex":"#c6ceda"},{"name":"Steel Pan Mallet","hex":"#71a6a1"},{"name":"Steel Pink","hex":"#cc33cc"},{"name":"Steel Teal","hex":"#5f8a8b"},{"name":"Steel Toe","hex":"#929894"},{"name":"Steel Wool","hex":"#767574"},{"name":"Steely Grey","hex":"#90979b"},{"name":"Steeple Grey","hex":"#827e7c"},{"name":"Stegadon Scale Green","hex":"#074863"},{"name":"Steiglitz Fog","hex":"#415862"},{"name":"Stella","hex":"#f5d056"},{"name":"Stella Dora","hex":"#f9daa5"},{"name":"Stellar","hex":"#46647e"},{"name":"Stellar Blue","hex":"#9fb5ce"},{"name":"Stellar Explorer","hex":"#002222"},{"name":"Stellar Light","hex":"#fff4dd"},{"name":"Stellar Mist","hex":"#ab9d9c"},{"name":"Stem Green","hex":"#abdf8f"},{"name":"Stencil Blue","hex":"#b4ceda"},{"name":"Steppe Green","hex":"#7d7640"},{"name":"Stepping Stone","hex":"#a4a7a4"},{"name":"Stepping Stones","hex":"#b2a18c"},{"name":"Stereotypical Duck","hex":"#fff5cf"},{"name":"Sterling","hex":"#d1d4d1"},{"name":"Sterling Blue","hex":"#a2b9c2"},{"name":"Sterling Shadow","hex":"#e9ebde"},{"name":"Sterling Silver","hex":"#9eafc2"},{"name":"Stetson","hex":"#9e7a58"},{"name":"Steveareno Beige","hex":"#c5b5a4"},{"name":"Sticks & Stones","hex":"#baa482"},{"name":"Sticky Black Tarmac","hex":"#131212"},{"name":"Sticky Toffee","hex":"#cc8149"},{"name":"Stieglitz Silver","hex":"#8d8f8e"},{"name":"Stil De Grain Yellow","hex":"#fadb5e"},{"name":"Stiletto","hex":"#323235"},{"name":"Stiletto Love","hex":"#b6453e"},{"name":"Still","hex":"#adaf9c"},{"name":"Still Fuchsia","hex":"#c154c0"},{"name":"Still Grey","hex":"#aba9a0"},{"name":"Still Moment","hex":"#cbc4b2"},{"name":"Still Morning","hex":"#fff8e1"},{"name":"Still Water","hex":"#4a5d5f"},{"name":"Stillwater","hex":"#70a4b0"},{"name":"Stillwater Lake","hex":"#c2d0df"},{"name":"Stilted Stalks","hex":"#a29a6a"},{"name":"Stinging Nettle","hex":"#495d39"},{"name":"Stinging Wasabi","hex":"#aefd6c"},{"name":"Stingray Grey","hex":"#b0aba3"},{"name":"Stinkhorn","hex":"#2a545c"},{"name":"Stirland Battlemire","hex":"#ae5a2c"},{"name":"Stirland Mud","hex":"#492b00"},{"name":"Stirring Orange","hex":"#f6b064"},{"name":"Stizza","hex":"#900910"},{"name":"Stock Horse","hex":"#806852"},{"name":"Stockade Green","hex":"#104f4a"},{"name":"Stocking White","hex":"#e9e5d8"},{"name":"Stockleaf","hex":"#647b72"},{"name":"Stoic White","hex":"#e0e0ff"},{"name":"Stolen Kiss","hex":"#efdcd3"},{"name":"Stomy Shower","hex":"#0088b0"},{"name":"Stone","hex":"#ada587"},{"name":"Stone Blue","hex":"#7f9aa3"},{"name":"Stone Bridge","hex":"#52706c"},{"name":"Stone Brown","hex":"#b79983"},{"name":"Stone Cairn","hex":"#888c90"},{"name":"Stone Cold","hex":"#555555"},{"name":"Stone Craft","hex":"#7d867c"},{"name":"Stone Creek","hex":"#8f9183"},{"name":"Stone Cypress Green","hex":"#5f7d6c"},{"name":"Stone Fence","hex":"#929c9c"},{"name":"Stone Fortress","hex":"#c5c0b0"},{"name":"Stone Fruit","hex":"#f2a28c"},{"name":"Stone Golem","hex":"#c2cbd2"},{"name":"Stone Green","hex":"#658e67"},{"name":"Stone Grey","hex":"#9f9484"},{"name":"Stone Guardians","hex":"#caba97"},{"name":"Stone Harbour","hex":"#e8e0d8"},{"name":"Stone Haze","hex":"#93888c"},{"name":"Stone Hearth","hex":"#636869"},{"name":"Stone Lion","hex":"#b3a491"},{"name":"Stone Mason","hex":"#7a7b75"},{"name":"Stone Mill","hex":"#b6b7ad"},{"name":"Stone Path","hex":"#e4efe5"},{"name":"Stone Pillar","hex":"#efe5d4"},{"name":"Stone Pine","hex":"#665c46"},{"name":"Stone Quarry","hex":"#ece4dc"},{"name":"Stone Silver","hex":"#8ba8ae"},{"name":"Stone Terrace","hex":"#a09484"},{"name":"Stone Violet","hex":"#4d404f"},{"name":"Stone Walkway","hex":"#b5b09e"},{"name":"Stone Wall","hex":"#efe1d8"},{"name":"Stone Walls","hex":"#afa791"},{"name":"Stone Wash","hex":"#e5d4c0"},{"name":"Stone Washed","hex":"#d6e0e7"},{"name":"Stone\'s Throw","hex":"#605c58"},{"name":"Stonebread","hex":"#ddcea7"},{"name":"Stonebriar","hex":"#cba97e"},{"name":"Stonecrop","hex":"#a08f6f"},{"name":"Stonegate","hex":"#99917e"},{"name":"Stonehenge Greige","hex":"#a79d8d"},{"name":"Stonelake","hex":"#bab1a3"},{"name":"Stonetalon Mountains","hex":"#8d7a4d"},{"name":"Stonewall","hex":"#807661"},{"name":"Stonewall Grey","hex":"#c1c1c1"},{"name":"Stoneware","hex":"#a5978d"},{"name":"Stonewash","hex":"#74819a"},{"name":"Stonewashed","hex":"#ddd7c5"},{"name":"Stonewashed Brown","hex":"#dcccc0"},{"name":"Stonewashed Pink","hex":"#f4eee4"},{"name":"Stonish Beige","hex":"#ccb49a"},{"name":"Stony Creek","hex":"#948f82"},{"name":"Stony Field","hex":"#615547"},{"name":"Stop","hex":"#c33a36"},{"name":"Stoplight","hex":"#dd1111"},{"name":"Storksbill","hex":"#e5e1dd"},{"name":"Storksbill White","hex":"#f2f2e2"},{"name":"Storm","hex":"#444400"},{"name":"Storm Blue","hex":"#507b9c"},{"name":"Storm Break","hex":"#938988"},{"name":"Storm Cloud","hex":"#808283"},{"name":"Storm Dust","hex":"#65645f"},{"name":"Storm Front","hex":"#807a7e"},{"name":"Storm Green","hex":"#113333"},{"name":"Storm Grey","hex":"#717486"},{"name":"Storm Is Coming","hex":"#3d3d63"},{"name":"Storm Lightning","hex":"#f9e69c"},{"name":"Storm Petrel","hex":"#7f95a5"},{"name":"Storm Red","hex":"#a28a88"},{"name":"Storm Warning","hex":"#696863"},{"name":"Storm\'s Coming","hex":"#cfc9bc"},{"name":"Stormeye","hex":"#e7b57f"},{"name":"Stormfang","hex":"#80a7c1"},{"name":"Stormhost Silver","hex":"#bbc6c9"},{"name":"Storms Mountain","hex":"#8d9390"},{"name":"Stormvermin Fur","hex":"#5c5954"},{"name":"Stormy","hex":"#b0bcc3"},{"name":"Stormy Bay","hex":"#9aafaf"},{"name":"Stormy Grey","hex":"#7d7b7c"},{"name":"Stormy Horizon","hex":"#777799"},{"name":"Stormy Mauve","hex":"#71738c"},{"name":"Stormy Night","hex":"#372354"},{"name":"Stormy Oceans","hex":"#70818e"},{"name":"Stormy Passion","hex":"#c36666"},{"name":"Stormy Pink","hex":"#e3b5ad"},{"name":"Stormy Ridge","hex":"#507b9a"},{"name":"Stormy Sea","hex":"#6e8082"},{"name":"Stormy Strait Green","hex":"#0f9b8e"},{"name":"Stormy Strait Grey","hex":"#6b8ba4"},{"name":"Stormy Sunrise","hex":"#c8a2c8"},{"name":"Stormy Waters","hex":"#84a9b0"},{"name":"Stormy Weather","hex":"#63707b"},{"name":"Stout","hex":"#0f0b0a"},{"name":"Stowaway","hex":"#7b8393"},{"name":"Straightforward Green","hex":"#52a550"},{"name":"Straken Green","hex":"#628026"},{"name":"Stranglethorn Ochre","hex":"#dbb060"},{"name":"Stratford Blue","hex":"#528a9a"},{"name":"Stratford Sage","hex":"#8c8670"},{"name":"Stratos","hex":"#000741"},{"name":"Stratos Blue","hex":"#3799c8"},{"name":"Stratosphere","hex":"#9ec1cc"},{"name":"Stratton Blue","hex":"#acb8b2"},{"name":"Stratus","hex":"#8193aa"},{"name":"Stravinsky","hex":"#996e74"},{"name":"Stravinsky Pink","hex":"#77515a"},{"name":"Straw","hex":"#e4d96f"},{"name":"Straw Basket","hex":"#d9c69a"},{"name":"Straw Gold","hex":"#fcf679"},{"name":"Straw Harvest","hex":"#dbc8a2"},{"name":"Straw Hat","hex":"#f0d5a8"},{"name":"Straw Hut","hex":"#bdb268"},{"name":"Straw Yellow","hex":"#f0d696"},{"name":"Strawberry","hex":"#fb2943"},{"name":"Strawberry Blonde","hex":"#ffdadc"},{"name":"Strawberry Bonbon","hex":"#ffebfa"},{"name":"Strawberry Buttercream","hex":"#f8b3ff"},{"name":"Strawberry Confection","hex":"#f4bfc6"},{"name":"Strawberry Cough","hex":"#990011"},{"name":"Strawberry Cream","hex":"#f0adb3"},{"name":"Strawberry Daiquiri","hex":"#a23d50"},{"name":"Strawberry Dreams","hex":"#ff88aa"},{"name":"Strawberry Dust","hex":"#fff0ea"},{"name":"Strawberry Field","hex":"#fa8383"},{"name":"Strawberry Frappé","hex":"#ffa2aa"},{"name":"Strawberry Freeze","hex":"#c677a8"},{"name":"Strawberry Frost","hex":"#ffdbf7"},{"name":"Strawberry Frosting","hex":"#ff6ffc"},{"name":"Strawberry Glaze","hex":"#dab7be"},{"name":"Strawberry Ice","hex":"#e78b90"},{"name":"Strawberry Jam","hex":"#86423e"},{"name":"Strawberry Jubilee","hex":"#c08591"},{"name":"Strawberry Milk","hex":"#ffd9e7"},{"name":"Strawberry Milkshake","hex":"#d47186"},{"name":"Strawberry Mix","hex":"#e42d65"},{"name":"Strawberry Moon","hex":"#cf5570"},{"name":"Strawberry Mousse","hex":"#a5647e"},{"name":"Strawberry Pink","hex":"#f46c80"},{"name":"Strawberry Pop","hex":"#ee2255"},{"name":"Strawberry Rhubarb","hex":"#b96364"},{"name":"Strawberry Ripple","hex":"#f7cdce"},{"name":"Strawberry Rose","hex":"#e29991"},{"name":"Strawberry Shortcake","hex":"#fa8e99"},{"name":"Strawberry Smash","hex":"#ee0055"},{"name":"Strawberry Smoothie","hex":"#e79ea6"},{"name":"Strawberry Soap","hex":"#f7879a"},{"name":"Strawberry Spinach Red","hex":"#fa4224"},{"name":"Strawberry Surprise","hex":"#b9758d"},{"name":"Strawberry Whip","hex":"#f9d7cd"},{"name":"Strawberry Wine","hex":"#cb6a6b"},{"name":"Strawberry Yogurt","hex":"#e9b3b4"},{"name":"Strawflower","hex":"#ddbdba"},{"name":"Stream","hex":"#495e7b"},{"name":"Stream Bed","hex":"#556061"},{"name":"Streetwise","hex":"#d8e2df"},{"name":"Stretch Limo","hex":"#2d2e33"},{"name":"Stretch of Water","hex":"#9dbbd0"},{"name":"Stretched Canvas","hex":"#dfd8c8"},{"name":"Streusel Cake","hex":"#d7aa60"},{"name":"Strike a Pose","hex":"#5a4659"},{"name":"Strike It Rich","hex":"#d7b55f"},{"name":"Strikemaster","hex":"#946a81"},{"name":"Striking","hex":"#00667b"},{"name":"Striking Orange","hex":"#ce7843"},{"name":"Striking Purple","hex":"#944e87"},{"name":"Striking Red","hex":"#c03543"},{"name":"String","hex":"#aa9f96"},{"name":"String Ball","hex":"#f1e8d8"},{"name":"String Cheese","hex":"#fbf1dd"},{"name":"String Deep","hex":"#7f7860"},{"name":"String of Pearls","hex":"#ebe3d8"},{"name":"Stromboli","hex":"#406356"},{"name":"Strong Blue","hex":"#0c06f7"},{"name":"Strong Cerise","hex":"#960056"},{"name":"Strong Envy","hex":"#782e2c"},{"name":"Strong Iris","hex":"#5e5f7e"},{"name":"Strong Mocha","hex":"#6f372d"},{"name":"Strong Mustard","hex":"#a88905"},{"name":"Strong Olive","hex":"#646756"},{"name":"Strong Pink","hex":"#ff0789"},{"name":"Strong Sage","hex":"#2b6460"},{"name":"Strong Strawberry","hex":"#8a3e34"},{"name":"Strong Tone Wash","hex":"#454129"},{"name":"Strong Winds","hex":"#a3a59b"},{"name":"Stroopwafel","hex":"#a86f48"},{"name":"Struck by Lightning","hex":"#f0e1e8"},{"name":"Structural Blue","hex":"#0e9bd1"},{"name":"Stucco","hex":"#a58d7f"},{"name":"Stucco Tan","hex":"#e8dece"},{"name":"Stucco Wall","hex":"#f1b19d"},{"name":"Stucco White","hex":"#e2d3b9"},{"name":"Studer Blue","hex":"#005577"},{"name":"Studio","hex":"#724aa1"},{"name":"Studio Beige","hex":"#c1b2a1"},{"name":"Studio Blue Green","hex":"#6d817b"},{"name":"Studio Clay","hex":"#d9ccb8"},{"name":"Studio Cream","hex":"#ebdbaa"},{"name":"Studio Mauve","hex":"#c6b9b8"},{"name":"Studio Taupe","hex":"#a59789"},{"name":"Studio White","hex":"#e8dcd5"},{"name":"Stuffed Olive","hex":"#adac7c"},{"name":"Stuffing","hex":"#bf9b84"},{"name":"Stump Green","hex":"#5e5f4d"},{"name":"Stunning Gold","hex":"#da9a5d"},{"name":"Stunning Sapphire","hex":"#185887"},{"name":"Stunning Shade","hex":"#676064"},{"name":"Sturdy Brown","hex":"#9b856f"},{"name":"Sturgis Grey","hex":"#57544d"},{"name":"Stylish","hex":"#cec1a5"},{"name":"Stylish Red","hex":"#bc3439"},{"name":"Su-Nezumi Grey","hex":"#9fa0a0"},{"name":"Suave Grey","hex":"#d1d8dd"},{"name":"Subaqueous","hex":"#00576f"},{"name":"Subdue Red","hex":"#ccb8b3"},{"name":"Subdued Hue","hex":"#c6b1ad"},{"name":"Subdued Sienna","hex":"#cc896c"},{"name":"Sublime","hex":"#ecede0"},{"name":"Submarine","hex":"#7a7778"},{"name":"Submarine Base","hex":"#5566aa"},{"name":"Submarine Grey","hex":"#4d585c"},{"name":"Submerged","hex":"#4a7d82"},{"name":"Submersible","hex":"#00576e"},{"name":"Subnautical","hex":"#012253"},{"name":"Subpoena","hex":"#d8ccc6"},{"name":"Subterrain Kingdom","hex":"#4f4e4a"},{"name":"Subterranean","hex":"#452c1f"},{"name":"Subterranean River","hex":"#1f3b4d"},{"name":"Subtle Blue","hex":"#d9e4e5"},{"name":"Subtle Breeze","hex":"#b5d2d8"},{"name":"Subtle Green","hex":"#b5cbbb"},{"name":"Subtle Night Sky","hex":"#554b4f"},{"name":"Subtle Shadow","hex":"#d8d8d0"},{"name":"Subtle Suede","hex":"#d0bd94"},{"name":"Subtle Sunshine","hex":"#e4d89a"},{"name":"Subtle Touch","hex":"#dbdbd9"},{"name":"Subtle Turquoise","hex":"#7a9693"},{"name":"Subtle Violet","hex":"#b29e9e"},{"name":"Subway","hex":"#87857c"},{"name":"Succinct Violet","hex":"#513b6e"},{"name":"Succubus","hex":"#990022"},{"name":"Succulent","hex":"#8ba477"},{"name":"Succulent Garden","hex":"#bccbb2"},{"name":"Succulent Green","hex":"#5e9b86"},{"name":"Succulent Leaves","hex":"#658e64"},{"name":"Succulent Lime","hex":"#dcdd65"},{"name":"Succulents","hex":"#007744"},{"name":"Such a Peach","hex":"#fbddaf"},{"name":"Such Melodrama","hex":"#c6c1c5"},{"name":"Sudan Brown","hex":"#bc752d"},{"name":"Sudden Sapphire","hex":"#6376a9"},{"name":"Suddenly Sapphire","hex":"#1a5897"},{"name":"Suds","hex":"#a6b4c5"},{"name":"Suede","hex":"#ba8864"},{"name":"Suede Beige","hex":"#d9c7b9"},{"name":"Suede Grey","hex":"#857f7a"},{"name":"Suede Indigo","hex":"#585d6d"},{"name":"Suede Leather","hex":"#896757"},{"name":"Suede Vest","hex":"#d79043"},{"name":"Suez Canal","hex":"#235e80"},{"name":"Suffragette Yellow","hex":"#ecd0a1"},{"name":"Sugar Almond","hex":"#935529"},{"name":"Sugar Beet","hex":"#834253"},{"name":"Sugar Berry","hex":"#e3d4cd"},{"name":"Sugar Cane","hex":"#eeefdf"},{"name":"Sugar Cane Dahlia","hex":"#f7c2bf"},{"name":"Sugar Chic","hex":"#ffccff"},{"name":"Sugar Coated","hex":"#ffedf1"},{"name":"Sugar Coated Almond","hex":"#bb6611"},{"name":"Sugar Cookie","hex":"#f2e2a4"},{"name":"Sugar Coral","hex":"#f56c73"},{"name":"Sugar Creek","hex":"#c96fa8"},{"name":"Sugar Crystal","hex":"#f8f4ff"},{"name":"Sugar Dust","hex":"#f9ede3"},{"name":"Sugar Glaze","hex":"#fff0e1"},{"name":"Sugar Glazed Cashew","hex":"#cc9955"},{"name":"Sugar Grape","hex":"#9437ff"},{"name":"Sugar High","hex":"#efc9ec"},{"name":"Sugar Honey Cashew","hex":"#ddaa66"},{"name":"Sugar Maple","hex":"#9c7647"},{"name":"Sugar Milk","hex":"#fff9f5"},{"name":"Sugar Mint","hex":"#c0e2c5"},{"name":"Sugar Pie","hex":"#c7a77b"},{"name":"Sugar Pine","hex":"#73776e"},{"name":"Sugar Plum","hex":"#914e75"},{"name":"Sugar Pool","hex":"#aed6d4"},{"name":"Sugar Poppy","hex":"#e58281"},{"name":"Sugar Quill","hex":"#ebe5d7"},{"name":"Sugar Rush Peach Pepper","hex":"#cfb599"},{"name":"Sugar Shack","hex":"#eed5b6"},{"name":"Sugar Soap","hex":"#efe8dc"},{"name":"Sugar Sweet","hex":"#ecc4dc"},{"name":"Sugar Swizzle","hex":"#eae3d6"},{"name":"Sugar Tooth","hex":"#d68f9f"},{"name":"Sugar Tree","hex":"#a2999a"},{"name":"Sugar-Candied Peanuts","hex":"#8b2e16"},{"name":"Sugarcane","hex":"#edd1c7"},{"name":"Sugared Almond","hex":"#b49d7b"},{"name":"Sugared Peach","hex":"#fddcc6"},{"name":"Sugared Pears","hex":"#ebd5b7"},{"name":"Sugarloaf Brown","hex":"#554400"},{"name":"Sugarpills","hex":"#ffddff"},{"name":"Sugarwinkle","hex":"#fdc5e3"},{"name":"Sugilite","hex":"#a2999f"},{"name":"Suit Blue","hex":"#2b3036"},{"name":"Suitable Brown","hex":"#645a4b"},{"name":"Sulfur Pit","hex":"#e5cc69"},{"name":"Sulfur Yellow","hex":"#dbc058"},{"name":"Sulfuric","hex":"#eeed56"},{"name":"Sullen Gold","hex":"#a58b34"},{"name":"Sullivan\'s Heart","hex":"#f7c5d1"},{"name":"Sulphine Yellow","hex":"#baa600"},{"name":"Sulphur","hex":"#cab012"},{"name":"Sulphur Spring","hex":"#d5d717"},{"name":"Sulphur Water","hex":"#f2f3cf"},{"name":"Sulphur Yellow","hex":"#ccc050"},{"name":"Sultan Gold","hex":"#f6ac17"},{"name":"Sultan of Pink","hex":"#e89bc7"},{"name":"Sultan Sand","hex":"#e3c9be"},{"name":"Sultan\'s Silk","hex":"#134558"},{"name":"Sultana","hex":"#674668"},{"name":"Sultry Castle","hex":"#948d84"},{"name":"Sultry Sea","hex":"#506770"},{"name":"Sultry Smoke","hex":"#73696f"},{"name":"Sultry Spell","hex":"#716563"},{"name":"Sulu","hex":"#c6ea80"},{"name":"Sumac dyed","hex":"#e08a1e"},{"name":"Sumatra","hex":"#f6e8cc"},{"name":"Sumatra Chicken","hex":"#4f666a"},{"name":"Sumi Ink","hex":"#595857"},{"name":"Sumire Violet","hex":"#7058a3"},{"name":"Summer Air","hex":"#3fafcf"},{"name":"Summer Beige","hex":"#dbc2b9"},{"name":"Summer Birthday","hex":"#bbd5ef"},{"name":"Summer Bliss","hex":"#fcf1cf"},{"name":"Summer Bloom","hex":"#d1beb4"},{"name":"Summer Blue","hex":"#1880a1"},{"name":"Summer Blush","hex":"#f6dfd6"},{"name":"Summer Breeze","hex":"#d3e5db"},{"name":"Summer Citrus","hex":"#f8822a"},{"name":"Summer Cloud","hex":"#bbffee"},{"name":"Summer Clover","hex":"#e5cfde"},{"name":"Summer Cocktails","hex":"#ecb6b5"},{"name":"Summer Concrete","hex":"#57595d"},{"name":"Summer Cosmos","hex":"#fad1e0"},{"name":"Summer Crush","hex":"#f2d6da"},{"name":"Summer Daffodil","hex":"#ffe078"},{"name":"Summer Day","hex":"#eaaa62"},{"name":"Summer Dragonfly","hex":"#83ada3"},{"name":"Summer Field","hex":"#e2c278"},{"name":"Summer Fig","hex":"#c45940"},{"name":"Summer Forest Green","hex":"#228b22"},{"name":"Summer Garden","hex":"#7aac80"},{"name":"Summer Glow","hex":"#eeaa44"},{"name":"Summer Green","hex":"#8fb69c"},{"name":"Summer Harvest","hex":"#ffe69a"},{"name":"Summer Heat","hex":"#aa5939"},{"name":"Summer Hill","hex":"#c1a58d"},{"name":"Summer House","hex":"#c8efe2"},{"name":"Summer Hue","hex":"#ffefc2"},{"name":"Summer in the City","hex":"#cda168"},{"name":"Summer Jasmine","hex":"#eeebd6"},{"name":"Summer Lake","hex":"#0077a7"},{"name":"Summer Lily","hex":"#f8d374"},{"name":"Summer Melon","hex":"#ead5ae"},{"name":"Summer Memory","hex":"#df856e"},{"name":"Summer Mist","hex":"#cbeaee"},{"name":"Summer Moon","hex":"#fdedcf"},{"name":"Summer Night","hex":"#36576a"},{"name":"Summer of \'82","hex":"#74cdd8"},{"name":"Summer Orange","hex":"#ffb653"},{"name":"Summer Pear","hex":"#f5f0d1"},{"name":"Summer Rain","hex":"#e1e8db"},{"name":"Summer Resort","hex":"#f7efba"},{"name":"Summer Sandcastle","hex":"#ece4ce"},{"name":"Summer Sea","hex":"#66a9b1"},{"name":"Summer Shade","hex":"#d1d9d7"},{"name":"Summer Shower","hex":"#e5ebe3"},{"name":"Summer Sky","hex":"#38b0de"},{"name":"Summer Soft Blue","hex":"#94d3d1"},{"name":"Summer Solstice","hex":"#ded1a3"},{"name":"Summer Storm","hex":"#b0c5df"},{"name":"Summer Sun","hex":"#ffdc00"},{"name":"Summer Sunset","hex":"#d88167"},{"name":"Summer Sunshine","hex":"#f7e8c7"},{"name":"Summer Turquoise","hex":"#008572"},{"name":"Summer Turquoise Blue","hex":"#4b9cab"},{"name":"Summer Waters","hex":"#215399"},{"name":"Summer Weasel","hex":"#bb8e55"},{"name":"Summer White","hex":"#f4e9d6"},{"name":"Summer\'s End","hex":"#dc9367"},{"name":"Summer\'s Eve","hex":"#a97069"},{"name":"Summer\'s Heat","hex":"#f9e699"},{"name":"Summerday Blue","hex":"#376698"},{"name":"Summerset","hex":"#c47a3d"},{"name":"Summertime","hex":"#f2d178"},{"name":"Summertown","hex":"#8cbc9e"},{"name":"Summerville Brown","hex":"#997651"},{"name":"Summerwood","hex":"#d4b28b"},{"name":"Summit","hex":"#8bb6b8"},{"name":"Sumptuous Peach","hex":"#e5b99b"},{"name":"Sumptuous Purple","hex":"#604c81"},{"name":"Sumptuous Sage","hex":"#b1b48c"},{"name":"Sun","hex":"#ef8e38"},{"name":"Sun Baked","hex":"#cd6e53"},{"name":"Sun Baked Earth","hex":"#a36658"},{"name":"Sun Bleached Mint","hex":"#e3efe1"},{"name":"Sun Bleached Ochre","hex":"#e3ab7b"},{"name":"Sun Bleached Pink","hex":"#fadadd"},{"name":"Sun City","hex":"#fffed9"},{"name":"Sun Crete","hex":"#ff8c00"},{"name":"Sun Dance","hex":"#c4aa4d"},{"name":"Sun Deck","hex":"#f0dca0"},{"name":"Sun Dial","hex":"#c79b36"},{"name":"Sun Drenched","hex":"#ffe7a3"},{"name":"Sun Dried","hex":"#eabd5b"},{"name":"Sun Dried Tomato","hex":"#7d252c"},{"name":"Sun Drops","hex":"#eaaf11"},{"name":"Sun Dust","hex":"#f6e0a4"},{"name":"Sun Flooded Woods","hex":"#d0d418"},{"name":"Sun Glare","hex":"#f1f4d1"},{"name":"Sun Glint","hex":"#faf3d9"},{"name":"Sun God","hex":"#dfba5a"},{"name":"Sun Kiss","hex":"#eacdb7"},{"name":"Sun Kissed","hex":"#ffeec2"},{"name":"Sun Kissed Coral","hex":"#ea6777"},{"name":"Sun Orange","hex":"#f37724"},{"name":"Sun Ray","hex":"#ffb219"},{"name":"Sun Salutation","hex":"#e7c26f"},{"name":"Sun Shower","hex":"#ffde73"},{"name":"Sun Song","hex":"#e9ad17"},{"name":"Sun Splashed","hex":"#fbd795"},{"name":"Sun Surprise","hex":"#fff2a0"},{"name":"Sun Touched","hex":"#fad675"},{"name":"Sun Valley","hex":"#698538"},{"name":"Sun Wukong\'s Crown","hex":"#ecc033"},{"name":"Sun Yellow","hex":"#ffdf22"},{"name":"Sun-Kissed Brick","hex":"#b75e41"},{"name":"Sun\'s Glory","hex":"#f6f2e5"},{"name":"Sun\'s Rage","hex":"#a94e37"},{"name":"Suna White","hex":"#dcd3b2"},{"name":"Sunbaked Adobe","hex":"#ab9a6e"},{"name":"Sunbathed","hex":"#f5dd98"},{"name":"Sunbathed Beach","hex":"#fad28f"},{"name":"Sunbathing Beauty","hex":"#7e4730"},{"name":"Sunbeam","hex":"#f5edb2"},{"name":"Sunbeam Yellow","hex":"#f0d39d"},{"name":"Sunblast Yellow","hex":"#feff0f"},{"name":"Sunbleached","hex":"#e5e0d7"},{"name":"Sunbound","hex":"#f9d964"},{"name":"Sunburn","hex":"#b37256"},{"name":"Sunburnt Cyclops","hex":"#ff404c"},{"name":"Sunburnt Toes","hex":"#d79584"},{"name":"Sunburst","hex":"#f5b57b"},{"name":"Sunburst Yellow","hex":"#ffff99"},{"name":"Sundance","hex":"#fac76c"},{"name":"Sunday Afternoon","hex":"#f6c778"},{"name":"Sunday Best","hex":"#fcc9c7"},{"name":"Sunday Drive","hex":"#dcc9ae"},{"name":"Sunday Gloves","hex":"#d7bad1"},{"name":"Sunday Niqab","hex":"#3d4035"},{"name":"Sundaze","hex":"#fae198"},{"name":"Sundew","hex":"#e1cdae"},{"name":"Sundial","hex":"#c0805d"},{"name":"Sundown","hex":"#f5c99e"},{"name":"Sundress","hex":"#ebcf89"},{"name":"Sundried","hex":"#ffde02"},{"name":"Sundried Tomato","hex":"#692b2b"},{"name":"Sunezumi Brown","hex":"#6e5f57"},{"name":"Sunflower","hex":"#ffc512"},{"name":"Sunflower Dandelion","hex":"#ffe26a"},{"name":"Sunflower Island","hex":"#ffcd01"},{"name":"Sunflower Mango","hex":"#ffb700"},{"name":"Sunflower Seed","hex":"#ffe3a9"},{"name":"Sunflower Valley","hex":"#fdbd27"},{"name":"Sunflower Yellow","hex":"#ffda03"},{"name":"Sunglo","hex":"#c76155"},{"name":"Sunglow","hex":"#ffcc33"},{"name":"Sunglow Gecko","hex":"#ffcf48"},{"name":"Sunken Battleship","hex":"#51574f"},{"name":"Sunken Gold","hex":"#b29700"},{"name":"Sunken Harbor","hex":"#1c3d44"},{"name":"Sunken Pool","hex":"#c8ddda"},{"name":"Sunken Ship","hex":"#6b443d"},{"name":"Sunkissed Apricot","hex":"#f2bda8"},{"name":"Sunkissed Beach","hex":"#deab9b"},{"name":"Sunkissed Coral","hex":"#ffa56e"},{"name":"Sunkissed Peach","hex":"#fed8bf"},{"name":"Sunkissed Yellow","hex":"#ffe9ba"},{"name":"Sunlight","hex":"#ebcd95"},{"name":"Sunlit","hex":"#ffdb78"},{"name":"Sunlit Allium","hex":"#9787bb"},{"name":"Sunlit Glade","hex":"#98d4a0"},{"name":"Sunlit Kelp Green","hex":"#7d7103"},{"name":"Sunlounge","hex":"#da8433"},{"name":"Sunning Deck","hex":"#e8d7b1"},{"name":"Sunny","hex":"#f2f27a"},{"name":"Sunny Burrata","hex":"#eadfaa"},{"name":"Sunny Disposition","hex":"#dba637"},{"name":"Sunny Festival","hex":"#ffc946"},{"name":"Sunny Gazebo","hex":"#ede1cc"},{"name":"Sunny Glory","hex":"#e8d99c"},{"name":"Sunny Green","hex":"#c5cd40"},{"name":"Sunny Honey","hex":"#f8f0d8"},{"name":"Sunny Horizon","hex":"#d0875a"},{"name":"Sunny Lime","hex":"#e1ee82"},{"name":"Sunny Mimosa","hex":"#f5f5cc"},{"name":"Sunny Mood","hex":"#f7c84a"},{"name":"Sunny Morning","hex":"#f6d365"},{"name":"Sunny Pavement","hex":"#d9d7d9"},{"name":"Sunny Side Up","hex":"#ffdc41"},{"name":"Sunny Summer","hex":"#ffc900"},{"name":"Sunny Summit","hex":"#e3e9cf"},{"name":"Sunny Veranda","hex":"#fedf94"},{"name":"Sunny Yellow","hex":"#fff917"},{"name":"Sunnyside","hex":"#f8d016"},{"name":"Sunporch","hex":"#ffd18c"},{"name":"Sunray","hex":"#e3ab57"},{"name":"Sunray Venus","hex":"#cfc5b6"},{"name":"Sunrise","hex":"#f4bf77"},{"name":"Sunrise Glow","hex":"#fef0c5"},{"name":"Sunrise Heat","hex":"#caa061"},{"name":"Sunrose Yellow","hex":"#ffdb67"},{"name":"Sunset","hex":"#c0514a"},{"name":"Sunset Beige","hex":"#d0a584"},{"name":"Sunset Boulevard","hex":"#ff9607"},{"name":"Sunset Cloud","hex":"#be916d"},{"name":"Sunset Cove","hex":"#dcb397"},{"name":"Sunset Cruise","hex":"#ffbe94"},{"name":"Sunset Drive","hex":"#eabba2"},{"name":"Sunset Glow","hex":"#ffb52d"},{"name":"Sunset Gold","hex":"#f6c362"},{"name":"Sunset Horizon","hex":"#ba87aa"},{"name":"Sunset in Italy","hex":"#f0c484"},{"name":"Sunset Meadow","hex":"#a5a796"},{"name":"Sunset Orange","hex":"#fd5e53"},{"name":"Sunset over the Alps","hex":"#feac89"},{"name":"Sunset Papaya","hex":"#fc7d64"},{"name":"Sunset Peach","hex":"#f8a77f"},{"name":"Sunset Pink","hex":"#fad6e5"},{"name":"Sunset Purple","hex":"#724770"},{"name":"Sunset Red","hex":"#7f5158"},{"name":"Sunset Riders","hex":"#d70040"},{"name":"Sunset Serenade","hex":"#594265"},{"name":"Sunset Strip","hex":"#ffbc00"},{"name":"Sunset Yellow","hex":"#fa873d"},{"name":"Sunshade","hex":"#fa9d49"},{"name":"Sunshine","hex":"#f9d376"},{"name":"Sunshine Mellow","hex":"#f5c20b"},{"name":"Sunshine Surprise","hex":"#fcb02f"},{"name":"Sunshine Yellow","hex":"#fffd37"},{"name":"Sunshone Plum","hex":"#886688"},{"name":"Sunspark","hex":"#fbca69"},{"name":"Sunstitch","hex":"#fee2b2"},{"name":"Sunstone","hex":"#c7887f"},{"name":"Suntan","hex":"#d9b19f"},{"name":"Suntan Glow","hex":"#be8c74"},{"name":"Sunwashed Brick","hex":"#e3c1b3"},{"name":"Suō","hex":"#7e2639"},{"name":"Super Banana","hex":"#fffe71"},{"name":"Super Black","hex":"#221100"},{"name":"Super Gold","hex":"#aa8822"},{"name":"Super Hero","hex":"#ca535b"},{"name":"Super Leaf Brown","hex":"#ba5e0f"},{"name":"Super Lemon","hex":"#e2b238"},{"name":"Super Pink","hex":"#ce6ba6"},{"name":"Super Rare Jade","hex":"#14bab4"},{"name":"Super Rose Red","hex":"#cb1028"},{"name":"Super Saiyan","hex":"#ffdd00"},{"name":"Super Sepia","hex":"#ffaa88"},{"name":"Super Silver","hex":"#eeeeee"},{"name":"Super Violet","hex":"#785f8e"},{"name":"Superior Blue","hex":"#3a5e73"},{"name":"Superior Bronze","hex":"#786957"},{"name":"Superman Red","hex":"#ff1122"},{"name":"Supermint","hex":"#00928c"},{"name":"Supernatural","hex":"#313641"},{"name":"Supernatural Saffron","hex":"#ef760e"},{"name":"Supernova","hex":"#fff8d9"},{"name":"Supernova Residues","hex":"#d9ece9"},{"name":"Superstar","hex":"#ffcc11"},{"name":"Superstition","hex":"#5b6e74"},{"name":"Superstitious","hex":"#ac91b5"},{"name":"Superwhite","hex":"#e8eaea"},{"name":"Support Green","hex":"#78a300"},{"name":"Supreme Green","hex":"#cfddc7"},{"name":"Supreme Grey","hex":"#86949f"},{"name":"Supreme Pontiff","hex":"#d4d8db"},{"name":"Supremely Cool","hex":"#afbed4"},{"name":"Surati Pink","hex":"#fc53fc"},{"name":"Surf","hex":"#b8d4bb"},{"name":"Surf Crest","hex":"#c3d6bd"},{"name":"Surf Green","hex":"#427573"},{"name":"Surf Rider","hex":"#0193c2"},{"name":"Surf Spray","hex":"#b4c8c2"},{"name":"Surf the Web","hex":"#20377f"},{"name":"Surf Wash","hex":"#87ceca"},{"name":"Surf\'n\'dive","hex":"#374755"},{"name":"Surf\'s Surprise","hex":"#c4d3e5"},{"name":"Surf\'s Up","hex":"#c6e4eb"},{"name":"Surfboard Yellow","hex":"#fcda89"},{"name":"Surfer","hex":"#70b8ba"},{"name":"Surfer Girl","hex":"#db6484"},{"name":"Surfie Green","hex":"#007b77"},{"name":"Surfin\'","hex":"#73c0d2"},{"name":"Surfside","hex":"#9acad3"},{"name":"Surgeon Green","hex":"#009f6b"},{"name":"Surgical Green","hex":"#59a4c1"},{"name":"Surprise","hex":"#c9936f"},{"name":"Surprise Amber","hex":"#efb57a"},{"name":"Surrey Cream","hex":"#dcc89d"},{"name":"Surya Red","hex":"#70191f"},{"name":"Sushi","hex":"#7c9f2f"},{"name":"Sushi Rice","hex":"#fff7df"},{"name":"Sussie","hex":"#58bac2"},{"name":"Susu Green","hex":"#887f7a"},{"name":"Susu-Take Bamboo","hex":"#6f514c"},{"name":"Sutherland","hex":"#859d95"},{"name":"Suva Grey","hex":"#888387"},{"name":"Suzani Gold","hex":"#c2963f"},{"name":"Suzu Grey","hex":"#9ea1a3"},{"name":"Suzume Brown","hex":"#aa4f37"},{"name":"Suzumecha Brown","hex":"#8c4736"},{"name":"Svelte","hex":"#b8a3bb"},{"name":"Svelte Sage","hex":"#b2ac96"},{"name":"Swagger","hex":"#19b6b5"},{"name":"Swallow Blue","hex":"#154962"},{"name":"Swallow-Tailed Moth","hex":"#ece9dd"},{"name":"Swamp","hex":"#7f755f"},{"name":"Swamp Fox","hex":"#b79d69"},{"name":"Swamp Green","hex":"#748500"},{"name":"Swamp Mausoleum","hex":"#094c49"},{"name":"Swamp Monster","hex":"#005511"},{"name":"Swamp Mosquito","hex":"#252f2f"},{"name":"Swamp Moss","hex":"#698339"},{"name":"Swamp Mud","hex":"#857947"},{"name":"Swamp of Sorrows","hex":"#36310d"},{"name":"Swamp Shrub","hex":"#6d753b"},{"name":"Swampland","hex":"#226633"},{"name":"Swan Dive","hex":"#e5e4dd"},{"name":"Swan Lake","hex":"#c5e5e2"},{"name":"Swan Sea","hex":"#a6c1bf"},{"name":"Swan White","hex":"#f7f1e2"},{"name":"Swan Wing","hex":"#f5f2e6"},{"name":"Swanky Grey","hex":"#b5b1b5"},{"name":"Swanndri","hex":"#5f7963"},{"name":"Swans Down","hex":"#dae6dd"},{"name":"Sweat Bee","hex":"#1d4e8f"},{"name":"Sweater Weather","hex":"#ccccc5"},{"name":"Swedish Blue","hex":"#007cc0"},{"name":"Swedish Clover","hex":"#7b8867"},{"name":"Swedish Green","hex":"#184d43"},{"name":"Swedish Yellow","hex":"#fce081"},{"name":"Sweet & Sour","hex":"#c9aa37"},{"name":"Sweet 60","hex":"#f29eab"},{"name":"Sweet Almond","hex":"#cc9977"},{"name":"Sweet Alyssum","hex":"#e7c2de"},{"name":"Sweet and Sassy","hex":"#e1c9d1"},{"name":"Sweet and Sour","hex":"#c4bf0b"},{"name":"Sweet Angel","hex":"#f5c8bb"},{"name":"Sweet Angelica","hex":"#e8d08e"},{"name":"Sweet Annie","hex":"#9c946e"},{"name":"Sweet Apricot","hex":"#fcc0a6"},{"name":"Sweet Aqua","hex":"#a7e8d3"},{"name":"Sweet Ariel","hex":"#e5eae3"},{"name":"Sweet as Honey","hex":"#ffe9ac"},{"name":"Sweet Baby Rose","hex":"#c24f40"},{"name":"Sweet Bianca","hex":"#eedadd"},{"name":"Sweet Blue","hex":"#aebed2"},{"name":"Sweet Blush","hex":"#e6bfc1"},{"name":"Sweet Breeze","hex":"#c8dae3"},{"name":"Sweet Brown","hex":"#a83731"},{"name":"Sweet Butter","hex":"#fffcd7"},{"name":"Sweet Buttermilk","hex":"#fceedd"},{"name":"Sweet Carrot","hex":"#cc764f"},{"name":"Sweet Cashew","hex":"#ddaa77"},{"name":"Sweet Chamomile","hex":"#ffe186"},{"name":"Sweet Cherry","hex":"#9f4f4d"},{"name":"Sweet Cherry Red","hex":"#84172c"},{"name":"Sweet Chilli","hex":"#f5160b"},{"name":"Sweet Chrysanthemum","hex":"#dd84a3"},{"name":"Sweet Corn","hex":"#f9e176"},{"name":"Sweet Cream","hex":"#f0eae7"},{"name":"Sweet Curry","hex":"#e8a773"},{"name":"Sweet Desire","hex":"#aa33ee"},{"name":"Sweet Dough","hex":"#dbcbab"},{"name":"Sweet Dreams","hex":"#9bc7ea"},{"name":"Sweet Earth","hex":"#ab9368"},{"name":"Sweet Emily","hex":"#cbd1e1"},{"name":"Sweet Escape","hex":"#8844ff"},{"name":"Sweet Flag","hex":"#674196"},{"name":"Sweet Florence","hex":"#8a9b76"},{"name":"Sweet Flower","hex":"#e2e2ea"},{"name":"Sweet Frosting","hex":"#fff8e4"},{"name":"Sweet Garden","hex":"#5fd1ba"},{"name":"Sweet Gardenia","hex":"#efe4da"},{"name":"Sweet Georgia Brown","hex":"#8b715a"},{"name":"Sweet Grape","hex":"#4d3d52"},{"name":"Sweet Grass","hex":"#b2b68a"},{"name":"Sweet Harbor","hex":"#d9dde7"},{"name":"Sweet Heart","hex":"#e5aab0"},{"name":"Sweet Honey","hex":"#d4a55c"},{"name":"Sweet Illusion","hex":"#e0e8ec"},{"name":"Sweet Jasmine","hex":"#f9f4d4"},{"name":"Sweet Juliet","hex":"#b8bfd2"},{"name":"Sweet Lavender","hex":"#8e8db9"},{"name":"Sweet Lemon Seed","hex":"#fff45a"},{"name":"Sweet Lilac","hex":"#e8b5ce"},{"name":"Sweet Lucid Dreams","hex":"#ccbbdd"},{"name":"Sweet Lychee","hex":"#9b4040"},{"name":"Sweet Mallow","hex":"#ffdee2"},{"name":"Sweet Mandarin","hex":"#d35e3a"},{"name":"Sweet Maple","hex":"#ddaf6c"},{"name":"Sweet Marzipan","hex":"#ecd5aa"},{"name":"Sweet Melon","hex":"#e87973"},{"name":"Sweet Memories","hex":"#fdc8cd"},{"name":"Sweet Menthol","hex":"#c2e4bc"},{"name":"Sweet Midori","hex":"#a7c74f"},{"name":"Sweet Mint","hex":"#b4ccbe"},{"name":"Sweet Mint Pesto","hex":"#bbee99"},{"name":"Sweet Mint Tea","hex":"#d5e3d0"},{"name":"Sweet Molasses","hex":"#4b423f"},{"name":"Sweet Murmur","hex":"#ecc5df"},{"name":"Sweet Mustard","hex":"#d1b871"},{"name":"Sweet Nectar","hex":"#fabdaf"},{"name":"Sweet Nothing","hex":"#fae6e1"},{"name":"Sweet Nothings","hex":"#bbdbd0"},{"name":"Sweet Orange","hex":"#ebccb3"},{"name":"Sweet Pastel","hex":"#edc8b1"},{"name":"Sweet Pea","hex":"#9ba15c"},{"name":"Sweet Peach","hex":"#e2bcb3"},{"name":"Sweet Perfume","hex":"#d49ab9"},{"name":"Sweet Petal","hex":"#cbbad0"},{"name":"Sweet Pink","hex":"#ee918d"},{"name":"Sweet Potato","hex":"#d87c3b"},{"name":"Sweet Potato Peel","hex":"#917798"},{"name":"Sweet Rhapsody","hex":"#93dad3"},{"name":"Sweet Romance","hex":"#ffc4dd"},{"name":"Sweet Roses","hex":"#eae1dd"},{"name":"Sweet Sachet","hex":"#ffd8f0"},{"name":"Sweet Scent","hex":"#c7b7d0"},{"name":"Sweet Serenade","hex":"#ffc5d5"},{"name":"Sweet Sheba","hex":"#f0b9a9"},{"name":"Sweet Sherry","hex":"#eebdb6"},{"name":"Sweet Sixteen","hex":"#ffc9d3"},{"name":"Sweet Slumber","hex":"#d0dedd"},{"name":"Sweet Slumber Pink","hex":"#f8b8f8"},{"name":"Sweet Sparrow","hex":"#a8946b"},{"name":"Sweet Spiceberry","hex":"#7b453e"},{"name":"Sweet Spring","hex":"#d1e8c2"},{"name":"Sweet Sue","hex":"#d8aa86"},{"name":"Sweet Surrender","hex":"#c9d0b8"},{"name":"Sweet Taffy","hex":"#ecbcd4"},{"name":"Sweet Tart","hex":"#eaaea9"},{"name":"Sweet Tea","hex":"#c18244"},{"name":"Sweet Tooth","hex":"#5f6255"},{"name":"Sweet Truffle","hex":"#f0dcd7"},{"name":"Sweet Vanilla","hex":"#eeebe6"},{"name":"Sweet Venom","hex":"#b6ff1a"},{"name":"Sweet Violet","hex":"#8c667a"},{"name":"Sweet Watermelon","hex":"#fc5669"},{"name":"Sweet William","hex":"#8892c1"},{"name":"Sweetheart","hex":"#f3c3d8"},{"name":"Sweetie Pie","hex":"#e1bbdb"},{"name":"Sweetly","hex":"#ffe5ef"},{"name":"Sweetness","hex":"#f8dbc4"},{"name":"Sweetwood","hex":"#c39f87"},{"name":"Sweety Pie","hex":"#e7cee3"},{"name":"Swift","hex":"#82aadc"},{"name":"Swimmer","hex":"#0a91bf"},{"name":"Swimmers Pool","hex":"#2dc5bb"},{"name":"Swimming","hex":"#c2e5e5"},{"name":"Swimming Pool Green","hex":"#a8cfc0"},{"name":"Swing Brown","hex":"#947569"},{"name":"Swing Sage","hex":"#c2c0a9"},{"name":"Swinging Vine","hex":"#706842"},{"name":"Swirl","hex":"#d7cec5"},{"name":"Swirling Smoke","hex":"#cecac1"},{"name":"Swirling Water","hex":"#e6e9e9"},{"name":"Swiss Almond","hex":"#e4dacc"},{"name":"Swiss Brown","hex":"#6e5f53"},{"name":"Swiss Chard","hex":"#dd5e6d"},{"name":"Swiss Cheese","hex":"#fff4b9"},{"name":"Swiss Chocolate","hex":"#8c6150"},{"name":"Swiss Coffee","hex":"#d5c3ad"},{"name":"Swiss Cream","hex":"#ecead9"},{"name":"Swiss Lilac","hex":"#86608e"},{"name":"Swiss Plum","hex":"#5946b2"},{"name":"Swiss Rose","hex":"#e8d5dd"},{"name":"Swollen Sky","hex":"#67667c"},{"name":"Sword Steel","hex":"#d6d2de"},{"name":"Sybarite Green","hex":"#8bcbab"},{"name":"Sycamore","hex":"#908d39"},{"name":"Sycamore Grove","hex":"#6a8779"},{"name":"Sycamore Stand","hex":"#959e8f"},{"name":"Sycamore Tan","hex":"#9c8a79"},{"name":"Sycamore Tree","hex":"#3f544f"},{"name":"Sycorax Bronze","hex":"#cbb394"},{"name":"Sydney Harbour","hex":"#97bbc8"},{"name":"Sylph","hex":"#adaab1"},{"name":"Sylvan","hex":"#979381"},{"name":"Sylvan Green","hex":"#e7eacb"},{"name":"Sylvaneth Bark","hex":"#ac8262"},{"name":"Symbolic","hex":"#b29ead"},{"name":"Symmetry","hex":"#8fa0a7"},{"name":"Symphony Gold","hex":"#c0a887"},{"name":"Symphony of Blue","hex":"#89a0a6"},{"name":"Synallactida","hex":"#331133"},{"name":"Synchronicity","hex":"#c7d4ce"},{"name":"Syndicalist","hex":"#f8c300"},{"name":"Syndicate Camouflage","hex":"#918151"},{"name":"Synergy","hex":"#48c2b0"},{"name":"Synthetic Mint","hex":"#9ffeb0"},{"name":"Synthetic Pumpkin","hex":"#ff7538"},{"name":"Synthetic Spearmint","hex":"#1ef876"},{"name":"Syrah","hex":"#792e35"},{"name":"Syrah Soil","hex":"#a16717"},{"name":"Syrian Violet","hex":"#dfcae4"},{"name":"Syrup","hex":"#b18867"},{"name":"System Shock Blue","hex":"#3a2efe"},{"name":"Szöllősi Grape","hex":"#8020ff"},{"name":"T-Bird Turquoise","hex":"#6fc1af"},{"name":"T-Rex Fossil","hex":"#8e908d"},{"name":"Ta Prohm","hex":"#c7c4a5"},{"name":"Tabasco","hex":"#a02712"},{"name":"Tabbouleh","hex":"#709572"},{"name":"Tabbouleh Green","hex":"#526525"},{"name":"Table Linen","hex":"#f1e9dc"},{"name":"Table Pear Yellow","hex":"#e5c279"},{"name":"Tabriz Teal","hex":"#005553"},{"name":"Tacao","hex":"#f6ae78"},{"name":"Tacha","hex":"#d2b960"},{"name":"Taco","hex":"#f3c7b3"},{"name":"Tactile","hex":"#d3e7c7"},{"name":"Tadorna Teal","hex":"#7ad7ad"},{"name":"Tadpole","hex":"#7d7771"},{"name":"Taffeta Sheen","hex":"#81825f"},{"name":"Taffeta Tint","hex":"#f3e0eb"},{"name":"Taffy","hex":"#c39b6a"},{"name":"Taffy Pink","hex":"#fea6c8"},{"name":"Taffy Twist","hex":"#aad0ba"},{"name":"Tagliatelle","hex":"#f9f2d4"},{"name":"Tahini","hex":"#ddbb77"},{"name":"Tahini Brown","hex":"#9b856b"},{"name":"Tahiti Gold","hex":"#dc722a"},{"name":"Tahitian Breeze","hex":"#b8e9e4"},{"name":"Tahitian Pearl","hex":"#263644"},{"name":"Tahitian Sand","hex":"#f5dcb4"},{"name":"Tahitian Sky","hex":"#c9e9e7"},{"name":"Tahitian Tide","hex":"#00677e"},{"name":"Tahitian Treat","hex":"#00686d"},{"name":"Tahoe Blue","hex":"#94b8c1"},{"name":"Tahoe Snow","hex":"#d7e1e5"},{"name":"Tahuna Sands","hex":"#d8cc9b"},{"name":"Taiga","hex":"#768078"},{"name":"Tail Lights","hex":"#dd4411"},{"name":"Tailor\'s Buff","hex":"#dfc2aa"},{"name":"Tailored Tan","hex":"#bd9d7e"},{"name":"Tailwind","hex":"#f5e8cf"},{"name":"Tainted Gold","hex":"#ead795"},{"name":"Taisha Brown","hex":"#bb5520"},{"name":"Taisha Red","hex":"#9f5233"},{"name":"Taiwan Blue Magpie","hex":"#3377a2"},{"name":"Taiwan Gold","hex":"#c7aa71"},{"name":"Taj","hex":"#734a33"},{"name":"Taj Mahal","hex":"#ede9df"},{"name":"Take Five","hex":"#b3c9d3"},{"name":"Take the Plunge","hex":"#d8d4dd"},{"name":"Take-Out","hex":"#e6ccb7"},{"name":"Talavera","hex":"#a0928b"},{"name":"Talâyi Gold","hex":"#e7b25d"},{"name":"Taliesin Blue","hex":"#707e84"},{"name":"Talipot Palm","hex":"#648149"},{"name":"Talismanic Teal","hex":"#159f9b"},{"name":"Tall Poppy","hex":"#853534"},{"name":"Tall Ships","hex":"#0e81b9"},{"name":"Tall Waves","hex":"#5c9bcc"},{"name":"Tallarn Leather","hex":"#947e74"},{"name":"Tallarn Sand","hex":"#a79b5e"},{"name":"Tallow","hex":"#a39977"},{"name":"Tamago Egg","hex":"#fcd575"},{"name":"Tamago Orange","hex":"#ffa631"},{"name":"Tamahagane","hex":"#3b3f40"},{"name":"Tamale","hex":"#f0e4c6"},{"name":"Tamale Maize","hex":"#f8e7b7"},{"name":"Tamanegi Peel","hex":"#deaa9b"},{"name":"Tamarack Yellow","hex":"#f2dd55"},{"name":"Tamarama","hex":"#11ddee"},{"name":"Tamarillo","hex":"#752b2f"},{"name":"Tamarind","hex":"#341515"},{"name":"Tamarind Fruit","hex":"#75503b"},{"name":"Tamarind Tart","hex":"#8e604b"},{"name":"Tambo Tank","hex":"#7c7d57"},{"name":"Tamboon","hex":"#bdc8af"},{"name":"Tambourine","hex":"#f0edd6"},{"name":"Tambua Bay","hex":"#658498"},{"name":"Tame Teal","hex":"#c1e6df"},{"name":"Tame Thyme","hex":"#c5c5ac"},{"name":"Tamed Beast","hex":"#9c2626"},{"name":"Tamed Beauty","hex":"#cfbccf"},{"name":"Tan","hex":"#d1b26f"},{"name":"Tan 686A","hex":"#a38d6d"},{"name":"Tan Brown","hex":"#ab7e4c"},{"name":"Tan Green","hex":"#a9be70"},{"name":"Tàn Hēi Soot","hex":"#323939"},{"name":"Tan Hide","hex":"#fa9d5a"},{"name":"Tan Oak","hex":"#c2aa87"},{"name":"Tan Plan","hex":"#c19e78"},{"name":"Tan Temptation","hex":"#f0bd9e"},{"name":"Tan Wagon","hex":"#a3755d"},{"name":"Tan Whirl","hex":"#f1d7ce"},{"name":"Tan Your Hide","hex":"#b5905a"},{"name":"Tan-Gent","hex":"#b69073"},{"name":"Tana","hex":"#b8b5a1"},{"name":"Tanager","hex":"#a43834"},{"name":"Tanager Turquoise","hex":"#8dd8e7"},{"name":"Tanami Desert","hex":"#d0b25c"},{"name":"Tanaris Beige","hex":"#e9b581"},{"name":"Tanbark","hex":"#896656"},{"name":"Tanbark Trail","hex":"#766451"},{"name":"Tandayapa Cloud Forest","hex":"#4a766e"},{"name":"Tandoori","hex":"#bb5c4d"},{"name":"Tandoori Red","hex":"#d25762"},{"name":"Tandoori Spice","hex":"#9f4440"},{"name":"Tangara","hex":"#97725f"},{"name":"Tangaroa","hex":"#1e2f3c"},{"name":"Tangelo","hex":"#f94d00"},{"name":"Tangelo Cream","hex":"#f2e9de"},{"name":"Tangent","hex":"#ead3a2"},{"name":"Tangent Periwinkle","hex":"#50507f"},{"name":"Tangerine","hex":"#ff9300"},{"name":"Tangerine Bliss","hex":"#d86130"},{"name":"Tangerine Cream","hex":"#ffa089"},{"name":"Tangerine Dream","hex":"#ff8449"},{"name":"Tangerine Flake","hex":"#e57f5b"},{"name":"Tangerine Haze","hex":"#de8417"},{"name":"Tangerine Skin","hex":"#f28500"},{"name":"Tangerine Tango","hex":"#ff9e4b"},{"name":"Tangerine Twist","hex":"#f8ad1b"},{"name":"Tangerine Yellow","hex":"#fecd01"},{"name":"Tangier","hex":"#a97164"},{"name":"Tangle","hex":"#7c7c65"},{"name":"Tangled Twine","hex":"#b19466"},{"name":"Tangled Vines","hex":"#cac19a"},{"name":"Tangled Web","hex":"#b2b2b2"},{"name":"Tanglewood","hex":"#a58f85"},{"name":"Tango","hex":"#d46f31"},{"name":"Tango Mango","hex":"#f8c884"},{"name":"Tango Pink","hex":"#e47f7a"},{"name":"Tango Red","hex":"#b10e2a"},{"name":"Tangy","hex":"#e3c382"},{"name":"Tangy Dill","hex":"#9a9147"},{"name":"Tangy Green","hex":"#bb9b52"},{"name":"Tangy Taffy","hex":"#e7cac3"},{"name":"Tank","hex":"#5c6141"},{"name":"Tank Grey","hex":"#848481"},{"name":"Tank Head","hex":"#9aa0a2"},{"name":"Tank Yellow","hex":"#efc93d"},{"name":"Tankard Grey","hex":"#7d7463"},{"name":"Tanned Leather","hex":"#f2c108"},{"name":"Tanned Wood","hex":"#8f6e4b"},{"name":"Tannery Brown","hex":"#5c493e"},{"name":"Tannin","hex":"#a68b6d"},{"name":"Tanooki Suit Brown","hex":"#ae6c37"},{"name":"Tansy","hex":"#c7c844"},{"name":"Tansy Green","hex":"#95945c"},{"name":"Tantalize","hex":"#669ccb"},{"name":"Tantalizing Tan","hex":"#f3dcd1"},{"name":"Tantalizing Teal","hex":"#87dcce"},{"name":"Tantanmen Brown","hex":"#857158"},{"name":"Tanzanian Gold","hex":"#fcd215"},{"name":"Tanzanite","hex":"#1478a7"},{"name":"Tanzanite Blue","hex":"#114a6b"},{"name":"Tanzine","hex":"#7983d7"},{"name":"Taos Taupe","hex":"#bfa77f"},{"name":"Taos Turquoise","hex":"#2b8c8a"},{"name":"Tap Shoe","hex":"#2f3032"},{"name":"Tapa","hex":"#7c7c72"},{"name":"Tapenade","hex":"#906528"},{"name":"Tapering Light","hex":"#f7f2dd"},{"name":"Tapestry","hex":"#b37084"},{"name":"Tapestry Beige","hex":"#b8ac9e"},{"name":"Tapestry Gold","hex":"#b4966b"},{"name":"Tapestry Red","hex":"#c06960"},{"name":"Tapestry Teal","hex":"#4d7f86"},{"name":"Tapioca","hex":"#dac9b9"},{"name":"Tara","hex":"#def1dd"},{"name":"Tara\'s Drapes","hex":"#767a49"},{"name":"Tarawera","hex":"#253c48"},{"name":"Tardis","hex":"#105673"},{"name":"Tardis Blue","hex":"#003b6f"},{"name":"Tareyton","hex":"#a1cdbf"},{"name":"Tarmac","hex":"#5a5348"},{"name":"Tarmac Green","hex":"#477f4a"},{"name":"Tarnished Brass","hex":"#7f6c24"},{"name":"Tarnished Silver","hex":"#797b80"},{"name":"Tarnished Treasure","hex":"#b9a47e"},{"name":"Tarnished Trumpet","hex":"#d5b176"},{"name":"Tarpon Green","hex":"#c1b55c"},{"name":"Tarragon","hex":"#a4ae77"},{"name":"Tarragon Tease","hex":"#b4ac84"},{"name":"Tarsier","hex":"#825e61"},{"name":"Tart Apple","hex":"#b6d27e"},{"name":"Tart Gelato","hex":"#f6eec9"},{"name":"Tart Orange","hex":"#fb4d46"},{"name":"Tartan Red","hex":"#b1282a"},{"name":"Tartare","hex":"#bf5b3c"},{"name":"Tartlet","hex":"#fddcd9"},{"name":"Tartrazine","hex":"#f7d917"},{"name":"Tarzan Green","hex":"#919585"},{"name":"Tasman","hex":"#bac0b3"},{"name":"Tasman Honey Yellow","hex":"#e6c562"},{"name":"Tasmanian Sea","hex":"#658a8a"},{"name":"Tassel","hex":"#c6884a"},{"name":"Tassel Flower","hex":"#f9c0ce"},{"name":"Tassel Taupe","hex":"#9f9291"},{"name":"Taste of Berry","hex":"#c8a3b8"},{"name":"Taste of Summer","hex":"#f2ae73"},{"name":"Tasty Toffee","hex":"#9b6d54"},{"name":"Tatami","hex":"#deccaf"},{"name":"Tatami Mat","hex":"#af9d83"},{"name":"Tatami Tan","hex":"#ba8c64"},{"name":"Tatarian Aster","hex":"#976e9a"},{"name":"Tate Olive","hex":"#988f63"},{"name":"Tattered Teddy","hex":"#a2806f"},{"name":"Tattletail","hex":"#80736a"},{"name":"Tatzelwurm Green","hex":"#376d03"},{"name":"Tau Light Ochre","hex":"#f7d60d"},{"name":"Tau Sept Ochre","hex":"#a3813f"},{"name":"Taupe","hex":"#b9a281"},{"name":"Taupe Brown","hex":"#483c30"},{"name":"Taupe Grey","hex":"#8b8589"},{"name":"Taupe Mist","hex":"#e1d9d0"},{"name":"Taupe Night","hex":"#705a56"},{"name":"Taupe of the Morning","hex":"#dad2c6"},{"name":"Taupe Tapestry","hex":"#c3a79a"},{"name":"Taupe Tease","hex":"#e0d9cf"},{"name":"Taupe Tone","hex":"#ada090"},{"name":"Taupe White","hex":"#c7c1bb"},{"name":"Taurus Forest Fern","hex":"#77be52"},{"name":"Tavern","hex":"#b7a594"},{"name":"Tavern Creek","hex":"#957046"},{"name":"Tavern Taupe","hex":"#9e938f"},{"name":"Tawny Amber","hex":"#d19776"},{"name":"Tawny Birch","hex":"#aa7b65"},{"name":"Tawny Brown","hex":"#ab856f"},{"name":"Tawny Daylily","hex":"#eee4d1"},{"name":"Tawny Mushroom","hex":"#b39997"},{"name":"Tawny Olive","hex":"#c4962c"},{"name":"Tawny Orange","hex":"#d37f6f"},{"name":"Tawny Owl","hex":"#978b71"},{"name":"Tawny Port","hex":"#643a48"},{"name":"Tawny Tan","hex":"#ccb299"},{"name":"Tax Break","hex":"#496569"},{"name":"Taxite","hex":"#5c3937"},{"name":"Taylor","hex":"#5f5879"},{"name":"Te Papa Green","hex":"#2b4b40"},{"name":"Tea","hex":"#bfb5a2"},{"name":"Tea Bag","hex":"#726259"},{"name":"Tea Biscuit","hex":"#f5ebe1"},{"name":"Tea Blossom Pink","hex":"#b5a9ac"},{"name":"Tea Chest","hex":"#605547"},{"name":"Tea Cookie","hex":"#f4e1c0"},{"name":"Tea Green","hex":"#d0f0c0"},{"name":"Tea Leaf","hex":"#8f8667"},{"name":"Tea Leaf Brown","hex":"#a59564"},{"name":"Tea Leaf Mouse","hex":"#888e7e"},{"name":"Tea Light","hex":"#f8e4c2"},{"name":"Tea Party","hex":"#ffd7d0"},{"name":"Tea Room","hex":"#dcb5b0"},{"name":"Tea Rose","hex":"#f883c2"},{"name":"Tea Time","hex":"#d9bebc"},{"name":"Tea Towel","hex":"#c5a5c7"},{"name":"Teaberry","hex":"#dc3855"},{"name":"Teaberry Blossom","hex":"#b44940"},{"name":"Teak","hex":"#ab8953"},{"name":"Teak Wood","hex":"#624133"},{"name":"Teakwood","hex":"#8d7e6d"},{"name":"Teakwood Brown","hex":"#89756b"},{"name":"Teal","hex":"#008080"},{"name":"Teal Bayou","hex":"#57a1a0"},{"name":"Teal Blue","hex":"#01889f"},{"name":"Teal Dark Blue","hex":"#0f4d5c"},{"name":"Teal Dark Green","hex":"#006d57"},{"name":"Teal Deer","hex":"#99e6b3"},{"name":"Teal Drama","hex":"#24604f"},{"name":"Teal Essence","hex":"#3da3ae"},{"name":"Teal Forest","hex":"#405b5d"},{"name":"Teal Fury","hex":"#1a6c76"},{"name":"Teal Green","hex":"#25a36f"},{"name":"Teal Ice","hex":"#d1efe9"},{"name":"Teal Me No Lies","hex":"#0daca7"},{"name":"Teal Melody","hex":"#c8ede2"},{"name":"Teal Moiré","hex":"#50b7cf"},{"name":"Teal Mosaic","hex":"#406976"},{"name":"Teal Motif","hex":"#006d73"},{"name":"Teal Stencil","hex":"#627f7b"},{"name":"Teal Treat","hex":"#d9f2e3"},{"name":"Teal Tree","hex":"#94b9b4"},{"name":"Teal Trinket","hex":"#4e939d"},{"name":"Teal Trip","hex":"#00a093"},{"name":"Teal Tune","hex":"#02708c"},{"name":"Teal Waters","hex":"#007765"},{"name":"Teal Wave","hex":"#8b9ea1"},{"name":"Teal With It","hex":"#01697a"},{"name":"Tealish","hex":"#24bca8"},{"name":"Tealish Green","hex":"#0cdc73"},{"name":"Team Spirit","hex":"#416986"},{"name":"Tear","hex":"#b5d8df"},{"name":"Teardrop","hex":"#d1eaea"},{"name":"Tears of Joy","hex":"#f0f1da"},{"name":"Teary Eyed","hex":"#ded2e8"},{"name":"Teasel Dipsacus","hex":"#ceaefa"},{"name":"Teasing Peach","hex":"#f1e1d7"},{"name":"Teatime","hex":"#be9b79"},{"name":"Teatime Mauve","hex":"#c8a89e"},{"name":"Tech Wave","hex":"#4c7a9d"},{"name":"Techile","hex":"#9fa1a1"},{"name":"Technical Blue","hex":"#587c8d"},{"name":"Techno Blue","hex":"#006b8b"},{"name":"Techno Green","hex":"#69ac58"},{"name":"Techno Pink","hex":"#dd95b4"},{"name":"Techno Taupe","hex":"#bfb9aa"},{"name":"Techno Turquoise","hex":"#60bd8e"},{"name":"Technolust","hex":"#ff80f9"},{"name":"Teclis Blue","hex":"#a3bae3"},{"name":"Teddy Bear","hex":"#9d8164"},{"name":"Teddy\'s Taupe","hex":"#bcac9f"},{"name":"Tedious Red","hex":"#c00c20"},{"name":"Tee Off","hex":"#68855a"},{"name":"Teen Queen","hex":"#a67498"},{"name":"Teeny Bikini","hex":"#326395"},{"name":"Teewurst","hex":"#f2dbd7"},{"name":"Tegreen","hex":"#c1b65f"},{"name":"Teldrassil Purple","hex":"#ad66d2"},{"name":"Telemagenta","hex":"#aa22cc"},{"name":"Telopea","hex":"#2d2541"},{"name":"Tempe Star","hex":"#47626a"},{"name":"Temperamental Green","hex":"#2b8725"},{"name":"Temperate Taupe","hex":"#bfb1aa"},{"name":"Tempered Chocolate","hex":"#772211"},{"name":"Tempered Grey","hex":"#a1aeb1"},{"name":"Tempest","hex":"#79839b"},{"name":"Templar\'s Gold","hex":"#f2e688"},{"name":"Template","hex":"#a6c9e3"},{"name":"Temple Guard Blue","hex":"#339a8d"},{"name":"Temple of Orange","hex":"#ee7755"},{"name":"Temple Tile","hex":"#a9855d"},{"name":"Tempo","hex":"#33abb2"},{"name":"Tempo Teal","hex":"#018c94"},{"name":"Temptation","hex":"#987465"},{"name":"Temptatious Tangerine","hex":"#ff7733"},{"name":"Tempting Pink","hex":"#dd8cb5"},{"name":"Tempting Taupe","hex":"#ccaa99"},{"name":"Temptress","hex":"#3c2126"},{"name":"Tenacious Tentacles","hex":"#98f6b0"},{"name":"Tender","hex":"#f7e8d7"},{"name":"Tender Greens","hex":"#c5cfb6"},{"name":"Tender Limerence","hex":"#e0d4e0"},{"name":"Tender Peach","hex":"#f8d5b8"},{"name":"Tender Shoot","hex":"#e8eace"},{"name":"Tender Shoots","hex":"#accb35"},{"name":"Tender Sprout","hex":"#e8e287"},{"name":"Tender Taupe","hex":"#c4b198"},{"name":"Tender Touch","hex":"#d5c6d6"},{"name":"Tender Turquoise","hex":"#82d9c5"},{"name":"Tender Twilight","hex":"#b7cfe2"},{"name":"Tender Violet","hex":"#d4c3da"},{"name":"Tender Waves","hex":"#badbdf"},{"name":"Tender Yellow","hex":"#e8ebaf"},{"name":"Tenderness","hex":"#c8dbce"},{"name":"Tendril","hex":"#869c65"},{"name":"Tenné","hex":"#cd5700"},{"name":"Tennis Ball","hex":"#dfff4f"},{"name":"Tennis Blue","hex":"#7cb5c6"},{"name":"Tennis Court","hex":"#c8450c"},{"name":"Tense Terracotta","hex":"#a35732"},{"name":"Tent Green","hex":"#a89f86"},{"name":"Tentacle Pink","hex":"#ffbacd"},{"name":"Tenzing","hex":"#9ecfd9"},{"name":"Tequila","hex":"#f4d0a4"},{"name":"Teri-Gaki Persimmon","hex":"#eb6238"},{"name":"Terminator Chrome","hex":"#dcdfe5"},{"name":"Terminatus Stone","hex":"#bdb192"},{"name":"Termite Beige","hex":"#ddbb66"},{"name":"Tern Grey","hex":"#d5cdbd"},{"name":"Terra Brun","hex":"#5a382d"},{"name":"Terra Cotta Clay","hex":"#d08f73"},{"name":"Terra Cotta Pot","hex":"#d38d71"},{"name":"Terra Cotta Sun","hex":"#9c675f"},{"name":"Terra Cotta Urn","hex":"#b06f60"},{"name":"Terra Cove","hex":"#844c47"},{"name":"Terra Orange","hex":"#cc7661"},{"name":"Terra Pin","hex":"#534d42"},{"name":"Terra Rosa","hex":"#bb6569"},{"name":"Terra Rose","hex":"#9f6d66"},{"name":"Terra Sol","hex":"#e8b57b"},{"name":"Terra Tone","hex":"#b6706b"},{"name":"Terrace Brown","hex":"#73544d"},{"name":"Terrace Pool","hex":"#a1d8e0"},{"name":"Terrace Taupe","hex":"#b2ab9c"},{"name":"Terrace Teal","hex":"#275b60"},{"name":"Terrace View","hex":"#cad0bf"},{"name":"Terracotta","hex":"#cb6843"},{"name":"Terracotta Chip","hex":"#c47c5e"},{"name":"Terracotta Red Brown","hex":"#976a66"},{"name":"Terracotta Sand","hex":"#d6ba9b"},{"name":"Terrain","hex":"#708157"},{"name":"Terran Khaki","hex":"#a1965e"},{"name":"Terrapin","hex":"#807f4a"},{"name":"Terrarium","hex":"#5f6d5c"},{"name":"Terrazzo Brown","hex":"#a28873"},{"name":"Terrazzo Tan","hex":"#be8973"},{"name":"Terrestrial","hex":"#276757"},{"name":"Terror from the Deep","hex":"#1d4769"},{"name":"Testosterose","hex":"#ddaaff"},{"name":"Tête-à-Tête","hex":"#d90166"},{"name":"Teton Blue","hex":"#8d99a1"},{"name":"Teton Breeze","hex":"#dfeae8"},{"name":"Tetraammine","hex":"#1e20c7"},{"name":"Tetrarose","hex":"#8e6f73"},{"name":"Tetsu Black","hex":"#2b3733"},{"name":"Tetsu Green","hex":"#005243"},{"name":"Tetsu Iron","hex":"#455765"},{"name":"Tetsu-Guro Black","hex":"#281a14"},{"name":"Tetsu-Kon Blue","hex":"#17184b"},{"name":"Tetsuonando Black","hex":"#2b3736"},{"name":"Texan Angel","hex":"#e2ddd1"},{"name":"Texas","hex":"#ece67e"},{"name":"Texas Boots","hex":"#8b6947"},{"name":"Texas Heatwave","hex":"#a54e37"},{"name":"Texas Hills","hex":"#c9926e"},{"name":"Texas Longhorn","hex":"#e08d3c"},{"name":"Texas Ranger Brown","hex":"#a0522d"},{"name":"Texas Rose","hex":"#f1d2c9"},{"name":"Texas Sage","hex":"#b9a77c"},{"name":"Texas Sunset","hex":"#fc9625"},{"name":"Texas Sweet Tea","hex":"#794840"},{"name":"Tezcatlipōca Blue","hex":"#5500ee"},{"name":"Thai Basil","hex":"#7a7f3f"},{"name":"Thai Chili","hex":"#ce0001"},{"name":"Thai Curry","hex":"#bd6b1c"},{"name":"Thai Hot","hex":"#fe1c06"},{"name":"Thai Ice Tea","hex":"#e0a878"},{"name":"Thai Mango","hex":"#e77200"},{"name":"Thai Spice","hex":"#bb4455"},{"name":"Thai Teak","hex":"#624435"},{"name":"Thai Teal","hex":"#2e8689"},{"name":"Thai Temple","hex":"#e7c630"},{"name":"Thalassa","hex":"#53b1ba"},{"name":"Thalassophile","hex":"#44aadd"},{"name":"Thallium Flame","hex":"#58f898"},{"name":"Thamar Black","hex":"#181818"},{"name":"Thames Dusk","hex":"#62676a"},{"name":"Thanksgiving","hex":"#b56e4a"},{"name":"That\'s Atomic","hex":"#b0b08e"},{"name":"That\'s My Lime","hex":"#dcd290"},{"name":"Thatch","hex":"#b1948f"},{"name":"Thatch Brown","hex":"#867057"},{"name":"Thatch Green","hex":"#544e31"},{"name":"Thatched Cottage","hex":"#d6c7a6"},{"name":"Thatched Roof","hex":"#efe0c6"},{"name":"Thawed Out","hex":"#e1eeec"},{"name":"The Art of Seduction","hex":"#dd0088"},{"name":"The Blarney Stone","hex":"#ab9f89"},{"name":"The Bluff","hex":"#ffc8c2"},{"name":"The Boulevard","hex":"#d0a492"},{"name":"The Broadway","hex":"#145775"},{"name":"The Cottage","hex":"#837663"},{"name":"The Count\'s Black","hex":"#102030"},{"name":"The Devil\'s Grass","hex":"#666420"},{"name":"The Ego Has Landed","hex":"#a75455"},{"name":"The End","hex":"#2a2a2a"},{"name":"The End Is Beer","hex":"#eed508"},{"name":"The Fang","hex":"#585673"},{"name":"The Fang Grey","hex":"#436174"},{"name":"The Fifth Sun","hex":"#f0e22c"},{"name":"The First Daffodil","hex":"#fff08c"},{"name":"The Golden State","hex":"#e9d2af"},{"name":"The Goods","hex":"#aaa651"},{"name":"The Grape War of 97\'","hex":"#bb00ff"},{"name":"The Killing Joke","hex":"#b0bf1a"},{"name":"The Legend of Green","hex":"#558844"},{"name":"The New Black","hex":"#ff8400"},{"name":"The Rainbow Fish","hex":"#4466ee"},{"name":"The Real Teal","hex":"#007883"},{"name":"The Sickener","hex":"#db7093"},{"name":"The Speed of Light","hex":"#f6f4ef"},{"name":"The Vast of Night","hex":"#110066"},{"name":"The Wild Apothecary","hex":"#118844"},{"name":"Theatre Blue","hex":"#21467a"},{"name":"Theatre District Lights","hex":"#eef4db"},{"name":"Theatre Dress","hex":"#274242"},{"name":"Theatre Gold","hex":"#a76924"},{"name":"Theatre Powder Rose","hex":"#e2d4d4"},{"name":"Themeda Japonica","hex":"#e2b13c"},{"name":"Therapeutic Toucan","hex":"#ee7711"},{"name":"There Is Light","hex":"#002288"},{"name":"There\'s No Place Like Home","hex":"#ad9569"},{"name":"Thermal","hex":"#3f5052"},{"name":"Thermal Aqua","hex":"#9ccebe"},{"name":"Thermal Spring","hex":"#589489"},{"name":"Thermic Orange","hex":"#eb3318"},{"name":"Thermocline","hex":"#8fadbd"},{"name":"Thermos","hex":"#d2bb95"},{"name":"They call it Mellow","hex":"#fbe4b3"},{"name":"Thick Blue","hex":"#5566dd"},{"name":"Thick Fog","hex":"#dcd3ce"},{"name":"Thick Green","hex":"#88cc22"},{"name":"Thick Pink","hex":"#cc55dd"},{"name":"Thick Purple","hex":"#8833dd"},{"name":"Thick Red","hex":"#b30d0d"},{"name":"Thick Yellow","hex":"#f1d512"},{"name":"Thicket","hex":"#69865b"},{"name":"Thicket Green","hex":"#93840f"},{"name":"Thimble Red","hex":"#a05d8b"},{"name":"Thimbleberry","hex":"#e34b50"},{"name":"Thimbleberry Leaf","hex":"#afa97d"},{"name":"Thin Air","hex":"#c6fcff"},{"name":"Thin Cloud","hex":"#d4dcda"},{"name":"Thin Heights","hex":"#cae0df"},{"name":"Thin Ice","hex":"#d9dcdb"},{"name":"Think Leaf","hex":"#4d8871"},{"name":"Think Pink","hex":"#e5a5c1"},{"name":"Thirsty Thursday","hex":"#726e9b"},{"name":"Thistle","hex":"#d8bfd8"},{"name":"Thistle Down","hex":"#9499bb"},{"name":"Thistle Green","hex":"#cccaa8"},{"name":"Thistle Grey","hex":"#c0b6a8"},{"name":"Thistle Mauve","hex":"#834d7c"},{"name":"Thistleblossom Soft Blue","hex":"#8ab3bf"},{"name":"Thor\'s Thunder","hex":"#44ccff"},{"name":"Thorn Crown","hex":"#b5a197"},{"name":"Thorny Branch","hex":"#4c4a41"},{"name":"Thought","hex":"#d8cdc8"},{"name":"Thousand Herb","hex":"#317589"},{"name":"Thousand Needles Sand","hex":"#ffd9bb"},{"name":"Thousand Sons Blue","hex":"#02d8e9"},{"name":"Thousand Years Green","hex":"#316745"},{"name":"Thraka Green Wash","hex":"#4f6446"},{"name":"Threaded Loom","hex":"#cec2aa"},{"name":"Threatening Red","hex":"#c30305"},{"name":"Thredbo","hex":"#73c4d7"},{"name":"Three Ring Circus","hex":"#fddbb6"},{"name":"Thresher Shark","hex":"#93cce7"},{"name":"Threshold Taupe","hex":"#ac9a8a"},{"name":"Throat","hex":"#281f3f"},{"name":"Thrush","hex":"#936b4f"},{"name":"Thrush Egg","hex":"#a4b6a7"},{"name":"Thuja Green","hex":"#11610f"},{"name":"Thulian Pink","hex":"#df6fa1"},{"name":"Thulite Rose","hex":"#ddc2ba"},{"name":"Thumper","hex":"#bdada4"},{"name":"Thundelarra","hex":"#e88a76"},{"name":"Thunder","hex":"#4d4d4b"},{"name":"Thunder & Lightning","hex":"#f9f5db"},{"name":"Thunder Bay","hex":"#cbd9d7"},{"name":"Thunder Chi","hex":"#aac4d4"},{"name":"Thunder Grey","hex":"#57534c"},{"name":"Thunder Mountain Longhorn Pepper","hex":"#ce1b1f"},{"name":"Thunderbird","hex":"#923830"},{"name":"Thunderbolt","hex":"#fdefad"},{"name":"Thunderbolt Blue","hex":"#454c56"},{"name":"Thundercat","hex":"#8a99a3"},{"name":"Thundercloud","hex":"#698589"},{"name":"Thunderhawk Blue","hex":"#417074"},{"name":"Thunderous","hex":"#6d6c62"},{"name":"Thunderstorm","hex":"#9098a1"},{"name":"Thunderstorm Blue","hex":"#004f63"},{"name":"Thunderstruck","hex":"#5f5755"},{"name":"Thurman","hex":"#7f7b60"},{"name":"Thy Flesh Consumed","hex":"#98514a"},{"name":"Thyme","hex":"#50574c"},{"name":"Thyme and Place","hex":"#6f8770"},{"name":"Thyme and Salt","hex":"#629a31"},{"name":"Thyme Green","hex":"#737b6c"},{"name":"Tia Maria","hex":"#97422d"},{"name":"Tiamo","hex":"#9bb2aa"},{"name":"Tiān Lán Sky","hex":"#5db3ff"},{"name":"Tiāntāi Mountain Green","hex":"#566b38"},{"name":"Tiara","hex":"#b9c3be"},{"name":"Tiara Jewel","hex":"#eae0e8"},{"name":"Tiara Pink","hex":"#daa6cf"},{"name":"Tiber","hex":"#184343"},{"name":"Tibetan Cloak","hex":"#6a6264"},{"name":"Tibetan Jasmine","hex":"#f6f3e1"},{"name":"Tibetan Orange","hex":"#ae5848"},{"name":"Tibetan Plateau","hex":"#88ffdd"},{"name":"Tibetan Red","hex":"#8b3145"},{"name":"Tibetan Silk","hex":"#9c8a52"},{"name":"Tibetan Sky","hex":"#dbeaed"},{"name":"Tibetan Stone","hex":"#74b7c1"},{"name":"Tibetan Temple","hex":"#814d50"},{"name":"Tibetan Turquoise","hex":"#0084a6"},{"name":"Tibetan Yellow","hex":"#fedf00"},{"name":"Ticino Blue","hex":"#268bcc"},{"name":"Tickle Me Pink","hex":"#fc89ac"},{"name":"Tickled Crow","hex":"#b6baa4"},{"name":"Tickled Pink","hex":"#efa7bf"},{"name":"Tidal","hex":"#f0f590"},{"name":"Tidal Foam","hex":"#bfb9a3"},{"name":"Tidal Green","hex":"#cdca98"},{"name":"Tidal Mist","hex":"#e5e9e1"},{"name":"Tidal Pool","hex":"#005e59"},{"name":"Tidal Thicket","hex":"#8b866b"},{"name":"Tidal Wave","hex":"#355978"},{"name":"Tide","hex":"#beb4ab"},{"name":"Tide Pools","hex":"#c6d8d0"},{"name":"Tidepool","hex":"#0a6f69"},{"name":"Tides of Darkness","hex":"#002400"},{"name":"Tidewater","hex":"#c2e3dd"},{"name":"Tiě Hēi Metal","hex":"#343450"},{"name":"Tierra Del Fuego Sea Green","hex":"#c2ddd3"},{"name":"Tiffany Amber","hex":"#b58141"},{"name":"Tiffany Blue","hex":"#7bf2da"},{"name":"Tiffany Light","hex":"#fde4b4"},{"name":"Tiffany Rose","hex":"#d2a694"},{"name":"Tiger","hex":"#be9c67"},{"name":"Tiger Cat","hex":"#cda035"},{"name":"Tiger Claw","hex":"#e1daca"},{"name":"Tiger Cub","hex":"#deae46"},{"name":"Tiger King","hex":"#dd9922"},{"name":"Tiger Lily","hex":"#e1583f"},{"name":"Tiger Moth","hex":"#f8f2dd"},{"name":"Tiger Moth Orange","hex":"#dd6611"},{"name":"Tiger of Mysore","hex":"#ff8855"},{"name":"Tiger Stripe","hex":"#bf6f39"},{"name":"Tiger Tail","hex":"#fee9c4"},{"name":"Tiger Yellow","hex":"#ffde7e"},{"name":"Tiger\'s Eye","hex":"#9a7c63"},{"name":"Tigereye","hex":"#bb7748"},{"name":"Tijolo","hex":"#aa5500"},{"name":"Tiki Hut","hex":"#8a6e45"},{"name":"Tiki Monster","hex":"#8fbc8f"},{"name":"Tiki Straw","hex":"#b9a37e"},{"name":"Tiki Torch","hex":"#bb9e3f"},{"name":"Tile Blue","hex":"#0094a5"},{"name":"Tile Green","hex":"#7a958e"},{"name":"Tile Red","hex":"#c76b4a"},{"name":"Tilla Kari Mosque","hex":"#00cccc"},{"name":"Tillandsia Purple","hex":"#60397f"},{"name":"Tilled Earth","hex":"#80624e"},{"name":"Tilled Soil","hex":"#6b4d35"},{"name":"Tilleul de Noémie","hex":"#87815f"},{"name":"Tilted Pinball","hex":"#ee5522"},{"name":"Tilted Red","hex":"#991122"},{"name":"Timber Beam","hex":"#a0855c"},{"name":"Timber Brown","hex":"#605652"},{"name":"Timber Green","hex":"#324336"},{"name":"Timber Town","hex":"#908d85"},{"name":"Timber Trail","hex":"#a1755c"},{"name":"Timber Wolf","hex":"#8d8070"},{"name":"Timber Wolf White","hex":"#d9d6cf"},{"name":"Timberline","hex":"#73573f"},{"name":"Timberwolf","hex":"#b4aca3"},{"name":"Time Capsule","hex":"#a59888"},{"name":"Time Honored","hex":"#7f6d37"},{"name":"Time Out","hex":"#fadeb8"},{"name":"Time Travel","hex":"#b3c4d5"},{"name":"Time Warp","hex":"#9397a3"},{"name":"Timeless","hex":"#b1d8db"},{"name":"Timeless Beauty","hex":"#b6273e"},{"name":"Timeless Copper","hex":"#976d59"},{"name":"Timeless Day","hex":"#ece9e8"},{"name":"Timeless Lilac","hex":"#afb2c4"},{"name":"Timeless Ruby","hex":"#9a4149"},{"name":"Timeless Seafoam","hex":"#afe4e2"},{"name":"Timeless Taupe","hex":"#908379"},{"name":"Times Square Screens","hex":"#20c073"},{"name":"Timid Beige","hex":"#e5e0dd"},{"name":"Timid Blue","hex":"#d9e0ee"},{"name":"Timid Cloud","hex":"#dcdde5"},{"name":"Timid Green","hex":"#e1e2d6"},{"name":"Timid Lime","hex":"#e4e0da"},{"name":"Timid Purple","hex":"#dfdfea"},{"name":"Timid Sea","hex":"#66a9b0"},{"name":"Timid Sheep","hex":"#e4e0dd"},{"name":"Timid Violet","hex":"#ded3dd"},{"name":"Timothy Grass","hex":"#adb274"},{"name":"Tin","hex":"#919191"},{"name":"Tin Bitz","hex":"#48452b"},{"name":"Tin Foil","hex":"#acb0b0"},{"name":"Tin Lizzie","hex":"#928a98"},{"name":"Tin Man","hex":"#a4a298"},{"name":"Tin Pink","hex":"#a3898a"},{"name":"Tin Soldier","hex":"#bebebe"},{"name":"Tinge Of Mauve","hex":"#d4c3cc"},{"name":"Tingle","hex":"#e6541b"},{"name":"Tinker Light","hex":"#fbedb8"},{"name":"Tinkerbell Trail","hex":"#fcf0c3"},{"name":"Tinny Tin","hex":"#4b492d"},{"name":"Tinsel","hex":"#b88a3e"},{"name":"Tinsmith","hex":"#dce0dc"},{"name":"Tint of Earth","hex":"#ce9480"},{"name":"Tint of Green","hex":"#dae9dc"},{"name":"Tint of Rose","hex":"#ffcbc9"},{"name":"Tint of Turquoise","hex":"#41bfb5"},{"name":"Tinted Ice","hex":"#cff6f4"},{"name":"Tinted Iris","hex":"#c4b7d8"},{"name":"Tinted Lilac","hex":"#9da9d0"},{"name":"Tinted Mint","hex":"#e3e7c4"},{"name":"Tinted Rosewood","hex":"#e1c8d1"},{"name":"Tiny Bubbles","hex":"#0088ab"},{"name":"Tiny Calf","hex":"#e0bfa5"},{"name":"Tiny Fawn","hex":"#c08b6d"},{"name":"Tiny Ghost Town","hex":"#d4cfcc"},{"name":"Tiny Mr Frosty","hex":"#b8d3e4"},{"name":"Tiny Pink","hex":"#ffd6c7"},{"name":"Tiny Ribbons","hex":"#b98faf"},{"name":"Tiny Seedling","hex":"#8a8d69"},{"name":"Tip of the Iceberg","hex":"#bbe4ea"},{"name":"Tip Toes","hex":"#d8c2cd"},{"name":"Tiramisu","hex":"#744b3e"},{"name":"Tiramisu Cream","hex":"#d3bda4"},{"name":"Tirisfal Lime","hex":"#75de2f"},{"name":"Tirol","hex":"#9e915c"},{"name":"Titan White","hex":"#ddd6e1"},{"name":"Titanite Yellow","hex":"#ad8f0f"},{"name":"Titanium","hex":"#888586"},{"name":"Titanium Blue","hex":"#5b798e"},{"name":"Titanium Grey","hex":"#545b62"},{"name":"Titanium White","hex":"#e4e4e4"},{"name":"Titanium Yellow","hex":"#eee600"},{"name":"Titian Red","hex":"#bd5620"},{"name":"Titmouse Grey","hex":"#b8b2be"},{"name":"Tizzy","hex":"#f9f3df"},{"name":"Tlāloc Blue","hex":"#316f82"},{"name":"Toad","hex":"#748d70"},{"name":"Toad King","hex":"#3d6c54"},{"name":"Toadstool","hex":"#b8282f"},{"name":"Toadstool Dot","hex":"#d7e7da"},{"name":"Toadstool Soup","hex":"#988088"},{"name":"Toast","hex":"#9f715f"},{"name":"Toast and Butter","hex":"#d2ad84"},{"name":"Toasted","hex":"#b59274"},{"name":"Toasted Almond","hex":"#dacfba"},{"name":"Toasted Bagel","hex":"#986b4d"},{"name":"Toasted Barley","hex":"#e7ddcb"},{"name":"Toasted Cashew","hex":"#e2d0b8"},{"name":"Toasted Chestnut","hex":"#a7775b"},{"name":"Toasted Coconut","hex":"#e9c2a1"},{"name":"Toasted Grain","hex":"#c5a986"},{"name":"Toasted Marshmallow","hex":"#efe0d4"},{"name":"Toasted Marshmallow Fluff","hex":"#fff9eb"},{"name":"Toasted Nut","hex":"#c08768"},{"name":"Toasted Nutmeg","hex":"#a47365"},{"name":"Toasted Oatmeal","hex":"#efdecc"},{"name":"Toasted Paprika","hex":"#a34631"},{"name":"Toasted Pecan","hex":"#765143"},{"name":"Toasted Pine Nut","hex":"#dcc6a6"},{"name":"Toasted Sesame","hex":"#af9a73"},{"name":"Toasted Truffle","hex":"#aa3344"},{"name":"Toasted Walnut","hex":"#746a5a"},{"name":"Toasted Wheat","hex":"#c9af96"},{"name":"Toasty","hex":"#957258"},{"name":"Toasty Grey","hex":"#d1ccc0"},{"name":"Tobacco","hex":"#684f3c"},{"name":"Tobacco Brown","hex":"#6d5843"},{"name":"Tobacco Leaf","hex":"#8c724f"},{"name":"Tobago","hex":"#44362d"},{"name":"Tobermory","hex":"#d39898"},{"name":"Tobernite","hex":"#077a7d"},{"name":"Tobey Rattan","hex":"#ad785c"},{"name":"Tobi Brown","hex":"#4c221b"},{"name":"Tobiko Orange","hex":"#e45c10"},{"name":"Toes in the Sand","hex":"#f8dcbf"},{"name":"Toffee","hex":"#755139"},{"name":"Toffee Bar","hex":"#947255"},{"name":"Toffee Cream","hex":"#d98b51"},{"name":"Toffee Crunch","hex":"#995e39"},{"name":"Toffee Fingers","hex":"#968678"},{"name":"Toffee Glaze","hex":"#a5654a"},{"name":"Toffee Sauce","hex":"#b17426"},{"name":"Toffee Tan","hex":"#c8a883"},{"name":"Toffee Tart","hex":"#c08950"},{"name":"Tofino","hex":"#e6baa9"},{"name":"Tofino Belue","hex":"#03719c"},{"name":"Tofu","hex":"#e6e5d6"},{"name":"Toile Blue","hex":"#94bee1"},{"name":"Toile Red","hex":"#8b534e"},{"name":"Toki Brown","hex":"#b88884"},{"name":"Tokiwa Green","hex":"#007b43"},{"name":"Tokyo Underground","hex":"#ecf3d8"},{"name":"Tol Barad Green","hex":"#6c5846"},{"name":"Tol Barad Grey","hex":"#4e4851"},{"name":"Toledo","hex":"#3e2631"},{"name":"Toledo Cuoio","hex":"#decbb1"},{"name":"Tom Thumb","hex":"#4f6348"},{"name":"Tomatillo Peel","hex":"#cad3c1"},{"name":"Tomatillo Salsa","hex":"#bbb085"},{"name":"Tomato","hex":"#ef4026"},{"name":"Tomato Baby","hex":"#e10d18"},{"name":"Tomato Bisque","hex":"#d15915"},{"name":"Tomato Burst","hex":"#d6201a"},{"name":"Tomato Concassé","hex":"#f6561c"},{"name":"Tomato Cream","hex":"#bf753b"},{"name":"Tomato Frog","hex":"#ff4444"},{"name":"Tomato Puree","hex":"#c9344c"},{"name":"Tomato Queen","hex":"#dd4422"},{"name":"Tomato Red","hex":"#ec2d01"},{"name":"Tomato Sauce","hex":"#b21807"},{"name":"Tomato Scepter","hex":"#e44458"},{"name":"Tomato Slices","hex":"#a2423d"},{"name":"Tomb Blue","hex":"#0099cc"},{"name":"Tombstone Grey","hex":"#cec5b6"},{"name":"Tōmorokoshi Corn","hex":"#faa945"},{"name":"Tōmorokoshi Yellow","hex":"#eec362"},{"name":"Tomorrow\'s Coral","hex":"#ffc5a3"},{"name":"Tōnatiuh Red","hex":"#d14155"},{"name":"Tongue","hex":"#d1908e"},{"name":"Tonic","hex":"#deddaa"},{"name":"Tonicha","hex":"#975437"},{"name":"Tonkatsu","hex":"#edac36"},{"name":"Tony Taupe","hex":"#b1a290"},{"name":"Tonys Pink","hex":"#e79e88"},{"name":"Too Big to Whale","hex":"#9596a4"},{"name":"Too Blue","hex":"#3d6695"},{"name":"Too Blue to be True","hex":"#0088ff"},{"name":"Too Dark Tonight","hex":"#0011bb"},{"name":"Tōō Gold","hex":"#ffb61e"},{"name":"Tool Blue","hex":"#637985"},{"name":"Tool Green","hex":"#7f7711"},{"name":"Tootie Fruity","hex":"#f9dbe2"},{"name":"Top Banana","hex":"#fad873"},{"name":"Top Hat Tan","hex":"#c1a393"},{"name":"Top Shelf","hex":"#82889c"},{"name":"Top Tomato","hex":"#d04838"},{"name":"Topaz","hex":"#cf7e40"},{"name":"Topaz Green","hex":"#c5ddd0"},{"name":"Topaz Mountain","hex":"#92653f"},{"name":"Topaz Yellow","hex":"#eb975e"},{"name":"Topiary","hex":"#8e9655"},{"name":"Topiary Garden","hex":"#6f7c00"},{"name":"Topiary Green","hex":"#667700"},{"name":"Topiary Sculpture","hex":"#618a4d"},{"name":"Topiary Tint","hex":"#bbc9b2"},{"name":"Topinambur Root","hex":"#aa5c71"},{"name":"Topsail","hex":"#dae2e0"},{"name":"Toque White","hex":"#e7e2da"},{"name":"Torch Red","hex":"#fd0d35"},{"name":"Torchlight","hex":"#ffc985"},{"name":"Torea Bay","hex":"#353d75"},{"name":"Toreador","hex":"#cd123f"},{"name":"Torii Red","hex":"#db3e00"},{"name":"Tornado","hex":"#d1d3cf"},{"name":"Tornado Cloud","hex":"#5e5b60"},{"name":"Tornado Season","hex":"#4d7179"},{"name":"Tornado Wind","hex":"#60635f"},{"name":"Toronja","hex":"#ffdecd"},{"name":"Torrefacto Roast","hex":"#4e241e"},{"name":"Torrey Pine","hex":"#55784f"},{"name":"Torrid Turquoise","hex":"#00938b"},{"name":"Tort","hex":"#5e8e91"},{"name":"Tortilla","hex":"#efdba7"},{"name":"Tortoise Shell","hex":"#7c4937"},{"name":"Tortuga","hex":"#84816f"},{"name":"Tory Blue","hex":"#374e88"},{"name":"Tory Red","hex":"#d6685f"},{"name":"Tosca","hex":"#744042"},{"name":"Toscana","hex":"#9f846b"},{"name":"Tostada","hex":"#e3c19c"},{"name":"Tosty Crust","hex":"#a67e4b"},{"name":"Total Eclipse","hex":"#303543"},{"name":"Total Recall","hex":"#f6ead8"},{"name":"Totally Black","hex":"#3f4041"},{"name":"Totally Broccoli","hex":"#909853"},{"name":"Totally Tan","hex":"#cca683"},{"name":"Totally Toffee","hex":"#dd9977"},{"name":"Totem Pole","hex":"#991b07"},{"name":"Toucan","hex":"#f09650"},{"name":"Toucan Gentleman","hex":"#fbc90d"},{"name":"Touch of Blue","hex":"#c2d7e9"},{"name":"Touch of Blush","hex":"#f6ded5"},{"name":"Touch of Class","hex":"#8e6f6e"},{"name":"Touch of Glamor","hex":"#dd8844"},{"name":"Touch Of Green","hex":"#dbe9d5"},{"name":"Touch of Grey","hex":"#d1cfca"},{"name":"Touch of Lime","hex":"#e1e5d7"},{"name":"Touch of Mint","hex":"#f8fff8"},{"name":"Touch of Sand","hex":"#d5c7ba"},{"name":"Touch of Sun","hex":"#faf7e9"},{"name":"Touch of Tan","hex":"#eed9d1"},{"name":"Touch of Topaz","hex":"#f7e4d0"},{"name":"Touch of Turquoise","hex":"#a1d4cf"},{"name":"Touchable Pink","hex":"#ecdfd8"},{"name":"Touched by the Sea","hex":"#c3e4e8"},{"name":"Touching White","hex":"#f4e1d7"},{"name":"Toupe","hex":"#c7ac7d"},{"name":"Tourmaline","hex":"#83a1a7"},{"name":"Tourmaline Mauve","hex":"#bda3a5"},{"name":"Tourmaline Turquoise","hex":"#4f9e96"},{"name":"Tourmaline Water Blue","hex":"#99d3df"},{"name":"Tournament Field","hex":"#54836b"},{"name":"Tower Bridge","hex":"#7ba0a0"},{"name":"Tower Grey","hex":"#9caca5"},{"name":"Tower Tan","hex":"#d5b59b"},{"name":"Towering Cliffs","hex":"#897565"},{"name":"Townhall Tan","hex":"#c3aa8c"},{"name":"Townhouse Tan","hex":"#c19859"},{"name":"Townhouse Taupe","hex":"#bbb09b"},{"name":"Toxic Boyfriend","hex":"#ccff11"},{"name":"Toxic Essence","hex":"#cceebb"},{"name":"Toxic Frog","hex":"#98fb98"},{"name":"Toxic Green","hex":"#61de2a"},{"name":"Toxic Latte","hex":"#e1f8e7"},{"name":"Toxic Orange","hex":"#ff6037"},{"name":"Toxic Slime","hex":"#43e85f"},{"name":"Toxic Sludge","hex":"#00bb33"},{"name":"Toxic Steam","hex":"#c1fdc9"},{"name":"Toy Blue","hex":"#00889f"},{"name":"Toy Camouflage","hex":"#117700"},{"name":"Toy Mauve","hex":"#776ea2"},{"name":"Toy Submarine Blue","hex":"#005280"},{"name":"Toy Tank Green","hex":"#6d6f4f"},{"name":"Tracery","hex":"#dbb9a0"},{"name":"Track and Field","hex":"#d66352"},{"name":"Track Green","hex":"#849e88"},{"name":"Tractor Beam","hex":"#00bffe"},{"name":"Tractor Green","hex":"#1c6a51"},{"name":"Tractor Red","hex":"#fd0f35"},{"name":"Trade Secret","hex":"#6a7978"},{"name":"Trade Winds","hex":"#e6e3d6"},{"name":"Tradewind","hex":"#b7c5c6"},{"name":"Trading Post","hex":"#bb8d3b"},{"name":"Traditional","hex":"#776255"},{"name":"Traditional Blue","hex":"#1f648d"},{"name":"Traditional Grey","hex":"#c7c7c1"},{"name":"Traditional Leather","hex":"#6f4f3e"},{"name":"Traditional Rose","hex":"#be013c"},{"name":"Traditional Royal Blue","hex":"#0504aa"},{"name":"Traditional Tan","hex":"#d6d2c0"},{"name":"Traffic Green","hex":"#55ff22"},{"name":"Traffic Light Green","hex":"#8c9900"},{"name":"Traffic Red","hex":"#ff1c1c"},{"name":"Traffic White","hex":"#f1f0ea"},{"name":"Traffic Yellow","hex":"#fedc39"},{"name":"Trail Dust","hex":"#d0c4ac"},{"name":"Trail Print","hex":"#6b6662"},{"name":"Trail Sand","hex":"#bfaa97"},{"name":"Trailblazer","hex":"#c0b28e"},{"name":"Trailhead","hex":"#776c61"},{"name":"Trailing Vine","hex":"#cfd5a7"},{"name":"Trance","hex":"#8f97a5"},{"name":"Tranquil","hex":"#ddede9"},{"name":"Tranquil Aqua","hex":"#7c9aa0"},{"name":"Tranquil Bay","hex":"#74b8de"},{"name":"Tranquil Eve","hex":"#ece7f2"},{"name":"Tranquil Green","hex":"#a4af9e"},{"name":"Tranquil Peach","hex":"#fce2d7"},{"name":"Tranquil Pond","hex":"#768294"},{"name":"Tranquil Pool","hex":"#88ddff"},{"name":"Tranquil Retreat","hex":"#dbd2cf"},{"name":"Tranquil Sea","hex":"#d2d2df"},{"name":"Tranquil Seashore","hex":"#629091"},{"name":"Tranquil Taupe","hex":"#b0a596"},{"name":"Tranquil Teal","hex":"#8ac7bb"},{"name":"Tranquili Teal","hex":"#6c9da9"},{"name":"Tranquility","hex":"#8e9b96"},{"name":"Trans Tasman","hex":"#307d67"},{"name":"Transcend","hex":"#c3ac98"},{"name":"Transcendence","hex":"#f8f4d8"},{"name":"Transformer","hex":"#a5acb7"},{"name":"Transfusion","hex":"#ea1833"},{"name":"Translucent Silk","hex":"#ffe9e1"},{"name":"Translucent Unicorn","hex":"#ffedef"},{"name":"Translucent Vision","hex":"#e5efd7"},{"name":"Translucent White","hex":"#e4e3e9"},{"name":"Transparent Beige","hex":"#f4ecc2"},{"name":"Transparent Blue","hex":"#ddddff"},{"name":"Transparent Green","hex":"#ddffdd"},{"name":"Transparent Mauve","hex":"#b4a6bf"},{"name":"Transparent Orange","hex":"#ffaa66"},{"name":"Transparent Pink","hex":"#ffddee"},{"name":"Transparent White","hex":"#cbdccb"},{"name":"Transparent Yellow","hex":"#ffeeaa"},{"name":"Transporter Green","hex":"#004f54"},{"name":"Trapped Darkness","hex":"#0e1d32"},{"name":"Trapper Green","hex":"#005239"},{"name":"Trapunto","hex":"#f4e8b6"},{"name":"Travertine","hex":"#e2ddc7"},{"name":"Travertine Path","hex":"#b5ab8f"},{"name":"Treacherous Blizzard","hex":"#ddf5e7"},{"name":"Treacle","hex":"#885d2d"},{"name":"Treacle Fudge","hex":"#de9832"},{"name":"Treasure","hex":"#e7d082"},{"name":"Treasure Casket","hex":"#9b7856"},{"name":"Treasure Chamber","hex":"#998866"},{"name":"Treasure Chest","hex":"#726854"},{"name":"Treasure Island","hex":"#47493b"},{"name":"Treasure Isle","hex":"#609d91"},{"name":"Treasure Map","hex":"#d0bb9d"},{"name":"Treasure Map Waters","hex":"#658faa"},{"name":"Treasure Seeker","hex":"#3f363d"},{"name":"Treasured","hex":"#9c7947"},{"name":"Treasured Love","hex":"#bb2277"},{"name":"Treasured Teal","hex":"#52c1b3"},{"name":"Treasured Wilderness","hex":"#006633"},{"name":"Treasures","hex":"#ba8b36"},{"name":"Treasury","hex":"#dbd186"},{"name":"Tree Bark","hex":"#715e58"},{"name":"Tree Bark Brown","hex":"#665b4e"},{"name":"Tree Bark Green","hex":"#304b4a"},{"name":"Tree Branch","hex":"#8a7362"},{"name":"Tree Fern","hex":"#7fb489"},{"name":"Tree Frog","hex":"#9fb32e"},{"name":"Tree Frog Green","hex":"#7ca14e"},{"name":"Tree Green","hex":"#2a7e19"},{"name":"Tree House","hex":"#3b2820"},{"name":"Tree Hugger","hex":"#79774a"},{"name":"Tree Lined","hex":"#8ea597"},{"name":"Tree Moss","hex":"#dcdbca"},{"name":"Tree of Life","hex":"#595d45"},{"name":"Tree Palm","hex":"#7faa4b"},{"name":"Tree Peony","hex":"#a4345d"},{"name":"Tree Poppy","hex":"#e2813b"},{"name":"Tree Pose","hex":"#bdc7bc"},{"name":"Tree Python","hex":"#22cc00"},{"name":"Tree Sap","hex":"#cc7711"},{"name":"Tree Shade","hex":"#476a30"},{"name":"Tree Swing","hex":"#726144"},{"name":"Treeless","hex":"#d1b7a7"},{"name":"Treelet","hex":"#609f6e"},{"name":"Treemoss","hex":"#615746"},{"name":"Treetop","hex":"#91b6ac"},{"name":"Treetop Cathedral","hex":"#2f4a15"},{"name":"Trefoil","hex":"#47562f"},{"name":"Trek Tan","hex":"#d1ae9a"},{"name":"Trekking Blue","hex":"#4e606d"},{"name":"Trekking Green","hex":"#3d5c54"},{"name":"Trellis","hex":"#eaefe5"},{"name":"Trellis Vine","hex":"#5d7f74"},{"name":"Trellised Ivy","hex":"#9aa097"},{"name":"Trench","hex":"#af9770"},{"name":"Trendy Green","hex":"#7e8424"},{"name":"Trendy Pink","hex":"#805d80"},{"name":"Tres Naturale","hex":"#dcc7ad"},{"name":"Trevi Fountain","hex":"#c2dfe2"},{"name":"Tri-Tip","hex":"#f2d1c4"},{"name":"Triamble","hex":"#94a089"},{"name":"Triassic","hex":"#67422d"},{"name":"Tribal","hex":"#807943"},{"name":"Tribal Drum","hex":"#514843"},{"name":"Tribal Pottery","hex":"#a78876"},{"name":"Tribeca","hex":"#a4918d"},{"name":"Tribecca Corner","hex":"#33373b"},{"name":"Trick or Treat","hex":"#eab38a"},{"name":"Tricorn Black","hex":"#2f2f30"},{"name":"Tricot Lilac White","hex":"#dcd3e3"},{"name":"Tricycle Taupe","hex":"#b09994"},{"name":"Tried & True Blue","hex":"#494f62"},{"name":"Triforce Shine","hex":"#f5f5da"},{"name":"Triforce Yellow","hex":"#f0f00f"},{"name":"Trillium","hex":"#a89896"},{"name":"Trim","hex":"#756d44"},{"name":"Trinidad","hex":"#c54f33"},{"name":"Trinidad Moruga Scorpion","hex":"#d0343d"},{"name":"Trinity Islands","hex":"#b9b79b"},{"name":"Trinket","hex":"#d69835"},{"name":"Trinket Box","hex":"#7e633f"},{"name":"Trinket Gold","hex":"#a7885f"},{"name":"Triple Berry","hex":"#c96272"},{"name":"Tripleberry","hex":"#752b3e"},{"name":"Tripoli White","hex":"#e5e3e5"},{"name":"Trippy Velvet","hex":"#cc00ee"},{"name":"Trisha\'s Eyes","hex":"#8eb9c4"},{"name":"Tristesse","hex":"#0c0c1f"},{"name":"Trite White","hex":"#f4f0e3"},{"name":"Trixter","hex":"#705676"},{"name":"Trojan Horse Brown","hex":"#775020"},{"name":"Troll Green","hex":"#014e2e"},{"name":"Troll Slayer Orange","hex":"#f4a34c"},{"name":"Trolley Grey","hex":"#818181"},{"name":"Trooper","hex":"#708386"},{"name":"Tropez Blue","hex":"#73b7c2"},{"name":"Tropic","hex":"#4889ac"},{"name":"Tropic Canary","hex":"#bcc23c"},{"name":"Tropic Sea","hex":"#016f92"},{"name":"Tropic Tide","hex":"#6cc1bb"},{"name":"Tropic Turquoise","hex":"#6ab5a4"},{"name":"Tropical","hex":"#a8e8cb"},{"name":"Tropical Bay","hex":"#9db7af"},{"name":"Tropical Blooms","hex":"#d7967e"},{"name":"Tropical Blue","hex":"#aec9eb"},{"name":"Tropical Breeze","hex":"#ebedee"},{"name":"Tropical Cascade","hex":"#8ca8a0"},{"name":"Tropical Cyclone","hex":"#b9cabd"},{"name":"Tropical Dream","hex":"#d9eae5"},{"name":"Tropical Elements","hex":"#33ff22"},{"name":"Tropical Escape","hex":"#4dbbaf"},{"name":"Tropical Fog","hex":"#cbcab6"},{"name":"Tropical Foliage","hex":"#3e6252"},{"name":"Tropical Forest","hex":"#024a43"},{"name":"Tropical Forest Green","hex":"#228b21"},{"name":"Tropical Freeze","hex":"#99ddcc"},{"name":"Tropical Fruit","hex":"#fdd3a7"},{"name":"Tropical Funk","hex":"#55dd00"},{"name":"Tropical Green","hex":"#17806d"},{"name":"Tropical Heat","hex":"#c2343c"},{"name":"Tropical Hibiscus","hex":"#9c6071"},{"name":"Tropical Hideaway","hex":"#17a99e"},{"name":"Tropical Holiday","hex":"#8fcdc7"},{"name":"Tropical Kelp","hex":"#009d7d"},{"name":"Tropical Lagoon","hex":"#1e98ae"},{"name":"Tropical Light","hex":"#9cd572"},{"name":"Tropical Mist","hex":"#cae8e8"},{"name":"Tropical Moss","hex":"#d2c478"},{"name":"Tropical Night Blue","hex":"#2a2e4c"},{"name":"Tropical Oasis","hex":"#579aa5"},{"name":"Tropical Orchid","hex":"#a0828a"},{"name":"Tropical Peach","hex":"#ffc4b2"},{"name":"Tropical Pool","hex":"#bfdeef"},{"name":"Tropical Rain","hex":"#447777"},{"name":"Tropical Rainforest","hex":"#00755e"},{"name":"Tropical Sea","hex":"#03a598"},{"name":"Tropical Siesta","hex":"#ddc073"},{"name":"Tropical Skies","hex":"#155d66"},{"name":"Tropical Smoothie","hex":"#c5556d"},{"name":"Tropical Splash","hex":"#70cbce"},{"name":"Tropical Sun","hex":"#fbb719"},{"name":"Tropical Tale","hex":"#e0deb8"},{"name":"Tropical Tan","hex":"#cbb391"},{"name":"Tropical Teal","hex":"#008794"},{"name":"Tropical Tide","hex":"#5ecaae"},{"name":"Tropical Tone","hex":"#50a074"},{"name":"Tropical Trail","hex":"#89d1b5"},{"name":"Tropical Tree","hex":"#20aea7"},{"name":"Tropical Turquoise","hex":"#04cdff"},{"name":"Tropical Twist","hex":"#837946"},{"name":"Tropical Violet","hex":"#cda5df"},{"name":"Tropical Waterfall","hex":"#bee7e2"},{"name":"Tropical Waters","hex":"#007c7e"},{"name":"Tropical Wood","hex":"#ba8f68"},{"name":"Tropical Wood Brown","hex":"#603b2a"},{"name":"Tropicana","hex":"#447700"},{"name":"Tropics","hex":"#009b8e"},{"name":"Trough Shell","hex":"#726d40"},{"name":"Trough Shell Brown","hex":"#918754"},{"name":"Trouser Blue","hex":"#00666d"},{"name":"Trout","hex":"#4c5356"},{"name":"Trout Caviar","hex":"#f75300"},{"name":"True Blonde","hex":"#dcc49b"},{"name":"True Blue","hex":"#010fcc"},{"name":"True Copper","hex":"#8b5643"},{"name":"True Crimson","hex":"#a22042"},{"name":"True Green","hex":"#089404"},{"name":"True Khaki","hex":"#b8ae98"},{"name":"True Lavender","hex":"#7e89c8"},{"name":"True Love","hex":"#e27e8a"},{"name":"True Navy","hex":"#465784"},{"name":"True Purple","hex":"#65318e"},{"name":"True Red","hex":"#c81a3a"},{"name":"True Romance","hex":"#4d456a"},{"name":"True Taupewood","hex":"#a8a095"},{"name":"True Teal","hex":"#0a8391"},{"name":"True To You","hex":"#cdd3a3"},{"name":"True V","hex":"#8e72c7"},{"name":"True Walnut","hex":"#967a67"},{"name":"Truepenny","hex":"#b46c42"},{"name":"Truesky Gloxym","hex":"#99bbff"},{"name":"Truffle","hex":"#c2a78e"},{"name":"Truffle Trouble","hex":"#a35139"},{"name":"Truffles","hex":"#e7d7cd"},{"name":"Truly Olive","hex":"#777250"},{"name":"Truly Taupe","hex":"#ac9e97"},{"name":"Trump Tan","hex":"#faa76c"},{"name":"Trumpet","hex":"#d1b669"},{"name":"Trumpet Flower","hex":"#e49977"},{"name":"Trumpet Gold","hex":"#e9b413"},{"name":"Trumpet Teal","hex":"#5a7d7a"},{"name":"Trumpeter","hex":"#907baa"},{"name":"Trunks Hair","hex":"#9b5fc0"},{"name":"Trusted Purple","hex":"#6600cc"},{"name":"Trustee","hex":"#527498"},{"name":"Trusty Tan","hex":"#b59f8f"},{"name":"Truth","hex":"#344989"},{"name":"Tsar","hex":"#8b7f7b"},{"name":"Tsarina","hex":"#d1b4c6"},{"name":"Tsunami","hex":"#869baf"},{"name":"Tsurubami Green","hex":"#9ba88d"},{"name":"Tǔ Hēi Black","hex":"#574d35"},{"name":"Tuatara","hex":"#454642"},{"name":"Tuberose","hex":"#fffaec"},{"name":"Tucson Teal","hex":"#00858b"},{"name":"Tudor Ice","hex":"#c1cecf"},{"name":"Tudor Tan","hex":"#b68960"},{"name":"Tuffet","hex":"#a59788"},{"name":"Tuft","hex":"#cbc2ad"},{"name":"Tuft Bush","hex":"#f9d3be"},{"name":"Tufted Leather","hex":"#b96c46"},{"name":"Tufts Blue","hex":"#417dc1"},{"name":"Tuğçe Silver","hex":"#ccddee"},{"name":"Tuileries Tint","hex":"#b89cbc"},{"name":"Tuk Tuk","hex":"#573b2a"},{"name":"Tulip","hex":"#ff878d"},{"name":"Tulip Petals","hex":"#fbf4da"},{"name":"Tulip Poplar Purple","hex":"#531938"},{"name":"Tulip Red","hex":"#b8516a"},{"name":"Tulip Soft Blue","hex":"#c3c4d6"},{"name":"Tulip Tree","hex":"#e3ac3d"},{"name":"Tulip White","hex":"#f1e5d1"},{"name":"Tulipan Violet","hex":"#966993"},{"name":"Tulipwood","hex":"#86586a"},{"name":"Tulle Grey","hex":"#8d9098"},{"name":"Tulle Soft Blue","hex":"#d9e7e5"},{"name":"Tulle White","hex":"#fbede5"},{"name":"Tumbleweed","hex":"#deaa88"},{"name":"Tumblin\' Tumbleweed","hex":"#cdbb9c"},{"name":"Tumbling Tumbleweed","hex":"#cebf9c"},{"name":"Tuna","hex":"#46494e"},{"name":"Tuna Sashimi","hex":"#cf6275"},{"name":"Tundora","hex":"#585452"},{"name":"Tundra","hex":"#d6d9d7"},{"name":"Tundra Frost","hex":"#e1e1db"},{"name":"Tungsten","hex":"#b5ac9f"},{"name":"Tunic Green","hex":"#00cc00"},{"name":"Tunisian Stone","hex":"#ffddb5"},{"name":"Tupelo Honey","hex":"#c0a04d"},{"name":"Tupelo Tree","hex":"#9c9152"},{"name":"Turbinado Sugar","hex":"#f9bb59"},{"name":"Turbo","hex":"#f5cc23"},{"name":"Turbulence","hex":"#555c63"},{"name":"Turbulent Sea","hex":"#536a79"},{"name":"Turf","hex":"#415b36"},{"name":"Turf Green","hex":"#2a8948"},{"name":"Turf Master","hex":"#009922"},{"name":"Turf War","hex":"#738050"},{"name":"Turkish Aqua","hex":"#006169"},{"name":"Turkish Bath","hex":"#bb937b"},{"name":"Turkish Blue","hex":"#007fae"},{"name":"Turkish Boy","hex":"#0e9ca5"},{"name":"Turkish Coffee","hex":"#483f39"},{"name":"Turkish Ginger","hex":"#f7f3bd"},{"name":"Turkish Jade","hex":"#2b888d"},{"name":"Turkish Rose","hex":"#a56e75"},{"name":"Turkish Sea","hex":"#194f90"},{"name":"Turkish Stone","hex":"#2f7a92"},{"name":"Turkish Teal","hex":"#72cac1"},{"name":"Turkish Tile","hex":"#007e9f"},{"name":"Turkish Tower","hex":"#d9d9d1"},{"name":"Turkish Turquoise","hex":"#77dde7"},{"name":"Turkscap","hex":"#f3d8be"},{"name":"Turmeric","hex":"#ae9041"},{"name":"Turmeric Brown","hex":"#c18116"},{"name":"Turmeric Red","hex":"#ca7a40"},{"name":"Turmeric Root","hex":"#feae0d"},{"name":"Turmeric Tea","hex":"#d88e2d"},{"name":"Turned Leaf","hex":"#8d7448"},{"name":"Turner\'s Light","hex":"#93bcbb"},{"name":"Turner\'s Yellow","hex":"#e6c26f"},{"name":"Turning Leaf","hex":"#ced9c3"},{"name":"Turning Oakleaf","hex":"#ede1a8"},{"name":"Turnip Boy","hex":"#efc6a1"},{"name":"Turnstone","hex":"#d3cfbf"},{"name":"Turquesa","hex":"#448899"},{"name":"Turquish","hex":"#01a192"},{"name":"Turquoise","hex":"#06c2ac"},{"name":"Turquoise Blue","hex":"#00ffef"},{"name":"Turquoise Chalk","hex":"#6fe7db"},{"name":"Turquoise Cyan","hex":"#0e7c61"},{"name":"Turquoise Fantasies","hex":"#6dafa7"},{"name":"Turquoise Green","hex":"#04f489"},{"name":"Turquoise Grey","hex":"#b4cecf"},{"name":"Turquoise Panic","hex":"#30d5c8"},{"name":"Turquoise Pearl","hex":"#89f5e3"},{"name":"Turquoise Sea","hex":"#6cdae7"},{"name":"Turquoise Surf","hex":"#00c5cd"},{"name":"Turquoise Topaz","hex":"#13bbaf"},{"name":"Turquoise Tortoise","hex":"#457b74"},{"name":"Turquoise Tower","hex":"#a8e3cc"},{"name":"Turquoise White","hex":"#cfe9dc"},{"name":"Turtle","hex":"#523f31"},{"name":"Turtle Bay","hex":"#84897f"},{"name":"Turtle Chalk","hex":"#ced8c1"},{"name":"Turtle Creek","hex":"#65926d"},{"name":"Turtle Dove","hex":"#e3e1cf"},{"name":"Turtle Green","hex":"#75b84f"},{"name":"Turtle Lake","hex":"#73b7a5"},{"name":"Turtle Moss","hex":"#939717"},{"name":"Turtle Shell","hex":"#897c64"},{"name":"Turtle Skin","hex":"#363e1d"},{"name":"Turtle Trail","hex":"#b6b5a0"},{"name":"Turtle Warrior","hex":"#35b76d"},{"name":"Turtledove","hex":"#d6cebb"},{"name":"Tuscan","hex":"#fbd5a6"},{"name":"Tuscan Bread","hex":"#e7d2ad"},{"name":"Tuscan Brown","hex":"#6f4c37"},{"name":"Tuscan Clay","hex":"#aa5e5a"},{"name":"Tuscan Herbs","hex":"#658362"},{"name":"Tuscan Image","hex":"#dc938c"},{"name":"Tuscan Mosaic","hex":"#a08d71"},{"name":"Tuscan Olive","hex":"#5d583e"},{"name":"Tuscan Red","hex":"#7c4848"},{"name":"Tuscan Russet","hex":"#723d3b"},{"name":"Tuscan Soil","hex":"#a67b5b"},{"name":"Tuscan Sun","hex":"#ffd84d"},{"name":"Tuscan Sunset","hex":"#bb7c3f"},{"name":"Tuscan Wall","hex":"#fcc492"},{"name":"Tuscana Blue","hex":"#008893"},{"name":"Tuscany","hex":"#b98c7b"},{"name":"Tuscany Hillside","hex":"#7e875f"},{"name":"Tusche Blue","hex":"#0082ad"},{"name":"Tusi Grey","hex":"#9996b3"},{"name":"Tusk","hex":"#e3e5b1"},{"name":"Tuskgor Fur","hex":"#883636"},{"name":"Tussie-Mussie","hex":"#edc5d7"},{"name":"Tussock","hex":"#bf914b"},{"name":"Tutti Frutti","hex":"#bc587b"},{"name":"Tutu","hex":"#f8e4e3"},{"name":"Tutuji Pink","hex":"#e95295"},{"name":"Tuxedo","hex":"#3f3c43"},{"name":"Tweed","hex":"#937b56"},{"name":"Tweety","hex":"#ffef00"},{"name":"Twenty Carat","hex":"#ffbe4c"},{"name":"Twig Basket","hex":"#77623a"},{"name":"Twilight","hex":"#4e518b"},{"name":"Twilight Beige","hex":"#c8bfb5"},{"name":"Twilight Blue","hex":"#0a437a"},{"name":"Twilight Blush","hex":"#b59a9c"},{"name":"Twilight Chimes","hex":"#3f5363"},{"name":"Twilight Dusk","hex":"#606079"},{"name":"Twilight Forest","hex":"#54574f"},{"name":"Twilight Grey","hex":"#d1d6d6"},{"name":"Twilight Lavender","hex":"#8a496b"},{"name":"Twilight Light","hex":"#dac0cd"},{"name":"Twilight Mauve","hex":"#977d7f"},{"name":"Twilight Meadow","hex":"#51a5a4"},{"name":"Twilight Pearl","hex":"#bfbcd2"},{"name":"Twilight Purple","hex":"#65648b"},{"name":"Twilight Stroll","hex":"#71898d"},{"name":"Twilight Taupe","hex":"#a79994"},{"name":"Twilight Twinkle","hex":"#7b85c6"},{"name":"Twilight Twist","hex":"#e5e6d7"},{"name":"Twilight Zone","hex":"#191916"},{"name":"Twill","hex":"#a3957c"},{"name":"Twin Blue","hex":"#bedbed"},{"name":"Twin Cities","hex":"#a4c7c8"},{"name":"Twinberry","hex":"#684344"},{"name":"Twine","hex":"#c19156"},{"name":"Twining Vine","hex":"#74a69b"},{"name":"Twinkle","hex":"#adc6d3"},{"name":"Twinkle Blue","hex":"#d0d7df"},{"name":"Twinkle Little Star","hex":"#fce79a"},{"name":"Twinkle Night","hex":"#636ca8"},{"name":"Twinkle Pink","hex":"#fbd8cc"},{"name":"Twinkle Toes","hex":"#e2d39b"},{"name":"Twinkle Twinkle","hex":"#fcf0c5"},{"name":"Twinkled Pink","hex":"#e9dbe4"},{"name":"Twinkling Lights","hex":"#fffac1"},{"name":"Twinkly Pinkily","hex":"#cf4796"},{"name":"Twist of Lime","hex":"#54662e"},{"name":"Twisted Blue","hex":"#76c4d1"},{"name":"Twisted Tail","hex":"#9a845e"},{"name":"Twisted Time","hex":"#7f6c6e"},{"name":"Twisted Vine","hex":"#655f50"},{"name":"Two Harbours","hex":"#bed3e1"},{"name":"Typewriter Ink","hex":"#4c5053"},{"name":"Typhus Corrosion","hex":"#463d2b"},{"name":"Tyrant Skull","hex":"#cdc586"},{"name":"Tyrian","hex":"#4e4d59"},{"name":"Tyrian Purple","hex":"#66023c"},{"name":"Tyrol","hex":"#b3cdbf"},{"name":"Tyrolite Blue-Green","hex":"#00a499"},{"name":"Tyson Taupe","hex":"#736458"},{"name":"Tzatziki Green","hex":"#ddeecc"},{"name":"UA Blue","hex":"#0033aa"},{"name":"UA Red","hex":"#d9004c"},{"name":"Ube","hex":"#8878c3"},{"name":"Über Umber","hex":"#7b5838"},{"name":"UCLA Blue","hex":"#536895"},{"name":"UCLA Gold","hex":"#ffb300"},{"name":"Ufo","hex":"#989fa3"},{"name":"UFO Defense Green","hex":"#88aa11"},{"name":"UFO Green","hex":"#3cd070"},{"name":"Uguisu Brown","hex":"#645530"},{"name":"Uguisu Green","hex":"#928c36"},{"name":"Ukon Saffron","hex":"#fabf14"},{"name":"Uldum Beige","hex":"#fcc680"},{"name":"Ulthuan Grey","hex":"#c7e0d9"},{"name":"Ultimate Grey","hex":"#a9a8a9"},{"name":"Ultimate Orange","hex":"#ff4200"},{"name":"Ultimate Pink","hex":"#ff55ff"},{"name":"Ultra Green","hex":"#7eba4d"},{"name":"Ultra Indigo","hex":"#4433ff"},{"name":"Ultra Mint","hex":"#a3efb8"},{"name":"Ultra Moss","hex":"#d1f358"},{"name":"Ultra Pink","hex":"#f06fff"},{"name":"Ultra Pure White","hex":"#f8f8f3"},{"name":"Ultra Red","hex":"#fc6c85"},{"name":"Ultra Violet","hex":"#7366bd"},{"name":"Ultra Violet Lentz","hex":"#aa22aa"},{"name":"Ultraberry","hex":"#770088"},{"name":"Ultramarine","hex":"#1805db"},{"name":"Ultramarine Blue","hex":"#657abb"},{"name":"Ultramarine Green","hex":"#007a64"},{"name":"Ultramarine Highlight","hex":"#2e328f"},{"name":"Ultramarine Shadow","hex":"#090045"},{"name":"Ultramarine Violet","hex":"#1d2a58"},{"name":"Ultramint","hex":"#b6ccb6"},{"name":"Ultraviolet Berl","hex":"#bb44cc"},{"name":"Ultraviolet Cryner","hex":"#bb44bb"},{"name":"Ultraviolet Nusp","hex":"#bb44aa"},{"name":"Ultraviolet Onsible","hex":"#bb44dd"},{"name":"Uluru Red","hex":"#921d0f"},{"name":"Ulva Lactuca Green","hex":"#90ee90"},{"name":"Umber","hex":"#b26400"},{"name":"Umber Brown","hex":"#613936"},{"name":"Umber Rust","hex":"#765138"},{"name":"Umber Shade Wash","hex":"#4e4d2f"},{"name":"Umber Style","hex":"#ece7dd"},{"name":"Umbra","hex":"#211e1f"},{"name":"Umbra Sand","hex":"#87706b"},{"name":"Umbral Umber","hex":"#520200"},{"name":"Umbrella Green","hex":"#a2af70"},{"name":"Umemurasaki Purple","hex":"#8f4155"},{"name":"Umenezumi Plum","hex":"#97645a"},{"name":"Umezome Pink","hex":"#fa9258"},{"name":"Unakite","hex":"#75a14f"},{"name":"Unbleached","hex":"#fbfaf5"},{"name":"Unbleached Calico","hex":"#f5d8bb"},{"name":"Unbleached Silk","hex":"#ffddca"},{"name":"Unburdened Pink","hex":"#fbe7e6"},{"name":"Uncertain Grey","hex":"#a9b0b1"},{"name":"Uncharted","hex":"#19565e"},{"name":"Under the Sea","hex":"#395d68"},{"name":"Underbrush","hex":"#be9e48"},{"name":"Undercool","hex":"#7fc3e1"},{"name":"Underground","hex":"#665a51"},{"name":"Underground Civilization","hex":"#524b4c"},{"name":"Underground Gardens","hex":"#87968b"},{"name":"Underground Stream","hex":"#120a65"},{"name":"Underhive Ash","hex":"#b2ac88"},{"name":"Underpass Shrine","hex":"#cc4422"},{"name":"Undersea","hex":"#90b1ae"},{"name":"Underseas","hex":"#7c8e87"},{"name":"Understated","hex":"#d4c9bb"},{"name":"Undertow","hex":"#779999"},{"name":"Underwater","hex":"#cfeee8"},{"name":"Underwater Falling","hex":"#0022bb"},{"name":"Underwater Fern","hex":"#06d078"},{"name":"Underwater Flare","hex":"#e78ea5"},{"name":"Underwater Moonlight","hex":"#4488aa"},{"name":"Underwater Realm","hex":"#243062"},{"name":"Underwater World","hex":"#657f7a"},{"name":"Underworld","hex":"#1e231c"},{"name":"Undine","hex":"#89c1ba"},{"name":"Unexplained","hex":"#69667c"},{"name":"Unfading Dusk","hex":"#e7d8de"},{"name":"Unfired Clay","hex":"#986960"},{"name":"Unforgettably Gold","hex":"#ae8245"},{"name":"Unfussy Beige","hex":"#d6c8c0"},{"name":"Ungor Beige","hex":"#d6a766"},{"name":"Unicorn Dust","hex":"#ff2f92"},{"name":"Unicorn Silver","hex":"#e8e8e8"},{"name":"Uniform","hex":"#a7b7ca"},{"name":"Uniform Brown","hex":"#6e5d3e"},{"name":"Uniform Green","hex":"#4c4623"},{"name":"Uniform Green Grey","hex":"#5f7b7e"},{"name":"Uniform Grey","hex":"#a8a8a8"},{"name":"Unimaginable","hex":"#8c7eb9"},{"name":"Uninhibited","hex":"#b5d1c7"},{"name":"Union Springs","hex":"#9c9680"},{"name":"Union Station","hex":"#c7c5ba"},{"name":"Unique Grey","hex":"#cbc9c9"},{"name":"United Nations Blue","hex":"#5b92e5"},{"name":"Unity","hex":"#264d8e"},{"name":"Universal Green","hex":"#006b38"},{"name":"Universal Khaki","hex":"#b8a992"},{"name":"University of California Gold","hex":"#b78727"},{"name":"University of Tennessee Orange","hex":"#f77f00"},{"name":"Unloaded Texture Purple","hex":"#c154c1"},{"name":"Unmarked Trail","hex":"#d2cab7"},{"name":"Unmatched Beauty","hex":"#b12d35"},{"name":"Unmellow Yellow","hex":"#fefe66"},{"name":"Unplugged","hex":"#4b4840"},{"name":"Unpredictable Hue","hex":"#7b746b"},{"name":"Unreal Teal","hex":"#5c6e70"},{"name":"Unripe Strawberry","hex":"#f78fa7"},{"name":"Untamed Orange","hex":"#de5730"},{"name":"Untamed Red","hex":"#dd0022"},{"name":"Unusual Grey","hex":"#a3a7a0"},{"name":"Unwind","hex":"#f2f8ed"},{"name":"UP Forest Green","hex":"#014431"},{"name":"Up in Smoke","hex":"#6e706d"},{"name":"UP Maroon","hex":"#7b1113"},{"name":"Up North","hex":"#6f9587"},{"name":"Upbeat","hex":"#f1d9a5"},{"name":"Uplifting Yellow","hex":"#eb9724"},{"name":"Upper Crust","hex":"#a3758b"},{"name":"Upper East Side","hex":"#8d6051"},{"name":"Uproar Red","hex":"#ee1100"},{"name":"Upscale","hex":"#a8adc2"},{"name":"Upsdell Red","hex":"#ae2029"},{"name":"Upsed Tomato","hex":"#b52923"},{"name":"Upstream Salmon","hex":"#f99a7a"},{"name":"Uptown Girl","hex":"#a791a8"},{"name":"Uptown Taupe","hex":"#f1e4d7"},{"name":"Upward","hex":"#bdc9d2"},{"name":"Urahayanagi Green","hex":"#bcb58c"},{"name":"Uran Mica","hex":"#93b778"},{"name":"Uranus","hex":"#ace5ee"},{"name":"Urban Bird","hex":"#ddd4c5"},{"name":"Urban Charm","hex":"#aea28c"},{"name":"Urban Chic","hex":"#424c4a"},{"name":"Urban Exploration","hex":"#89776e"},{"name":"Urban Garden","hex":"#7c7466"},{"name":"Urban Green","hex":"#005042"},{"name":"Urban Grey","hex":"#cacacc"},{"name":"Urban Jungle","hex":"#a4947e"},{"name":"Urban Legend","hex":"#67585f"},{"name":"Urban Mist","hex":"#d3dbd9"},{"name":"Urban Pigeon","hex":"#9dacb7"},{"name":"Urban Putty","hex":"#b0b1a9"},{"name":"Urban Raincoat","hex":"#bdcbca"},{"name":"Urban Safari","hex":"#978b6e"},{"name":"Urban Snowfall","hex":"#dbd8da"},{"name":"Urban Taupe","hex":"#c9bdb6"},{"name":"Urban Vibes","hex":"#8899aa"},{"name":"Urbane Bronze","hex":"#54504a"},{"name":"Urbanite","hex":"#4d5659"},{"name":"Uri Yellow","hex":"#ffd72e"},{"name":"Urnebes Beige","hex":"#ffecc2"},{"name":"Urobilin","hex":"#e1ad21"},{"name":"US Air Force Blue","hex":"#00308f"},{"name":"US Field Drab","hex":"#716140"},{"name":"USAFA Blue","hex":"#004f98"},{"name":"USC Cardinal","hex":"#990010"},{"name":"USC Gold","hex":"#ffcc00"},{"name":"Used Oil","hex":"#231712"},{"name":"Useful Beige","hex":"#cfcabd"},{"name":"Ushabti Bone","hex":"#bbbb7f"},{"name":"USMC Green","hex":"#373d31"},{"name":"Usu Koubai Blossom","hex":"#e597b2"},{"name":"Usu Pink","hex":"#a87ca0"},{"name":"Usuao Blue","hex":"#8c9c76"},{"name":"Usubeni Red","hex":"#f2666c"},{"name":"Usugaki Persimmon","hex":"#fca474"},{"name":"Usukō","hex":"#fea464"},{"name":"Usumoegi Green","hex":"#8db255"},{"name":"Utah Crimson","hex":"#d3003f"},{"name":"Utah Sky","hex":"#aed1e8"},{"name":"Utaupeia","hex":"#a58f7b"},{"name":"Utepils","hex":"#fafad2"},{"name":"Utterly Beige","hex":"#b5a597"},{"name":"UV Light","hex":"#0098c8"},{"name":"Va Va Bloom","hex":"#efd5cf"},{"name":"Va Va Voom","hex":"#e3b34c"},{"name":"Vacation Island","hex":"#d1d991"},{"name":"Vacherin Cheese","hex":"#fde882"},{"name":"Vagabond","hex":"#aa8877"},{"name":"Vaguely Mauve","hex":"#d1c5c4"},{"name":"Vaguely Violet","hex":"#dbe1ef"},{"name":"Valencia","hex":"#d4574e"},{"name":"Valentine","hex":"#a53a4e"},{"name":"Valentine Heart","hex":"#ba789e"},{"name":"Valentine Lava","hex":"#ba0728"},{"name":"Valentine Red","hex":"#9b233b"},{"name":"Valentine\'s Day","hex":"#a63864"},{"name":"Valentine\'s Kiss","hex":"#b63364"},{"name":"Valentino","hex":"#b64476"},{"name":"Valentino Nero","hex":"#382c38"},{"name":"Valerian","hex":"#9f7a93"},{"name":"Valerie","hex":"#fde6e7"},{"name":"Valhalla","hex":"#2a2b41"},{"name":"Valhallan Blizzard","hex":"#f2ede7"},{"name":"Valiant Poppy","hex":"#bc3c2c"},{"name":"Valiant Violet","hex":"#3e4371"},{"name":"Valkyrie","hex":"#eecc22"},{"name":"Vallarta Blue","hex":"#35709d"},{"name":"Valley Floor","hex":"#848d85"},{"name":"Valley Flower","hex":"#ffdd9d"},{"name":"Valley Hills","hex":"#848a83"},{"name":"Valley Mist","hex":"#c9d5cb"},{"name":"Valley of Fire","hex":"#ff8a4a"},{"name":"Valley of Glaciers","hex":"#2d7e96"},{"name":"Valley of Tears","hex":"#d1e1e4"},{"name":"Valley View","hex":"#b0c376"},{"name":"Valley Vineyards","hex":"#8a763d"},{"name":"Valleyview","hex":"#c2ccac"},{"name":"Valonia","hex":"#79c9d1"},{"name":"Valor","hex":"#a3bcdb"},{"name":"Vampire Bite","hex":"#c40233"},{"name":"Vampire Fangs","hex":"#cc2255"},{"name":"Vampire Fiction","hex":"#9b0f11"},{"name":"Vampire Hunter","hex":"#610507"},{"name":"Vampire Love Story","hex":"#dd0077"},{"name":"Vampire Red","hex":"#dd4132"},{"name":"Vampire State Building","hex":"#cc1100"},{"name":"Vampirella","hex":"#9b2848"},{"name":"Vampiric Bloodlust","hex":"#cc0066"},{"name":"Vampiric Council","hex":"#5c0c0c"},{"name":"Vampiric Shadow","hex":"#bfb6aa"},{"name":"Van Cleef","hex":"#523936"},{"name":"Van de Cane","hex":"#faf7eb"},{"name":"Van Dyke Brown","hex":"#664228"},{"name":"Van Gogh Blue","hex":"#abddf1"},{"name":"Van Gogh Green","hex":"#65ce95"},{"name":"Van Gogh Olives","hex":"#759465"},{"name":"Vanadyl Blue","hex":"#00a3e0"},{"name":"Vandermint","hex":"#abdee4"},{"name":"Vandyck Brown","hex":"#7b5349"},{"name":"Vanilla","hex":"#f3e5ab"},{"name":"Vanilla Bean Brown","hex":"#362c1d"},{"name":"Vanilla Blush","hex":"#fcede4"},{"name":"Vanilla Cream","hex":"#f8e3ab"},{"name":"Vanilla Custard","hex":"#f3e0be"},{"name":"Vanilla Delight","hex":"#f5e8d5"},{"name":"Vanilla Doe","hex":"#d1bea8"},{"name":"Vanilla Drop","hex":"#ffffeb"},{"name":"Vanilla Flower","hex":"#e9dfcf"},{"name":"Vanilla Frost","hex":"#fde9c5"},{"name":"Vanilla Ice","hex":"#fdf2d1"},{"name":"Vanilla Ice Cream","hex":"#ffe6b3"},{"name":"Vanilla Ice Smoke","hex":"#c9dae2"},{"name":"Vanilla Love","hex":"#e6e0cc"},{"name":"Vanilla Milkshake","hex":"#f1ece2"},{"name":"Vanilla Mocha","hex":"#ebdbc8"},{"name":"Vanilla Paste","hex":"#f3e7d3"},{"name":"Vanilla Powder","hex":"#faf3dd"},{"name":"Vanilla Pudding","hex":"#f7e26b"},{"name":"Vanilla Quake","hex":"#cbc8c2"},{"name":"Vanilla Seed","hex":"#ccb69b"},{"name":"Vanilla Shake","hex":"#fffbf0"},{"name":"Vanilla Strawberry","hex":"#ffe6e7"},{"name":"Vanilla Sugar","hex":"#f1e8dc"},{"name":"Vanilla Tan","hex":"#f1e9dd"},{"name":"Vanilla Wafer","hex":"#f3ead2"},{"name":"Vanilla White","hex":"#f6eee5"},{"name":"Vanillin","hex":"#f2e3ca"},{"name":"Vanishing","hex":"#331155"},{"name":"Vanishing Blue","hex":"#cfdfef"},{"name":"Vanishing Night","hex":"#990088"},{"name":"Vanishing Point","hex":"#ddeedd"},{"name":"Vanity","hex":"#5692b2"},{"name":"Vanity Pink","hex":"#e6ccdd"},{"name":"Vantablack","hex":"#000100"},{"name":"Vape Smoke","hex":"#e8e8d7"},{"name":"Vapor","hex":"#f0ffff"},{"name":"Vapor Blue","hex":"#bebdbd"},{"name":"Vapor Trail","hex":"#f5eedf"},{"name":"Vaporous Grey","hex":"#d8d6ce"},{"name":"Vaporwave","hex":"#ff66ee"},{"name":"Vaporwave Blue","hex":"#22ddff"},{"name":"Vaporwave Pool","hex":"#99eebb"},{"name":"Vaquero Boots","hex":"#855f43"},{"name":"Varden","hex":"#fdefd3"},{"name":"Variegated Frond","hex":"#747d5a"},{"name":"Varnished Ivory","hex":"#e6dccc"},{"name":"Vast","hex":"#c9bdb8"},{"name":"Vast Desert","hex":"#c2b197"},{"name":"Vast Escape","hex":"#d2c595"},{"name":"Vast Sky","hex":"#a9c9d7"},{"name":"Vega Violet","hex":"#aa55ff"},{"name":"Vegan","hex":"#22bb88"},{"name":"Vegan Green","hex":"#006c47"},{"name":"Vegan Mastermind","hex":"#22bb55"},{"name":"Vegan Villain","hex":"#aa9911"},{"name":"Vegas Gold","hex":"#c5b358"},{"name":"Vegeta Blue","hex":"#26538d"},{"name":"Vegetable Garden","hex":"#8b8c40"},{"name":"Vegetarian","hex":"#22aa00"},{"name":"Vegetarian Veteran","hex":"#78945a"},{"name":"Vegetarian Vulture","hex":"#cccc99"},{"name":"Vegetation","hex":"#5ccd97"},{"name":"Vehicle Body Grey","hex":"#4c433d"},{"name":"Veil of Dusk","hex":"#dad8c9"},{"name":"Veiled Chameleon","hex":"#80b690"},{"name":"Veiled Delight","hex":"#b2b0bd"},{"name":"Veiled Pink","hex":"#f9dfd7"},{"name":"Veiled Rose","hex":"#f7cdc8"},{"name":"Veiled Spotlight","hex":"#cfd5d7"},{"name":"Veiled Treasure","hex":"#f6edb6"},{"name":"Veiled Violet","hex":"#b19bb0"},{"name":"Veiling Waterfalls","hex":"#d4eaff"},{"name":"Velddrif","hex":"#a17d61"},{"name":"Vellum Parchment","hex":"#efe4d9"},{"name":"Velour","hex":"#baa7bf"},{"name":"Veltliner White","hex":"#d7d8c3"},{"name":"Velum Smoke","hex":"#d6ceb9"},{"name":"Velvet","hex":"#750851"},{"name":"Velvet Beige","hex":"#d0c5b1"},{"name":"Velvet Black","hex":"#241f20"},{"name":"Velvet Blush","hex":"#e3d5d8"},{"name":"Velvet Cake","hex":"#9d253d"},{"name":"Velvet Cape","hex":"#623941"},{"name":"Velvet Clover","hex":"#656d63"},{"name":"Velvet Cosmos","hex":"#441144"},{"name":"Velvet Crest","hex":"#9291bc"},{"name":"Velvet Cupcake","hex":"#aa0066"},{"name":"Velvet Curtain","hex":"#7e85a3"},{"name":"Velvet Dawn","hex":"#bdb0bc"},{"name":"Velvet Ears","hex":"#c5adb4"},{"name":"Velvet Evening","hex":"#33505e"},{"name":"Velvet Green","hex":"#2f5d50"},{"name":"Velvet Green Grey","hex":"#737866"},{"name":"Velvet Grey","hex":"#acaab3"},{"name":"Velvet Leaf","hex":"#96c193"},{"name":"Velvet Magic","hex":"#bb1155"},{"name":"Velvet Mauve","hex":"#692b57"},{"name":"Velvet Morning","hex":"#6c769b"},{"name":"Velvet Outbreak","hex":"#6b1b2a"},{"name":"Velvet Plum","hex":"#573a56"},{"name":"Velvet Robe","hex":"#939dcc"},{"name":"Velvet Rope","hex":"#36526a"},{"name":"Velvet Rose","hex":"#7e374c"},{"name":"Velvet Scarf","hex":"#e3dfec"},{"name":"Velvet Sky","hex":"#c5d3dd"},{"name":"Velvet Slipper","hex":"#846c76"},{"name":"Velvet Touch","hex":"#523544"},{"name":"Velvet Umber","hex":"#6b605a"},{"name":"Velvet Violet","hex":"#43354f"},{"name":"Velvet Wine","hex":"#9a435d"},{"name":"Velveteen Crush","hex":"#936064"},{"name":"Velvety Chestnut","hex":"#a2877d"},{"name":"Velvety Merlot","hex":"#794143"},{"name":"Venerable Verde","hex":"#abc88c"},{"name":"Venetian","hex":"#928083"},{"name":"Venetian Glass","hex":"#9cb08a"},{"name":"Venetian Gold","hex":"#b39142"},{"name":"Venetian Lace","hex":"#f7edda"},{"name":"Venetian Mask","hex":"#e7ceb6"},{"name":"Venetian Nights","hex":"#7755ff"},{"name":"Venetian Pearl","hex":"#d2ead5"},{"name":"Venetian Pink","hex":"#bb8e84"},{"name":"Venetian Red","hex":"#c80815"},{"name":"Venetian Rose","hex":"#efc6e1"},{"name":"Venetian Wall","hex":"#949486"},{"name":"Venetian Yellow","hex":"#f6e3a1"},{"name":"Venice Blue","hex":"#2c5778"},{"name":"Venice Escape","hex":"#76afb2"},{"name":"Venice Green","hex":"#6bffb3"},{"name":"Venice Square","hex":"#e6c591"},{"name":"Venom","hex":"#a9a52a"},{"name":"Venom Dart","hex":"#01ff01"},{"name":"Venom Wyrm","hex":"#607038"},{"name":"Venomous Green","hex":"#66ff22"},{"name":"Venous Blood Red","hex":"#3f3033"},{"name":"Ventilated","hex":"#cde6e8"},{"name":"Venture Violet","hex":"#7381b3"},{"name":"Venus","hex":"#eed053"},{"name":"Venus Deathtrap","hex":"#fed8b1"},{"name":"Venus Deva","hex":"#8f7974"},{"name":"Venus Flower","hex":"#9ea6cf"},{"name":"Venus Flytrap","hex":"#94b44c"},{"name":"Venus Mist","hex":"#5f606e"},{"name":"Venus Pink","hex":"#f0e5e5"},{"name":"Venus Slipper Orchid","hex":"#df73ff"},{"name":"Venus Teal","hex":"#85a4a2"},{"name":"Venus Violet","hex":"#7a6dc0"},{"name":"Venusian","hex":"#71384c"},{"name":"Veranda","hex":"#61a9a5"},{"name":"Veranda Blue","hex":"#66b6b0"},{"name":"Veranda Charm","hex":"#9eb1af"},{"name":"Veranda Gold","hex":"#af9968"},{"name":"Veranda Green","hex":"#8e977e"},{"name":"Veranda Hills","hex":"#ccb994"},{"name":"Veranda Iris","hex":"#9da4be"},{"name":"Verbena","hex":"#f1dfdf"},{"name":"Verdant","hex":"#847e35"},{"name":"Verdant Fields","hex":"#5ad33e"},{"name":"Verdant Forest","hex":"#28615d"},{"name":"Verdant Green","hex":"#167d60"},{"name":"Verdant Leaf","hex":"#817c4a"},{"name":"Verdant Views","hex":"#75794a"},{"name":"Verde","hex":"#7fb383"},{"name":"Verde Garrafa","hex":"#355e3b"},{"name":"Verde Marrón","hex":"#877459"},{"name":"Verde Pastel","hex":"#edf5e7"},{"name":"Verde Tortuga","hex":"#a7ad8d"},{"name":"Verde Tropa","hex":"#758000"},{"name":"Verdigreen","hex":"#81a595"},{"name":"Verdigris","hex":"#43b3ae"},{"name":"Verdigris Coloured","hex":"#62be77"},{"name":"Verdigris Foncé","hex":"#62603e"},{"name":"Verdigris Green","hex":"#61ac86"},{"name":"Verdigris Roundhead","hex":"#558367"},{"name":"Verditer","hex":"#00bbaa"},{"name":"Verditer Blue","hex":"#55aabb"},{"name":"Verdun Green","hex":"#48531a"},{"name":"Veri Berri","hex":"#937496"},{"name":"Verified Black","hex":"#232324"},{"name":"Veritably Verdant","hex":"#00844b"},{"name":"Vermeer Blue","hex":"#2b7caf"},{"name":"Vermicelles","hex":"#dabe82"},{"name":"Vermicelli","hex":"#d1b791"},{"name":"Vermilion","hex":"#f4320c"},{"name":"Vermilion Bird","hex":"#f24433"},{"name":"Vermilion Cinnabar","hex":"#e34244"},{"name":"Vermilion Green","hex":"#474230"},{"name":"Vermilion Orange","hex":"#f9603b"},{"name":"Vermilion Red","hex":"#b5493a"},{"name":"Vermilion Scarlet","hex":"#d1062b"},{"name":"Vermilion Seabass","hex":"#973a36"},{"name":"Vermin Brown","hex":"#8f7303"},{"name":"Verminal","hex":"#55cc11"},{"name":"Verminlord Hide","hex":"#a16954"},{"name":"Vermont Cream","hex":"#f8f5e8"},{"name":"Vermont Slate","hex":"#48535a"},{"name":"Verona Beach","hex":"#e9d3ba"},{"name":"Veronese Peach","hex":"#ecbfa8"},{"name":"Veronica","hex":"#a020ff"},{"name":"Veronica Purple","hex":"#7e3075"},{"name":"Vers de Terre","hex":"#acdfad"},{"name":"Versailles Rose","hex":"#c4b0ad"},{"name":"Versatile Taupe","hex":"#c1b6ab"},{"name":"Verse Green","hex":"#18880d"},{"name":"Vert Pierre","hex":"#4a615c"},{"name":"Vertigo Cherry","hex":"#990055"},{"name":"Verve","hex":"#fcedd8"},{"name":"Verve Violet","hex":"#944f80"},{"name":"Very Berry","hex":"#bb3381"},{"name":"Very Blue","hex":"#33365b"},{"name":"Very Coffee","hex":"#664411"},{"name":"Very Grape","hex":"#927288"},{"name":"Very Navy","hex":"#3a4859"},{"name":"Vespa Yellow","hex":"#f3d19f"},{"name":"Vesper","hex":"#0011cc"},{"name":"Vesper Violet","hex":"#99a0b2"},{"name":"Vessel","hex":"#cdc8bf"},{"name":"Vestige","hex":"#937899"},{"name":"Vesuvian Green","hex":"#879860"},{"name":"Vesuvian Violet","hex":"#a28a9f"},{"name":"Vesuvius","hex":"#a85533"},{"name":"Veteran\'s Day Blue","hex":"#2e58e8"},{"name":"Vetiver","hex":"#807d6f"},{"name":"Viaduct","hex":"#c1bbb0"},{"name":"Viameter","hex":"#d9d140"},{"name":"Vibrant","hex":"#ffd44d"},{"name":"Vibrant Amber","hex":"#d1902e"},{"name":"Vibrant Blue","hex":"#0339f8"},{"name":"Vibrant Green","hex":"#0add08"},{"name":"Vibrant Honey","hex":"#ffbd31"},{"name":"Vibrant Mint","hex":"#00ffe5"},{"name":"Vibrant Orange","hex":"#ff6216"},{"name":"Vibrant Orchid","hex":"#804b81"},{"name":"Vibrant Purple","hex":"#ad03de"},{"name":"Vibrant Red","hex":"#c24c6a"},{"name":"Vibrant Soft Blue","hex":"#88d6dc"},{"name":"Vibrant Velvet","hex":"#bb0088"},{"name":"Vibrant Vine","hex":"#4b373a"},{"name":"Vibrant Vision","hex":"#6c6068"},{"name":"Vibrant White","hex":"#eaedeb"},{"name":"Vibrant Yellow","hex":"#ffda29"},{"name":"VIC 20 Blue","hex":"#c7ffff"},{"name":"VIC 20 Creme","hex":"#ffffb2"},{"name":"VIC 20 Green","hex":"#94e089"},{"name":"VIC 20 Pink","hex":"#ea9ff6"},{"name":"VIC 20 Sky","hex":"#87d6dd"},{"name":"Vicarious Violet","hex":"#664e62"},{"name":"Vice City","hex":"#ee00dd"},{"name":"Vicious Violet","hex":"#8f509d"},{"name":"Victoria","hex":"#564985"},{"name":"Victoria Blue","hex":"#0853a7"},{"name":"Victoria Green","hex":"#006a4d"},{"name":"Victoria Peak","hex":"#007755"},{"name":"Victoria Red","hex":"#6a3c3a"},{"name":"Victorian","hex":"#988f97"},{"name":"Victorian Cottage","hex":"#d4c5ca"},{"name":"Victorian Crown","hex":"#c38b36"},{"name":"Victorian Garden","hex":"#558e4c"},{"name":"Victorian Gold","hex":"#a2783b"},{"name":"Victorian Greenhouse","hex":"#00b191"},{"name":"Victorian Iris","hex":"#6d657e"},{"name":"Victorian Lace","hex":"#efe1cd"},{"name":"Victorian Mauve","hex":"#b68b88"},{"name":"Victorian Peacock","hex":"#104a65"},{"name":"Victorian Pearl","hex":"#f1e3d8"},{"name":"Victorian Pewter","hex":"#828388"},{"name":"Victorian Plum","hex":"#8e6278"},{"name":"Victorian Rose","hex":"#966b6f"},{"name":"Victorian Rouge","hex":"#d28085"},{"name":"Victorian Valentine","hex":"#ae6aa1"},{"name":"Victorian Violet","hex":"#b079a7"},{"name":"Victoriana","hex":"#d6b2ad"},{"name":"Victory Blue","hex":"#3a405a"},{"name":"Victory Lake","hex":"#92abd8"},{"name":"Vida Loca","hex":"#549019"},{"name":"Vidalia","hex":"#a1ddd4"},{"name":"Vienna Dawn","hex":"#f7efef"},{"name":"Vienna Lace","hex":"#e9d9d4"},{"name":"Vienna Roast","hex":"#330022"},{"name":"Vienna Sausage","hex":"#fed1bd"},{"name":"Viennese","hex":"#8c8185"},{"name":"Viennese Blue","hex":"#4278af"},{"name":"Vietnamese Lantern","hex":"#eec172"},{"name":"Vigilant","hex":"#81796f"},{"name":"Vigorous Violet","hex":"#645681"},{"name":"Viking","hex":"#4db1c8"},{"name":"Viking Castle","hex":"#757266"},{"name":"Viking Diva","hex":"#cabae0"},{"name":"Vile Green","hex":"#8fcdb0"},{"name":"Villa White","hex":"#efeae1"},{"name":"Village Crier","hex":"#ab9769"},{"name":"Village Green","hex":"#7e867c"},{"name":"Village Square","hex":"#7b6f60"},{"name":"Villandry","hex":"#728f66"},{"name":"Vin Cuit","hex":"#b47463"},{"name":"Vin Rouge","hex":"#955264"},{"name":"Vinaceous","hex":"#f59994"},{"name":"Vinaceous Cinnamon","hex":"#f48b8b"},{"name":"Vinaceous Tawny","hex":"#c74300"},{"name":"Vinaigrette","hex":"#efdaae"},{"name":"Vinalhaven","hex":"#acb3ae"},{"name":"Vinca","hex":"#5778a7"},{"name":"Vinca & Vine","hex":"#45584c"},{"name":"Vincotto","hex":"#483743"},{"name":"Vindaloo","hex":"#ae7579"},{"name":"Vine","hex":"#338544"},{"name":"Vine Leaf","hex":"#4d5f4f"},{"name":"Vine Leaf Green","hex":"#6e5e2c"},{"name":"Vineyard","hex":"#819e84"},{"name":"Vineyard Autumn","hex":"#ee4455"},{"name":"Vineyard Green","hex":"#5f7355"},{"name":"Vineyard Wine","hex":"#684047"},{"name":"Vinho do Porto","hex":"#b31a38"},{"name":"Vining Ivy","hex":"#4b7378"},{"name":"Vino Tinto","hex":"#4c1c24"},{"name":"Vintage","hex":"#847592"},{"name":"Vintage Beige","hex":"#dfe1cc"},{"name":"Vintage Blue","hex":"#87b8b5"},{"name":"Vintage Charm","hex":"#c7b0a7"},{"name":"Vintage Copper","hex":"#9d5f46"},{"name":"Vintage Coral","hex":"#d68c76"},{"name":"Vintage Ephemera","hex":"#d8ceb9"},{"name":"Vintage Glass","hex":"#cbd8b9"},{"name":"Vintage Gold","hex":"#b79e78"},{"name":"Vintage Grape","hex":"#6f636d"},{"name":"Vintage Indigo","hex":"#505d74"},{"name":"Vintage Khaki","hex":"#958b80"},{"name":"Vintage Lace","hex":"#f1e7d2"},{"name":"Vintage Linen","hex":"#e3dcca"},{"name":"Vintage Mauve","hex":"#baafac"},{"name":"Vintage Merlot","hex":"#763d4b"},{"name":"Vintage Orange","hex":"#ffb05f"},{"name":"Vintage Plum","hex":"#675d62"},{"name":"Vintage Porcelain","hex":"#f2edec"},{"name":"Vintage Pottery","hex":"#a66c47"},{"name":"Vintage Red","hex":"#9e3641"},{"name":"Vintage Ribbon","hex":"#9097b4"},{"name":"Vintage Taupe","hex":"#cdbfb9"},{"name":"Vintage Tea Rose","hex":"#cbb0a8"},{"name":"Vintage Teal","hex":"#669699"},{"name":"Vintage Velvet","hex":"#485169"},{"name":"Vintage Vessel","hex":"#94b2a6"},{"name":"Vintage Vibe","hex":"#888f4f"},{"name":"Vintage Victorian","hex":"#e59dac"},{"name":"Vintage Violet","hex":"#634f62"},{"name":"Vintage White","hex":"#f4efe4"},{"name":"Vintage Wine","hex":"#65344e"},{"name":"Vintage Wood","hex":"#72491e"},{"name":"Vintner","hex":"#68546a"},{"name":"Viola","hex":"#966ebd"},{"name":"Viola Black","hex":"#2f2a41"},{"name":"Viola Grey","hex":"#8c6897"},{"name":"Viola Ice Grey","hex":"#c6c8d0"},{"name":"Viola Sororia","hex":"#b9a5bd"},{"name":"Violaceous","hex":"#bf8fc4"},{"name":"Violaceous Greti","hex":"#881188"},{"name":"Violent Violet","hex":"#7f00ff"},{"name":"Violet","hex":"#9a0eea"},{"name":"Violet Aura","hex":"#838ba4"},{"name":"Violet Beauty","hex":"#bab3cb"},{"name":"Violet Black","hex":"#49434a"},{"name":"Violet Blue","hex":"#510ac9"},{"name":"Violet Bouquet","hex":"#b9b1c8"},{"name":"Violet Breeze","hex":"#dcdce5"},{"name":"Violet Carmine","hex":"#531745"},{"name":"Violet Clues","hex":"#efecef"},{"name":"Violet Crush","hex":"#d8d3e6"},{"name":"Violet Dawn","hex":"#a89b9c"},{"name":"Violet Echo","hex":"#dfdee5"},{"name":"Violet Eclipse","hex":"#a387ac"},{"name":"Violet Eggplant","hex":"#991199"},{"name":"Violet Essence","hex":"#e6e5e6"},{"name":"Violet Evening","hex":"#65677a"},{"name":"Violet Extract","hex":"#dee2ec"},{"name":"Violet Fantasy","hex":"#ba97a9"},{"name":"Violet Femmes","hex":"#a66da1"},{"name":"Violet Fields","hex":"#b8a4c8"},{"name":"Violet Frog","hex":"#926eae"},{"name":"Violet Gems","hex":"#c4c0e9"},{"name":"Violet Glow","hex":"#4422ee"},{"name":"Violet Haze","hex":"#675b72"},{"name":"Violet Heaven","hex":"#cdb7fa"},{"name":"Violet Hickey","hex":"#330099"},{"name":"Violet Hush","hex":"#e5e2e7"},{"name":"Violet Ice","hex":"#c0a9ad"},{"name":"Violet Indigo","hex":"#482d67"},{"name":"Violet Ink","hex":"#9400d3"},{"name":"Violet Intense","hex":"#4d4456"},{"name":"Violet Kiss","hex":"#f0a0d1"},{"name":"Violet Magican","hex":"#64338b"},{"name":"Violet Majesty","hex":"#644982"},{"name":"Violet Mist","hex":"#daccde"},{"name":"Violet Mix","hex":"#aca8cd"},{"name":"Violet Orchid","hex":"#ca7988"},{"name":"Violet Persuasion","hex":"#927b97"},{"name":"Violet Pink","hex":"#fb5ffc"},{"name":"Violet Poison","hex":"#8601bf"},{"name":"Violet Posy","hex":"#60394d"},{"name":"Violet Powder","hex":"#c7ccd8"},{"name":"Violet Purple","hex":"#3a2f52"},{"name":"Violet Quartz","hex":"#8b4963"},{"name":"Violet Red","hex":"#a50055"},{"name":"Violet Scent Soft Blue","hex":"#bcc6df"},{"name":"Violet Shadow","hex":"#4d4860"},{"name":"Violet Storm","hex":"#5c619d"},{"name":"Violet Sweet Pea","hex":"#c7c5dc"},{"name":"Violet Tulip","hex":"#9e91c3"},{"name":"Violet Tulle","hex":"#ba86b5"},{"name":"Violet Vapor","hex":"#e5dae1"},{"name":"Violet Velvet","hex":"#b19cd9"},{"name":"Violet Verbena","hex":"#898ca3"},{"name":"Violet Vibes","hex":"#898098"},{"name":"Violet Vignette","hex":"#d8e0ea"},{"name":"Violet Vision","hex":"#b7bdd1"},{"name":"Violet Vista","hex":"#b09f9e"},{"name":"Violet Vixen","hex":"#883377"},{"name":"Violet Vogue","hex":"#e9e1e8"},{"name":"Violet Water","hex":"#d2d6e6"},{"name":"Violet Webcap","hex":"#833e82"},{"name":"Violet Whimsey","hex":"#dad6df"},{"name":"Violet Whimsy","hex":"#b48bb8"},{"name":"Violet White","hex":"#e2e3e9"},{"name":"Violet Wisp","hex":"#c8d4e4"},{"name":"Violeta Silvestre","hex":"#aca7cb"},{"name":"Violethargic","hex":"#5a226f"},{"name":"Violets Are Blue","hex":"#7487c6"},{"name":"Violetta","hex":"#ac6b98"},{"name":"Violettuce","hex":"#882055"},{"name":"Violin Brown","hex":"#674403"},{"name":"Viper Green","hex":"#008f3c"},{"name":"Virgin Olive Oil","hex":"#e2dcab"},{"name":"Virgin Peach","hex":"#ecbdb0"},{"name":"Virginia Blue","hex":"#b7c3d7"},{"name":"Virgo Green Goddess","hex":"#538f4e"},{"name":"Viric Green","hex":"#99cc00"},{"name":"Viridian","hex":"#1e9167"},{"name":"Viridian Green","hex":"#bcd7d4"},{"name":"Viridine Green","hex":"#c8e0ab"},{"name":"Viridis","hex":"#00846d"},{"name":"Virtual Boy","hex":"#fe0215"},{"name":"Virtual Forest","hex":"#8aa56e"},{"name":"Virtual Golf","hex":"#c1ee13"},{"name":"Virtual Pink","hex":"#cf184b"},{"name":"Virtual Taupe","hex":"#8a7a6a"},{"name":"Virtual Violet","hex":"#66537f"},{"name":"Virtuoso","hex":"#5d5558"},{"name":"Virtuous","hex":"#9f7ba9"},{"name":"Virtuous Violet","hex":"#b7b0bf"},{"name":"Vis Vis","hex":"#f9e496"},{"name":"Vision","hex":"#d2cce5"},{"name":"Vision of Light","hex":"#dfd3cb"},{"name":"Vision Quest","hex":"#9b94c2"},{"name":"Visiona Red","hex":"#83477d"},{"name":"Visionary","hex":"#f6e0a9"},{"name":"Vista","hex":"#cbacab"},{"name":"Vista Blue","hex":"#97d5b3"},{"name":"Vista White","hex":"#e3dfd9"},{"name":"Vistoris Lake","hex":"#5c2c45"},{"name":"Vital Green","hex":"#138859"},{"name":"Vital Yellow","hex":"#ede0c5"},{"name":"Vitality","hex":"#8f9b5b"},{"name":"Vitalize","hex":"#2aaa45"},{"name":"Vitamin C","hex":"#ff9900"},{"name":"Viva Gold","hex":"#e3ac72"},{"name":"Viva La Bleu","hex":"#97bee2"},{"name":"Viva Las Vegas","hex":"#b39953"},{"name":"Viva Magenta","hex":"#a0488c"},{"name":"Vivacious","hex":"#a7295f"},{"name":"Vivacious Pink","hex":"#dc89a8"},{"name":"Vivacious Violet","hex":"#804665"},{"name":"Vivaldi Red","hex":"#ef3939"},{"name":"Vivid Amber","hex":"#cc9900"},{"name":"Vivid Auburn","hex":"#922724"},{"name":"Vivid Blue","hex":"#152eff"},{"name":"Vivid Burgundy","hex":"#9f1d35"},{"name":"Vivid Cerise","hex":"#da1d81"},{"name":"Vivid Cerulean","hex":"#00aaee"},{"name":"Vivid Crimson","hex":"#cc0033"},{"name":"Vivid Fuchsia","hex":"#b13aad"},{"name":"Vivid Green","hex":"#2fef10"},{"name":"Vivid Imagination","hex":"#5c9f59"},{"name":"Vivid Lime Green","hex":"#a6d608"},{"name":"Vivid Malachite","hex":"#00cc33"},{"name":"Vivid Mulberry","hex":"#b80ce3"},{"name":"Vivid Orange","hex":"#ff5f00"},{"name":"Vivid Orange Peel","hex":"#ffa102"},{"name":"Vivid Orchid","hex":"#cc00ff"},{"name":"Vivid Purple","hex":"#9900fa"},{"name":"Vivid Raspberry","hex":"#ff006c"},{"name":"Vivid Red","hex":"#f70d1a"},{"name":"Vivid Red Tangelo","hex":"#df6124"},{"name":"Vivid Sky Blue","hex":"#00ccff"},{"name":"Vivid Tangelo","hex":"#f07427"},{"name":"Vivid Tangerine","hex":"#ff9980"},{"name":"Vivid Vermilion","hex":"#e56024"},{"name":"Vivid Viola","hex":"#a4407e"},{"name":"Vivid Violet","hex":"#9f00ff"},{"name":"Vivid Vision","hex":"#5e4b62"},{"name":"Vivid Yellow","hex":"#ffe302"},{"name":"Vixen","hex":"#573d37"},{"name":"Vizcaya","hex":"#7b9e98"},{"name":"Vizcaya Palm","hex":"#47644b"},{"name":"Vodka","hex":"#bfc0ee"},{"name":"Void","hex":"#050d25"},{"name":"Voila!","hex":"#af8ba8"},{"name":"Volcanic","hex":"#a55749"},{"name":"Volcanic Ash","hex":"#6f7678"},{"name":"Volcanic Blast","hex":"#e15835"},{"name":"Volcanic Brick","hex":"#72453a"},{"name":"Volcanic Glass","hex":"#615c60"},{"name":"Volcanic Island","hex":"#605244"},{"name":"Volcanic Rock","hex":"#6b6965"},{"name":"Volcanic Sand","hex":"#404048"},{"name":"Volcanic Stone Green","hex":"#45433b"},{"name":"Volcano","hex":"#4e2728"},{"name":"Voldemort","hex":"#2d135f"},{"name":"Volt","hex":"#ceff00"},{"name":"Voltage","hex":"#3b4956"},{"name":"Voluptuous Violet","hex":"#7711dd"},{"name":"Volute","hex":"#445a5e"},{"name":"Voodoo","hex":"#443240"},{"name":"Voracious White","hex":"#feeeed"},{"name":"Voxatron Purple","hex":"#83769c"},{"name":"Voyage","hex":"#719ca4"},{"name":"Voyager","hex":"#4d5062"},{"name":"Voysey Grey","hex":"#9a937f"},{"name":"Vulcan","hex":"#36383c"},{"name":"Vulcan Burgundy","hex":"#5f3e42"},{"name":"Vulcan Fire","hex":"#e6390d"},{"name":"Vulcan Mud","hex":"#897f79"},{"name":"Vulcanized","hex":"#424443"},{"name":"Wabi-Sabi","hex":"#c8c8b5"},{"name":"Waddles Pink","hex":"#eeaacc"},{"name":"Wafer","hex":"#d4bbb1"},{"name":"Waffle Cone","hex":"#e2c779"},{"name":"Wafting Grey","hex":"#cdbdba"},{"name":"Wageningen Green","hex":"#34b233"},{"name":"Wagon Wheel","hex":"#c2b79e"},{"name":"Wahoo","hex":"#272d4e"},{"name":"Waikawa Grey","hex":"#5b6e91"},{"name":"Waikiki","hex":"#218ba0"},{"name":"Wailing Woods","hex":"#004411"},{"name":"Waimea Blue","hex":"#4ca2d9"},{"name":"Wainscot Green","hex":"#9c9d85"},{"name":"Waiouru","hex":"#4c4e31"},{"name":"Waiporoporo Purple","hex":"#654bc9"},{"name":"Waiting","hex":"#9d9d9d"},{"name":"Wakame Green","hex":"#00656e"},{"name":"Wakatake Green","hex":"#6b9362"},{"name":"Wake Me Up","hex":"#f6d559"},{"name":"Wakefield","hex":"#295468"},{"name":"Walden Pond","hex":"#789bb6"},{"name":"Walk in the Park","hex":"#88bb11"},{"name":"Walk in the Woods","hex":"#3bb08f"},{"name":"Walk Me Home","hex":"#496568"},{"name":"Walker Lake","hex":"#3d87bb"},{"name":"Walkie Chalkie","hex":"#faf5fa"},{"name":"Walking Dead","hex":"#849b63"},{"name":"Walkway","hex":"#a3999c"},{"name":"Wall Green","hex":"#abae86"},{"name":"Wall Street","hex":"#656d73"},{"name":"Walled Garden","hex":"#11cc44"},{"name":"Walleye","hex":"#9b5953"},{"name":"Wallflower","hex":"#a0848a"},{"name":"Wallflower White","hex":"#e4e3e6"},{"name":"Wallis","hex":"#c6bdbf"},{"name":"Walls of Santorini","hex":"#e9edf1"},{"name":"Walnut","hex":"#773f1a"},{"name":"Walnut Brown","hex":"#4c0400"},{"name":"Walnut Cream","hex":"#f5d8b2"},{"name":"Walnut Grove","hex":"#5c5644"},{"name":"Walnut Hull","hex":"#5d5242"},{"name":"Walnut Milkies","hex":"#fff0cf"},{"name":"Walnut Oil","hex":"#eecb88"},{"name":"Walnut Shell","hex":"#aa8344"},{"name":"Walnut Shell Brown","hex":"#a68b6e"},{"name":"Walnut Wood","hex":"#774e37"},{"name":"Walrus","hex":"#999b9b"},{"name":"Wan Blue","hex":"#c8d9dd"},{"name":"Wan White","hex":"#e4e2dc"},{"name":"Wanderer","hex":"#5e5648"},{"name":"Wandering","hex":"#cdb573"},{"name":"Wandering River","hex":"#73a4c6"},{"name":"Wandering Road","hex":"#876d5e"},{"name":"Wandering Willow","hex":"#a6a897"},{"name":"Wanderlust","hex":"#426267"},{"name":"War God","hex":"#643530"},{"name":"War Paint Red","hex":"#dc571d"},{"name":"Warlock Red","hex":"#b50038"},{"name":"Warlord","hex":"#ba0033"},{"name":"Warm Air of Debonair","hex":"#654740"},{"name":"Warm and Toasty","hex":"#cbb68f"},{"name":"Warm Apricot","hex":"#ffb865"},{"name":"Warm Ash","hex":"#cfc9c7"},{"name":"Warm Asphalt","hex":"#9c9395"},{"name":"Warm Balaclavas Are Forever","hex":"#3b1f23"},{"name":"Warm Biscuits","hex":"#e3cdac"},{"name":"Warm Black","hex":"#004242"},{"name":"Warm Blue","hex":"#4b57db"},{"name":"Warm Bread","hex":"#f9e6d3"},{"name":"Warm Brown","hex":"#964e02"},{"name":"Warm Brownie","hex":"#604840"},{"name":"Warm Buttercream","hex":"#e6d5ba"},{"name":"Warm Butterscotch","hex":"#d0b082"},{"name":"Warm Cider","hex":"#bf6a52"},{"name":"Warm Cocoon","hex":"#f9d09c"},{"name":"Warm Cognac","hex":"#a88168"},{"name":"Warm Comfort","hex":"#b38a82"},{"name":"Warm Copper","hex":"#b97254"},{"name":"Warm Cream Spirit","hex":"#c36c2d"},{"name":"Warm Croissant","hex":"#e4ceb5"},{"name":"Warm Earth","hex":"#927558"},{"name":"Warm Embrace","hex":"#93817e"},{"name":"Warm Fuzzies","hex":"#f6e2ce"},{"name":"Warm Glow","hex":"#f1cf8a"},{"name":"Warm Granite","hex":"#a49e97"},{"name":"Warm Grey","hex":"#978a84"},{"name":"Warm Grey Flannel","hex":"#aca49a"},{"name":"Warm Haze","hex":"#736967"},{"name":"Warm Hearth","hex":"#be9677"},{"name":"Warm Leather","hex":"#c89f59"},{"name":"Warm Light","hex":"#fff9d8"},{"name":"Warm Mahogany","hex":"#6d4741"},{"name":"Warm Muffin","hex":"#e1be8b"},{"name":"Warm Neutral","hex":"#c1b19d"},{"name":"Warm Nutmeg","hex":"#8f6a50"},{"name":"Warm Oats","hex":"#d8cfba"},{"name":"Warm Olive","hex":"#c7b63c"},{"name":"Warm Onyx","hex":"#4c4845"},{"name":"Warm Operator\'s Overalls","hex":"#483838"},{"name":"Warm Pewter","hex":"#b4ada6"},{"name":"Warm Pink","hex":"#fb5581"},{"name":"Warm Port","hex":"#513938"},{"name":"Warm Pumpernickel","hex":"#5c4e44"},{"name":"Warm Purple","hex":"#952e8f"},{"name":"Warm Sand","hex":"#c5ae91"},{"name":"Warm Shell","hex":"#ddc9b1"},{"name":"Warm Spice","hex":"#987744"},{"name":"Warm Spring","hex":"#4286bc"},{"name":"Warm Stone","hex":"#a79a8a"},{"name":"Warm Sun","hex":"#faf6db"},{"name":"Warm Taupe","hex":"#ab917d"},{"name":"Warm Terra Cotta","hex":"#c1775e"},{"name":"Warm Turbulence","hex":"#f3f5dc"},{"name":"Warm Up","hex":"#9e6654"},{"name":"Warm Wassail","hex":"#a66e68"},{"name":"Warm Waterlogged Lab Coat","hex":"#a89a8c"},{"name":"Warm Waters","hex":"#7ebbc2"},{"name":"Warm Welcome","hex":"#ea9073"},{"name":"Warm Wetlands","hex":"#8d894a"},{"name":"Warm White","hex":"#efebd8"},{"name":"Warm Winter","hex":"#d4ede3"},{"name":"Warm Woolen","hex":"#d0b55a"},{"name":"Warmed Wine","hex":"#5c3839"},{"name":"Warming Heart","hex":"#d44b3b"},{"name":"Warming Peach","hex":"#e4b9a2"},{"name":"Warmstone","hex":"#e6d7cc"},{"name":"Warmth","hex":"#9f552d"},{"name":"Warmth of Teamwork","hex":"#803020"},{"name":"Warp & Weft","hex":"#e5d5c9"},{"name":"Warp Drive","hex":"#eaf2f1"},{"name":"Warpfiend Grey","hex":"#6b6a74"},{"name":"Warplock Bronze","hex":"#515131"},{"name":"Warplock Bronze Metal","hex":"#927d7b"},{"name":"Warpstone Glow","hex":"#168340"},{"name":"Warrant","hex":"#b8966e"},{"name":"Warren Tavern","hex":"#6b654e"},{"name":"Warrior","hex":"#7d685b"},{"name":"Warrior Queen","hex":"#a32d48"},{"name":"Wasabi","hex":"#afd77f"},{"name":"Wasabi Green","hex":"#a9ad74"},{"name":"Wasabi Nori","hex":"#333300"},{"name":"Wasabi Nuts","hex":"#849137"},{"name":"Wasabi Paste","hex":"#cae277"},{"name":"Wasabi Peanut","hex":"#b4c79c"},{"name":"Wasabi Powder","hex":"#bdb38f"},{"name":"Wasabi Zing","hex":"#d2cca0"},{"name":"Wash Me","hex":"#fafbfd"},{"name":"Washed Black","hex":"#1f262a"},{"name":"Washed Blue","hex":"#94d1df"},{"name":"Washed Canvas","hex":"#f3f0da"},{"name":"Washed Denim","hex":"#819dbe"},{"name":"Washed Dollar","hex":"#e1e3d7"},{"name":"Washed Green","hex":"#ccd1c8"},{"name":"Washed in Light","hex":"#fae8c8"},{"name":"Washed Khaki","hex":"#cac2af"},{"name":"Washed Olive","hex":"#c5c0a3"},{"name":"Washed Out Green","hex":"#bcf5a6"},{"name":"Washed Sage","hex":"#dedfcc"},{"name":"Washed-Out Crimson","hex":"#ffb3a7"},{"name":"Washing Powder Soft Blue","hex":"#c3d8e4"},{"name":"Washing Powder White","hex":"#c2dce3"},{"name":"Wassail","hex":"#dcb89d"},{"name":"Wasteland","hex":"#9c8855"},{"name":"Wasurenagusa Blue","hex":"#89c3eb"},{"name":"Watchet","hex":"#8fbabc"},{"name":"Water","hex":"#d4f1f9"},{"name":"Water Baby","hex":"#5ab5cb"},{"name":"Water Baptism","hex":"#cfdfdd"},{"name":"Water Blue","hex":"#0e87cc"},{"name":"Water Carrier","hex":"#4999a1"},{"name":"Water Chestnut","hex":"#ede4cf"},{"name":"Water Chi","hex":"#355873"},{"name":"Water Cooler","hex":"#75a7ad"},{"name":"Water Droplet","hex":"#e1e5dc"},{"name":"Water Fern","hex":"#75b790"},{"name":"Water Flow","hex":"#7ac6d9"},{"name":"Water Glitter","hex":"#76afb6"},{"name":"Water Green","hex":"#81b89a"},{"name":"Water Hyacinth","hex":"#a0a3d2"},{"name":"Water Iris","hex":"#e2e3eb"},{"name":"Water Leaf","hex":"#b6ecde"},{"name":"Water Lily","hex":"#dde3d5"},{"name":"Water Lily White","hex":"#e6d6c4"},{"name":"Water Mist","hex":"#c7d8e3"},{"name":"Water Music","hex":"#6fb0be"},{"name":"Water Nymph","hex":"#81d0df"},{"name":"Water Ouzel","hex":"#4f5156"},{"name":"Water Park","hex":"#54af9c"},{"name":"Water Persimmon","hex":"#b56c60"},{"name":"Water Raceway","hex":"#0083c8"},{"name":"Water Reed","hex":"#b0ab80"},{"name":"Water Scrub","hex":"#949381"},{"name":"Water Slide","hex":"#a2cdd2"},{"name":"Water Spirit","hex":"#65a5d5"},{"name":"Water Sports","hex":"#44bbcc"},{"name":"Water Sprout","hex":"#e5eecc"},{"name":"Water Squirt","hex":"#d8ebea"},{"name":"Water Surface","hex":"#a9bdb8"},{"name":"Water Tower","hex":"#958f88"},{"name":"Water Wash","hex":"#acc7e5"},{"name":"Water Welt","hex":"#3994af"},{"name":"Water Wheel","hex":"#a28566"},{"name":"Water Wings","hex":"#80d5cc"},{"name":"Water Wonder","hex":"#80d4d0"},{"name":"Watercolour Blue","hex":"#084d58"},{"name":"Watercolour Green","hex":"#96b47e"},{"name":"Watercolour White","hex":"#dbe5db"},{"name":"Watercourse","hex":"#5ccbd6"},{"name":"Watercress","hex":"#6e9377"},{"name":"Watercress Pesto","hex":"#c7c7a1"},{"name":"Watercress Spice","hex":"#748c69"},{"name":"Waterfall","hex":"#3ab0a2"},{"name":"Waterfall Mist","hex":"#e4eeea"},{"name":"Waterfront","hex":"#d4e4e5"},{"name":"Waterhen Back","hex":"#2f3f53"},{"name":"Waterline Blue","hex":"#436bad"},{"name":"Waterloo","hex":"#7b7c94"},{"name":"Watermark","hex":"#dee9df"},{"name":"Watermelon","hex":"#fd4659"},{"name":"Watermelon Candy","hex":"#fd5b78"},{"name":"Watermelon Crush","hex":"#bf6c6e"},{"name":"Watermelon Gelato","hex":"#c0686e"},{"name":"Watermelon Juice","hex":"#f05c85"},{"name":"Watermelon Milk","hex":"#dfcfca"},{"name":"Watermelon Mousse","hex":"#fbe0e8"},{"name":"Watermelon Pink","hex":"#c77690"},{"name":"Watermelon Punch","hex":"#e08880"},{"name":"Watermelon Red","hex":"#bf4147"},{"name":"Watermelon Slice","hex":"#e77b68"},{"name":"Watermelon Sugar","hex":"#e42b73"},{"name":"Watermelonade","hex":"#eb4652"},{"name":"Watermill Wood","hex":"#d3cccd"},{"name":"Waterpark","hex":"#c9e3e5"},{"name":"Waterscape","hex":"#dcece7"},{"name":"Watershed","hex":"#b0cec2"},{"name":"Waterslide","hex":"#d2f3eb"},{"name":"Waterspout","hex":"#a4f4f9"},{"name":"Watertown","hex":"#637fbb"},{"name":"Waterway","hex":"#7eb7bf"},{"name":"Waterwings","hex":"#afebde"},{"name":"Waterworld","hex":"#00718a"},{"name":"Watery","hex":"#aebdbb"},{"name":"Watery Sea","hex":"#88bfe7"},{"name":"Watson Lake","hex":"#74aeba"},{"name":"Wattle","hex":"#d6ca3d"},{"name":"Watusi","hex":"#f2cdbb"},{"name":"Wave","hex":"#a5ced5"},{"name":"Wave Crest","hex":"#dce9ea"},{"name":"Wave Jumper","hex":"#6c919f"},{"name":"Wave of Grain","hex":"#a0764a"},{"name":"Wave Splash","hex":"#cbe4e7"},{"name":"Wave Top","hex":"#afd9d3"},{"name":"Wavecrest","hex":"#d6e1e4"},{"name":"Wavelet","hex":"#7dc4cd"},{"name":"Waves of Grain","hex":"#c7aa7c"},{"name":"Waves Queen","hex":"#d2eaea"},{"name":"Wavy Glass","hex":"#aea266"},{"name":"Wavy Navy","hex":"#006597"},{"name":"Wax","hex":"#ddbb33"},{"name":"Wax Crayon Blue","hex":"#00a4a6"},{"name":"Wax Flower","hex":"#eeb39e"},{"name":"Wax Green","hex":"#d8db8b"},{"name":"Wax Poetic","hex":"#f1e6cc"},{"name":"Wax Sculpture","hex":"#e2d5bd"},{"name":"Wax Way","hex":"#d3b667"},{"name":"Wax Wing","hex":"#f6ecd6"},{"name":"Wax Yellow","hex":"#eae8a0"},{"name":"Waxen Moon","hex":"#b38241"},{"name":"Waxwing","hex":"#c0c2c0"},{"name":"Waxy Corn","hex":"#f8b500"},{"name":"Way Beyond the Blue","hex":"#1188cc"},{"name":"Waystone Green","hex":"#00c000"},{"name":"Wayward Willow","hex":"#d9dcd1"},{"name":"Wayward Wind","hex":"#dedfe2"},{"name":"Waywatcher Green","hex":"#99cc04"},{"name":"Waza Bear","hex":"#5e5a59"},{"name":"Wazdakka Red","hex":"#b21b00"},{"name":"We Peep","hex":"#fdd7d8"},{"name":"Weak Blue","hex":"#cfe2ef"},{"name":"Weak Green","hex":"#e1f2df"},{"name":"Weak Mauve","hex":"#eadee4"},{"name":"Weak Mint","hex":"#e0f0e5"},{"name":"Weak Orange","hex":"#faede3"},{"name":"Weak Pink","hex":"#ecdee5"},{"name":"Weak Yellow","hex":"#f2f6db"},{"name":"Weapon Bronze","hex":"#b47b27"},{"name":"Weather Board","hex":"#9f947d"},{"name":"Weathered Bamboo","hex":"#593a27"},{"name":"Weathered Blue","hex":"#d2e2f2"},{"name":"Weathered Brown","hex":"#59504c"},{"name":"Weathered Coral","hex":"#ead0a9"},{"name":"Weathered Fossil","hex":"#988a72"},{"name":"Weathered Hide","hex":"#d5c6c2"},{"name":"Weathered Leather","hex":"#90614a"},{"name":"Weathered Mint","hex":"#e4f5e1"},{"name":"Weathered Moss","hex":"#babbb3"},{"name":"Weathered Pebble","hex":"#7b9093"},{"name":"Weathered Pink","hex":"#eadfe8"},{"name":"Weathered Plastic","hex":"#f9f4d9"},{"name":"Weathered Saddle","hex":"#b5745c"},{"name":"Weathered Sandstone","hex":"#dfc0a6"},{"name":"Weathered Shingle","hex":"#937f68"},{"name":"Weathered Stone","hex":"#c4c5c6"},{"name":"Weathered White","hex":"#e6e3d9"},{"name":"Weathered Wicker","hex":"#97774d"},{"name":"Weathered Wood","hex":"#b19c86"},{"name":"Weatherhead","hex":"#bdae95"},{"name":"Weathervane","hex":"#2c201a"},{"name":"Weaver\'s Spool","hex":"#bfb18a"},{"name":"Weaver\'s Tool","hex":"#9d7f62"},{"name":"Webcap Brown","hex":"#8f684b"},{"name":"Wedded Bliss","hex":"#edeadc"},{"name":"Wedding","hex":"#ede6e9"},{"name":"Wedding Cake","hex":"#eee2c9"},{"name":"Wedding Cake White","hex":"#e7e8e1"},{"name":"Wedding Dress","hex":"#fefee7"},{"name":"Wedding Flowers","hex":"#bcb6cb"},{"name":"Wedding in White","hex":"#fffee5"},{"name":"Wedding Mint","hex":"#b5c1ac"},{"name":"Wedding Pink","hex":"#f6dfd8"},{"name":"Wedge of Lime","hex":"#e1eca5"},{"name":"Wedgewood","hex":"#4c6b88"},{"name":"Weekend Gardener","hex":"#9fe4aa"},{"name":"Weekend Retreat","hex":"#e9c2ad"},{"name":"Weeping Fig","hex":"#5d8727"},{"name":"Weeping Willow","hex":"#b3b17b"},{"name":"Weeping Wisteria","hex":"#d7ddec"},{"name":"Wèi Lán Azure","hex":"#5a06ef"},{"name":"Weimaraner","hex":"#9c8d7d"},{"name":"Weird Green","hex":"#3ae57f"},{"name":"Weissbier","hex":"#b3833b"},{"name":"Weisswurst White","hex":"#e4e1d6"},{"name":"Welcome Home","hex":"#c09c6a"},{"name":"Welcome Walkway","hex":"#d4c6a7"},{"name":"Welcome White","hex":"#f3e3ca"},{"name":"Welcoming Wasp","hex":"#eeaa00"},{"name":"Welded Iron","hex":"#6f6f6d"},{"name":"Weldon Blue","hex":"#7c98ab"},{"name":"Well Blue","hex":"#00888b"},{"name":"Well Read","hex":"#8e3537"},{"name":"Well Water","hex":"#63adb9"},{"name":"Well-Bred Brown","hex":"#564537"},{"name":"Wellington","hex":"#4f6364"},{"name":"Wells Grey","hex":"#b9b5a4"},{"name":"Welsh Onion","hex":"#22bb66"},{"name":"Wenge","hex":"#645452"},{"name":"Wenge Black","hex":"#3e2a2c"},{"name":"Wentworth","hex":"#345362"},{"name":"Werewolf Fur","hex":"#7e6152"},{"name":"West Coast","hex":"#5c512f"},{"name":"West Side","hex":"#e5823a"},{"name":"West Winds","hex":"#586d77"},{"name":"Westar","hex":"#d4cfc5"},{"name":"Westcar Papyrus","hex":"#a49d70"},{"name":"Westchester Grey","hex":"#797978"},{"name":"Western Brown","hex":"#5d3b31"},{"name":"Western Clay","hex":"#8b6a65"},{"name":"Western Pink","hex":"#ba816e"},{"name":"Western Pursuit","hex":"#8d5e41"},{"name":"Western Red","hex":"#9b6959"},{"name":"Western Reserve","hex":"#8d876d"},{"name":"Western Ridge","hex":"#b28b80"},{"name":"Western Sandstone","hex":"#beaa99"},{"name":"Western Sky","hex":"#fadca7"},{"name":"Western Sunrise","hex":"#daa36f"},{"name":"Western Wear","hex":"#cdbb8d"},{"name":"Westfall Yellow","hex":"#fcd450"},{"name":"Westhaven","hex":"#2a4442"},{"name":"Westhighland White","hex":"#f3eee3"},{"name":"Westminster","hex":"#9c7c5b"},{"name":"Wet Adobe","hex":"#a3623b"},{"name":"Wet Aloeswood","hex":"#5a6457"},{"name":"Wet Ash","hex":"#b2beb5"},{"name":"Wet Asphalt","hex":"#989cab"},{"name":"Wet Cement","hex":"#89877f"},{"name":"Wet Clay","hex":"#a49690"},{"name":"Wet Concrete","hex":"#353838"},{"name":"Wet Coral","hex":"#d1584c"},{"name":"Wet Crow\'s Wing","hex":"#000b00"},{"name":"Wet Latex","hex":"#001144"},{"name":"Wet Leaf","hex":"#b9a023"},{"name":"Wet Pavement","hex":"#9e9f97"},{"name":"Wet Pottery Clay","hex":"#e0816f"},{"name":"Wet River Rock","hex":"#897870"},{"name":"Wet Sand","hex":"#ae8f60"},{"name":"Wet Sandstone","hex":"#786d5f"},{"name":"Wet Suit","hex":"#50493c"},{"name":"Wet Taupe","hex":"#907e6c"},{"name":"Wet Weather","hex":"#929090"},{"name":"Wethers Field","hex":"#7d949e"},{"name":"Wethersfield Moss","hex":"#859488"},{"name":"Wetland Stone","hex":"#a49f80"},{"name":"Wetlands","hex":"#71736a"},{"name":"Wetlands Swamp","hex":"#372418"},{"name":"Wewak","hex":"#f1919a"},{"name":"Whale","hex":"#7c8181"},{"name":"Whale Bone","hex":"#e5e7e5"},{"name":"Whale Grey","hex":"#59676b"},{"name":"Whale Shark","hex":"#607c8e"},{"name":"Whale Skin","hex":"#505a92"},{"name":"Whale Tail","hex":"#86878c"},{"name":"Whale Watching","hex":"#a5a495"},{"name":"Whale\'s Mouth","hex":"#c7d3d5"},{"name":"Whale\'s Tale","hex":"#115a82"},{"name":"Whaling Waters","hex":"#2e7176"},{"name":"Wharf View","hex":"#65737e"},{"name":"What Inheritance?","hex":"#e8d7bc"},{"name":"What We Do in the Shadows","hex":"#441122"},{"name":"What\'s Left","hex":"#fff4e8"},{"name":"Wheat","hex":"#fbdd7e"},{"name":"Wheat Beer","hex":"#bf923b"},{"name":"Wheat Bread","hex":"#dfbb7e"},{"name":"Wheat Flour White","hex":"#ddd6ca"},{"name":"Wheat Grass","hex":"#c7c088"},{"name":"Wheat Penny","hex":"#976b53"},{"name":"Wheat Seed","hex":"#e3d1c8"},{"name":"Wheat Sheaf","hex":"#dfd4c4"},{"name":"Wheat Tortilla","hex":"#a49a79"},{"name":"Wheatacre","hex":"#ad935b"},{"name":"Wheatberry","hex":"#c8865e"},{"name":"Wheaten White","hex":"#fbebbb"},{"name":"Wheatfield","hex":"#dfd7bd"},{"name":"Wheatmeal","hex":"#9e8451"},{"name":"Wheel of Dharma","hex":"#ffcd00"},{"name":"When Blue Met Red","hex":"#584165"},{"name":"When Red Met Blue","hex":"#564375"},{"name":"Where Buffalo Roam","hex":"#c19851"},{"name":"Where There Is Smoke","hex":"#c7ccce"},{"name":"Whero Red","hex":"#dd262b"},{"name":"Whetstone","hex":"#d8d6c5"},{"name":"Whetstone Brown","hex":"#9f6f55"},{"name":"Whimsical Blue","hex":"#00ebff"},{"name":"Whimsical White","hex":"#ece4e2"},{"name":"Whimsy","hex":"#ed9987"},{"name":"Whimsy Blue","hex":"#b0dced"},{"name":"Whipcord","hex":"#a09176"},{"name":"Whiplash","hex":"#c74547"},{"name":"Whipped Apricot","hex":"#ffd299"},{"name":"Whipped Citron","hex":"#f0edd2"},{"name":"Whipped Coconut Cream","hex":"#edece7"},{"name":"Whipped Cream","hex":"#f2f0e7"},{"name":"Whipped Mint","hex":"#c7ddd6"},{"name":"Whipped Peach","hex":"#faccad"},{"name":"Whipped Plum","hex":"#d1c0dc"},{"name":"Whipped Strawberry","hex":"#c9565a"},{"name":"Whipped Violet","hex":"#a1a8d5"},{"name":"Whipped White","hex":"#f2eee0"},{"name":"Whippet","hex":"#cec1b5"},{"name":"Whipping Cream","hex":"#faf5e7"},{"name":"Whirligig","hex":"#e6cdca"},{"name":"Whirligig Geyser","hex":"#dfd4c0"},{"name":"Whirlpool","hex":"#a5d8cd"},{"name":"Whirlpool Green","hex":"#a7d0c5"},{"name":"Whirlwind","hex":"#e2d5d3"},{"name":"Whiskers","hex":"#f6f1e2"},{"name":"Whiskey","hex":"#d29062"},{"name":"Whiskey and Wine","hex":"#49463f"},{"name":"Whiskey Barrel","hex":"#85705f"},{"name":"Whiskey Sour","hex":"#d4915d"},{"name":"Whisky","hex":"#c2877b"},{"name":"Whisky Barrel","hex":"#96745b"},{"name":"Whisky Cola","hex":"#772233"},{"name":"Whisky Sour","hex":"#eeaa33"},{"name":"Whisper","hex":"#efe6e6"},{"name":"Whisper Blue","hex":"#e5e8f2"},{"name":"Whisper Green","hex":"#dce2d1"},{"name":"Whisper Grey","hex":"#e9e5da"},{"name":"Whisper of Grass","hex":"#cbede5"},{"name":"Whisper of Plum","hex":"#d4afda"},{"name":"Whisper of Rose","hex":"#cda2ac"},{"name":"Whisper of Smoke","hex":"#cbcecf"},{"name":"Whisper of White","hex":"#eadbca"},{"name":"Whisper Pink","hex":"#d4c5b4"},{"name":"Whisper Ridge","hex":"#c9c3b5"},{"name":"Whisper White","hex":"#eae2d3"},{"name":"Whisper Yellow","hex":"#ffe5b9"},{"name":"Whispered Secret","hex":"#3f4855"},{"name":"Whispering Blue","hex":"#c9dcdc"},{"name":"Whispering Grasslands","hex":"#ac9d64"},{"name":"Whispering Oaks","hex":"#536151"},{"name":"Whispering Peach","hex":"#fedcc3"},{"name":"Whispering Pine","hex":"#c8cab5"},{"name":"Whispering Rain","hex":"#ececda"},{"name":"Whispering Smoke","hex":"#d8d8d4"},{"name":"Whispering Waterfall","hex":"#e3e6db"},{"name":"Whispering Willow","hex":"#919c81"},{"name":"Whispering Winds","hex":"#b7c3bf"},{"name":"Whispery Breeze","hex":"#d6e9e6"},{"name":"Whistler Rose","hex":"#c49e8f"},{"name":"White","hex":"#ffffff"},{"name":"White Acorn","hex":"#d7a98c"},{"name":"White Alyssum","hex":"#efebe7"},{"name":"White as Heaven","hex":"#fefefe"},{"name":"White Asparagus","hex":"#eceabe"},{"name":"White Basics","hex":"#e4dfd0"},{"name":"White Bass","hex":"#e8efec"},{"name":"White Beach","hex":"#f5efe5"},{"name":"White Bean Hummus","hex":"#e8d0b2"},{"name":"White Beet","hex":"#ebdfdd"},{"name":"White Blaze","hex":"#e3e7e1"},{"name":"White Blossom","hex":"#f4ecdb"},{"name":"White Blue","hex":"#cdd6db"},{"name":"White Blush","hex":"#fbecd8"},{"name":"White Box","hex":"#bfd0cb"},{"name":"White Bud","hex":"#e3e0e8"},{"name":"White Bullet","hex":"#dfdfda"},{"name":"White Cabbage","hex":"#b0b49b"},{"name":"White Canvas","hex":"#faece1"},{"name":"White Castle","hex":"#dbd5d1"},{"name":"White Cedar","hex":"#f5dec2"},{"name":"White Chalk","hex":"#f6f4f1"},{"name":"White Cherry","hex":"#e7dbdd"},{"name":"White Chocolate","hex":"#f0e3c7"},{"name":"White Christmas","hex":"#f4e8e8"},{"name":"White City","hex":"#d6d0cc"},{"name":"White Clay","hex":"#e8e1d3"},{"name":"White Cliffs","hex":"#e8e3c9"},{"name":"White Coffee","hex":"#e6e0d4"},{"name":"White Convolvulus","hex":"#f4f2f4"},{"name":"White Corn","hex":"#f0d498"},{"name":"White Crest","hex":"#f9f8ef"},{"name":"White Currant","hex":"#f9ebc5"},{"name":"White Desert","hex":"#fdfaf1"},{"name":"White Dogwood","hex":"#efeae6"},{"name":"White Down","hex":"#f5eede"},{"name":"White Duck","hex":"#cecaba"},{"name":"White Edgar","hex":"#ededed"},{"name":"White Elephant","hex":"#dedee5"},{"name":"White Elf","hex":"#f7c380"},{"name":"White Fence","hex":"#f2e9d3"},{"name":"White Fever","hex":"#fbf4e8"},{"name":"White Flag","hex":"#c8c2c0"},{"name":"White Flour","hex":"#f5ede0"},{"name":"White Frost","hex":"#dee6ec"},{"name":"White Fur","hex":"#f1efe7"},{"name":"White Gauze","hex":"#c9c2bd"},{"name":"White Geranium","hex":"#f1f1e1"},{"name":"White Glaze","hex":"#ddeeee"},{"name":"White Gloss","hex":"#ffeeee"},{"name":"White Glove","hex":"#f0efed"},{"name":"White Granite","hex":"#c8d1c4"},{"name":"White Grape","hex":"#bbcc99"},{"name":"White Grapefruit","hex":"#fcf0de"},{"name":"White Green","hex":"#d6e9ca"},{"name":"White Hamburg Grapes","hex":"#e2e6d7"},{"name":"White Heat","hex":"#fdf9ef"},{"name":"White Heron","hex":"#e7e1d7"},{"name":"White Hot Chocolate","hex":"#ead8bb"},{"name":"White Hyacinth","hex":"#f3e5d1"},{"name":"White Hydrangea","hex":"#f9f6dd"},{"name":"White Ice","hex":"#d7eee4"},{"name":"White Iris","hex":"#dfe2e7"},{"name":"White Jade","hex":"#d0d6a8"},{"name":"White Jasmine","hex":"#f7f4df"},{"name":"White Kitten","hex":"#dfdfdb"},{"name":"White Lake","hex":"#e2e7e7"},{"name":"White Lavender","hex":"#e1e2eb"},{"name":"White Lie","hex":"#dededc"},{"name":"White Lightning","hex":"#f9f3db"},{"name":"White Lilac","hex":"#e7e5e8"},{"name":"White Lily","hex":"#faf0db"},{"name":"White Linen","hex":"#eee7dd"},{"name":"White Luxe","hex":"#e2dcd3"},{"name":"White Luxury","hex":"#f7f0e5"},{"name":"White Meadow","hex":"#f2e6df"},{"name":"White Mecca","hex":"#ecf3e1"},{"name":"White Metal","hex":"#d1d1cf"},{"name":"White Mink","hex":"#efeee9"},{"name":"White Mint","hex":"#e0e7da"},{"name":"White Mocha","hex":"#e7dccc"},{"name":"White Moderne","hex":"#ebeae2"},{"name":"White Mountain","hex":"#f6eddb"},{"name":"White Mouse","hex":"#b9a193"},{"name":"White Nectar","hex":"#f8f6d8"},{"name":"White Oak","hex":"#ce9f6f"},{"name":"White Opal","hex":"#e7e2dd"},{"name":"White Owl","hex":"#f5f3f5"},{"name":"White Peach","hex":"#f9e6da"},{"name":"White Pearl","hex":"#ede1d1"},{"name":"White Pepper","hex":"#ae9e86"},{"name":"White Picket Fence","hex":"#f0efeb"},{"name":"White Pointer","hex":"#dad6cc"},{"name":"White Porcelain","hex":"#f8fbf8"},{"name":"White Primer","hex":"#c3bdab"},{"name":"White Pudding","hex":"#f6e8df"},{"name":"White Rabbit","hex":"#f8eee7"},{"name":"White Radish","hex":"#e2e8cf"},{"name":"White Raisin","hex":"#e5c28b"},{"name":"White Rock","hex":"#d4cfb4"},{"name":"White Russian","hex":"#f0e0dc"},{"name":"White Sage","hex":"#d2d4c3"},{"name":"White Sail","hex":"#ebebe7"},{"name":"White Sand","hex":"#f5ebd8"},{"name":"White Sapphire","hex":"#e4eeeb"},{"name":"White Scar","hex":"#8c9fa1"},{"name":"White Sea","hex":"#d7e5ea"},{"name":"White Sesame","hex":"#e4dbce"},{"name":"White Shadow","hex":"#d1d3e0"},{"name":"White Shoulders","hex":"#f1f0ec"},{"name":"White Silence","hex":"#ebe6d8"},{"name":"White Smoke","hex":"#f5f5f5"},{"name":"White Solid","hex":"#f4f5fa"},{"name":"White Spruce","hex":"#9fbdad"},{"name":"White Sulfur","hex":"#f1faea"},{"name":"White Swan","hex":"#e4d7c5"},{"name":"White Tiger","hex":"#c5b8a8"},{"name":"White Truffle","hex":"#efdbcd"},{"name":"White Ultramarine","hex":"#83ccd2"},{"name":"White Veil","hex":"#f7f1e3"},{"name":"White Vienna","hex":"#c5dcb3"},{"name":"White Warm Wool","hex":"#efe6d1"},{"name":"White Whale","hex":"#edeeef"},{"name":"White Willow","hex":"#ecf4dd"},{"name":"White Wisp","hex":"#dedbce"},{"name":"White Woodruff","hex":"#ded8d2"},{"name":"White Wool","hex":"#f2efde"},{"name":"White Zin","hex":"#f8eee3"},{"name":"White-Red","hex":"#f3e8ea"},{"name":"Whitecap Foam","hex":"#dee3de"},{"name":"Whitecap Grey","hex":"#dbd0bc"},{"name":"Whitecap Snow","hex":"#fffdfd"},{"name":"Whiten\'t","hex":"#050d02"},{"name":"Whitened Sage","hex":"#dee0d2"},{"name":"Whiteout","hex":"#fbfbfb"},{"name":"Whitest White","hex":"#f8f9f5"},{"name":"Whitetail","hex":"#f4eee5"},{"name":"Whitewash","hex":"#fefffc"},{"name":"Whitewash Oak","hex":"#cac9c0"},{"name":"Whitewashed Fence","hex":"#faf2e3"},{"name":"Whitewater Bay","hex":"#bac4ad"},{"name":"Whitney Oaks","hex":"#b2a188"},{"name":"Who-Dun-It","hex":"#8b7181"},{"name":"Whole Nine Yards","hex":"#03c03c"},{"name":"Whole Wheat","hex":"#a48b73"},{"name":"Wholemeal Cookie","hex":"#aaa662"},{"name":"Whomp Grey","hex":"#bec1cf"},{"name":"Wicked Green","hex":"#9bca47"},{"name":"Wicker Basket","hex":"#847567"},{"name":"Wickerware","hex":"#fce4af"},{"name":"Wickerwork","hex":"#c19e80"},{"name":"Wickford Bay","hex":"#4f6c8f"},{"name":"Wide Sky","hex":"#416faf"},{"name":"Widowmaker","hex":"#99aaff"},{"name":"Wiener Dog","hex":"#874e3c"},{"name":"Wiener Schnitzel","hex":"#ee9900"},{"name":"Wild Apple","hex":"#fef9d7"},{"name":"Wild Aster","hex":"#a53783"},{"name":"Wild Axolotl","hex":"#63775a"},{"name":"Wild Bamboo","hex":"#eac37e"},{"name":"Wild Beet Leaf","hex":"#6b8372"},{"name":"Wild Berry","hex":"#7e3a3c"},{"name":"Wild Bill Brown","hex":"#795745"},{"name":"Wild Blue Yonder","hex":"#7a89b8"},{"name":"Wild Boar","hex":"#553322"},{"name":"Wild Boysenberry","hex":"#5a4747"},{"name":"Wild Brown","hex":"#47241a"},{"name":"Wild Caribbean Green","hex":"#1cd3a2"},{"name":"Wild Cattail","hex":"#916d5d"},{"name":"Wild Chestnut","hex":"#bc5d58"},{"name":"Wild Chocolate","hex":"#665134"},{"name":"Wild Clary","hex":"#93a3c1"},{"name":"Wild Cranberry","hex":"#6e3c42"},{"name":"Wild Currant","hex":"#7c3239"},{"name":"Wild Dove","hex":"#8b8c89"},{"name":"Wild Elderberry","hex":"#545989"},{"name":"Wild Forest","hex":"#38914a"},{"name":"Wild Geranium","hex":"#986a79"},{"name":"Wild Ginger","hex":"#825059"},{"name":"Wild Ginseng","hex":"#80805d"},{"name":"Wild Grapes","hex":"#5e496c"},{"name":"Wild Grass","hex":"#998643"},{"name":"Wild Hemp","hex":"#9d7b74"},{"name":"Wild Honey","hex":"#eecc00"},{"name":"Wild Horse","hex":"#634a40"},{"name":"Wild Horses","hex":"#8d6747"},{"name":"Wild Iris","hex":"#2f2f4a"},{"name":"Wild Jungle","hex":"#6f7142"},{"name":"Wild Lavender","hex":"#a47fa3"},{"name":"Wild Lilac","hex":"#beb8cd"},{"name":"Wild Lime","hex":"#c4cd4f"},{"name":"Wild Manzanita","hex":"#684944"},{"name":"Wild Maple","hex":"#ffe2c7"},{"name":"Wild Mulberry","hex":"#a96388"},{"name":"Wild Mushroom","hex":"#84704b"},{"name":"Wild Mustang","hex":"#695649"},{"name":"Wild Nude","hex":"#beae8a"},{"name":"Wild Oats","hex":"#ecdbc3"},{"name":"Wild Olive","hex":"#9c8042"},{"name":"Wild Orchid","hex":"#d979a2"},{"name":"Wild Orchid Blue","hex":"#b4b6da"},{"name":"Wild Pansy","hex":"#6373b4"},{"name":"Wild Party","hex":"#b97a77"},{"name":"Wild Phlox","hex":"#9ea5c3"},{"name":"Wild Pigeon","hex":"#767c6b"},{"name":"Wild Plum","hex":"#83455d"},{"name":"Wild Poppy","hex":"#b85b57"},{"name":"Wild Porcini","hex":"#d6c0aa"},{"name":"Wild Primrose","hex":"#ebdd99"},{"name":"Wild Raisin","hex":"#614746"},{"name":"Wild Rice","hex":"#d5bfb4"},{"name":"Wild Rider Red","hex":"#dc143c"},{"name":"Wild River","hex":"#447382"},{"name":"Wild Rose","hex":"#cb7d96"},{"name":"Wild Rye","hex":"#b5a38c"},{"name":"Wild Sage","hex":"#7e877d"},{"name":"Wild Sand","hex":"#e7e4de"},{"name":"Wild Seaweed","hex":"#8a6f45"},{"name":"Wild Stallion","hex":"#7c5644"},{"name":"Wild Strawberry","hex":"#ff3399"},{"name":"Wild Thing","hex":"#654243"},{"name":"Wild Thistle","hex":"#9e9fb6"},{"name":"Wild Thyme","hex":"#7e9c6f"},{"name":"Wild Truffle","hex":"#463f3c"},{"name":"Wild Violet","hex":"#63209b"},{"name":"Wild Watermelon","hex":"#fc6d84"},{"name":"Wild West","hex":"#7e5c52"},{"name":"Wild Wheat","hex":"#e0e1d1"},{"name":"Wild Wilderness","hex":"#91857c"},{"name":"Wild Willow","hex":"#beca60"},{"name":"Wild Wisteria","hex":"#686b93"},{"name":"Wildcat Grey","hex":"#f5eec0"},{"name":"Wilderness","hex":"#8f886c"},{"name":"Wilderness Grey","hex":"#c2baa8"},{"name":"Wildfire","hex":"#ff8833"},{"name":"Wildflower","hex":"#927d9b"},{"name":"Wildflower Bouquet","hex":"#ffb3b1"},{"name":"Wildflower Honey","hex":"#c69c5d"},{"name":"Wildflower Prairie","hex":"#cccfe2"},{"name":"Wildness Mint","hex":"#5d9865"},{"name":"Wildwood","hex":"#cdb99b"},{"name":"Wilhelminian Pink","hex":"#aa83a4"},{"name":"Will","hex":"#179fa6"},{"name":"Will O the Wisp","hex":"#d7d8dd"},{"name":"William","hex":"#53736f"},{"name":"Williams Pear Yellow","hex":"#ddc765"},{"name":"Willow","hex":"#8c7a48"},{"name":"Willow Blue","hex":"#293648"},{"name":"Willow Bough","hex":"#59754d"},{"name":"Willow Brook","hex":"#dfe6cf"},{"name":"Willow Dyed","hex":"#93b881"},{"name":"Willow Green","hex":"#c3cabf"},{"name":"Willow Grey","hex":"#817b69"},{"name":"Willow Grove","hex":"#69755c"},{"name":"Willow Hedge","hex":"#84c299"},{"name":"Willow Herb","hex":"#e6dab6"},{"name":"Willow Leaf","hex":"#a1a46d"},{"name":"Willow Sooty Bamboo","hex":"#5b6356"},{"name":"Willow Springs","hex":"#e7e6e0"},{"name":"Willow Tree","hex":"#9e8f66"},{"name":"Willow Tree Mouse","hex":"#c8d5bb"},{"name":"Willow Wind","hex":"#d5dca9"},{"name":"Willow Wood","hex":"#58504d"},{"name":"Willow-Flower Yellow","hex":"#f0d29d"},{"name":"Willowbrook Manor","hex":"#929d81"},{"name":"Willowherb","hex":"#914681"},{"name":"Willowleaf","hex":"#85877b"},{"name":"Willowside","hex":"#f3f2e8"},{"name":"Willpower Orange","hex":"#fd5800"},{"name":"Wilmington","hex":"#886144"},{"name":"Wilmington Tan","hex":"#bd9872"},{"name":"Wilted Brown","hex":"#ab4c3d"},{"name":"Wilted Leaf","hex":"#eedac9"},{"name":"Wimbledon","hex":"#626d5b"},{"name":"Wind Blown","hex":"#dde3e7"},{"name":"Wind Blue","hex":"#b1c9df"},{"name":"Wind Cave","hex":"#686c7b"},{"name":"Wind Chill","hex":"#eff3f0"},{"name":"Wind Chime","hex":"#dfe0e2"},{"name":"Wind Chimes","hex":"#cac5c2"},{"name":"Wind Force","hex":"#d5e2ee"},{"name":"Wind Fresh White","hex":"#d0d8cf"},{"name":"Wind of Change","hex":"#c8deea"},{"name":"Wind Rose","hex":"#e8babd"},{"name":"Wind Speed","hex":"#bfd6d9"},{"name":"Wind Star","hex":"#6875b7"},{"name":"Wind Tunnel","hex":"#c7dfe6"},{"name":"Wind Weaver","hex":"#c5d1d8"},{"name":"Windchill","hex":"#d5d8d7"},{"name":"Windfall","hex":"#84a7ce"},{"name":"Windflower","hex":"#bc9ca2"},{"name":"Windfresh White","hex":"#ded8cf"},{"name":"Windgate Hill","hex":"#5b584c"},{"name":"Windham Cream","hex":"#f5e6c9"},{"name":"Winding Path","hex":"#c6bba2"},{"name":"Windjammer","hex":"#62a5df"},{"name":"Windmill","hex":"#f5ece7"},{"name":"Windmill Park","hex":"#a79b83"},{"name":"Windmill Wings","hex":"#f0f1ec"},{"name":"Window Box","hex":"#bcafbb"},{"name":"Window Grey","hex":"#989ea1"},{"name":"Window Pane","hex":"#e4ecdf"},{"name":"Windows 95 Desktop","hex":"#018281"},{"name":"Windows Blue","hex":"#3778bf"},{"name":"Windrift Beige","hex":"#cebcae"},{"name":"Windrock","hex":"#5e6c62"},{"name":"Windrush","hex":"#dbd3c6"},{"name":"Winds Breath","hex":"#e0e1da"},{"name":"Windsong","hex":"#f4e4af"},{"name":"Windsor","hex":"#462c77"},{"name":"Windsor Brown","hex":"#a75502"},{"name":"Windsor Greige","hex":"#c4b49c"},{"name":"Windsor Grey","hex":"#626066"},{"name":"Windsor Haze","hex":"#a697a7"},{"name":"Windsor Moss","hex":"#545c4a"},{"name":"Windsor Purple","hex":"#c9afd0"},{"name":"Windsor Tan","hex":"#cabba1"},{"name":"Windsor Toffee","hex":"#ccb490"},{"name":"Windsor Way","hex":"#9fc9e4"},{"name":"Windsor Wine","hex":"#5f2e3d"},{"name":"Windstorm","hex":"#6d98c4"},{"name":"Windsurf","hex":"#91aab8"},{"name":"Windsurf Blue","hex":"#718bae"},{"name":"Windsurfer","hex":"#d7e2de"},{"name":"Windsurfing","hex":"#3a7099"},{"name":"Windswept","hex":"#d1f1f5"},{"name":"Windswept Beach","hex":"#e3e4e5"},{"name":"Windswept Canyon","hex":"#dba480"},{"name":"Windswept Leaves","hex":"#b7926b"},{"name":"Windwood Spring","hex":"#c2e5e0"},{"name":"Windy","hex":"#bdd1d2"},{"name":"Windy Blue","hex":"#aabac6"},{"name":"Windy City","hex":"#88a3c2"},{"name":"Windy Day","hex":"#8cb0cb"},{"name":"Windy Meadow","hex":"#b0a676"},{"name":"Windy Pine","hex":"#3d604a"},{"name":"Windy Seas","hex":"#667f8b"},{"name":"Windy Sky","hex":"#e8ebe7"},{"name":"Wine","hex":"#80013f"},{"name":"Wine & Roses","hex":"#a33540"},{"name":"Wine Barrel","hex":"#aa5522"},{"name":"Wine Bottle","hex":"#d3d6c4"},{"name":"Wine Bottle Green","hex":"#254636"},{"name":"Wine Brown","hex":"#5f3e3e"},{"name":"Wine Cellar","hex":"#70403d"},{"name":"Wine Cork","hex":"#866d4c"},{"name":"Wine Country","hex":"#602234"},{"name":"Wine Crush","hex":"#96837d"},{"name":"Wine Dregs","hex":"#673145"},{"name":"Wine Frost","hex":"#e5d8e1"},{"name":"Wine Goblet","hex":"#643b46"},{"name":"Wine Grape","hex":"#941751"},{"name":"Wine Gummy Red","hex":"#67334c"},{"name":"Wine Leaf","hex":"#355e4b"},{"name":"Wine Not","hex":"#864c58"},{"name":"Wine Red","hex":"#7b0323"},{"name":"Wine Stain","hex":"#69444f"},{"name":"Wine Stroll","hex":"#8f7191"},{"name":"Wine Tasting","hex":"#492a34"},{"name":"Wine Tour","hex":"#653b66"},{"name":"Wine Yellow","hex":"#d7c485"},{"name":"Wineberry","hex":"#663366"},{"name":"Wineshade","hex":"#433748"},{"name":"Wing Commander","hex":"#0065ac"},{"name":"Wing Man","hex":"#5a6868"},{"name":"Winged Victory","hex":"#ebe4e2"},{"name":"Wingsuit Wind","hex":"#bad5d4"},{"name":"Wink","hex":"#7792af"},{"name":"Wink Pink","hex":"#ede3e7"},{"name":"Winner\'s Circle","hex":"#365771"},{"name":"Winning Red","hex":"#894144"},{"name":"Winning Ticket","hex":"#636653"},{"name":"Winsome Beige","hex":"#e0cfc2"},{"name":"Winsome Grey","hex":"#e7e9e4"},{"name":"Winsome Hue","hex":"#a7d8e1"},{"name":"Winsome Orchid","hex":"#ccacc1"},{"name":"Winsome Rose","hex":"#c28ba1"},{"name":"Winter Amethyst","hex":"#b0a6c2"},{"name":"Winter Balsam","hex":"#314747"},{"name":"Winter Blizzard","hex":"#b8c8d3"},{"name":"Winter Bloom","hex":"#582d48"},{"name":"Winter Breath","hex":"#deeced"},{"name":"Winter Chill","hex":"#8eced8"},{"name":"Winter Chime","hex":"#83c7df"},{"name":"Winter Coat","hex":"#45494c"},{"name":"Winter Cocoa","hex":"#baaaa7"},{"name":"Winter Could Grey","hex":"#6e7a7c"},{"name":"Winter Day","hex":"#e3e7e9"},{"name":"Winter Doldrums","hex":"#f5f1ea"},{"name":"Winter Dusk","hex":"#b8b8cb"},{"name":"Winter Duvet","hex":"#ffffe0"},{"name":"Winter Escape","hex":"#b4e5ec"},{"name":"Winter Evening","hex":"#476476"},{"name":"Winter Feather","hex":"#bcaf9e"},{"name":"Winter Fresh","hex":"#d6eedd"},{"name":"Winter Frost","hex":"#e4decd"},{"name":"Winter Garden","hex":"#c4d2d0"},{"name":"Winter Glaze","hex":"#eaebe0"},{"name":"Winter Green","hex":"#48907b"},{"name":"Winter Harbor","hex":"#5e737d"},{"name":"Winter Haven","hex":"#e1e6eb"},{"name":"Winter Haze","hex":"#cec9c1"},{"name":"Winter Hazel","hex":"#d0c383"},{"name":"Winter Hedge","hex":"#798772"},{"name":"Winter Ice","hex":"#dbdfe9"},{"name":"Winter in Paris","hex":"#6e878b"},{"name":"Winter Lake","hex":"#698b9c"},{"name":"Winter Lakes","hex":"#5c97cf"},{"name":"Winter Lite","hex":"#efe0c9"},{"name":"Winter Meadow","hex":"#b7fffa"},{"name":"Winter Mist","hex":"#e7fbec"},{"name":"Winter Mood","hex":"#d1c295"},{"name":"Winter Morn","hex":"#d9d9d6"},{"name":"Winter Morning","hex":"#fdebd8"},{"name":"Winter Morning Mist","hex":"#a7b3b5"},{"name":"Winter Moss","hex":"#676449"},{"name":"Winter Nap","hex":"#a99f97"},{"name":"Winter Oak","hex":"#63594b"},{"name":"Winter Oasis","hex":"#f2faed"},{"name":"Winter Orchid","hex":"#e7e3e7"},{"name":"Winter Palace","hex":"#41638a"},{"name":"Winter Park","hex":"#95928d"},{"name":"Winter Pea Green","hex":"#8e9549"},{"name":"Winter Peach","hex":"#ebd9d0"},{"name":"Winter Pear","hex":"#b0b487"},{"name":"Winter Pear Beige","hex":"#c7a55f"},{"name":"Winter Poinsettia","hex":"#ae3c3d"},{"name":"Winter Rye","hex":"#aaa99d"},{"name":"Winter Sage","hex":"#aa9d80"},{"name":"Winter Savanna","hex":"#dac7ba"},{"name":"Winter Scene","hex":"#becedb"},{"name":"Winter Sea","hex":"#303e55"},{"name":"Winter Shadow","hex":"#4f6b79"},{"name":"Winter Shamrock","hex":"#e3efdd"},{"name":"Winter Sky","hex":"#a9c0cb"},{"name":"Winter Solstice","hex":"#49545c"},{"name":"Winter Squash","hex":"#acb99f"},{"name":"Winter Storm","hex":"#4b7079"},{"name":"Winter Sunrise","hex":"#e8dadd"},{"name":"Winter Sunset","hex":"#ca6636"},{"name":"Winter Surf","hex":"#7fb9ae"},{"name":"Winter Time","hex":"#4090a2"},{"name":"Winter Twig","hex":"#877c6d"},{"name":"Winter Veil","hex":"#e0e7e0"},{"name":"Winter Walk","hex":"#d8d5cc"},{"name":"Winter Waves","hex":"#21424d"},{"name":"Winter Way","hex":"#3e474c"},{"name":"Winter Wedding","hex":"#f1e4dc"},{"name":"Winter Wheat","hex":"#dcbe97"},{"name":"Winter White","hex":"#f5ecd2"},{"name":"Winter Willow Green","hex":"#c1d8ac"},{"name":"Winter Wizard","hex":"#a0e6ff"},{"name":"Winter\'s Breath","hex":"#d4dddd"},{"name":"Winter\'s Day","hex":"#def7fe"},{"name":"Wintergreen","hex":"#20f986"},{"name":"Wintergreen Dream","hex":"#56887d"},{"name":"Wintergreen Mint","hex":"#c6e5ca"},{"name":"Wintergreen Shadow","hex":"#4f9e81"},{"name":"Wintermint","hex":"#94d2bf"},{"name":"Winterscape","hex":"#bdd4de"},{"name":"Winterspring Lilac","hex":"#b5afff"},{"name":"Wintertime Mauve","hex":"#786daa"},{"name":"Wintessa","hex":"#8ba494"},{"name":"Winthrop Peach","hex":"#fde6d6"},{"name":"Wintry Sky","hex":"#a7afac"},{"name":"Wiped Out","hex":"#8b7180"},{"name":"Wipeout","hex":"#3e8094"},{"name":"Wire Wool","hex":"#676662"},{"name":"Wisdom","hex":"#e2e3d8"},{"name":"Wise Owl","hex":"#cdbba5"},{"name":"Wish","hex":"#b6bcdf"},{"name":"Wish Upon a Star","hex":"#447f8a"},{"name":"Wishard","hex":"#53786a"},{"name":"Wishful Blue","hex":"#d8dde6"},{"name":"Wishful Green","hex":"#c8e2cc"},{"name":"Wishful Thinking","hex":"#fcdadf"},{"name":"Wishful White","hex":"#f4f1e8"},{"name":"Wishing Star","hex":"#604f5a"},{"name":"Wishing Troll","hex":"#9a834b"},{"name":"Wishing Well","hex":"#d0d1c1"},{"name":"Wishy-Washy Beige","hex":"#ebdedb"},{"name":"Wishy-Washy Blue","hex":"#c6e0e1"},{"name":"Wishy-Washy Brown","hex":"#d1c2c2"},{"name":"Wishy-Washy Green","hex":"#dfeae1"},{"name":"Wishy-Washy Lichen","hex":"#deede4"},{"name":"Wishy-Washy Lilies","hex":"#f5dfe7"},{"name":"Wishy-Washy Lime","hex":"#eef5db"},{"name":"Wishy-Washy Mauve","hex":"#eddde4"},{"name":"Wishy-Washy Mint","hex":"#dde2d9"},{"name":"Wishy-Washy Pink","hex":"#f0dee7"},{"name":"Wishy-Washy Red","hex":"#e1dadd"},{"name":"Wishy-Washy Yellow","hex":"#e9e9d5"},{"name":"Wisley Pink","hex":"#f2a599"},{"name":"Wisp","hex":"#a9badd"},{"name":"Wisp Green","hex":"#c2dcb4"},{"name":"Wisp of Mauve","hex":"#d9c7be"},{"name":"Wisp of Smoke","hex":"#e5e7e9"},{"name":"Wisp Pink","hex":"#f9e8e2"},{"name":"Wispy Mauve","hex":"#c6aeaa"},{"name":"Wispy Mint","hex":"#bcc7a4"},{"name":"Wispy Pink","hex":"#f3ebea"},{"name":"Wispy White","hex":"#ffc196"},{"name":"Wisteria","hex":"#a87dc2"},{"name":"Wisteria Blue","hex":"#84a2d4"},{"name":"Wisteria Fragrance","hex":"#bbbcde"},{"name":"Wisteria Light Soft Blue","hex":"#a6a8c5"},{"name":"Wisteria Powder","hex":"#e6c8ff"},{"name":"Wisteria Purple","hex":"#875f9a"},{"name":"Wisteria Trellis","hex":"#b2adbf"},{"name":"Wisteria Yellow","hex":"#f7c114"},{"name":"Wisteria-Wise","hex":"#b2a7cc"},{"name":"Wistful","hex":"#a29ecd"},{"name":"Wistful Beige","hex":"#eaddd7"},{"name":"Wistful Longing","hex":"#e33928"},{"name":"Wistful Mauve","hex":"#966f77"},{"name":"Wistman\'s Wood","hex":"#aa9966"},{"name":"Witch Brew","hex":"#888738"},{"name":"Witch Hazel","hex":"#fbf073"},{"name":"Witch Hazel Leaf","hex":"#8e8976"},{"name":"Witch Soup","hex":"#692746"},{"name":"Witch Wart","hex":"#113300"},{"name":"Witch Wood","hex":"#7c4a33"},{"name":"Witch\'s Cottage","hex":"#4c3d29"},{"name":"Witchcraft","hex":"#474c50"},{"name":"Witches Cauldron","hex":"#35343f"},{"name":"Witching","hex":"#4f4552"},{"name":"With A Twist","hex":"#d1d1bb"},{"name":"With the Grain","hex":"#bca380"},{"name":"Withered Rose","hex":"#a26766"},{"name":"Witness","hex":"#90c0c9"},{"name":"Witty Green","hex":"#b1d99d"},{"name":"Wizard","hex":"#4d5b88"},{"name":"Wizard Blue","hex":"#0073cf"},{"name":"Wizard Grey","hex":"#525e68"},{"name":"Wizard Time","hex":"#6d4660"},{"name":"Wizard White","hex":"#dff1fd"},{"name":"Wizard\'s Brew","hex":"#a090b8"},{"name":"Wizard\'s Potion","hex":"#5d6098"},{"name":"Wizard\'s Spell","hex":"#584b4e"},{"name":"Wizards Orb","hex":"#007c76"},{"name":"Woad Blue","hex":"#597fb9"},{"name":"Woad Indigo","hex":"#6c9898"},{"name":"Woad Purple","hex":"#584769"},{"name":"Wobbegong Brown","hex":"#c19a6b"},{"name":"Wolf","hex":"#788389"},{"name":"Wolf Lichen","hex":"#a8ff04"},{"name":"Wolf Pack","hex":"#78776f"},{"name":"Wolf\'s Bane","hex":"#3d343f"},{"name":"Wolf\'s Fur","hex":"#5c5451"},{"name":"Wolfram","hex":"#b5b6b7"},{"name":"Wolverine","hex":"#91989d"},{"name":"Wonder Land","hex":"#92adb2"},{"name":"Wonder Lust","hex":"#ef8e9f"},{"name":"Wonder Violet","hex":"#a085a6"},{"name":"Wonder Wine","hex":"#635d63"},{"name":"Wonder Wish","hex":"#a97898"},{"name":"Wonder Woods","hex":"#abcb7b"},{"name":"Wonderland","hex":"#718a70"},{"name":"Wondrous Blue","hex":"#b8cddd"},{"name":"Wondrous Wisteria","hex":"#a3b1f2"},{"name":"Wonton Dumpling","hex":"#d0a46d"},{"name":"Wood Acres","hex":"#645a56"},{"name":"Wood Ash","hex":"#d7cab0"},{"name":"Wood Avens","hex":"#fbeeac"},{"name":"Wood Bark","hex":"#302621"},{"name":"Wood Brown","hex":"#554545"},{"name":"Wood Charcoal","hex":"#464646"},{"name":"Wood Chi","hex":"#90835e"},{"name":"Wood Garlic","hex":"#7a7229"},{"name":"Wood Green","hex":"#a78c59"},{"name":"Wood Lake","hex":"#a08475"},{"name":"Wood Nymph","hex":"#eba0a7"},{"name":"Wood Pigeon","hex":"#aabbcc"},{"name":"Wood Stain Brown","hex":"#796a4e"},{"name":"Wood Thrush","hex":"#a47d43"},{"name":"Wood Violet","hex":"#78426f"},{"name":"Wood-Black Red","hex":"#584043"},{"name":"Wood\'s Creek","hex":"#61633f"},{"name":"Woodbine","hex":"#8a8a36"},{"name":"Woodbridge","hex":"#847451"},{"name":"Woodbridge Trail","hex":"#b3987d"},{"name":"Woodburn","hex":"#463629"},{"name":"Woodchuck","hex":"#8e746c"},{"name":"Woodcraft","hex":"#8f847a"},{"name":"Wooded Acre","hex":"#b59b7e"},{"name":"Wooden Cabin","hex":"#765a3f"},{"name":"Wooden Nutmeg","hex":"#745c51"},{"name":"Wooden Peg","hex":"#a89983"},{"name":"Wooden Swing","hex":"#a58563"},{"name":"Wooden Sword","hex":"#dfb07e"},{"name":"Woodgrain","hex":"#996633"},{"name":"Woodhaven","hex":"#9e7b6c"},{"name":"Woodkraft","hex":"#96856a"},{"name":"Woodland","hex":"#626746"},{"name":"Woodland Brown","hex":"#5f4737"},{"name":"Woodland Grass","hex":"#004400"},{"name":"Woodland Moss","hex":"#5c645c"},{"name":"Woodland Night","hex":"#475c5d"},{"name":"Woodland Nymph","hex":"#69804b"},{"name":"Woodland Sage","hex":"#a4a393"},{"name":"Woodland Soul","hex":"#127a49"},{"name":"Woodland Walk","hex":"#8b8d63"},{"name":"Woodlawn Green","hex":"#405b50"},{"name":"Woodman","hex":"#4b5d31"},{"name":"Woodrose","hex":"#ac8989"},{"name":"Woodruff Green","hex":"#8b9916"},{"name":"Woodrush","hex":"#45402b"},{"name":"Woodsmoke","hex":"#2b3230"},{"name":"Woodstock","hex":"#9b8a5f"},{"name":"Woodstock Rose","hex":"#e9cab6"},{"name":"Woodsy Brown","hex":"#3d271d"},{"name":"Woodward Park","hex":"#755f4a"},{"name":"Woody Brown","hex":"#6e2d2b"},{"name":"Wooed","hex":"#40446c"},{"name":"Woohringa","hex":"#5f655a"},{"name":"Wool Coat","hex":"#ad9a90"},{"name":"Wool Skein","hex":"#d9cfba"},{"name":"Wool Turquoise","hex":"#005152"},{"name":"Wool Tweed","hex":"#917747"},{"name":"Wool Violet","hex":"#5e5587"},{"name":"Wool White","hex":"#f9ede4"},{"name":"Wool-Milk Pig","hex":"#dbbdaa"},{"name":"Woolen Mittens","hex":"#b59f55"},{"name":"Woolen Vest","hex":"#b0a582"},{"name":"Woolly Beige","hex":"#e7d5c9"},{"name":"Woolly Mammoth","hex":"#bb9c7c"},{"name":"Wooly Thyme","hex":"#907e63"},{"name":"Wooster Smoke","hex":"#a5a192"},{"name":"Worcestershire Sauce","hex":"#572b26"},{"name":"Work Blue","hex":"#004d67"},{"name":"Workbench","hex":"#cda366"},{"name":"Workout Green","hex":"#bfe6d2"},{"name":"Workout Routine","hex":"#ffd789"},{"name":"Workshop Blue","hex":"#02667b"},{"name":"World Peace","hex":"#005477"},{"name":"Worldly Grey","hex":"#cec6bf"},{"name":"Wormwood Green","hex":"#9fae9e"},{"name":"Worn Denim","hex":"#4282c6"},{"name":"Worn Jade Tiles","hex":"#d4ded4"},{"name":"Worn Khaki","hex":"#a69c81"},{"name":"Worn Olive","hex":"#6f6c0a"},{"name":"Worn Silver","hex":"#c9c0bb"},{"name":"Worn Wood","hex":"#e8dbd3"},{"name":"Worn Wooden","hex":"#634333"},{"name":"Worsted Tan","hex":"#ab9379"},{"name":"Woven","hex":"#e0d1a0"},{"name":"Woven Basket","hex":"#8e7b58"},{"name":"Woven Gold","hex":"#dcb639"},{"name":"Woven Navajo","hex":"#cead8e"},{"name":"Woven Raffia","hex":"#f1dfc0"},{"name":"Woven Reed","hex":"#dddcbf"},{"name":"Woven Straw","hex":"#c1ac8b"},{"name":"Woven Wicker","hex":"#b99974"},{"name":"Wrack White","hex":"#ecead0"},{"name":"Wrapped in Twilight","hex":"#5f6d6e"},{"name":"Wreath","hex":"#76856a"},{"name":"Wren","hex":"#4a4139"},{"name":"Wright Brown","hex":"#71635e"},{"name":"Writer\'s Parchment","hex":"#e9d6bd"},{"name":"Writing Paper","hex":"#f1e6cf"},{"name":"Wrought Iron","hex":"#999e98"},{"name":"Wrought Iron Gate","hex":"#474749"},{"name":"Wu-Tang Gold","hex":"#f8d106"},{"name":"Wulfenite","hex":"#ce7639"},{"name":"Wyvern Green","hex":"#86a96f"},{"name":"X Marks the Spot","hex":"#e6474a"},{"name":"Xâkestari White","hex":"#fef2dc"},{"name":"Xanadu","hex":"#738678"},{"name":"Xanthe Yellow","hex":"#ffee55"},{"name":"Xanthic","hex":"#f4e216"},{"name":"Xanthous","hex":"#f1b42f"},{"name":"Xavier Blue","hex":"#6ab4e0"},{"name":"Xena","hex":"#847e54"},{"name":"Xenon Blue","hex":"#b7c0d7"},{"name":"Xereus Purple","hex":"#7d0061"},{"name":"Xiān Hóng Red","hex":"#e60626"},{"name":"Xiàng Yá Bái Ivory","hex":"#ece6d1"},{"name":"Xiao Long Bao Dumpling","hex":"#bcb7b0"},{"name":"Xìng Huáng Yellow","hex":"#fce166"},{"name":"Xīpe Totēc Red","hex":"#cc1166"},{"name":"Xmas Candy","hex":"#990020"},{"name":"Xoxo","hex":"#f08497"},{"name":"Y7K Blue","hex":"#1560fb"},{"name":"Yacht Blue","hex":"#679bb3"},{"name":"Yacht Club","hex":"#566062"},{"name":"Yacht Club Blue","hex":"#485783"},{"name":"Yacht Harbor","hex":"#7c9dae"},{"name":"Yahoo","hex":"#fabba9"},{"name":"Yakitori","hex":"#ecab3f"},{"name":"Yale Blue","hex":"#0f4d92"},{"name":"Yam","hex":"#c98431"},{"name":"Yamabuki Gold","hex":"#ffa400"},{"name":"Yamabukicha Gold","hex":"#cb7e1f"},{"name":"Yān Hūi Smoke","hex":"#a8c3bc"},{"name":"Yanagicha","hex":"#9c8a4d"},{"name":"Yanagizome Green","hex":"#8c9e5e"},{"name":"Yáng Chéng Orange","hex":"#f1a141"},{"name":"Yang Mist","hex":"#ede8dd"},{"name":"Yankee Doodle","hex":"#4d5a6b"},{"name":"Yankees Blue","hex":"#1c2841"},{"name":"Yardbird","hex":"#9e826a"},{"name":"Yarmouth Oyster","hex":"#dccfb6"},{"name":"Yarrow","hex":"#d8ad39"},{"name":"Yawl","hex":"#547497"},{"name":"Ye Olde Rustic Colour","hex":"#7c6c57"},{"name":"Yearling","hex":"#ad896a"},{"name":"Yearning","hex":"#061088"},{"name":"Yearning Desire","hex":"#ca135e"},{"name":"Yeast","hex":"#fae1ac"},{"name":"Yell for Yellow","hex":"#fffe00"},{"name":"Yell Yellow","hex":"#ffffbf"},{"name":"Yellow","hex":"#ffff00"},{"name":"Yellow Acorn","hex":"#b68d4c"},{"name":"Yellow Avarice","hex":"#f5f5d9"},{"name":"Yellow Beam","hex":"#f9eed0"},{"name":"Yellow Beige","hex":"#e3c08d"},{"name":"Yellow Bell Pepper","hex":"#ffdd33"},{"name":"Yellow Bird","hex":"#f1cd7b"},{"name":"Yellow Bliss","hex":"#f4eaba"},{"name":"Yellow Blitz","hex":"#fdf4bb"},{"name":"Yellow Bombinate","hex":"#faf3cf"},{"name":"Yellow Bonnet","hex":"#f9f6e8"},{"name":"Yellow Brick Road","hex":"#eac853"},{"name":"Yellow Brown","hex":"#ae8b0c"},{"name":"Yellow Buzzing","hex":"#eedd11"},{"name":"Yellow Canary","hex":"#ffeaac"},{"name":"Yellow Cattleya","hex":"#fff44f"},{"name":"Yellow Chalk","hex":"#f5f9ad"},{"name":"Yellow Coneflower","hex":"#edb856"},{"name":"Yellow Corn","hex":"#ffde88"},{"name":"Yellow Cream","hex":"#eed36c"},{"name":"Yellow Currant","hex":"#f7c66b"},{"name":"Yellow Diamond","hex":"#f6f1d7"},{"name":"Yellow Dragon","hex":"#f8e47e"},{"name":"Yellow Emulsion","hex":"#f0f0d9"},{"name":"Yellow Endive","hex":"#d2cc81"},{"name":"Yellow Essence","hex":"#fce1b6"},{"name":"Yellow Exhilaration","hex":"#ffb102"},{"name":"Yellow Flash","hex":"#ffca00"},{"name":"Yellow Geranium","hex":"#ffe1a0"},{"name":"Yellow Gold","hex":"#be8400"},{"name":"Yellow Green","hex":"#c8fd3d"},{"name":"Yellow Green Shade","hex":"#c5e384"},{"name":"Yellow Groove","hex":"#f7b930"},{"name":"Yellow Iris","hex":"#ede68a"},{"name":"Yellow Jacket","hex":"#ffcc3a"},{"name":"Yellow Jasmine","hex":"#eee8aa"},{"name":"Yellow Jasper","hex":"#daa436"},{"name":"Yellow Jubilee","hex":"#ffd379"},{"name":"Yellow Lotus","hex":"#f6d099"},{"name":"Yellow Lupine","hex":"#ccaa4d"},{"name":"Yellow Maize","hex":"#c0a85a"},{"name":"Yellow Mana","hex":"#fdfcbf"},{"name":"Yellow Mandarin","hex":"#d28034"},{"name":"Yellow Mask","hex":"#f6d255"},{"name":"Yellow Mellow","hex":"#f0d31e"},{"name":"Yellow Metal","hex":"#73633e"},{"name":"Yellow Nile","hex":"#95804a"},{"name":"Yellow Ocher","hex":"#c39143"},{"name":"Yellow Ochre","hex":"#cb9d06"},{"name":"Yellow of Izamal","hex":"#eaad04"},{"name":"Yellow Orange","hex":"#fcb001"},{"name":"Yellow Page","hex":"#eadcc6"},{"name":"Yellow Pear","hex":"#e9df8a"},{"name":"Yellow Pepper","hex":"#eeef06"},{"name":"Yellow Petal","hex":"#f0e74b"},{"name":"Yellow Phosphenes","hex":"#e4e4cb"},{"name":"Yellow Polka Dot","hex":"#fcb867"},{"name":"Yellow Powder","hex":"#fcfd74"},{"name":"Yellow Rose","hex":"#fff000"},{"name":"Yellow Salmonberry","hex":"#fff47c"},{"name":"Yellow Sand","hex":"#a28744"},{"name":"Yellow Sea","hex":"#f49f35"},{"name":"Yellow Shimmer","hex":"#f8e2ca"},{"name":"Yellow Shout","hex":"#d19932"},{"name":"Yellow Stagshorn","hex":"#fada5e"},{"name":"Yellow Submarine","hex":"#ffff14"},{"name":"Yellow Sumac","hex":"#e19447"},{"name":"Yellow Summer","hex":"#f9b500"},{"name":"Yellow Sunshine","hex":"#fff601"},{"name":"Yellow Taffy","hex":"#f7edb7"},{"name":"Yellow Tail","hex":"#fff29d"},{"name":"Yellow Tan","hex":"#ffe36e"},{"name":"Yellow Tang","hex":"#ffd300"},{"name":"Yellow Trumpet","hex":"#f9d988"},{"name":"Yellow Tulip","hex":"#f6d06e"},{"name":"Yellow Umbrella","hex":"#cdbb63"},{"name":"Yellow Urn Orchid","hex":"#fffdd0"},{"name":"Yellow Varnish","hex":"#eab565"},{"name":"Yellow Warbler","hex":"#ffba6f"},{"name":"Yellow Warning","hex":"#c69035"},{"name":"Yellow Wax Pepper","hex":"#ede5b7"},{"name":"Yellow Yarn","hex":"#fef6be"},{"name":"Yellow-Bellied","hex":"#ffee33"},{"name":"Yellow-Green Grosbeak","hex":"#c8cd37"},{"name":"Yellow-Rumped Warbler","hex":"#eebb77"},{"name":"Yellowed Bone","hex":"#f6f1c4"},{"name":"Yellowish","hex":"#faee66"},{"name":"Yellowish Brown","hex":"#9b7a01"},{"name":"Yellowish Green","hex":"#b0dd16"},{"name":"Yellowish Grey","hex":"#edeeda"},{"name":"Yellowish Orange","hex":"#ffab0f"},{"name":"Yellowish Tan","hex":"#fcfc81"},{"name":"Yellowish White","hex":"#e9f1d0"},{"name":"Yellowl","hex":"#f3d80e"},{"name":"Yellowstone","hex":"#ceb736"},{"name":"Yellowstone Park","hex":"#e4d6ba"},{"name":"Yellowy Green","hex":"#bff128"},{"name":"Yerba Mate","hex":"#c8c48f"},{"name":"Yeti Footprint","hex":"#c7d7e0"},{"name":"Yew","hex":"#abbc01"},{"name":"Yew Hedge","hex":"#656952"},{"name":"Yín Bái Silver","hex":"#e0e1e2"},{"name":"Yin Hūi Silver","hex":"#848999"},{"name":"Yin Mist","hex":"#3b3c3c"},{"name":"Yín Sè Silver","hex":"#b1c4cb"},{"name":"Yíng Guāng Sè Green","hex":"#05ffa6"},{"name":"Yíng Guāng Sè Pink","hex":"#ff69af"},{"name":"Yíng Guāng Sè Purple","hex":"#632de9"},{"name":"YInMn Blue","hex":"#265ef7"},{"name":"Yippie Ya Yellow","hex":"#f9f59f"},{"name":"Yippie Yellow","hex":"#ffff84"},{"name":"Yoga Daze","hex":"#e3e4d2"},{"name":"Yoghurt Brûlée","hex":"#f5e9ce"},{"name":"Yogi","hex":"#8a8c66"},{"name":"Yogurt","hex":"#ffecc3"},{"name":"Yolanda","hex":"#a291ba"},{"name":"Yolande","hex":"#d5a585"},{"name":"Yolk","hex":"#eec701"},{"name":"Yolk Yellow","hex":"#e2b051"},{"name":"York Beige","hex":"#aa987f"},{"name":"York Bisque","hex":"#f3d9c7"},{"name":"York Pink","hex":"#d7837f"},{"name":"York Plum","hex":"#d3bfe5"},{"name":"York River Green","hex":"#67706d"},{"name":"Yorkshire Brown","hex":"#735c53"},{"name":"Yorkshire Cloud","hex":"#bac3cc"},{"name":"Yoshi","hex":"#55aa00"},{"name":"You\'re Blushing","hex":"#e2caaf"},{"name":"Young Apricot","hex":"#fcd8b5"},{"name":"Young At Heart","hex":"#d5a1a9"},{"name":"Young Bamboo","hex":"#68be8d"},{"name":"Young Bud","hex":"#86af38"},{"name":"Young Colt","hex":"#938c83"},{"name":"Young Cornflower","hex":"#bbffff"},{"name":"Young Crab","hex":"#f6a09d"},{"name":"Young Fawn","hex":"#c3b4b3"},{"name":"Young Fern","hex":"#71bc78"},{"name":"Young Gecko","hex":"#aac0ad"},{"name":"Young Grass","hex":"#c3d825"},{"name":"Young Green","hex":"#97d499"},{"name":"Young Green Onion","hex":"#aacf53"},{"name":"Young Greens","hex":"#d8e698"},{"name":"Young Leaf","hex":"#b0c86f"},{"name":"Young Leaves","hex":"#b9d08b"},{"name":"Young Mahogany","hex":"#ca3435"},{"name":"Young Night","hex":"#232323"},{"name":"Young Peach","hex":"#f2e1d2"},{"name":"Young Plum","hex":"#acc729"},{"name":"Young Prince","hex":"#b28ebc"},{"name":"Young Purple","hex":"#bc64a4"},{"name":"Young Redwood","hex":"#ab4e52"},{"name":"Young Salmon","hex":"#ffb6b4"},{"name":"Young Tangerine","hex":"#ffa474"},{"name":"Young Turk","hex":"#c9afa9"},{"name":"Young Wheat","hex":"#dcdf9d"},{"name":"Your Darkness","hex":"#220044"},{"name":"Your Majesty","hex":"#61496e"},{"name":"Your Pink","hex":"#ffc5bb"},{"name":"Your Shadow","hex":"#787e93"},{"name":"Yours Truly","hex":"#fbd9cd"},{"name":"Youth","hex":"#e2c9c8"},{"name":"Youthful Coral","hex":"#ee8073"},{"name":"Yreka!","hex":"#a7b3b7"},{"name":"Yriel Yellow","hex":"#ffdb58"},{"name":"Yù Shí Bái White","hex":"#c0e2e1"},{"name":"Yucatan","hex":"#e9af78"},{"name":"Yucatan White Habañero","hex":"#f2efe0"},{"name":"Yucca","hex":"#75978f"},{"name":"Yucca Cream","hex":"#a1d7c9"},{"name":"Yucca White","hex":"#f2ead5"},{"name":"Yuè Guāng Lán Blue","hex":"#2138ab"},{"name":"Yuè Guāng Lán Moonlight","hex":"#5959ab"},{"name":"Yukon Gold","hex":"#826a21"},{"name":"Yule Tree","hex":"#66b032"},{"name":"Yuma","hex":"#c7b882"},{"name":"Yuma Gold","hex":"#ffd678"},{"name":"Yuma Sand","hex":"#cfc5ae"},{"name":"Yuzu Jam","hex":"#fdd200"},{"name":"Yuzu Marmalade","hex":"#ffd766"},{"name":"Yuzu Soy","hex":"#112200"},{"name":"Yuzukoshō","hex":"#d4de49"},{"name":"Yves Klein Blue","hex":"#00008b"},{"name":"Zaffre","hex":"#0014a8"},{"name":"Zahri Pink","hex":"#ec6d71"},{"name":"Zambezi","hex":"#6b5a5a"},{"name":"Zambia","hex":"#ff990e"},{"name":"Zamesi Desert","hex":"#dda026"},{"name":"Zanah","hex":"#b2c6b1"},{"name":"Zanci","hex":"#d38977"},{"name":"Zandri Dust","hex":"#a39a61"},{"name":"Zangief\'s Chest","hex":"#823c3d"},{"name":"Zany Pink","hex":"#e47486"},{"name":"Zanzibar","hex":"#7e6765"},{"name":"Zǎo Hóng Maroon","hex":"#c1264c"},{"name":"Zappy Zebra","hex":"#f1f3f3"},{"name":"Zard Yellow","hex":"#fde634"},{"name":"Zatar Leaf","hex":"#60a448"},{"name":"Zebra Finch","hex":"#cec6bb"},{"name":"Zebra Grass","hex":"#9da286"},{"name":"Zeftron","hex":"#0090ad"},{"name":"Zelyony Green","hex":"#016612"},{"name":"Zen","hex":"#cfd9de"},{"name":"Zen Blue","hex":"#99a4ba"},{"name":"Zen Essence","hex":"#c6bfa7"},{"name":"Zen Garden","hex":"#d1dac0"},{"name":"Zen Retreat","hex":"#5b5d5c"},{"name":"Zenith","hex":"#497a9f"},{"name":"Zenith Heights","hex":"#a6c8c7"},{"name":"Zepheniah\'s Greed","hex":"#424f3b"},{"name":"Zephyr","hex":"#c39ea3"},{"name":"Zephyr Blue","hex":"#d1d8d0"},{"name":"Zephyr Green","hex":"#7ab091"},{"name":"Zero Degrees","hex":"#ddd9c4"},{"name":"Zero Gravity","hex":"#332233"},{"name":"Zest","hex":"#c6723b"},{"name":"Zesty Apple","hex":"#92a360"},{"name":"Zeus","hex":"#3b3c38"},{"name":"Zeus Palace","hex":"#3c343d"},{"name":"Zeus Purple","hex":"#660077"},{"name":"Zeus Temple","hex":"#6c94cd"},{"name":"Zeus\'s Bolt","hex":"#eeff00"},{"name":"Zheleznogorsk Yellow","hex":"#fef200"},{"name":"Zhēn Zhū Bái Pearl","hex":"#f8f8f9"},{"name":"Zhohltyi Yellow","hex":"#e4c500"},{"name":"Zhū Hóng Vermillion","hex":"#cb464a"},{"name":"Zǐ Lúo Lán Sè Violet","hex":"#9f0fef"},{"name":"Zǐ Sè Purple","hex":"#c94cbe"},{"name":"Zia Olive","hex":"#082903"},{"name":"Ziggurat","hex":"#81a6aa"},{"name":"Zima Blue","hex":"#16b8f3"},{"name":"Zimidar","hex":"#6a5287"},{"name":"Zin Cluster","hex":"#463b3a"},{"name":"Zinc","hex":"#92898a"},{"name":"Zinc Blend","hex":"#a3907e"},{"name":"Zinc Dust","hex":"#5b5c5a"},{"name":"Zinc Grey","hex":"#655b55"},{"name":"Zinc Luster","hex":"#8c8373"},{"name":"Zinfandel","hex":"#5a2538"},{"name":"Zinfandel Red","hex":"#5a3844"},{"name":"Zing","hex":"#fbc17b"},{"name":"Zingiber","hex":"#dac01a"},{"name":"Zinnia","hex":"#ffa111"},{"name":"Zinnia Gold","hex":"#ffd781"},{"name":"Zinnwaldite","hex":"#ebc2af"},{"name":"Zinnwaldite Brown","hex":"#2c1608"},{"name":"Zion","hex":"#bcc5aa"},{"name":"Zircon","hex":"#dee3e3"},{"name":"Zircon Blue","hex":"#00849d"},{"name":"Zircon Grey","hex":"#807473"},{"name":"Zircon Ice","hex":"#d0e4e5"},{"name":"Zirconia Teal","hex":"#2c7c79"},{"name":"Zitronenzucker","hex":"#f4f3cd"},{"name":"Zodiac","hex":"#8b9196"},{"name":"Zodiac Constellation","hex":"#ee8844"},{"name":"Zombie","hex":"#6a755a"},{"name":"Zomp","hex":"#39a78e"},{"name":"Zōng Hóng Red","hex":"#ca6641"},{"name":"Zoodles","hex":"#b8bf71"},{"name":"Zoom","hex":"#7b6c74"},{"name":"Zorba","hex":"#a29589"},{"name":"Zucchini","hex":"#17462e"},{"name":"Zucchini Cream","hex":"#97a98b"},{"name":"Zucchini Flower","hex":"#e8a64e"},{"name":"Zucchini Garden","hex":"#afa170"},{"name":"Zucchini Noodles","hex":"#c8d07f"},{"name":"Zumthor","hex":"#cdd5d5"},{"name":"Zunda Green","hex":"#6bc026"},{"name":"Zuni","hex":"#008996"},{"name":"Zürich Blue","hex":"#248bcc"},{"name":"Zürich White","hex":"#e6e1d9"}]');

/***/ }),

/***/ 4881:
/***/ ((module) => {

module.exports = JSON.parse('{"application/1d-interleaved-parityfec":{"source":"iana"},"application/3gpdash-qoe-report+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/3gpp-ims+xml":{"source":"iana","compressible":true},"application/3gpphal+json":{"source":"iana","compressible":true},"application/3gpphalforms+json":{"source":"iana","compressible":true},"application/a2l":{"source":"iana"},"application/ace+cbor":{"source":"iana"},"application/activemessage":{"source":"iana"},"application/activity+json":{"source":"iana","compressible":true},"application/alto-costmap+json":{"source":"iana","compressible":true},"application/alto-costmapfilter+json":{"source":"iana","compressible":true},"application/alto-directory+json":{"source":"iana","compressible":true},"application/alto-endpointcost+json":{"source":"iana","compressible":true},"application/alto-endpointcostparams+json":{"source":"iana","compressible":true},"application/alto-endpointprop+json":{"source":"iana","compressible":true},"application/alto-endpointpropparams+json":{"source":"iana","compressible":true},"application/alto-error+json":{"source":"iana","compressible":true},"application/alto-networkmap+json":{"source":"iana","compressible":true},"application/alto-networkmapfilter+json":{"source":"iana","compressible":true},"application/alto-updatestreamcontrol+json":{"source":"iana","compressible":true},"application/alto-updatestreamparams+json":{"source":"iana","compressible":true},"application/aml":{"source":"iana"},"application/andrew-inset":{"source":"iana","extensions":["ez"]},"application/applefile":{"source":"iana"},"application/applixware":{"source":"apache","extensions":["aw"]},"application/at+jwt":{"source":"iana"},"application/atf":{"source":"iana"},"application/atfx":{"source":"iana"},"application/atom+xml":{"source":"iana","compressible":true,"extensions":["atom"]},"application/atomcat+xml":{"source":"iana","compressible":true,"extensions":["atomcat"]},"application/atomdeleted+xml":{"source":"iana","compressible":true,"extensions":["atomdeleted"]},"application/atomicmail":{"source":"iana"},"application/atomsvc+xml":{"source":"iana","compressible":true,"extensions":["atomsvc"]},"application/atsc-dwd+xml":{"source":"iana","compressible":true,"extensions":["dwd"]},"application/atsc-dynamic-event-message":{"source":"iana"},"application/atsc-held+xml":{"source":"iana","compressible":true,"extensions":["held"]},"application/atsc-rdt+json":{"source":"iana","compressible":true},"application/atsc-rsat+xml":{"source":"iana","compressible":true,"extensions":["rsat"]},"application/atxml":{"source":"iana"},"application/auth-policy+xml":{"source":"iana","compressible":true},"application/bacnet-xdd+zip":{"source":"iana","compressible":false},"application/batch-smtp":{"source":"iana"},"application/bdoc":{"compressible":false,"extensions":["bdoc"]},"application/beep+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/calendar+json":{"source":"iana","compressible":true},"application/calendar+xml":{"source":"iana","compressible":true,"extensions":["xcs"]},"application/call-completion":{"source":"iana"},"application/cals-1840":{"source":"iana"},"application/captive+json":{"source":"iana","compressible":true},"application/cbor":{"source":"iana"},"application/cbor-seq":{"source":"iana"},"application/cccex":{"source":"iana"},"application/ccmp+xml":{"source":"iana","compressible":true},"application/ccxml+xml":{"source":"iana","compressible":true,"extensions":["ccxml"]},"application/cdfx+xml":{"source":"iana","compressible":true,"extensions":["cdfx"]},"application/cdmi-capability":{"source":"iana","extensions":["cdmia"]},"application/cdmi-container":{"source":"iana","extensions":["cdmic"]},"application/cdmi-domain":{"source":"iana","extensions":["cdmid"]},"application/cdmi-object":{"source":"iana","extensions":["cdmio"]},"application/cdmi-queue":{"source":"iana","extensions":["cdmiq"]},"application/cdni":{"source":"iana"},"application/cea":{"source":"iana"},"application/cea-2018+xml":{"source":"iana","compressible":true},"application/cellml+xml":{"source":"iana","compressible":true},"application/cfw":{"source":"iana"},"application/city+json":{"source":"iana","compressible":true},"application/clr":{"source":"iana"},"application/clue+xml":{"source":"iana","compressible":true},"application/clue_info+xml":{"source":"iana","compressible":true},"application/cms":{"source":"iana"},"application/cnrp+xml":{"source":"iana","compressible":true},"application/coap-group+json":{"source":"iana","compressible":true},"application/coap-payload":{"source":"iana"},"application/commonground":{"source":"iana"},"application/conference-info+xml":{"source":"iana","compressible":true},"application/cose":{"source":"iana"},"application/cose-key":{"source":"iana"},"application/cose-key-set":{"source":"iana"},"application/cpl+xml":{"source":"iana","compressible":true,"extensions":["cpl"]},"application/csrattrs":{"source":"iana"},"application/csta+xml":{"source":"iana","compressible":true},"application/cstadata+xml":{"source":"iana","compressible":true},"application/csvm+json":{"source":"iana","compressible":true},"application/cu-seeme":{"source":"apache","extensions":["cu"]},"application/cwt":{"source":"iana"},"application/cybercash":{"source":"iana"},"application/dart":{"compressible":true},"application/dash+xml":{"source":"iana","compressible":true,"extensions":["mpd"]},"application/dash-patch+xml":{"source":"iana","compressible":true,"extensions":["mpp"]},"application/dashdelta":{"source":"iana"},"application/davmount+xml":{"source":"iana","compressible":true,"extensions":["davmount"]},"application/dca-rft":{"source":"iana"},"application/dcd":{"source":"iana"},"application/dec-dx":{"source":"iana"},"application/dialog-info+xml":{"source":"iana","compressible":true},"application/dicom":{"source":"iana"},"application/dicom+json":{"source":"iana","compressible":true},"application/dicom+xml":{"source":"iana","compressible":true},"application/dii":{"source":"iana"},"application/dit":{"source":"iana"},"application/dns":{"source":"iana"},"application/dns+json":{"source":"iana","compressible":true},"application/dns-message":{"source":"iana"},"application/docbook+xml":{"source":"apache","compressible":true,"extensions":["dbk"]},"application/dots+cbor":{"source":"iana"},"application/dskpp+xml":{"source":"iana","compressible":true},"application/dssc+der":{"source":"iana","extensions":["dssc"]},"application/dssc+xml":{"source":"iana","compressible":true,"extensions":["xdssc"]},"application/dvcs":{"source":"iana"},"application/ecmascript":{"source":"iana","compressible":true,"extensions":["es","ecma"]},"application/edi-consent":{"source":"iana"},"application/edi-x12":{"source":"iana","compressible":false},"application/edifact":{"source":"iana","compressible":false},"application/efi":{"source":"iana"},"application/elm+json":{"source":"iana","charset":"UTF-8","compressible":true},"application/elm+xml":{"source":"iana","compressible":true},"application/emergencycalldata.cap+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/emergencycalldata.comment+xml":{"source":"iana","compressible":true},"application/emergencycalldata.control+xml":{"source":"iana","compressible":true},"application/emergencycalldata.deviceinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.ecall.msd":{"source":"iana"},"application/emergencycalldata.providerinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.serviceinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.subscriberinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.veds+xml":{"source":"iana","compressible":true},"application/emma+xml":{"source":"iana","compressible":true,"extensions":["emma"]},"application/emotionml+xml":{"source":"iana","compressible":true,"extensions":["emotionml"]},"application/encaprtp":{"source":"iana"},"application/epp+xml":{"source":"iana","compressible":true},"application/epub+zip":{"source":"iana","compressible":false,"extensions":["epub"]},"application/eshop":{"source":"iana"},"application/exi":{"source":"iana","extensions":["exi"]},"application/expect-ct-report+json":{"source":"iana","compressible":true},"application/express":{"source":"iana","extensions":["exp"]},"application/fastinfoset":{"source":"iana"},"application/fastsoap":{"source":"iana"},"application/fdt+xml":{"source":"iana","compressible":true,"extensions":["fdt"]},"application/fhir+json":{"source":"iana","charset":"UTF-8","compressible":true},"application/fhir+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/fido.trusted-apps+json":{"compressible":true},"application/fits":{"source":"iana"},"application/flexfec":{"source":"iana"},"application/font-sfnt":{"source":"iana"},"application/font-tdpfr":{"source":"iana","extensions":["pfr"]},"application/font-woff":{"source":"iana","compressible":false},"application/framework-attributes+xml":{"source":"iana","compressible":true},"application/geo+json":{"source":"iana","compressible":true,"extensions":["geojson"]},"application/geo+json-seq":{"source":"iana"},"application/geopackage+sqlite3":{"source":"iana"},"application/geoxacml+xml":{"source":"iana","compressible":true},"application/gltf-buffer":{"source":"iana"},"application/gml+xml":{"source":"iana","compressible":true,"extensions":["gml"]},"application/gpx+xml":{"source":"apache","compressible":true,"extensions":["gpx"]},"application/gxf":{"source":"apache","extensions":["gxf"]},"application/gzip":{"source":"iana","compressible":false,"extensions":["gz"]},"application/h224":{"source":"iana"},"application/held+xml":{"source":"iana","compressible":true},"application/hjson":{"extensions":["hjson"]},"application/http":{"source":"iana"},"application/hyperstudio":{"source":"iana","extensions":["stk"]},"application/ibe-key-request+xml":{"source":"iana","compressible":true},"application/ibe-pkg-reply+xml":{"source":"iana","compressible":true},"application/ibe-pp-data":{"source":"iana"},"application/iges":{"source":"iana"},"application/im-iscomposing+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/index":{"source":"iana"},"application/index.cmd":{"source":"iana"},"application/index.obj":{"source":"iana"},"application/index.response":{"source":"iana"},"application/index.vnd":{"source":"iana"},"application/inkml+xml":{"source":"iana","compressible":true,"extensions":["ink","inkml"]},"application/iotp":{"source":"iana"},"application/ipfix":{"source":"iana","extensions":["ipfix"]},"application/ipp":{"source":"iana"},"application/isup":{"source":"iana"},"application/its+xml":{"source":"iana","compressible":true,"extensions":["its"]},"application/java-archive":{"source":"apache","compressible":false,"extensions":["jar","war","ear"]},"application/java-serialized-object":{"source":"apache","compressible":false,"extensions":["ser"]},"application/java-vm":{"source":"apache","compressible":false,"extensions":["class"]},"application/javascript":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["js","mjs"]},"application/jf2feed+json":{"source":"iana","compressible":true},"application/jose":{"source":"iana"},"application/jose+json":{"source":"iana","compressible":true},"application/jrd+json":{"source":"iana","compressible":true},"application/jscalendar+json":{"source":"iana","compressible":true},"application/json":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["json","map"]},"application/json-patch+json":{"source":"iana","compressible":true},"application/json-seq":{"source":"iana"},"application/json5":{"extensions":["json5"]},"application/jsonml+json":{"source":"apache","compressible":true,"extensions":["jsonml"]},"application/jwk+json":{"source":"iana","compressible":true},"application/jwk-set+json":{"source":"iana","compressible":true},"application/jwt":{"source":"iana"},"application/kpml-request+xml":{"source":"iana","compressible":true},"application/kpml-response+xml":{"source":"iana","compressible":true},"application/ld+json":{"source":"iana","compressible":true,"extensions":["jsonld"]},"application/lgr+xml":{"source":"iana","compressible":true,"extensions":["lgr"]},"application/link-format":{"source":"iana"},"application/load-control+xml":{"source":"iana","compressible":true},"application/lost+xml":{"source":"iana","compressible":true,"extensions":["lostxml"]},"application/lostsync+xml":{"source":"iana","compressible":true},"application/lpf+zip":{"source":"iana","compressible":false},"application/lxf":{"source":"iana"},"application/mac-binhex40":{"source":"iana","extensions":["hqx"]},"application/mac-compactpro":{"source":"apache","extensions":["cpt"]},"application/macwriteii":{"source":"iana"},"application/mads+xml":{"source":"iana","compressible":true,"extensions":["mads"]},"application/manifest+json":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["webmanifest"]},"application/marc":{"source":"iana","extensions":["mrc"]},"application/marcxml+xml":{"source":"iana","compressible":true,"extensions":["mrcx"]},"application/mathematica":{"source":"iana","extensions":["ma","nb","mb"]},"application/mathml+xml":{"source":"iana","compressible":true,"extensions":["mathml"]},"application/mathml-content+xml":{"source":"iana","compressible":true},"application/mathml-presentation+xml":{"source":"iana","compressible":true},"application/mbms-associated-procedure-description+xml":{"source":"iana","compressible":true},"application/mbms-deregister+xml":{"source":"iana","compressible":true},"application/mbms-envelope+xml":{"source":"iana","compressible":true},"application/mbms-msk+xml":{"source":"iana","compressible":true},"application/mbms-msk-response+xml":{"source":"iana","compressible":true},"application/mbms-protection-description+xml":{"source":"iana","compressible":true},"application/mbms-reception-report+xml":{"source":"iana","compressible":true},"application/mbms-register+xml":{"source":"iana","compressible":true},"application/mbms-register-response+xml":{"source":"iana","compressible":true},"application/mbms-schedule+xml":{"source":"iana","compressible":true},"application/mbms-user-service-description+xml":{"source":"iana","compressible":true},"application/mbox":{"source":"iana","extensions":["mbox"]},"application/media-policy-dataset+xml":{"source":"iana","compressible":true,"extensions":["mpf"]},"application/media_control+xml":{"source":"iana","compressible":true},"application/mediaservercontrol+xml":{"source":"iana","compressible":true,"extensions":["mscml"]},"application/merge-patch+json":{"source":"iana","compressible":true},"application/metalink+xml":{"source":"apache","compressible":true,"extensions":["metalink"]},"application/metalink4+xml":{"source":"iana","compressible":true,"extensions":["meta4"]},"application/mets+xml":{"source":"iana","compressible":true,"extensions":["mets"]},"application/mf4":{"source":"iana"},"application/mikey":{"source":"iana"},"application/mipc":{"source":"iana"},"application/missing-blocks+cbor-seq":{"source":"iana"},"application/mmt-aei+xml":{"source":"iana","compressible":true,"extensions":["maei"]},"application/mmt-usd+xml":{"source":"iana","compressible":true,"extensions":["musd"]},"application/mods+xml":{"source":"iana","compressible":true,"extensions":["mods"]},"application/moss-keys":{"source":"iana"},"application/moss-signature":{"source":"iana"},"application/mosskey-data":{"source":"iana"},"application/mosskey-request":{"source":"iana"},"application/mp21":{"source":"iana","extensions":["m21","mp21"]},"application/mp4":{"source":"iana","extensions":["mp4s","m4p"]},"application/mpeg4-generic":{"source":"iana"},"application/mpeg4-iod":{"source":"iana"},"application/mpeg4-iod-xmt":{"source":"iana"},"application/mrb-consumer+xml":{"source":"iana","compressible":true},"application/mrb-publish+xml":{"source":"iana","compressible":true},"application/msc-ivr+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/msc-mixer+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/msword":{"source":"iana","compressible":false,"extensions":["doc","dot"]},"application/mud+json":{"source":"iana","compressible":true},"application/multipart-core":{"source":"iana"},"application/mxf":{"source":"iana","extensions":["mxf"]},"application/n-quads":{"source":"iana","extensions":["nq"]},"application/n-triples":{"source":"iana","extensions":["nt"]},"application/nasdata":{"source":"iana"},"application/news-checkgroups":{"source":"iana","charset":"US-ASCII"},"application/news-groupinfo":{"source":"iana","charset":"US-ASCII"},"application/news-transmission":{"source":"iana"},"application/nlsml+xml":{"source":"iana","compressible":true},"application/node":{"source":"iana","extensions":["cjs"]},"application/nss":{"source":"iana"},"application/oauth-authz-req+jwt":{"source":"iana"},"application/oblivious-dns-message":{"source":"iana"},"application/ocsp-request":{"source":"iana"},"application/ocsp-response":{"source":"iana"},"application/octet-stream":{"source":"iana","compressible":false,"extensions":["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]},"application/oda":{"source":"iana","extensions":["oda"]},"application/odm+xml":{"source":"iana","compressible":true},"application/odx":{"source":"iana"},"application/oebps-package+xml":{"source":"iana","compressible":true,"extensions":["opf"]},"application/ogg":{"source":"iana","compressible":false,"extensions":["ogx"]},"application/omdoc+xml":{"source":"apache","compressible":true,"extensions":["omdoc"]},"application/onenote":{"source":"apache","extensions":["onetoc","onetoc2","onetmp","onepkg"]},"application/opc-nodeset+xml":{"source":"iana","compressible":true},"application/oscore":{"source":"iana"},"application/oxps":{"source":"iana","extensions":["oxps"]},"application/p21":{"source":"iana"},"application/p21+zip":{"source":"iana","compressible":false},"application/p2p-overlay+xml":{"source":"iana","compressible":true,"extensions":["relo"]},"application/parityfec":{"source":"iana"},"application/passport":{"source":"iana"},"application/patch-ops-error+xml":{"source":"iana","compressible":true,"extensions":["xer"]},"application/pdf":{"source":"iana","compressible":false,"extensions":["pdf"]},"application/pdx":{"source":"iana"},"application/pem-certificate-chain":{"source":"iana"},"application/pgp-encrypted":{"source":"iana","compressible":false,"extensions":["pgp"]},"application/pgp-keys":{"source":"iana","extensions":["asc"]},"application/pgp-signature":{"source":"iana","extensions":["asc","sig"]},"application/pics-rules":{"source":"apache","extensions":["prf"]},"application/pidf+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/pidf-diff+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/pkcs10":{"source":"iana","extensions":["p10"]},"application/pkcs12":{"source":"iana"},"application/pkcs7-mime":{"source":"iana","extensions":["p7m","p7c"]},"application/pkcs7-signature":{"source":"iana","extensions":["p7s"]},"application/pkcs8":{"source":"iana","extensions":["p8"]},"application/pkcs8-encrypted":{"source":"iana"},"application/pkix-attr-cert":{"source":"iana","extensions":["ac"]},"application/pkix-cert":{"source":"iana","extensions":["cer"]},"application/pkix-crl":{"source":"iana","extensions":["crl"]},"application/pkix-pkipath":{"source":"iana","extensions":["pkipath"]},"application/pkixcmp":{"source":"iana","extensions":["pki"]},"application/pls+xml":{"source":"iana","compressible":true,"extensions":["pls"]},"application/poc-settings+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/postscript":{"source":"iana","compressible":true,"extensions":["ai","eps","ps"]},"application/ppsp-tracker+json":{"source":"iana","compressible":true},"application/problem+json":{"source":"iana","compressible":true},"application/problem+xml":{"source":"iana","compressible":true},"application/provenance+xml":{"source":"iana","compressible":true,"extensions":["provx"]},"application/prs.alvestrand.titrax-sheet":{"source":"iana"},"application/prs.cww":{"source":"iana","extensions":["cww"]},"application/prs.cyn":{"source":"iana","charset":"7-BIT"},"application/prs.hpub+zip":{"source":"iana","compressible":false},"application/prs.nprend":{"source":"iana"},"application/prs.plucker":{"source":"iana"},"application/prs.rdf-xml-crypt":{"source":"iana"},"application/prs.xsf+xml":{"source":"iana","compressible":true},"application/pskc+xml":{"source":"iana","compressible":true,"extensions":["pskcxml"]},"application/pvd+json":{"source":"iana","compressible":true},"application/qsig":{"source":"iana"},"application/raml+yaml":{"compressible":true,"extensions":["raml"]},"application/raptorfec":{"source":"iana"},"application/rdap+json":{"source":"iana","compressible":true},"application/rdf+xml":{"source":"iana","compressible":true,"extensions":["rdf","owl"]},"application/reginfo+xml":{"source":"iana","compressible":true,"extensions":["rif"]},"application/relax-ng-compact-syntax":{"source":"iana","extensions":["rnc"]},"application/remote-printing":{"source":"iana"},"application/reputon+json":{"source":"iana","compressible":true},"application/resource-lists+xml":{"source":"iana","compressible":true,"extensions":["rl"]},"application/resource-lists-diff+xml":{"source":"iana","compressible":true,"extensions":["rld"]},"application/rfc+xml":{"source":"iana","compressible":true},"application/riscos":{"source":"iana"},"application/rlmi+xml":{"source":"iana","compressible":true},"application/rls-services+xml":{"source":"iana","compressible":true,"extensions":["rs"]},"application/route-apd+xml":{"source":"iana","compressible":true,"extensions":["rapd"]},"application/route-s-tsid+xml":{"source":"iana","compressible":true,"extensions":["sls"]},"application/route-usd+xml":{"source":"iana","compressible":true,"extensions":["rusd"]},"application/rpki-ghostbusters":{"source":"iana","extensions":["gbr"]},"application/rpki-manifest":{"source":"iana","extensions":["mft"]},"application/rpki-publication":{"source":"iana"},"application/rpki-roa":{"source":"iana","extensions":["roa"]},"application/rpki-updown":{"source":"iana"},"application/rsd+xml":{"source":"apache","compressible":true,"extensions":["rsd"]},"application/rss+xml":{"source":"apache","compressible":true,"extensions":["rss"]},"application/rtf":{"source":"iana","compressible":true,"extensions":["rtf"]},"application/rtploopback":{"source":"iana"},"application/rtx":{"source":"iana"},"application/samlassertion+xml":{"source":"iana","compressible":true},"application/samlmetadata+xml":{"source":"iana","compressible":true},"application/sarif+json":{"source":"iana","compressible":true},"application/sarif-external-properties+json":{"source":"iana","compressible":true},"application/sbe":{"source":"iana"},"application/sbml+xml":{"source":"iana","compressible":true,"extensions":["sbml"]},"application/scaip+xml":{"source":"iana","compressible":true},"application/scim+json":{"source":"iana","compressible":true},"application/scvp-cv-request":{"source":"iana","extensions":["scq"]},"application/scvp-cv-response":{"source":"iana","extensions":["scs"]},"application/scvp-vp-request":{"source":"iana","extensions":["spq"]},"application/scvp-vp-response":{"source":"iana","extensions":["spp"]},"application/sdp":{"source":"iana","extensions":["sdp"]},"application/secevent+jwt":{"source":"iana"},"application/senml+cbor":{"source":"iana"},"application/senml+json":{"source":"iana","compressible":true},"application/senml+xml":{"source":"iana","compressible":true,"extensions":["senmlx"]},"application/senml-etch+cbor":{"source":"iana"},"application/senml-etch+json":{"source":"iana","compressible":true},"application/senml-exi":{"source":"iana"},"application/sensml+cbor":{"source":"iana"},"application/sensml+json":{"source":"iana","compressible":true},"application/sensml+xml":{"source":"iana","compressible":true,"extensions":["sensmlx"]},"application/sensml-exi":{"source":"iana"},"application/sep+xml":{"source":"iana","compressible":true},"application/sep-exi":{"source":"iana"},"application/session-info":{"source":"iana"},"application/set-payment":{"source":"iana"},"application/set-payment-initiation":{"source":"iana","extensions":["setpay"]},"application/set-registration":{"source":"iana"},"application/set-registration-initiation":{"source":"iana","extensions":["setreg"]},"application/sgml":{"source":"iana"},"application/sgml-open-catalog":{"source":"iana"},"application/shf+xml":{"source":"iana","compressible":true,"extensions":["shf"]},"application/sieve":{"source":"iana","extensions":["siv","sieve"]},"application/simple-filter+xml":{"source":"iana","compressible":true},"application/simple-message-summary":{"source":"iana"},"application/simplesymbolcontainer":{"source":"iana"},"application/sipc":{"source":"iana"},"application/slate":{"source":"iana"},"application/smil":{"source":"iana"},"application/smil+xml":{"source":"iana","compressible":true,"extensions":["smi","smil"]},"application/smpte336m":{"source":"iana"},"application/soap+fastinfoset":{"source":"iana"},"application/soap+xml":{"source":"iana","compressible":true},"application/sparql-query":{"source":"iana","extensions":["rq"]},"application/sparql-results+xml":{"source":"iana","compressible":true,"extensions":["srx"]},"application/spdx+json":{"source":"iana","compressible":true},"application/spirits-event+xml":{"source":"iana","compressible":true},"application/sql":{"source":"iana"},"application/srgs":{"source":"iana","extensions":["gram"]},"application/srgs+xml":{"source":"iana","compressible":true,"extensions":["grxml"]},"application/sru+xml":{"source":"iana","compressible":true,"extensions":["sru"]},"application/ssdl+xml":{"source":"apache","compressible":true,"extensions":["ssdl"]},"application/ssml+xml":{"source":"iana","compressible":true,"extensions":["ssml"]},"application/stix+json":{"source":"iana","compressible":true},"application/swid+xml":{"source":"iana","compressible":true,"extensions":["swidtag"]},"application/tamp-apex-update":{"source":"iana"},"application/tamp-apex-update-confirm":{"source":"iana"},"application/tamp-community-update":{"source":"iana"},"application/tamp-community-update-confirm":{"source":"iana"},"application/tamp-error":{"source":"iana"},"application/tamp-sequence-adjust":{"source":"iana"},"application/tamp-sequence-adjust-confirm":{"source":"iana"},"application/tamp-status-query":{"source":"iana"},"application/tamp-status-response":{"source":"iana"},"application/tamp-update":{"source":"iana"},"application/tamp-update-confirm":{"source":"iana"},"application/tar":{"compressible":true},"application/taxii+json":{"source":"iana","compressible":true},"application/td+json":{"source":"iana","compressible":true},"application/tei+xml":{"source":"iana","compressible":true,"extensions":["tei","teicorpus"]},"application/tetra_isi":{"source":"iana"},"application/thraud+xml":{"source":"iana","compressible":true,"extensions":["tfi"]},"application/timestamp-query":{"source":"iana"},"application/timestamp-reply":{"source":"iana"},"application/timestamped-data":{"source":"iana","extensions":["tsd"]},"application/tlsrpt+gzip":{"source":"iana"},"application/tlsrpt+json":{"source":"iana","compressible":true},"application/tnauthlist":{"source":"iana"},"application/token-introspection+jwt":{"source":"iana"},"application/toml":{"compressible":true,"extensions":["toml"]},"application/trickle-ice-sdpfrag":{"source":"iana"},"application/trig":{"source":"iana","extensions":["trig"]},"application/ttml+xml":{"source":"iana","compressible":true,"extensions":["ttml"]},"application/tve-trigger":{"source":"iana"},"application/tzif":{"source":"iana"},"application/tzif-leap":{"source":"iana"},"application/ubjson":{"compressible":false,"extensions":["ubj"]},"application/ulpfec":{"source":"iana"},"application/urc-grpsheet+xml":{"source":"iana","compressible":true},"application/urc-ressheet+xml":{"source":"iana","compressible":true,"extensions":["rsheet"]},"application/urc-targetdesc+xml":{"source":"iana","compressible":true,"extensions":["td"]},"application/urc-uisocketdesc+xml":{"source":"iana","compressible":true},"application/vcard+json":{"source":"iana","compressible":true},"application/vcard+xml":{"source":"iana","compressible":true},"application/vemmi":{"source":"iana"},"application/vividence.scriptfile":{"source":"apache"},"application/vnd.1000minds.decision-model+xml":{"source":"iana","compressible":true,"extensions":["1km"]},"application/vnd.3gpp-prose+xml":{"source":"iana","compressible":true},"application/vnd.3gpp-prose-pc3ch+xml":{"source":"iana","compressible":true},"application/vnd.3gpp-v2x-local-service-information":{"source":"iana"},"application/vnd.3gpp.5gnas":{"source":"iana"},"application/vnd.3gpp.access-transfer-events+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.bsf+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.gmop+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.gtpc":{"source":"iana"},"application/vnd.3gpp.interworking-data":{"source":"iana"},"application/vnd.3gpp.lpp":{"source":"iana"},"application/vnd.3gpp.mc-signalling-ear":{"source":"iana"},"application/vnd.3gpp.mcdata-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-payload":{"source":"iana"},"application/vnd.3gpp.mcdata-service-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-signalling":{"source":"iana"},"application/vnd.3gpp.mcdata-ue-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-user-profile+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-floor-request+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-location-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-mbms-usage-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-service-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-signed+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-ue-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-ue-init-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-user-profile+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-affiliation-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-location-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-mbms-usage-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-service-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-transmission-request+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-ue-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-user-profile+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mid-call+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.ngap":{"source":"iana"},"application/vnd.3gpp.pfcp":{"source":"iana"},"application/vnd.3gpp.pic-bw-large":{"source":"iana","extensions":["plb"]},"application/vnd.3gpp.pic-bw-small":{"source":"iana","extensions":["psb"]},"application/vnd.3gpp.pic-bw-var":{"source":"iana","extensions":["pvb"]},"application/vnd.3gpp.s1ap":{"source":"iana"},"application/vnd.3gpp.sms":{"source":"iana"},"application/vnd.3gpp.sms+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.srvcc-ext+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.srvcc-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.state-and-event-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.ussd+xml":{"source":"iana","compressible":true},"application/vnd.3gpp2.bcmcsinfo+xml":{"source":"iana","compressible":true},"application/vnd.3gpp2.sms":{"source":"iana"},"application/vnd.3gpp2.tcap":{"source":"iana","extensions":["tcap"]},"application/vnd.3lightssoftware.imagescal":{"source":"iana"},"application/vnd.3m.post-it-notes":{"source":"iana","extensions":["pwn"]},"application/vnd.accpac.simply.aso":{"source":"iana","extensions":["aso"]},"application/vnd.accpac.simply.imp":{"source":"iana","extensions":["imp"]},"application/vnd.acucobol":{"source":"iana","extensions":["acu"]},"application/vnd.acucorp":{"source":"iana","extensions":["atc","acutc"]},"application/vnd.adobe.air-application-installer-package+zip":{"source":"apache","compressible":false,"extensions":["air"]},"application/vnd.adobe.flash.movie":{"source":"iana"},"application/vnd.adobe.formscentral.fcdt":{"source":"iana","extensions":["fcdt"]},"application/vnd.adobe.fxp":{"source":"iana","extensions":["fxp","fxpl"]},"application/vnd.adobe.partial-upload":{"source":"iana"},"application/vnd.adobe.xdp+xml":{"source":"iana","compressible":true,"extensions":["xdp"]},"application/vnd.adobe.xfdf":{"source":"iana","extensions":["xfdf"]},"application/vnd.aether.imp":{"source":"iana"},"application/vnd.afpc.afplinedata":{"source":"iana"},"application/vnd.afpc.afplinedata-pagedef":{"source":"iana"},"application/vnd.afpc.cmoca-cmresource":{"source":"iana"},"application/vnd.afpc.foca-charset":{"source":"iana"},"application/vnd.afpc.foca-codedfont":{"source":"iana"},"application/vnd.afpc.foca-codepage":{"source":"iana"},"application/vnd.afpc.modca":{"source":"iana"},"application/vnd.afpc.modca-cmtable":{"source":"iana"},"application/vnd.afpc.modca-formdef":{"source":"iana"},"application/vnd.afpc.modca-mediummap":{"source":"iana"},"application/vnd.afpc.modca-objectcontainer":{"source":"iana"},"application/vnd.afpc.modca-overlay":{"source":"iana"},"application/vnd.afpc.modca-pagesegment":{"source":"iana"},"application/vnd.age":{"source":"iana","extensions":["age"]},"application/vnd.ah-barcode":{"source":"iana"},"application/vnd.ahead.space":{"source":"iana","extensions":["ahead"]},"application/vnd.airzip.filesecure.azf":{"source":"iana","extensions":["azf"]},"application/vnd.airzip.filesecure.azs":{"source":"iana","extensions":["azs"]},"application/vnd.amadeus+json":{"source":"iana","compressible":true},"application/vnd.amazon.ebook":{"source":"apache","extensions":["azw"]},"application/vnd.amazon.mobi8-ebook":{"source":"iana"},"application/vnd.americandynamics.acc":{"source":"iana","extensions":["acc"]},"application/vnd.amiga.ami":{"source":"iana","extensions":["ami"]},"application/vnd.amundsen.maze+xml":{"source":"iana","compressible":true},"application/vnd.android.ota":{"source":"iana"},"application/vnd.android.package-archive":{"source":"apache","compressible":false,"extensions":["apk"]},"application/vnd.anki":{"source":"iana"},"application/vnd.anser-web-certificate-issue-initiation":{"source":"iana","extensions":["cii"]},"application/vnd.anser-web-funds-transfer-initiation":{"source":"apache","extensions":["fti"]},"application/vnd.antix.game-component":{"source":"iana","extensions":["atx"]},"application/vnd.apache.arrow.file":{"source":"iana"},"application/vnd.apache.arrow.stream":{"source":"iana"},"application/vnd.apache.thrift.binary":{"source":"iana"},"application/vnd.apache.thrift.compact":{"source":"iana"},"application/vnd.apache.thrift.json":{"source":"iana"},"application/vnd.api+json":{"source":"iana","compressible":true},"application/vnd.aplextor.warrp+json":{"source":"iana","compressible":true},"application/vnd.apothekende.reservation+json":{"source":"iana","compressible":true},"application/vnd.apple.installer+xml":{"source":"iana","compressible":true,"extensions":["mpkg"]},"application/vnd.apple.keynote":{"source":"iana","extensions":["key"]},"application/vnd.apple.mpegurl":{"source":"iana","extensions":["m3u8"]},"application/vnd.apple.numbers":{"source":"iana","extensions":["numbers"]},"application/vnd.apple.pages":{"source":"iana","extensions":["pages"]},"application/vnd.apple.pkpass":{"compressible":false,"extensions":["pkpass"]},"application/vnd.arastra.swi":{"source":"iana"},"application/vnd.aristanetworks.swi":{"source":"iana","extensions":["swi"]},"application/vnd.artisan+json":{"source":"iana","compressible":true},"application/vnd.artsquare":{"source":"iana"},"application/vnd.astraea-software.iota":{"source":"iana","extensions":["iota"]},"application/vnd.audiograph":{"source":"iana","extensions":["aep"]},"application/vnd.autopackage":{"source":"iana"},"application/vnd.avalon+json":{"source":"iana","compressible":true},"application/vnd.avistar+xml":{"source":"iana","compressible":true},"application/vnd.balsamiq.bmml+xml":{"source":"iana","compressible":true,"extensions":["bmml"]},"application/vnd.balsamiq.bmpr":{"source":"iana"},"application/vnd.banana-accounting":{"source":"iana"},"application/vnd.bbf.usp.error":{"source":"iana"},"application/vnd.bbf.usp.msg":{"source":"iana"},"application/vnd.bbf.usp.msg+json":{"source":"iana","compressible":true},"application/vnd.bekitzur-stech+json":{"source":"iana","compressible":true},"application/vnd.bint.med-content":{"source":"iana"},"application/vnd.biopax.rdf+xml":{"source":"iana","compressible":true},"application/vnd.blink-idb-value-wrapper":{"source":"iana"},"application/vnd.blueice.multipass":{"source":"iana","extensions":["mpm"]},"application/vnd.bluetooth.ep.oob":{"source":"iana"},"application/vnd.bluetooth.le.oob":{"source":"iana"},"application/vnd.bmi":{"source":"iana","extensions":["bmi"]},"application/vnd.bpf":{"source":"iana"},"application/vnd.bpf3":{"source":"iana"},"application/vnd.businessobjects":{"source":"iana","extensions":["rep"]},"application/vnd.byu.uapi+json":{"source":"iana","compressible":true},"application/vnd.cab-jscript":{"source":"iana"},"application/vnd.canon-cpdl":{"source":"iana"},"application/vnd.canon-lips":{"source":"iana"},"application/vnd.capasystems-pg+json":{"source":"iana","compressible":true},"application/vnd.cendio.thinlinc.clientconf":{"source":"iana"},"application/vnd.century-systems.tcp_stream":{"source":"iana"},"application/vnd.chemdraw+xml":{"source":"iana","compressible":true,"extensions":["cdxml"]},"application/vnd.chess-pgn":{"source":"iana"},"application/vnd.chipnuts.karaoke-mmd":{"source":"iana","extensions":["mmd"]},"application/vnd.ciedi":{"source":"iana"},"application/vnd.cinderella":{"source":"iana","extensions":["cdy"]},"application/vnd.cirpack.isdn-ext":{"source":"iana"},"application/vnd.citationstyles.style+xml":{"source":"iana","compressible":true,"extensions":["csl"]},"application/vnd.claymore":{"source":"iana","extensions":["cla"]},"application/vnd.cloanto.rp9":{"source":"iana","extensions":["rp9"]},"application/vnd.clonk.c4group":{"source":"iana","extensions":["c4g","c4d","c4f","c4p","c4u"]},"application/vnd.cluetrust.cartomobile-config":{"source":"iana","extensions":["c11amc"]},"application/vnd.cluetrust.cartomobile-config-pkg":{"source":"iana","extensions":["c11amz"]},"application/vnd.coffeescript":{"source":"iana"},"application/vnd.collabio.xodocuments.document":{"source":"iana"},"application/vnd.collabio.xodocuments.document-template":{"source":"iana"},"application/vnd.collabio.xodocuments.presentation":{"source":"iana"},"application/vnd.collabio.xodocuments.presentation-template":{"source":"iana"},"application/vnd.collabio.xodocuments.spreadsheet":{"source":"iana"},"application/vnd.collabio.xodocuments.spreadsheet-template":{"source":"iana"},"application/vnd.collection+json":{"source":"iana","compressible":true},"application/vnd.collection.doc+json":{"source":"iana","compressible":true},"application/vnd.collection.next+json":{"source":"iana","compressible":true},"application/vnd.comicbook+zip":{"source":"iana","compressible":false},"application/vnd.comicbook-rar":{"source":"iana"},"application/vnd.commerce-battelle":{"source":"iana"},"application/vnd.commonspace":{"source":"iana","extensions":["csp"]},"application/vnd.contact.cmsg":{"source":"iana","extensions":["cdbcmsg"]},"application/vnd.coreos.ignition+json":{"source":"iana","compressible":true},"application/vnd.cosmocaller":{"source":"iana","extensions":["cmc"]},"application/vnd.crick.clicker":{"source":"iana","extensions":["clkx"]},"application/vnd.crick.clicker.keyboard":{"source":"iana","extensions":["clkk"]},"application/vnd.crick.clicker.palette":{"source":"iana","extensions":["clkp"]},"application/vnd.crick.clicker.template":{"source":"iana","extensions":["clkt"]},"application/vnd.crick.clicker.wordbank":{"source":"iana","extensions":["clkw"]},"application/vnd.criticaltools.wbs+xml":{"source":"iana","compressible":true,"extensions":["wbs"]},"application/vnd.cryptii.pipe+json":{"source":"iana","compressible":true},"application/vnd.crypto-shade-file":{"source":"iana"},"application/vnd.cryptomator.encrypted":{"source":"iana"},"application/vnd.cryptomator.vault":{"source":"iana"},"application/vnd.ctc-posml":{"source":"iana","extensions":["pml"]},"application/vnd.ctct.ws+xml":{"source":"iana","compressible":true},"application/vnd.cups-pdf":{"source":"iana"},"application/vnd.cups-postscript":{"source":"iana"},"application/vnd.cups-ppd":{"source":"iana","extensions":["ppd"]},"application/vnd.cups-raster":{"source":"iana"},"application/vnd.cups-raw":{"source":"iana"},"application/vnd.curl":{"source":"iana"},"application/vnd.curl.car":{"source":"apache","extensions":["car"]},"application/vnd.curl.pcurl":{"source":"apache","extensions":["pcurl"]},"application/vnd.cyan.dean.root+xml":{"source":"iana","compressible":true},"application/vnd.cybank":{"source":"iana"},"application/vnd.cyclonedx+json":{"source":"iana","compressible":true},"application/vnd.cyclonedx+xml":{"source":"iana","compressible":true},"application/vnd.d2l.coursepackage1p0+zip":{"source":"iana","compressible":false},"application/vnd.d3m-dataset":{"source":"iana"},"application/vnd.d3m-problem":{"source":"iana"},"application/vnd.dart":{"source":"iana","compressible":true,"extensions":["dart"]},"application/vnd.data-vision.rdz":{"source":"iana","extensions":["rdz"]},"application/vnd.datapackage+json":{"source":"iana","compressible":true},"application/vnd.dataresource+json":{"source":"iana","compressible":true},"application/vnd.dbf":{"source":"iana","extensions":["dbf"]},"application/vnd.debian.binary-package":{"source":"iana"},"application/vnd.dece.data":{"source":"iana","extensions":["uvf","uvvf","uvd","uvvd"]},"application/vnd.dece.ttml+xml":{"source":"iana","compressible":true,"extensions":["uvt","uvvt"]},"application/vnd.dece.unspecified":{"source":"iana","extensions":["uvx","uvvx"]},"application/vnd.dece.zip":{"source":"iana","extensions":["uvz","uvvz"]},"application/vnd.denovo.fcselayout-link":{"source":"iana","extensions":["fe_launch"]},"application/vnd.desmume.movie":{"source":"iana"},"application/vnd.dir-bi.plate-dl-nosuffix":{"source":"iana"},"application/vnd.dm.delegation+xml":{"source":"iana","compressible":true},"application/vnd.dna":{"source":"iana","extensions":["dna"]},"application/vnd.document+json":{"source":"iana","compressible":true},"application/vnd.dolby.mlp":{"source":"apache","extensions":["mlp"]},"application/vnd.dolby.mobile.1":{"source":"iana"},"application/vnd.dolby.mobile.2":{"source":"iana"},"application/vnd.doremir.scorecloud-binary-document":{"source":"iana"},"application/vnd.dpgraph":{"source":"iana","extensions":["dpg"]},"application/vnd.dreamfactory":{"source":"iana","extensions":["dfac"]},"application/vnd.drive+json":{"source":"iana","compressible":true},"application/vnd.ds-keypoint":{"source":"apache","extensions":["kpxx"]},"application/vnd.dtg.local":{"source":"iana"},"application/vnd.dtg.local.flash":{"source":"iana"},"application/vnd.dtg.local.html":{"source":"iana"},"application/vnd.dvb.ait":{"source":"iana","extensions":["ait"]},"application/vnd.dvb.dvbisl+xml":{"source":"iana","compressible":true},"application/vnd.dvb.dvbj":{"source":"iana"},"application/vnd.dvb.esgcontainer":{"source":"iana"},"application/vnd.dvb.ipdcdftnotifaccess":{"source":"iana"},"application/vnd.dvb.ipdcesgaccess":{"source":"iana"},"application/vnd.dvb.ipdcesgaccess2":{"source":"iana"},"application/vnd.dvb.ipdcesgpdd":{"source":"iana"},"application/vnd.dvb.ipdcroaming":{"source":"iana"},"application/vnd.dvb.iptv.alfec-base":{"source":"iana"},"application/vnd.dvb.iptv.alfec-enhancement":{"source":"iana"},"application/vnd.dvb.notif-aggregate-root+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-container+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-generic+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-msglist+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-registration-request+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-registration-response+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-init+xml":{"source":"iana","compressible":true},"application/vnd.dvb.pfr":{"source":"iana"},"application/vnd.dvb.service":{"source":"iana","extensions":["svc"]},"application/vnd.dxr":{"source":"iana"},"application/vnd.dynageo":{"source":"iana","extensions":["geo"]},"application/vnd.dzr":{"source":"iana"},"application/vnd.easykaraoke.cdgdownload":{"source":"iana"},"application/vnd.ecdis-update":{"source":"iana"},"application/vnd.ecip.rlp":{"source":"iana"},"application/vnd.eclipse.ditto+json":{"source":"iana","compressible":true},"application/vnd.ecowin.chart":{"source":"iana","extensions":["mag"]},"application/vnd.ecowin.filerequest":{"source":"iana"},"application/vnd.ecowin.fileupdate":{"source":"iana"},"application/vnd.ecowin.series":{"source":"iana"},"application/vnd.ecowin.seriesrequest":{"source":"iana"},"application/vnd.ecowin.seriesupdate":{"source":"iana"},"application/vnd.efi.img":{"source":"iana"},"application/vnd.efi.iso":{"source":"iana"},"application/vnd.emclient.accessrequest+xml":{"source":"iana","compressible":true},"application/vnd.enliven":{"source":"iana","extensions":["nml"]},"application/vnd.enphase.envoy":{"source":"iana"},"application/vnd.eprints.data+xml":{"source":"iana","compressible":true},"application/vnd.epson.esf":{"source":"iana","extensions":["esf"]},"application/vnd.epson.msf":{"source":"iana","extensions":["msf"]},"application/vnd.epson.quickanime":{"source":"iana","extensions":["qam"]},"application/vnd.epson.salt":{"source":"iana","extensions":["slt"]},"application/vnd.epson.ssf":{"source":"iana","extensions":["ssf"]},"application/vnd.ericsson.quickcall":{"source":"iana"},"application/vnd.espass-espass+zip":{"source":"iana","compressible":false},"application/vnd.eszigno3+xml":{"source":"iana","compressible":true,"extensions":["es3","et3"]},"application/vnd.etsi.aoc+xml":{"source":"iana","compressible":true},"application/vnd.etsi.asic-e+zip":{"source":"iana","compressible":false},"application/vnd.etsi.asic-s+zip":{"source":"iana","compressible":false},"application/vnd.etsi.cug+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvcommand+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvdiscovery+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvprofile+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-bc+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-cod+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-npvr+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvservice+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsync+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvueprofile+xml":{"source":"iana","compressible":true},"application/vnd.etsi.mcid+xml":{"source":"iana","compressible":true},"application/vnd.etsi.mheg5":{"source":"iana"},"application/vnd.etsi.overload-control-policy-dataset+xml":{"source":"iana","compressible":true},"application/vnd.etsi.pstn+xml":{"source":"iana","compressible":true},"application/vnd.etsi.sci+xml":{"source":"iana","compressible":true},"application/vnd.etsi.simservs+xml":{"source":"iana","compressible":true},"application/vnd.etsi.timestamp-token":{"source":"iana"},"application/vnd.etsi.tsl+xml":{"source":"iana","compressible":true},"application/vnd.etsi.tsl.der":{"source":"iana"},"application/vnd.eu.kasparian.car+json":{"source":"iana","compressible":true},"application/vnd.eudora.data":{"source":"iana"},"application/vnd.evolv.ecig.profile":{"source":"iana"},"application/vnd.evolv.ecig.settings":{"source":"iana"},"application/vnd.evolv.ecig.theme":{"source":"iana"},"application/vnd.exstream-empower+zip":{"source":"iana","compressible":false},"application/vnd.exstream-package":{"source":"iana"},"application/vnd.ezpix-album":{"source":"iana","extensions":["ez2"]},"application/vnd.ezpix-package":{"source":"iana","extensions":["ez3"]},"application/vnd.f-secure.mobile":{"source":"iana"},"application/vnd.familysearch.gedcom+zip":{"source":"iana","compressible":false},"application/vnd.fastcopy-disk-image":{"source":"iana"},"application/vnd.fdf":{"source":"iana","extensions":["fdf"]},"application/vnd.fdsn.mseed":{"source":"iana","extensions":["mseed"]},"application/vnd.fdsn.seed":{"source":"iana","extensions":["seed","dataless"]},"application/vnd.ffsns":{"source":"iana"},"application/vnd.ficlab.flb+zip":{"source":"iana","compressible":false},"application/vnd.filmit.zfc":{"source":"iana"},"application/vnd.fints":{"source":"iana"},"application/vnd.firemonkeys.cloudcell":{"source":"iana"},"application/vnd.flographit":{"source":"iana","extensions":["gph"]},"application/vnd.fluxtime.clip":{"source":"iana","extensions":["ftc"]},"application/vnd.font-fontforge-sfd":{"source":"iana"},"application/vnd.framemaker":{"source":"iana","extensions":["fm","frame","maker","book"]},"application/vnd.frogans.fnc":{"source":"iana","extensions":["fnc"]},"application/vnd.frogans.ltf":{"source":"iana","extensions":["ltf"]},"application/vnd.fsc.weblaunch":{"source":"iana","extensions":["fsc"]},"application/vnd.fujifilm.fb.docuworks":{"source":"iana"},"application/vnd.fujifilm.fb.docuworks.binder":{"source":"iana"},"application/vnd.fujifilm.fb.docuworks.container":{"source":"iana"},"application/vnd.fujifilm.fb.jfi+xml":{"source":"iana","compressible":true},"application/vnd.fujitsu.oasys":{"source":"iana","extensions":["oas"]},"application/vnd.fujitsu.oasys2":{"source":"iana","extensions":["oa2"]},"application/vnd.fujitsu.oasys3":{"source":"iana","extensions":["oa3"]},"application/vnd.fujitsu.oasysgp":{"source":"iana","extensions":["fg5"]},"application/vnd.fujitsu.oasysprs":{"source":"iana","extensions":["bh2"]},"application/vnd.fujixerox.art-ex":{"source":"iana"},"application/vnd.fujixerox.art4":{"source":"iana"},"application/vnd.fujixerox.ddd":{"source":"iana","extensions":["ddd"]},"application/vnd.fujixerox.docuworks":{"source":"iana","extensions":["xdw"]},"application/vnd.fujixerox.docuworks.binder":{"source":"iana","extensions":["xbd"]},"application/vnd.fujixerox.docuworks.container":{"source":"iana"},"application/vnd.fujixerox.hbpl":{"source":"iana"},"application/vnd.fut-misnet":{"source":"iana"},"application/vnd.futoin+cbor":{"source":"iana"},"application/vnd.futoin+json":{"source":"iana","compressible":true},"application/vnd.fuzzysheet":{"source":"iana","extensions":["fzs"]},"application/vnd.genomatix.tuxedo":{"source":"iana","extensions":["txd"]},"application/vnd.gentics.grd+json":{"source":"iana","compressible":true},"application/vnd.geo+json":{"source":"iana","compressible":true},"application/vnd.geocube+xml":{"source":"iana","compressible":true},"application/vnd.geogebra.file":{"source":"iana","extensions":["ggb"]},"application/vnd.geogebra.slides":{"source":"iana"},"application/vnd.geogebra.tool":{"source":"iana","extensions":["ggt"]},"application/vnd.geometry-explorer":{"source":"iana","extensions":["gex","gre"]},"application/vnd.geonext":{"source":"iana","extensions":["gxt"]},"application/vnd.geoplan":{"source":"iana","extensions":["g2w"]},"application/vnd.geospace":{"source":"iana","extensions":["g3w"]},"application/vnd.gerber":{"source":"iana"},"application/vnd.globalplatform.card-content-mgt":{"source":"iana"},"application/vnd.globalplatform.card-content-mgt-response":{"source":"iana"},"application/vnd.gmx":{"source":"iana","extensions":["gmx"]},"application/vnd.google-apps.document":{"compressible":false,"extensions":["gdoc"]},"application/vnd.google-apps.presentation":{"compressible":false,"extensions":["gslides"]},"application/vnd.google-apps.spreadsheet":{"compressible":false,"extensions":["gsheet"]},"application/vnd.google-earth.kml+xml":{"source":"iana","compressible":true,"extensions":["kml"]},"application/vnd.google-earth.kmz":{"source":"iana","compressible":false,"extensions":["kmz"]},"application/vnd.gov.sk.e-form+xml":{"source":"iana","compressible":true},"application/vnd.gov.sk.e-form+zip":{"source":"iana","compressible":false},"application/vnd.gov.sk.xmldatacontainer+xml":{"source":"iana","compressible":true},"application/vnd.grafeq":{"source":"iana","extensions":["gqf","gqs"]},"application/vnd.gridmp":{"source":"iana"},"application/vnd.groove-account":{"source":"iana","extensions":["gac"]},"application/vnd.groove-help":{"source":"iana","extensions":["ghf"]},"application/vnd.groove-identity-message":{"source":"iana","extensions":["gim"]},"application/vnd.groove-injector":{"source":"iana","extensions":["grv"]},"application/vnd.groove-tool-message":{"source":"iana","extensions":["gtm"]},"application/vnd.groove-tool-template":{"source":"iana","extensions":["tpl"]},"application/vnd.groove-vcard":{"source":"iana","extensions":["vcg"]},"application/vnd.hal+json":{"source":"iana","compressible":true},"application/vnd.hal+xml":{"source":"iana","compressible":true,"extensions":["hal"]},"application/vnd.handheld-entertainment+xml":{"source":"iana","compressible":true,"extensions":["zmm"]},"application/vnd.hbci":{"source":"iana","extensions":["hbci"]},"application/vnd.hc+json":{"source":"iana","compressible":true},"application/vnd.hcl-bireports":{"source":"iana"},"application/vnd.hdt":{"source":"iana"},"application/vnd.heroku+json":{"source":"iana","compressible":true},"application/vnd.hhe.lesson-player":{"source":"iana","extensions":["les"]},"application/vnd.hl7cda+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.hl7v2+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.hp-hpgl":{"source":"iana","extensions":["hpgl"]},"application/vnd.hp-hpid":{"source":"iana","extensions":["hpid"]},"application/vnd.hp-hps":{"source":"iana","extensions":["hps"]},"application/vnd.hp-jlyt":{"source":"iana","extensions":["jlt"]},"application/vnd.hp-pcl":{"source":"iana","extensions":["pcl"]},"application/vnd.hp-pclxl":{"source":"iana","extensions":["pclxl"]},"application/vnd.httphone":{"source":"iana"},"application/vnd.hydrostatix.sof-data":{"source":"iana","extensions":["sfd-hdstx"]},"application/vnd.hyper+json":{"source":"iana","compressible":true},"application/vnd.hyper-item+json":{"source":"iana","compressible":true},"application/vnd.hyperdrive+json":{"source":"iana","compressible":true},"application/vnd.hzn-3d-crossword":{"source":"iana"},"application/vnd.ibm.afplinedata":{"source":"iana"},"application/vnd.ibm.electronic-media":{"source":"iana"},"application/vnd.ibm.minipay":{"source":"iana","extensions":["mpy"]},"application/vnd.ibm.modcap":{"source":"iana","extensions":["afp","listafp","list3820"]},"application/vnd.ibm.rights-management":{"source":"iana","extensions":["irm"]},"application/vnd.ibm.secure-container":{"source":"iana","extensions":["sc"]},"application/vnd.iccprofile":{"source":"iana","extensions":["icc","icm"]},"application/vnd.ieee.1905":{"source":"iana"},"application/vnd.igloader":{"source":"iana","extensions":["igl"]},"application/vnd.imagemeter.folder+zip":{"source":"iana","compressible":false},"application/vnd.imagemeter.image+zip":{"source":"iana","compressible":false},"application/vnd.immervision-ivp":{"source":"iana","extensions":["ivp"]},"application/vnd.immervision-ivu":{"source":"iana","extensions":["ivu"]},"application/vnd.ims.imsccv1p1":{"source":"iana"},"application/vnd.ims.imsccv1p2":{"source":"iana"},"application/vnd.ims.imsccv1p3":{"source":"iana"},"application/vnd.ims.lis.v2.result+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolconsumerprofile+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolproxy+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolproxy.id+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolsettings+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolsettings.simple+json":{"source":"iana","compressible":true},"application/vnd.informedcontrol.rms+xml":{"source":"iana","compressible":true},"application/vnd.informix-visionary":{"source":"iana"},"application/vnd.infotech.project":{"source":"iana"},"application/vnd.infotech.project+xml":{"source":"iana","compressible":true},"application/vnd.innopath.wamp.notification":{"source":"iana"},"application/vnd.insors.igm":{"source":"iana","extensions":["igm"]},"application/vnd.intercon.formnet":{"source":"iana","extensions":["xpw","xpx"]},"application/vnd.intergeo":{"source":"iana","extensions":["i2g"]},"application/vnd.intertrust.digibox":{"source":"iana"},"application/vnd.intertrust.nncp":{"source":"iana"},"application/vnd.intu.qbo":{"source":"iana","extensions":["qbo"]},"application/vnd.intu.qfx":{"source":"iana","extensions":["qfx"]},"application/vnd.iptc.g2.catalogitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.conceptitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.knowledgeitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.newsitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.newsmessage+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.packageitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.planningitem+xml":{"source":"iana","compressible":true},"application/vnd.ipunplugged.rcprofile":{"source":"iana","extensions":["rcprofile"]},"application/vnd.irepository.package+xml":{"source":"iana","compressible":true,"extensions":["irp"]},"application/vnd.is-xpr":{"source":"iana","extensions":["xpr"]},"application/vnd.isac.fcs":{"source":"iana","extensions":["fcs"]},"application/vnd.iso11783-10+zip":{"source":"iana","compressible":false},"application/vnd.jam":{"source":"iana","extensions":["jam"]},"application/vnd.japannet-directory-service":{"source":"iana"},"application/vnd.japannet-jpnstore-wakeup":{"source":"iana"},"application/vnd.japannet-payment-wakeup":{"source":"iana"},"application/vnd.japannet-registration":{"source":"iana"},"application/vnd.japannet-registration-wakeup":{"source":"iana"},"application/vnd.japannet-setstore-wakeup":{"source":"iana"},"application/vnd.japannet-verification":{"source":"iana"},"application/vnd.japannet-verification-wakeup":{"source":"iana"},"application/vnd.jcp.javame.midlet-rms":{"source":"iana","extensions":["rms"]},"application/vnd.jisp":{"source":"iana","extensions":["jisp"]},"application/vnd.joost.joda-archive":{"source":"iana","extensions":["joda"]},"application/vnd.jsk.isdn-ngn":{"source":"iana"},"application/vnd.kahootz":{"source":"iana","extensions":["ktz","ktr"]},"application/vnd.kde.karbon":{"source":"iana","extensions":["karbon"]},"application/vnd.kde.kchart":{"source":"iana","extensions":["chrt"]},"application/vnd.kde.kformula":{"source":"iana","extensions":["kfo"]},"application/vnd.kde.kivio":{"source":"iana","extensions":["flw"]},"application/vnd.kde.kontour":{"source":"iana","extensions":["kon"]},"application/vnd.kde.kpresenter":{"source":"iana","extensions":["kpr","kpt"]},"application/vnd.kde.kspread":{"source":"iana","extensions":["ksp"]},"application/vnd.kde.kword":{"source":"iana","extensions":["kwd","kwt"]},"application/vnd.kenameaapp":{"source":"iana","extensions":["htke"]},"application/vnd.kidspiration":{"source":"iana","extensions":["kia"]},"application/vnd.kinar":{"source":"iana","extensions":["kne","knp"]},"application/vnd.koan":{"source":"iana","extensions":["skp","skd","skt","skm"]},"application/vnd.kodak-descriptor":{"source":"iana","extensions":["sse"]},"application/vnd.las":{"source":"iana"},"application/vnd.las.las+json":{"source":"iana","compressible":true},"application/vnd.las.las+xml":{"source":"iana","compressible":true,"extensions":["lasxml"]},"application/vnd.laszip":{"source":"iana"},"application/vnd.leap+json":{"source":"iana","compressible":true},"application/vnd.liberty-request+xml":{"source":"iana","compressible":true},"application/vnd.llamagraphics.life-balance.desktop":{"source":"iana","extensions":["lbd"]},"application/vnd.llamagraphics.life-balance.exchange+xml":{"source":"iana","compressible":true,"extensions":["lbe"]},"application/vnd.logipipe.circuit+zip":{"source":"iana","compressible":false},"application/vnd.loom":{"source":"iana"},"application/vnd.lotus-1-2-3":{"source":"iana","extensions":["123"]},"application/vnd.lotus-approach":{"source":"iana","extensions":["apr"]},"application/vnd.lotus-freelance":{"source":"iana","extensions":["pre"]},"application/vnd.lotus-notes":{"source":"iana","extensions":["nsf"]},"application/vnd.lotus-organizer":{"source":"iana","extensions":["org"]},"application/vnd.lotus-screencam":{"source":"iana","extensions":["scm"]},"application/vnd.lotus-wordpro":{"source":"iana","extensions":["lwp"]},"application/vnd.macports.portpkg":{"source":"iana","extensions":["portpkg"]},"application/vnd.mapbox-vector-tile":{"source":"iana","extensions":["mvt"]},"application/vnd.marlin.drm.actiontoken+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.conftoken+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.license+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.mdcf":{"source":"iana"},"application/vnd.mason+json":{"source":"iana","compressible":true},"application/vnd.maxar.archive.3tz+zip":{"source":"iana","compressible":false},"application/vnd.maxmind.maxmind-db":{"source":"iana"},"application/vnd.mcd":{"source":"iana","extensions":["mcd"]},"application/vnd.medcalcdata":{"source":"iana","extensions":["mc1"]},"application/vnd.mediastation.cdkey":{"source":"iana","extensions":["cdkey"]},"application/vnd.meridian-slingshot":{"source":"iana"},"application/vnd.mfer":{"source":"iana","extensions":["mwf"]},"application/vnd.mfmp":{"source":"iana","extensions":["mfm"]},"application/vnd.micro+json":{"source":"iana","compressible":true},"application/vnd.micrografx.flo":{"source":"iana","extensions":["flo"]},"application/vnd.micrografx.igx":{"source":"iana","extensions":["igx"]},"application/vnd.microsoft.portable-executable":{"source":"iana"},"application/vnd.microsoft.windows.thumbnail-cache":{"source":"iana"},"application/vnd.miele+json":{"source":"iana","compressible":true},"application/vnd.mif":{"source":"iana","extensions":["mif"]},"application/vnd.minisoft-hp3000-save":{"source":"iana"},"application/vnd.mitsubishi.misty-guard.trustweb":{"source":"iana"},"application/vnd.mobius.daf":{"source":"iana","extensions":["daf"]},"application/vnd.mobius.dis":{"source":"iana","extensions":["dis"]},"application/vnd.mobius.mbk":{"source":"iana","extensions":["mbk"]},"application/vnd.mobius.mqy":{"source":"iana","extensions":["mqy"]},"application/vnd.mobius.msl":{"source":"iana","extensions":["msl"]},"application/vnd.mobius.plc":{"source":"iana","extensions":["plc"]},"application/vnd.mobius.txf":{"source":"iana","extensions":["txf"]},"application/vnd.mophun.application":{"source":"iana","extensions":["mpn"]},"application/vnd.mophun.certificate":{"source":"iana","extensions":["mpc"]},"application/vnd.motorola.flexsuite":{"source":"iana"},"application/vnd.motorola.flexsuite.adsi":{"source":"iana"},"application/vnd.motorola.flexsuite.fis":{"source":"iana"},"application/vnd.motorola.flexsuite.gotap":{"source":"iana"},"application/vnd.motorola.flexsuite.kmr":{"source":"iana"},"application/vnd.motorola.flexsuite.ttc":{"source":"iana"},"application/vnd.motorola.flexsuite.wem":{"source":"iana"},"application/vnd.motorola.iprm":{"source":"iana"},"application/vnd.mozilla.xul+xml":{"source":"iana","compressible":true,"extensions":["xul"]},"application/vnd.ms-3mfdocument":{"source":"iana"},"application/vnd.ms-artgalry":{"source":"iana","extensions":["cil"]},"application/vnd.ms-asf":{"source":"iana"},"application/vnd.ms-cab-compressed":{"source":"iana","extensions":["cab"]},"application/vnd.ms-color.iccprofile":{"source":"apache"},"application/vnd.ms-excel":{"source":"iana","compressible":false,"extensions":["xls","xlm","xla","xlc","xlt","xlw"]},"application/vnd.ms-excel.addin.macroenabled.12":{"source":"iana","extensions":["xlam"]},"application/vnd.ms-excel.sheet.binary.macroenabled.12":{"source":"iana","extensions":["xlsb"]},"application/vnd.ms-excel.sheet.macroenabled.12":{"source":"iana","extensions":["xlsm"]},"application/vnd.ms-excel.template.macroenabled.12":{"source":"iana","extensions":["xltm"]},"application/vnd.ms-fontobject":{"source":"iana","compressible":true,"extensions":["eot"]},"application/vnd.ms-htmlhelp":{"source":"iana","extensions":["chm"]},"application/vnd.ms-ims":{"source":"iana","extensions":["ims"]},"application/vnd.ms-lrm":{"source":"iana","extensions":["lrm"]},"application/vnd.ms-office.activex+xml":{"source":"iana","compressible":true},"application/vnd.ms-officetheme":{"source":"iana","extensions":["thmx"]},"application/vnd.ms-opentype":{"source":"apache","compressible":true},"application/vnd.ms-outlook":{"compressible":false,"extensions":["msg"]},"application/vnd.ms-package.obfuscated-opentype":{"source":"apache"},"application/vnd.ms-pki.seccat":{"source":"apache","extensions":["cat"]},"application/vnd.ms-pki.stl":{"source":"apache","extensions":["stl"]},"application/vnd.ms-playready.initiator+xml":{"source":"iana","compressible":true},"application/vnd.ms-powerpoint":{"source":"iana","compressible":false,"extensions":["ppt","pps","pot"]},"application/vnd.ms-powerpoint.addin.macroenabled.12":{"source":"iana","extensions":["ppam"]},"application/vnd.ms-powerpoint.presentation.macroenabled.12":{"source":"iana","extensions":["pptm"]},"application/vnd.ms-powerpoint.slide.macroenabled.12":{"source":"iana","extensions":["sldm"]},"application/vnd.ms-powerpoint.slideshow.macroenabled.12":{"source":"iana","extensions":["ppsm"]},"application/vnd.ms-powerpoint.template.macroenabled.12":{"source":"iana","extensions":["potm"]},"application/vnd.ms-printdevicecapabilities+xml":{"source":"iana","compressible":true},"application/vnd.ms-printing.printticket+xml":{"source":"apache","compressible":true},"application/vnd.ms-printschematicket+xml":{"source":"iana","compressible":true},"application/vnd.ms-project":{"source":"iana","extensions":["mpp","mpt"]},"application/vnd.ms-tnef":{"source":"iana"},"application/vnd.ms-windows.devicepairing":{"source":"iana"},"application/vnd.ms-windows.nwprinting.oob":{"source":"iana"},"application/vnd.ms-windows.printerpairing":{"source":"iana"},"application/vnd.ms-windows.wsd.oob":{"source":"iana"},"application/vnd.ms-wmdrm.lic-chlg-req":{"source":"iana"},"application/vnd.ms-wmdrm.lic-resp":{"source":"iana"},"application/vnd.ms-wmdrm.meter-chlg-req":{"source":"iana"},"application/vnd.ms-wmdrm.meter-resp":{"source":"iana"},"application/vnd.ms-word.document.macroenabled.12":{"source":"iana","extensions":["docm"]},"application/vnd.ms-word.template.macroenabled.12":{"source":"iana","extensions":["dotm"]},"application/vnd.ms-works":{"source":"iana","extensions":["wps","wks","wcm","wdb"]},"application/vnd.ms-wpl":{"source":"iana","extensions":["wpl"]},"application/vnd.ms-xpsdocument":{"source":"iana","compressible":false,"extensions":["xps"]},"application/vnd.msa-disk-image":{"source":"iana"},"application/vnd.mseq":{"source":"iana","extensions":["mseq"]},"application/vnd.msign":{"source":"iana"},"application/vnd.multiad.creator":{"source":"iana"},"application/vnd.multiad.creator.cif":{"source":"iana"},"application/vnd.music-niff":{"source":"iana"},"application/vnd.musician":{"source":"iana","extensions":["mus"]},"application/vnd.muvee.style":{"source":"iana","extensions":["msty"]},"application/vnd.mynfc":{"source":"iana","extensions":["taglet"]},"application/vnd.nacamar.ybrid+json":{"source":"iana","compressible":true},"application/vnd.ncd.control":{"source":"iana"},"application/vnd.ncd.reference":{"source":"iana"},"application/vnd.nearst.inv+json":{"source":"iana","compressible":true},"application/vnd.nebumind.line":{"source":"iana"},"application/vnd.nervana":{"source":"iana"},"application/vnd.netfpx":{"source":"iana"},"application/vnd.neurolanguage.nlu":{"source":"iana","extensions":["nlu"]},"application/vnd.nimn":{"source":"iana"},"application/vnd.nintendo.nitro.rom":{"source":"iana"},"application/vnd.nintendo.snes.rom":{"source":"iana"},"application/vnd.nitf":{"source":"iana","extensions":["ntf","nitf"]},"application/vnd.noblenet-directory":{"source":"iana","extensions":["nnd"]},"application/vnd.noblenet-sealer":{"source":"iana","extensions":["nns"]},"application/vnd.noblenet-web":{"source":"iana","extensions":["nnw"]},"application/vnd.nokia.catalogs":{"source":"iana"},"application/vnd.nokia.conml+wbxml":{"source":"iana"},"application/vnd.nokia.conml+xml":{"source":"iana","compressible":true},"application/vnd.nokia.iptv.config+xml":{"source":"iana","compressible":true},"application/vnd.nokia.isds-radio-presets":{"source":"iana"},"application/vnd.nokia.landmark+wbxml":{"source":"iana"},"application/vnd.nokia.landmark+xml":{"source":"iana","compressible":true},"application/vnd.nokia.landmarkcollection+xml":{"source":"iana","compressible":true},"application/vnd.nokia.n-gage.ac+xml":{"source":"iana","compressible":true,"extensions":["ac"]},"application/vnd.nokia.n-gage.data":{"source":"iana","extensions":["ngdat"]},"application/vnd.nokia.n-gage.symbian.install":{"source":"iana","extensions":["n-gage"]},"application/vnd.nokia.ncd":{"source":"iana"},"application/vnd.nokia.pcd+wbxml":{"source":"iana"},"application/vnd.nokia.pcd+xml":{"source":"iana","compressible":true},"application/vnd.nokia.radio-preset":{"source":"iana","extensions":["rpst"]},"application/vnd.nokia.radio-presets":{"source":"iana","extensions":["rpss"]},"application/vnd.novadigm.edm":{"source":"iana","extensions":["edm"]},"application/vnd.novadigm.edx":{"source":"iana","extensions":["edx"]},"application/vnd.novadigm.ext":{"source":"iana","extensions":["ext"]},"application/vnd.ntt-local.content-share":{"source":"iana"},"application/vnd.ntt-local.file-transfer":{"source":"iana"},"application/vnd.ntt-local.ogw_remote-access":{"source":"iana"},"application/vnd.ntt-local.sip-ta_remote":{"source":"iana"},"application/vnd.ntt-local.sip-ta_tcp_stream":{"source":"iana"},"application/vnd.oasis.opendocument.chart":{"source":"iana","extensions":["odc"]},"application/vnd.oasis.opendocument.chart-template":{"source":"iana","extensions":["otc"]},"application/vnd.oasis.opendocument.database":{"source":"iana","extensions":["odb"]},"application/vnd.oasis.opendocument.formula":{"source":"iana","extensions":["odf"]},"application/vnd.oasis.opendocument.formula-template":{"source":"iana","extensions":["odft"]},"application/vnd.oasis.opendocument.graphics":{"source":"iana","compressible":false,"extensions":["odg"]},"application/vnd.oasis.opendocument.graphics-template":{"source":"iana","extensions":["otg"]},"application/vnd.oasis.opendocument.image":{"source":"iana","extensions":["odi"]},"application/vnd.oasis.opendocument.image-template":{"source":"iana","extensions":["oti"]},"application/vnd.oasis.opendocument.presentation":{"source":"iana","compressible":false,"extensions":["odp"]},"application/vnd.oasis.opendocument.presentation-template":{"source":"iana","extensions":["otp"]},"application/vnd.oasis.opendocument.spreadsheet":{"source":"iana","compressible":false,"extensions":["ods"]},"application/vnd.oasis.opendocument.spreadsheet-template":{"source":"iana","extensions":["ots"]},"application/vnd.oasis.opendocument.text":{"source":"iana","compressible":false,"extensions":["odt"]},"application/vnd.oasis.opendocument.text-master":{"source":"iana","extensions":["odm"]},"application/vnd.oasis.opendocument.text-template":{"source":"iana","extensions":["ott"]},"application/vnd.oasis.opendocument.text-web":{"source":"iana","extensions":["oth"]},"application/vnd.obn":{"source":"iana"},"application/vnd.ocf+cbor":{"source":"iana"},"application/vnd.oci.image.manifest.v1+json":{"source":"iana","compressible":true},"application/vnd.oftn.l10n+json":{"source":"iana","compressible":true},"application/vnd.oipf.contentaccessdownload+xml":{"source":"iana","compressible":true},"application/vnd.oipf.contentaccessstreaming+xml":{"source":"iana","compressible":true},"application/vnd.oipf.cspg-hexbinary":{"source":"iana"},"application/vnd.oipf.dae.svg+xml":{"source":"iana","compressible":true},"application/vnd.oipf.dae.xhtml+xml":{"source":"iana","compressible":true},"application/vnd.oipf.mippvcontrolmessage+xml":{"source":"iana","compressible":true},"application/vnd.oipf.pae.gem":{"source":"iana"},"application/vnd.oipf.spdiscovery+xml":{"source":"iana","compressible":true},"application/vnd.oipf.spdlist+xml":{"source":"iana","compressible":true},"application/vnd.oipf.ueprofile+xml":{"source":"iana","compressible":true},"application/vnd.oipf.userprofile+xml":{"source":"iana","compressible":true},"application/vnd.olpc-sugar":{"source":"iana","extensions":["xo"]},"application/vnd.oma-scws-config":{"source":"iana"},"application/vnd.oma-scws-http-request":{"source":"iana"},"application/vnd.oma-scws-http-response":{"source":"iana"},"application/vnd.oma.bcast.associated-procedure-parameter+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.drm-trigger+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.imd+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.ltkm":{"source":"iana"},"application/vnd.oma.bcast.notification+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.provisioningtrigger":{"source":"iana"},"application/vnd.oma.bcast.sgboot":{"source":"iana"},"application/vnd.oma.bcast.sgdd+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.sgdu":{"source":"iana"},"application/vnd.oma.bcast.simple-symbol-container":{"source":"iana"},"application/vnd.oma.bcast.smartcard-trigger+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.sprov+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.stkm":{"source":"iana"},"application/vnd.oma.cab-address-book+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-feature-handler+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-pcc+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-subs-invite+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-user-prefs+xml":{"source":"iana","compressible":true},"application/vnd.oma.dcd":{"source":"iana"},"application/vnd.oma.dcdc":{"source":"iana"},"application/vnd.oma.dd2+xml":{"source":"iana","compressible":true,"extensions":["dd2"]},"application/vnd.oma.drm.risd+xml":{"source":"iana","compressible":true},"application/vnd.oma.group-usage-list+xml":{"source":"iana","compressible":true},"application/vnd.oma.lwm2m+cbor":{"source":"iana"},"application/vnd.oma.lwm2m+json":{"source":"iana","compressible":true},"application/vnd.oma.lwm2m+tlv":{"source":"iana"},"application/vnd.oma.pal+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.detailed-progress-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.final-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.groups+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.invocation-descriptor+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.optimized-progress-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.push":{"source":"iana"},"application/vnd.oma.scidm.messages+xml":{"source":"iana","compressible":true},"application/vnd.oma.xcap-directory+xml":{"source":"iana","compressible":true},"application/vnd.omads-email+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.omads-file+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.omads-folder+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.omaloc-supl-init":{"source":"iana"},"application/vnd.onepager":{"source":"iana"},"application/vnd.onepagertamp":{"source":"iana"},"application/vnd.onepagertamx":{"source":"iana"},"application/vnd.onepagertat":{"source":"iana"},"application/vnd.onepagertatp":{"source":"iana"},"application/vnd.onepagertatx":{"source":"iana"},"application/vnd.openblox.game+xml":{"source":"iana","compressible":true,"extensions":["obgx"]},"application/vnd.openblox.game-binary":{"source":"iana"},"application/vnd.openeye.oeb":{"source":"iana"},"application/vnd.openofficeorg.extension":{"source":"apache","extensions":["oxt"]},"application/vnd.openstreetmap.data+xml":{"source":"iana","compressible":true,"extensions":["osm"]},"application/vnd.opentimestamps.ots":{"source":"iana"},"application/vnd.openxmlformats-officedocument.custom-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.customxmlproperties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawing+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.chart+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.extended-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.presentation":{"source":"iana","compressible":false,"extensions":["pptx"]},"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slide":{"source":"iana","extensions":["sldx"]},"application/vnd.openxmlformats-officedocument.presentationml.slide+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slideshow":{"source":"iana","extensions":["ppsx"]},"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.tags+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.template":{"source":"iana","extensions":["potx"]},"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":{"source":"iana","compressible":false,"extensions":["xlsx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.template":{"source":"iana","extensions":["xltx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.theme+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.themeoverride+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.vmldrawing":{"source":"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.document":{"source":"iana","compressible":false,"extensions":["docx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.template":{"source":"iana","extensions":["dotx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.core-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.relationships+xml":{"source":"iana","compressible":true},"application/vnd.oracle.resource+json":{"source":"iana","compressible":true},"application/vnd.orange.indata":{"source":"iana"},"application/vnd.osa.netdeploy":{"source":"iana"},"application/vnd.osgeo.mapguide.package":{"source":"iana","extensions":["mgp"]},"application/vnd.osgi.bundle":{"source":"iana"},"application/vnd.osgi.dp":{"source":"iana","extensions":["dp"]},"application/vnd.osgi.subsystem":{"source":"iana","extensions":["esa"]},"application/vnd.otps.ct-kip+xml":{"source":"iana","compressible":true},"application/vnd.oxli.countgraph":{"source":"iana"},"application/vnd.pagerduty+json":{"source":"iana","compressible":true},"application/vnd.palm":{"source":"iana","extensions":["pdb","pqa","oprc"]},"application/vnd.panoply":{"source":"iana"},"application/vnd.paos.xml":{"source":"iana"},"application/vnd.patentdive":{"source":"iana"},"application/vnd.patientecommsdoc":{"source":"iana"},"application/vnd.pawaafile":{"source":"iana","extensions":["paw"]},"application/vnd.pcos":{"source":"iana"},"application/vnd.pg.format":{"source":"iana","extensions":["str"]},"application/vnd.pg.osasli":{"source":"iana","extensions":["ei6"]},"application/vnd.piaccess.application-licence":{"source":"iana"},"application/vnd.picsel":{"source":"iana","extensions":["efif"]},"application/vnd.pmi.widget":{"source":"iana","extensions":["wg"]},"application/vnd.poc.group-advertisement+xml":{"source":"iana","compressible":true},"application/vnd.pocketlearn":{"source":"iana","extensions":["plf"]},"application/vnd.powerbuilder6":{"source":"iana","extensions":["pbd"]},"application/vnd.powerbuilder6-s":{"source":"iana"},"application/vnd.powerbuilder7":{"source":"iana"},"application/vnd.powerbuilder7-s":{"source":"iana"},"application/vnd.powerbuilder75":{"source":"iana"},"application/vnd.powerbuilder75-s":{"source":"iana"},"application/vnd.preminet":{"source":"iana"},"application/vnd.previewsystems.box":{"source":"iana","extensions":["box"]},"application/vnd.proteus.magazine":{"source":"iana","extensions":["mgz"]},"application/vnd.psfs":{"source":"iana"},"application/vnd.publishare-delta-tree":{"source":"iana","extensions":["qps"]},"application/vnd.pvi.ptid1":{"source":"iana","extensions":["ptid"]},"application/vnd.pwg-multiplexed":{"source":"iana"},"application/vnd.pwg-xhtml-print+xml":{"source":"iana","compressible":true},"application/vnd.qualcomm.brew-app-res":{"source":"iana"},"application/vnd.quarantainenet":{"source":"iana"},"application/vnd.quark.quarkxpress":{"source":"iana","extensions":["qxd","qxt","qwd","qwt","qxl","qxb"]},"application/vnd.quobject-quoxdocument":{"source":"iana"},"application/vnd.radisys.moml+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-conf+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-conn+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-dialog+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-stream+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-conf+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-base+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-fax-detect+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-fax-sendrecv+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-group+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-speech+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-transform+xml":{"source":"iana","compressible":true},"application/vnd.rainstor.data":{"source":"iana"},"application/vnd.rapid":{"source":"iana"},"application/vnd.rar":{"source":"iana","extensions":["rar"]},"application/vnd.realvnc.bed":{"source":"iana","extensions":["bed"]},"application/vnd.recordare.musicxml":{"source":"iana","extensions":["mxl"]},"application/vnd.recordare.musicxml+xml":{"source":"iana","compressible":true,"extensions":["musicxml"]},"application/vnd.renlearn.rlprint":{"source":"iana"},"application/vnd.resilient.logic":{"source":"iana"},"application/vnd.restful+json":{"source":"iana","compressible":true},"application/vnd.rig.cryptonote":{"source":"iana","extensions":["cryptonote"]},"application/vnd.rim.cod":{"source":"apache","extensions":["cod"]},"application/vnd.rn-realmedia":{"source":"apache","extensions":["rm"]},"application/vnd.rn-realmedia-vbr":{"source":"apache","extensions":["rmvb"]},"application/vnd.route66.link66+xml":{"source":"iana","compressible":true,"extensions":["link66"]},"application/vnd.rs-274x":{"source":"iana"},"application/vnd.ruckus.download":{"source":"iana"},"application/vnd.s3sms":{"source":"iana"},"application/vnd.sailingtracker.track":{"source":"iana","extensions":["st"]},"application/vnd.sar":{"source":"iana"},"application/vnd.sbm.cid":{"source":"iana"},"application/vnd.sbm.mid2":{"source":"iana"},"application/vnd.scribus":{"source":"iana"},"application/vnd.sealed.3df":{"source":"iana"},"application/vnd.sealed.csf":{"source":"iana"},"application/vnd.sealed.doc":{"source":"iana"},"application/vnd.sealed.eml":{"source":"iana"},"application/vnd.sealed.mht":{"source":"iana"},"application/vnd.sealed.net":{"source":"iana"},"application/vnd.sealed.ppt":{"source":"iana"},"application/vnd.sealed.tiff":{"source":"iana"},"application/vnd.sealed.xls":{"source":"iana"},"application/vnd.sealedmedia.softseal.html":{"source":"iana"},"application/vnd.sealedmedia.softseal.pdf":{"source":"iana"},"application/vnd.seemail":{"source":"iana","extensions":["see"]},"application/vnd.seis+json":{"source":"iana","compressible":true},"application/vnd.sema":{"source":"iana","extensions":["sema"]},"application/vnd.semd":{"source":"iana","extensions":["semd"]},"application/vnd.semf":{"source":"iana","extensions":["semf"]},"application/vnd.shade-save-file":{"source":"iana"},"application/vnd.shana.informed.formdata":{"source":"iana","extensions":["ifm"]},"application/vnd.shana.informed.formtemplate":{"source":"iana","extensions":["itp"]},"application/vnd.shana.informed.interchange":{"source":"iana","extensions":["iif"]},"application/vnd.shana.informed.package":{"source":"iana","extensions":["ipk"]},"application/vnd.shootproof+json":{"source":"iana","compressible":true},"application/vnd.shopkick+json":{"source":"iana","compressible":true},"application/vnd.shp":{"source":"iana"},"application/vnd.shx":{"source":"iana"},"application/vnd.sigrok.session":{"source":"iana"},"application/vnd.simtech-mindmapper":{"source":"iana","extensions":["twd","twds"]},"application/vnd.siren+json":{"source":"iana","compressible":true},"application/vnd.smaf":{"source":"iana","extensions":["mmf"]},"application/vnd.smart.notebook":{"source":"iana"},"application/vnd.smart.teacher":{"source":"iana","extensions":["teacher"]},"application/vnd.snesdev-page-table":{"source":"iana"},"application/vnd.software602.filler.form+xml":{"source":"iana","compressible":true,"extensions":["fo"]},"application/vnd.software602.filler.form-xml-zip":{"source":"iana"},"application/vnd.solent.sdkm+xml":{"source":"iana","compressible":true,"extensions":["sdkm","sdkd"]},"application/vnd.spotfire.dxp":{"source":"iana","extensions":["dxp"]},"application/vnd.spotfire.sfs":{"source":"iana","extensions":["sfs"]},"application/vnd.sqlite3":{"source":"iana"},"application/vnd.sss-cod":{"source":"iana"},"application/vnd.sss-dtf":{"source":"iana"},"application/vnd.sss-ntf":{"source":"iana"},"application/vnd.stardivision.calc":{"source":"apache","extensions":["sdc"]},"application/vnd.stardivision.draw":{"source":"apache","extensions":["sda"]},"application/vnd.stardivision.impress":{"source":"apache","extensions":["sdd"]},"application/vnd.stardivision.math":{"source":"apache","extensions":["smf"]},"application/vnd.stardivision.writer":{"source":"apache","extensions":["sdw","vor"]},"application/vnd.stardivision.writer-global":{"source":"apache","extensions":["sgl"]},"application/vnd.stepmania.package":{"source":"iana","extensions":["smzip"]},"application/vnd.stepmania.stepchart":{"source":"iana","extensions":["sm"]},"application/vnd.street-stream":{"source":"iana"},"application/vnd.sun.wadl+xml":{"source":"iana","compressible":true,"extensions":["wadl"]},"application/vnd.sun.xml.calc":{"source":"apache","extensions":["sxc"]},"application/vnd.sun.xml.calc.template":{"source":"apache","extensions":["stc"]},"application/vnd.sun.xml.draw":{"source":"apache","extensions":["sxd"]},"application/vnd.sun.xml.draw.template":{"source":"apache","extensions":["std"]},"application/vnd.sun.xml.impress":{"source":"apache","extensions":["sxi"]},"application/vnd.sun.xml.impress.template":{"source":"apache","extensions":["sti"]},"application/vnd.sun.xml.math":{"source":"apache","extensions":["sxm"]},"application/vnd.sun.xml.writer":{"source":"apache","extensions":["sxw"]},"application/vnd.sun.xml.writer.global":{"source":"apache","extensions":["sxg"]},"application/vnd.sun.xml.writer.template":{"source":"apache","extensions":["stw"]},"application/vnd.sus-calendar":{"source":"iana","extensions":["sus","susp"]},"application/vnd.svd":{"source":"iana","extensions":["svd"]},"application/vnd.swiftview-ics":{"source":"iana"},"application/vnd.sycle+xml":{"source":"iana","compressible":true},"application/vnd.syft+json":{"source":"iana","compressible":true},"application/vnd.symbian.install":{"source":"apache","extensions":["sis","sisx"]},"application/vnd.syncml+xml":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["xsm"]},"application/vnd.syncml.dm+wbxml":{"source":"iana","charset":"UTF-8","extensions":["bdm"]},"application/vnd.syncml.dm+xml":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["xdm"]},"application/vnd.syncml.dm.notification":{"source":"iana"},"application/vnd.syncml.dmddf+wbxml":{"source":"iana"},"application/vnd.syncml.dmddf+xml":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["ddf"]},"application/vnd.syncml.dmtnds+wbxml":{"source":"iana"},"application/vnd.syncml.dmtnds+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.syncml.ds.notification":{"source":"iana"},"application/vnd.tableschema+json":{"source":"iana","compressible":true},"application/vnd.tao.intent-module-archive":{"source":"iana","extensions":["tao"]},"application/vnd.tcpdump.pcap":{"source":"iana","extensions":["pcap","cap","dmp"]},"application/vnd.think-cell.ppttc+json":{"source":"iana","compressible":true},"application/vnd.tmd.mediaflex.api+xml":{"source":"iana","compressible":true},"application/vnd.tml":{"source":"iana"},"application/vnd.tmobile-livetv":{"source":"iana","extensions":["tmo"]},"application/vnd.tri.onesource":{"source":"iana"},"application/vnd.trid.tpt":{"source":"iana","extensions":["tpt"]},"application/vnd.triscape.mxs":{"source":"iana","extensions":["mxs"]},"application/vnd.trueapp":{"source":"iana","extensions":["tra"]},"application/vnd.truedoc":{"source":"iana"},"application/vnd.ubisoft.webplayer":{"source":"iana"},"application/vnd.ufdl":{"source":"iana","extensions":["ufd","ufdl"]},"application/vnd.uiq.theme":{"source":"iana","extensions":["utz"]},"application/vnd.umajin":{"source":"iana","extensions":["umj"]},"application/vnd.unity":{"source":"iana","extensions":["unityweb"]},"application/vnd.uoml+xml":{"source":"iana","compressible":true,"extensions":["uoml"]},"application/vnd.uplanet.alert":{"source":"iana"},"application/vnd.uplanet.alert-wbxml":{"source":"iana"},"application/vnd.uplanet.bearer-choice":{"source":"iana"},"application/vnd.uplanet.bearer-choice-wbxml":{"source":"iana"},"application/vnd.uplanet.cacheop":{"source":"iana"},"application/vnd.uplanet.cacheop-wbxml":{"source":"iana"},"application/vnd.uplanet.channel":{"source":"iana"},"application/vnd.uplanet.channel-wbxml":{"source":"iana"},"application/vnd.uplanet.list":{"source":"iana"},"application/vnd.uplanet.list-wbxml":{"source":"iana"},"application/vnd.uplanet.listcmd":{"source":"iana"},"application/vnd.uplanet.listcmd-wbxml":{"source":"iana"},"application/vnd.uplanet.signal":{"source":"iana"},"application/vnd.uri-map":{"source":"iana"},"application/vnd.valve.source.material":{"source":"iana"},"application/vnd.vcx":{"source":"iana","extensions":["vcx"]},"application/vnd.vd-study":{"source":"iana"},"application/vnd.vectorworks":{"source":"iana"},"application/vnd.vel+json":{"source":"iana","compressible":true},"application/vnd.verimatrix.vcas":{"source":"iana"},"application/vnd.veritone.aion+json":{"source":"iana","compressible":true},"application/vnd.veryant.thin":{"source":"iana"},"application/vnd.ves.encrypted":{"source":"iana"},"application/vnd.vidsoft.vidconference":{"source":"iana"},"application/vnd.visio":{"source":"iana","extensions":["vsd","vst","vss","vsw"]},"application/vnd.visionary":{"source":"iana","extensions":["vis"]},"application/vnd.vividence.scriptfile":{"source":"iana"},"application/vnd.vsf":{"source":"iana","extensions":["vsf"]},"application/vnd.wap.sic":{"source":"iana"},"application/vnd.wap.slc":{"source":"iana"},"application/vnd.wap.wbxml":{"source":"iana","charset":"UTF-8","extensions":["wbxml"]},"application/vnd.wap.wmlc":{"source":"iana","extensions":["wmlc"]},"application/vnd.wap.wmlscriptc":{"source":"iana","extensions":["wmlsc"]},"application/vnd.webturbo":{"source":"iana","extensions":["wtb"]},"application/vnd.wfa.dpp":{"source":"iana"},"application/vnd.wfa.p2p":{"source":"iana"},"application/vnd.wfa.wsc":{"source":"iana"},"application/vnd.windows.devicepairing":{"source":"iana"},"application/vnd.wmc":{"source":"iana"},"application/vnd.wmf.bootstrap":{"source":"iana"},"application/vnd.wolfram.mathematica":{"source":"iana"},"application/vnd.wolfram.mathematica.package":{"source":"iana"},"application/vnd.wolfram.player":{"source":"iana","extensions":["nbp"]},"application/vnd.wordperfect":{"source":"iana","extensions":["wpd"]},"application/vnd.wqd":{"source":"iana","extensions":["wqd"]},"application/vnd.wrq-hp3000-labelled":{"source":"iana"},"application/vnd.wt.stf":{"source":"iana","extensions":["stf"]},"application/vnd.wv.csp+wbxml":{"source":"iana"},"application/vnd.wv.csp+xml":{"source":"iana","compressible":true},"application/vnd.wv.ssp+xml":{"source":"iana","compressible":true},"application/vnd.xacml+json":{"source":"iana","compressible":true},"application/vnd.xara":{"source":"iana","extensions":["xar"]},"application/vnd.xfdl":{"source":"iana","extensions":["xfdl"]},"application/vnd.xfdl.webform":{"source":"iana"},"application/vnd.xmi+xml":{"source":"iana","compressible":true},"application/vnd.xmpie.cpkg":{"source":"iana"},"application/vnd.xmpie.dpkg":{"source":"iana"},"application/vnd.xmpie.plan":{"source":"iana"},"application/vnd.xmpie.ppkg":{"source":"iana"},"application/vnd.xmpie.xlim":{"source":"iana"},"application/vnd.yamaha.hv-dic":{"source":"iana","extensions":["hvd"]},"application/vnd.yamaha.hv-script":{"source":"iana","extensions":["hvs"]},"application/vnd.yamaha.hv-voice":{"source":"iana","extensions":["hvp"]},"application/vnd.yamaha.openscoreformat":{"source":"iana","extensions":["osf"]},"application/vnd.yamaha.openscoreformat.osfpvg+xml":{"source":"iana","compressible":true,"extensions":["osfpvg"]},"application/vnd.yamaha.remote-setup":{"source":"iana"},"application/vnd.yamaha.smaf-audio":{"source":"iana","extensions":["saf"]},"application/vnd.yamaha.smaf-phrase":{"source":"iana","extensions":["spf"]},"application/vnd.yamaha.through-ngn":{"source":"iana"},"application/vnd.yamaha.tunnel-udpencap":{"source":"iana"},"application/vnd.yaoweme":{"source":"iana"},"application/vnd.yellowriver-custom-menu":{"source":"iana","extensions":["cmp"]},"application/vnd.youtube.yt":{"source":"iana"},"application/vnd.zul":{"source":"iana","extensions":["zir","zirz"]},"application/vnd.zzazz.deck+xml":{"source":"iana","compressible":true,"extensions":["zaz"]},"application/voicexml+xml":{"source":"iana","compressible":true,"extensions":["vxml"]},"application/voucher-cms+json":{"source":"iana","compressible":true},"application/vq-rtcpxr":{"source":"iana"},"application/wasm":{"source":"iana","compressible":true,"extensions":["wasm"]},"application/watcherinfo+xml":{"source":"iana","compressible":true,"extensions":["wif"]},"application/webpush-options+json":{"source":"iana","compressible":true},"application/whoispp-query":{"source":"iana"},"application/whoispp-response":{"source":"iana"},"application/widget":{"source":"iana","extensions":["wgt"]},"application/winhlp":{"source":"apache","extensions":["hlp"]},"application/wita":{"source":"iana"},"application/wordperfect5.1":{"source":"iana"},"application/wsdl+xml":{"source":"iana","compressible":true,"extensions":["wsdl"]},"application/wspolicy+xml":{"source":"iana","compressible":true,"extensions":["wspolicy"]},"application/x-7z-compressed":{"source":"apache","compressible":false,"extensions":["7z"]},"application/x-abiword":{"source":"apache","extensions":["abw"]},"application/x-ace-compressed":{"source":"apache","extensions":["ace"]},"application/x-amf":{"source":"apache"},"application/x-apple-diskimage":{"source":"apache","extensions":["dmg"]},"application/x-arj":{"compressible":false,"extensions":["arj"]},"application/x-authorware-bin":{"source":"apache","extensions":["aab","x32","u32","vox"]},"application/x-authorware-map":{"source":"apache","extensions":["aam"]},"application/x-authorware-seg":{"source":"apache","extensions":["aas"]},"application/x-bcpio":{"source":"apache","extensions":["bcpio"]},"application/x-bdoc":{"compressible":false,"extensions":["bdoc"]},"application/x-bittorrent":{"source":"apache","extensions":["torrent"]},"application/x-blorb":{"source":"apache","extensions":["blb","blorb"]},"application/x-bzip":{"source":"apache","compressible":false,"extensions":["bz"]},"application/x-bzip2":{"source":"apache","compressible":false,"extensions":["bz2","boz"]},"application/x-cbr":{"source":"apache","extensions":["cbr","cba","cbt","cbz","cb7"]},"application/x-cdlink":{"source":"apache","extensions":["vcd"]},"application/x-cfs-compressed":{"source":"apache","extensions":["cfs"]},"application/x-chat":{"source":"apache","extensions":["chat"]},"application/x-chess-pgn":{"source":"apache","extensions":["pgn"]},"application/x-chrome-extension":{"extensions":["crx"]},"application/x-cocoa":{"source":"nginx","extensions":["cco"]},"application/x-compress":{"source":"apache"},"application/x-conference":{"source":"apache","extensions":["nsc"]},"application/x-cpio":{"source":"apache","extensions":["cpio"]},"application/x-csh":{"source":"apache","extensions":["csh"]},"application/x-deb":{"compressible":false},"application/x-debian-package":{"source":"apache","extensions":["deb","udeb"]},"application/x-dgc-compressed":{"source":"apache","extensions":["dgc"]},"application/x-director":{"source":"apache","extensions":["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"]},"application/x-doom":{"source":"apache","extensions":["wad"]},"application/x-dtbncx+xml":{"source":"apache","compressible":true,"extensions":["ncx"]},"application/x-dtbook+xml":{"source":"apache","compressible":true,"extensions":["dtb"]},"application/x-dtbresource+xml":{"source":"apache","compressible":true,"extensions":["res"]},"application/x-dvi":{"source":"apache","compressible":false,"extensions":["dvi"]},"application/x-envoy":{"source":"apache","extensions":["evy"]},"application/x-eva":{"source":"apache","extensions":["eva"]},"application/x-font-bdf":{"source":"apache","extensions":["bdf"]},"application/x-font-dos":{"source":"apache"},"application/x-font-framemaker":{"source":"apache"},"application/x-font-ghostscript":{"source":"apache","extensions":["gsf"]},"application/x-font-libgrx":{"source":"apache"},"application/x-font-linux-psf":{"source":"apache","extensions":["psf"]},"application/x-font-pcf":{"source":"apache","extensions":["pcf"]},"application/x-font-snf":{"source":"apache","extensions":["snf"]},"application/x-font-speedo":{"source":"apache"},"application/x-font-sunos-news":{"source":"apache"},"application/x-font-type1":{"source":"apache","extensions":["pfa","pfb","pfm","afm"]},"application/x-font-vfont":{"source":"apache"},"application/x-freearc":{"source":"apache","extensions":["arc"]},"application/x-futuresplash":{"source":"apache","extensions":["spl"]},"application/x-gca-compressed":{"source":"apache","extensions":["gca"]},"application/x-glulx":{"source":"apache","extensions":["ulx"]},"application/x-gnumeric":{"source":"apache","extensions":["gnumeric"]},"application/x-gramps-xml":{"source":"apache","extensions":["gramps"]},"application/x-gtar":{"source":"apache","extensions":["gtar"]},"application/x-gzip":{"source":"apache"},"application/x-hdf":{"source":"apache","extensions":["hdf"]},"application/x-httpd-php":{"compressible":true,"extensions":["php"]},"application/x-install-instructions":{"source":"apache","extensions":["install"]},"application/x-iso9660-image":{"source":"apache","extensions":["iso"]},"application/x-iwork-keynote-sffkey":{"extensions":["key"]},"application/x-iwork-numbers-sffnumbers":{"extensions":["numbers"]},"application/x-iwork-pages-sffpages":{"extensions":["pages"]},"application/x-java-archive-diff":{"source":"nginx","extensions":["jardiff"]},"application/x-java-jnlp-file":{"source":"apache","compressible":false,"extensions":["jnlp"]},"application/x-javascript":{"compressible":true},"application/x-keepass2":{"extensions":["kdbx"]},"application/x-latex":{"source":"apache","compressible":false,"extensions":["latex"]},"application/x-lua-bytecode":{"extensions":["luac"]},"application/x-lzh-compressed":{"source":"apache","extensions":["lzh","lha"]},"application/x-makeself":{"source":"nginx","extensions":["run"]},"application/x-mie":{"source":"apache","extensions":["mie"]},"application/x-mobipocket-ebook":{"source":"apache","extensions":["prc","mobi"]},"application/x-mpegurl":{"compressible":false},"application/x-ms-application":{"source":"apache","extensions":["application"]},"application/x-ms-shortcut":{"source":"apache","extensions":["lnk"]},"application/x-ms-wmd":{"source":"apache","extensions":["wmd"]},"application/x-ms-wmz":{"source":"apache","extensions":["wmz"]},"application/x-ms-xbap":{"source":"apache","extensions":["xbap"]},"application/x-msaccess":{"source":"apache","extensions":["mdb"]},"application/x-msbinder":{"source":"apache","extensions":["obd"]},"application/x-mscardfile":{"source":"apache","extensions":["crd"]},"application/x-msclip":{"source":"apache","extensions":["clp"]},"application/x-msdos-program":{"extensions":["exe"]},"application/x-msdownload":{"source":"apache","extensions":["exe","dll","com","bat","msi"]},"application/x-msmediaview":{"source":"apache","extensions":["mvb","m13","m14"]},"application/x-msmetafile":{"source":"apache","extensions":["wmf","wmz","emf","emz"]},"application/x-msmoney":{"source":"apache","extensions":["mny"]},"application/x-mspublisher":{"source":"apache","extensions":["pub"]},"application/x-msschedule":{"source":"apache","extensions":["scd"]},"application/x-msterminal":{"source":"apache","extensions":["trm"]},"application/x-mswrite":{"source":"apache","extensions":["wri"]},"application/x-netcdf":{"source":"apache","extensions":["nc","cdf"]},"application/x-ns-proxy-autoconfig":{"compressible":true,"extensions":["pac"]},"application/x-nzb":{"source":"apache","extensions":["nzb"]},"application/x-perl":{"source":"nginx","extensions":["pl","pm"]},"application/x-pilot":{"source":"nginx","extensions":["prc","pdb"]},"application/x-pkcs12":{"source":"apache","compressible":false,"extensions":["p12","pfx"]},"application/x-pkcs7-certificates":{"source":"apache","extensions":["p7b","spc"]},"application/x-pkcs7-certreqresp":{"source":"apache","extensions":["p7r"]},"application/x-pki-message":{"source":"iana"},"application/x-rar-compressed":{"source":"apache","compressible":false,"extensions":["rar"]},"application/x-redhat-package-manager":{"source":"nginx","extensions":["rpm"]},"application/x-research-info-systems":{"source":"apache","extensions":["ris"]},"application/x-sea":{"source":"nginx","extensions":["sea"]},"application/x-sh":{"source":"apache","compressible":true,"extensions":["sh"]},"application/x-shar":{"source":"apache","extensions":["shar"]},"application/x-shockwave-flash":{"source":"apache","compressible":false,"extensions":["swf"]},"application/x-silverlight-app":{"source":"apache","extensions":["xap"]},"application/x-sql":{"source":"apache","extensions":["sql"]},"application/x-stuffit":{"source":"apache","compressible":false,"extensions":["sit"]},"application/x-stuffitx":{"source":"apache","extensions":["sitx"]},"application/x-subrip":{"source":"apache","extensions":["srt"]},"application/x-sv4cpio":{"source":"apache","extensions":["sv4cpio"]},"application/x-sv4crc":{"source":"apache","extensions":["sv4crc"]},"application/x-t3vm-image":{"source":"apache","extensions":["t3"]},"application/x-tads":{"source":"apache","extensions":["gam"]},"application/x-tar":{"source":"apache","compressible":true,"extensions":["tar"]},"application/x-tcl":{"source":"apache","extensions":["tcl","tk"]},"application/x-tex":{"source":"apache","extensions":["tex"]},"application/x-tex-tfm":{"source":"apache","extensions":["tfm"]},"application/x-texinfo":{"source":"apache","extensions":["texinfo","texi"]},"application/x-tgif":{"source":"apache","extensions":["obj"]},"application/x-ustar":{"source":"apache","extensions":["ustar"]},"application/x-virtualbox-hdd":{"compressible":true,"extensions":["hdd"]},"application/x-virtualbox-ova":{"compressible":true,"extensions":["ova"]},"application/x-virtualbox-ovf":{"compressible":true,"extensions":["ovf"]},"application/x-virtualbox-vbox":{"compressible":true,"extensions":["vbox"]},"application/x-virtualbox-vbox-extpack":{"compressible":false,"extensions":["vbox-extpack"]},"application/x-virtualbox-vdi":{"compressible":true,"extensions":["vdi"]},"application/x-virtualbox-vhd":{"compressible":true,"extensions":["vhd"]},"application/x-virtualbox-vmdk":{"compressible":true,"extensions":["vmdk"]},"application/x-wais-source":{"source":"apache","extensions":["src"]},"application/x-web-app-manifest+json":{"compressible":true,"extensions":["webapp"]},"application/x-www-form-urlencoded":{"source":"iana","compressible":true},"application/x-x509-ca-cert":{"source":"iana","extensions":["der","crt","pem"]},"application/x-x509-ca-ra-cert":{"source":"iana"},"application/x-x509-next-ca-cert":{"source":"iana"},"application/x-xfig":{"source":"apache","extensions":["fig"]},"application/x-xliff+xml":{"source":"apache","compressible":true,"extensions":["xlf"]},"application/x-xpinstall":{"source":"apache","compressible":false,"extensions":["xpi"]},"application/x-xz":{"source":"apache","extensions":["xz"]},"application/x-zmachine":{"source":"apache","extensions":["z1","z2","z3","z4","z5","z6","z7","z8"]},"application/x400-bp":{"source":"iana"},"application/xacml+xml":{"source":"iana","compressible":true},"application/xaml+xml":{"source":"apache","compressible":true,"extensions":["xaml"]},"application/xcap-att+xml":{"source":"iana","compressible":true,"extensions":["xav"]},"application/xcap-caps+xml":{"source":"iana","compressible":true,"extensions":["xca"]},"application/xcap-diff+xml":{"source":"iana","compressible":true,"extensions":["xdf"]},"application/xcap-el+xml":{"source":"iana","compressible":true,"extensions":["xel"]},"application/xcap-error+xml":{"source":"iana","compressible":true},"application/xcap-ns+xml":{"source":"iana","compressible":true,"extensions":["xns"]},"application/xcon-conference-info+xml":{"source":"iana","compressible":true},"application/xcon-conference-info-diff+xml":{"source":"iana","compressible":true},"application/xenc+xml":{"source":"iana","compressible":true,"extensions":["xenc"]},"application/xhtml+xml":{"source":"iana","compressible":true,"extensions":["xhtml","xht"]},"application/xhtml-voice+xml":{"source":"apache","compressible":true},"application/xliff+xml":{"source":"iana","compressible":true,"extensions":["xlf"]},"application/xml":{"source":"iana","compressible":true,"extensions":["xml","xsl","xsd","rng"]},"application/xml-dtd":{"source":"iana","compressible":true,"extensions":["dtd"]},"application/xml-external-parsed-entity":{"source":"iana"},"application/xml-patch+xml":{"source":"iana","compressible":true},"application/xmpp+xml":{"source":"iana","compressible":true},"application/xop+xml":{"source":"iana","compressible":true,"extensions":["xop"]},"application/xproc+xml":{"source":"apache","compressible":true,"extensions":["xpl"]},"application/xslt+xml":{"source":"iana","compressible":true,"extensions":["xsl","xslt"]},"application/xspf+xml":{"source":"apache","compressible":true,"extensions":["xspf"]},"application/xv+xml":{"source":"iana","compressible":true,"extensions":["mxml","xhvml","xvml","xvm"]},"application/yang":{"source":"iana","extensions":["yang"]},"application/yang-data+json":{"source":"iana","compressible":true},"application/yang-data+xml":{"source":"iana","compressible":true},"application/yang-patch+json":{"source":"iana","compressible":true},"application/yang-patch+xml":{"source":"iana","compressible":true},"application/yin+xml":{"source":"iana","compressible":true,"extensions":["yin"]},"application/zip":{"source":"iana","compressible":false,"extensions":["zip"]},"application/zlib":{"source":"iana"},"application/zstd":{"source":"iana"},"audio/1d-interleaved-parityfec":{"source":"iana"},"audio/32kadpcm":{"source":"iana"},"audio/3gpp":{"source":"iana","compressible":false,"extensions":["3gpp"]},"audio/3gpp2":{"source":"iana"},"audio/aac":{"source":"iana"},"audio/ac3":{"source":"iana"},"audio/adpcm":{"source":"apache","extensions":["adp"]},"audio/amr":{"source":"iana","extensions":["amr"]},"audio/amr-wb":{"source":"iana"},"audio/amr-wb+":{"source":"iana"},"audio/aptx":{"source":"iana"},"audio/asc":{"source":"iana"},"audio/atrac-advanced-lossless":{"source":"iana"},"audio/atrac-x":{"source":"iana"},"audio/atrac3":{"source":"iana"},"audio/basic":{"source":"iana","compressible":false,"extensions":["au","snd"]},"audio/bv16":{"source":"iana"},"audio/bv32":{"source":"iana"},"audio/clearmode":{"source":"iana"},"audio/cn":{"source":"iana"},"audio/dat12":{"source":"iana"},"audio/dls":{"source":"iana"},"audio/dsr-es201108":{"source":"iana"},"audio/dsr-es202050":{"source":"iana"},"audio/dsr-es202211":{"source":"iana"},"audio/dsr-es202212":{"source":"iana"},"audio/dv":{"source":"iana"},"audio/dvi4":{"source":"iana"},"audio/eac3":{"source":"iana"},"audio/encaprtp":{"source":"iana"},"audio/evrc":{"source":"iana"},"audio/evrc-qcp":{"source":"iana"},"audio/evrc0":{"source":"iana"},"audio/evrc1":{"source":"iana"},"audio/evrcb":{"source":"iana"},"audio/evrcb0":{"source":"iana"},"audio/evrcb1":{"source":"iana"},"audio/evrcnw":{"source":"iana"},"audio/evrcnw0":{"source":"iana"},"audio/evrcnw1":{"source":"iana"},"audio/evrcwb":{"source":"iana"},"audio/evrcwb0":{"source":"iana"},"audio/evrcwb1":{"source":"iana"},"audio/evs":{"source":"iana"},"audio/flexfec":{"source":"iana"},"audio/fwdred":{"source":"iana"},"audio/g711-0":{"source":"iana"},"audio/g719":{"source":"iana"},"audio/g722":{"source":"iana"},"audio/g7221":{"source":"iana"},"audio/g723":{"source":"iana"},"audio/g726-16":{"source":"iana"},"audio/g726-24":{"source":"iana"},"audio/g726-32":{"source":"iana"},"audio/g726-40":{"source":"iana"},"audio/g728":{"source":"iana"},"audio/g729":{"source":"iana"},"audio/g7291":{"source":"iana"},"audio/g729d":{"source":"iana"},"audio/g729e":{"source":"iana"},"audio/gsm":{"source":"iana"},"audio/gsm-efr":{"source":"iana"},"audio/gsm-hr-08":{"source":"iana"},"audio/ilbc":{"source":"iana"},"audio/ip-mr_v2.5":{"source":"iana"},"audio/isac":{"source":"apache"},"audio/l16":{"source":"iana"},"audio/l20":{"source":"iana"},"audio/l24":{"source":"iana","compressible":false},"audio/l8":{"source":"iana"},"audio/lpc":{"source":"iana"},"audio/melp":{"source":"iana"},"audio/melp1200":{"source":"iana"},"audio/melp2400":{"source":"iana"},"audio/melp600":{"source":"iana"},"audio/mhas":{"source":"iana"},"audio/midi":{"source":"apache","extensions":["mid","midi","kar","rmi"]},"audio/mobile-xmf":{"source":"iana","extensions":["mxmf"]},"audio/mp3":{"compressible":false,"extensions":["mp3"]},"audio/mp4":{"source":"iana","compressible":false,"extensions":["m4a","mp4a"]},"audio/mp4a-latm":{"source":"iana"},"audio/mpa":{"source":"iana"},"audio/mpa-robust":{"source":"iana"},"audio/mpeg":{"source":"iana","compressible":false,"extensions":["mpga","mp2","mp2a","mp3","m2a","m3a"]},"audio/mpeg4-generic":{"source":"iana"},"audio/musepack":{"source":"apache"},"audio/ogg":{"source":"iana","compressible":false,"extensions":["oga","ogg","spx","opus"]},"audio/opus":{"source":"iana"},"audio/parityfec":{"source":"iana"},"audio/pcma":{"source":"iana"},"audio/pcma-wb":{"source":"iana"},"audio/pcmu":{"source":"iana"},"audio/pcmu-wb":{"source":"iana"},"audio/prs.sid":{"source":"iana"},"audio/qcelp":{"source":"iana"},"audio/raptorfec":{"source":"iana"},"audio/red":{"source":"iana"},"audio/rtp-enc-aescm128":{"source":"iana"},"audio/rtp-midi":{"source":"iana"},"audio/rtploopback":{"source":"iana"},"audio/rtx":{"source":"iana"},"audio/s3m":{"source":"apache","extensions":["s3m"]},"audio/scip":{"source":"iana"},"audio/silk":{"source":"apache","extensions":["sil"]},"audio/smv":{"source":"iana"},"audio/smv-qcp":{"source":"iana"},"audio/smv0":{"source":"iana"},"audio/sofa":{"source":"iana"},"audio/sp-midi":{"source":"iana"},"audio/speex":{"source":"iana"},"audio/t140c":{"source":"iana"},"audio/t38":{"source":"iana"},"audio/telephone-event":{"source":"iana"},"audio/tetra_acelp":{"source":"iana"},"audio/tetra_acelp_bb":{"source":"iana"},"audio/tone":{"source":"iana"},"audio/tsvcis":{"source":"iana"},"audio/uemclip":{"source":"iana"},"audio/ulpfec":{"source":"iana"},"audio/usac":{"source":"iana"},"audio/vdvi":{"source":"iana"},"audio/vmr-wb":{"source":"iana"},"audio/vnd.3gpp.iufp":{"source":"iana"},"audio/vnd.4sb":{"source":"iana"},"audio/vnd.audiokoz":{"source":"iana"},"audio/vnd.celp":{"source":"iana"},"audio/vnd.cisco.nse":{"source":"iana"},"audio/vnd.cmles.radio-events":{"source":"iana"},"audio/vnd.cns.anp1":{"source":"iana"},"audio/vnd.cns.inf1":{"source":"iana"},"audio/vnd.dece.audio":{"source":"iana","extensions":["uva","uvva"]},"audio/vnd.digital-winds":{"source":"iana","extensions":["eol"]},"audio/vnd.dlna.adts":{"source":"iana"},"audio/vnd.dolby.heaac.1":{"source":"iana"},"audio/vnd.dolby.heaac.2":{"source":"iana"},"audio/vnd.dolby.mlp":{"source":"iana"},"audio/vnd.dolby.mps":{"source":"iana"},"audio/vnd.dolby.pl2":{"source":"iana"},"audio/vnd.dolby.pl2x":{"source":"iana"},"audio/vnd.dolby.pl2z":{"source":"iana"},"audio/vnd.dolby.pulse.1":{"source":"iana"},"audio/vnd.dra":{"source":"iana","extensions":["dra"]},"audio/vnd.dts":{"source":"iana","extensions":["dts"]},"audio/vnd.dts.hd":{"source":"iana","extensions":["dtshd"]},"audio/vnd.dts.uhd":{"source":"iana"},"audio/vnd.dvb.file":{"source":"iana"},"audio/vnd.everad.plj":{"source":"iana"},"audio/vnd.hns.audio":{"source":"iana"},"audio/vnd.lucent.voice":{"source":"iana","extensions":["lvp"]},"audio/vnd.ms-playready.media.pya":{"source":"iana","extensions":["pya"]},"audio/vnd.nokia.mobile-xmf":{"source":"iana"},"audio/vnd.nortel.vbk":{"source":"iana"},"audio/vnd.nuera.ecelp4800":{"source":"iana","extensions":["ecelp4800"]},"audio/vnd.nuera.ecelp7470":{"source":"iana","extensions":["ecelp7470"]},"audio/vnd.nuera.ecelp9600":{"source":"iana","extensions":["ecelp9600"]},"audio/vnd.octel.sbc":{"source":"iana"},"audio/vnd.presonus.multitrack":{"source":"iana"},"audio/vnd.qcelp":{"source":"iana"},"audio/vnd.rhetorex.32kadpcm":{"source":"iana"},"audio/vnd.rip":{"source":"iana","extensions":["rip"]},"audio/vnd.rn-realaudio":{"compressible":false},"audio/vnd.sealedmedia.softseal.mpeg":{"source":"iana"},"audio/vnd.vmx.cvsd":{"source":"iana"},"audio/vnd.wave":{"compressible":false},"audio/vorbis":{"source":"iana","compressible":false},"audio/vorbis-config":{"source":"iana"},"audio/wav":{"compressible":false,"extensions":["wav"]},"audio/wave":{"compressible":false,"extensions":["wav"]},"audio/webm":{"source":"apache","compressible":false,"extensions":["weba"]},"audio/x-aac":{"source":"apache","compressible":false,"extensions":["aac"]},"audio/x-aiff":{"source":"apache","extensions":["aif","aiff","aifc"]},"audio/x-caf":{"source":"apache","compressible":false,"extensions":["caf"]},"audio/x-flac":{"source":"apache","extensions":["flac"]},"audio/x-m4a":{"source":"nginx","extensions":["m4a"]},"audio/x-matroska":{"source":"apache","extensions":["mka"]},"audio/x-mpegurl":{"source":"apache","extensions":["m3u"]},"audio/x-ms-wax":{"source":"apache","extensions":["wax"]},"audio/x-ms-wma":{"source":"apache","extensions":["wma"]},"audio/x-pn-realaudio":{"source":"apache","extensions":["ram","ra"]},"audio/x-pn-realaudio-plugin":{"source":"apache","extensions":["rmp"]},"audio/x-realaudio":{"source":"nginx","extensions":["ra"]},"audio/x-tta":{"source":"apache"},"audio/x-wav":{"source":"apache","extensions":["wav"]},"audio/xm":{"source":"apache","extensions":["xm"]},"chemical/x-cdx":{"source":"apache","extensions":["cdx"]},"chemical/x-cif":{"source":"apache","extensions":["cif"]},"chemical/x-cmdf":{"source":"apache","extensions":["cmdf"]},"chemical/x-cml":{"source":"apache","extensions":["cml"]},"chemical/x-csml":{"source":"apache","extensions":["csml"]},"chemical/x-pdb":{"source":"apache"},"chemical/x-xyz":{"source":"apache","extensions":["xyz"]},"font/collection":{"source":"iana","extensions":["ttc"]},"font/otf":{"source":"iana","compressible":true,"extensions":["otf"]},"font/sfnt":{"source":"iana"},"font/ttf":{"source":"iana","compressible":true,"extensions":["ttf"]},"font/woff":{"source":"iana","extensions":["woff"]},"font/woff2":{"source":"iana","extensions":["woff2"]},"image/aces":{"source":"iana","extensions":["exr"]},"image/apng":{"compressible":false,"extensions":["apng"]},"image/avci":{"source":"iana","extensions":["avci"]},"image/avcs":{"source":"iana","extensions":["avcs"]},"image/avif":{"source":"iana","compressible":false,"extensions":["avif"]},"image/bmp":{"source":"iana","compressible":true,"extensions":["bmp"]},"image/cgm":{"source":"iana","extensions":["cgm"]},"image/dicom-rle":{"source":"iana","extensions":["drle"]},"image/emf":{"source":"iana","extensions":["emf"]},"image/fits":{"source":"iana","extensions":["fits"]},"image/g3fax":{"source":"iana","extensions":["g3"]},"image/gif":{"source":"iana","compressible":false,"extensions":["gif"]},"image/heic":{"source":"iana","extensions":["heic"]},"image/heic-sequence":{"source":"iana","extensions":["heics"]},"image/heif":{"source":"iana","extensions":["heif"]},"image/heif-sequence":{"source":"iana","extensions":["heifs"]},"image/hej2k":{"source":"iana","extensions":["hej2"]},"image/hsj2":{"source":"iana","extensions":["hsj2"]},"image/ief":{"source":"iana","extensions":["ief"]},"image/jls":{"source":"iana","extensions":["jls"]},"image/jp2":{"source":"iana","compressible":false,"extensions":["jp2","jpg2"]},"image/jpeg":{"source":"iana","compressible":false,"extensions":["jpeg","jpg","jpe"]},"image/jph":{"source":"iana","extensions":["jph"]},"image/jphc":{"source":"iana","extensions":["jhc"]},"image/jpm":{"source":"iana","compressible":false,"extensions":["jpm"]},"image/jpx":{"source":"iana","compressible":false,"extensions":["jpx","jpf"]},"image/jxr":{"source":"iana","extensions":["jxr"]},"image/jxra":{"source":"iana","extensions":["jxra"]},"image/jxrs":{"source":"iana","extensions":["jxrs"]},"image/jxs":{"source":"iana","extensions":["jxs"]},"image/jxsc":{"source":"iana","extensions":["jxsc"]},"image/jxsi":{"source":"iana","extensions":["jxsi"]},"image/jxss":{"source":"iana","extensions":["jxss"]},"image/ktx":{"source":"iana","extensions":["ktx"]},"image/ktx2":{"source":"iana","extensions":["ktx2"]},"image/naplps":{"source":"iana"},"image/pjpeg":{"compressible":false},"image/png":{"source":"iana","compressible":false,"extensions":["png"]},"image/prs.btif":{"source":"iana","extensions":["btif"]},"image/prs.pti":{"source":"iana","extensions":["pti"]},"image/pwg-raster":{"source":"iana"},"image/sgi":{"source":"apache","extensions":["sgi"]},"image/svg+xml":{"source":"iana","compressible":true,"extensions":["svg","svgz"]},"image/t38":{"source":"iana","extensions":["t38"]},"image/tiff":{"source":"iana","compressible":false,"extensions":["tif","tiff"]},"image/tiff-fx":{"source":"iana","extensions":["tfx"]},"image/vnd.adobe.photoshop":{"source":"iana","compressible":true,"extensions":["psd"]},"image/vnd.airzip.accelerator.azv":{"source":"iana","extensions":["azv"]},"image/vnd.cns.inf2":{"source":"iana"},"image/vnd.dece.graphic":{"source":"iana","extensions":["uvi","uvvi","uvg","uvvg"]},"image/vnd.djvu":{"source":"iana","extensions":["djvu","djv"]},"image/vnd.dvb.subtitle":{"source":"iana","extensions":["sub"]},"image/vnd.dwg":{"source":"iana","extensions":["dwg"]},"image/vnd.dxf":{"source":"iana","extensions":["dxf"]},"image/vnd.fastbidsheet":{"source":"iana","extensions":["fbs"]},"image/vnd.fpx":{"source":"iana","extensions":["fpx"]},"image/vnd.fst":{"source":"iana","extensions":["fst"]},"image/vnd.fujixerox.edmics-mmr":{"source":"iana","extensions":["mmr"]},"image/vnd.fujixerox.edmics-rlc":{"source":"iana","extensions":["rlc"]},"image/vnd.globalgraphics.pgb":{"source":"iana"},"image/vnd.microsoft.icon":{"source":"iana","compressible":true,"extensions":["ico"]},"image/vnd.mix":{"source":"iana"},"image/vnd.mozilla.apng":{"source":"iana"},"image/vnd.ms-dds":{"compressible":true,"extensions":["dds"]},"image/vnd.ms-modi":{"source":"iana","extensions":["mdi"]},"image/vnd.ms-photo":{"source":"apache","extensions":["wdp"]},"image/vnd.net-fpx":{"source":"iana","extensions":["npx"]},"image/vnd.pco.b16":{"source":"iana","extensions":["b16"]},"image/vnd.radiance":{"source":"iana"},"image/vnd.sealed.png":{"source":"iana"},"image/vnd.sealedmedia.softseal.gif":{"source":"iana"},"image/vnd.sealedmedia.softseal.jpg":{"source":"iana"},"image/vnd.svf":{"source":"iana"},"image/vnd.tencent.tap":{"source":"iana","extensions":["tap"]},"image/vnd.valve.source.texture":{"source":"iana","extensions":["vtf"]},"image/vnd.wap.wbmp":{"source":"iana","extensions":["wbmp"]},"image/vnd.xiff":{"source":"iana","extensions":["xif"]},"image/vnd.zbrush.pcx":{"source":"iana","extensions":["pcx"]},"image/webp":{"source":"apache","extensions":["webp"]},"image/wmf":{"source":"iana","extensions":["wmf"]},"image/x-3ds":{"source":"apache","extensions":["3ds"]},"image/x-cmu-raster":{"source":"apache","extensions":["ras"]},"image/x-cmx":{"source":"apache","extensions":["cmx"]},"image/x-freehand":{"source":"apache","extensions":["fh","fhc","fh4","fh5","fh7"]},"image/x-icon":{"source":"apache","compressible":true,"extensions":["ico"]},"image/x-jng":{"source":"nginx","extensions":["jng"]},"image/x-mrsid-image":{"source":"apache","extensions":["sid"]},"image/x-ms-bmp":{"source":"nginx","compressible":true,"extensions":["bmp"]},"image/x-pcx":{"source":"apache","extensions":["pcx"]},"image/x-pict":{"source":"apache","extensions":["pic","pct"]},"image/x-portable-anymap":{"source":"apache","extensions":["pnm"]},"image/x-portable-bitmap":{"source":"apache","extensions":["pbm"]},"image/x-portable-graymap":{"source":"apache","extensions":["pgm"]},"image/x-portable-pixmap":{"source":"apache","extensions":["ppm"]},"image/x-rgb":{"source":"apache","extensions":["rgb"]},"image/x-tga":{"source":"apache","extensions":["tga"]},"image/x-xbitmap":{"source":"apache","extensions":["xbm"]},"image/x-xcf":{"compressible":false},"image/x-xpixmap":{"source":"apache","extensions":["xpm"]},"image/x-xwindowdump":{"source":"apache","extensions":["xwd"]},"message/cpim":{"source":"iana"},"message/delivery-status":{"source":"iana"},"message/disposition-notification":{"source":"iana","extensions":["disposition-notification"]},"message/external-body":{"source":"iana"},"message/feedback-report":{"source":"iana"},"message/global":{"source":"iana","extensions":["u8msg"]},"message/global-delivery-status":{"source":"iana","extensions":["u8dsn"]},"message/global-disposition-notification":{"source":"iana","extensions":["u8mdn"]},"message/global-headers":{"source":"iana","extensions":["u8hdr"]},"message/http":{"source":"iana","compressible":false},"message/imdn+xml":{"source":"iana","compressible":true},"message/news":{"source":"iana"},"message/partial":{"source":"iana","compressible":false},"message/rfc822":{"source":"iana","compressible":true,"extensions":["eml","mime"]},"message/s-http":{"source":"iana"},"message/sip":{"source":"iana"},"message/sipfrag":{"source":"iana"},"message/tracking-status":{"source":"iana"},"message/vnd.si.simp":{"source":"iana"},"message/vnd.wfa.wsc":{"source":"iana","extensions":["wsc"]},"model/3mf":{"source":"iana","extensions":["3mf"]},"model/e57":{"source":"iana"},"model/gltf+json":{"source":"iana","compressible":true,"extensions":["gltf"]},"model/gltf-binary":{"source":"iana","compressible":true,"extensions":["glb"]},"model/iges":{"source":"iana","compressible":false,"extensions":["igs","iges"]},"model/mesh":{"source":"iana","compressible":false,"extensions":["msh","mesh","silo"]},"model/mtl":{"source":"iana","extensions":["mtl"]},"model/obj":{"source":"iana","extensions":["obj"]},"model/step":{"source":"iana"},"model/step+xml":{"source":"iana","compressible":true,"extensions":["stpx"]},"model/step+zip":{"source":"iana","compressible":false,"extensions":["stpz"]},"model/step-xml+zip":{"source":"iana","compressible":false,"extensions":["stpxz"]},"model/stl":{"source":"iana","extensions":["stl"]},"model/vnd.collada+xml":{"source":"iana","compressible":true,"extensions":["dae"]},"model/vnd.dwf":{"source":"iana","extensions":["dwf"]},"model/vnd.flatland.3dml":{"source":"iana"},"model/vnd.gdl":{"source":"iana","extensions":["gdl"]},"model/vnd.gs-gdl":{"source":"apache"},"model/vnd.gs.gdl":{"source":"iana"},"model/vnd.gtw":{"source":"iana","extensions":["gtw"]},"model/vnd.moml+xml":{"source":"iana","compressible":true},"model/vnd.mts":{"source":"iana","extensions":["mts"]},"model/vnd.opengex":{"source":"iana","extensions":["ogex"]},"model/vnd.parasolid.transmit.binary":{"source":"iana","extensions":["x_b"]},"model/vnd.parasolid.transmit.text":{"source":"iana","extensions":["x_t"]},"model/vnd.pytha.pyox":{"source":"iana"},"model/vnd.rosette.annotated-data-model":{"source":"iana"},"model/vnd.sap.vds":{"source":"iana","extensions":["vds"]},"model/vnd.usdz+zip":{"source":"iana","compressible":false,"extensions":["usdz"]},"model/vnd.valve.source.compiled-map":{"source":"iana","extensions":["bsp"]},"model/vnd.vtu":{"source":"iana","extensions":["vtu"]},"model/vrml":{"source":"iana","compressible":false,"extensions":["wrl","vrml"]},"model/x3d+binary":{"source":"apache","compressible":false,"extensions":["x3db","x3dbz"]},"model/x3d+fastinfoset":{"source":"iana","extensions":["x3db"]},"model/x3d+vrml":{"source":"apache","compressible":false,"extensions":["x3dv","x3dvz"]},"model/x3d+xml":{"source":"iana","compressible":true,"extensions":["x3d","x3dz"]},"model/x3d-vrml":{"source":"iana","extensions":["x3dv"]},"multipart/alternative":{"source":"iana","compressible":false},"multipart/appledouble":{"source":"iana"},"multipart/byteranges":{"source":"iana"},"multipart/digest":{"source":"iana"},"multipart/encrypted":{"source":"iana","compressible":false},"multipart/form-data":{"source":"iana","compressible":false},"multipart/header-set":{"source":"iana"},"multipart/mixed":{"source":"iana"},"multipart/multilingual":{"source":"iana"},"multipart/parallel":{"source":"iana"},"multipart/related":{"source":"iana","compressible":false},"multipart/report":{"source":"iana"},"multipart/signed":{"source":"iana","compressible":false},"multipart/vnd.bint.med-plus":{"source":"iana"},"multipart/voice-message":{"source":"iana"},"multipart/x-mixed-replace":{"source":"iana"},"text/1d-interleaved-parityfec":{"source":"iana"},"text/cache-manifest":{"source":"iana","compressible":true,"extensions":["appcache","manifest"]},"text/calendar":{"source":"iana","extensions":["ics","ifb"]},"text/calender":{"compressible":true},"text/cmd":{"compressible":true},"text/coffeescript":{"extensions":["coffee","litcoffee"]},"text/cql":{"source":"iana"},"text/cql-expression":{"source":"iana"},"text/cql-identifier":{"source":"iana"},"text/css":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["css"]},"text/csv":{"source":"iana","compressible":true,"extensions":["csv"]},"text/csv-schema":{"source":"iana"},"text/directory":{"source":"iana"},"text/dns":{"source":"iana"},"text/ecmascript":{"source":"iana"},"text/encaprtp":{"source":"iana"},"text/enriched":{"source":"iana"},"text/fhirpath":{"source":"iana"},"text/flexfec":{"source":"iana"},"text/fwdred":{"source":"iana"},"text/gff3":{"source":"iana"},"text/grammar-ref-list":{"source":"iana"},"text/html":{"source":"iana","compressible":true,"extensions":["html","htm","shtml"]},"text/jade":{"extensions":["jade"]},"text/javascript":{"source":"iana","compressible":true},"text/jcr-cnd":{"source":"iana"},"text/jsx":{"compressible":true,"extensions":["jsx"]},"text/less":{"compressible":true,"extensions":["less"]},"text/markdown":{"source":"iana","compressible":true,"extensions":["markdown","md"]},"text/mathml":{"source":"nginx","extensions":["mml"]},"text/mdx":{"compressible":true,"extensions":["mdx"]},"text/mizar":{"source":"iana"},"text/n3":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["n3"]},"text/parameters":{"source":"iana","charset":"UTF-8"},"text/parityfec":{"source":"iana"},"text/plain":{"source":"iana","compressible":true,"extensions":["txt","text","conf","def","list","log","in","ini"]},"text/provenance-notation":{"source":"iana","charset":"UTF-8"},"text/prs.fallenstein.rst":{"source":"iana"},"text/prs.lines.tag":{"source":"iana","extensions":["dsc"]},"text/prs.prop.logic":{"source":"iana"},"text/raptorfec":{"source":"iana"},"text/red":{"source":"iana"},"text/rfc822-headers":{"source":"iana"},"text/richtext":{"source":"iana","compressible":true,"extensions":["rtx"]},"text/rtf":{"source":"iana","compressible":true,"extensions":["rtf"]},"text/rtp-enc-aescm128":{"source":"iana"},"text/rtploopback":{"source":"iana"},"text/rtx":{"source":"iana"},"text/sgml":{"source":"iana","extensions":["sgml","sgm"]},"text/shaclc":{"source":"iana"},"text/shex":{"source":"iana","extensions":["shex"]},"text/slim":{"extensions":["slim","slm"]},"text/spdx":{"source":"iana","extensions":["spdx"]},"text/strings":{"source":"iana"},"text/stylus":{"extensions":["stylus","styl"]},"text/t140":{"source":"iana"},"text/tab-separated-values":{"source":"iana","compressible":true,"extensions":["tsv"]},"text/troff":{"source":"iana","extensions":["t","tr","roff","man","me","ms"]},"text/turtle":{"source":"iana","charset":"UTF-8","extensions":["ttl"]},"text/ulpfec":{"source":"iana"},"text/uri-list":{"source":"iana","compressible":true,"extensions":["uri","uris","urls"]},"text/vcard":{"source":"iana","compressible":true,"extensions":["vcard"]},"text/vnd.a":{"source":"iana"},"text/vnd.abc":{"source":"iana"},"text/vnd.ascii-art":{"source":"iana"},"text/vnd.curl":{"source":"iana","extensions":["curl"]},"text/vnd.curl.dcurl":{"source":"apache","extensions":["dcurl"]},"text/vnd.curl.mcurl":{"source":"apache","extensions":["mcurl"]},"text/vnd.curl.scurl":{"source":"apache","extensions":["scurl"]},"text/vnd.debian.copyright":{"source":"iana","charset":"UTF-8"},"text/vnd.dmclientscript":{"source":"iana"},"text/vnd.dvb.subtitle":{"source":"iana","extensions":["sub"]},"text/vnd.esmertec.theme-descriptor":{"source":"iana","charset":"UTF-8"},"text/vnd.familysearch.gedcom":{"source":"iana","extensions":["ged"]},"text/vnd.ficlab.flt":{"source":"iana"},"text/vnd.fly":{"source":"iana","extensions":["fly"]},"text/vnd.fmi.flexstor":{"source":"iana","extensions":["flx"]},"text/vnd.gml":{"source":"iana"},"text/vnd.graphviz":{"source":"iana","extensions":["gv"]},"text/vnd.hans":{"source":"iana"},"text/vnd.hgl":{"source":"iana"},"text/vnd.in3d.3dml":{"source":"iana","extensions":["3dml"]},"text/vnd.in3d.spot":{"source":"iana","extensions":["spot"]},"text/vnd.iptc.newsml":{"source":"iana"},"text/vnd.iptc.nitf":{"source":"iana"},"text/vnd.latex-z":{"source":"iana"},"text/vnd.motorola.reflex":{"source":"iana"},"text/vnd.ms-mediapackage":{"source":"iana"},"text/vnd.net2phone.commcenter.command":{"source":"iana"},"text/vnd.radisys.msml-basic-layout":{"source":"iana"},"text/vnd.senx.warpscript":{"source":"iana"},"text/vnd.si.uricatalogue":{"source":"iana"},"text/vnd.sosi":{"source":"iana"},"text/vnd.sun.j2me.app-descriptor":{"source":"iana","charset":"UTF-8","extensions":["jad"]},"text/vnd.trolltech.linguist":{"source":"iana","charset":"UTF-8"},"text/vnd.wap.si":{"source":"iana"},"text/vnd.wap.sl":{"source":"iana"},"text/vnd.wap.wml":{"source":"iana","extensions":["wml"]},"text/vnd.wap.wmlscript":{"source":"iana","extensions":["wmls"]},"text/vtt":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["vtt"]},"text/x-asm":{"source":"apache","extensions":["s","asm"]},"text/x-c":{"source":"apache","extensions":["c","cc","cxx","cpp","h","hh","dic"]},"text/x-component":{"source":"nginx","extensions":["htc"]},"text/x-fortran":{"source":"apache","extensions":["f","for","f77","f90"]},"text/x-gwt-rpc":{"compressible":true},"text/x-handlebars-template":{"extensions":["hbs"]},"text/x-java-source":{"source":"apache","extensions":["java"]},"text/x-jquery-tmpl":{"compressible":true},"text/x-lua":{"extensions":["lua"]},"text/x-markdown":{"compressible":true,"extensions":["mkd"]},"text/x-nfo":{"source":"apache","extensions":["nfo"]},"text/x-opml":{"source":"apache","extensions":["opml"]},"text/x-org":{"compressible":true,"extensions":["org"]},"text/x-pascal":{"source":"apache","extensions":["p","pas"]},"text/x-processing":{"compressible":true,"extensions":["pde"]},"text/x-sass":{"extensions":["sass"]},"text/x-scss":{"extensions":["scss"]},"text/x-setext":{"source":"apache","extensions":["etx"]},"text/x-sfv":{"source":"apache","extensions":["sfv"]},"text/x-suse-ymp":{"compressible":true,"extensions":["ymp"]},"text/x-uuencode":{"source":"apache","extensions":["uu"]},"text/x-vcalendar":{"source":"apache","extensions":["vcs"]},"text/x-vcard":{"source":"apache","extensions":["vcf"]},"text/xml":{"source":"iana","compressible":true,"extensions":["xml"]},"text/xml-external-parsed-entity":{"source":"iana"},"text/yaml":{"compressible":true,"extensions":["yaml","yml"]},"video/1d-interleaved-parityfec":{"source":"iana"},"video/3gpp":{"source":"iana","extensions":["3gp","3gpp"]},"video/3gpp-tt":{"source":"iana"},"video/3gpp2":{"source":"iana","extensions":["3g2"]},"video/av1":{"source":"iana"},"video/bmpeg":{"source":"iana"},"video/bt656":{"source":"iana"},"video/celb":{"source":"iana"},"video/dv":{"source":"iana"},"video/encaprtp":{"source":"iana"},"video/ffv1":{"source":"iana"},"video/flexfec":{"source":"iana"},"video/h261":{"source":"iana","extensions":["h261"]},"video/h263":{"source":"iana","extensions":["h263"]},"video/h263-1998":{"source":"iana"},"video/h263-2000":{"source":"iana"},"video/h264":{"source":"iana","extensions":["h264"]},"video/h264-rcdo":{"source":"iana"},"video/h264-svc":{"source":"iana"},"video/h265":{"source":"iana"},"video/iso.segment":{"source":"iana","extensions":["m4s"]},"video/jpeg":{"source":"iana","extensions":["jpgv"]},"video/jpeg2000":{"source":"iana"},"video/jpm":{"source":"apache","extensions":["jpm","jpgm"]},"video/jxsv":{"source":"iana"},"video/mj2":{"source":"iana","extensions":["mj2","mjp2"]},"video/mp1s":{"source":"iana"},"video/mp2p":{"source":"iana"},"video/mp2t":{"source":"iana","extensions":["ts"]},"video/mp4":{"source":"iana","compressible":false,"extensions":["mp4","mp4v","mpg4"]},"video/mp4v-es":{"source":"iana"},"video/mpeg":{"source":"iana","compressible":false,"extensions":["mpeg","mpg","mpe","m1v","m2v"]},"video/mpeg4-generic":{"source":"iana"},"video/mpv":{"source":"iana"},"video/nv":{"source":"iana"},"video/ogg":{"source":"iana","compressible":false,"extensions":["ogv"]},"video/parityfec":{"source":"iana"},"video/pointer":{"source":"iana"},"video/quicktime":{"source":"iana","compressible":false,"extensions":["qt","mov"]},"video/raptorfec":{"source":"iana"},"video/raw":{"source":"iana"},"video/rtp-enc-aescm128":{"source":"iana"},"video/rtploopback":{"source":"iana"},"video/rtx":{"source":"iana"},"video/scip":{"source":"iana"},"video/smpte291":{"source":"iana"},"video/smpte292m":{"source":"iana"},"video/ulpfec":{"source":"iana"},"video/vc1":{"source":"iana"},"video/vc2":{"source":"iana"},"video/vnd.cctv":{"source":"iana"},"video/vnd.dece.hd":{"source":"iana","extensions":["uvh","uvvh"]},"video/vnd.dece.mobile":{"source":"iana","extensions":["uvm","uvvm"]},"video/vnd.dece.mp4":{"source":"iana"},"video/vnd.dece.pd":{"source":"iana","extensions":["uvp","uvvp"]},"video/vnd.dece.sd":{"source":"iana","extensions":["uvs","uvvs"]},"video/vnd.dece.video":{"source":"iana","extensions":["uvv","uvvv"]},"video/vnd.directv.mpeg":{"source":"iana"},"video/vnd.directv.mpeg-tts":{"source":"iana"},"video/vnd.dlna.mpeg-tts":{"source":"iana"},"video/vnd.dvb.file":{"source":"iana","extensions":["dvb"]},"video/vnd.fvt":{"source":"iana","extensions":["fvt"]},"video/vnd.hns.video":{"source":"iana"},"video/vnd.iptvforum.1dparityfec-1010":{"source":"iana"},"video/vnd.iptvforum.1dparityfec-2005":{"source":"iana"},"video/vnd.iptvforum.2dparityfec-1010":{"source":"iana"},"video/vnd.iptvforum.2dparityfec-2005":{"source":"iana"},"video/vnd.iptvforum.ttsavc":{"source":"iana"},"video/vnd.iptvforum.ttsmpeg2":{"source":"iana"},"video/vnd.motorola.video":{"source":"iana"},"video/vnd.motorola.videop":{"source":"iana"},"video/vnd.mpegurl":{"source":"iana","extensions":["mxu","m4u"]},"video/vnd.ms-playready.media.pyv":{"source":"iana","extensions":["pyv"]},"video/vnd.nokia.interleaved-multimedia":{"source":"iana"},"video/vnd.nokia.mp4vr":{"source":"iana"},"video/vnd.nokia.videovoip":{"source":"iana"},"video/vnd.objectvideo":{"source":"iana"},"video/vnd.radgamettools.bink":{"source":"iana"},"video/vnd.radgamettools.smacker":{"source":"iana"},"video/vnd.sealed.mpeg1":{"source":"iana"},"video/vnd.sealed.mpeg4":{"source":"iana"},"video/vnd.sealed.swf":{"source":"iana"},"video/vnd.sealedmedia.softseal.mov":{"source":"iana"},"video/vnd.uvvu.mp4":{"source":"iana","extensions":["uvu","uvvu"]},"video/vnd.vivo":{"source":"iana","extensions":["viv"]},"video/vnd.youtube.yt":{"source":"iana"},"video/vp8":{"source":"iana"},"video/vp9":{"source":"iana"},"video/webm":{"source":"apache","compressible":false,"extensions":["webm"]},"video/x-f4v":{"source":"apache","extensions":["f4v"]},"video/x-fli":{"source":"apache","extensions":["fli"]},"video/x-flv":{"source":"apache","compressible":false,"extensions":["flv"]},"video/x-m4v":{"source":"apache","extensions":["m4v"]},"video/x-matroska":{"source":"apache","compressible":false,"extensions":["mkv","mk3d","mks"]},"video/x-mng":{"source":"apache","extensions":["mng"]},"video/x-ms-asf":{"source":"apache","extensions":["asf","asx"]},"video/x-ms-vob":{"source":"apache","extensions":["vob"]},"video/x-ms-wm":{"source":"apache","extensions":["wm"]},"video/x-ms-wmv":{"source":"apache","compressible":false,"extensions":["wmv"]},"video/x-ms-wmx":{"source":"apache","extensions":["wmx"]},"video/x-ms-wvx":{"source":"apache","extensions":["wvx"]},"video/x-msvideo":{"source":"apache","extensions":["avi"]},"video/x-sgi-movie":{"source":"apache","extensions":["movie"]},"video/x-smv":{"source":"apache","extensions":["smv"]},"x-conference/x-cooltalk":{"source":"apache","extensions":["ice"]},"x-shader/x-fragment":{"compressible":true},"x-shader/x-vertex":{"compressible":true}}');

/***/ }),

/***/ 3985:
/***/ ((module) => {

module.exports = JSON.parse('[{"scheme":"fax","description":"fax","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc2806"},{"type":"rfc","href":"http://www.iana.org/go/rfc3966"}]},{"scheme":"filesystem","description":"filesystem","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/historic/filesystem"},{"scheme":"mailserver","description":"Access to data available from mail servers","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc6196"}]},{"scheme":"modem","description":"modem","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc2806"},{"type":"rfc","href":"http://www.iana.org/go/rfc3966"}]},{"scheme":"pack","description":"pack","reference":[{"type":"draft","href":"http://www.iana.org/go/draft-shur-pack-uri-scheme"}],"template":"http://www.iana.org/assignments/uri-schemes/historic/pack"},{"scheme":"prospero","description":"Prospero Directory Service","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc4157"}]},{"scheme":"snews","description":"NNTP over SSL/TLS","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc5538"}]},{"scheme":"videotex","description":"videotex","reference":[{"type":"draft","href":"http://www.iana.org/go/draft-mavrakis-videotex-url-spec"},{"type":"rfc","href":"http://www.iana.org/go/rfc2122"},{"type":"rfc","href":"http://www.iana.org/go/rfc3986"}],"template":"http://www.iana.org/assignments/uri-schemes/historic/videotex"},{"scheme":"wais","description":"Wide Area Information Servers","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc4156"}]},{"scheme":"z39.50","description":"Z39.50 information access","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc1738"},{"type":"rfc","href":"http://www.iana.org/go/rfc2056"}]}]');

/***/ }),

/***/ 9461:
/***/ ((module) => {

module.exports = JSON.parse('[{"scheme":"aaa","description":"Diameter Protocol","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc6733"}]},{"scheme":"aaas","description":"Diameter Protocol with Secure Transport","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc6733"}]},{"scheme":"about","description":"about","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc6694"}]},{"scheme":"acap","description":"application configuration access protocol","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc2244"}]},{"scheme":"acct","description":"acct","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc7565"}]},{"scheme":"cap","description":"Calendar Access Protocol","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc4324"}]},{"scheme":"cid","description":"content identifier","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc2392"}]},{"scheme":"coap","description":"coap","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc7252"}]},{"scheme":"coaps","description":"coaps","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc7252"}]},{"scheme":"crid","description":"TV-Anytime Content Reference Identifier","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc4078"}]},{"scheme":"data","description":"data","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc2397"}]},{"scheme":"dav","description":"dav","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc4918"}]},{"scheme":"dict","description":"dictionary service protocol","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc2229"}]},{"scheme":"dns","description":"Domain Name System","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc4501"}]},{"scheme":"example","description":"example","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc7595"}]},{"scheme":"file","description":"Host-specific file names","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc1738"}]},{"scheme":"ftp","description":"File Transfer Protocol","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc1738"}]},{"scheme":"geo","description":"Geographic Locations","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc5870"}]},{"scheme":"go","description":"go","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc3368"}]},{"scheme":"gopher","description":"The Gopher Protocol","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc4266"}]},{"scheme":"h323","description":"H.323","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc3508"}]},{"scheme":"http","description":"Hypertext Transfer Protocol","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc7230"}]},{"scheme":"https","description":"Hypertext Transfer Protocol Secure","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc7230"}]},{"scheme":"iax","description":"Inter-Asterisk eXchange Version 2","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc5456"}]},{"scheme":"icap","description":"Internet Content Adaptation Protocol","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc3507"}]},{"scheme":"im","description":"Instant Messaging","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc3860"}]},{"scheme":"imap","description":"internet message access protocol","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc5092"}]},{"scheme":"info","description":"Information Assets with Identifiers in Public Namespaces. \\n       (section 3) defines an \\"info\\" registry \\n        of public namespaces, which is maintained by NISO and can be accessed \\n        from .","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc4452"}]},{"scheme":"ipp","description":"Internet Printing Protocol","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc3510"}]},{"scheme":"ipps","description":"Internet Printing Protocol over HTTPS","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc7472"}]},{"scheme":"iris","description":"Internet Registry Information Service","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc3981"}]},{"scheme":"iris.beep","description":"iris.beep","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc3983"}]},{"scheme":"iris.lwz","description":"iris.lwz","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc4993"}]},{"scheme":"iris.xpc","description":"iris.xpc","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc4992"}]},{"scheme":"iris.xpcs","description":"iris.xpcs","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc4992"}]},{"scheme":"jabber","description":"jabber","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/perm/jabber"},{"scheme":"ldap","description":"Lightweight Directory Access Protocol","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc4516"}]},{"scheme":"mailto","description":"Electronic mail address","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc6068"}]},{"scheme":"mid","description":"message identifier","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc2392"}]},{"scheme":"msrp","description":"Message Session Relay Protocol","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc4975"}]},{"scheme":"msrps","description":"Message Session Relay Protocol Secure","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc4975"}]},{"scheme":"mtqp","description":"Message Tracking Query Protocol","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc3887"}]},{"scheme":"mupdate","description":"Mailbox Update (MUPDATE) Protocol","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc3656"}]},{"scheme":"news","description":"USENET news","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc5538"}]},{"scheme":"nfs","description":"network file system protocol","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc2224"}]},{"scheme":"ni","description":"ni","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc6920"}]},{"scheme":"nih","description":"nih","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc6920"}]},{"scheme":"nntp","description":"USENET news using NNTP access","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc5538"}]},{"scheme":"opaquelocktoken","description":"opaquelocktokent","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc4918"}]},{"scheme":"pkcs11","description":"PKCS#11","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc7512"}]},{"scheme":"pop","description":"Post Office Protocol v3","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc2384"}]},{"scheme":"pres","description":"Presence","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc3859"}]},{"scheme":"reload","description":"reload","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc6940"}]},{"scheme":"rtsp","description":"Real-time Streaming Protocol (RTSP)","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc2326"},{"type":"draft","href":"http://www.iana.org/go/RFC-ietf-mmusic-rfc2326bis-40"}]},{"scheme":"rtsps","description":"Real-time Streaming Protocol (RTSP) over TLS","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc2326"},{"type":"draft","href":"http://www.iana.org/go/RFC-ietf-mmusic-rfc2326bis-40"}]},{"scheme":"rtspu","description":"Real-time Streaming Protocol (RTSP) over unreliable datagram transport","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc2326"}]},{"scheme":"service","description":"service location","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc2609"}]},{"scheme":"session","description":"session","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc6787"}]},{"scheme":"shttp","description":"Secure Hypertext Transfer Protocol","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc2660"}]},{"scheme":"sieve","description":"ManageSieve Protocol","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc5804"}]},{"scheme":"sip","description":"session initiation protocol","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc3261"}]},{"scheme":"sips","description":"secure session initiation protocol","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc3261"}]},{"scheme":"sms","description":"Short Message Service","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc5724"}]},{"scheme":"snmp","description":"Simple Network Management Protocol","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc4088"}]},{"scheme":"soap.beep","description":"soap.beep","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc4227"}]},{"scheme":"soap.beeps","description":"soap.beeps","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc4227"}]},{"scheme":"stun","description":"stun","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc7064"}]},{"scheme":"stuns","description":"stuns","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc7064"}]},{"scheme":"tag","description":"tag","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc4151"}]},{"scheme":"tel","description":"telephone","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc3966"}]},{"scheme":"telnet","description":"Reference to interactive sessions","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc4248"}]},{"scheme":"tftp","description":"Trivial File Transfer Protocol","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc3617"}]},{"scheme":"thismessage","description":"multipart/related relative reference resolution","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc2557"}],"template":"http://www.iana.org/assignments/uri-schemes/perm/thismessage"},{"scheme":"tip","description":"Transaction Internet Protocol","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc2371"}]},{"scheme":"tn3270","description":"Interactive 3270 emulation sessions","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc6270"}]},{"scheme":"turn","description":"turn","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc7065"}]},{"scheme":"turns","description":"turns","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc7065"}]},{"scheme":"tv","description":"TV Broadcasts","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc2838"}]},{"scheme":"urn","description":"Uniform Resource Names","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc2141"},{"type":"registry","href":"http://www.iana.org/assignments/urn-namespaces"}]},{"scheme":"vemmi","description":"versatile multimedia interface","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc2122"}]},{"scheme":"vnc","description":"Remote Framebuffer Protocol","reference":[{"type":"draft","href":"http://www.iana.org/go/RFC-warden-appsawg-vnc-scheme-10"}]},{"scheme":"ws","description":"WebSocket connections","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc6455"}]},{"scheme":"wss","description":"Encrypted WebSocket connections","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc6455"}]},{"scheme":"xcon","description":"xcon","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc6501"}]},{"scheme":"xcon-userid","description":"xcon-userid","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc6501"}]},{"scheme":"xmlrpc.beep","description":"xmlrpc.beep","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc3529"}]},{"scheme":"xmlrpc.beeps","description":"xmlrpc.beeps","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc3529"}]},{"scheme":"xmpp","description":"Extensible Messaging and Presence Protocol","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc5122"}]},{"scheme":"z39.50r","description":"Z39.50 Retrieval","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc2056"}]},{"scheme":"z39.50s","description":"Z39.50 Session","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc2056"}]}]');

/***/ }),

/***/ 5978:
/***/ ((module) => {

module.exports = JSON.parse('[{"scheme":"acr","description":"acr","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/acr"},{"scheme":"adiumxtra","description":"adiumxtra","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/adiumxtra"},{"scheme":"afp","description":"afp","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/afp"},{"scheme":"afs","description":"Andrew File System global file names","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc1738"}]},{"scheme":"aim","description":"aim","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/aim"},{"scheme":"appdata","description":"appdata","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/appdata"},{"scheme":"apt","description":"apt","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/apt"},{"scheme":"attachment","description":"attachment","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/attachment"},{"scheme":"aw","description":"aw","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/aw"},{"scheme":"barion","description":"barion","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/barion"},{"scheme":"beshare","description":"beshare","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/beshare"},{"scheme":"bitcoin","description":"bitcoin","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/bitcoin"},{"scheme":"blob","description":"blob","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/blob"},{"scheme":"bolo","description":"bolo","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/bolo"},{"scheme":"callto","description":"callto","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/callto"},{"scheme":"chrome","description":"chrome","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/chrome"},{"scheme":"chrome-extension","description":"chrome-extension","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/chrome-extension"},{"scheme":"com-eventbrite-attendee","description":"com-eventbrite-attendee","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/com-eventbrite-attendee"},{"scheme":"content","description":"content","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/content"},{"scheme":"cvs","description":"cvs","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/cvs"},{"scheme":"dis","description":"dis","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/dis"},{"scheme":"dlna-playcontainer","description":"dlna-playcontainer","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/dlna-playcontainer"},{"scheme":"dlna-playsingle","description":"dlna-playsingle","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/dlna-playsingle"},{"scheme":"dntp","description":"dntp","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/dntp"},{"scheme":"dtn","description":"DTNRG research and development","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc5050"}]},{"scheme":"dvb","description":"dvb","reference":[{"type":"draft","href":"http://www.iana.org/go/draft-mcroberts-uri-dvb"}]},{"scheme":"ed2k","description":"ed2k","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ed2k"},{"scheme":"facetime","description":"facetime","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/facetime"},{"scheme":"feed","description":"feed","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/feed"},{"scheme":"feedready","description":"feedready","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/feedready"},{"scheme":"finger","description":"finger","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/finger"},{"scheme":"fish","description":"fish","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/fish"},{"scheme":"gg","description":"gg","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/gg"},{"scheme":"git","description":"git","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/git"},{"scheme":"gizmoproject","description":"gizmoproject","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/gizmoproject"},{"scheme":"gtalk","description":"gtalk","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/gtalk"},{"scheme":"ham","description":"ham","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc7046"}]},{"scheme":"hcp","description":"hcp","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/hcp"},{"scheme":"icon","description":"icon","reference":[{"type":"draft","href":"http://www.iana.org/go/draft-lafayette-icon-uri-scheme"}]},{"scheme":"iotdisco","description":"iotdisco","reference":[{"type":"uri","href":"http://www.iana.org/assignments/uri-schemes/prov/iotdisco.pdf"}],"template":"http://www.iana.org/assignments/uri-schemes/prov/iotdisco"},{"scheme":"ipn","description":"ipn","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc6260"}]},{"scheme":"irc","description":"irc","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/irc"},{"scheme":"irc6","description":"irc6","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/irc6"},{"scheme":"ircs","description":"ircs","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ircs"},{"scheme":"isostore","description":"isostore","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/isostore"},{"scheme":"itms","description":"itms","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/itms"},{"scheme":"jar","description":"jar","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/jar"},{"scheme":"jms","description":"Java Message Service","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc6167"}]},{"scheme":"keyparc","description":"keyparc","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/keyparc"},{"scheme":"lastfm","description":"lastfm","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/lastfm"},{"scheme":"ldaps","description":"ldaps","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ldaps"},{"scheme":"magnet","description":"magnet","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/magnet"},{"scheme":"maps","description":"maps","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/maps"},{"scheme":"market","description":"market","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/market"},{"scheme":"message","description":"message","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/message"},{"scheme":"mms","description":"mms","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/mms"},{"scheme":"ms-access","description":"ms-access","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ms-access"},{"scheme":"ms-drive-to","description":"ms-drive-to","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ms-drive-to"},{"scheme":"ms-enrollment","description":"ms-enrollment","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ms-enrollment"},{"scheme":"ms-excel","description":"ms-excel","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ms-excel"},{"scheme":"ms-getoffice","description":"ms-getoffice","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ms-getoffice"},{"scheme":"ms-help","description":"ms-help","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ms-help"},{"scheme":"ms-infopath","description":"ms-infopath","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ms-infopath"},{"scheme":"ms-media-stream-id","description":"ms-media-stream-id","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ms-media-stream-id"},{"scheme":"ms-powerpoint","description":"ms-powerpoint","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ms-powerpoint"},{"scheme":"ms-project","description":"ms-project","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ms-project"},{"scheme":"ms-publisher","description":"ms-publisher","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ms-publisher"},{"scheme":"ms-search-repair","description":"ms-search-repair","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ms-search-repair"},{"scheme":"ms-secondary-screen-controller","description":"ms-secondary-screen-controller","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ms-secondary-screen-controller"},{"scheme":"ms-secondary-screen-setup","description":"ms-secondary-screen-setup","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ms-secondary-screen-setup"},{"scheme":"ms-settings","description":"ms-settings","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ms-settings"},{"scheme":"ms-settings-airplanemode","description":"ms-settings-airplanemode","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ms-settings-airplanemode"},{"scheme":"ms-settings-bluetooth","description":"ms-settings-bluetooth","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ms-settings-bluetooth"},{"scheme":"ms-settings-camera","description":"ms-settings-camera","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ms-settings-camera"},{"scheme":"ms-settings-cellular","description":"ms-settings-cellular","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ms-settings-cellular"},{"scheme":"ms-settings-cloudstorage","description":"ms-settings-cloudstorage","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ms-settings-cloudstorage"},{"scheme":"ms-settings-connectabledevices","description":"ms-settings-connectabledevices","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ms-settings-connectabledevices"},{"scheme":"ms-settings-displays-topology","description":"ms-settings-displays-topology","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ms-settings-displays-topology"},{"scheme":"ms-settings-emailandaccounts","description":"ms-settings-emailandaccounts","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ms-settings-emailandaccounts"},{"scheme":"ms-settings-language","description":"ms-settings-language","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ms-settings-language"},{"scheme":"ms-settings-location","description":"ms-settings-location","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ms-settings-location"},{"scheme":"ms-settings-lock","description":"ms-settings-lock","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ms-settings-lock"},{"scheme":"ms-settings-nfctransactions","description":"ms-settings-nfctransactions","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ms-settings-nfctransactions"},{"scheme":"ms-settings-notifications","description":"ms-settings-notifications","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ms-settings-notifications"},{"scheme":"ms-settings-power","description":"ms-settings-power","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ms-settings-power"},{"scheme":"ms-settings-privacy","description":"ms-settings-privacy","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ms-settings-privacy"},{"scheme":"ms-settings-proximity","description":"ms-settings-proximity","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ms-settings-proximity"},{"scheme":"ms-settings-screenrotation","description":"ms-settings-screenrotation","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ms-settings-screenrotation"},{"scheme":"ms-settings-wifi","description":"ms-settings-wifi","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ms-settings-wifi"},{"scheme":"ms-settings-workplace","description":"ms-settings-workplace","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ms-settings-workplace"},{"scheme":"ms-spd","description":"ms-spd","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ms-spd"},{"scheme":"ms-transit-to","description":"ms-transit-to","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ms-transit-to"},{"scheme":"ms-visio","description":"ms-visio","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ms-visio"},{"scheme":"ms-walk-to","description":"ms-walk-to","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ms-walk-to"},{"scheme":"ms-word","description":"ms-word","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ms-word"},{"scheme":"msnim","description":"msnim","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/msnim"},{"scheme":"mumble","description":"mumble","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/mumble"},{"scheme":"mvn","description":"mvn","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/mvn"},{"scheme":"notes","description":"notes","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/notes"},{"scheme":"oid","description":"oid","reference":[{"type":"draft","href":"http://www.iana.org/go/draft-larmouth-oid-iri"}],"template":"http://www.iana.org/assignments/uri-schemes/prov/oid"},{"scheme":"palm","description":"palm","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/palm"},{"scheme":"paparazzi","description":"paparazzi","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/paparazzi"},{"scheme":"platform","description":"platform","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/platform"},{"scheme":"proxy","description":"proxy","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/proxy"},{"scheme":"psyc","description":"psyc","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/psyc"},{"scheme":"query","description":"query","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/query"},{"scheme":"redis","description":"redis","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/redis"},{"scheme":"rediss","description":"rediss","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/rediss"},{"scheme":"res","description":"res","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/res"},{"scheme":"resource","description":"resource","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/resource"},{"scheme":"rmi","description":"rmi","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/rmi"},{"scheme":"rsync","description":"rsync","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc5781"}]},{"scheme":"rtmfp","description":"rtmfp","reference":[{"type":"rfc","href":"http://www.iana.org/go/rfc7425"}],"template":"http://www.iana.org/assignments/uri-schemes/prov/rtmfp"},{"scheme":"rtmp","description":"rtmp","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/rtmp"},{"scheme":"secondlife","description":"query","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/secondlife"},{"scheme":"sftp","description":"query","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/sftp"},{"scheme":"sgn","description":"sgn","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/sgn"},{"scheme":"skype","description":"skype","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/skype"},{"scheme":"smb","description":"smb","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/smb"},{"scheme":"smtp","description":"smtp","reference":[{"type":"draft","href":"http://www.iana.org/go/draft-melnikov-smime-msa-to-mda"}],"template":"http://www.iana.org/assignments/uri-schemes/prov/smtp"},{"scheme":"soldat","description":"soldat","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/soldat"},{"scheme":"spotify","description":"spotify","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/spotify"},{"scheme":"ssh","description":"ssh","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ssh"},{"scheme":"steam","description":"steam","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/steam"},{"scheme":"submit","description":"submit","reference":[{"type":"draft","href":"http://www.iana.org/go/draft-melnikov-smime-msa-to-mda"}],"template":"http://www.iana.org/assignments/uri-schemes/prov/submit"},{"scheme":"svn","description":"svn","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/svn"},{"scheme":"teamspeak","description":"teamspeak","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/teamspeak"},{"scheme":"teliaeid","description":"teliaeid","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/teliaeid"},{"scheme":"things","description":"things","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/things"},{"scheme":"tool","description":"tool","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/tool"},{"scheme":"udp","description":"udp","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/udp"},{"scheme":"unreal","description":"unreal","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/unreal"},{"scheme":"ut2004","description":"ut2004","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ut2004"},{"scheme":"v-event","description":"v-event","reference":[{"type":"draft","href":"http://www.iana.org/go/draft-menderico-v-event-uri"}],"template":"http://www.iana.org/assignments/uri-schemes/prov/v-event"},{"scheme":"ventrilo","description":"ventrilo","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ventrilo"},{"scheme":"view-source","description":"view-source","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/view-source"},{"scheme":"webcal","description":"webcal","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/webcal"},{"scheme":"wpid","description":"wpid","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/wpid"},{"scheme":"wtai","description":"wtai","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/wtai"},{"scheme":"wyciwyg","description":"wyciwyg","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/wyciwyg"},{"scheme":"xfire","description":"xfire","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/xfire"},{"scheme":"xri","description":"xri","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/xri"},{"scheme":"ymsgr","description":"ymsgr","reference":[],"template":"http://www.iana.org/assignments/uri-schemes/prov/ymsgr"}]');

/***/ }),

/***/ 203:
/***/ ((module) => {

module.exports = JSON.parse('[{"scheme":"android-app"},{"scheme":"webpack"},{"scheme":"s3","description":"Amazon Web Services S3 bucket"},{"scheme":"gs","description":"Google Cloud Storage"},{"scheme":"mqtt","description":"Message Queuing Telemetry Transport Protocol"},{"scheme":"modbus+tcp","description":"Modbus over TCP"}]');

/***/ }),

/***/ 4772:
/***/ ((module) => {

module.exports = JSON.parse('["aaa","aarp","abarth","abb","abbott","abbvie","abc","able","abogado","abudhabi","ac","academy","accenture","accountant","accountants","aco","actor","ad","ads","adult","ae","aeg","aero","aetna","af","afl","africa","ag","agakhan","agency","ai","aig","airbus","airforce","airtel","akdn","al","alfaromeo","alibaba","alipay","allfinanz","allstate","ally","alsace","alstom","am","amazon","americanexpress","americanfamily","amex","amfam","amica","amsterdam","analytics","android","anquan","anz","ao","aol","apartments","app","apple","aq","aquarelle","ar","arab","aramco","archi","army","arpa","art","arte","as","asda","asia","associates","at","athleta","attorney","au","auction","audi","audible","audio","auspost","author","auto","autos","avianca","aw","aws","ax","axa","az","azure","ba","baby","baidu","banamex","bananarepublic","band","bank","bar","barcelona","barclaycard","barclays","barefoot","bargains","baseball","basketball","bauhaus","bayern","bb","bbc","bbt","bbva","bcg","bcn","bd","be","beats","beauty","beer","bentley","berlin","best","bestbuy","bet","bf","bg","bh","bharti","bi","bible","bid","bike","bing","bingo","bio","biz","bj","black","blackfriday","blockbuster","blog","bloomberg","blue","bm","bms","bmw","bn","bnpparibas","bo","boats","boehringer","bofa","bom","bond","boo","book","booking","bosch","bostik","boston","bot","boutique","box","br","bradesco","bridgestone","broadway","broker","brother","brussels","bs","bt","build","builders","business","buy","buzz","bv","bw","by","bz","bzh","ca","cab","cafe","cal","call","calvinklein","cam","camera","camp","canon","capetown","capital","capitalone","car","caravan","cards","care","career","careers","cars","casa","case","cash","casino","cat","catering","catholic","cba","cbn","cbre","cbs","cc","cd","center","ceo","cern","cf","cfa","cfd","cg","ch","chanel","channel","charity","chase","chat","cheap","chintai","christmas","chrome","church","ci","cipriani","circle","cisco","citadel","citi","citic","city","cityeats","ck","cl","claims","cleaning","click","clinic","clinique","clothing","cloud","club","clubmed","cm","cn","co","coach","codes","coffee","college","cologne","com","comcast","commbank","community","company","compare","computer","comsec","condos","construction","consulting","contact","contractors","cooking","cookingchannel","cool","coop","corsica","country","coupon","coupons","courses","cpa","cr","credit","creditcard","creditunion","cricket","crown","crs","cruise","cruises","cu","cuisinella","cv","cw","cx","cy","cymru","cyou","cz","dabur","dad","dance","data","date","dating","datsun","day","dclk","dds","de","deal","dealer","deals","degree","delivery","dell","deloitte","delta","democrat","dental","dentist","desi","design","dev","dhl","diamonds","diet","digital","direct","directory","discount","discover","dish","diy","dj","dk","dm","dnp","do","docs","doctor","dog","domains","dot","download","drive","dtv","dubai","dunlop","dupont","durban","dvag","dvr","dz","earth","eat","ec","eco","edeka","edu","education","ee","eg","email","emerck","energy","engineer","engineering","enterprises","epson","equipment","er","ericsson","erni","es","esq","estate","et","etisalat","eu","eurovision","eus","events","exchange","expert","exposed","express","extraspace","fage","fail","fairwinds","faith","family","fan","fans","farm","farmers","fashion","fast","fedex","feedback","ferrari","ferrero","fi","fiat","fidelity","fido","film","final","finance","financial","fire","firestone","firmdale","fish","fishing","fit","fitness","fj","fk","flickr","flights","flir","florist","flowers","fly","fm","fo","foo","food","foodnetwork","football","ford","forex","forsale","forum","foundation","fox","fr","free","fresenius","frl","frogans","frontdoor","frontier","ftr","fujitsu","fun","fund","furniture","futbol","fyi","ga","gal","gallery","gallo","gallup","game","games","gap","garden","gay","gb","gbiz","gd","gdn","ge","gea","gent","genting","george","gf","gg","ggee","gh","gi","gift","gifts","gives","giving","gl","glass","gle","global","globo","gm","gmail","gmbh","gmo","gmx","gn","godaddy","gold","goldpoint","golf","goo","goodyear","goog","google","gop","got","gov","gp","gq","gr","grainger","graphics","gratis","green","gripe","grocery","group","gs","gt","gu","guardian","gucci","guge","guide","guitars","guru","gw","gy","hair","hamburg","hangout","haus","hbo","hdfc","hdfcbank","health","healthcare","help","helsinki","here","hermes","hgtv","hiphop","hisamitsu","hitachi","hiv","hk","hkt","hm","hn","hockey","holdings","holiday","homedepot","homegoods","homes","homesense","honda","horse","hospital","host","hosting","hot","hoteles","hotels","hotmail","house","how","hr","hsbc","ht","hu","hughes","hyatt","hyundai","ibm","icbc","ice","icu","id","ie","ieee","ifm","ikano","il","im","imamat","imdb","immo","immobilien","in","inc","industries","infiniti","info","ing","ink","institute","insurance","insure","int","international","intuit","investments","io","ipiranga","iq","ir","irish","is","ismaili","ist","istanbul","it","itau","itv","jaguar","java","jcb","je","jeep","jetzt","jewelry","jio","jll","jm","jmp","jnj","jo","jobs","joburg","jot","joy","jp","jpmorgan","jprs","juegos","juniper","kaufen","kddi","ke","kerryhotels","kerrylogistics","kerryproperties","kfh","kg","kh","ki","kia","kids","kim","kinder","kindle","kitchen","kiwi","km","kn","koeln","komatsu","kosher","kp","kpmg","kpn","kr","krd","kred","kuokgroup","kw","ky","kyoto","kz","la","lacaixa","lamborghini","lamer","lancaster","lancia","land","landrover","lanxess","lasalle","lat","latino","latrobe","law","lawyer","lb","lc","lds","lease","leclerc","lefrak","legal","lego","lexus","lgbt","li","lidl","life","lifeinsurance","lifestyle","lighting","like","lilly","limited","limo","lincoln","linde","link","lipsy","live","living","lk","llc","llp","loan","loans","locker","locus","lol","london","lotte","lotto","love","lpl","lplfinancial","lr","ls","lt","ltd","ltda","lu","lundbeck","luxe","luxury","lv","ly","ma","macys","madrid","maif","maison","makeup","man","management","mango","map","market","marketing","markets","marriott","marshalls","maserati","mattel","mba","mc","mckinsey","md","me","med","media","meet","melbourne","meme","memorial","men","menu","merckmsd","mg","mh","miami","microsoft","mil","mini","mint","mit","mitsubishi","mk","ml","mlb","mls","mm","mma","mn","mo","mobi","mobile","moda","moe","moi","mom","monash","money","monster","mormon","mortgage","moscow","moto","motorcycles","mov","movie","mp","mq","mr","ms","msd","mt","mtn","mtr","mu","museum","music","mutual","mv","mw","mx","my","mz","na","nab","nagoya","name","natura","navy","nba","nc","ne","nec","net","netbank","netflix","network","neustar","new","news","next","nextdirect","nexus","nf","nfl","ng","ngo","nhk","ni","nico","nike","nikon","ninja","nissan","nissay","nl","no","nokia","northwesternmutual","norton","now","nowruz","nowtv","np","nr","nra","nrw","ntt","nu","nyc","nz","obi","observer","office","okinawa","olayan","olayangroup","oldnavy","ollo","om","omega","one","ong","onl","online","ooo","open","oracle","orange","org","organic","origins","osaka","otsuka","ott","ovh","pa","page","panasonic","paris","pars","partners","parts","party","passagens","pay","pccw","pe","pet","pf","pfizer","pg","ph","pharmacy","phd","philips","phone","photo","photography","photos","physio","pics","pictet","pictures","pid","pin","ping","pink","pioneer","pizza","pk","pl","place","play","playstation","plumbing","plus","pm","pn","pnc","pohl","poker","politie","porn","post","pr","pramerica","praxi","press","prime","pro","prod","productions","prof","progressive","promo","properties","property","protection","pru","prudential","ps","pt","pub","pw","pwc","py","qa","qpon","quebec","quest","racing","radio","re","read","realestate","realtor","realty","recipes","red","redstone","redumbrella","rehab","reise","reisen","reit","reliance","ren","rent","rentals","repair","report","republican","rest","restaurant","review","reviews","rexroth","rich","richardli","ricoh","ril","rio","rip","ro","rocher","rocks","rodeo","rogers","room","rs","rsvp","ru","rugby","ruhr","run","rw","rwe","ryukyu","sa","saarland","safe","safety","sakura","sale","salon","samsclub","samsung","sandvik","sandvikcoromant","sanofi","sap","sarl","sas","save","saxo","sb","sbi","sbs","sc","sca","scb","schaeffler","schmidt","scholarships","school","schule","schwarz","science","scot","sd","se","search","seat","secure","security","seek","select","sener","services","seven","sew","sex","sexy","sfr","sg","sh","shangrila","sharp","shaw","shell","shia","shiksha","shoes","shop","shopping","shouji","show","showtime","si","silk","sina","singles","site","sj","sk","ski","skin","sky","skype","sl","sling","sm","smart","smile","sn","sncf","so","soccer","social","softbank","software","sohu","solar","solutions","song","sony","soy","spa","space","sport","spot","sr","srl","ss","st","stada","staples","star","statebank","statefarm","stc","stcgroup","stockholm","storage","store","stream","studio","study","style","su","sucks","supplies","supply","support","surf","surgery","suzuki","sv","swatch","swiss","sx","sy","sydney","systems","sz","tab","taipei","talk","taobao","target","tatamotors","tatar","tattoo","tax","taxi","tc","tci","td","tdk","team","tech","technology","tel","temasek","tennis","teva","tf","tg","th","thd","theater","theatre","tiaa","tickets","tienda","tiffany","tips","tires","tirol","tj","tjmaxx","tjx","tk","tkmaxx","tl","tm","tmall","tn","to","today","tokyo","tools","top","toray","toshiba","total","tours","town","toyota","toys","tr","trade","trading","training","travel","travelchannel","travelers","travelersinsurance","trust","trv","tt","tube","tui","tunes","tushu","tv","tvs","tw","tz","ua","ubank","ubs","ug","uk","unicom","university","uno","uol","ups","us","uy","uz","va","vacations","vana","vanguard","vc","ve","vegas","ventures","verisign","vermögensberater","vermögensberatung","versicherung","vet","vg","vi","viajes","video","vig","viking","villas","vin","vip","virgin","visa","vision","viva","vivo","vlaanderen","vn","vodka","volkswagen","volvo","vote","voting","voto","voyage","vu","vuelos","wales","walmart","walter","wang","wanggou","watch","watches","weather","weatherchannel","webcam","weber","website","wed","wedding","weibo","weir","wf","whoswho","wien","wiki","williamhill","win","windows","wine","winners","wme","wolterskluwer","woodside","work","works","world","wow","ws","wtc","wtf","xbox","xerox","xfinity","xihuan","xin","xxx","xyz","yachts","yahoo","yamaxun","yandex","ye","yodobashi","yoga","yokohama","you","youtube","yt","yun","za","zappos","zara","zero","zip","zm","zone","zuerich","zw","ελ","ευ","бг","бел","дети","ею","католик","ком","мкд","мон","москва","онлайн","орг","рус","рф","сайт","срб","укр","қаз","հայ","ישראל","קום","ابوظبي","اتصالات","ارامكو","الاردن","البحرين","الجزائر","السعودية","العليان","المغرب","امارات","ایران","بارت","بازار","بيتك","بھارت","تونس","سودان","سورية","شبكة","عراق","عرب","عمان","فلسطين","قطر","كاثوليك","كوم","مصر","مليسيا","موريتانيا","موقع","همراه","پاکستان","ڀارت","कॉम","नेट","भारत","भारतम्","भारोत","संगठन","বাংলা","ভারত","ভাৰত","ਭਾਰਤ","ભારત","ଭାରତ","இந்தியா","இலங்கை","சிங்கப்பூர்","భారత్","ಭಾರತ","ഭാരതം","ලංකා","คอม","ไทย","ລາວ","გე","みんな","アマゾン","クラウド","グーグル","コム","ストア","セール","ファッション","ポイント","世界","中信","中国","中國","中文网","亚马逊","企业","佛山","信息","健康","八卦","公司","公益","台湾","台灣","商城","商店","商标","嘉里","嘉里大酒店","在线","大拿","天主教","娱乐","家電","广东","微博","慈善","我爱你","手机","招聘","政务","政府","新加坡","新闻","时尚","書籍","机构","淡马锡","游戏","澳門","点看","移动","组织机构","网址","网店","网站","网络","联通","谷歌","购物","通販","集团","電訊盈科","飞利浦","食品","餐厅","香格里拉","香港","닷넷","닷컴","삼성","한국"]');

/***/ })

/******/ });
/************************************************************************/
/******/ // The module cache
/******/ var __webpack_module_cache__ = {};
/******/ 
/******/ // The require function
/******/ function __nccwpck_require__(moduleId) {
/******/ 	// Check if module is in cache
/******/ 	var cachedModule = __webpack_module_cache__[moduleId];
/******/ 	if (cachedModule !== undefined) {
/******/ 		return cachedModule.exports;
/******/ 	}
/******/ 	// Create a new module (and put it into the cache)
/******/ 	var module = __webpack_module_cache__[moduleId] = {
/******/ 		// no module.id needed
/******/ 		// no module.loaded needed
/******/ 		exports: {}
/******/ 	};
/******/ 
/******/ 	// Execute the module function
/******/ 	var threw = true;
/******/ 	try {
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __nccwpck_require__);
/******/ 		threw = false;
/******/ 	} finally {
/******/ 		if(threw) delete __webpack_module_cache__[moduleId];
/******/ 	}
/******/ 
/******/ 	// Return the exports of the module
/******/ 	return module.exports;
/******/ }
/******/ 
/******/ // expose the modules object (__webpack_modules__)
/******/ __nccwpck_require__.m = __webpack_modules__;
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/async module */
/******/ (() => {
/******/ 	var webpackQueues = typeof Symbol === "function" ? Symbol("webpack queues") : "__webpack_queues__";
/******/ 	var webpackExports = typeof Symbol === "function" ? Symbol("webpack exports") : "__webpack_exports__";
/******/ 	var webpackError = typeof Symbol === "function" ? Symbol("webpack error") : "__webpack_error__";
/******/ 	var resolveQueue = (queue) => {
/******/ 		if(queue && !queue.d) {
/******/ 			queue.d = 1;
/******/ 			queue.forEach((fn) => (fn.r--));
/******/ 			queue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));
/******/ 		}
/******/ 	}
/******/ 	var wrapDeps = (deps) => (deps.map((dep) => {
/******/ 		if(dep !== null && typeof dep === "object") {
/******/ 			if(dep[webpackQueues]) return dep;
/******/ 			if(dep.then) {
/******/ 				var queue = [];
/******/ 				queue.d = 0;
/******/ 				dep.then((r) => {
/******/ 					obj[webpackExports] = r;
/******/ 					resolveQueue(queue);
/******/ 				}, (e) => {
/******/ 					obj[webpackError] = e;
/******/ 					resolveQueue(queue);
/******/ 				});
/******/ 				var obj = {};
/******/ 				obj[webpackQueues] = (fn) => (fn(queue));
/******/ 				return obj;
/******/ 			}
/******/ 		}
/******/ 		var ret = {};
/******/ 		ret[webpackQueues] = x => {};
/******/ 		ret[webpackExports] = dep;
/******/ 		return ret;
/******/ 	}));
/******/ 	__nccwpck_require__.a = (module, body, hasAwait) => {
/******/ 		var queue;
/******/ 		hasAwait && ((queue = []).d = 1);
/******/ 		var depQueues = new Set();
/******/ 		var exports = module.exports;
/******/ 		var currentDeps;
/******/ 		var outerResolve;
/******/ 		var reject;
/******/ 		var promise = new Promise((resolve, rej) => {
/******/ 			reject = rej;
/******/ 			outerResolve = resolve;
/******/ 		});
/******/ 		promise[webpackExports] = exports;
/******/ 		promise[webpackQueues] = (fn) => (queue && fn(queue), depQueues.forEach(fn), promise["catch"](x => {}));
/******/ 		module.exports = promise;
/******/ 		body((deps) => {
/******/ 			currentDeps = wrapDeps(deps);
/******/ 			var fn;
/******/ 			var getResult = () => (currentDeps.map((d) => {
/******/ 				if(d[webpackError]) throw d[webpackError];
/******/ 				return d[webpackExports];
/******/ 			}))
/******/ 			var promise = new Promise((resolve) => {
/******/ 				fn = () => (resolve(getResult));
/******/ 				fn.r = 0;
/******/ 				var fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));
/******/ 				currentDeps.map((dep) => (dep[webpackQueues](fnQueue)));
/******/ 			});
/******/ 			return fn.r ? promise : getResult();
/******/ 		}, (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue)));
/******/ 		queue && (queue.d = 0);
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/define property getters */
/******/ (() => {
/******/ 	// define getter functions for harmony exports
/******/ 	__nccwpck_require__.d = (exports, definition) => {
/******/ 		for(var key in definition) {
/******/ 			if(__nccwpck_require__.o(definition, key) && !__nccwpck_require__.o(exports, key)) {
/******/ 				Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 			}
/******/ 		}
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/ensure chunk */
/******/ (() => {
/******/ 	__nccwpck_require__.f = {};
/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__nccwpck_require__.e = (chunkId) => {
/******/ 		return Promise.all(Object.keys(__nccwpck_require__.f).reduce((promises, key) => {
/******/ 			__nccwpck_require__.f[key](chunkId, promises);
/******/ 			return promises;
/******/ 		}, []));
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/get javascript chunk filename */
/******/ (() => {
/******/ 	// This function allow to reference async chunks
/******/ 	__nccwpck_require__.u = (chunkId) => {
/******/ 		// return url for filenames based on template
/******/ 		return "" + chunkId + ".index.js";
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/hasOwnProperty shorthand */
/******/ (() => {
/******/ 	__nccwpck_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ })();
/******/ 
/******/ /* webpack/runtime/make namespace object */
/******/ (() => {
/******/ 	// define __esModule on exports
/******/ 	__nccwpck_require__.r = (exports) => {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/compat */
/******/ 
/******/ if (typeof __nccwpck_require__ !== 'undefined') __nccwpck_require__.ab = new URL('.', import.meta.url).pathname.slice(import.meta.url.match(/^file:\/\/\/\w:/) ? 1 : 0, -1) + "/";
/******/ 
/******/ /* webpack/runtime/import chunk loading */
/******/ (() => {
/******/ 	// no baseURI
/******/ 	
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		179: 0
/******/ 	};
/******/ 	
/******/ 	var installChunk = (data) => {
/******/ 		var {ids, modules, runtime} = data;
/******/ 		// add "modules" to the modules object,
/******/ 		// then flag all "ids" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0;
/******/ 		for(moduleId in modules) {
/******/ 			if(__nccwpck_require__.o(modules, moduleId)) {
/******/ 				__nccwpck_require__.m[moduleId] = modules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(runtime) runtime(__nccwpck_require__);
/******/ 		for(;i < ids.length; i++) {
/******/ 			chunkId = ids[i];
/******/ 			if(__nccwpck_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				installedChunks[chunkId][0]();
/******/ 			}
/******/ 			installedChunks[ids[i]] = 0;
/******/ 		}
/******/ 	
/******/ 	}
/******/ 	
/******/ 	__nccwpck_require__.f.j = (chunkId, promises) => {
/******/ 			// import() chunk loading for javascript
/******/ 			var installedChunkData = __nccwpck_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;
/******/ 			if(installedChunkData !== 0) { // 0 means "already installed".
/******/ 	
/******/ 				// a Promise means "currently loading".
/******/ 				if(installedChunkData) {
/******/ 					promises.push(installedChunkData[1]);
/******/ 				} else {
/******/ 					if(true) { // all chunks have JS
/******/ 						// setup Promise in chunk cache
/******/ 						var promise = import("./" + __nccwpck_require__.u(chunkId)).then(installChunk, (e) => {
/******/ 							if(installedChunks[chunkId] !== 0) installedChunks[chunkId] = undefined;
/******/ 							throw e;
/******/ 						});
/******/ 						var promise = Promise.race([promise, new Promise((resolve) => (installedChunkData = installedChunks[chunkId] = [resolve]))])
/******/ 						promises.push(installedChunkData[1] = promise);
/******/ 					} else installedChunks[chunkId] = 0;
/******/ 				}
/******/ 			}
/******/ 	};
/******/ 	
/******/ 	// no external install chunk
/******/ 	
/******/ 	// no on chunks loaded
/******/ })();
/******/ 
/************************************************************************/
/******/ 
/******/ // startup
/******/ // Load entry module and return exports
/******/ // This entry module used 'module' so it can't be inlined
/******/ var __webpack_exports__ = __nccwpck_require__(7771);
/******/ __webpack_exports__ = await __webpack_exports__;
/******/ 
